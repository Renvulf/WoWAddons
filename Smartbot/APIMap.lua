Smartbot = Smartbot or {}
Smartbot.APIMap = {
  ['ErrorLogger_GetErrors'] = {
    {name='ErrorLogger_GetErrors', count=2, confidence=0.40, sample='function ZGV:ErrorLogger_GetErrors()'},
  },
  ['GetDB'] = {
    {name='GetDB', count=1, confidence=0.20, sample='local db = BugGrabber:GetDB()'},
  },
  ['GenerateAndShow'] = {
    {name='GenerateAndShow', count=4, confidence=0.80, sample='OnAccept = function(self) ZGV.BugReport:GenerateAndShow() end,'},
  },
  ['GetAddOnMetadata'] = {
    {name='GetAddOnMetadata', count=4, confidence=0.80, sample='local buggrabber = GetAddOnMetadata("BugGrabber", "Version")'},
    {name='C_AddOns.GetAddOnMetadata', count=3, confidence=0.60, sample='ZGV.version = C_AddOns.GetAddOnMetadata(name,"version") .. "." .. ZGV.revision'},
  },
  ['LibStub'] = {
    {name='LibStub', count=312, confidence=1.00, sample='local lib, minor = LibStub(major, true)'},
  },
  ['StaticPopup_Show'] = {
    {name='StaticPopup_Show', count=4, confidence=0.80, sample='StaticPopup_Show("ZYGORGUIDESVIEWER_ERROR")'},
  },
  ['PruneDumps'] = {
    {name='PruneDumps', count=2, confidence=0.40, sample='BugReport:PruneDumps()'},
  },
  ['SetDumpFunc'] = {
    {name='SetDumpFunc', count=1, confidence=0.20, sample='Spoo:SetDumpFunc(function (index,data)'},
  },
  ['ShowDump'] = {
    {name='ShowDump', count=27, confidence=1.00, sample='ZGV:ShowDump(index.." = "..ZGV:Serialize(data))'},
  },
  ['Serialize'] = {
    {name='Serialize', count=32, confidence=1.00, sample='ZGV:ShowDump(index.." = "..ZGV:Serialize(data))'},
  },
  ['SkinData'] = {
    {name='SkinData', count=549, confidence=1.00, sample='local function SkinData(property)'},
    {name='ZGV.UI.SkinData', count=37, confidence=1.00, sample='return ZGV.UI.SkinData(property)'},
    {name='UI.SkinData', count=1, confidence=0.20, sample='function UI.SkinData(property,...)'},
  },
  ['CreateDumpFrameBasic'] = {
    {name='CreateDumpFrameBasic', count=2, confidence=0.40, sample='local function CreateDumpFrameBasic()'},
  },
  ['CHAIN'] = {
    {name='CHAIN', count=831, confidence=1.00, sample='local frame = CHAIN(ui:Create("Frame",UIParent,name))'},
  },
  ['Create'] = {
    {name='Create', count=238, confidence=1.00, sample='local frame = CHAIN(ui:Create("Frame",UIParent,name))'},
    {name='ItemBase.Create', count=8, confidence=1.00, sample='-- Each item has to use ItemBase.Create(widgetType) to'},
  },
  ['SetSize'] = {
    {name='SetSize', count=1066, confidence=1.00, sample=':SetSize(900,570)'},
    {name='PixelUtil.SetSize', count=34, confidence=1.00, sample='PixelUtil.SetSize(buttonObject.button, width or 100, height or 20)'},
    {name='DFPixelUtil.SetSize', count=1, confidence=0.20, sample='function DFPixelUtil.SetSize(region, width, height, minWidthPixels, minHeightPixels)'},
  },
  ['SetPoint'] = {
    {name='SetPoint', count=4484, confidence=1.00, sample=':SetPoint("CENTER", UIParent, "CENTER")'},
    {name='ItemBase.SetPoint', count=1, confidence=0.20, sample='function ItemBase.SetPoint(self, ...)'},
    {name='PixelUtil.SetPoint', count=179, confidence=1.00, sample='PixelUtil.SetPoint(titleBarTools, "topleft", optionsLeftSideBarMenu, "topleft", 2, -3)'},
    {name='DFPixelUtil.SetPoint', count=1, confidence=0.20, sample='function DFPixelUtil.SetPoint(region, point, relativeTo, relativePoint, offsetX, offsetY, minOffsetXPixels, minOffsetYPixels)'},
  },
  ['SetFrameStrata'] = {
    {name='SetFrameStrata', count=224, confidence=1.00, sample=':SetFrameStrata("FULLSCREEN")'},
  },
  ['Hide'] = {
    {name='Hide', count=2224, confidence=1.00, sample=':Hide()'},
    {name='ItemBase.Hide', count=1, confidence=0.20, sample='function ItemBase.Hide(self)'},
  },
  ['CanDrag'] = {
    {name='CanDrag', count=30, confidence=1.00, sample='if ZGV.DEV then frame:CanDrag(true) end'},
  },
  ['SetBackdrop'] = {
    {name='SetBackdrop', count=370, confidence=1.00, sample=':SetBackdrop(SkinData("BugEditBackdrop"))'},
  },
  ['SetBackdropColor'] = {
    {name='SetBackdropColor', count=503, confidence=1.00, sample=':SetBackdropColor(unpack(SkinData("BugEditBackdropColor")))'},
  },
  ['MySetPoint'] = {
    {name='MySetPoint', count=6, confidence=1.00, sample=':MySetPoint("BOTTOMRIGHT", frame, "BOTTOMRIGHT", -1, 38)'},
  },
  ['HookScript'] = {
    {name='HookScript', count=97, confidence=1.00, sample=':HookScript("OnShow",function(me) me.child:SetFocus(true) end)'},
  },
  ['SetFocus'] = {
    {name='SetFocus', count=70, confidence=1.00, sample=':HookScript("OnShow",function(me) me.child:SetFocus(true) end)'},
  },
  ['SetScript'] = {
    {name='SetScript', count=1812, confidence=1.00, sample='scroll.child:SetScript("OnEscapePressed", function() frame.save=nil frame:Hide() end)'},
  },
  ['CreateFrame'] = {
    {name='CreateFrame', count=955, confidence=1.00, sample='local close = CHAIN(CreateFrame("Button", nil, frame))'},
    {name='Details.AllInOneWindow.CreateFrame', count=2, confidence=0.40, sample='function Details.AllInOneWindow.CreateFrame(settingId)'},
  },
  ['AssignToButton'] = {
    {name='AssignToButton', count=76, confidence=1.00, sample='ZGV.ButtonSets.TitleButtons.CLOSE:AssignToButton(close)'},
  },
  ['CreateFontString'] = {
    {name='CreateFontString', count=566, confidence=1.00, sample='local title = CHAIN(frame:CreateFontString(nil,"OVERLAY"))'},
  },
  ['SetFont'] = {
    {name='SetFont', count=357, confidence=1.00, sample=':SetFont(FONTBOLD,14,"")'},
  },
  ['SetJustifyH'] = {
    {name='SetJustifyH', count=289, confidence=1.00, sample=':SetJustifyH("CENTER")'},
  },
  ['SetJustifyV'] = {
    {name='SetJustifyV', count=63, confidence=1.00, sample=':SetJustifyV("TOP")'},
  },
  ['SetText'] = {
    {name='SetText', count=2137, confidence=1.00, sample=':SetText("OK")'},
    {name='ItemBase.SetText', count=1, confidence=0.20, sample='function ItemBase.SetText(self, text)'},
  },
  ['SaveDump'] = {
    {name='SaveDump', count=7, confidence=1.00, sample='--		:SetScript("OnClick",function(self) if frame.save and frame.timestamp then ZGV:SaveDump(frame.editBox:GetText(),frame.timestamp) frame.save=nil frame.timestamp=nil end  frame:Hide()  end)'},
  },
  ['GetText'] = {
    {name='GetText', count=366, confidence=1.00, sample='--		:SetScript("OnClick",function(self) if frame.save and frame.timestamp then ZGV:SaveDump(frame.editBox:GetText(),frame.timestamp) frame.save=nil frame.timestamp=nil end  frame:Hide()  end)'},
    {name='ItemBase.GetText', count=1, confidence=0.20, sample='function ItemBase.GetText(self)'},
    {name='DF.Language.GetText', count=3, confidence=0.60, sample='self.label:SetText(DF.Language.GetText(addonId, phraseId))'},
  },
  ['IsShown'] = {
    {name='IsShown', count=291, confidence=1.00, sample='if ZygorGuidesViewer_DumpFrameReport and ZygorGuidesViewer_DumpFrameReport:IsShown() then'},
  },
  ['SetPushedBackdropColor'] = {
    {name='SetPushedBackdropColor', count=13, confidence=1.00, sample=':SetPushedBackdropColor(unpack(SkinData("Accent")))'},
  },
  ['SetWidth'] = {
    {name='SetWidth', count=742, confidence=1.00, sample=':SetWidth(125)'},
    {name='PixelUtil.SetWidth', count=30, confidence=1.00, sample='PixelUtil.SetWidth(self.button, template.width)'},
    {name='DFPixelUtil.SetWidth', count=2, confidence=0.40, sample='function DFPixelUtil.SetWidth(region, width, minPixels)'},
  },
  ['Show'] = {
    {name='Show', count=1549, confidence=1.00, sample='oldreports.frame:Show()'},
    {name='ItemBase.Show', count=1, confidence=0.20, sample='function ItemBase.Show(self)'},
  },
  ['AddItem'] = {
    {name='AddItem', count=25, confidence=1.00, sample='oldreports:AddItem(date("%m/%d/%y %H:%M:%S",time),nil,function(self)'},
  },
  ['CreateDumpFrameReport'] = {
    {name='CreateDumpFrameReport', count=2, confidence=0.40, sample='local function CreateDumpFrameReport()'},
  },
  ['SetBackdropBorderColor'] = {
    {name='SetBackdropBorderColor', count=306, confidence=1.00, sample='frame:SetBackdropBorderColor(0,0,0,1)'},
  },
  ['SetWordWrap'] = {
    {name='SetWordWrap', count=47, confidence=1.00, sample=':SetWordWrap(true)'},
  },
  ['SetHideWhenUseless'] = {
    {name='SetHideWhenUseless', count=7, confidence=1.00, sample='--:SetHideWhenUseless(1)'},
  },
  ['SetHideWhenUnless'] = {
    {name='SetHideWhenUnless', count=1, confidence=0.20, sample='--:SetHideWhenUnless(1)'},
  },
  ['SetMultiLine'] = {
    {name='SetMultiLine', count=11, confidence=1.00, sample=':SetMultiLine(true)'},
  },
  ['SetMaxLetters'] = {
    {name='SetMaxLetters', count=13, confidence=1.00, sample='--:SetMaxLetters(999999)'},
  },
  ['EnableMouse'] = {
    {name='EnableMouse', count=301, confidence=1.00, sample=':EnableMouse(true)'},
  },
  ['SetAutoFocus'] = {
    {name='SetAutoFocus', count=23, confidence=1.00, sample=':SetAutoFocus(false)'},
  },
  ['SetHeight'] = {
    {name='SetHeight', count=741, confidence=1.00, sample=':SetHeight(270)'},
    {name='PixelUtil.SetHeight', count=32, confidence=1.00, sample='PixelUtil.SetHeight(self.button, template.height)'},
    {name='DFPixelUtil.SetHeight', count=2, confidence=0.40, sample='function DFPixelUtil.SetHeight(region, height, minPixels)'},
  },
  ['RegisterForClicks'] = {
    {name='RegisterForClicks', count=67, confidence=1.00, sample=':RegisterForClicks("LeftButton")'},
  },
  ['SetAllPoints'] = {
    {name='SetAllPoints', count=253, confidence=1.00, sample='frame.edit3Box:SetAllPoints(frame.editFrame3)'},
  },
  ['ClearAllPoints'] = {
    {name='ClearAllPoints', count=572, confidence=1.00, sample='frame.viewbut:ClearAllPoints()'},
  },
  ['AddMessageHandler'] = {
    {name='AddMessageHandler', count=45, confidence=1.00, sample='ZGV:AddMessageHandler("SKIN_UPDATED",{BugReport,"ApplySkin"})'},
  },
  ['ApplySkin'] = {
    {name='ApplySkin', count=99, confidence=1.00, sample='BugReport:ApplySkin()'},
    {name='ItemBase.ApplySkin', count=1, confidence=0.20, sample='function ItemBase.ApplySkin(self)'},
  },
  ['GetReport_Flavor'] = {
    {name='GetReport_Flavor', count=3, confidence=0.60, sample='function BugReport:GetReport_Flavor()'},
  },
  ['GetReport_Player_Basic'] = {
    {name='GetReport_Player_Basic', count=4, confidence=0.80, sample='function BugReport:GetReport_Player_Basic()'},
  },
  ['GetSpecializationInfo'] = {
    {name='GetSpecializationInfo', count=27, confidence=1.00, sample='spec = (select(2,GetSpecializationInfo(GetSpecialization() or 0)))'},
    {name='C_SpecializationInfo.GetSpecializationInfo', count=1, confidence=0.20, sample='out = out .. "\n spec " .. ItemScore.playerspecName  .. " system " .. (select(2,C_SpecializationInfo.GetSpecializationInfo(ItemScore.playerspec)))'},
    {name='DetailsFramework.GetSpecializationInfo', count=3, confidence=0.60, sample='local specId = DetailsFramework.GetSpecializationInfo(playerSpec)'},
    {name='DF.GetSpecializationInfo', count=3, confidence=0.60, sample='function DF.GetSpecializationInfo(...)'},
  },
  ['GetSpecialization'] = {
    {name='GetSpecialization', count=29, confidence=1.00, sample='spec = (select(2,GetSpecializationInfo(GetSpecialization() or 0)))'},
    {name='DetailsFramework.GetSpecialization', count=6, confidence=1.00, sample='local playerSpec = DetailsFramework.GetSpecialization()'},
    {name='DF.GetSpecialization', count=4, confidence=0.80, sample='function DF.GetSpecialization()'},
  },
  ['UnitRace'] = {
    {name='UnitRace', count=18, confidence=1.00, sample='select(2,UnitRace("player")),'},
  },
  ['UnitClass'] = {
    {name='UnitClass', count=109, confidence=1.00, sample='select(2,UnitClass("player")),'},
  },
  ['GetPlayerPreciseLevel'] = {
    {name='GetPlayerPreciseLevel', count=28, confidence=1.00, sample='ZGV:GetPlayerPreciseLevel(),'},
  },
  ['UnitFactionGroup'] = {
    {name='UnitFactionGroup', count=527, confidence=1.00, sample='UnitFactionGroup("player"),'},
  },
  ['GetReport_Player_Location'] = {
    {name='GetReport_Player_Location', count=3, confidence=0.60, sample='function BugReport:GetReport_Player_Location()'},
  },
  ['GetBestMapForUnit'] = {
    {name='C_Map.GetBestMapForUnit', count=29, confidence=1.00, sample='local mapid = C_Map.GetBestMapForUnit("player") or -1'},
  },
  ['GetPlayerMapPosition'] = {
    {name='C_Map.GetPlayerMapPosition', count=4, confidence=0.80, sample='local coords = C_Map.GetPlayerMapPosition(mapid,"player")'},
    {name='GetPlayerMapPosition', count=4, confidence=0.80, sample='local x,y = GetPlayerMapPosition("player")'},
  },
  ['GetMapNameByID'] = {
    {name='ZGV.GetMapNameByID', count=52, confidence=1.00, sample='ZGV.GetMapNameByID(mapid) or "?",mapid, (x or 0)*100,(y or 0)*100,'},
    {name='ZGV.ZGV.GetMapNameByID', count=1, confidence=0.20, sample='if zone then s = s .. ("(zone %s only)\n"):format(ZGV.ZGV.GetMapNameByID(zone)) end'},
  },
  ['GetZoneText'] = {
    {name='GetZoneText', count=7, confidence=1.00, sample='GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())'},
  },
  ['GetRealZoneText'] = {
    {name='GetRealZoneText', count=7, confidence=1.00, sample='GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())'},
  },
  ['GetSubZoneText'] = {
    {name='GetSubZoneText', count=8, confidence=1.00, sample='GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())'},
  },
  ['GetMinimapZoneText'] = {
    {name='GetMinimapZoneText', count=14, confidence=1.00, sample='GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())'},
  },
  ['GetReport_Travel'] = {
    {name='GetReport_Travel', count=3, confidence=0.60, sample='function BugReport:GetReport_Travel()'},
  },
  ['GetReport'] = {
    {name='GetReport', count=2, confidence=0.40, sample='function BugReport:GetReport(maint,flags)'},
  },
  ['GetLocale'] = {
    {name='GetLocale', count=180, confidence=1.00, sample='if GetLocale()~="enUS" then'},
  },
  ['UnitName'] = {
    {name='UnitName', count=155, confidence=1.00, sample='s = s .. ("Target: %s ##%s\n"):format(UnitName("target"),ZGV.GetTargetId())'},
  },
  ['GetTargetId'] = {
    {name='ZGV.GetTargetId', count=8, confidence=1.00, sample='s = s .. ("Target: %s ##%s\n"):format(UnitName("target"),ZGV.GetTargetId())'},
    {name='GetTargetId', count=1, confidence=0.20, sample='local targetid = self.GetTargetId()'},
  },
  ['GetProfessions'] = {
    {name='GetProfessions', count=6, confidence=1.00, sample='local profTable = {GetProfessions()}'},
  },
  ['GetProfessionInfo'] = {
    {name='GetProfessionInfo', count=8, confidence=1.00, sample='local name,_,level,maxlevel=GetProfessionInfo(prof)'},
  },
  ['GetNumAddOns'] = {
    {name='C_AddOns.GetNumAddOns', count=1, confidence=0.20, sample='local numAddons  = C_AddOns.GetNumAddOns()'},
  },
  ['GetAddOnInfo'] = {
    {name='C_AddOns.GetAddOnInfo', count=1, confidence=0.20, sample='local name,_,_,enabled = C_AddOns.GetAddOnInfo(i)'},
    {name='GetAddOnInfo', count=1, confidence=0.20, sample='local displayname = select(2,GetAddOnInfo(addonName)):gsub("ffff0000","fffe6100")'},
  },
  ['IsComplete'] = {
    {name='IsComplete', count=60, confidence=1.00, sample='local complete,possible,progress = step:IsComplete()'},
    {name='C_QuestLog.IsComplete', count=1, confidence=0.20, sample='quest.complete = C_QuestLog.IsComplete(info.questID)'},
  },
  ['IsAuxiliary'] = {
    {name='IsAuxiliary', count=8, confidence=1.00, sample='s = s .. ("  (%s, %s, %s)\n"):format(complete and "COMPLETE" or "incomplete", possible and "POSSIBLE" or "impossible", step:IsAuxiliary() and "AUX" or "not aux")'},
  },
  ['GetItemInfo'] = {
    {name='GetItemInfo', count=95, confidence=1.00, sample='local a={ZGV:GetItemInfo(goal.itemid)}'},
    {name='C_Item.GetItemInfo', count=8, confidence=1.00, sample='return C_Item.GetItemInfo(id)'},
  },
  ['GetSpellInfo'] = {
    {name='GetSpellInfo', count=373, confidence=1.00, sample='local spellData = GetSpellInfo(goal.castspellid)'},
    {name='C_Spell.GetSpellInfo', count=44, confidence=1.00, sample='local spellData = C_Spell.GetSpellInfo(spellID)'},
    {name='Details222.GetSpellInfo', count=6, confidence=1.00, sample='local spellInfo = {Details222.GetSpellInfo(spellId)}'},
    {name='Details.GetSpellInfo', count=24, confidence=1.00, sample='local spellName, _, spellIcon = Details.GetSpellInfo(spellId)'},
  },
  ['GetQuestData'] = {
    {name='GetQuestData', count=11, confidence=1.00, sample='local questdata,inlog = ZGV.Localizers:GetQuestData(goal.questid)'},
  },
  ['GetStatus'] = {
    {name='GetStatus', count=39, confidence=1.00, sample='s = s .. "    Status: "..goal:GetStatus()'},
  },
  ['IsCompleteable'] = {
    {name='IsCompleteable', count=12, confidence=1.00, sample='if goal:IsCompleteable() then'},
  },
  ['GetNumSkillLines'] = {
    {name='GetNumSkillLines', count=3, confidence=0.60, sample='for i=1, GetNumSkillLines() do'},
  },
  ['GetSkillLineInfo'] = {
    {name='GetSkillLineInfo', count=3, confidence=0.60, sample='local skillName, _, _, skillRank, numTempPoints, skillModifier, skillMaxRank, isAbandonable, stepCost, rankCost, minLevel, skillCostType = GetSkillLineInfo(i);'},
  },
  ['GetClassicExpansionLevel'] = {
    {name='GetClassicExpansionLevel', count=4, confidence=0.80, sample='ZGV.ItemScore.GearFinder.CurrentExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()) or (GetServerExpansionLevel and GetServerExpansionLevel()) or 1'},
  },
  ['GetServerExpansionLevel'] = {
    {name='GetServerExpansionLevel', count=3, confidence=0.60, sample='ZGV.ItemScore.GearFinder.CurrentExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()) or (GetServerExpansionLevel and GetServerExpansionLevel()) or 1'},
  },
  ['IsValidDungeon'] = {
    {name='IsValidDungeon', count=3, confidence=0.60, sample='local valid, future, ident, maxscale, mythic, comment = ZGV.ItemScore.GearFinder:IsValidDungeon(dungeondata.dungeonmap or dungeondata.dungeon, dungeondata.instanceId)'},
  },
  ['GetContainerNumSlots'] = {
    {name='C_Container.GetContainerNumSlots', count=14, confidence=1.00, sample='for slot=1,C_Container.GetContainerNumSlots(bag) do'},
    {name='GetContainerNumSlots', count=4, confidence=0.80, sample='for bagslot=1, GetContainerNumSlots(bag) do'},
  },
  ['GetContainerItemLink'] = {
    {name='C_Container.GetContainerItemLink', count=10, confidence=1.00, sample='local link = C_Container.GetContainerItemLink(bag,slot)'},
    {name='GetContainerItemLink', count=1, confidence=0.20, sample='local itemLink = GetContainerItemLink(backpackId, slotId)'},
  },
  ['GetContainerItemInfo'] = {
    {name='C_Container.GetContainerItemInfo', count=10, confidence=1.00, sample='local item = C_Container.GetContainerItemInfo(bag,slot)'},
    {name='GetContainerItemInfo', count=3, confidence=0.60, sample='i = {GetContainerItemInfo (b, s)}'},
    {name='Items.GetContainerItemInfo', count=2, confidence=0.40, sample='function detailsFramework.Items.GetContainerItemInfo(containerIndex, slotIndex)'},
  },
  ['GetAuraDataByIndex'] = {
    {name='GetAuraDataByIndex', count=5, confidence=1.00, sample='local buff = GetAuraDataByIndex("player",i,"HELPFUL")'},
    {name='C_UnitAuras.GetAuraDataByIndex', count=11, confidence=1.00, sample='local data = C_UnitAuras.GetAuraDataByIndex("target",i)'},
  },
  ['GetPetActionInfo'] = {
    {name='GetPetActionInfo', count=5, confidence=1.00, sample='local name,texid = GetPetActionInfo(i)'},
  },
  ['TableKeys'] = {
    {name='ZGV.TableKeys', count=7, confidence=1.00, sample='s = s .. table.concat(ZGV.TableKeys(ZGV.db.char.taxis)," , ")'},
  },
  ['DumpVal'] = {
    {name='DumpVal', count=3, confidence=0.60, sample='--s = s .. ZGV:DumpVal(ZGV.quests,0,4,true)'},
  },
  ['Print'] = {
    {name='Print', count=185, confidence=1.00, sample='--ZGV:Print(s)'},
  },
  ['Dump'] = {
    {name='Dump', count=18, confidence=1.00, sample='s = s .. ZGV.Log:Dump(100)'},
  },
  ['ScheduleTimer'] = {
    {name='ScheduleTimer', count=195, confidence=1.00, sample='ZGV:ScheduleTimer(function() Screenshot() end, 0.5)'},
    {name='AceTimer.ScheduleTimer', count=4, confidence=0.80, sample='newTimer = AceTimer.ScheduleTimer(timer.object, timer.callback, timer.when - GetTime(), timer.arg)'},
  },
  ['Screenshot'] = {
    {name='Screenshot', count=2, confidence=0.40, sample='ZGV:ScheduleTimer(function() Screenshot() end, 0.5)'},
  },
  ['ShowReportDialog'] = {
    {name='ShowReportDialog', count=4, confidence=0.80, sample='ZGV:ScheduleTimer(function() self:ShowReportDialog(report) end, 0.6)'},
  },
  ['FormatDumpForUpload'] = {
    {name='FormatDumpForUpload', count=4, confidence=0.80, sample='ZGV.db.global.bugreports[timestamp]=self:FormatDumpForUpload(text,header,addonmodule,severity,geardump)'},
  },
  ['Debug'] = {
    {name='Debug', count=863, confidence=1.00, sample='ZGV:Debug("Guide rating saved for upload.")'},
  },
  ['GetUniqueId'] = {
    {name='GetUniqueId', count=3, confidence=0.60, sample='function BugReport:GetUniqueId()'},
  },
  ['UnitGUID'] = {
    {name='UnitGUID', count=141, confidence=1.00, sample='local guid = UnitGUID("player"):gsub("Player%-","")'},
  },
  ['GetTime'] = {
    {name='GetTime', count=355, confidence=1.00, sample='local time = ("%.03f"):format(GetTime())'},
  },
  ['SimpleDump'] = {
    {name='SimpleDump', count=1, confidence=0.20, sample='function BugReport:SimpleDump(tab)'},
  },
  ['GetDumpBody'] = {
    {name='GetDumpBody', count=2, confidence=0.40, sample='function BugReport:GetDumpBody(report)'},
  },
  ['HideUIPanel'] = {
    {name='HideUIPanel', count=6, confidence=1.00, sample='HideUIPanel(InterfaceOptionsFrame)'},
  },
  ['SetFrameLevel'] = {
    {name='SetFrameLevel', count=293, confidence=1.00, sample='f:SetFrameLevel(999)'},
  },
  ['HighlightText'] = {
    {name='HighlightText', count=57, confidence=1.00, sample='f.editBox:HighlightText(0)'},
  },
  ['ShowUIPanel'] = {
    {name='ShowUIPanel', count=6, confidence=1.00, sample='ShowUIPanel(f)'},
  },
  ['DelayedShowReportDialog'] = {
    {name='DelayedShowReportDialog', count=1, confidence=0.20, sample='function BugReport:DelayedShowReportDialog(report)'},
  },
  ['UpdateLayout'] = {
    {name='UpdateLayout', count=5, confidence=1.00, sample='StepFeedback.Frame:UpdateLayout()'},
  },
  ['SetNormalBackdropColor'] = {
    {name='SetNormalBackdropColor', count=26, confidence=1.00, sample=':SetNormalBackdropColor(unpack(SkinData("ButtonColor1")))'},
  },
  ['GetFrameLevel'] = {
    {name='GetFrameLevel', count=218, confidence=1.00, sample='frame.addonmodule= CHAIN(ui:Create("DropDown",frame.addoncontainer,2,frame:GetFrameLevel()+2))'},
  },
  ['SetCurrentSelectedByValue'] = {
    {name='SetCurrentSelectedByValue', count=19, confidence=1.00, sample='frame.addonmodule:SetCurrentSelectedByValue("default")'},
  },
  ['SetTextColor'] = {
    {name='SetTextColor', count=433, confidence=1.00, sample='frame.editBox:SetTextColor(1,1,1,0.7)'},
  },
  ['GetParent'] = {
    {name='GetParent', count=360, confidence=1.00, sample='if self:GetParent().old_timestamp then ZGV.db.global.bugreports[self:GetParent().old_timestamp]=nil end'},
  },
  ['Save'] = {
    {name='Save', count=7, confidence=1.00, sample='StepFeedback:Save(self:GetParent().editBox:GetText())'},
  },
  ['GetCurrentSelectedItemValue'] = {
    {name='GetCurrentSelectedItemValue', count=8, confidence=1.00, sample='if self:GetParent().editBox:GetText() ~= L["bugreport_step_message_addon"] and frame.addonmodule:GetCurrentSelectedItemValue() ~= "default" and frame.severity:GetCurrentSelectedItemValue() ~= "default" or ZGV.DEV then'},
  },
  ['GetGearReport'] = {
    {name='GetGearReport', count=3, confidence=0.60, sample='geardump = ZGV.ItemScore.Upgrades:GetGearReport(StepFeedback.itemlink)'},
  },
  ['SetBadUpgrade'] = {
    {name='SetBadUpgrade', count=4, confidence=0.80, sample='ZGV.ItemScore.Upgrades:SetBadUpgrade(StepFeedback.itemString,StepFeedback.slot)	-- Send it to BadUpgrades because they don't want it suggested again.'},
  },
  ['GetHeight'] = {
    {name='GetHeight', count=388, confidence=1.00, sample='local height = frame.editBox:GetHeight() + frame.buttonsubmit:GetHeight()'},
  },
  ['Clear'] = {
    {name='Clear', count=13, confidence=1.00, sample='function StepFeedback:Clear(ftype, component, itemlink)'},
  },
  ['FindStepReportForCurrentStep'] = {
    {name='FindStepReportForCurrentStep', count=2, confidence=0.40, sample='local timestamp,report = self:FindStepReportForCurrentStep(itemlink)'},
  },
  ['GetGuideStepSignature'] = {
    {name='GetGuideStepSignature', count=4, confidence=0.80, sample='function StepFeedback:GetGuideStepSignature()'},
  },
  ['GetStepReportHeader'] = {
    {name='GetStepReportHeader', count=4, confidence=0.80, sample='function StepFeedback:GetStepReportHeader()'},
  },
  ['GetDebugDump'] = {
    {name='GetDebugDump', count=5, confidence=1.00, sample='"bug_report_steptxt="..(ZGV.CurrentStep and ZGV.CurrentStep:GetDebugDump():gsub("\n",";;") or "").."\n"..'},
  },
  ['ExplainStep'] = {
    {name='ExplainStep', count=2, confidence=0.40, sample='"bug_report_chain="..ZGV.QuestDB:ExplainStep().."\n"'},
  },
  ['ShowTooltip'] = {
    {name='ShowTooltip', count=14, confidence=1.00, sample='function StepFeedback:ShowTooltip(text)'},
    {name='TA.ShowTooltip', count=2, confidence=0.40, sample=':SetScript("OnEnter", function() TA.ShowTooltip(TA.SpecIcon) end)'},
  },
  ['ChainCall'] = {
    {name='ZGV.ChainCall', count=49, confidence=1.00, sample='ZGV.ChainCall(GameTooltip)'},
  },
  ['SetOwner'] = {
    {name='SetOwner', count=169, confidence=1.00, sample=':SetOwner(ZGV.Frame, "ANCHOR_TOP")'},
  },
  ['AddLine'] = {
    {name='AddLine', count=553, confidence=1.00, sample=':AddLine(L['bugreport_step_tooltip2'])'},
  },
  ['GetGuideByTitle'] = {
    {name='GetGuideByTitle', count=49, confidence=1.00, sample='local nextguide = ZGV:GetGuideByTitle(nextg)'},
  },
  ['Error'] = {
    {name='Error', count=37, confidence=1.00, sample='if not nextguide then return ZGV:Error("Cannot find next guide ("..where.."): "..nextg) end'},
  },
  ['NextRatingGuide'] = {
    {name='NextRatingGuide', count=4, confidence=0.80, sample='function GuideRating:NextRatingGuide(source)'},
  },
  ['CreateAltFrame'] = {
    {name='CreateAltFrame', count=6, confidence=1.00, sample='GuideRating:CreateAltFrame()'},
  },
  ['SetGuide'] = {
    {name='SetGuide', count=32, confidence=1.00, sample='ZGV:SetGuide(nextGuide, nil, nil, nil, ZGV.CurrentGuide)'},
  },
  ['SetAlpha'] = {
    {name='SetAlpha', count=632, confidence=1.00, sample='frame.face1:SetAlpha(1)'},
  },
  ['CreateTexture'] = {
    {name='CreateTexture', count=710, confidence=1.00, sample='local feedbackboxbackdrop = frame:CreateTexture(nil, "ARTWORK")'},
  },
  ['SetColorTexture'] = {
    {name='SetColorTexture', count=251, confidence=1.00, sample='feedbackboxbackdrop:SetColorTexture(0,0,0,1)'},
  },
  ['ShowGuideRating'] = {
    {name='ShowGuideRating', count=11, confidence=1.00, sample='GuideRating:ShowGuideRating()'},
  },
  ['CreateCancelledFrame'] = {
    {name='CreateCancelledFrame', count=3, confidence=0.60, sample='GuideRating:CreateCancelledFrame()'},
  },
  ['ClearFocus'] = {
    {name='ClearFocus', count=128, confidence=1.00, sample='frame.scroll.child:ClearFocus()'},
  },
  ['Toggle'] = {
    {name='Toggle', count=13, confidence=1.00, sample='me:Toggle(not me.curToggle)'},
  },
  ['RefreshOptions'] = {
    {name='RefreshOptions', count=24, confidence=1.00, sample='ZGV:RefreshOptions()'},
  },
  ['SetParent'] = {
    {name='SetParent', count=159, confidence=1.00, sample=':SetParent(ZGV.Frame.Border)'},
  },
  ['Position'] = {
    {name='Position', count=7, confidence=1.00, sample='GuideRating:Position()'},
  },
  ['HideRatingWidgets'] = {
    {name='HideRatingWidgets', count=5, confidence=1.00, sample='function GuideRating:HideRatingWidgets()'},
  },
  ['ResizeFrame'] = {
    {name='ResizeFrame', count=5, confidence=1.00, sample='ZGV:ResizeFrame("ratingframe")'},
  },
  ['UpdateText'] = {
    {name='UpdateText', count=14, confidence=1.00, sample='GuideRating:UpdateText()'},
  },
  ['ClearRateState'] = {
    {name='ClearRateState', count=4, confidence=0.80, sample='GuideRating:ClearRateState()'},
  },
  ['Popup'] = {
    {name='Popup', count=3, confidence=0.60, sample='GuideRating:Popup()'},
  },
  ['NewPopup'] = {
    {name='NewPopup', count=22, confidence=1.00, sample='dialog = ZGV.PopupHandler:NewPopup("GuideScore","default")'},
  },
  ['IsVisible'] = {
    {name='IsVisible', count=223, confidence=1.00, sample='local offsets = (self.logo:IsVisible() and (self.logo:GetHeight()+15) or 5) + 30 --Logo and top + more room'},
  },
  ['InitializeViewerPosition'] = {
    {name='InitializeViewerPosition', count=2, confidence=0.40, sample='CV:InitializeViewerPosition()'},
  },
  ['SetMaster'] = {
    {name='SetMaster', count=2, confidence=0.40, sample='CV:SetMaster() --Needed to move the master frame off the viewer at startup if needed'},
  },
  ['ScheduleRepeatingTimer'] = {
    {name='ScheduleRepeatingTimer', count=54, confidence=1.00, sample='--self:ScheduleRepeatingTimer("TryToDisplayCreature", 1)'},
    {name='ZGV.ScheduleRepeatingTimer', count=1, confidence=0.20, sample='--ZGV.ScheduleRepeatingTimer(self,"FixMapLevel", 1.0)'},
    {name='AceTimer.ScheduleRepeatingTimer', count=4, confidence=0.80, sample='newTimer = AceTimer.ScheduleRepeatingTimer(timer.object, timer.callback, timer.delay, timer.arg)'},
  },
  ['SetToplevel'] = {
    {name='SetToplevel', count=31, confidence=1.00, sample=':SetToplevel(true)'},
  },
  ['SetMovable'] = {
    {name='SetMovable', count=87, confidence=1.00, sample=':SetMovable(true)'},
  },
  ['SetResizable'] = {
    {name='SetResizable', count=26, confidence=1.00, sample=':SetResizable(true)'},
  },
  ['SetClampedToScreen'] = {
    {name='SetClampedToScreen', count=25, confidence=1.00, sample=':SetClampedToScreen(true)'},
  },
  ['SetScale'] = {
    {name='SetScale', count=68, confidence=1.00, sample=':SetScale(itemsScale)'},
  },
  ['CreateFrameWithBG'] = {
    {name='ZGV.CreateFrameWithBG', count=39, confidence=1.00, sample='local NoModelFrame = CHAIN(ZGV.CreateFrameWithBG("Frame", "NoModelFrame", ZygorGuidesViewer_CreatureViewer))'},
    {name='AceGUI.CreateFrameWithBG', count=1, confidence=0.20, sample='function AceGUI.CreateFrameWithBG(type,name,parent,templates)'},
  },
  ['SetTexture'] = {
    {name='SetTexture', count=1008, confidence=1.00, sample=':SetTexture(ZGV.Skins.default.preferredstyle.CVNoModelTexture)'},
  },
  ['SetDesaturated'] = {
    {name='SetDesaturated', count=156, confidence=1.00, sample=':SetDesaturated(true)'},
  },
  ['TryToDisplayCreature'] = {
    {name='TryToDisplayCreature', count=6, confidence=1.00, sample='function ZGV:TryToDisplayCreature(force)'},
  },
  ['GetTranslatedNPC'] = {
    {name='GetTranslatedNPC', count=27, confidence=1.00, sample='name = goal.modelname or (creatureid and self.Localizers:GetTranslatedNPC(creatureid)) or goal.target or goal.npc'},
  },
  ['GetStickiesAt'] = {
    {name='GetStickiesAt', count=11, confidence=1.00, sample='local activeStickies = ZGV:GetStickiesAt(self.CurrentStep.num)'},
  },
  ['ShowModels'] = {
    {name='ShowModels', count=5, confidence=1.00, sample='CV:ShowModels(models)'},
  },
  ['GetWidth'] = {
    {name='GetWidth', count=444, confidence=1.00, sample='local heightAdjust = ZygorGuidesViewer_CreatureViewer:GetHeight() - ZygorGuidesViewer_CreatureViewer:GetWidth()'},
  },
  ['Model_OnUpdate_Rotate'] = {
    {name='Model_OnUpdate_Rotate', count=1, confidence=0.20, sample='local function Model_OnUpdate_Rotate(self,elapsed)'},
  },
  ['SetFacing'] = {
    {name='SetFacing', count=1, confidence=0.20, sample='self:SetFacing(self.model.curfacing)'},
  },
  ['Model_Cycle_OnPlay'] = {
    {name='Model_Cycle_OnPlay', count=1, confidence=0.20, sample='local function Model_Cycle_OnPlay(self)'},
  },
  ['Model_Cycle_OnUpdate'] = {
    {name='Model_Cycle_OnUpdate', count=1, confidence=0.20, sample='local function Model_Cycle_OnUpdate(self)'},
  },
  ['GetSmoothProgress'] = {
    {name='GetSmoothProgress', count=3, confidence=0.60, sample='local prog = self:GetSmoothProgress()*0.999 + 0.001'},
  },
  ['SetPosition'] = {
    {name='SetPosition', count=6, confidence=1.00, sample='vm:SetPosition(vm.model.cx or 0,(vm.model.cy or 0) - progdir * 0.4,(vm.model.cz or 0)-0.1)'},
  },
  ['SetModelScale'] = {
    {name='SetModelScale', count=3, confidence=0.60, sample='vm:SetModelScale((vm.model.scale or 1)*(0.9+prog*0.1))-- * (vm.model and vm.model.scale or 1))'},
  },
  ['SetCamera'] = {
    {name='SetCamera', count=3, confidence=0.60, sample='if vm.model.cam then vm:SetCamera(vm.model.cam) end'},
  },
  ['Model_Cycle_OnFinish'] = {
    {name='Model_Cycle_OnFinish', count=1, confidence=0.20, sample='local function Model_Cycle_OnFinish(self)'},
  },
  ['Slideshow_Timer'] = {
    {name='Slideshow_Timer', count=1, confidence=0.20, sample='local function Slideshow_Timer()'},
  },
  ['CycleCreature'] = {
    {name='CycleCreature', count=6, confidence=1.00, sample='CV:CycleCreature(1)'},
  },
  ['SetAnchor'] = {
    {name='SetAnchor', count=17, confidence=1.00, sample='local function SetAnchor()'},
  },
  ['GetCenter'] = {
    {name='GetCenter', count=34, confidence=1.00, sample='local viewX,viewY=viewer:GetCenter()'},
  },
  ['AnchorEnter'] = {
    {name='AnchorEnter', count=3, confidence=0.60, sample='local function AnchorEnter()'},
  },
  ['ClearLines'] = {
    {name='ClearLines', count=17, confidence=1.00, sample='GameTooltip:ClearLines()'},
  },
  ['ToggleAnchor'] = {
    {name='ToggleAnchor', count=1, confidence=0.20, sample='local function ToggleAnchor(self,button)'},
  },
  ['AlignFrame'] = {
    {name='AlignFrame', count=24, confidence=1.00, sample='CV:AlignFrame()'},
  },
  ['AnchorExit'] = {
    {name='AnchorExit', count=1, confidence=0.20, sample='local function AnchorExit()'},
  },
  ['GetRight'] = {
    {name='GetRight', count=15, confidence=1.00, sample='local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()'},
  },
  ['GetLeft'] = {
    {name='GetLeft', count=33, confidence=1.00, sample='local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()'},
  },
  ['GetTop'] = {
    {name='GetTop', count=41, confidence=1.00, sample='local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()'},
  },
  ['Frame_OnUpdate'] = {
    {name='CV.Frame_OnUpdate', count=1, confidence=0.20, sample='function CV.Frame_OnUpdate(frame,elapsed)'},
    {name='ActionBar.Frame_OnUpdate', count=1, confidence=0.20, sample='function ActionBar.Frame_OnUpdate(self)'},
  },
  ['Stop'] = {
    {name='Stop', count=85, confidence=1.00, sample='CV.Frame.model.cycle:Stop()'},
    {name='AuraScan.Stop', count=2, confidence=0.40, sample='function AuraScan.Stop()'},
    {name='Details222.TimeCapture.Stop', count=2, confidence=0.40, sample='Details222.TimeCapture.Stop(unitName)'},
  },
  ['Play'] = {
    {name='Play', count=101, confidence=1.00, sample='CV.Frame.model.cycle:Play()'},
  },
  ['Update'] = {
    {name='Update', count=145, confidence=1.00, sample='CV:Update()'},
  },
  ['IsMouseOver'] = {
    {name='IsMouseOver', count=31, confidence=1.00, sample='if frame:IsMouseOver() then'},
  },
  ['UIFrameFadeIn'] = {
    {name='UIFrameFadeIn', count=2, confidence=0.40, sample='for f,fr in pairs(faded_controls) do UIFrameFadeIn(fr,0.1,fr:GetAlpha(), 1) end'},
    {name='ZGV.UIFrameFade.UIFrameFadeIn', count=5, confidence=1.00, sample='ZGV.UIFrameFade.UIFrameFadeIn(NC.SpecialNotif, FADEIN_TIME)'},
  },
  ['GetAlpha'] = {
    {name='GetAlpha', count=42, confidence=1.00, sample='for f,fr in pairs(faded_controls) do UIFrameFadeIn(fr,0.1,fr:GetAlpha(), 1) end'},
  },
  ['UIFrameFadeOut'] = {
    {name='UIFrameFadeOut', count=2, confidence=0.40, sample='for f,fr in pairs(faded_controls) do UIFrameFadeOut(fr,0.1,fr:GetAlpha(), 0) end'},
    {name='ZGV.UIFrameFade.UIFrameFadeOut', count=4, confidence=0.80, sample='ZGV.UIFrameFade.UIFrameFadeOut(self, FADEOUT_TIME, 1, 0, function()'},
  },
  ['SetMinResize'] = {
    {name='SetMinResize', count=8, confidence=1.00, sample='viewer:SetMinResize(80,100)'},
  },
  ['RegisterForDrag'] = {
    {name='RegisterForDrag', count=34, confidence=1.00, sample=':RegisterForDrag("LeftButton")'},
  },
  ['StartSizing'] = {
    {name='StartSizing', count=34, confidence=1.00, sample=':SetScript("OnDragStart",function() viewer.ismoving=true viewer:StartSizing("BOTTOMLEFT") end)'},
  },
  ['StopMovingOrSizing'] = {
    {name='StopMovingOrSizing', count=91, confidence=1.00, sample=':SetScript("OnDragStop",function() viewer.ismoving=nil viewer:StopMovingOrSizing()'},
  },
  ['CreateAnimationGroup'] = {
    {name='CreateAnimationGroup', count=19, confidence=1.00, sample='CV.Frame.model.cycle = CV.Frame.model:CreateAnimationGroup()'},
  },
  ['CreateAnimation'] = {
    {name='CreateAnimation', count=118, confidence=1.00, sample='CHAIN(CV.Frame.model.cycle:CreateAnimation("ANIMATION")) :SetSmoothing("OUT") :SetDuration(0.3)'},
  },
  ['SetSmoothing'] = {
    {name='SetSmoothing', count=4, confidence=0.80, sample='CHAIN(CV.Frame.model.cycle:CreateAnimation("ANIMATION")) :SetSmoothing("OUT") :SetDuration(0.3)'},
  },
  ['SetDuration'] = {
    {name='SetDuration', count=49, confidence=1.00, sample='CHAIN(CV.Frame.model.cycle:CreateAnimation("ANIMATION")) :SetSmoothing("OUT") :SetDuration(0.3)'},
  },
  ['SetOption'] = {
    {name='SetOption', count=344, confidence=1.00, sample=':SetScript("OnClick",function() ZGV:SetOption("Display","mv_enabled") end)'},
    {name='DF.Language.SetOption', count=1, confidence=0.20, sample='function DF.Language.SetOption(addonId, optionId, value)'},
  },
  ['GetName'] = {
    {name='GetName', count=251, confidence=1.00, sample='CV.Frame.title = CHAIN(CV.Frame.boo:CreateFontString(CV.Frame:GetName().."_Title","ARTWORK","GameFontNormalSmall"))'},
    {name='C_PetBattles.GetName', count=6, confidence=1.00, sample='local name,creature=C_PetBattles.GetName(2,i)'},
  },
  ['SetDrawLayer'] = {
    {name='SetDrawLayer', count=96, confidence=1.00, sample=':SetDrawLayer("OVERLAY")'},
  },
  ['AssignButtonTexture'] = {
    {name='AssignButtonTexture', count=2, confidence=0.40, sample='--AssignButtonTexture(CV.Frame.nofn.prev,ZGV.SkinDir.."titlebuttons",9,32)'},
    {name='ZGV.F.AssignButtonTexture', count=13, confidence=1.00, sample='--ZGV.F.AssignButtonTexture(MF.FooterSettingsButton,(SkinData("TitleButtons")),5,32)'},
  },
  ['IsShiftKeyDown'] = {
    {name='IsShiftKeyDown', count=43, confidence=1.00, sample='--:SetScript("OnClick",		function(self,but) ZGV.CV.currentmodel.crop.cx = (ZGV.CV.currentmodel.crop.cx or 0) + (but=="LeftButton" and -0.2 or 0.2) * (IsShiftKeyDown() and 0.2 or 1) ZGV.CV:Update() ZGV.CV:DumpModelSettings() end)'},
  },
  ['DumpModelSettings'] = {
    {name='DumpModelSettings', count=17, confidence=1.00, sample='--:SetScript("OnClick",		function(self,but) ZGV.CV.currentmodel.crop.cx = (ZGV.CV.currentmodel.crop.cx or 0) + (but=="LeftButton" and -0.2 or 0.2) * (IsShiftKeyDown() and 0.2 or 1) ZGV.CV:Update() ZGV.CV:DumpModelSettings() end)'},
  },
  ['DoCrop'] = {
    {name='DoCrop', count=8, confidence=1.00, sample='DoCrop()'},
  },
  ['CreateTitleRegion'] = {
    {name='CreateTitleRegion', count=1, confidence=0.20, sample='--CV.Frame.titleregion = CHAIN(CV.Frame:CreateTitleRegion()) :RegisterForDrag("LeftButton") :SetScript("OnDragStart",function() CV.Frame:StartDragging() end) :SetScript("OnDragStop",function() CV.Frame:StopMovingOrSizing() end) .__END'},
  },
  ['StartDragging'] = {
    {name='StartDragging', count=1, confidence=0.20, sample='--CV.Frame.titleregion = CHAIN(CV.Frame:CreateTitleRegion()) :RegisterForDrag("LeftButton") :SetScript("OnDragStart",function() CV.Frame:StartDragging() end) :SetScript("OnDragStop",function() CV.Frame:StopMovingOrSizing() end) .__END'},
  },
  ['StartMoving'] = {
    {name='StartMoving', count=54, confidence=1.00, sample=':SetScript("OnDragStart",function(self) if not ZGV.db.profile.cvanchor then viewer.ismoving=true viewer:StartMoving() end end)'},
  },
  ['GetPoint'] = {
    {name='GetPoint', count=36, confidence=1.00, sample='ZGV.db.profile.frame_positions.ZygorGuidesViewerViewer.point={viewer:GetPoint()}'},
  },
  ['UpdateSkin'] = {
    {name='UpdateSkin', count=2, confidence=0.40, sample='--SetAnchor() -- is repeated in CV:UpdateSkin()'},
  },
  ['GetRegions'] = {
    {name='GetRegions', count=10, confidence=1.00, sample='CV.Frame.sizer_se:GetRegions():SetTexCoord(1,0,0,1)'},
  },
  ['SetTexCoord'] = {
    {name='SetTexCoord', count=704, confidence=1.00, sample='CV.Frame.sizer_se:GetRegions():SetTexCoord(1,0,0,1)'},
  },
  ['SetNormalTexture'] = {
    {name='SetNormalTexture', count=79, confidence=1.00, sample='CV.Frame.nofn.prev:SetNormalTexture(ZGV.StyleDir.."mv-arrow")'},
  },
  ['GetNormalTexture'] = {
    {name='GetNormalTexture', count=126, confidence=1.00, sample='CV.Frame.nofn.next:GetNormalTexture():SetTexCoord(1,0,0,1)'},
  },
  ['AddMessage'] = {
    {name='AddMessage', count=32, confidence=1.00, sample='--DEFAULT_CHAT_FRAME:AddMessage(("cx=%.1f,cy=%.1f,cz=%.1f,scale=%.1f,facing=%d"):format(m.cx,m.cy,m.cz,m.scale,m.facing))'},
  },
  ['ShowCreature'] = {
    {name='ShowCreature', count=2, confidence=0.40, sample='function CV:ShowCreature(id,name)'},
  },
  ['RefreshModelOverflowTimer'] = {
    {name='RefreshModelOverflowTimer', count=3, confidence=0.60, sample='local function RefreshModelOverflowTimer()'},
  },
  ['CancelTimer'] = {
    {name='CancelTimer', count=103, confidence=1.00, sample='ZGV:CancelTimer(delayedModel.timerHandle,true)'},
    {name='AceTimer.CancelTimer', count=2, confidence=0.40, sample='AceTimer.CancelTimer(self, k)'},
    {name='C_Timer.CancelTimer', count=1, confidence=0.20, sample='function C_Timer.CancelTimer(timerHandle) end'},
  },
  ['Test'] = {
    {name='Test', count=2, confidence=0.40, sample='function CV:Test()'},
  },
  ['GetMouseButtonClicked'] = {
    {name='GetMouseButtonClicked', count=2, confidence=0.40, sample='timer = GetMouseButtonClicked() and -5 or 0  -- on click, set timer to negative to force a longer delay.'},
  },
  ['ClearModel'] = {
    {name='ClearModel', count=4, confidence=0.80, sample='viewer:ClearModel()'},
  },
  ['SetModel'] = {
    {name='SetModel', count=5, confidence=1.00, sample='viewer:SetModel(model.model)'},
  },
  ['SetDisplayInfo'] = {
    {name='SetDisplayInfo', count=5, confidence=1.00, sample='viewer:SetDisplayInfo(model.displayinfo)'},
  },
  ['SetCreature'] = {
    {name='SetCreature', count=4, confidence=0.80, sample='viewer:SetCreature(model.creatureid)'},
  },
  ['GetDisplayInfo'] = {
    {name='GetDisplayInfo', count=10, confidence=1.00, sample='local model_check = viewer:GetDisplayInfo()'},
  },
  ['RefreshCamera'] = {
    {name='RefreshCamera', count=1, confidence=0.20, sample='viewer:RefreshCamera()'},
  },
  ['SetCamDistanceScale'] = {
    {name='SetCamDistanceScale', count=1, confidence=0.20, sample='viewer:SetCamDistanceScale(model.camscale and max(model.camscale,0.01) or 1.01)'},
  },
  ['SetPortraitZoom'] = {
    {name='SetPortraitZoom', count=1, confidence=0.20, sample='viewer:SetPortraitZoom(model.portrait)'},
  },
  ['TrimDatabase'] = {
    {name='TrimDatabase', count=2, confidence=0.40, sample='function GearFinder:TrimDatabase()'},
  },
  ['GetChromieTime'] = {
    {name='ZGV.GetChromieTime', count=4, confidence=0.80, sample='if (ZGV.GetChromieTime()>0 and ZGV.GetChromieTime()~=dungeon.expansionLevel) then return false, false, ident, 0, false,false, "wrong chromie time" end'},
  },
  ['IsLFGDungeonJoinable'] = {
    {name='IsLFGDungeonJoinable', count=1, confidence=0.20, sample='local isAvailable, isAvailableToPlayer, hideIfUnmet = IsLFGDungeonJoinable(dungeon.id);'},
  },
  ['GetLFDLockInfo'] = {
    {name='GetLFDLockInfo', count=1, confidence=0.20, sample='local playerName, lockedReason = GetLFDLockInfo(dungeon.id, 1);'},
  },
  ['GetAchievementInfo'] = {
    {name='GetAchievementInfo', count=21, confidence=1.00, sample='local _,_,_,complete = GetAchievementInfo(dungeon.attunement_achieve)'},
  },
  ['IsQuestFlaggedCompleted'] = {
    {name='IsQuestFlaggedCompleted', count=72, confidence=1.00, sample='if dungeon.attunement_quest and not IsQuestFlaggedCompleted(dungeon.attunement_quest) then return false, true, ident, maxScaleLevel, mythic,mythicplus, "attunement needed" end'},
    {name='C_QuestLog.IsQuestFlaggedCompleted', count=9, confidence=1.00, sample='if C_QuestLog.IsQuestFlaggedCompleted(id) then return true end'},
  },
  ['SetPercent'] = {
    {name='SetPercent', count=15, confidence=1.00, sample='GearFinder.MainFrame.Progress:SetPercent(0,"noanim")'},
  },
  ['GetInventoryItemLink'] = {
    {name='GetInventoryItemLink', count=20, confidence=1.00, sample='local equipped_weapon = GetInventoryItemLink("player",INVSLOT_MAINHAND) and ItemScore:GetItemDetails(GetInventoryItemLink("player",INVSLOT_MAINHAND))'},
  },
  ['GetItemDetails'] = {
    {name='GetItemDetails', count=29, confidence=1.00, sample='local equipped_weapon = GetInventoryItemLink("player",INVSLOT_MAINHAND) and ItemScore:GetItemDetails(GetInventoryItemLink("player",INVSLOT_MAINHAND))'},
  },
  ['GetItemInfoInstant'] = {
    {name='GetItemInfoInstant', count=1, confidence=0.20, sample='for index,itemdata in pairs(dungeon) do if GetItemInfoInstant(itemdata.itemlink) then'},
    {name='C_Item.GetItemInfoInstant', count=4, confidence=0.80, sample='local _, _, _, _, _, classID, subclassID = C_Item.GetItemInfoInstant(link)'},
  },
  ['IsUpgrade'] = {
    {name='IsUpgrade', count=8, confidence=1.00, sample='local is_upgrade, slot, change, score, comment, futurevalid, slot_2, change_2  = ItemScore.Upgrades:IsUpgrade(itemlink)'},
  },
  ['DisplayResults'] = {
    {name='DisplayResults', count=14, confidence=1.00, sample='GearFinder:DisplayResults()'},
  },
  ['ScoreDungeonItems'] = {
    {name='ScoreDungeonItems', count=3, confidence=0.60, sample='function GearFinder:ScoreDungeonItems()'},
  },
  ['GetModifiedInstanceInfoFromMapID'] = {
    {name='C_ModifiedInstance.GetModifiedInstanceInfoFromMapID', count=1, confidence=0.20, sample='hasbonus = C_ModifiedInstance and C_ModifiedInstance.GetModifiedInstanceInfoFromMapID(dungeondata.EJMap)'},
  },
  ['SetLevel'] = {
    {name='ZGV.ItemLink.SetLevel', count=2, confidence=0.40, sample='itemlink = ZGV.ItemLink.SetLevel(itemlink,capped_player_level,false)'},
    {name='IL.SetLevel', count=3, confidence=0.60, sample='function IL.SetLevel(itemlink,level,keepDecor)'},
  },
  ['RemoveBonus'] = {
    {name='ZGV.ItemLink.RemoveBonus', count=2, confidence=0.40, sample='itemlink = ZGV.ItemLink.RemoveBonus(itemlink,3524)'},
    {name='IL.RemoveBonus', count=1, confidence=0.20, sample='function IL.RemoveBonus(itemlink,bonusid)'},
  },
  ['AddBonus'] = {
    {name='ZGV.ItemLink.AddBonus', count=2, confidence=0.40, sample='itemlink = ZGV.ItemLink.AddBonus(itemlink,mythic_bonus)'},
    {name='IL.AddBonus', count=1, confidence=0.20, sample='function IL.AddBonus(itemlink,bonuses)'},
  },
  ['SetFated'] = {
    {name='ZGV.ItemLink.SetFated', count=2, confidence=0.40, sample='if hasbonus then itemlink = ZGV.ItemLink.SetFated(itemlink) end'},
    {name='IL.SetFated', count=1, confidence=0.20, sample='function IL.SetFated(itemlink)'},
  },
  ['GetQuestName'] = {
    {name='GetQuestName', count=10, confidence=1.00, sample='qname = ZGV.QuestDB:GetQuestName(bossdata.quest[faction])'},
  },
  ['SetHyperlink'] = {
    {name='SetHyperlink', count=16, confidence=1.00, sample='GameTooltip:SetHyperlink(button.link)'},
  },
  ['FadeOut'] = {
    {name='FadeOut', count=8, confidence=1.00, sample='GameTooltip:FadeOut()'},
  },
  ['LoadGuideToTab'] = {
    {name='LoadGuideToTab', count=25, confidence=1.00, sample='ZGV.Tabs:LoadGuideToTab(button.dungeonguide,button.dungeonguide.CurrentStepNum or 1)'},
  },
  ['SetDecor'] = {
    {name='SetDecor', count=8, confidence=1.00, sample='MF.Progress:SetDecor(SkinData("ProgressBarDecorUse"))'},
  },
  ['SetVertexColor'] = {
    {name='SetVertexColor', count=449, confidence=1.00, sample='MF.Progress.Texture:SetVertexColor(unpack(SkinData("ProgressBarTextureColor")))'},
  },
  ['CreateMainFrame'] = {
    {name='CreateMainFrame', count=10, confidence=1.00, sample='function GearFinder:CreateMainFrame()'},
  },
  ['AttachFrame'] = {
    {name='AttachFrame', count=4, confidence=0.80, sample='GearFinder:AttachFrame()'},
  },
  ['OpenOptions'] = {
    {name='OpenOptions', count=20, confidence=1.00, sample=':SetScript("OnClick",function() ZGV:OpenOptions("gear") end)'},
  },
  ['ClearResults'] = {
    {name='ClearResults', count=22, confidence=1.00, sample='GearFinder:ClearResults()'},
  },
  ['SetTitanRune'] = {
    {name='SetTitanRune', count=6, confidence=1.00, sample='GearFinder:SetTitanRune()'},
  },
  ['GetPushedTexture'] = {
    {name='GetPushedTexture', count=46, confidence=1.00, sample='CHAIN(MF.TitanToggle:GetPushedTexture()):ClearAllPoints():SetPoint("LEFT"):SetSize(17,17)'},
  },
  ['GetHighlightTexture'] = {
    {name='GetHighlightTexture', count=51, confidence=1.00, sample='CHAIN(MF.TitanToggle:GetHighlightTexture()):ClearAllPoints():SetPoint("LEFT"):SetSize(17,17)'},
  },
  ['GetDisabledTexture'] = {
    {name='GetDisabledTexture', count=25, confidence=1.00, sample='CHAIN(MF.TitanToggle:GetDisabledTexture()):ClearAllPoints():SetPoint("LEFT"):SetSize(17,17)'},
  },
  ['SetAnim'] = {
    {name='SetAnim', count=5, confidence=1.00, sample=':SetAnim(true)'},
  },
  ['SetHighlightBackdropColor'] = {
    {name='SetHighlightBackdropColor', count=14, confidence=1.00, sample=':SetHighlightBackdropColor(0,0,0,0.7)'},
  },
  ['EJ_GetEncounterInfo'] = {
    {name='EJ_GetEncounterInfo', count=3, confidence=0.60, sample='button.itemencounter:SetText(EJ_GetEncounterInfo(upgrade.encounterId))'},
    {name='EncounterJournal.EJ_GetEncounterInfo', count=1, confidence=0.20, sample='local name, description, encounterID, rootSectionID, link = detailsFramework.EncounterJournal.EJ_GetEncounterInfo (2168) --taloc (primeiro boss de Uldir)'},
    {name='DetailsFramework.EncounterJournal.EJ_GetEncounterInfo', count=2, confidence=0.40, sample='local stack, encounter, _, _, curSectionID = {}, DetailsFramework.EncounterJournal.EJ_GetEncounterInfo (EJ_EncounterID)'},
  },
  ['AddEventHandler'] = {
    {name='AddEventHandler', count=120, confidence=1.00, sample='self:AddEventHandler("CHAT_MSG_SYSTEM","CHAT_MSG_SYSTEM_QuestTracking")'},
  },
  ['QUEST_LOG_UPDATE_QuestTracking'] = {
    {name='QUEST_LOG_UPDATE_QuestTracking', count=2, confidence=0.40, sample='self:QUEST_LOG_UPDATE_QuestTracking("ZYGORSTARTUP","player")'},
  },
  ['GetCaptures'] = {
    {name='GetCaptures', count=3, confidence=0.60, sample='local function GetCaptures(s)'},
  },
  ['Quest_GetCaptures'] = {
    {name='ZGV.Quest_GetCaptures', count=1, confidence=0.20, sample='-- /dump ZGV.Quest_GetCaptures(QUEST_MONSTERS_KILLED)'},
  },
  ['Reorganize'] = {
    {name='Reorganize', count=3, confidence=0.60, sample='local function Reorganize(indices,...)'},
  },
  ['ParseLeaderBoard'] = {
    {name='ParseLeaderBoard', count=3, confidence=0.60, sample='local function ParseLeaderBoard(leaderboard,type)'},
  },
  ['GetQuestLeaderBoards'] = {
    {name='GetQuestLeaderBoards', count=2, confidence=0.40, sample='function ZGV:GetQuestLeaderBoards(questindex,questID)'},
  },
  ['GetNumQuestLeaderBoards'] = {
    {name='GetNumQuestLeaderBoards', count=2, confidence=0.40, sample='local numgoals = tonumber(GetNumQuestLeaderBoards(questindex))'},
  },
  ['GetQuestLogLeaderBoard'] = {
    {name='GetQuestLogLeaderBoard', count=1, confidence=0.20, sample='local leaderboard,type,complete = GetQuestLogLeaderBoard(g,questindex)'},
  },
  ['GetQuestProgressBarPercent'] = {
    {name='GetQuestProgressBarPercent', count=2, confidence=0.40, sample='num = GetQuestProgressBarPercent(questID)'},
  },
  ['GetTitleForLogIndex'] = {
    {name='C_QuestLog.GetTitleForLogIndex', count=1, confidence=0.20, sample='local title = C_QuestLog.GetTitleForLogIndex and C_QuestLog.GetTitleForLogIndex(questindex) or select(8,GetQuestLogTitle(questindex))'},
  },
  ['GetQuestLogTitle'] = {
    {name='GetQuestLogTitle', count=2, confidence=0.40, sample='local title = C_QuestLog.GetTitleForLogIndex and C_QuestLog.GetTitleForLogIndex(questindex) or select(8,GetQuestLogTitle(questindex))'},
  },
  ['GetQuest'] = {
    {name='GetQuest', count=2, confidence=0.40, sample='function ZGV:GetQuest(indexortitle)'},
  },
  ['GetInfo'] = {
    {name='C_QuestLog.GetInfo', count=3, confidence=0.60, sample='local info = C_QuestLog.GetInfo(indexortitle)'},
    {name='C_Scenario.GetInfo', count=8, confidence=1.00, sample='local name, currentStage, numStages,_,_,_,_,_,_,_,_,_,currentScenarioID = C_Scenario.GetInfo()'},
  },
  ['QuestTracking_CacheQuestLog'] = {
    {name='QuestTracking_CacheQuestLog', count=4, confidence=0.80, sample='function ZGV:QuestTracking_CacheQuestLog(from)'},
  },
  ['InCombatLockdown'] = {
    {name='InCombatLockdown', count=74, confidence=1.00, sample='if InCombatLockdown() and not interacting then'},
  },
  ['Throttler'] = {
    {name='Throttler', count=5, confidence=1.00, sample='if ZGV:Throttler("QuestTracking_CacheQuestLog",0.5,ZGV.QuestTracking_CacheQuestLog,{ZGV,"throttler"}) then return end'},
  },
  ['GetNumQuestLogEntries'] = {
    {name='GetNumQuestLogEntries', count=1, confidence=0.20, sample='--local iNumEntries, iNumQuests = GetNumQuestLogEntries() -- this SUCKS. Entries can be muddled by collapsing the quest log, and NumQuests is useless anyway.'},
    {name='C_QuestLog.GetNumQuestLogEntries', count=1, confidence=0.20, sample='local numEntries, numQuests = C_QuestLog.GetNumQuestLogEntries();'},
  },
  ['GetQuestLogSelection'] = {
    {name='GetQuestLogSelection', count=2, confidence=0.40, sample='--local selected = GetQuestLogSelection()'},
  },
  ['GetQuestLogQuestText'] = {
    {name='GetQuestLogQuestText', count=1, confidence=0.20, sample='quest.text,quest.summary = GetQuestLogQuestText(i)'},
  },
  ['GetQuestType'] = {
    {name='C_QuestLog.GetQuestType', count=1, confidence=0.20, sample='quest.tagnum = 	C_QuestLog.GetQuestType(info.questID)'},
  },
  ['GetQuestLogQuestType'] = {
    {name='GetQuestLogQuestType', count=1, confidence=0.20, sample='quest.tagnum = GetQuestLogQuestType(i) --will return a number.[0] = "", [1] = "Group", [41] = "PvP",[62] = "Raid", [81] = "Dungeon", [83] = "Legendary",[ 85] = "Heroic",[98] = "Scenario", [102] = "Account",'},
  },
  ['IsFailed'] = {
    {name='C_QuestLog.IsFailed', count=1, confidence=0.20, sample='quest.failed = C_QuestLog.IsFailed(info.questID)'},
  },
  ['GetNumWorldQuestWatches'] = {
    {name='C_QuestLog.GetNumWorldQuestWatches', count=1, confidence=0.20, sample='for i=1,C_QuestLog.GetNumWorldQuestWatches() do'},
  },
  ['GetQuestIDForWorldQuestWatchIndex'] = {
    {name='C_QuestLog.GetQuestIDForWorldQuestWatchIndex', count=1, confidence=0.20, sample='local questID = C_QuestLog.GetQuestIDForWorldQuestWatchIndex(i)'},
  },
  ['GetTaskInfo'] = {
    {name='GetTaskInfo', count=1, confidence=0.20, sample='local isInArea, isOnMap, numObjectives, taskName, displayAsObjective = GetTaskInfo(questID)'},
  },
  ['IsOnQuest'] = {
    {name='C_QuestLog.IsOnQuest', count=5, confidence=1.00, sample='quest.inlog = C_QuestLog.IsOnQuest(questID)'},
  },
  ['GetQuestObjectiveInfo'] = {
    {name='GetQuestObjectiveInfo', count=6, confidence=1.00, sample='local text, objectiveType, finished, num, total = GetQuestObjectiveInfo(questID, objectiveIndex, false);'},
  },
  ['LostQuestEvent'] = {
    {name='LostQuestEvent', count=2, confidence=0.40, sample='self:LostQuestEvent(q.title,q.id,q.complete)'},
  },
  ['AbandonedQuestEvent'] = {
    {name='AbandonedQuestEvent', count=2, confidence=0.40, sample='self:AbandonedQuestEvent(q.title,q.id,q.daily)'},
  },
  ['CompletedQuestEvent'] = {
    {name='CompletedQuestEvent', count=4, confidence=0.80, sample='self:CompletedQuestEvent(q.title,q.id,q.daily)'},
  },
  ['NewQuestEvent'] = {
    {name='NewQuestEvent', count=3, confidence=0.60, sample='self:NewQuestEvent(q.title,q.id)'},
  },
  ['DevTools_Dump'] = {
    {name='DevTools_Dump', count=2, confidence=0.40, sample='if self.DEBUG_QUEST_ID then local q=ZGV.questsbyid[self.DEBUG_QUEST_ID]  DevTools_Dump({title=q.title,complete=q.complete,inlog=q.inlog,goals=q.goals}) end'},
  },
  ['QuestTracking_ResetDailies'] = {
    {name='QuestTracking_ResetDailies', count=3, confidence=0.60, sample='function ZGV:QuestTracking_ResetDailies(force)'},
  },
  ['GetQuestResetTime'] = {
    {name='GetQuestResetTime', count=2, confidence=0.40, sample='local QuestResetTime=GetQuestResetTime()'},
  },
  ['QuestTracking_ResetDailyByTitle'] = {
    {name='QuestTracking_ResetDailyByTitle', count=2, confidence=0.40, sample='function ZGV:QuestTracking_ResetDailyByTitle(title)'},
  },
  ['QUEST_QUERY_COMPLETE_QuestTracking'] = {
    {name='QUEST_QUERY_COMPLETE_QuestTracking', count=1, confidence=0.20, sample='- ZGV:QUEST_QUERY_COMPLETE_QuestTracking() fires'},
  },
  ['TryToCompleteStep'] = {
    {name='TryToCompleteStep', count=13, confidence=1.00, sample='self:ScheduleTimer(function() ZGV:TryToCompleteStep(true) ZGV:UpdateFrame(true) end,0.1)'},
  },
  ['UpdateFrame'] = {
    {name='UpdateFrame', count=81, confidence=1.00, sample='self:ScheduleTimer(function() ZGV:TryToCompleteStep(true) ZGV:UpdateFrame(true) end,0.1)'},
  },
  ['CHAT_MSG_SYSTEM_QuestTracking'] = {
    {name='CHAT_MSG_SYSTEM_QuestTracking', count=1, confidence=0.20, sample='function ZGV:CHAT_MSG_SYSTEM_QuestTracking(event,text)'},
  },
  ['QuestTracking_GetQuestId'] = {
    {name='QuestTracking_GetQuestId', count=1, confidence=0.20, sample='--if quest then self:NewQuestEvent(quest,self:QuestTracking_GetQuestId(quest)) end'},
  },
  ['QueryQuestsCompleted'] = {
    {name='QueryQuestsCompleted', count=1, confidence=0.20, sample='--if QueryQuestsCompleted then QueryQuestsCompleted() end'},
  },
  ['NotifyQuest'] = {
    {name='NotifyQuest', count=3, confidence=0.60, sample='if self.Writer then self.Writer:NotifyQuest("NEW",id,questTitle) end'},
  },
  ['QUEST_COMPLETE_QuestTracking'] = {
    {name='QUEST_COMPLETE_QuestTracking', count=1, confidence=0.20, sample='function ZGV:QUEST_COMPLETE_QuestTracking()'},
  },
  ['GetQuestID'] = {
    {name='GetQuestID', count=7, confidence=1.00, sample='self.recentCompletedQuestID=GetQuestID()'},
  },
  ['GetTitleText'] = {
    {name='GetTitleText', count=2, confidence=0.40, sample='self.recentCompletedQuestTitle=GetTitleText()'},
  },
  ['QuestTracking_hook_SetAbandonQuest'] = {
    {name='ZGV.QuestTracking_hook_SetAbandonQuest', count=1, confidence=0.20, sample='function ZGV.QuestTracking_hook_SetAbandonQuest()'},
  },
  ['GetSelectedQuest'] = {
    {name='C_QuestLog.GetSelectedQuest', count=1, confidence=0.20, sample='index = C_QuestLog.GetSelectedQuest()'},
  },
  ['QuestTracking_hook_AbandonQuest'] = {
    {name='ZGV.QuestTracking_hook_AbandonQuest', count=1, confidence=0.20, sample='function ZGV.QuestTracking_hook_AbandonQuest()'},
  },
  ['MarkUselessQuests'] = {
    {name='MarkUselessQuests', count=2, confidence=0.40, sample='function ZGV:MarkUselessQuests()'},
  },
  ['GetQuests'] = {
    {name='GetQuests', count=4, confidence=0.80, sample='local guidequests = self.CurrentGuide:GetQuests()'},
  },
  ['AbandonUselessQuests'] = {
    {name='AbandonUselessQuests', count=3, confidence=0.60, sample='function ZGV:AbandonUselessQuests()'},
  },
  ['SetSelectedQuest'] = {
    {name='C_QuestLog.SetSelectedQuest', count=1, confidence=0.20, sample='C_QuestLog.SetSelectedQuest(quest.id);'},
  },
  ['SetAbandonQuest'] = {
    {name='C_QuestLog.SetAbandonQuest', count=1, confidence=0.20, sample='C_QuestLog.SetAbandonQuest();'},
  },
  ['AbandonQuest'] = {
    {name='C_QuestLog.AbandonQuest', count=1, confidence=0.20, sample='C_QuestLog.AbandonQuest()'},
  },
  ['ShowQuestCleanup'] = {
    {name='ShowQuestCleanup', count=4, confidence=0.80, sample='function ZGV:ShowQuestCleanup(automated)'},
  },
  ['Enable'] = {
    {name='Enable', count=154, confidence=1.00, sample='self.CleanupPopup.acceptbutton:Enable()'},
  },
  ['Disable'] = {
    {name='Disable', count=180, confidence=1.00, sample='self.CleanupPopup.acceptbutton:Disable()'},
    {name='Details.Coach.Disable', count=5, confidence=1.00, sample='Details.Coach.Disable()'},
  },
  ['GetFactionDataByID'] = {
    {name='C_Reputation.GetFactionDataByID', count=6, confidence=1.00, sample='local data = C_Reputation.GetFactionDataByID(id)'},
  },
  ['IsMajorFaction'] = {
    {name='C_Reputation.IsMajorFaction', count=1, confidence=0.20, sample='return C_Reputation and C_Reputation.IsMajorFaction and C_Reputation.IsMajorFaction(id)'},
  },
  ['ZygorGuidesViewer_L'] = {
    {name='ZygorGuidesViewer_L', count=63, confidence=1.00, sample='local LF=ZygorGuidesViewer_L("Faction")'},
  },
  ['UPDATE_FACTION'] = {
    {name='UPDATE_FACTION', count=2, confidence=0.40, sample='Faction:UPDATE_FACTION()'},
  },
  ['UnitSex'] = {
    {name='UnitSex', count=6, confidence=1.00, sample='local sex = UnitSex("player")==3 and "_FEMALE" or ""'},
  },
  ['GetFactionInfoByID'] = {
    {name='GetFactionInfoByID', count=14, confidence=1.00, sample='local name,desc,standing,min,max,val,_,_,header,_,headerhasrep,_,_, _,_,id = GetFactionInfoByID(1281)'},
  },
  ['GetFriendshipReputation'] = {
    {name='C_GossipInfo.GetFriendshipReputation', count=6, confidence=1.00, sample='local friendID, friendRep, friendMaxRep, friendName, friendText, friendTexture, friendTextLevel, friendThresh, friendThreshNext = C_GossipInfo.GetFriendshipReputation(1281)'},
  },
  ['GetFakeRep'] = {
    {name='GetFakeRep', count=2, confidence=0.40, sample='function Faction:GetFakeRep(id,standing,min,max,val,name)'},
  },
  ['New'] = {
    {name='New', count=124, confidence=1.00, sample='local rep = self.RepProto:New(id,name)'},
    {name='CallbackHandler.New', count=2, confidence=0.40, sample='function CallbackHandler.New(_self, target, RegisterName, UnregisterName, UnregisterAllName)'},
  },
  ['ReportChange'] = {
    {name='ReportChange', count=3, confidence=0.60, sample='function Faction:ReportChange(name,delta,progdelta,going)'},
  },
  ['ReportNoChange'] = {
    {name='ReportNoChange', count=5, confidence=1.00, sample='function Faction:ReportNoChange(name,going)'},
  },
  ['CacheRepByID'] = {
    {name='CacheRepByID', count=3, confidence=0.60, sample='function Faction:CacheRepByID(id) -- OVERRIDDEN in Classic'},
  },
  ['GetMajorFactionData'] = {
    {name='C_MajorFactions.GetMajorFactionData', count=2, confidence=0.40, sample='local majorFacData = C_MajorFactions.GetMajorFactionData(id)'},
  },
  ['GetRenownLevels'] = {
    {name='C_MajorFactions.GetRenownLevels', count=1, confidence=0.20, sample='local levels = C_MajorFactions.GetRenownLevels(id)'},
  },
  ['Going'] = {
    {name='Going', count=10, confidence=1.00, sample='--self:ReportNoChange(rep.name, rep:Going(true))'},
  },
  ['IsFactionParagon'] = {
    {name='C_Reputation.IsFactionParagon', count=2, confidence=0.40, sample='if C_Reputation.IsFactionParagon(id) then'},
  },
  ['GetFactionParagonInfo'] = {
    {name='C_Reputation.GetFactionParagonInfo', count=1, confidence=0.20, sample='local currentValue, threshold, rewardQuestID, hasRewardPending, tooLowLevelForParagon = C_Reputation.GetFactionParagonInfo(id)'},
  },
  ['CacheReputations'] = {
    {name='CacheReputations', count=2, confidence=0.40, sample='function Faction:CacheReputations()'},
  },
  ['GetReputation'] = {
    {name='GetReputation', count=402, confidence=1.00, sample='function ZGV:GetReputation(...)'},
  },
  ['ThrottlerWrap'] = {
    {name='ThrottlerWrap', count=2, confidence=0.40, sample='ZGV:ThrottlerWrap("Faction_UPDATE_FACTION",0,function()'},
  },
  ['CHAT_MSG_COMBAT_FACTION_CHANGE_Faction'] = {
    {name='CHAT_MSG_COMBAT_FACTION_CHANGE_Faction', count=1, confidence=0.20, sample='function ZGV:CHAT_MSG_COMBAT_FACTION_CHANGE_Faction(event,text)'},
  },
  ['Current'] = {
    {name='Current', count=3, confidence=0.60, sample='print(("%s: %s (%s)"):format(faction,rep:Current(),rep:Going()))'},
  },
  ['DEV_GetFactionsSorted'] = {
    {name='DEV_GetFactionsSorted', count=1, confidence=0.20, sample='function Faction:DEV_GetFactionsSorted()'},
  },
  ['DEV_DebugReputationsBasic'] = {
    {name='DEV_DebugReputationsBasic', count=1, confidence=0.20, sample='function Faction:DEV_DebugReputationsBasic()'},
  },
  ['Spoo'] = {
    {name='Spoo', count=27, confidence=1.00, sample='Spoo(rep)'},
  },
  ['GetFormattedStanding'] = {
    {name='GetFormattedStanding', count=5, confidence=1.00, sample='rep:GetFormattedStanding(),'},
  },
  ['DEV_DetectHiddenFriendships'] = {
    {name='DEV_DetectHiddenFriendships', count=1, confidence=0.20, sample='function Faction:DEV_DetectHiddenFriendships() -- dev only'},
  },
  ['CalcTo'] = {
    {name='CalcTo', count=2, confidence=0.40, sample='function RepProto:CalcTo(standing)'},
  },
  ['CalcTotalTo'] = {
    {name='CalcTotalTo', count=3, confidence=0.60, sample='function RepProto:CalcTotalTo(standing)'},
  },
  ['DebugCalcTotalTo'] = {
    {name='DebugCalcTotalTo', count=1, confidence=0.20, sample='function RepProto:DebugCalcTotalTo()'},
  },
  ['GetStandingName'] = {
    {name='GetStandingName', count=5, confidence=1.00, sample='function RepProto:GetStandingName(num)'},
  },
  ['Next'] = {
    {name='Next', count=14, confidence=1.00, sample='function RepProto:Next()'},
  },
  ['GetNextStanding'] = {
    {name='GetNextStanding', count=3, confidence=0.60, sample='local nextstanding = self:GetNextStanding()'},
  },
  ['EqualOrAbove'] = {
    {name='EqualOrAbove', count=1, confidence=0.20, sample='function RepProto:EqualOrAbove(standing)'},
  },
  ['Below'] = {
    {name='Below', count=1, confidence=0.20, sample='function RepProto:Below(standing)'},
  },
  ['GetRawReputation'] = {
    {name='GetRawReputation', count=1, confidence=0.20, sample='function RepProto:GetRawReputation()'},
  },
  ['GetRawFriendship'] = {
    {name='GetRawFriendship', count=1, confidence=0.20, sample='function RepProto:GetRawFriendship()'},
  },
  ['UpdateRep'] = {
    {name='UpdateRep', count=1, confidence=0.20, sample='function RepProto:UpdateRep()'},
  },
  ['CacheResults'] = {
    {name='ZGV.Covenants.CacheResults', count=2, confidence=0.40, sample='function ZGV.Covenants.CacheResults()'},
  },
  ['GetFeatures'] = {
    {name='C_CovenantSanctumUI.GetFeatures', count=1, confidence=0.20, sample='local features = C_CovenantSanctumUI.GetFeatures()'},
  },
  ['GetTalentTreeInfo'] = {
    {name='C_Garrison.GetTalentTreeInfo', count=2, confidence=0.40, sample='local info = C_Garrison.GetTalentTreeInfo(data.garrTalentTreeID)'},
  },
  ['ButtonPosition'] = {
    {name='ButtonPosition', count=2, confidence=0.40, sample='local function ButtonPosition(but)'},
  },
  ['PositionTooltip'] = {
    {name='PositionTooltip', count=2, confidence=0.40, sample='local function PositionTooltip(locX,but)'},
  },
  ['GetBottom'] = {
    {name='GetBottom', count=31, confidence=1.00, sample='--print(but:GetBottom(),topspace,sizeInfo.TooltipHeight, yOffset)'},
  },
  ['SetTooltip'] = {
    {name='SetTooltip', count=23, confidence=1.00, sample='local function SetTooltip(pos,placement)'},
  },
  ['GetStringHeight'] = {
    {name='GetStringHeight', count=66, confidence=1.00, sample='height = 10 + mainFrame.MainText:GetStringHeight() + 10 + mainFrame.TipText:GetStringHeight() + 10 + mainFrame.Back:GetHeight() + 10'},
  },
  ['FadeStart'] = {
    {name='FadeStart', count=2, confidence=0.40, sample='function Tutorial:FadeStart()'},
  },
  ['Fade'] = {
    {name='Fade', count=3, confidence=0.60, sample='local function Fade(pos,placement)'},
  },
  ['FadingReset'] = {
    {name='FadingReset', count=4, confidence=0.80, sample='function Tutorial:FadingReset(current)'},
  },
  ['TooltipLast'] = {
    {name='TooltipLast', count=2, confidence=0.40, sample='local function TooltipLast()'},
  },
  ['CheckTooltip'] = {
    {name='CheckTooltip', count=2, confidence=0.40, sample='local function CheckTooltip(vert,side,placement) --This has some recursion in it, but has a timeout and tooltip is moving so should fix itself.'},
  },
  ['PlaceTooltip'] = {
    {name='PlaceTooltip', count=6, confidence=1.00, sample='self:PlaceTooltip(vert,side,x,y,placement,true)'},
  },
  ['Close'] = {
    {name='Close', count=39, confidence=1.00, sample='if not placement then Tutorial:Close() return end'},
    {name='Details.AuraTracker.Close', count=1, confidence=0.20, sample='function Details.AuraTracker.Close()'},
  },
  ['TutorialPreview'] = {
    {name='TutorialPreview', count=4, confidence=0.80, sample='ZGV.ActionBar:TutorialPreview("on")'},
  },
  ['SetSpacing'] = {
    {name='SetSpacing', count=13, confidence=1.00, sample=':SetSpacing(5)'},
  },
  ['GetDimensions'] = {
    {name='GetDimensions', count=2, confidence=0.40, sample='function Tutorial:GetDimensions(ZGVF)'},
  },
  ['GetSize'] = {
    {name='GetSize', count=47, confidence=1.00, sample='sizeInfo.TotalWidth,sizeInfo.TotalHeight=UIParent:GetSize() sizeInfo.TotalHeight=sizeInfo.TotalHeight-50 --nothing closer than 50 to top'},
  },
  ['SavePositions'] = {
    {name='SavePositions', count=2, confidence=0.40, sample='function Tutorial:SavePositions()'},
  },
  ['Run'] = {
    {name='Run', count=10, confidence=1.00, sample='function Tutorial:Run()'},
  },
  ['AttachViewerVendor'] = {
    {name='AttachViewerVendor', count=1, confidence=0.20, sample='function Inventory:AttachViewerVendor()'},
  },
  ['SaveFrameAnchor'] = {
    {name='ZGV.F.SaveFrameAnchor', count=10, confidence=1.00, sample='ZGV.F.SaveFrameAnchor(frame,"frame_anchor_prevendor")'},
  },
  ['DetachViewerVendor'] = {
    {name='DetachViewerVendor', count=1, confidence=0.20, sample='function Inventory:DetachViewerVendor()'},
  },
  ['SetFrameAnchor'] = {
    {name='ZGV.F.SetFrameAnchor', count=12, confidence=1.00, sample='ZGV.F.SetFrameAnchor(ZGV.Frame:GetParent(),ZGV.db.profile.frame_anchor_prevendor)'},
  },
  ['GetGrayTrashDetails'] = {
    {name='GetGrayTrashDetails', count=3, confidence=0.60, sample='function Inventory:GetGrayTrashDetails()'},
  },
  ['GetItemID'] = {
    {name='ZGV.ItemLink.GetItemID', count=9, confidence=1.00, sample='local itemID = ZGV.ItemLink.GetItemID(itemLink)'},
    {name='IL.GetItemID', count=3, confidence=0.60, sample='function IL.GetItemID(itemlink)'},
    {name='C_Item.GetItemID', count=1, confidence=0.20, sample='function C_Item.GetItemID() end'},
  },
  ['SetActionButtons'] = {
    {name='SetActionButtons', count=13, confidence=1.00, sample='ZGV.ActionBar:SetActionButtons() -- to refresh'},
  },
  ['HandleTrashMacro'] = {
    {name='HandleTrashMacro', count=2, confidence=0.40, sample='function Inventory:HandleTrashMacro()'},
  },
  ['DestroyItem'] = {
    {name='DestroyItem', count=2, confidence=0.40, sample='ZGV.Inventory:DestroyItem(item)'},
  },
  ['PickupContainerItem'] = {
    {name='C_Container.PickupContainerItem', count=4, confidence=0.80, sample='C_Container.PickupContainerItem(bagID, bagSlotID)'},
    {name='PickupContainerItem', count=1, confidence=0.20, sample='PickupContainerItem(bag,bagslot) --put it in an empty slot'},
  },
  ['DeleteCursorItem'] = {
    {name='DeleteCursorItem', count=1, confidence=0.20, sample='DeleteCursorItem()'},
  },
  ['IsTravelItem'] = {
    {name='IsTravelItem', count=2, confidence=0.40, sample='function Inventory:IsTravelItem(itemid)'},
  },
  ['GetUnusableItems'] = {
    {name='GetUnusableItems', count=1, confidence=0.20, sample='function Inventory:GetUnusableItems()'},
  },
  ['ScanBagsForUpgrades'] = {
    {name='ScanBagsForUpgrades', count=4, confidence=0.80, sample='Upgrades:ScanBagsForUpgrades(onlyscan)'},
  },
  ['ScanBagsForUpgradesForAlts'] = {
    {name='ScanBagsForUpgradesForAlts', count=2, confidence=0.40, sample='--Upgrades:ScanBagsForUpgradesForAlts()'},
  },
  ['GetContainerItemEquipmentSetInfo'] = {
    {name='C_Container.GetContainerItemEquipmentSetInfo', count=1, confidence=0.20, sample='if not (C_Container and C_Container.GetContainerItemEquipmentSetInfo and C_Container.GetContainerItemEquipmentSetInfo(bagID,bagSlotID)) then -- don't sell equipment sets'},
  },
  ['IsItemBound'] = {
    {name='ZGV.IsItemBound', count=3, confidence=0.60, sample='local isSoulbound = ZGV.IsItemBound(bagID, bagSlotID)'},
  },
  ['IsUpgradeForAlt'] = {
    {name='IsUpgradeForAlt', count=2, confidence=0.40, sample='--isUpgrade = isUpgrade or Upgrades:IsUpgradeForAlt(stripped_itemlink)'},
  },
  ['IsUpgradeForOffspec'] = {
    {name='IsUpgradeForOffspec', count=3, confidence=0.60, sample='isUpgrade = isUpgrade or Upgrades:IsUpgradeForOffspec(stripped_itemlink)'},
  },
  ['GetItemUniqueness'] = {
    {name='GetItemUniqueness', count=5, confidence=1.00, sample='if id then fam,fmax = ZGV.ItemScore.Upgrades:GetItemUniqueness(id) end'},
    {name='C_Item.GetItemUniqueness', count=2, confidence=0.40, sample='local fam,max = C_Item.GetItemUniqueness(id)'},
  },
  ['SetUpGreySellButton'] = {
    {name='SetUpGreySellButton', count=3, confidence=0.60, sample='function Inventory:SetUpGreySellButton()'},
  },
  ['GetContainerItemID'] = {
    {name='C_Container.GetContainerItemID', count=7, confidence=1.00, sample='local itemID=C_Container.GetContainerItemID(bag,slot)'},
    {name='GetContainerItemID', count=2, confidence=0.40, sample='local itemid=GetContainerItemID(bag,bagslot)'},
  },
  ['UseContainerItem'] = {
    {name='C_Container.UseContainerItem', count=1, confidence=0.20, sample='C_Container.UseContainerItem(bag,slot) -- Will use an item and since vendor is open, will sell the item.'},
    {name='UseContainerItem', count=2, confidence=0.40, sample='UseContainerItem (b, s)'},
  },
  ['GetMoneyString'] = {
    {name='GetMoneyString', count=13, confidence=1.00, sample='ZGV:Print(L['loot_sellgreys_total']:format(GetMoneyString(Inventory.SellingGreyTotal)))'},
    {name='ZGV.GetMoneyString', count=70, confidence=1.00, sample='local text = L['loot_autobuyframetext']:format(itemtext,ZGV.GetMoneyString(totalCost))'},
  },
  ['SellGreyItems'] = {
    {name='SellGreyItems', count=2, confidence=0.40, sample='function Inventory:SellGreyItems() --Auto Sell Grey Items'},
  },
  ['FindItemsToBuyDelayed'] = {
    {name='FindItemsToBuyDelayed', count=5, confidence=1.00, sample='function Inventory:FindItemsToBuyDelayed(delay)'},
  },
  ['FindItemsToBuy'] = {
    {name='FindItemsToBuy', count=2, confidence=0.40, sample='Inventory.FindeItemsTimer = ZGV:ScheduleTimer(function() Inventory:FindItemsToBuy() end,delay or 0.1)'},
  },
  ['RemoveEntry'] = {
    {name='RemoveEntry', count=8, confidence=1.00, sample='ZGV.NotificationCenter:RemoveEntry("goldbuy")'},
  },
  ['GetMerchantNumItems'] = {
    {name='GetMerchantNumItems', count=1, confidence=0.20, sample='for index=1,GetMerchantNumItems() do while(1) do'},
  },
  ['GetMerchantItemInfo'] = {
    {name='GetMerchantItemInfo', count=1, confidence=0.20, sample='local merchItemName,_,costForOne,merchantStack,numAvail = GetMerchantItemInfo(index)'},
  },
  ['GetMerchantItemLink'] = {
    {name='GetMerchantItemLink', count=1, confidence=0.20, sample='local itemlink = GetMerchantItemLink(index)'},
  },
  ['GetMerchantItemMaxStack'] = {
    {name='GetMerchantItemMaxStack', count=1, confidence=0.20, sample='local maxStack = GetMerchantItemMaxStack(index)'},
  },
  ['GetMoney'] = {
    {name='GetMoney', count=15, confidence=1.00, sample='local playerMoney = GetMoney()'},
  },
  ['AddEntry'] = {
    {name='AddEntry', count=36, confidence=1.00, sample='ZGV.NotificationCenter:AddEntry("goldbuy",title,text,{special=true, specialtext="Buy items", forcemode="detailed", displaytime=9999, transient=true, anchor={"LEFT",MerchantFrame,"RIGHT",0,0}})'},
  },
  ['BuyItems'] = {
    {name='BuyItems', count=2, confidence=0.40, sample='function Inventory:BuyItems()'},
  },
  ['BuyMerchantItem'] = {
    {name='BuyMerchantItem', count=1, confidence=0.20, sample='BuyMerchantItem(item.index,buyAmount)'},
  },
  ['SetUpBagspaceText'] = {
    {name='SetUpBagspaceText', count=2, confidence=0.40, sample='function Inventory:SetUpBagspaceText()'},
  },
  ['UpdateBagspaceText'] = {
    {name='UpdateBagspaceText', count=4, confidence=0.80, sample='function Inventory:UpdateBagspaceText()'},
  },
  ['GetContainerNumFreeSlots'] = {
    {name='C_Container.GetContainerNumFreeSlots', count=3, confidence=0.60, sample='free = free + C_Container.GetContainerNumFreeSlots(bag)'},
  },
  ['StripBlizzExtras'] = {
    {name='ZGV.ItemLink.StripBlizzExtras', count=4, confidence=0.80, sample='link = ZGV.ItemLink.StripBlizzExtras(link,true)'},
    {name='IL.StripBlizzExtras', count=1, confidence=0.20, sample='function IL.StripBlizzExtras(itemlink,keepDecor)'},
  },
  ['RecordBank'] = {
    {name='RecordBank', count=3, confidence=0.60, sample='function Inventory:RecordBank()'},
  },
  ['ContainerIDToInventoryID'] = {
    {name='C_Container.ContainerIDToInventoryID', count=2, confidence=0.40, sample='local slot = C_Container.ContainerIDToInventoryID(NUM_BAG_SLOTS + index-1)'},
  },
  ['GetInventoryItemTexture'] = {
    {name='GetInventoryItemTexture', count=1, confidence=0.20, sample='local bagtexture = GetInventoryItemTexture("player",slot)'},
  },
  ['IsReagentBankUnlocked'] = {
    {name='IsReagentBankUnlocked', count=1, confidence=0.20, sample='if IsReagentBankUnlocked and IsReagentBankUnlocked() then'},
  },
  ['FetchPurchasedBankTabData'] = {
    {name='C_Bank.FetchPurchasedBankTabData', count=1, confidence=0.20, sample='local tabDataFetched = C_Bank.FetchPurchasedBankTabData(Enum.BankType.Account)'},
  },
  ['SendMessage'] = {
    {name='SendMessage', count=49, confidence=1.00, sample='ZGV:SendMessage("INVENTORY_BANK_UPDATED")'},
  },
  ['CharacterBankKnown'] = {
    {name='CharacterBankKnown', count=3, confidence=0.60, sample='function Inventory:CharacterBankKnown()'},
  },
  ['ParseBank'] = {
    {name='ParseBank', count=4, confidence=0.80, sample='function Inventory:ParseBank(ident)'},
  },
  ['GetCalendarTimeFromEpoch'] = {
    {name='C_DateAndTime.GetCalendarTimeFromEpoch', count=6, confidence=1.00, sample='local timeobj = C_DateAndTime.GetCalendarTimeFromEpoch(timestamp*1000000)  -- seconds to microseconds'},
  },
  ['FormatShortDate'] = {
    {name='FormatShortDate', count=9, confidence=1.00, sample='local timestamp = FormatShortDate(timeobj.monthDay, timeobj.month, timeobj.year) .. " " .. GameTime_GetFormattedTime(timeobj.hour, timeobj.minute, true)'},
  },
  ['GameTime_GetFormattedTime'] = {
    {name='GameTime_GetFormattedTime', count=8, confidence=1.00, sample='local timestamp = FormatShortDate(timeobj.monthDay, timeobj.month, timeobj.year) .. " " .. GameTime_GetFormattedTime(timeobj.hour, timeobj.minute, true)'},
  },
  ['ParseBankSummary'] = {
    {name='ParseBankSummary', count=3, confidence=0.60, sample='function Inventory:ParseBankSummary()'},
  },
  ['CountBank'] = {
    {name='CountBank', count=3, confidence=0.60, sample='function Inventory:CountBank(itemid)'},
  },
  ['AutoRepair'] = {
    {name='AutoRepair', count=2, confidence=0.40, sample='function Inventory:AutoRepair()'},
  },
  ['CanMerchantRepair'] = {
    {name='CanMerchantRepair', count=1, confidence=0.20, sample='if CanMerchantRepair() then'},
  },
  ['GetRepairAllCost'] = {
    {name='GetRepairAllCost', count=1, confidence=0.20, sample='local zgvgoldneeded = GetRepairAllCost()'},
  },
  ['CanGuildBankRepair'] = {
    {name='CanGuildBankRepair', count=2, confidence=0.40, sample='local zgvcangbrepair = CanGuildBankRepair()'},
  },
  ['GetGuildBankWithdrawMoney'] = {
    {name='GetGuildBankWithdrawMoney', count=1, confidence=0.20, sample='local zgvgbankamount = GetGuildBankWithdrawMoney()'},
  },
  ['IsInGuild'] = {
    {name='IsInGuild', count=15, confidence=1.00, sample='if ZGV.db.profile.autorepair==2 or (not IsInGuild() and ZGV.db.profile.autorepair>2) then'},
  },
  ['RepairAllItems'] = {
    {name='RepairAllItems', count=5, confidence=1.00, sample='RepairAllItems()'},
  },
  ['OnEvent'] = {
    {name='Inventory.OnEvent', count=1, confidence=0.20, sample='function Inventory.OnEvent(self, event)'},
    {name='OnEvent', count=39, confidence=1.00, sample='function ItemScore:OnEvent(event,arg1,arg2,...)'},
    {name='Sync.OnEvent', count=1, confidence=0.20, sample='function Sync.OnEvent(addon,event,...)'},
    {name='GuideFuncs.OnEvent', count=1, confidence=0.20, sample='function GuideFuncs.OnEvent(self,event,arg1,...)'},
    {name='Lib.OnEvent', count=1, confidence=0.20, sample='function Lib.OnEvent(this, event, arg1,arg2)'},
    {name='ChatThrottleLib.OnEvent', count=2, confidence=0.40, sample='function ChatThrottleLib.OnEvent(this,event)'},
    {name='AuraScan.OnEvent', count=1, confidence=0.20, sample='function AuraScan.OnEvent(frame, eventName, unitId, updateInfo)'},
    {name='NickTag.OnEvent', count=1, confidence=0.20, sample='function NickTag.OnEvent (self, event, ...)'},
  },
  ['SetShown'] = {
    {name='SetShown', count=46, confidence=1.00, sample='Inventory.greysellbutton:SetShown(ZGV.db.profile.showgreysellbutton)'},
  },
  ['SellUnusableItems'] = {
    {name='SellUnusableItems', count=2, confidence=0.40, sample='--if ZGV.db.profile.autosellother and ZGV.db.profile.enable_vendor_tools then Inventory:SellUnusableItems() end'},
  },
  ['ShowSuggested'] = {
    {name='ShowSuggested', count=3, confidence=0.60, sample='callback=function() GuideMenu:ShowSuggested() GuideMenu:Update() end'},
  },
  ['ShowRecent'] = {
    {name='ShowRecent', count=3, confidence=0.60, sample='callback=function() GuideMenu:ShowRecent() GuideMenu:Update() end'},
  },
  ['UIDropDownFork_Refresh'] = {
    {name='UIDropDownFork_Refresh', count=11, confidence=1.00, sample='func=function() ZGV.db.profile[name]=value UIDropDownFork_Refresh(ZGV.Frame.Controls.MenuHostGuides) end,'},
  },
  ['Open'] = {
    {name='Open', count=61, confidence=1.00, sample='function GuideMenu:Open(path,iscurrent,...)'},
    {name='Details.AuraTracker.Open', count=2, confidence=0.40, sample='Details.AuraTracker.Open()'},
    {name='DetailsMythicPlus.Open', count=2, confidence=0.40, sample='DetailsMythicPlus.Open(runId)'},
  },
  ['HideRowMouseOver'] = {
    {name='HideRowMouseOver', count=4, confidence=0.80, sample='GuideMenu:HideRowMouseOver()'},
  },
  ['Initialise'] = {
    {name='Initialise', count=41, confidence=1.00, sample='ZGV.Goldguide:Initialise()'},
    {name='TA.Initialise', count=1, confidence=0.20, sample='function TA.Initialise()'},
  },
  ['CloseDropDownForks'] = {
    {name='CloseDropDownForks', count=33, confidence=1.00, sample='CloseDropDownForks()'},
  },
  ['SetLockHighlight'] = {
    {name='SetLockHighlight', count=4, confidence=0.80, sample='v:SetLockHighlight(true)'},
  },
  ['ShowCurrent'] = {
    {name='ShowCurrent', count=2, confidence=0.40, sample='GuideMenu:ShowCurrent()'},
  },
  ['ShowHome'] = {
    {name='ShowHome', count=3, confidence=0.60, sample='GuideMenu:ShowHome()'},
  },
  ['ShowFeatured'] = {
    {name='ShowFeatured', count=7, confidence=1.00, sample='GuideMenu:ShowFeatured()'},
  },
  ['ShowOptions'] = {
    {name='ShowOptions', count=2, confidence=0.40, sample='GuideMenu:ShowOptions(...)'},
  },
  ['Search'] = {
    {name='Search', count=2, confidence=0.40, sample='GuideMenu:Search()'},
  },
  ['SearchQuest'] = {
    {name='SearchQuest', count=3, confidence=0.60, sample='GuideMenu:SearchQuest(...)'},
  },
  ['ShowFavourites'] = {
    {name='ShowFavourites', count=2, confidence=0.40, sample='GuideMenu:ShowFavourites()'},
  },
  ['ShowGuides'] = {
    {name='ShowGuides', count=2, confidence=0.40, sample='GuideMenu:ShowGuides(path,iscurrent)'},
  },
  ['HideAllPopups'] = {
    {name='HideAllPopups', count=5, confidence=1.00, sample='ZGV.Widgets:HideAllPopups()'},
  },
  ['SetSectionHeader'] = {
    {name='SetSectionHeader', count=11, confidence=1.00, sample='function GuideMenu:SetSectionHeader(text,arrow)'},
  },
  ['SetWideSectionHeader'] = {
    {name='SetWideSectionHeader', count=2, confidence=0.40, sample='function GuideMenu:SetWideSectionHeader(text)'},
  },
  ['UpdateHandler'] = {
    {name='UpdateHandler', count=3, confidence=0.60, sample='local function UpdateHandler(self, event)'},
    {name='Appraiser.UpdateHandler', count=2, confidence=0.40, sample='Appraiser.UpdateHandler(nil,1000) -- force update'},
    {name='Scan.UpdateHandler', count=1, confidence=0.20, sample='function Scan.UpdateHandler(frame,elapsed)'},
  },
  ['HoverBarShow'] = {
    {name='HoverBarShow', count=2, confidence=0.40, sample='ZGV.Widgets:HoverBarShow()'},
  },
  ['HoverBarHide'] = {
    {name='HoverBarHide', count=2, confidence=0.40, sample='ZGV.Widgets:HoverBarHide()'},
  },
  ['HasFocus'] = {
    {name='HasFocus', count=10, confidence=1.00, sample='if GuideMenu.MainFrame.MenuGuides.SearchEdit:HasFocus()'},
  },
  ['SquareCorners'] = {
    {name='SquareCorners', count=8, confidence=1.00, sample=':SquareCorners(true,true,true,false)'},
  },
  ['HTMLColor'] = {
    {name='ZGV.F.HTMLColor', count=182, confidence=1.00, sample=':SetBackdropColor(ZGV.F.HTMLColor("#0d0d0dff"))'},
    {name='HTMLColor', count=26, confidence=1.00, sample='local ACCENT = {HTMLColor("#fe6100ff")}'},
  },
  ['CreateFrames'] = {
    {name='CreateFrames', count=3, confidence=0.60, sample='function GuideMenu:CreateFrames()'},
  },
  ['DisableConfig'] = {
    {name='DisableConfig', count=3, confidence=0.60, sample='ZGV.Widgets:DisableConfig()'},
  },
  ['HeaderButton_SetHighlight'] = {
    {name='HeaderButton_SetHighlight', count=1, confidence=0.20, sample='local function HeaderButton_SetHighlight(button,tf,force)'},
  },
  ['HeaderButton_SetNormalTextColor'] = {
    {name='HeaderButton_SetNormalTextColor', count=1, confidence=0.20, sample='local function HeaderButton_SetNormalTextColor(button,r,g,b,a)'},
  },
  ['HeaderButton_SetHighlightTextColor'] = {
    {name='HeaderButton_SetHighlightTextColor', count=1, confidence=0.20, sample='local function HeaderButton_SetHighlightTextColor(button,r,g,b,a)'},
  },
  ['HeaderButton_SetLockHighlight'] = {
    {name='HeaderButton_SetLockHighlight', count=1, confidence=0.20, sample='local function HeaderButton_SetLockHighlight(button,tf)'},
  },
  ['SetHighlight'] = {
    {name='SetHighlight', count=7, confidence=1.00, sample='button:SetHighlight(tf,true)'},
  },
  ['SetNormalTextColor'] = {
    {name='SetNormalTextColor', count=2, confidence=0.40, sample=':SetNormalTextColor(unpack(GuideMenu.BUTTONS_NORMAL_COLOR))'},
  },
  ['SetHighlightTextColor'] = {
    {name='SetHighlightTextColor', count=2, confidence=0.40, sample=':SetHighlightTextColor(unpack(GuideMenu.BUTTONS_HIGHLIGHT_COLOR))'},
  },
  ['GetStringWidth'] = {
    {name='GetStringWidth', count=105, confidence=1.00, sample=':SetWidth(button:GetStringWidth()+6)'},
  },
  ['SearchHistory_Commit'] = {
    {name='SearchHistory_Commit', count=2, confidence=0.40, sample=':SetScript("OnEnterPressed",function() MF.MenuGuides.SearchEdit:ClearFocus() GuideMenu:Open("Search") GuideMenu:SearchHistory_Commit() end)'},
  },
  ['PrepareGuidesMenuButtons'] = {
    {name='PrepareGuidesMenuButtons', count=4, confidence=0.80, sample='GuideMenu:PrepareGuidesMenuButtons()'},
  },
  ['MakeMenuButton'] = {
    {name='MakeMenuButton', count=5, confidence=1.00, sample='MF.MenuGuides.Options = GuideMenu:MakeMenuButton("ButtonOptions","Options",SkinData("TitleButtons"),5,64,1,4)'},
  },
  ['ToggleSectionMenu'] = {
    {name='ToggleSectionMenu', count=2, confidence=0.40, sample=':SetScript("OnClick",function() GuideMenu:ToggleSectionMenu() end)'},
  },
  ['SetRotation'] = {
    {name='SetRotation', count=23, confidence=1.00, sample='SectionInfo.SettingsButton:GetNormalTexture():SetRotation(1.57079633) -- 90 degree in radians'},
  },
  ['ActivateGuide'] = {
    {name='ActivateGuide', count=21, confidence=1.00, sample='GuideMenu:ActivateGuide(row.guide)'},
  },
  ['ShowRowMouseOver'] = {
    {name='ShowRowMouseOver', count=2, confidence=0.40, sample='row:SetScript("OnEnter",function() GuideMenu:ShowRowMouseOver(row) GuideMenu.CurrentRow=row end)'},
  },
  ['GetScript'] = {
    {name='GetScript', count=101, confidence=1.00, sample='local load_button_onenter=row.loadbutton:GetScript("OnEnter")'},
  },
  ['ToggleFavourite'] = {
    {name='ToggleFavourite', count=2, confidence=0.40, sample='row.favourite:SetScript("OnClick",function(but) if row.guide then row.guide:ToggleFavourite() GuideMenu:Update() end end)'},
  },
  ['SetLooping'] = {
    {name='SetLooping', count=14, confidence=1.00, sample=':SetLooping("REPEAT") .__END'},
  },
  ['SetAutoRotation'] = {
    {name='SetAutoRotation', count=2, confidence=0.40, sample=':SetAutoRotation(0.4)'},
  },
  ['ExportPath'] = {
    {name='ExportPath', count=3, confidence=0.60, sample='function GuideMenu:ExportPath(row)'},
  },
  ['MenuButton_SetHighlight'] = {
    {name='MenuButton_SetHighlight', count=1, confidence=0.20, sample='local function MenuButton_SetHighlight(button,tf,force)'},
  },
  ['SetSpriteTexCoord'] = {
    {name='ZGV.F.SetSpriteTexCoord', count=3, confidence=0.60, sample='ZGV.F.SetSpriteTexCoord(button.texture,unpack(tf and button.spritecoords_hilite or button.spritecoords))'},
    {name='SetSpriteTexCoord', count=2, confidence=0.40, sample='-- SetSpriteTexCoord(textureobject,2,4,3,8) -- sets texture coords on textureobject to crop to sprite in the 2nd of 4 columns, 1st of 8 rows.'},
  },
  ['MenuButton_SetHighlightSprite'] = {
    {name='MenuButton_SetHighlightSprite', count=1, confidence=0.20, sample='local function MenuButton_SetHighlightSprite(button,x,w,y,h)'},
  },
  ['MenuButton_SetLockHighlight'] = {
    {name='MenuButton_SetLockHighlight', count=1, confidence=0.20, sample='local function MenuButton_SetLockHighlight(button,tf)'},
  },
  ['MenuButton_SetNormalTextColor'] = {
    {name='MenuButton_SetNormalTextColor', count=1, confidence=0.20, sample='local function MenuButton_SetNormalTextColor(button,r,g,b,a)'},
  },
  ['MenuButton_SetHighlightTextColor'] = {
    {name='MenuButton_SetHighlightTextColor', count=1, confidence=0.20, sample='local function MenuButton_SetHighlightTextColor(button,r,g,b,a)'},
  },
  ['SetHighlightTexture'] = {
    {name='SetHighlightTexture', count=69, confidence=1.00, sample='but:SetHighlightTexture("dummy") -- we need to set it, so it gets created.'},
  },
  ['ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED'] = {
    {name='ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED', count=1, confidence=0.20, sample='function ZGV:ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED()'},
  },
  ['DoFadeIn'] = {
    {name='DoFadeIn', count=3, confidence=0.60, sample='GuideMenu.MainFrame:DoFadeIn()'},
  },
  ['DoFadeOut'] = {
    {name='DoFadeOut', count=3, confidence=0.60, sample='GuideMenu.MainFrame:DoFadeOut()'},
  },
  ['Unload'] = {
    {name='Unload', count=3, confidence=0.60, sample='v:Unload()'},
  },
  ['CreateHome'] = {
    {name='CreateHome', count=3, confidence=0.60, sample='function GuideMenu:CreateHome()'},
  },
  ['SetupWidgets'] = {
    {name='SetupWidgets', count=2, confidence=0.40, sample='ZGV.Widgets:SetupWidgets()'},
  },
  ['UpdateHomeWidgets'] = {
    {name='UpdateHomeWidgets', count=9, confidence=1.00, sample='GuideMenu:UpdateHomeWidgets()'},
  },
  ['ApplyLayout'] = {
    {name='ApplyLayout', count=3, confidence=0.60, sample='ZGV.Widgets:ApplyLayout()'},
  },
  ['TotalValue'] = {
    {name='TotalValue', count=20, confidence=1.00, sample='GuideMenu.MainFrame.WideColumnHome:TotalValue(height)'},
  },
  ['SetValue'] = {
    {name='SetValue', count=471, confidence=1.00, sample='GuideMenu.MainFrame.WideColumnHome:SetValue(0)'},
  },
  ['SetVerticalScroll'] = {
    {name='SetVerticalScroll', count=21, confidence=1.00, sample='GuideMenu.MainFrame.WideColumnHome:SetVerticalScroll(0)'},
  },
  ['StartFeatured'] = {
    {name='StartFeatured', count=2, confidence=0.40, sample='function GuideMenu:StartFeatured()'},
  },
  ['ParseFeatured'] = {
    {name='ParseFeatured', count=1, confidence=0.20, sample='function GuideMenu:ParseFeatured()'},
  },
  ['FindFilteredGuides'] = {
    {name='FindFilteredGuides', count=3, confidence=0.60, sample='local res = ZGV:FindFilteredGuides(element.filters)'},
  },
  ['Render'] = {
    {name='Render', count=7, confidence=1.00, sample='ZGV.Visuals:Render(section,FEATURED_COLUMN_WIDTH,section.frame,{TOPLEFT={0,0}, GUIDESTATUS=true, NOWORDWRAP=true, BOTTOMPADDING={banner=10,item=0}})'},
  },
  ['SetIgnoreParentAlpha'] = {
    {name='SetIgnoreParentAlpha', count=71, confidence=1.00, sample=':SetIgnoreParentAlpha(true)'},
  },
  ['AssignToTexture'] = {
    {name='AssignToTexture', count=21, confidence=1.00, sample='ZGV.ButtonSets.TitleButtons.STEP_NEXT:AssignToTexture(section.frame.footer.arrow)'},
  },
  ['ShowBulletin'] = {
    {name='ShowBulletin', count=1, confidence=0.20, sample='function GuideMenu:ShowBulletin()'},
  },
  ['ShowPopup'] = {
    {name='ShowPopup', count=7, confidence=1.00, sample='ZGV.Widgets.Registered.zygormessage:ShowPopup()'},
  },
  ['GetSectionMenu'] = {
    {name='GetSectionMenu', count=3, confidence=0.60, sample='function GuideMenu:GetSectionMenu()'},
  },
  ['UIDropDownFork_SetAnchor'] = {
    {name='UIDropDownFork_SetAnchor', count=21, confidence=1.00, sample='UIDropDownFork_SetAnchor(ZGV.Frame.Controls.MenuHostGuides, 0, 0, "TOP",MF.CenterColumn.SectionInfo.SettingsButton,"BOTTOM")'},
  },
  ['EasyFork'] = {
    {name='EasyFork', count=22, confidence=1.00, sample='EasyFork(RightColumnSubmenus[menu],ZGV.Frame.Controls.MenuHostGuides,nil,0,0,"MENU",10)'},
  },
  ['UIDropDownFork_SetWidth'] = {
    {name='UIDropDownFork_SetWidth', count=10, confidence=1.00, sample='UIDropDownFork_SetWidth(ZGV.Frame.Controls.MenuHostGuides,210,10)'},
  },
  ['OptionButton_OnClick'] = {
    {name='OptionButton_OnClick', count=2, confidence=0.40, sample='local function OptionButton_OnClick(button)'},
  },
  ['HighlightOptionButton'] = {
    {name='HighlightOptionButton', count=2, confidence=0.40, sample='GuideMenu:HighlightOptionButton(button.optiongroupblizname)'},
  },
  ['ShowOptionButtons'] = {
    {name='ShowOptionButtons', count=2, confidence=0.40, sample='self:ShowOptionButtons()'},
  },
  ['SetHighlightSprite'] = {
    {name='SetHighlightSprite', count=1, confidence=0.20, sample='--button:SetHighlightSprite(1,2,i,16)'},
  },
  ['CreateOptions'] = {
    {name='CreateOptions', count=1, confidence=0.20, sample='function GuideMenu:CreateOptions()'},
  },
  ['Options_Initialize'] = {
    {name='Options_Initialize', count=2, confidence=0.40, sample='function ZGV:Options_Initialize()'},
  },
  ['SetProfile'] = {
    {name='SetProfile', count=9, confidence=1.00, sample='--self.db:SetProfile("char/"..UnitName("player").." - "..GetRealmName())'},
    {name='DBObjectLib.SetProfile', count=1, confidence=0.20, sample='DBObjectLib.SetProfile(db, name)'},
    {name='SavedVars.SetProfile', count=3, confidence=0.60, sample='function detailsFramework.SavedVars.SetProfile(addonObject, profileName, bCopyFromCurrentProfile)'},
  },
  ['GetRealmName'] = {
    {name='GetRealmName', count=34, confidence=1.00, sample='--self.db:SetProfile("char/"..UnitName("player").." - "..GetRealmName())'},
  },
  ['Options_DefineOptionTables'] = {
    {name='Options_DefineOptionTables', count=2, confidence=0.40, sample='self:Options_DefineOptionTables()'},
  },
  ['Options_RegisterDefaults'] = {
    {name='Options_RegisterDefaults', count=3, confidence=0.60, sample='self:Options_RegisterDefaults()'},
  },
  ['Options_SetupConfig'] = {
    {name='Options_SetupConfig', count=2, confidence=0.40, sample='self:Options_SetupConfig()'},
  },
  ['Options_SetupBlizConfig'] = {
    {name='Options_SetupBlizConfig', count=2, confidence=0.40, sample='self:Options_SetupBlizConfig()'},
  },
  ['Options_SetFromMode'] = {
    {name='Options_SetFromMode', count=3, confidence=0.60, sample='function ZGV:Options_SetFromMode()'},
  },
  ['UpdateLocking'] = {
    {name='UpdateLocking', count=10, confidence=1.00, sample='self:UpdateLocking()'},
  },
  ['ScrollToCurrentStep'] = {
    {name='ScrollToCurrentStep', count=6, confidence=1.00, sample='self:ScrollToCurrentStep()'},
  },
  ['ResetToDefaults'] = {
    {name='ResetToDefaults', count=4, confidence=0.80, sample='local function ResetToDefaults(options_tab,parent)'},
  },
  ['Setter_Simple'] = {
    {name='Setter_Simple', count=171, confidence=1.00, sample='Setter_Simple(info,value)'},
  },
  ['Setter_Travel'] = {
    {name='Setter_Travel', count=3, confidence=0.60, sample='local function Setter_Travel(i,v)'},
  },
  ['UpdateConfig'] = {
    {name='UpdateConfig', count=4, confidence=0.80, sample='LibRover:UpdateConfig()'},
  },
  ['UpdateNow'] = {
    {name='UpdateNow', count=35, confidence=1.00, sample='LibRover:UpdateNow()'},
  },
  ['ShowWaypoints'] = {
    {name='ShowWaypoints', count=48, confidence=1.00, sample='ZGV:ShowWaypoints()'},
  },
  ['AddOption'] = {
    {name='AddOption', count=517, confidence=1.00, sample='local function AddOption(optname,optdata)'},
  },
  ['AddOptionSep'] = {
    {name='AddOptionSep', count=66, confidence=1.00, sample='AddOptionSep()'},
  },
  ['AddOptionSpace'] = {
    {name='AddOptionSpace', count=53, confidence=1.00, sample='function AddOptionSpace()'},
  },
  ['AddSubgroup'] = {
    {name='AddSubgroup', count=14, confidence=1.00, sample='local function AddSubgroup(optname,optdata)'},
  },
  ['EndSubgroup'] = {
    {name='EndSubgroup', count=13, confidence=1.00, sample='local function EndSubgroup()'},
  },
  ['AddOptionGroup'] = {
    {name='AddOptionGroup', count=24, confidence=1.00, sample='local function AddOptionGroup(groupname,groupupname,slash,groupdata)'},
  },
  ['CreateFont'] = {
    {name='CreateFont', count=7, confidence=1.00, sample='self.font_dialog = CreateFont("ZygorFontDialog")'},
  },
  ['ToggleFrame'] = {
    {name='ToggleFrame', count=20, confidence=1.00, sample='func = function(inp) ZGV:ToggleFrame() end,'},
  },
  ['SetWaypointByCommandLine'] = {
    {name='SetWaypointByCommandLine', count=4, confidence=0.80, sample='ZGV.Pointer:SetWaypointByCommandLine(input)'},
  },
  ['GetCVar'] = {
    {name='GetCVar', count=22, confidence=1.00, sample='get = function() return GetCVar("scriptProfile")=="1" end,'},
    {name='C_CVar.GetCVar', count=2, confidence=0.40, sample='local debugMessage = C_CVar.GetCVar(CONST_CVAR_TEMPCACHE_DEBUG)'},
  },
  ['Debug_FlagsMenu'] = {
    {name='Debug_FlagsMenu', count=2, confidence=0.40, sample='func = function(inp)  ZGV:Debug_FlagsMenu()  end'},
  },
  ['Detect'] = {
    {name='Detect', count=3, confidence=0.60, sample='func = function() ZGV.CreatureDetector:Detect("force") end,'},
  },
  ['SuggestGuidesForQuest'] = {
    {name='SuggestGuidesForQuest', count=3, confidence=0.60, sample='ZGV.QuestDB:SuggestGuidesForQuest(input) end,'},
  },
  ['Activate'] = {
    {name='Activate', count=1, confidence=0.20, sample='set = function(i,v) Setter_Simple(i,v)  ZGV.Sync:Activate()  if ZGV.CurrentGuide and ZGV.CurrentGuide.headerdata.shared then ZGV:ClearCurrentGuide() end end,'},
  },
  ['ClearCurrentGuide'] = {
    {name='ClearCurrentGuide', count=2, confidence=0.40, sample='set = function(i,v) Setter_Simple(i,v)  ZGV.Sync:Activate()  if ZGV.CurrentGuide and ZGV.CurrentGuide.headerdata.shared then ZGV:ClearCurrentGuide() end end,'},
  },
  ['MinimapZoomChanged'] = {
    {name='MinimapZoomChanged', count=2, confidence=0.40, sample='--[[hidden--]] AddOption('minimapzoom',{ type = 'toggle', width = "full", set = function(i,v) Setter_Simple(i,v)  self.Pointer:MinimapZoomChanged() end, _default = false, hidden=true, })'},
  },
  ['UpdateVisibility'] = {
    {name='UpdateVisibility', count=9, confidence=1.00, sample='--AddOption('hidetracker',{ type = 'toggle', set = function(i,v) Setter_Simple(i,v)  ZGV.Replacements:UpdateVisibility("force")  end, _default=false, width=200,})'},
  },
  ['Stealth'] = {
    {name='Stealth', count=2, confidence=0.40, sample='return t  -- [1]="Stealth (default)", [2]="Midnight"'},
  },
  ['SetSkin'] = {
    {name='SetSkin', count=6, confidence=1.00, sample='self:SetSkin(self.db.profile.skin,style_sort_order_rev[n] or n)  -- use string id if number given'},
  },
  ['GetScale'] = {
    {name='GetScale', count=34, confidence=1.00, sample='local scale = ZGV.Frame:GetScale()'},
  },
  ['ReanchorFrame'] = {
    {name='ReanchorFrame', count=7, confidence=1.00, sample='self:ReanchorFrame()'},
  },
  ['After'] = {
    {name='C_Timer.After', count=177, confidence=1.00, sample='C_Timer.After(0.001,function()'},
    {name='Details.Schedules.After', count=5, confidence=1.00, sample='Details.Schedules.After(5, _detalhes.wipe_combat_after_failed_load)'},
    {name='DF.Schedules.After', count=1, confidence=0.20, sample='DF.Schedules.After(DF.Math.RandomFraction(0.016, 0.3), function()'},
    {name='Schedules.After', count=2, confidence=0.40, sample='function detailsFramework.Schedules.After(time, callback)'},
  },
  ['SetCombatHiding'] = {
    {name='SetCombatHiding', count=9, confidence=1.00, sample='AddOption('hideincombat',{ type = 'toggle', width="double", _default = false, set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:SetCombatHiding(v) ZGV.ActionBar:SetCombatHiding() end,})'},
  },
  ['UpdateMapButton'] = {
    {name='UpdateMapButton', count=4, confidence=0.80, sample='AddOption('showmapbutton',{ type = 'toggle', width = "full", _default=true, set = function(i,v) Setter_Simple(i,v)  self:UpdateMapButton()  end, })'},
  },
  ['ResetWindow'] = {
    {name='ResetWindow', count=10, confidence=1.00, sample='func = function() ZGV.Frame:ResetWindow() end,'},
  },
  ['OnSizeChanged'] = {
    {name='OnSizeChanged', count=10, confidence=1.00, sample='ZGV.Frame:OnSizeChanged()'},
  },
  ['UnitGroupRolesAssigned'] = {
    {name='UnitGroupRolesAssigned', count=28, confidence=1.00, sample='AddOption('showallroles',{ type = 'toggle', width = "full", desc = function() return L['opt_showallroles_desc'] .. (UnitGroupRolesAssigned("Player")=="NONE" and "\n"..L['opt_showallroles_descwarnnone'] or "") end, _default=true, })'},
    {name='DetailsFramework.UnitGroupRolesAssigned', count=2, confidence=0.40, sample='local role = DetailsFramework.UnitGroupRolesAssigned("player")'},
    {name='DF.UnitGroupRolesAssigned', count=2, confidence=0.40, sample='function DF.UnitGroupRolesAssigned(unitId, bUseSupport, specId)'},
  },
  ['UpdateMode'] = {
    {name='UpdateMode', count=9, confidence=1.00, sample='set=function(i,v) Setter_Simple(i,v)  ZGV.Sync:UpdateMode()  end,'},
  },
  ['ClearBar'] = {
    {name='ClearBar', count=6, confidence=1.00, sample='ZGV.ActionBar:ClearBar()'},
  },
  ['UpdateArrowVisibility'] = {
    {name='UpdateArrowVisibility', count=3, confidence=0.60, sample='AddOption('arrowshow',{  width="double", type = 'toggle', set = function(i,v) Setter_Simple(i,v)  self.Pointer:UpdateArrowVisibility() end, _default=true, })'},
  },
  ['SetupArrow'] = {
    {name='SetupArrow', count=7, confidence=1.00, sample='AddOption('arrowfreeze',{ type = 'toggle', set = function(i,v) Setter_Simple(i,v)  self.Pointer:SetupArrow() end, _default=false, })'},
  },
  ['SetFontSize'] = {
    {name='SetFontSize', count=159, confidence=1.00, sample='ZGV.Pointer:SetFontSize(self.db.profile.arrowfontsize)'},
  },
  ['SetArrowSkin'] = {
    {name='SetArrowSkin', count=7, confidence=1.00, sample='self.Pointer:SetArrowSkin(skin.id)'},
  },
  ['DoStartup'] = {
    {name='DoStartup', count=5, confidence=1.00, sample='LibRover:DoStartup()'},
  },
  ['ClearAntsAndLines'] = {
    {name='ClearAntsAndLines', count=3, confidence=0.60, sample='AddOption('maplines_enabled',{ type = 'toggle', width = "double", set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:ClearAntsAndLines() end, _default = true, })'},
  },
  ['ToggleOverlay'] = {
    {name='ToggleOverlay', count=2, confidence=0.40, sample='AddOption('foglight',{ type = 'toggle', width = "full", set = function(i,v) Setter_Simple(i,v)  self.Foglight:ToggleOverlay() end, _default = true, })'},
  },
  ['ClearWaypoints'] = {
    {name='ClearWaypoints', count=26, confidence=1.00, sample='ZGV.Pointer:ClearWaypoints("manual")'},
  },
  ['ChangeState'] = {
    {name='ChangeState', count=10, confidence=1.00, sample='AddOption('poienabled',{ type = 'toggle', width = "double", set = function(i,v) Setter_Simple(i,v) ZGV.Poi:ChangeState(v) end, _default = true, })'},
  },
  ['RefreshDynamicValues'] = {
    {name='RefreshDynamicValues', count=5, confidence=1.00, sample='set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:RefreshDynamicValues() end,'},
  },
  ['OnMapChanged'] = {
    {name='OnMapChanged', count=3, confidence=0.60, sample='AddOption('worldquestenable',{ type = 'toggle', _default=true, width="full", set=function(i,v) Setter_Simple(i,v) if v then ZGV.WorldQuests.DisplayFrame:Show() else ZGV.WorldQuests.DisplayFrame:Hide() end if WorldMapFrame then WorldMapFrame:OnMapChanged() end end})'},
  },
  ['GetPlayerFacing'] = {
    {name='GetPlayerFacing', count=13, confidence=1.00, sample='if not GetPlayerFacing() then ZGV.PointerMap:ShowPreview() end'},
  },
  ['ShowPreview'] = {
    {name='ShowPreview', count=6, confidence=1.00, sample='if not GetPlayerFacing() then ZGV.PointerMap:ShowPreview() end'},
  },
  ['HidePreview'] = {
    {name='HidePreview', count=6, confidence=1.00, sample='ZGV.PointerMap:HidePreview()'},
  },
  ['UpdateSettings'] = {
    {name='UpdateSettings', count=5, confidence=1.00, sample='set = function(i,v) Setter_Simple(i,v) ZGV.PointerMap:UpdateSettings() end,'},
  },
  ['UpdateSystemTab'] = {
    {name='UpdateSystemTab', count=4, confidence=0.80, sample='ZGV.ItemScore.GearFinder:UpdateSystemTab()'},
  },
  ['AttachBagButton'] = {
    {name='AttachBagButton', count=4, confidence=0.80, sample='ZGV.ItemScore.Upgrades:AttachBagButton()'},
  },
  ['ScoreEquippedItems'] = {
    {name='ScoreEquippedItems', count=7, confidence=1.00, sample='ZGV.ItemScore.Upgrades:ScoreEquippedItems()'},
  },
  ['RefreshBags'] = {
    {name='RefreshBags', count=14, confidence=1.00, sample='ZGV.ItemScore.Upgrades:RefreshBags()'},
  },
  ['GetNumClasses'] = {
    {name='GetNumClasses', count=4, confidence=0.80, sample='for i=1,GetNumClasses() do -- values taken from blizz api'},
  },
  ['GetClassInfo'] = {
    {name='GetClassInfo', count=8, confidence=1.00, sample='local name,tag,id = GetClassInfo(i)'},
    {name='C_CreatureInfo.GetClassInfo', count=4, confidence=0.80, sample='function C_CreatureInfo.GetClassInfo(classId) return {} end'},
  },
  ['DelayedRefreshUserData'] = {
    {name='DelayedRefreshUserData', count=7, confidence=1.00, sample='set = function(i,v) Setter_Simple(i,v) ZGV.ItemScore:DelayedRefreshUserData() end,'},
  },
  ['UsesCustomWeights'] = {
    {name='UsesCustomWeights', count=3, confidence=0.60, sample='if not ZGV.ItemScore:UsesCustomWeights(class,spec) then'},
  },
  ['ImportPawn'] = {
    {name='ImportPawn', count=2, confidence=0.40, sample='ZGV.ItemScore:ImportPawn(v)'},
  },
  ['RefreshUserData'] = {
    {name='RefreshUserData', count=4, confidence=0.80, sample='ZGV.ItemScore:RefreshUserData()'},
  },
  ['ExportPawn'] = {
    {name='ExportPawn', count=2, confidence=0.40, sample='ZGV.ItemScore:ExportPawn()'},
  },
  ['ImportQuick'] = {
    {name='ImportQuick', count=2, confidence=0.40, sample='--		ZGV.Gold.ServerTrends:ImportQuick()'},
  },
  ['ShowWindow'] = {
    {name='ShowWindow', count=7, confidence=1.00, sample='ZGV.Gold.Appraiser:ShowWindow()'},
  },
  ['HideWindow'] = {
    {name='HideWindow', count=11, confidence=1.00, sample='ZGV.Gold.Appraiser:HideWindow()'},
    {name='Details.AllInOneWindow.HideWindow', count=1, confidence=0.20, sample='Details.AllInOneWindow.HideWindow(settingId)'},
  },
  ['ShowSystemTabs'] = {
    {name='ShowSystemTabs', count=1, confidence=0.20, sample='ZGV.Mailtools:ShowSystemTabs()'},
  },
  ['HideSystemTabs'] = {
    {name='HideSystemTabs', count=1, confidence=0.20, sample='ZGV.Mailtools:HideSystemTabs()'},
  },
  ['GetListOfInventory'] = {
    {name='GetListOfInventory', count=1, confidence=0.20, sample='ZGV.Mailtools:GetListOfInventory()'},
  },
  ['UpdateButton'] = {
    {name='UpdateButton', count=11, confidence=1.00, sample='ZGV.NotificationCenter:UpdateButton()'},
  },
  ['UpdatePosition'] = {
    {name='UpdatePosition', count=6, confidence=1.00, sample='ZGV.NotificationCenter:UpdatePosition()'},
  },
  ['RefreshSkillPopup'] = {
    {name='RefreshSkillPopup', count=2, confidence=0.40, sample='AddOption('nc_skills_optional',{ type = 'toggle', width = "single", indent=20, set = function(i,v) Setter_Simple(i,v) ZGV.Skills:RefreshSkillPopup() end, _default = true, hidden=function() return not self.db.profile.nc_showall end, disabled=function() return not (self.db.profile.nc_enable and self.db.profile.nc_skills) end })'},
  },
  ['ShowSkillPopup'] = {
    {name='ShowSkillPopup', count=4, confidence=0.80, sample='--ZGV.Skills:ShowSkillPopup()'},
  },
  ['Cancel'] = {
    {name='Cancel', count=54, confidence=1.00, sample='set = function(i,v) Setter_Simple(i,v) ZGV.QuestDB:Cancel() end,'},
    {name='Details.Schedules.Cancel', count=10, confidence=1.00, sample='Details.Schedules.Cancel(Details.scheduled_window_update)'},
    {name='Scheduler.Cancel', count=1, confidence=0.20, sample='function details222.Scheduler.Cancel(name)'},
    {name='Schedules.Cancel', count=1, confidence=0.20, sample='function detailsFramework.Schedules.Cancel(tickerObject)'},
  },
  ['SetupConfig'] = {
    {name='SetupConfig', count=1, confidence=0.20, sample='local options = ZGV.ZTA:SetupConfig()'},
  },
  ['RegisterCallback'] = {
    {name='RegisterCallback', count=60, confidence=1.00, sample='self.db.RegisterCallback(self, "OnProfileChanged", "ProfileSwitch")'},
    {name='HBD.RegisterCallback', count=1, confidence=0.20, sample='HBD.RegisterCallback(pins, "PlayerZoneChanged", UpdateMinimap)'},
    {name='AuraScan.RegisterCallback', count=1, confidence=0.20, sample='function AuraScan.RegisterCallback(callback)'},
    {name='DF.Language.RegisterCallback', count=2, confidence=0.40, sample='--for custom callbacks use DF.Language.RegisterCallback()'},
    {name='Language.RegisterCallback', count=1, confidence=0.20, sample='detailsFramework.Language.RegisterCallback(languageAddonId, function(addonId, languageId, ...) dropdown:Select(dropdown:GetValue()) end)'},
    {name='LibCC.RegisterCallback', count=8, confidence=1.00, sample='LibCC.RegisterCallback(fCast,"UNIT_SPELLCAST_START", funcCast)'},
  },
  ['GetCurrentProfile'] = {
    {name='GetCurrentProfile', count=9, confidence=1.00, sample='local currentProfile = profile:GetCurrentProfile()'},
  },
  ['GetProfiles'] = {
    {name='GetProfiles', count=8, confidence=1.00, sample='for k, v in pairs(ZGV.db:GetProfiles()) do'},
  },
  ['ResetProfile'] = {
    {name='ResetProfile', count=4, confidence=0.80, sample='--ZGV.db:ResetProfile()'},
    {name='DBObjectLib.ResetProfile', count=2, confidence=0.40, sample='DBObjectLib.ResetProfile(self, nil, true)'},
  },
  ['ProfileSwitch'] = {
    {name='ProfileSwitch', count=3, confidence=0.60, sample='ZGV:ProfileSwitch()'},
  },
  ['ReloadUI'] = {
    {name='ReloadUI', count=14, confidence=1.00, sample='ReloadUI()'},
  },
  ['CopyProfile'] = {
    {name='CopyProfile', count=5, confidence=1.00, sample='ZGV.db:CopyProfile(current)'},
    {name='DBObjectLib.CopyProfile', count=1, confidence=0.20, sample='DBObjectLib.CopyProfile(db, name, true)'},
  },
  ['DeleteProfile'] = {
    {name='DeleteProfile', count=6, confidence=1.00, sample='ZGV.db:DeleteProfile(delete_name)'},
    {name='DBObjectLib.DeleteProfile', count=1, confidence=0.20, sample='DBObjectLib.DeleteProfile(db, name, true)'},
  },
  ['ShakeFrame'] = {
    {name='ScriptAnimationUtil.ShakeFrame', count=1, confidence=0.20, sample='--ScriptAnimationUtil.ShakeFrame(v.frame,{ {x=-5,y=0}, {x=5,y=0},{x=-5,y=0}, {x=5,y=0},{x=-5,y=0}, {x=5,y=0}}, 2.0, 0.04)'},
  },
  ['Backup'] = {
    {name='Backup', count=5, confidence=1.00, sample='ZGV.Widgets:Backup()'},
  },
  ['Import'] = {
    {name='Import', count=5, confidence=1.00, sample='ZGV.Widgets:Import(v)'},
  },
  ['GetOptionsTable'] = {
    {name='GetOptionsTable', count=10, confidence=1.00, sample='--self.optiontables['profile'] = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)'},
  },
  ['NPCDebugUpdate'] = {
    {name='NPCDebugUpdate', count=1, confidence=0.20, sample='--AddOption('shownpcdebug',{ name = "Show NPC Debug button", type="toggle", width = "full", set = function(i,v)  Setter_Simple(i,v)  ZGV:NPCDebugUpdate()  end  })'},
  },
  ['StartFPSFrame'] = {
    {name='StartFPSFrame', count=3, confidence=0.60, sample='AddOption('fpsgraph',{ name="FPS Graph", desc="Show a detailed FPS graph. Max=60fps.", type = 'toggle', width = "full", _default=false, set = function(i,v) Setter_Simple(i,v)  ZGV:StartFPSFrame() end, })'},
  },
  ['UnitAffectingCombat'] = {
    {name='UnitAffectingCombat', count=33, confidence=1.00, sample='set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat("player")) or (not v and UnitAffectingCombat("player")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,'},
  },
  ['PLAYER_REGEN_DISABLED'] = {
    {name='PLAYER_REGEN_DISABLED', count=3, confidence=0.60, sample='set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat("player")) or (not v and UnitAffectingCombat("player")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,'},
  },
  ['PLAYER_REGEN_ENABLED'] = {
    {name='PLAYER_REGEN_ENABLED', count=3, confidence=0.60, sample='set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat("player")) or (not v and UnitAffectingCombat("player")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,'},
  },
  ['Apprentice'] = {
    {name='Apprentice', count=1, confidence=0.20, sample='[0.6]="Apprentice (75) [slow ride]",'},
  },
  ['Journeyman'] = {
    {name='Journeyman', count=1, confidence=0.20, sample='[1.0]="Journeyman (150) [fast ride]",'},
  },
  ['Expert'] = {
    {name='Expert', count=1, confidence=0.20, sample='[1.5]="Expert (225) [slow flight]",'},
  },
  ['Artisan'] = {
    {name='Artisan', count=1, confidence=0.20, sample='[2.8]="Artisan (300) [fast flight]",'},
  },
  ['Master'] = {
    {name='Master', count=3, confidence=0.60, sample='[3.1]="Master (375) [epic flight]",'},
  },
  ['CheckMaxSpeeds'] = {
    {name='CheckMaxSpeeds', count=7, confidence=1.00, sample='LibRover:CheckMaxSpeeds()'},
  },
  ['GoSlow'] = {
    {name='GoSlow', count=2, confidence=0.40, sample='if (v) then LibRover:GoSlow() end'},
  },
  ['IsBoosted'] = {
    {name='IsBoosted', count=3, confidence=0.60, sample='func=function(info,val) ZGV:IsBoosted(100,true) end'},
    {name='ZGV.F.IsBoosted', count=1, confidence=0.20, sample='function ZGV.F.IsBoosted(expansion)'},
  },
  ['SuggestDungeonGuide'] = {
    {name='SuggestDungeonGuide', count=4, confidence=0.80, sample='func=function(info,val) ZGV.GuideFuncs:SuggestDungeonGuide(ZGV:GetGuideByTitle("Zygor's Dungeon Guides\\Classic Dungeons\\The Stormwind Stockade")) end'},
  },
  ['PLAYER_LEVEL_UP'] = {
    {name='PLAYER_LEVEL_UP', count=2, confidence=0.40, sample='func=function(info,val) ZGV:PLAYER_LEVEL_UP(nil,ZGV.FakeLevelForPopup or 101) end'},
  },
  ['LearnMountGuideSuggestion'] = {
    {name='LearnMountGuideSuggestion', count=3, confidence=0.60, sample='func=function(info,val) ZGV.GuideFuncs:LearnMountGuideSuggestion(ZGV.FakeLevelForRiding or 20) end'},
  },
  ['MonkQuest'] = {
    {name='MonkQuest', count=4, confidence=0.80, sample='func=function(info,val) ZGV.GuideFuncs:MonkQuest(ZGV.FakeLevelForMonk or 1) end'},
  },
  ['AskReload'] = {
    {name='AskReload', count=3, confidence=0.60, sample='func=function(info,val) ZGV.GuideFuncs:AskReload() end'},
  },
  ['SkipStep'] = {
    {name='SkipStep', count=8, confidence=1.00, sample='func=function(info,val) ZGV:SkipStep(false,true) end'},
  },
  ['AdvertiseWithPopup'] = {
    {name='AdvertiseWithPopup', count=5, confidence=1.00, sample='func=function(info,val) ZGV.CurrentGuide:AdvertiseWithPopup(true,true) end'},
  },
  ['GetGarrisonLevel'] = {
    {name='ZGV.GetGarrisonLevel', count=3, confidence=0.60, sample='return { [-1] = "--not set: "..ZGV.GetGarrisonLevel(true).."--", [0] = "not built", [1] = "level 1", [2] = "level 2", [3] = "level 3" }'},
  },
  ['GetCovenantData'] = {
    {name='C_Covenants.GetCovenantData', count=4, confidence=0.80, sample='local val = { [-1] = "--not set: "..(C_Covenants.GetCovenantData(C_Covenants.GetActiveCovenantID()) or {textureKit="none"}).textureKit.."--", [0]="None" }'},
  },
  ['GetActiveCovenantID'] = {
    {name='C_Covenants.GetActiveCovenantID', count=4, confidence=0.80, sample='local val = { [-1] = "--not set: "..(C_Covenants.GetCovenantData(C_Covenants.GetActiveCovenantID()) or {textureKit="none"}).textureKit.."--", [0]="None" }'},
  },
  ['GetCovenantIDs'] = {
    {name='C_Covenants.GetCovenantIDs', count=3, confidence=0.60, sample='for i,v in pairs(C_Covenants.GetCovenantIDs()) do'},
  },
  ['Getter_Simple'] = {
    {name='Getter_Simple', count=2, confidence=0.40, sample='get = function(i)  return Getter_Simple(i) or -1  end,'},
  },
  ['IsInScenario'] = {
    {name='C_Scenario.IsInScenario', count=15, confidence=1.00, sample='AddOption('dumpscenario',{ name = "Dump scenario objectives", width = "double", disabled=function() return not C_Scenario.IsInScenario() end, desc = "", type = 'execute', func = function() ZGV:DumpScenario() end})'},
  },
  ['DumpScenario'] = {
    {name='DumpScenario', count=1, confidence=0.20, sample='AddOption('dumpscenario',{ name = "Dump scenario objectives", width = "double", disabled=function() return not C_Scenario.IsInScenario() end, desc = "", type = 'execute', func = function() ZGV:DumpScenario() end})'},
  },
  ['UpdateAll'] = {
    {name='UpdateAll', count=1, confidence=0.20, sample='AddOption('foglightdumpnew',{ name = "Update all maps data", type = 'execute', width = "double", func = function() ZGV.Testing.FoglightDumper:UpdateAll() end})'},
  },
  ['UpdateCurrent'] = {
    {name='UpdateCurrent', count=1, confidence=0.20, sample='AddOption('foglightdumpnew',{ name = "Update current zone data", desc = "Map visible in map frame, or one player is on", type = 'execute', width = "double", func = function() ZGV.Testing.FoglightDumper:UpdateCurrent() end})'},
  },
  ['RefreshCurrent'] = {
    {name='RefreshCurrent', count=1, confidence=0.20, sample='AddOption('foglightdumpnew',{ name = "Refresh current zone data", desc = "Map visible in map frame, or one player is on.\nGet fresh copy of overlays, ignoring current data", type = 'execute', width = "double", func = function() ZGV.Testing.FoglightDumper:RefreshCurrent() end})'},
  },
  ['GetCursorInfo'] = {
    {name='GetCursorInfo', count=5, confidence=1.00, sample='AddOption('score_this', { type = 'execute', name="Score cursor item", desc=function() if GetCursorInfo()=="item" then return ZGV.ItemScore:ScoreCursor("quiet").."\n\nClick button to send this to a Dump window."  else  return "Drag an item here to score it..." end end,'},
  },
  ['ScoreCursor'] = {
    {name='ScoreCursor', count=2, confidence=0.40, sample='AddOption('score_this', { type = 'execute', name="Score cursor item", desc=function() if GetCursorInfo()=="item" then return ZGV.ItemScore:ScoreCursor("quiet").."\n\nClick button to send this to a Dump window."  else  return "Drag an item here to score it..." end end,'},
  },
  ['Startup'] = {
    {name='Startup', count=17, confidence=1.00, sample='LootDumper:Startup()'},
  },
  ['GetAllInstancesInfo'] = {
    {name='GetAllInstancesInfo', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:GetAllInstancesInfo() end'},
  },
  ['GetInstances'] = {
    {name='GetInstances', count=2, confidence=0.40, sample='LootDumper:GetInstances()'},
  },
  ['MapLFGtoMap'] = {
    {name='MapLFGtoMap', count=1, confidence=0.20, sample='LootDumper:MapLFGtoMap()'},
  },
  ['GetInstanceLoot'] = {
    {name='GetInstanceLoot', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:GetInstanceLoot(LootDumper.SelectedInstance) end'},
  },
  ['GetInstanceGuides'] = {
    {name='GetInstanceGuides', count=1, confidence=0.20, sample='LootDumper:GetInstanceGuides(LootDumper.SelectedInstance,IsShiftKeyDown())'},
  },
  ['GetAllInstancesLoot'] = {
    {name='GetAllInstancesLoot', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:GetAllInstancesLoot() end'},
  },
  ['GetAllInstancesGuides'] = {
    {name='GetAllInstancesGuides', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:GetAllInstancesGuides() end'},
  },
  ['GetRFGBosses'] = {
    {name='GetRFGBosses', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:GetRFGBosses() end'},
  },
  ['DumpLFGData'] = {
    {name='DumpLFGData', count=1, confidence=0.20, sample='func=function(info,val) LootDumper:DumpLFGData() end'},
  },
  ['UpdateWaypoints'] = {
    {name='UpdateWaypoints', count=7, confidence=1.00, sample='ZGV.Pointer:UpdateWaypoints()'},
  },
  ['SetAntColorsFromOptions'] = {
    {name='SetAntColorsFromOptions', count=10, confidence=1.00, sample='ZGV.Pointer.Icons:SetAntColorsFromOptions()'},
  },
  ['RescaleMarkers'] = {
    {name='RescaleMarkers', count=6, confidence=1.00, sample='ZGV.Pointer:RescaleMarkers()'},
  },
  ['IsInGroup'] = {
    {name='IsInGroup', count=86, confidence=1.00, sample='disabled=function() return not ZGV.Sync:IsInGroup() end,'},
  },
  ['ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick'] = {
    {name='ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick', count=1, confidence=0.20, sample='func=function() ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick() end,'},
  },
  ['Alice'] = {
    {name='Alice', count=1, confidence=0.20, sample='[2]="Alice (incomplete), Bob (complete)",'},
  },
  ['Bob'] = {
    {name='Bob', count=1, confidence=0.20, sample='[2]="Alice (incomplete), Bob (complete)",'},
  },
  ['Mixed'] = {
    {name='Mixed', count=1, confidence=0.20, sample='[1]="Mixed (Alice is done, Bob slacks)",'},
  },
  ['FakePartyGenerator'] = {
    {name='FakePartyGenerator', count=3, confidence=0.60, sample='set=function(i,v) Setter_Simple(i,v) ZGV.Sync:FakePartyGenerator(v) ZGV:UpdateFrame() end,'},
  },
  ['SetVisible'] = {
    {name='ZGV.F.SetVisible', count=4, confidence=0.80, sample='AddOption('gmshowoptions',{ type = 'toggle', name="Guide Menu variant: show Options in top bar", set = function(i,v) Setter_Simple(i,v)  ZGV.F.SetVisible(ZGV.GuideMenu.MainFrame.Header.Tabs.Options,v)  end, width = "full", _default = false })'},
    {name='SetVisible', count=5, confidence=1.00, sample='ZGV:SetVisible(nil,true)'},
  },
  ['ResetCurrentWaypoint'] = {
    {name='ResetCurrentWaypoint', count=6, confidence=1.00, sample='AddOption('start_on_closest_waypoint',{ type = 'toggle', width = "full", set=function(i,v) Setter_Simple(i,v) ZGV.Pointer:ResetCurrentWaypoint() end, _default = false })'},
  },
  ['ClearUserWaypoint'] = {
    {name='C_Map.ClearUserWaypoint', count=1, confidence=0.20, sample='AddOption('hijack_builtin_waypoint',{ type = 'toggle', width = "full", set=function(i,v) Setter_Simple(i,v) C_Map.ClearUserWaypoint() ZGV.Pointer:ResetCurrentWaypoint() end, _default = false })'},
  },
  ['Setter_Loud'] = {
    {name='Setter_Loud', count=1, confidence=0.20, sample='AddOption('load_all', { type = 'toggle', desc="Enable all!", _default = false, set=function(info,val) Setter_Loud(info,val) self.db.profile.load_mail=val self.db.profile.load_im=val self.db.profile.load_betaguides=val self.db.profile.load_gold=val self.db.profile.show_ui=val end })'},
  },
  ['SetupConfigExtra'] = {
    {name='SetupConfigExtra', count=1, confidence=0.20, sample='local extras = ZGV.ZTA:SetupConfigExtra()'},
  },
  ['SetFilters'] = {
    {name='SetFilters', count=4, confidence=0.80, sample='ZGV.WorldQuests:SetFilters()'},
  },
  ['Options_GrabDefaults'] = {
    {name='Options_GrabDefaults', count=3, confidence=0.60, sample='for k,v in pairs(self.optiontables) do  self:Options_GrabDefaults(v,defaults)  end  -- can work only once, as it CLEARS the _default fields!! (and it has to, as they're non-standard.)'},
  },
  ['PrepareConfigDefaults'] = {
    {name='PrepareConfigDefaults', count=1, confidence=0.20, sample='if ZGV.ZTA and ZGV.ZTA.PrepareConfigDefaults then  for g,o in pairs(ZGV.ZTA:PrepareConfigDefaults()) do for k,v in pairs(o) do defaults[g]=defaults[g] or {}; defaults[g][k]=v; end end end'},
  },
  ['RegisterDefaults'] = {
    {name='RegisterDefaults', count=5, confidence=1.00, sample='self.db:RegisterDefaults(defaults)'},
  },
  ['Options_ResetToDefaults'] = {
    {name='Options_ResetToDefaults', count=4, confidence=0.80, sample='function ZGV:Options_ResetToDefaults(blizname)'},
  },
  ['NotifyChange'] = {
    {name='NotifyChange', count=3, confidence=0.60, sample='AceConfigRegistry:NotifyChange(blizname)'},
  },
  ['RegisterOptionsTable'] = {
    {name='RegisterOptionsTable', count=20, confidence=1.00, sample='AceConfig:RegisterOptionsTable(v.blizname, self.optiontables[v.name], v.slash );'},
  },
  ['Options_SetupPanels'] = {
    {name='Options_SetupPanels', count=1, confidence=0.20, sample='function ZGV:Options_SetupPanels() -- Unused!'},
  },
  ['SetName'] = {
    {name='SetName', count=11, confidence=1.00, sample='group:SetName(v, v.parent)'},
    {name='Details.Schedules.SetName', count=3, confidence=0.60, sample='Details.Schedules.SetName(Details.start_battleground, "Battleground Start Timer")'},
    {name='Schedules.SetName', count=1, confidence=0.20, sample='function detailsFramework.Schedules.SetName(object, name)'},
  },
  ['SetTitle'] = {
    {name='SetTitle', count=24, confidence=1.00, sample='--panel:SetTitle(name or appName)'},
  },
  ['SetUserData'] = {
    {name='SetUserData', count=17, confidence=1.00, sample='--group:SetUserData("appName", appName)'},
  },
  ['SetCallback'] = {
    {name='SetCallback', count=42, confidence=1.00, sample='--panel:SetCallback("OnShow", FeedToBlizPanel)'},
  },
  ['SetDefaultSize'] = {
    {name='SetDefaultSize', count=2, confidence=0.40, sample='AceConfigDialog:SetDefaultSize("ZygorGuidesViewer", 600, 400)'},
  },
  ['AddToBlizOptions'] = {
    {name='AddToBlizOptions', count=5, confidence=1.00, sample='local panel = AceConfigDialog:AddToBlizOptions(v.blizname, self.optiontables[v.name].name, v.name~='cover' and self.optiontables.cover.name)'},
  },
  ['GetCurrentGuideNum'] = {
    {name='GetCurrentGuideNum', count=1, confidence=0.20, sample='function ZGV:GetCurrentGuideNum()'},
  },
  ['HandleCommand'] = {
    {name='HandleCommand', count=4, confidence=0.80, sample='LibStub("AceConfigCmd-3.0-Z").HandleCommand(self, "zygor", "ZygorGuidesViewer"..(cat~="" and "-"..cat or ""), cmd)'},
    {name='AceConfigCmd.HandleCommand', count=1, confidence=0.20, sample='AceConfigCmd.HandleCommand(self, slashcmd, appName, input)	-- upgradable'},
  },
  ['OPTTEST'] = {
    {name='OPTTEST', count=1, confidence=0.20, sample='function ZGV:OPTTEST()'},
  },
  ['B_Click'] = {
    {name='B_Click', count=1, confidence=0.20, sample='local function B_Click(self)'},
  },
  ['IsWeapon'] = {
    {name='IsWeapon', count=1, confidence=0.20, sample='function Upgrades:IsWeapon(item)'},
  },
  ['IsEnabled'] = {
    {name='IsEnabled', count=153, confidence=1.00, sample='if not Upgrades:IsEnabled() then return end -- disabled'},
    {name='Details.Coach.Server.IsEnabled', count=9, confidence=1.00, sample='if (Details.Coach.Server.IsEnabled()) then'},
    {name='Details.Coach.Client.IsEnabled', count=6, confidence=1.00, sample='if (Details.Coach.Client.IsEnabled()) then'},
    {name='Details.Coach.IsEnabled', count=1, confidence=0.20, sample='function Details.Coach.IsEnabled()'},
    {name='Details222.CooldownTracking.IsEnabled', count=2, confidence=0.40, sample='function Details222.CooldownTracking.IsEnabled()'},
  },
  ['UnitIsDeadOrGhost'] = {
    {name='UnitIsDeadOrGhost', count=8, confidence=1.00, sample='if UnitIsDeadOrGhost("player") then return end'},
  },
  ['GetInventoryItemID'] = {
    {name='GetInventoryItemID', count=4, confidence=0.80, sample='local itemid = GetInventoryItemID("player", slotID)'},
  },
  ['GetItemScore'] = {
    {name='GetItemScore', count=4, confidence=0.80, sample='local score,success,comment = ItemScore:GetItemScore(itemlink)'},
  },
  ['IsProtectedQuestItem'] = {
    {name='IsProtectedQuestItem', count=3, confidence=0.60, sample='local protected, protectedslot = ItemScore.QuestItem:IsProtectedQuestItem(itemlink)'},
  },
  ['GetAverageItemLevel'] = {
    {name='GetAverageItemLevel', count=4, confidence=0.80, sample='ItemScore.playeritemlvl = GetAverageItemLevel()'},
  },
  ['CanUseUniqueItem'] = {
    {name='CanUseUniqueItem', count=5, confidence=1.00, sample='function Upgrades:CanUseUniqueItem(itemlink,slot)'},
  },
  ['GetHeirloomInfo'] = {
    {name='GetHeirloomInfo', count=6, confidence=1.00, sample='local has_bonus, max_level = ItemScore:GetHeirloomInfo(olditem.itemlink)'},
  },
  ['IsValidItem'] = {
    {name='IsValidItem', count=7, confidence=1.00, sample='if olditem and not ItemScore:IsValidItem(olditem.itemlink) then'},
  },
  ['IsUpgradeFor'] = {
    {name='IsUpgradeFor', count=2, confidence=0.40, sample='function Upgrades:IsUpgradeFor(itemlink,name,spec)'},
  },
  ['GetValidSlots'] = {
    {name='GetValidSlots', count=4, confidence=0.80, sample='local slot1,slot2 = ItemScore:GetValidSlots(details,name,spec)'},
  },
  ['GetStatChange'] = {
    {name='GetStatChange', count=4, confidence=0.80, sample='function Upgrades:GetStatChange(item1,item2,item3,mode_new,mode_old)'},
  },
  ['ScoreBagsItems'] = {
    {name='ScoreBagsItems', count=3, confidence=0.60, sample='Upgrades:ScoreBagsItems()'},
  },
  ['FilterUpgrades'] = {
    {name='FilterUpgrades', count=3, confidence=0.60, sample='Upgrades:FilterUpgrades()'},
  },
  ['ShowEquipmentChangePopup'] = {
    {name='ShowEquipmentChangePopup', count=4, confidence=0.80, sample='Upgrades:ShowEquipmentChangePopup(Upgrades.UpgradeQueueFlat[itemlink])'},
  },
  ['GetMaxLevelForExpansionLevel'] = {
    {name='GetMaxLevelForExpansionLevel', count=6, confidence=1.00, sample='local maxLevel = GetMaxLevelForExpansionLevel(GetExpansionLevel())'},
  },
  ['GetExpansionLevel'] = {
    {name='GetExpansionLevel', count=15, confidence=1.00, sample='local maxLevel = GetMaxLevelForExpansionLevel(GetExpansionLevel())'},
  },
  ['EquipFromBags'] = {
    {name='EquipFromBags', count=3, confidence=0.60, sample='Upgrades:EquipFromBags(itemforupgrade,slotsinqueue)'},
  },
  ['GetEntry'] = {
    {name='GetEntry', count=2, confidence=0.40, sample='local oldnotif = ZGV.NotificationCenter:GetEntry("gearpop")'},
  },
  ['RemoveEntriesByType'] = {
    {name='RemoveEntriesByType', count=7, confidence=1.00, sample='ZGV.NotificationCenter:RemoveEntriesByType("gearpop")'},
  },
  ['EquipCursorItem'] = {
    {name='EquipCursorItem', count=1, confidence=0.20, sample='EquipCursorItem(slot)'},
  },
  ['GetTalentTabInfo'] = {
    {name='GetTalentTabInfo', count=5, confidence=1.00, sample='out = out .. "\n spec " .. ItemScore.playerspecName  .. " system " .. (select(2,GetTalentTabInfo(ItemScore.playerspec)))'},
  },
  ['UnitLevel'] = {
    {name='UnitLevel', count=31, confidence=1.00, sample='out = out .. "\n level " .. ItemScore.playerlevel .. " system " .. UnitLevel("player")'},
  },
  ['ShowGearReport'] = {
    {name='ShowGearReport', count=1, confidence=0.20, sample='function Upgrades:ShowGearReport(new_item)'},
  },
  ['ContainerFrame_Update'] = {
    {name='ContainerFrame_Update', count=1, confidence=0.20, sample='ContainerFrame_Update(frame) -- classic'},
  },
  ['AddBagButton'] = {
    {name='AddBagButton', count=2, confidence=0.40, sample='function Upgrades:AddBagButton()'},
  },
  ['GetCVarBool'] = {
    {name='GetCVarBool', count=4, confidence=0.80, sample='if ZGV.IsRetail and GetCVarBool("combinedBags") then'},
  },
  ['ToggleMenu'] = {
    {name='ToggleMenu', count=1, confidence=0.20, sample='function Upgrades:ToggleMenu()'},
  },
  ['HandleBagItem'] = {
    {name='Upgrades.HandleBagItem', count=1, confidence=0.20, sample='function Upgrades.HandleBagItem(itemButton, quality, itemLink, doNotSuppressOverlays, isBound)'},
  },
  ['GetID'] = {
    {name='GetID', count=24, confidence=1.00, sample='local data = C_Container.GetContainerItemInfo(parent:GetID(), itemButton:GetID())'},
  },
  ['GetBagID'] = {
    {name='GetBagID', count=1, confidence=0.20, sample='local bag = itembutton.GetBagID and itembutton:GetBagID() or itembutton:GetParent():GetID()'},
  },
  ['H'] = {
    {name='H', count=3, confidence=0.60, sample='local itemString = select(3, strfind(itemLink, "|H([^|]+)|h"))'},
  },
  ['ClearCursor'] = {
    {name='ClearCursor', count=7, confidence=1.00, sample='ClearCursor()'},
  },
  ['CreatePopup'] = {
    {name='CreatePopup', count=4, confidence=0.80, sample='Upgrades:CreatePopup()'},
  },
  ['SetItem'] = {
    {name='SetItem', count=6, confidence=1.00, sample='function button:SetItem(item,old)'},
  },
  ['TitanPanelZygorButton_OnLoad'] = {
    {name='TitanPanelZygorButton_OnLoad', count=1, confidence=0.20, sample='function TitanPanelZygorButton_OnLoad(self)'},
  },
  ['RegisterEvent'] = {
    {name='RegisterEvent', count=344, confidence=1.00, sample='self:RegisterEvent("PLAYER_ENTERING_WORLD");'},
  },
  ['TitanPanelZygorButton_OnEvent'] = {
    {name='TitanPanelZygorButton_OnEvent', count=2, confidence=0.40, sample='-- NAME : TitanPanelZygorButton_OnEvent()'},
  },
  ['TitanPanelZygorButton_ZYGORGV_STEP_CHANGED'] = {
    {name='TitanPanelZygorButton_ZYGORGV_STEP_CHANGED', count=1, confidence=0.20, sample='function TitanPanelZygorButton_ZYGORGV_STEP_CHANGED(num)'},
  },
  ['TitanPanelZygorButton_ZYGORGV_LOADING'] = {
    {name='TitanPanelZygorButton_ZYGORGV_LOADING', count=1, confidence=0.20, sample='function TitanPanelZygorButton_ZYGORGV_LOADING(progress)'},
  },
  ['TitanPanelButton_SetButtonIcon'] = {
    {name='TitanPanelButton_SetButtonIcon', count=1, confidence=0.20, sample='if not coordsset then  TitanPanelButton_SetButtonIcon(TITAN_ZYGOR_ID, self.registry.iconCoords)  coordsset=true  end'},
  },
  ['TitanPanelZygorButton_OnUpdate'] = {
    {name='TitanPanelZygorButton_OnUpdate', count=1, confidence=0.20, sample='function TitanPanelZygorButton_OnUpdate(self)'},
  },
  ['TitanPanelPluginHandle_OnUpdate'] = {
    {name='TitanPanelPluginHandle_OnUpdate', count=1, confidence=0.20, sample='TitanPanelPluginHandle_OnUpdate(updateTable)'},
  },
  ['TitanPanelZygorButton_OnClick'] = {
    {name='TitanPanelZygorButton_OnClick', count=1, confidence=0.20, sample='function TitanPanelZygorButton_OnClick(self, button)'},
  },
  ['TitanPanelZygorButton_GetButtonText'] = {
    {name='TitanPanelZygorButton_GetButtonText', count=1, confidence=0.20, sample='function TitanPanelZygorButton_GetButtonText(id)'},
  },
  ['TitanUtils_GetButton'] = {
    {name='TitanUtils_GetButton', count=1, confidence=0.20, sample='--local button, id = TitanUtils_GetButton(id, true)'},
  },
  ['TitanPanelZygorButton_GetTooltipText'] = {
    {name='TitanPanelZygorButton_GetTooltipText', count=1, confidence=0.20, sample='function TitanPanelZygorButton_GetTooltipText()'},
  },
  ['TitanUtils_GetNormalText'] = {
    {name='TitanUtils_GetNormalText', count=1, confidence=0.20, sample='--TitanUtils_GetNormalText(L["TITAN_BAG_USED_SLOTS"])'},
  },
  ['TitanGetVar'] = {
    {name='TitanGetVar', count=7, confidence=1.00, sample='--if TitanGetVar(TITAN_ZYGOR_ID, "ShowDetailedInfo") then'},
  },
  ['TitanPanelRightClickMenu_PrepareZygorMenu'] = {
    {name='TitanPanelRightClickMenu_PrepareZygorMenu', count=2, confidence=0.40, sample='-- NAME : TitanPanelRightClickMenu_PrepareZygorMenu()'},
  },
  ['TitanPanelRightClickMenu_AddTitle'] = {
    {name='TitanPanelRightClickMenu_AddTitle', count=3, confidence=0.60, sample='TitanPanelRightClickMenu_AddTitle(L["TITAN_PANEL_MENU_OPTIONS"], _G["UIDROPDOWNMENU_MENU_LEVEL"])'},
  },
  ['UIDropDownMenu_AddButton'] = {
    {name='UIDropDownMenu_AddButton', count=8, confidence=1.00, sample='UIDropDownMenu_AddButton(info, _G["UIDROPDOWNMENU_MENU_LEVEL"]);'},
  },
  ['TitanUtils_Toggle'] = {
    {name='TitanUtils_Toggle', count=4, confidence=0.80, sample='info.checked = TitanUtils_Toggle(TitanGetVar(TITAN_BAG_ID, "ShowUsedSlots"));'},
  },
  ['TitanPanelRightClickMenu_AddSpacer'] = {
    {name='TitanPanelRightClickMenu_AddSpacer', count=2, confidence=0.40, sample='TitanPanelRightClickMenu_AddSpacer();'},
  },
  ['TitanPanelRightClickMenu_AddToggleIcon'] = {
    {name='TitanPanelRightClickMenu_AddToggleIcon', count=1, confidence=0.20, sample='TitanPanelRightClickMenu_AddToggleIcon(TITAN_ZYGOR_ID);'},
  },
  ['TitanPanelRightClickMenu_AddToggleLabelText'] = {
    {name='TitanPanelRightClickMenu_AddToggleLabelText', count=1, confidence=0.20, sample='TitanPanelRightClickMenu_AddToggleLabelText(TITAN_ZYGOR_ID);'},
  },
  ['TitanPanelRightClickMenu_AddToggleColoredText'] = {
    {name='TitanPanelRightClickMenu_AddToggleColoredText', count=1, confidence=0.20, sample='--TitanPanelRightClickMenu_AddToggleColoredText(TITAN_ZYGOR_ID);'},
  },
  ['TitanPanelRightClickMenu_AddCommand'] = {
    {name='TitanPanelRightClickMenu_AddCommand', count=1, confidence=0.20, sample='TitanPanelRightClickMenu_AddCommand(L["TITAN_PANEL_MENU_HIDE"], TITAN_ZYGOR_ID, TITAN_PANEL_MENU_FUNC_HIDE);'},
  },
  ['TitanPanelZygorButton_ShowDetailedInfo'] = {
    {name='TitanPanelZygorButton_ShowDetailedInfo', count=1, confidence=0.20, sample='function TitanPanelZygorButton_ShowDetailedInfo()'},
  },
  ['TitanToggleVar'] = {
    {name='TitanToggleVar', count=1, confidence=0.20, sample='TitanToggleVar(TITAN_BAG_ID, "ShowDetailedInfo");'},
  },
  ['NewModule'] = {
    {name='NewModule', count=19, confidence=1.00, sample='local me = ZGV:NewModule('DataSource', 'AceEvent-3.0', 'AceBucket-3.0')'},
  },
  ['OnInitialize'] = {
    {name='OnInitialize', count=7, confidence=1.00, sample='function me:OnInitialize()'},
  },
  ['RegisterNamespace'] = {
    {name='RegisterNamespace', count=5, confidence=1.00, sample='self.db = me.db:RegisterNamespace(self.moduleName, {'},
  },
  ['OnEnable'] = {
    {name='OnEnable', count=22, confidence=1.00, sample='function me:OnEnable()'},
  },
  ['NewDataObject'] = {
    {name='NewDataObject', count=4, confidence=0.80, sample='LibStub('LibDataBroker-1.1'):NewDataObject(ZGVname, dataobj)'},
  },
  ['BuildSpaceString'] = {
    {name='BuildSpaceString', count=3, confidence=0.60, sample='local function BuildSpaceString(bags)'},
  },
  ['GetFamilyTag'] = {
    {name='GetFamilyTag', count=1, confidence=0.20, sample='local tag, icon = ZGV:GetFamilyTag(family)'},
  },
  ['GetOptions'] = {
    {name='GetOptions', count=2, confidence=0.40, sample='function me:GetOptions()'},
    {name='C_GossipInfo.GetOptions', count=3, confidence=0.60, sample='local gossips = C_GossipInfo.GetOptions()'},
  },
  ['GetOptionHandler'] = {
    {name='GetOptionHandler', count=2, confidence=0.40, sample='local handler = ZGV:GetOptionHandler(self)'},
  },
  ['IsDisabled'] = {
    {name='IsDisabled', count=2, confidence=0.40, sample='disabled = function(info) return info.handler:IsDisabled(info) or self.db.profile.mergeBags end,'},
  },
  ['Embed'] = {
    {name='Embed', count=48, confidence=1.00, sample='LibStub("AceHook-3.0"):Embed(ItemScore)'},
  },
  ['TrimGemsDatabase'] = {
    {name='TrimGemsDatabase', count=2, confidence=0.40, sample='ItemScore:TrimGemsDatabase()'},
  },
  ['RecordCurrentCharacter'] = {
    {name='RecordCurrentCharacter', count=2, confidence=0.40, sample='function ItemScore:RecordCurrentCharacter()'},
  },
  ['IsSpellKnown'] = {
    {name='IsSpellKnown', count=47, confidence=1.00, sample='character.dualwield=IsSpellKnown(674) -- dualwield spell for classic'},
  },
  ['UpdateEquipmentSkills'] = {
    {name='UpdateEquipmentSkills', count=2, confidence=0.40, sample='ItemScore:UpdateEquipmentSkills(arg1,arg2,...)'},
  },
  ['GetEquipmentSkills'] = {
    {name='GetEquipmentSkills', count=2, confidence=0.40, sample='ItemScore:GetEquipmentSkills()'},
  },
  ['SetStatWeights'] = {
    {name='SetStatWeights', count=2, confidence=0.40, sample='ItemScore:SetStatWeights()'},
  },
  ['GetSpecFunc'] = {
    {name='GetSpecFunc', count=3, confidence=0.60, sample='self.playerspec = playerspec or GetSpecFunc() or 1'},
  },
  ['GetSpecInfoFunc'] = {
    {name='GetSpecInfoFunc', count=2, confidence=0.40, sample='self.playerspecName = (select(2,GetSpecInfoFunc(self.playerspec)))'},
  },
  ['SetDualWield'] = {
    {name='SetDualWield', count=2, confidence=0.40, sample='ItemScore:SetDualWield()'},
  },
  ['ScoreGems'] = {
    {name='ScoreGems', count=2, confidence=0.40, sample='ItemScore:ScoreGems()'},
  },
  ['NormaliseStatName'] = {
    {name='NormaliseStatName', count=3, confidence=0.60, sample='function ItemScore:NormaliseStatName(statname)'},
  },
  ['CreateFromItemLink'] = {
    {name='CreateFromItemLink', count=1, confidence=0.20, sample='local item = Item:CreateFromItemLink(itemlink);'},
  },
  ['IsItemEmpty'] = {
    {name='IsItemEmpty', count=1, confidence=0.20, sample='if item:IsItemEmpty() then return false end -- whatever it is, it does not exist'},
  },
  ['ContinueOnItemLoad'] = {
    {name='ContinueOnItemLoad', count=1, confidence=0.20, sample='local success = pcall(function() item:ContinueOnItemLoad(function()'},
  },
  ['GetItemDetailsQueued'] = {
    {name='GetItemDetailsQueued', count=2, confidence=0.40, sample='ItemScore:GetItemDetailsQueued(itemlink,force)'},
  },
  ['GetDetailedItemLevelInfo'] = {
    {name='C_Item.GetDetailedItemLevelInfo', count=2, confidence=0.40, sample='local itemlvl,_,baseitemlvl = C_Item.GetDetailedItemLevelInfo(itemlink)'},
    {name='GetDetailedItemLevelInfo', count=2, confidence=0.40, sample='local effectiveILvl, isPreview, baseILvl = GetDetailedItemLevelInfo(itemLink)'},
  },
  ['GetTooltip'] = {
    {name='GetTooltip', count=19, confidence=1.00, sample='local tooltip = TS:GetTooltip(itemlink)'},
  },
  ['GetItemStats'] = {
    {name='GetItemStats', count=4, confidence=0.80, sample='local blizzstats = GetItemStats(itemlink)'},
    {name='C_Item.GetItemStats', count=1, confidence=0.20, sample='function C_Item.GetItemStats() end'},
  },
  ['IsEquippedItem'] = {
    {name='C_Item.IsEquippedItem', count=2, confidence=0.40, sample='if caps and caps[statname] and not C_Item.IsEquippedItem(itemlink) then -- don't cap stats on already equipped items'},
  },
  ['GetEquippedStatValue'] = {
    {name='GetEquippedStatValue', count=2, confidence=0.40, sample='local current_rating = ItemScore:GetEquippedStatValue(statname)'},
  },
  ['GetMaxPlayerLevel'] = {
    {name='GetMaxPlayerLevel', count=1, confidence=0.20, sample='if (current_rating > caps[statname]) or playerlevel < GetMaxPlayerLevel() then'},
  },
  ['ScoreSocket'] = {
    {name='ScoreSocket', count=3, confidence=0.60, sample='local gemscore, gemstat, gemvalue = ItemScore:ScoreSocket(item.itemlvl)'},
  },
  ['GetItemBonuses'] = {
    {name='ZGV.ItemLink.GetItemBonuses', count=1, confidence=0.20, sample='for bonus,_ in pairs(ZGV.ItemLink.GetItemBonuses(itemlink)) do'},
    {name='IL.GetItemBonuses', count=1, confidence=0.20, sample='function IL.GetItemBonuses(itemlink)'},
  },
  ['ExplodeString'] = {
    {name='ZGV.ExplodeString', count=2, confidence=0.40, sample='for i,v in pairs(ZGV.ExplodeString(", ",item.playerclass)) do'},
  },
  ['GetItemByType'] = {
    {name='GetItemByType', count=2, confidence=0.40, sample='function ItemScore:GetItemByType(equiptype)'},
  },
  ['GetItemInSlot'] = {
    {name='GetItemInSlot', count=4, confidence=0.80, sample='function ItemScore:GetItemInSlot(slotid)'},
  },
  ['GetAzeritePowers'] = {
    {name='GetAzeritePowers', count=2, confidence=0.40, sample='function ItemScore:GetAzeritePowers(itemlink)'},
  },
  ['IsAzeriteEmpoweredItemByID'] = {
    {name='C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID', count=1, confidence=0.20, sample='if not C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID(itemlink) then return tooltip_array,false end'},
  },
  ['FindActiveAzeriteItem'] = {
    {name='C_AzeriteItem.FindActiveAzeriteItem', count=1, confidence=0.20, sample='local power_location = C_AzeriteItem.FindActiveAzeriteItem()'},
  },
  ['GetPowerLevel'] = {
    {name='C_AzeriteItem.GetPowerLevel', count=1, confidence=0.20, sample='power = C_AzeriteItem.GetPowerLevel(power_location)'},
  },
  ['CreateFromEquipmentSlot'] = {
    {name='CreateFromEquipmentSlot', count=1, confidence=0.20, sample='location = ItemLocation:CreateFromEquipmentSlot(slot)'},
  },
  ['GetNumBankSlots'] = {
    {name='GetNumBankSlots', count=1, confidence=0.20, sample='for cont = 0,  NUM_BAG_SLOTS + GetNumBankSlots() do'},
  },
  ['CreateFromBagAndSlot'] = {
    {name='CreateFromBagAndSlot', count=2, confidence=0.40, sample='location = ItemLocation:CreateFromBagAndSlot(cont, slot)'},
  },
  ['GetAllTierInfoByItemID'] = {
    {name='C_AzeriteEmpoweredItem.GetAllTierInfoByItemID', count=1, confidence=0.20, sample='local powers_list = C_AzeriteEmpoweredItem.GetAllTierInfoByItemID(itemlink)'},
  },
  ['GetPowerInfo'] = {
    {name='C_AzeriteEmpoweredItem.GetPowerInfo', count=1, confidence=0.20, sample='local powerinfo = C_AzeriteEmpoweredItem.GetPowerInfo(powerid)'},
  },
  ['IsPowerSelected'] = {
    {name='C_AzeriteEmpoweredItem.IsPowerSelected', count=1, confidence=0.20, sample='active = C_AzeriteEmpoweredItem.IsPowerSelected(location, powerid)'},
  },
  ['ItemScore_SetTooltipData'] = {
    {name='ItemScore_SetTooltipData', count=3, confidence=0.60, sample='local function ItemScore_SetTooltipData(tooltip)'},
  },
  ['GetItem'] = {
    {name='GetItem', count=7, confidence=1.00, sample='local itemName,itemlink = tooltip:GetItem()'},
  },
  ['GetFontString'] = {
    {name='GetFontString', count=37, confidence=1.00, sample='t = ZGV.IconSets.AuctionToolsPriceIcons.DOWN1:GetFontString(width,height,nil,nil,255,0,0)'},
  },
  ['ItemScore_ClearTooltipData'] = {
    {name='ItemScore_ClearTooltipData', count=1, confidence=0.20, sample='local function ItemScore_ClearTooltipData(tooltip, ...) ItemScore.TooltipPatched = false end'},
  },
  ['Skill'] = {
    {name='Skill', count=2, confidence=0.40, sample='local pattern = "Skill (%d+) increased from (%d+) to (%d+)"'},
  },
  ['SetData'] = {
    {name='SetData', count=46, confidence=1.00, sample='ItemScore:SetData()'},
  },
  ['HasScript'] = {
    {name='HasScript', count=5, confidence=1.00, sample='if GameTooltip:HasScript("OnTooltipSetItem") then'},
  },
  ['AddTooltipPostCall'] = {
    {name='TooltipDataProcessor.AddTooltipPostCall', count=1, confidence=0.20, sample='TooltipDataProcessor.AddTooltipPostCall(Enum.TooltipDataType.Item, ItemScore_SetTooltipData)'},
  },
  ['Trim'] = {
    {name='Trim', count=12, confidence=1.00, sample='self:Trim()'},
  },
  ['Add'] = {
    {name='Add', count=22, confidence=1.00, sample='function Log:Add(frm,...)'},
    {name='WeakAuras.Add', count=6, confidence=1.00, sample='WeakAuras.Add (group)'},
  },
  ['SetHint'] = {
    {name='SetHint', count=3, confidence=0.60, sample='function MK:SetHint(s)'},
  },
  ['Setup'] = {
    {name='Setup', count=17, confidence=1.00, sample='function Telemetry:Setup()'},
  },
  ['Prune'] = {
    {name='Prune', count=4, confidence=0.80, sample='self:Prune()'},
  },
  ['SetupEvents'] = {
    {name='SetupEvents', count=2, confidence=0.40, sample='self:SetupEvents()'},
  },
  ['AddEvent'] = {
    {name='AddEvent', count=12, confidence=1.00, sample='function Telemetry:AddEvent(eventType,args)'},
  },
  ['IsMaster'] = {
    {name='IsMaster', count=14, confidence=1.00, sample='(ZGV.Sync:IsMaster() and "master")'},
  },
  ['IsSlave'] = {
    {name='IsSlave', count=16, confidence=1.00, sample='or (ZGV.Sync:IsSlave() and "slave")'},
  },
  ['GetNumGroupMembers'] = {
    {name='GetNumGroupMembers', count=60, confidence=1.00, sample='or (GetNumGroupMembers()>0 and "party")'},
  },
  ['NewTicker'] = {
    {name='C_Timer.NewTicker', count=26, confidence=1.00, sample='C_Timer.NewTicker(60,WrapUp)'},
    {name='Details.Schedules.NewTicker', count=9, confidence=1.00, sample='Details222.GarbageCollector.collectorTimer = Details.Schedules.NewTicker(Details222.GarbageCollector.intervalTime,'},
    {name='Scheduler.NewTicker', count=1, confidence=0.20, sample='function details222.Scheduler.NewTicker(seconds, callback, name)'},
    {name='Schedules.NewTicker', count=1, confidence=0.20, sample='function detailsFramework.Schedules.NewTicker(time, callback, ...)'},
  },
  ['Macro_ActionButtonOnEnter'] = {
    {name='Macro_ActionButtonOnEnter', count=1, confidence=0.20, sample='local function Macro_ActionButtonOnEnter(self)'},
  },
  ['Macro_ActionButtonOnDrag'] = {
    {name='Macro_ActionButtonOnDrag', count=1, confidence=0.20, sample='local function Macro_ActionButtonOnDrag(self)'},
  },
  ['LocateMacro'] = {
    {name='LocateMacro', count=9, confidence=1.00, sample='MacroGuide.draggedIsPreview=not self.macroguide:LocateMacro()'},
  },
  ['EditMacro'] = {
    {name='EditMacro', count=4, confidence=0.80, sample='local mid=self.macroguide:LocateMacro() or EditMacro(GetMacroIndexByName("ZygorMacroPreview"),self.macroguide.name)'},
  },
  ['GetMacroIndexByName'] = {
    {name='GetMacroIndexByName', count=5, confidence=1.00, sample='local mid=self.macroguide:LocateMacro() or EditMacro(GetMacroIndexByName("ZygorMacroPreview"),self.macroguide.name)'},
  },
  ['PickupMacro'] = {
    {name='PickupMacro', count=4, confidence=0.80, sample='PickupMacro(mid)'},
  },
  ['SetAttribute'] = {
    {name='SetAttribute', count=78, confidence=1.00, sample='self:SetAttribute("macro",mid) -- Make sure we're referencing the newlycreated one'},
  },
  ['MacroFrame_Update'] = {
    {name='MacroFrame_Update', count=4, confidence=0.80, sample='MacroFrame_Update()'},
  },
  ['Macro_ActionButtonOnLeave'] = {
    {name='Macro_ActionButtonOnLeave', count=1, confidence=0.20, sample='local function Macro_ActionButtonOnLeave(self)'},
  },
  ['Macro_ActionButtonMouseOverFix'] = {
    {name='Macro_ActionButtonMouseOverFix', count=3, confidence=0.60, sample='local function Macro_ActionButtonMouseOverFix(self)'},
  },
  ['UnitExists'] = {
    {name='UnitExists', count=70, confidence=1.00, sample='if not UnitExists("mouseover") then self:UpdateMacroIcon() end'},
  },
  ['UpdateMacroIcon'] = {
    {name='UpdateMacroIcon', count=4, confidence=0.80, sample='if not UnitExists("mouseover") then self:UpdateMacroIcon() end'},
  },
  ['Macro_ActionButtonOnShow'] = {
    {name='Macro_ActionButtonOnShow', count=2, confidence=0.40, sample='local function Macro_ActionButtonOnShow(self)'},
  },
  ['Macro_ActionButtonOnHide'] = {
    {name='Macro_ActionButtonOnHide', count=2, confidence=0.40, sample='local function Macro_ActionButtonOnHide(self)'},
  },
  ['UnregisterEvent'] = {
    {name='UnregisterEvent', count=47, confidence=1.00, sample='self:UnregisterEvent("PLAYER_TARGET_CHANGED")'},
  },
  ['Macro_DragAfterMathChecker'] = {
    {name='Macro_DragAfterMathChecker', count=2, confidence=0.40, sample='local function Macro_DragAfterMathChecker(self)'},
  },
  ['NotifyAboutUpdates'] = {
    {name='NotifyAboutUpdates', count=4, confidence=0.80, sample='self.macroguide:NotifyAboutUpdates()'},
  },
  ['Macro_ActionButtonOnEvent'] = {
    {name='Macro_ActionButtonOnEvent', count=1, confidence=0.20, sample='local function Macro_ActionButtonOnEvent(self,event)'},
  },
  ['CursorHasMacro'] = {
    {name='CursorHasMacro', count=1, confidence=0.20, sample='if not CursorHasMacro() then'},
  },
  ['ActionButtonPrepare'] = {
    {name='MacroGuide.ActionButtonPrepare', count=1, confidence=0.20, sample='function MacroGuide.ActionButtonPrepare(button,refreshfunc)'},
  },
  ['MacroFrame_LoadUI'] = {
    {name='MacroFrame_LoadUI', count=1, confidence=0.20, sample='MacroFrame_LoadUI()'},
  },
  ['MacroGuide_MacroPanelRewired'] = {
    {name='MacroGuide_MacroPanelRewired', count=1, confidence=0.20, sample='if not MacroGuide_MacroPanelRewired() then'},
  },
  ['MacroGuide_RewireMacroPanel'] = {
    {name='MacroGuide_RewireMacroPanel', count=1, confidence=0.20, sample='MacroGuide_RewireMacroPanel()'},
  },
  ['SetMacro'] = {
    {name='SetMacro', count=3, confidence=0.60, sample='function button:SetMacro(mg)'},
  },
  ['DeleteMacro'] = {
    {name='DeleteMacro', count=13, confidence=1.00, sample='DeleteMacro("ZygorMacroPreview")'},
  },
  ['CreateMacro'] = {
    {name='CreateMacro', count=6, confidence=1.00, sample='self:SetAttribute("macro",mg:LocateMacro() or mg:CreateMacro("preview"))'},
  },
  ['ClearMacro'] = {
    {name='ClearMacro', count=1, confidence=0.20, sample='function button:ClearMacro()'},
  },
  ['GetMacroInfo'] = {
    {name='GetMacroInfo', count=12, confidence=1.00, sample='local _,texture=GetMacroInfo(mid)'},
  },
  ['MacroExists'] = {
    {name='MacroExists', count=3, confidence=0.60, sample='function MacroGuide:MacroExists(location)'},
  },
  ['GetNumMacros'] = {
    {name='GetNumMacros', count=4, confidence=0.80, sample='local numAccountMacros, numCharacterMacros = GetNumMacros()'},
  },
  ['PlaceOnBar'] = {
    {name='PlaceOnBar', count=1, confidence=0.20, sample='function MacroGuide:PlaceOnBar()'},
  },
  ['GetActionInfo'] = {
    {name='GetActionInfo', count=1, confidence=0.20, sample='if not GetActionInfo(i+fix) then'},
  },
  ['PlaceAction'] = {
    {name='PlaceAction', count=1, confidence=0.20, sample='PlaceAction(i+fix)'},
  },
  ['Macro_UIMacroButtonOnClickDomestic'] = {
    {name='Macro_UIMacroButtonOnClickDomestic', count=1, confidence=0.20, sample='local function Macro_UIMacroButtonOnClickDomestic(self, button)'},
  },
  ['MacroFrame_SelectMacro'] = {
    {name='MacroFrame_SelectMacro', count=1, confidence=0.20, sample='MacroFrame_SelectMacro(mac:CreateMacro(mid <= MAX_ACCOUNT_MACROS and "account" or "character"))'},
  },
  ['Old_MacroButtonClick'] = {
    {name='Old_MacroButtonClick', count=1, confidence=0.20, sample='Old_MacroButtonClick(self,button)'},
  },
  ['Macro_UIMacroDeleteOnClickDomestic'] = {
    {name='Macro_UIMacroDeleteOnClickDomestic', count=1, confidence=0.20, sample='local function Macro_UIMacroDeleteOnClickDomestic()'},
  },
  ['Old_MacroDeleteButtonClick'] = {
    {name='Old_MacroDeleteButtonClick', count=1, confidence=0.20, sample='Old_MacroDeleteButtonClick()'},
  },
  ['Macro_UIUpdateDomestic'] = {
    {name='Macro_UIUpdateDomestic', count=1, confidence=0.20, sample='local function Macro_UIUpdateDomestic()'},
  },
  ['SetChecked'] = {
    {name='SetChecked', count=3, confidence=0.60, sample='macroButton:SetChecked(1);'},
  },
  ['SetID'] = {
    {name='SetID', count=8, confidence=1.00, sample='MacroFrameSelectedMacroButton:SetID(i);'},
  },
  ['MacroFrame_ShowDetails'] = {
    {name='MacroFrame_ShowDetails', count=1, confidence=0.20, sample='MacroFrame_ShowDetails();'},
  },
  ['MacroFrame_HideDetails'] = {
    {name='MacroFrame_HideDetails', count=1, confidence=0.20, sample='MacroFrame_HideDetails();'},
  },
  ['ZygorGuidesViewerFrame_OnLoad'] = {
    {name='ZygorGuidesViewerFrame_OnLoad', count=2, confidence=0.40, sample='function ZygorGuidesViewerFrame_OnLoad()'},
  },
  ['ZygorGuidesViewerFrame_OnHide'] = {
    {name='ZygorGuidesViewerFrame_OnHide', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_OnHide()'},
  },
  ['Frame_OnHide'] = {
    {name='Frame_OnHide', count=3, confidence=0.60, sample='ZGV:Frame_OnHide();'},
  },
  ['ZygorGuidesViewerFrame_OnShow'] = {
    {name='ZygorGuidesViewerFrame_OnShow', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_OnShow()'},
  },
  ['Frame_OnShow'] = {
    {name='Frame_OnShow', count=4, confidence=0.80, sample='ZGV:Frame_OnShow();'},
  },
  ['ZygorGuidesViewerFrame_Update'] = {
    {name='ZygorGuidesViewerFrame_Update', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_Update()'},
  },
  ['UpdateMainFrame'] = {
    {name='UpdateMainFrame', count=1, confidence=0.20, sample='if ZGV then ZGV:UpdateMainFrame() end'},
  },
  ['ZygorGuidesViewerFrame_HighlightCurrentStep'] = {
    {name='ZygorGuidesViewerFrame_HighlightCurrentStep', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_HighlightCurrentStep()'},
  },
  ['HighlightCurrentStep'] = {
    {name='HighlightCurrentStep', count=2, confidence=0.40, sample='if ZGV.CurrentStep then ZGV:HighlightCurrentStep() end'},
  },
  ['ParseMapXYDist'] = {
    {name='ParseMapXYDist', count=6, confidence=1.00, sample='local function ParseMapXYDist(text,insanefloor,returnmany)'},
    {name='ZGV.Parser.ParseMapXYDist', count=1, confidence=0.20, sample='map,f,x,y = ZGV.Parser.ParseMapXYDist(map)'},
  },
  ['GetMapByNameFloor'] = {
    {name='GetMapByNameFloor', count=17, confidence=1.00, sample='mapid,flr = LibRover:GetMapByNameFloor(mapname,flr,text)'},
  },
  ['DumpMapIDsByName'] = {
    {name='DumpMapIDsByName', count=1, confidence=0.20, sample='function ZGV:DumpMapIDsByName()'},
  },
  ['ParseID'] = {
    {name='ParseID', count=38, confidence=1.00, sample='local function ParseID(str)'},
    {name='ZGV.Parser.ParseID', count=1, confidence=0.20, sample='local name, id, criteria = ZGV.Parser.ParseID(point.achieve)'},
  },
  ['ParseRanges'] = {
    {name='ParseRanges', count=11, confidence=1.00, sample='local function ParseRanges(str,askeys)'},
  },
  ['NeedsAnimatedPopup'] = {
    {name='NeedsAnimatedPopup', count=2, confidence=0.40, sample='function ZGV:NeedsAnimatedPopup(variablesArray)'},
  },
  ['RenderAnimation'] = {
    {name='RenderAnimation', count=6, confidence=1.00, sample='local reference = ZGV[ZGV:RenderAnimation({31,27,7,50,39,7,50,52})] or {} -- default animation table with metatable data'},
  },
  ['GetCurrentCalendarTime'] = {
    {name='C_DateAndTime.GetCurrentCalendarTime', count=7, confidence=1.00, sample='local a = C_DateAndTime.GetCurrentCalendarTime and C_DateAndTime.GetCurrentCalendarTime() or C_DateAndTime.GetTodaysDate()'},
  },
  ['GetTodaysDate'] = {
    {name='C_DateAndTime.GetTodaysDate', count=1, confidence=0.20, sample='local a = C_DateAndTime.GetCurrentCalendarTime and C_DateAndTime.GetCurrentCalendarTime() or C_DateAndTime.GetTodaysDate()'},
  },
  ['IsCurrentlySticky'] = {
    {name='IsCurrentlySticky', count=15, confidence=1.00, sample='self.sticky = step and step:IsCurrentlySticky()'},
  },
  ['GetSkill'] = {
    {name='GetSkill', count=21, confidence=1.00, sample='local s = ZGV.Professions:GetSkill(skill)'},
  },
  ['RaceClassMatch'] = {
    {name='RaceClassMatch', count=24, confidence=1.00, sample='return ZGV:RaceClassMatch(raceclass,true)'},
  },
  ['MatchProfs'] = {
    {name='MatchProfs', count=2, confidence=0.40, sample='return ZGV:MatchProfs(hasprof,minlevel)'},
  },
  ['HasProfessionUnscanned'] = {
    {name='HasProfessionUnscanned', count=2, confidence=0.40, sample='return ZGV.Professions:HasProfessionUnscanned(hasprof)'},
  },
  ['GetPlayerAuraBySpellID'] = {
    {name='C_UnitAuras.GetPlayerAuraBySpellID', count=21, confidence=1.00, sample='local aura = C_UnitAuras.GetPlayerAuraBySpellID(tonumber(query))'},
  },
  ['FindEvent'] = {
    {name='FindEvent', count=6, confidence=1.00, sample='return ZGV:FindEvent(eventname)'},
  },
  ['Zygor_GetAchievementCriteriaInfo'] = {
    {name='ZGV.Zygor_GetAchievementCriteriaInfo', count=2, confidence=0.40, sample='if type(achieveid)=="number" and type(subid)=="number" then return select(3,ZGV.Zygor_GetAchievementCriteriaInfo(achieveid,subid)) end'},
    {name='Zygor_GetAchievementCriteriaInfo', count=4, confidence=0.80, sample='local function Zygor_GetAchievementCriteriaInfo(achieveid, criteria)'},
  },
  ['GetNumCollectedInfo'] = {
    {name='C_PetJournal.GetNumCollectedInfo', count=4, confidence=0.80, sample='local numCollected, limit = C_PetJournal.GetNumCollectedInfo(speciesID)'},
  },
  ['PlayerHasToy'] = {
    {name='PlayerHasToy', count=21, confidence=1.00, sample='return PlayerHasToy(toyId)'},
  },
  ['GetThunderStage'] = {
    {name='GetThunderStage', count=3, confidence=0.60, sample='return ZGV:GetThunderStage()'},
  },
  ['GetMountFromSpell'] = {
    {name='C_MountJournal.GetMountFromSpell', count=2, confidence=0.40, sample='local mountID = C_MountJournal.GetMountFromSpell(mountident)'},
  },
  ['GetMountInfoByID'] = {
    {name='C_MountJournal.GetMountInfoByID', count=1, confidence=0.20, sample='local name, spell, _, _, _, _, _, _, _, _, isCollected = C_MountJournal.GetMountInfoByID(mountID)'},
  },
  ['IsIndoors'] = {
    {name='IsIndoors', count=27, confidence=1.00, sample='return IsIndoors()'},
  },
  ['GetItemCount'] = {
    {name='C_Item.GetItemCount', count=37, confidence=1.00, sample='total = total + C_Item.GetItemCount(select(i, ...))'},
  },
  ['GetCurrencyInfo'] = {
    {name='C_CurrencyInfo.GetCurrencyInfo', count=21, confidence=1.00, sample='local info = C_CurrencyInfo.GetCurrencyInfo(curid)'},
    {name='GetCurrencyInfo', count=1, confidence=0.20, sample='Click here to purchase your mount |confirm |only if _G.select(2,_G.GetCurrencyInfo(391))>165'},
  },
  ['GetDungeonDifficultyID'] = {
    {name='GetDungeonDifficultyID', count=4, confidence=0.80, sample='local difficultyID = GetDungeonDifficultyID()'},
  },
  ['GetDifficultyInfo'] = {
    {name='GetDifficultyInfo', count=6, confidence=1.00, sample='local _, _, isHeroic, isChallengeMode, displayHeroic, displayMythic = GetDifficultyInfo(difficultyID)'},
  },
  ['GetInstanceInfo'] = {
    {name='GetInstanceInfo', count=87, confidence=1.00, sample='local name, instanceType, difficultyID, _, maxPlayers = GetInstanceInfo()'},
    {name='Ejc.GetInstanceInfo', count=3, confidence=0.60, sample='function Ejc.GetInstanceInfo(id)'},
  },
  ['GetRaidDifficultyID'] = {
    {name='GetRaidDifficultyID', count=3, confidence=0.60, sample='local difficultyID = GetRaidDifficultyID()'},
  },
  ['Garrison_GetBuildingState'] = {
    {name='ZGV.Garrison_GetBuildingState', count=4, confidence=0.80, sample='local rank,state = ZGV.Garrison_GetBuildingState(id_or_name,false) -- be precise'},
  },
  ['Garrison_HasFollower'] = {
    {name='ZGV.Garrison_HasFollower', count=3, confidence=0.60, sample='return ZGV.Garrison_HasFollower(id)'},
  },
  ['Garrison_HasBuildingBlueprint'] = {
    {name='ZGV.Garrison_HasBuildingBlueprint', count=2, confidence=0.40, sample='return ZGV.Garrison_HasBuildingBlueprint(id_or_name,level)'},
  },
  ['GetActiveAbilities'] = {
    {name='C_ZoneAbility.GetActiveAbilities', count=1, confidence=0.20, sample='local info = C_ZoneAbility.GetActiveAbilities()'},
  },
  ['GetTalentInfo'] = {
    {name='C_Garrison.GetTalentInfo', count=3, confidence=0.60, sample='local info = C_Garrison.GetTalentInfo(id)'},
    {name='GetTalentInfo', count=27, confidence=1.00, sample='function GetTalentInfo(tabIndex, talentIndex, isInspect) return "", "", "", 0, 0, true end'},
  },
  ['GetPlayerPosition'] = {
    {name='GetPlayerPosition', count=33, confidence=1.00, sample='local x2,y2,map2 = LibRover:GetPlayerPosition()'},
    {name='ZGV.GetPlayerPosition', count=1, confidence=0.20, sample='function ZGV.GetPlayerPosition()'},
  },
  ['Mdist'] = {
    {name='ZGV.MapCoords.Mdist', count=3, confidence=0.60, sample='local dist = ZGV.MapCoords.Mdist(map1,x1,y1,map2,x2,y2)'},
    {name='Mdist', count=9, confidence=1.00, sample='local len=sqrt((Ax-Bx)*(Ax-Bx)+(Ay-By)*(Ay-By)*0.444444) --(Mdist(way1.m,way1.x,way1.y,way2.m,way2.x,way2.y) or 300)'},
    {name='MapCoords.Mdist', count=1, confidence=0.20, sample='function MapCoords.Mdist(map1,x1,y1,map2,x2,y2)'},
  },
  ['KnowsRecipe'] = {
    {name='KnowsRecipe', count=3, confidence=0.60, sample='return ZGV.Professions:KnowsRecipe(spellid)'},
  },
  ['IsFlying'] = {
    {name='IsFlying', count=8, confidence=1.00, sample='return not (IsFlying and IsFlying())'},
  },
  ['FindTaxi'] = {
    {name='FindTaxi', count=8, confidence=1.00, sample='local taxinode = ZGV.LibTaxi:FindTaxi(name)'},
  },
  ['UnitOnTaxi'] = {
    {name='UnitOnTaxi', count=31, confidence=1.00, sample='return UnitOnTaxi("player"),true'},
  },
  ['IsBoostTutorialScenario'] = {
    {name='IsBoostTutorialScenario', count=1, confidence=0.20, sample='return IsBoostTutorialScenario()'},
  },
  ['GetScenarioInfo'] = {
    {name='C_ScenarioInfo.GetScenarioInfo', count=1, confidence=0.20, sample='local info = C_ScenarioInfo.GetScenarioInfo()'},
  },
  ['GetStepInfo'] = {
    {name='C_Scenario.GetStepInfo', count=5, confidence=1.00, sample='local _, _, numCriteria = C_Scenario.GetStepInfo();'},
  },
  ['GetCriteriaInfo'] = {
    {name='C_ScenarioInfo.GetCriteriaInfo', count=2, confidence=0.40, sample='local criteriaInfo = C_ScenarioInfo.GetCriteriaInfo(criteriaIndex);'},
  },
  ['IsPOIActive'] = {
    {name='IsPOIActive', count=26, confidence=1.00, sample='return ZGV:IsPOIActive(poiid)'},
  },
  ['IsTitleKnown'] = {
    {name='IsTitleKnown', count=4, confidence=0.80, sample='return IsTitleKnown(id)'},
  },
  ['GetAreaPOIInfo'] = {
    {name='C_AreaPoiInfo.GetAreaPOIInfo', count=6, confidence=1.00, sample='return C_AreaPoiInfo.GetAreaPOIInfo(map,id)'},
  },
  ['GetActiveThreatMaps'] = {
    {name='C_QuestLog.GetActiveThreatMaps', count=1, confidence=0.20, sample='local threatmaps = C_QuestLog.GetActiveThreatMaps()'},
  },
  ['GetAreaPOISecondsLeft'] = {
    {name='C_AreaPoiInfo.GetAreaPOISecondsLeft', count=7, confidence=1.00, sample='return C_AreaPoiInfo.GetAreaPOISecondsLeft(id) or 0'},
  },
  ['GetAvailableQuests'] = {
    {name='C_GossipInfo.GetAvailableQuests', count=5, confidence=1.00, sample='local quests=C_GossipInfo.GetAvailableQuests()'},
  },
  ['GetNumAvailableQuests'] = {
    {name='GetNumAvailableQuests', count=3, confidence=0.60, sample='if GetNumAvailableQuests()==0 then return false end'},
    {name='C_GossipInfo.GetNumAvailableQuests', count=1, confidence=0.20, sample='for qnum=1,C_GossipInfo.GetNumAvailableQuests() do'},
  },
  ['GetAvailableQuestInfo'] = {
    {name='GetAvailableQuestInfo', count=4, confidence=0.80, sample='local isTrivial, frequency, isRepeatable, isLegendary, questID = GetAvailableQuestInfo(qnum)'},
  },
  ['GetAvailableTitle'] = {
    {name='GetAvailableTitle', count=2, confidence=0.40, sample='local title=GetAvailableTitle(qnum)'},
  },
  ['IsActive'] = {
    {name='C_TaskQuest.IsActive', count=6, confidence=1.00, sample='if not (settings and settings.skipactive) and C_TaskQuest.IsActive(id) then return true end -- it is active, good'},
  },
  ['GetQuestTimeLeftSeconds'] = {
    {name='C_TaskQuest.GetQuestTimeLeftSeconds', count=7, confidence=1.00, sample='if not (settings and settings.skiptime) and C_TaskQuest.GetQuestTimeLeftSeconds(id) then return true end -- fallback, does it have time remaining'},
  },
  ['GetAvailableQuestLines'] = {
    {name='C_QuestLine.GetAvailableQuestLines', count=2, confidence=0.40, sample='for i,storyline in ipairs(C_QuestLine.GetAvailableQuestLines(mapID)) do'},
  },
  ['GetQuestsOnMap'] = {
    {name='C_TaskQuest.GetQuestsOnMap', count=1, confidence=0.20, sample='local taskquests = C_TaskQuest.GetQuestsOnMap(mapID)'},
  },
  ['RequestQuestLinesForMap'] = {
    {name='C_QuestLine.RequestQuestLinesForMap', count=2, confidence=0.40, sample='C_QuestLine.RequestQuestLinesForMap(mapID) -- refresh data'},
  },
  ['GetSummonedPetGUID'] = {
    {name='C_PetJournal.GetSummonedPetGUID', count=1, confidence=0.20, sample='local activeGUID = C_PetJournal.GetSummonedPetGUID()'},
  },
  ['GetPetInfoByPetID'] = {
    {name='C_PetJournal.GetPetInfoByPetID', count=1, confidence=0.20, sample='local speciesID, _, _, _, _, _, _, name, _, _, creatureID  = C_PetJournal.GetPetInfoByPetID(activeGUID)'},
  },
  ['GetDungeonEntrancesForMap'] = {
    {name='C_EncounterJournal.GetDungeonEntrancesForMap', count=1, confidence=0.20, sample='for _,data in pairs(C_EncounterJournal.GetDungeonEntrancesForMap(mapid)) do'},
  },
  ['GetTextureWithAnimationVisualizationInfo'] = {
    {name='C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo', count=1, confidence=0.20, sample='local data = C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo(2873+i)'},
  },
  ['UnitAura'] = {
    {name='UnitAura', count=8, confidence=1.00, sample='local _, icon, count, _, _, _, _, _, _, spellID = UnitAura("player", i, "MAW");'},
  },
  ['GetRenownLevel'] = {
    {name='C_CovenantSanctumUI.GetRenownLevel', count=2, confidence=0.40, sample='return C_CovenantSanctumUI.GetRenownLevel()'},
  },
  ['UnitChromieTimeID'] = {
    {name='UnitChromieTimeID', count=6, confidence=1.00, sample='local timeid = UnitChromieTimeID("player")'},
  },
  ['UnitInVehicle'] = {
    {name='UnitInVehicle', count=5, confidence=1.00, sample='if not UnitInVehicle("player") and not UnitOnTaxi("player") then return false end'},
  },
  ['GetUnitId'] = {
    {name='ZGV.GetUnitId', count=11, confidence=1.00, sample='return ZGV.GetUnitId("pet")==id'},
    {name='GetUnitId', count=4, confidence=0.80, sample='function Details:GetUnitId(unitName)'},
  },
  ['GetVignettes'] = {
    {name='C_VignetteInfo.GetVignettes', count=3, confidence=0.60, sample='-- use /run local o={} for i,v in ipairs(C_VignetteInfo.GetVignettes()) do o[i]=C_VignetteInfo.GetVignetteInfo(v) end ZGV:ShowDump(o) to get list of active ones on current map'},
  },
  ['GetVignetteInfo'] = {
    {name='C_VignetteInfo.GetVignetteInfo', count=3, confidence=0.60, sample='-- use /run local o={} for i,v in ipairs(C_VignetteInfo.GetVignettes()) do o[i]=C_VignetteInfo.GetVignetteInfo(v) end ZGV:ShowDump(o) to get list of active ones on current map'},
  },
  ['IsPlayerSpell'] = {
    {name='IsPlayerSpell', count=47, confidence=1.00, sample='return IsSpellKnown(id) or IsPlayerSpell(id)'},
  },
  ['IsUsableSpell'] = {
    {name='IsUsableSpell', count=2, confidence=0.40, sample='local usable, nomana = IsUsableSpell(spellid)'},
  },
  ['GetAllAppearanceSources'] = {
    {name='C_TransmogCollection.GetAllAppearanceSources', count=2, confidence=0.40, sample='local sources = C_TransmogCollection.GetAllAppearanceSources(visualID)'},
  },
  ['GetSourceInfo'] = {
    {name='C_TransmogCollection.GetSourceInfo', count=6, confidence=1.00, sample='local info = C_TransmogCollection.GetSourceInfo(sourceid)'},
  },
  ['GetLanguageSkill'] = {
    {name='GetLanguageSkill', count=2, confidence=0.40, sample='return ZGV.Languages:GetLanguageSkill(skill)'},
  },
  ['GetTopCenterWidgetSetID'] = {
    {name='C_UIWidgetManager.GetTopCenterWidgetSetID', count=1, confidence=0.20, sample='TopCenter = C_UIWidgetManager.GetTopCenterWidgetSetID(),'},
  },
  ['GetPowerBarWidgetSetID'] = {
    {name='C_UIWidgetManager.GetPowerBarWidgetSetID', count=1, confidence=0.20, sample='PowerBar = C_UIWidgetManager.GetPowerBarWidgetSetID(),'},
  },
  ['GetObjectiveTrackerWidgetSetID'] = {
    {name='C_UIWidgetManager.GetObjectiveTrackerWidgetSetID', count=1, confidence=0.20, sample='ObjectiveTracker = C_UIWidgetManager.GetObjectiveTrackerWidgetSetID(),'},
  },
  ['GetBelowMinimapWidgetSetID'] = {
    {name='C_UIWidgetManager.GetBelowMinimapWidgetSetID', count=1, confidence=0.20, sample='BelowMinimap = C_UIWidgetManager.GetBelowMinimapWidgetSetID(),'},
  },
  ['GetAllWidgetsBySetID'] = {
    {name='C_UIWidgetManager.GetAllWidgetsBySetID', count=1, confidence=0.20, sample='local widgetset = C_UIWidgetManager.GetAllWidgetsBySetID(setID)'},
  },
  ['GetWidgetTypeInfo'] = {
    {name='GetWidgetTypeInfo', count=2, confidence=0.40, sample='local widgetTypeInfo =  UIWidgetManager:GetWidgetTypeInfo(wData.widgetType)'},
  },
  ['GetActiveQuests'] = {
    {name='C_GossipInfo.GetActiveQuests', count=4, confidence=0.80, sample='for qnum,questInfo in ipairs(C_GossipInfo.GetActiveQuests()) do'},
  },
  ['CloseGossip'] = {
    {name='C_GossipInfo.CloseGossip', count=3, confidence=0.60, sample='C_GossipInfo.CloseGossip()'},
  },
  ['MakeCondition'] = {
    {name='MakeCondition', count=7, confidence=1.00, sample='local function MakeCondition(cond,forcebool,usecache)'},
    {name='ZGV.Parser.MakeCondition', count=6, confidence=1.00, sample='local fun,err,cond_procd = ZGV.Parser.MakeCondition(cond,true)'},
  },
  ['ParseEntry'] = {
    {name='ParseEntry', count=2, confidence=0.40, sample='function Parser:ParseEntry(guide,fully_parse,lastparsed)'},
  },
  ['COLOR_LOC'] = {
    {name='COLOR_LOC', count=14, confidence=1.00, sample='local function COLOR_LOC(s) return "|cffffee77"..s.."|r" end'},
  },
  ['GetParsed'] = {
    {name='GetParsed', count=1, confidence=0.20, sample='return inclusion and inclusion:GetParsed(params) or ""'},
  },
  ['DevStart'] = {
    {name='ZGV.DevStart', count=2, confidence=0.40, sample='if chunk=="ZGV.DevStart()" then'},
  },
  ['DevEnd'] = {
    {name='ZGV.DevEnd', count=2, confidence=0.40, sample='if chunk=="ZGV.DevEnd()" then'},
  },
  ['SanitizeGuideTitle'] = {
    {name='SanitizeGuideTitle', count=7, confidence=1.00, sample='local leechsteps_guide = ZGV:SanitizeGuideTitle(fromguide or params:match("^\"(.+)\"$") or params) :gsub("\\+","\\")'},
  },
  ['Parse'] = {
    {name='Parse', count=21, confidence=1.00, sample='local parsed = leechedguide:Parse(true)'},
  },
  ['GetJumpDestination'] = {
    {name='GetJumpDestination', count=8, confidence=1.00, sample='local step,guide = ZGV.StepProto:GetJumpDestination(params)'},
  },
  ['BRACE'] = {
    {name='BRACE', count=2, confidence=0.40, sample='text = text:gsub("@@BRACE(%d+)%?%?(.-)@@",loadbrace):gsub("%%%%BRACE(%d+)%%%%",loadbrace)'},
  },
  ['ReplaceMacroIDs'] = {
    {name='ReplaceMacroIDs', count=3, confidence=0.60, sample='local function ReplaceMacroIDs(guide)'},
  },
  ['LocalizedClassList'] = {
    {name='LocalizedClassList', count=2, confidence=0.40, sample='ParseHeader_classes = LocalizedClassList()'},
  },
  ['FillLocalizedClassList'] = {
    {name='FillLocalizedClassList', count=2, confidence=0.40, sample='FillLocalizedClassList(ParseHeader_classes)'},
  },
  ['ParseHeaderError'] = {
    {name='ParseHeaderError', count=1, confidence=0.20, sample='function Parser:ParseHeaderError(msg,param,value)'},
  },
  ['ParseHeader'] = {
    {name='ParseHeader', count=5, confidence=1.00, sample='function Parser:ParseHeader(guide)'},
  },
  ['RegisterGuide'] = {
    {name='ZGV.PetBattle.PetJournal.RegisterGuide', count=1, confidence=0.20, sample='ZGV.PetBattle.PetJournal.RegisterGuide(speciesId,guide)'},
    {name='RegisterGuide', count=14837, confidence=1.00, sample='function ZGV:RegisterGuide(title,header,data)'},
    {name='PetBattle.PetJournal.RegisterGuide', count=1, confidence=0.20, sample='function PetBattle.PetJournal.RegisterGuide(speciesId,guide)'},
  },
  ['GetPetInfoBySpeciesID'] = {
    {name='C_PetJournal.GetPetInfoBySpeciesID', count=7, confidence=1.00, sample='local _, _, _, creatureID, _, _, _, _, _, _, _, DisplayID = C_PetJournal.GetPetInfoBySpeciesID(speciesId or 0)'},
  },
  ['RegisterPetID'] = {
    {name='RegisterPetID', count=3, confidence=0.60, sample='ZGV.CreatureDetector:RegisterPetID(creatureID,guide)'},
  },
  ['FindOrCreateGroup'] = {
    {name='FindOrCreateGroup', count=10, confidence=1.00, sample='local group = ZGV:FindOrCreateGroup(ZGV.registered_groups,"SUGGESTED\\"..(folder or header)) or ZGV.registered_groups'},
  },
  ['RegisterMountSpell'] = {
    {name='RegisterMountSpell', count=2, confidence=0.40, sample='ZGV.CreatureDetector:RegisterMountSpell(tonumber(id),guide) -- TODO mark duplicates'},
  },
  ['GetMountInfoExtraByID'] = {
    {name='C_MountJournal.GetMountInfoExtraByID', count=2, confidence=0.40, sample='local DisplayID = C_MountJournal.GetMountInfoExtraByID(mountID)'},
  },
  ['GetModelFileID'] = {
    {name='GetModelFileID', count=2, confidence=0.40, sample='file=ZGV.CreatureDetector.PetMirror:GetModelFileID()'},
  },
  ['RegisterGuideModel'] = {
    {name='RegisterGuideModel', count=2, confidence=0.40, sample='ZGV.CreatureDetector:RegisterGuideModel(model,guide,file)'},
  },
  ['UpdateCovenant'] = {
    {name='UpdateCovenant', count=1, confidence=0.20, sample='function Parser:UpdateCovenant()'},
  },
  ['Translate'] = {
    {name='Translate', count=9, confidence=1.00, sample='assert(Translate("bla")=="bla")'},
  },
  ['CreateRequestFrame'] = {
    {name='CreateRequestFrame', count=2, confidence=0.40, sample='function GuideMenu:CreateRequestFrame()'},
  },
  ['HideRequestFrame'] = {
    {name='HideRequestFrame', count=2, confidence=0.40, sample='function GuideMenu:HideRequestFrame()'},
  },
  ['FindGuides'] = {
    {name='FindGuides', count=2, confidence=0.40, sample='for _,object in pairs(ZGV:FindGuides(searchtext)) do'},
  },
  ['GetQuestsByTitle'] = {
    {name='GetQuestsByTitle', count=2, confidence=0.40, sample='local quests = ZGV.QuestDB:GetQuestsByTitle(searchtext)'},
  },
  ['AddSearchHistory'] = {
    {name='AddSearchHistory', count=2, confidence=0.40, sample='self:AddSearchHistory(searchtext,nresults)'},
  },
  ['GetGuidesForQuest'] = {
    {name='GetGuidesForQuest', count=4, confidence=0.80, sample='local status,results = ZGV.QuestDB:GetGuidesForQuest(questID)'},
  },
  ['SetFocusedRow'] = {
    {name='SetFocusedRow', count=7, confidence=1.00, sample='GuideMenu:SetFocusedRow()'},
  },
  ['ShowGuideDetails'] = {
    {name='ShowGuideDetails', count=8, confidence=1.00, sample='GuideMenu:ShowGuideDetails()'},
  },
  ['AnyGuideValid'] = {
    {name='AnyGuideValid', count=4, confidence=0.80, sample='if type(self.group.missing)~="boolean" then self.group.missing=not GuideMenu:AnyGuideValid(self.group) end'},
  },
  ['GetCompletion'] = {
    {name='GetCompletion', count=11, confidence=1.00, sample='g:GetCompletion()'},
  },
  ['ShowParent'] = {
    {name='ShowParent', count=3, confidence=0.60, sample='function GuideMenu:ShowParent()'},
  },
  ['OpenGuide'] = {
    {name='OpenGuide', count=2, confidence=0.40, sample='function GuideMenu:OpenGuide(guide)'},
  },
  ['FindSuggestedGuides'] = {
    {name='FindSuggestedGuides', count=4, confidence=0.80, sample='function GuideMenu:FindSuggestedGuides()'},
  },
  ['DoCond'] = {
    {name='DoCond', count=6, confidence=1.00, sample='local pass,msg = guide:DoCond("suggested")'},
  },
  ['Refresh'] = {
    {name='Refresh', count=166, confidence=1.00, sample='function GuideMenu:Refresh()'},
    {name='DetailsAPI2Frame.Refresh', count=1, confidence=0.20, sample='DetailsAPI2Frame.Refresh() --doesn't exists?'},
    {name='Api2Frame.Refresh', count=1, confidence=0.20, sample='function Api2Frame.Refresh()'},
  },
  ['CountRows'] = {
    {name='CountRows', count=12, confidence=1.00, sample='local ROW_COUNT = GuideMenu.MainFrame.GuideListScrollFrame:CountRows()'},
  },
  ['IsFavourite'] = {
    {name='IsFavourite', count=3, confidence=0.60, sample='if object.IsFavourite and object:IsFavourite() then'},
  },
  ['GetGuideFolderInfo'] = {
    {name='GetGuideFolderInfo', count=3, confidence=0.60, sample='suggested=ZGV:GetGuideFolderInfo(object)'},
  },
  ['ShowMissingPopup'] = {
    {name='ShowMissingPopup', count=3, confidence=0.60, sample='row:SetScript("OnClick",function(this,button) GuideMenu:ShowMissingPopup(row) end)'},
  },
  ['LoadNeededGuides'] = {
    {name='LoadNeededGuides', count=2, confidence=0.40, sample='local all_loaded = ZGV:LoadNeededGuides()'},
  },
  ['IsValid'] = {
    {name='IsValid', count=15, confidence=1.00, sample='if not ZGV.GuideFuncs:IsValid(guide,nil,"guidemenu") then return end'},
  },
  ['TryToActivateGuide'] = {
    {name='TryToActivateGuide', count=3, confidence=0.60, sample='if ZGV.Tabs:TryToActivateGuide(guide) then'},
  },
  ['GetTabFromPool'] = {
    {name='GetTabFromPool', count=6, confidence=1.00, sample='local tab = ZGV.Tabs:GetTabFromPool()'},
  },
  ['SetAsCurrent'] = {
    {name='SetAsCurrent', count=10, confidence=1.00, sample='tab:SetAsCurrent()'},
  },
  ['AssignGuide'] = {
    {name='AssignGuide', count=8, confidence=1.00, sample='GuideMenu.UseTab:AssignGuide(guide.title,guide.QuestSearchStepNum or 1)'},
  },
  ['ShowFolderDetails'] = {
    {name='ShowFolderDetails', count=2, confidence=0.40, sample='GuideMenu:ShowFolderDetails(row.group)'},
  },
  ['ShowQuestDetails'] = {
    {name='ShowQuestDetails', count=2, confidence=0.40, sample='GuideMenu:ShowQuestDetails(row.quest)'},
  },
  ['FormatLevel'] = {
    {name='ZGV.FormatLevel', count=5, confidence=1.00, sample='desc = desc..color.."Required level: ".. ZGV.FormatLevel(guide.startlevel,"mono").."|r\n"'},
  },
  ['SetModels'] = {
    {name='SetModels', count=3, confidence=0.60, sample='right.GuideModel:SetModels(guide.headerdata.model)'},
  },
  ['GetHyperlink'] = {
    {name='C_TooltipInfo.GetHyperlink', count=5, confidence=1.00, sample='local data = C_TooltipInfo.GetHyperlink(itemlink)'},
  },
  ['GetQuestLogItem'] = {
    {name='GetQuestLogItem', count=3, confidence=0.60, sample='function TS:GetQuestLogItem(type,index,quest)'},
    {name='C_TooltipInfo.GetQuestLogItem', count=1, confidence=0.20, sample='local data = C_TooltipInfo.GetQuestLogItem(type,index,quest)'},
  },
  ['GetSpellTooltip'] = {
    {name='GetSpellTooltip', count=2, confidence=0.40, sample='function TS:GetSpellTooltip(spellID)'},
  },
  ['GetSpellByID'] = {
    {name='C_TooltipInfo.GetSpellByID', count=1, confidence=0.20, sample='local data = C_TooltipInfo.GetSpellByID(spellID)'},
  },
  ['GetUnit'] = {
    {name='GetUnit', count=3, confidence=0.60, sample='function TS:GetUnit(token)'},
    {name='C_TooltipInfo.GetUnit', count=1, confidence=0.20, sample='local data = C_TooltipInfo.GetUnit(token)'},
  },
  ['NumLines'] = {
    {name='NumLines', count=10, confidence=1.00, sample='if Gratuity:NumLines()==0 then return results end'},
  },
  ['GetLine'] = {
    {name='GetLine', count=41, confidence=1.00, sample='local line=Gratuity:GetLine(num)'},
  },
  ['SetQuestLogItem'] = {
    {name='SetQuestLogItem', count=1, confidence=0.20, sample='Gratuity:SetQuestLogItem(type,index,quest)'},
  },
  ['SetUnit'] = {
    {name='SetUnit', count=20, confidence=1.00, sample='Gratuity:SetUnit(token)'},
  },
  ['FormatTime'] = {
    {name='FormatTime', count=5, confidence=1.00, sample='function Announce:FormatTime(seconds)'},
    {name='Pointer.FormatTime', count=3, confidence=0.60, sample='local time = Pointer.FormatTime(cooltime+cooldur-GetTime())'},
  },
  ['FormatMessage'] = {
    {name='FormatMessage', count=2, confidence=0.40, sample='function Announce:FormatMessage()'},
  },
  ['SendChatMessage'] = {
    {name='SendChatMessage', count=17, confidence=1.00, sample='if ZGV.db.profile.spam_levelup_emote then SendChatMessage(message, "EMOTE") end'},
  },
  ['GetSpellCooldown'] = {
    {name='GetSpellCooldown', count=12, confidence=1.00, sample='local startTime, duration, isEnabled, modRate = GetSpellCooldown(spellID)'},
    {name='C_Spell.GetSpellCooldown', count=1, confidence=0.20, sample='local cooldownInfo = C_Spell.GetSpellCooldown(spellIdToCheckCooldown)'},
  },
  ['SetEntry'] = {
    {name='SetEntry', count=4, confidence=0.80, sample='function ZGV_Notification_Entry_Template_Mixin:SetEntry(entry)'},
  },
  ['GetTimeFromSeconds'] = {
    {name='ZGV.F.GetTimeFromSeconds', count=22, confidence=1.00, sample='self.time:SetText("("..ZGV.F.GetTimeFromSeconds(time()-entry.data.added,"min").." ago)")'},
  },
  ['UpdateHeight'] = {
    {name='UpdateHeight', count=2, confidence=0.40, sample='self:UpdateHeight()'},
  },
  ['StartFadeTimer'] = {
    {name='StartFadeTimer', count=5, confidence=1.00, sample='function ZGV_Notification_Entry_Template_Mixin:StartFadeTimer()'},
  },
  ['CancelFadeTimer'] = {
    {name='CancelFadeTimer', count=8, confidence=1.00, sample='function ZGV_Notification_Entry_Template_Mixin:CancelFadeTimer()'},
  },
  ['UIFrameFadeAbort'] = {
    {name='ZGV.UIFrameFade.UIFrameFadeAbort', count=2, confidence=0.40, sample='ZGV.UIFrameFade.UIFrameFadeAbort(self)'},
  },
  ['OnEnter'] = {
    {name='OnEnter', count=28, confidence=1.00, sample='function ZGV_Notification_Entry_Template_Mixin:OnEnter()'},
  },
  ['OnLeave'] = {
    {name='OnLeave', count=18, confidence=1.00, sample='function ZGV_Notification_Entry_Template_Mixin:OnLeave()'},
  },
  ['OnClick'] = {
    {name='OnClick', count=16, confidence=1.00, sample='function ZGV_Notification_Entry_Close_Template_Mixin:OnClick()'},
  },
  ['UIDropDownForkButton_OnEnter'] = {
    {name='UIDropDownForkButton_OnEnter', count=2, confidence=0.40, sample='UIDropDownForkButton_OnEnter(self:GetParent())'},
  },
  ['UIDropDownForkButton_OnLeave'] = {
    {name='UIDropDownForkButton_OnLeave', count=2, confidence=0.40, sample='UIDropDownForkButton_OnLeave(self:GetParent())'},
  },
  ['CreateDungeonPopup'] = {
    {name='CreateDungeonPopup', count=2, confidence=0.40, sample='multidungeon =	{iconkey="DUNGEON", priority=18, click=function(entry) ZGV.GuideFuncs:CreateDungeonPopup(entry.data.object,entry.data.nctext) end},'},
  },
  ['OpenAllBags'] = {
    {name='OpenAllBags', count=1, confidence=0.20, sample='gear =		{iconkey="GEAR", priority=41, click=function() ZGV.ItemScore.Upgrades.DimItems=true OpenAllBags() CloseDropDownForks() ZGV.NotificationCenter:RemoveEntriesByType("gear") end},'},
  },
  ['ActivateAsMaster'] = {
    {name='ActivateAsMaster', count=4, confidence=0.80, sample='sharestart =	{iconkey="SHARE", priority=62, click=function() ZGV.Sync:ActivateAsMaster() end},'},
  },
  ['ActivateAsSlave'] = {
    {name='ActivateAsSlave', count=4, confidence=0.80, sample='shareaccept =	{iconkey="SHARE", priority=63, click=function() ZGV.Sync:ActivateAsSlave() end},'},
  },
  ['CreateFramePool'] = {
    {name='CreateFramePool', count=16, confidence=1.00, sample='NC.ButtonPool = CreateFramePool("BUTTON",ZGV.Frame,"ZGV_Notification_Entry_Template",poolresetter,nil,poolinit)'},
  },
  ['ClearNotifications'] = {
    {name='ClearNotifications', count=2, confidence=0.40, sample='NC.EntrySettings.clear:SetScript("OnClick",function() NC:ClearNotifications() end)'},
  },
  ['LoadNotifications'] = {
    {name='LoadNotifications', count=2, confidence=0.40, sample='NC:LoadNotifications()'},
  },
  ['SetLoading'] = {
    {name='SetLoading', count=3, confidence=0.60, sample='ZygorGuidesViewerMapIcon:SetLoading(false)'},
  },
  ['ShowAll'] = {
    {name='ShowAll', count=6, confidence=1.00, sample='NC:ShowAll()'},
  },
  ['CheckDynamicNotifications'] = {
    {name='CheckDynamicNotifications', count=2, confidence=0.40, sample='NC:CheckDynamicNotifications()'},
  },
  ['ShowSpecial'] = {
    {name='ShowSpecial', count=12, confidence=1.00, sample='NC:ShowSpecial(entry)'},
  },
  ['ShowOne'] = {
    {name='ShowOne', count=3, confidence=0.60, sample='function NC:ShowOne(entry)'},
  },
  ['Acquire'] = {
    {name='Acquire', count=22, confidence=1.00, sample='local frame = NC.ButtonPool:Acquire()'},
  },
  ['ShowSub'] = {
    {name='ShowSub', count=9, confidence=1.00, sample='function NC:ShowSub(force)'},
  },
  ['ToggleDropDownFork'] = {
    {name='ToggleDropDownFork', count=4, confidence=0.80, sample='ToggleDropDownFork(2, nil, ZGV.Frame.Controls.MenuHostNotifications, nil, nil, nil, NC.EntrySettings.menuList, NC.EntrySettings);'},
  },
  ['SaveNotifications'] = {
    {name='SaveNotifications', count=1, confidence=0.20, sample='function NC:SaveNotifications()'},
  },
  ['HandleQueue'] = {
    {name='NC.HandleQueue', count=1, confidence=0.20, sample='function NC.HandleQueue()'},
  },
  ['QuestResetTrigger'] = {
    {name='QuestResetTrigger', count=3, confidence=0.60, sample='NC:QuestResetTrigger()'},
  },
  ['OrientationTrigger'] = {
    {name='OrientationTrigger', count=2, confidence=0.40, sample='NC:OrientationTrigger()'},
  },
  ['EventsTrigger'] = {
    {name='EventsTrigger', count=3, confidence=0.60, sample='NC:EventsTrigger()'},
  },
  ['GetNumDayEvents'] = {
    {name='C_Calendar.GetNumDayEvents', count=4, confidence=0.80, sample='local numEvents = C_Calendar.GetNumDayEvents(0, day);'},
  },
  ['GetDayEvent'] = {
    {name='C_Calendar.GetDayEvent', count=4, confidence=0.80, sample='local eventdata = C_Calendar.GetDayEvent(0,day,event)'},
  },
  ['GetTimeUntil'] = {
    {name='ZGV.F.GetTimeUntil', count=5, confidence=1.00, sample='local remains,remainsec = ZGV.F.GetTimeUntil(eventdata.endTime)'},
  },
  ['GetHolidayInfo'] = {
    {name='C_Calendar.GetHolidayInfo', count=3, confidence=0.60, sample='local details = C_Calendar.GetHolidayInfo(0,day,event)'},
  },
  ['GetSecondsUntilWeeklyReset'] = {
    {name='C_DateAndTime.GetSecondsUntilWeeklyReset', count=5, confidence=1.00, sample='local weekly = C_DateAndTime.GetSecondsUntilWeeklyReset()'},
  },
  ['GetSecondsUntilDailyReset'] = {
    {name='C_DateAndTime.GetSecondsUntilDailyReset', count=5, confidence=1.00, sample='local daily = C_DateAndTime.GetSecondsUntilDailyReset()'},
  },
  ['IsContinentKnown'] = {
    {name='IsContinentKnown', count=5, confidence=1.00, sample='if ZGV.db.profile.nc_orientation and not ZGV.db.global.bannedtoasts["orientation"] and not LibTaxi:IsContinentKnown() then'},
  },
  ['RegisterQuestChains'] = {
    {name='RegisterQuestChains', count=1, confidence=0.20, sample='function ZGV:RegisterQuestChains(text)'},
  },
  ['ParseQuestChains_yielding'] = {
    {name='ParseQuestChains_yielding', count=2, confidence=0.40, sample='function ZGV:ParseQuestChains_yielding(text,Chains)'},
  },
  ['CreateReverseQuestChains_yielding'] = {
    {name='CreateReverseQuestChains_yielding', count=2, confidence=0.40, sample='function ZGV:CreateReverseQuestChains_yielding()'},
  },
  ['CleanupChains'] = {
    {name='CleanupChains', count=2, confidence=0.40, sample='function ZGV:CleanupChains()'},
  },
  ['ShowOverlay'] = {
    {name='ShowOverlay', count=2, confidence=0.40, sample='Foglight:ShowOverlay()'},
  },
  ['IsDataProviderRegistered'] = {
    {name='ZGV.IsDataProviderRegistered', count=4, confidence=0.80, sample='if ZGV.IsDataProviderRegistered(WorldMapFrame,Foglight.DataProvider.name) then return end'},
  },
  ['AddDataProvider'] = {
    {name='AddDataProvider', count=8, confidence=1.00, sample='WorldMapFrame:AddDataProvider(ZGV.Foglight.DataProvider)'},
  },
  ['HideOverlay'] = {
    {name='HideOverlay', count=1, confidence=0.20, sample='function Foglight:HideOverlay()'},
  },
  ['RemoveDataProvider'] = {
    {name='RemoveDataProvider', count=2, confidence=0.40, sample='WorldMapFrame:RemoveDataProvider(ZGV.Foglight.DataProvider)'},
  },
  ['GetMapID'] = {
    {name='GetMapID', count=24, confidence=1.00, sample='local map = WorldMapFrame:GetMapID()'},
  },
  ['OpenWorldMap'] = {
    {name='OpenWorldMap', count=7, confidence=1.00, sample='OpenWorldMap(map)'},
  },
  ['CreateFromMixins'] = {
    {name='CreateFromMixins', count=13, confidence=1.00, sample='Foglight.DataProvider = CreateFromMixins(MapCanvasDataProviderMixin);'},
  },
  ['OnAdded'] = {
    {name='OnAdded', count=4, confidence=0.80, sample='function Foglight.DataProvider:OnAdded(mapCanvas)'},
    {name='MapCanvasDataProviderMixin.OnAdded', count=2, confidence=0.40, sample='MapCanvasDataProviderMixin.OnAdded(self, mapCanvas);'},
  },
  ['GetMap'] = {
    {name='GetMap', count=23, confidence=1.00, sample='local pin = self:GetMap():AcquirePin("ZygorFogLightPinTemplate");'},
  },
  ['AcquirePin'] = {
    {name='AcquirePin', count=2, confidence=0.40, sample='local pin = self:GetMap():AcquirePin("ZygorFogLightPinTemplate");'},
  },
  ['OnRemoved'] = {
    {name='OnRemoved', count=2, confidence=0.40, sample='function Foglight.DataProvider:OnRemoved(mapCanvas)'},
    {name='MapCanvasDataProviderMixin.OnRemoved', count=2, confidence=0.40, sample='MapCanvasDataProviderMixin.OnRemoved(self, mapCanvas);'},
  },
  ['RemoveAllPinsByTemplate'] = {
    {name='RemoveAllPinsByTemplate', count=2, confidence=0.40, sample='--self:GetMap():RemoveAllPinsByTemplate("ZygorFogLightPinTemplate"); -- for some reason this errors out, and if disabled overlays hide fine...'},
  },
  ['OnShow'] = {
    {name='OnShow', count=11, confidence=1.00, sample='function Foglight.DataProvider:OnShow()'},
  },
  ['OnHide'] = {
    {name='OnHide', count=8, confidence=1.00, sample='function Foglight.DataProvider:OnHide()'},
  },
  ['RemoveAllData'] = {
    {name='RemoveAllData', count=11, confidence=1.00, sample='self.pin:RemoveAllData()'},
  },
  ['RefreshAllData'] = {
    {name='RefreshAllData', count=23, confidence=1.00, sample='self:RefreshAllData();'},
  },
  ['RefreshOverlays'] = {
    {name='RefreshOverlays', count=4, confidence=0.80, sample='self.pin:RefreshOverlays(fullUpdate);'},
  },
  ['OnGlobalAlphaChanged'] = {
    {name='OnGlobalAlphaChanged', count=1, confidence=0.20, sample='function Foglight.DataProvider:OnGlobalAlphaChanged()'},
  },
  ['RefreshAlpha'] = {
    {name='RefreshAlpha', count=3, confidence=0.60, sample='self.pin:RefreshAlpha();'},
  },
  ['OnLoad'] = {
    {name='OnLoad', count=11, confidence=1.00, sample='function ZygorFogLightPinMixin:OnLoad()'},
  },
  ['SetIgnoreGlobalPinScale'] = {
    {name='SetIgnoreGlobalPinScale', count=1, confidence=0.20, sample='self:SetIgnoreGlobalPinScale(true);'},
  },
  ['UseFrameLevelType'] = {
    {name='UseFrameLevelType', count=3, confidence=0.60, sample='self:UseFrameLevelType("PIN_FRAME_LEVEL_MAP_EXPLORATION");'},
  },
  ['CreateTexturePool'] = {
    {name='CreateTexturePool', count=5, confidence=1.00, sample='self.overlayTexturePool = CreateTexturePool(self, "ARTWORK", 0);'},
  },
  ['ReleaseAll'] = {
    {name='ReleaseAll', count=22, confidence=1.00, sample='self.overlayTexturePool:ReleaseAll();'},
  },
  ['Reset'] = {
    {name='Reset', count=71, confidence=1.00, sample='self.textureLoadGroup:Reset();'},
    {name='Details222.PetContainer.Reset', count=3, confidence=0.60, sample='Details222.PetContainer.Reset()'},
    {name='C_ChallengeMode.Reset', count=1, confidence=0.20, sample='function C_ChallengeMode.Reset() end'},
  },
  ['GetGlobalAlpha'] = {
    {name='GetGlobalAlpha', count=1, confidence=0.20, sample='self:SetAlpha(self:GetMap():GetGlobalAlpha());'},
  },
  ['OnUpdate'] = {
    {name='OnUpdate', count=17, confidence=1.00, sample='function ZygorFogLightPinMixin:OnUpdate(elapsed)'},
    {name='Tabs.OnUpdate', count=1, confidence=0.20, sample='function Tabs.OnUpdate(frame, elapsed)'},
    {name='Pointer.Provider.OnUpdate', count=1, confidence=0.20, sample='function Pointer.Provider.OnUpdate()'},
    {name='Pointer.OverlayProvider.OnUpdate', count=1, confidence=0.20, sample='function Pointer.OverlayProvider.OnUpdate(elapsed)'},
    {name='ChatThrottleLib.OnUpdate', count=2, confidence=0.40, sample='function ChatThrottleLib.OnUpdate(this,delay)'},
  },
  ['AreDetailLayersLoaded'] = {
    {name='AreDetailLayersLoaded', count=1, confidence=0.20, sample='if self.isWaitingForLoad and self:GetMap():AreDetailLayersLoaded() and self.textureLoadGroup:IsFullyLoaded() then'},
  },
  ['IsFullyLoaded'] = {
    {name='IsFullyLoaded', count=1, confidence=0.20, sample='if self.isWaitingForLoad and self:GetMap():AreDetailLayersLoaded() and self.textureLoadGroup:IsFullyLoaded() then'},
  },
  ['GetExploredMapTextures'] = {
    {name='C_MapExplorationInfo.GetExploredMapTextures', count=2, confidence=0.40, sample='local exploredMapTextures = C_MapExplorationInfo.GetExploredMapTextures(mapID);'},
  },
  ['GetCanvasContainer'] = {
    {name='GetCanvasContainer', count=6, confidence=1.00, sample='self.layerIndex = self:GetMap():GetCanvasContainer():GetCurrentLayerIndex();'},
  },
  ['GetCurrentLayerIndex'] = {
    {name='GetCurrentLayerIndex', count=2, confidence=0.40, sample='self.layerIndex = self:GetMap():GetCanvasContainer():GetCurrentLayerIndex();'},
  },
  ['GetMapArtLayers'] = {
    {name='C_Map.GetMapArtLayers', count=2, confidence=0.40, sample='local layers = C_Map.GetMapArtLayers(mapID);'},
  },
  ['InPhase'] = {
    {name='ZGV.InPhase', count=1861, confidence=1.00, sample='if not exploredTextureInfo.phase or ZGV.InPhase(exploredTextureInfo.phase) then'},
    {name='InPhase', count=227, confidence=1.00, sample='4604=sH|m90|x54.90|y37.70|cZGV.InPhase("Old Undercity")--, Undercity (Abigail Sawyer)'},
  },
  ['CheckMouseButtonPassthrough'] = {
    {name='CheckMouseButtonPassthrough', count=3, confidence=0.60, sample='function ZygorFogLightPinMixin:CheckMouseButtonPassthrough()'},
  },
  ['OnCanvasScaleChanged'] = {
    {name='OnCanvasScaleChanged', count=2, confidence=0.40, sample='function ZygorFogLightPinMixin:OnCanvasScaleChanged()'},
  },
  ['OnCanvasSizeChanged'] = {
    {name='OnCanvasSizeChanged', count=2, confidence=0.40, sample='function ZygorFogLightPinMixin:OnCanvasSizeChanged()'},
  },
  ['DenormalizeHorizontalSize'] = {
    {name='DenormalizeHorizontalSize', count=1, confidence=0.20, sample='self:SetSize(self:GetMap():DenormalizeHorizontalSize(1.0), self:GetMap():DenormalizeVerticalSize(1.0));'},
  },
  ['DenormalizeVerticalSize'] = {
    {name='DenormalizeVerticalSize', count=1, confidence=0.20, sample='self:SetSize(self:GetMap():DenormalizeHorizontalSize(1.0), self:GetMap():DenormalizeVerticalSize(1.0));'},
  },
  ['ZygorGuidesViewerFrameMaster_OnUpdate'] = {
    {name='ZygorGuidesViewerFrameMaster_OnUpdate', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrameMaster_OnUpdate(self,elapsed)'},
  },
  ['StartupStep'] = {
    {name='StartupStep', count=6, confidence=1.00, sample='ZGV:StartupStep()'},
  },
  ['ZygorGuidesViewerFrameMaster_OnLoad'] = {
    {name='ZygorGuidesViewerFrameMaster_OnLoad', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrameMaster_OnLoad(self)'},
  },
  ['ReanchorTabs'] = {
    {name='ReanchorTabs', count=11, confidence=1.00, sample='Tabs.ResizeTimer = ZGV:ScheduleRepeatingTimer(function() Tabs:ReanchorTabs() end, 0.01)'},
  },
  ['GetCursorPosition'] = {
    {name='GetCursorPosition', count=48, confidence=1.00, sample='local x, y = GetCursorPosition();'},
  },
  ['GetEffectiveScale'] = {
    {name='GetEffectiveScale', count=39, confidence=1.00, sample='local scale = UIParent:GetEffectiveScale()'},
  },
  ['AddButtonOnClick'] = {
    {name='Tabs.AddButtonOnClick', count=1, confidence=0.20, sample='function Tabs.AddButtonOnClick(self,button)'},
  },
  ['AddButtonOnEnter'] = {
    {name='Tabs.AddButtonOnEnter', count=1, confidence=0.20, sample='function Tabs.AddButtonOnEnter(self,button)'},
  },
  ['Initialize'] = {
    {name='Initialize', count=6, confidence=1.00, sample='function Tabs:Initialize()'},
  },
  ['AddHandler'] = {
    {name='AddHandler', count=14, confidence=1.00, sample='ZGV.UpdateCentral:AddHandler(Tabs.OnUpdate)'},
  },
  ['GetSpecialTabFromPool'] = {
    {name='GetSpecialTabFromPool', count=6, confidence=1.00, sample='tab = Tabs:GetSpecialTabFromPool(special)'},
  },
  ['CreateTab'] = {
    {name='CreateTab', count=3, confidence=0.60, sample='return Tabs:CreateTab()'},
  },
  ['HideInteraction'] = {
    {name='HideInteraction', count=8, confidence=1.00, sample='tab:HideInteraction()'},
  },
  ['ToggleRemainingMenu'] = {
    {name='ToggleRemainingMenu', count=1, confidence=0.20, sample='function Tabs:ToggleRemainingMenu()'},
  },
  ['UpdateCurrentTab'] = {
    {name='UpdateCurrentTab', count=3, confidence=0.60, sample='function Tabs:UpdateCurrentTab(mode,step)'},
  },
  ['CheckForStepCompletion'] = {
    {name='CheckForStepCompletion', count=3, confidence=0.60, sample='Tabs:CheckForStepCompletion()'},
  },
  ['DoesTabExist'] = {
    {name='DoesTabExist', count=3, confidence=0.60, sample='function Tabs:DoesTabExist(title)'},
  },
  ['DoesSpecialTabExist'] = {
    {name='DoesSpecialTabExist', count=2, confidence=0.40, sample='function Tabs:DoesSpecialTabExist(mode)'},
  },
  ['ShowInteraction'] = {
    {name='ShowInteraction', count=5, confidence=1.00, sample='function Tabs:ShowInteraction(tooltip)'},
  },
  ['HandleClick'] = {
    {name='HandleClick', count=2, confidence=0.40, sample=':SetScript("OnMouseUp",function() tab:HandleClick() end)'},
  },
  ['OnDragStart'] = {
    {name='OnDragStart', count=12, confidence=1.00, sample=':SetScript("OnDragStart",function() tab:OnDragStart() end)'},
  },
  ['OnDragStop'] = {
    {name='OnDragStop', count=17, confidence=1.00, sample=':SetScript("OnDragStop",function() tab:OnDragStop() end)'},
  },
  ['SetDegrees'] = {
    {name='SetDegrees', count=14, confidence=1.00, sample=':SetDegrees(-360)'},
  },
  ['RemoveTab'] = {
    {name='RemoveTab', count=3, confidence=0.60, sample=':SetScript("OnClick",function(self) tab:RemoveTab() end)'},
  },
  ['SetBusy'] = {
    {name='SetBusy', count=1, confidence=0.20, sample='function Tabs:SetBusy(state)'},
  },
  ['SetSpecialState'] = {
    {name='SetSpecialState', count=8, confidence=1.00, sample='if ZGV.Frame.specialstate ~= "normal" then ZGV.Frame:SetSpecialState("normal") end'},
  },
  ['Deactivate'] = {
    {name='Deactivate', count=8, confidence=1.00, sample='ZGV:ScheduleTimer(function() ZGV.Sync:Deactivate() end,0)'},
  },
  ['Abort'] = {
    {name='Abort', count=19, confidence=1.00, sample='LibRover:Abort()'},
  },
  ['OptionalTab'] = {
    {name='OptionalTab', count=1, confidence=0.20, sample='function ZGV.Tabs:OptionalTab(params)'},
  },
  ['FocusStep'] = {
    {name='FocusStep', count=15, confidence=1.00, sample='ZGV:FocusStep(step)'},
  },
  ['IsGuideTabbed'] = {
    {name='IsGuideTabbed', count=2, confidence=0.40, sample='function Tabs:IsGuideTabbed(guide)'},
  },
  ['RegisterWidget'] = {
    {name='RegisterWidget', count=45, confidence=1.00, sample='function Widgets:RegisterWidget(object)'},
  },
  ['DeepCopy'] = {
    {name='ZGV.F.DeepCopy', count=6, confidence=1.00, sample='Widgets.RegisteredFloating[object.ident]=ZGV.F.DeepCopy(object)'},
  },
  ['SystemInitialise'] = {
    {name='SystemInitialise', count=2, confidence=0.40, sample='object:SystemInitialise()'},
  },
  ['SystemApplySkin'] = {
    {name='SystemApplySkin', count=4, confidence=0.80, sample='object:SystemApplySkin()'},
  },
  ['SetInteractive'] = {
    {name='SetInteractive', count=13, confidence=1.00, sample='object:SetInteractive(false)'},
  },
  ['Resize'] = {
    {name='Resize', count=8, confidence=1.00, sample='object:Resize()'},
  },
  ['Place'] = {
    {name='Place', count=3, confidence=0.60, sample='object:Place()'},
  },
  ['UpdateDriver'] = {
    {name='Widgets.UpdateDriver', count=1, confidence=0.20, sample='function Widgets.UpdateDriver(elapsed)'},
  },
  ['Throttle'] = {
    {name='Throttle', count=3, confidence=0.60, sample='if object.active and object.OnTick and not object:Throttle(elapsed) then object:OnTick() end'},
  },
  ['OnTick'] = {
    {name='OnTick', count=16, confidence=1.00, sample='if object.active and object.OnTick and not object:Throttle(elapsed) then object:OnTick() end'},
  },
  ['Fits'] = {
    {name='Fits', count=5, confidence=1.00, sample='if w:Fits(row,column) then'},
  },
  ['WarnOff'] = {
    {name='WarnOff', count=7, confidence=1.00, sample='w:WarnOff()'},
  },
  ['WarnOn'] = {
    {name='WarnOn', count=3, confidence=0.60, sample='w:WarnOn()'},
  },
  ['MouseIsOver'] = {
    {name='MouseIsOver', count=12, confidence=1.00, sample='elseif MouseIsOver(Widgets.Parent,-1,1,1,-1) then -- skip 1px margin, since it may not be used by widgets due to grid being math.floored'},
  },
  ['ToggleFloaters'] = {
    {name='ToggleFloaters', count=1, confidence=0.20, sample='function Widgets:ToggleFloaters(event,state)'},
  },
  ['LoadFloating'] = {
    {name='LoadFloating', count=3, confidence=0.60, sample='if not Widgets.FloatingLoaded then Widgets:LoadFloating() end'},
  },
  ['SetFrameSizes'] = {
    {name='ZGV.F.SetFrameSizes', count=2, confidence=0.40, sample='ZGV.F.SetFrameSizes(widget.frame,data)'},
  },
  ['EventDriver'] = {
    {name='EventDriver', count=1, confidence=0.20, sample='function Widgets:EventDriver(event,...)'},
  },
  ['ExitAddMode'] = {
    {name='ExitAddMode', count=1, confidence=0.20, sample='function Widgets:ExitAddMode()'},
  },
  ['ShowConfig'] = {
    {name='ShowConfig', count=4, confidence=0.80, sample='function Widgets:ShowConfig()'},
  },
  ['Assign'] = {
    {name='Assign', count=8, confidence=1.00, sample='widgetframe:Assign(object)'},
  },
  ['ShowDescription'] = {
    {name='ShowDescription', count=2, confidence=0.40, sample='widgetframe:ShowDescription()'},
  },
  ['SetDimmed'] = {
    {name='SetDimmed', count=2, confidence=0.40, sample='widgetframe:SetDimmed(object.active)'},
  },
  ['SetPinned'] = {
    {name='SetPinned', count=3, confidence=0.60, sample='widgetframe:SetPinned(Widgets.SavedHome[object.ident])'},
  },
  ['EnableConfig'] = {
    {name='EnableConfig', count=2, confidence=0.40, sample='function Widgets:EnableConfig()'},
  },
  ['ToggleConfigMenu'] = {
    {name='ToggleConfigMenu', count=1, confidence=0.20, sample='function Widgets:ToggleConfigMenu()'},
  },
  ['ToggleConfig'] = {
    {name='ToggleConfig', count=3, confidence=0.60, sample='func=function() Widgets:ToggleConfig() end,'},
  },
  ['ClearWidgets'] = {
    {name='ClearWidgets', count=5, confidence=1.00, sample='func=function() Widgets:ClearWidgets() end,'},
  },
  ['ConfigButtonTooltip'] = {
    {name='ConfigButtonTooltip', count=1, confidence=0.20, sample='function Widgets:ConfigButtonTooltip()'},
  },
  ['ClearButtonTooltip'] = {
    {name='ClearButtonTooltip', count=1, confidence=0.20, sample='function Widgets:ClearButtonTooltip()'},
  },
  ['ExitAddButtonTooltip'] = {
    {name='ExitAddButtonTooltip', count=1, confidence=0.20, sample='function Widgets:ExitAddButtonTooltip()'},
  },
  ['RecordAddWidget'] = {
    {name='RecordAddWidget', count=2, confidence=0.40, sample='function Widgets:RecordAddWidget()'},
  },
  ['AddWidget'] = {
    {name='AddWidget', count=3, confidence=0.60, sample='function Widgets:AddWidget(object)'},
  },
  ['Mixin'] = {
    {name='Mixin', count=211, confidence=1.00, sample='Mixin(self,ZGV_Widget_Object_Mixin)'},
  },
  ['HidePopup'] = {
    {name='HidePopup', count=6, confidence=1.00, sample='object:HidePopup()'},
  },
  ['OnResize'] = {
    {name='OnResize', count=2, confidence=0.40, sample='if self.OnResize then self:OnResize() end'},
  },
  ['OnResizeStart'] = {
    {name='OnResizeStart', count=2, confidence=0.40, sample=':SetScript("OnDragStart",function() self:OnResizeStart() end)'},
  },
  ['OnResizeStop'] = {
    {name='OnResizeStop', count=3, confidence=0.60, sample=':SetScript("OnDragStop",function() self:OnResizeStop() end)'},
  },
  ['TogglePinned'] = {
    {name='TogglePinned', count=4, confidence=0.80, sample=':SetScript("OnClick", function() self:TogglePinned() end)'},
  },
  ['TogglePopup'] = {
    {name='TogglePopup', count=3, confidence=0.60, sample=':SetScript("OnClick",function() self:TogglePopup() end)'},
  },
  ['SetResizeBounds'] = {
    {name='SetResizeBounds', count=11, confidence=1.00, sample='self.frame:SetResizeBounds(limits.minwidth* Widgets.TileSize - padding,limits.minheight* Widgets.TileSize - padding,limits.maxwidth* Widgets.TileSize - padding,limits.maxheight* Widgets.TileSize - padding)'},
  },
  ['SetMaxResize'] = {
    {name='SetMaxResize', count=5, confidence=1.00, sample='self.frame:SetMaxResize(limits.maxwidth* Widgets.TileSize - padding,limits.maxheight* Widgets.TileSize - padding)'},
  },
  ['InitialisePopup'] = {
    {name='InitialisePopup', count=6, confidence=1.00, sample='self:InitialisePopup()'},
  },
  ['OnPopup'] = {
    {name='OnPopup', count=7, confidence=1.00, sample='if self.OnPopup then self:OnPopup() end'},
  },
  ['SaveFrameSizes'] = {
    {name='ZGV.F.SaveFrameSizes', count=3, confidence=0.60, sample='ZGV.F.SaveFrameSizes(self.frame,self.ident,Widgets.SavedHome)'},
  },
  ['GetPointByName'] = {
    {name='GetPointByName', count=1, confidence=0.20, sample='local point, relativeTo, relativePoint, xOfs, yOfs  = prev.frame:GetPointByName("TOPLEFT")'},
  },
  ['ShowSizes'] = {
    {name='ShowSizes', count=1, confidence=0.20, sample='function ZGV_Widget_Unused_Mixin:ShowSizes()'},
  },
  ['Lretrydots'] = {
    {name='Lretrydots', count=4, confidence=0.80, sample='local function Lretrydots(goal) return dots(goal.Lretries)..(ZGV.db.profile.debug and goal.Lreasons or "") end'},
  },
  ['GetQuestGoalData'] = {
    {name='Goal.GetQuestGoalData', count=2, confidence=0.40, sample='function Goal.GetQuestGoalData(questid,objnum,count)'},
  },
  ['GetScenarioGoalData'] = {
    {name='GetScenarioGoalData', count=5, confidence=1.00, sample='local function GetScenarioGoalData(scenariogoalid,count,stage)'},
  },
  ['GetScenarioBonusData'] = {
    {name='GetScenarioBonusData', count=4, confidence=0.80, sample='local function GetScenarioBonusData(scenariogoalid,count,stage)'},
  },
  ['GetBonusSteps'] = {
    {name='C_Scenario.GetBonusSteps', count=1, confidence=0.20, sample='local tblBonusSteps = C_Scenario.GetBonusSteps();'},
  },
  ['GetCriteriaInfoByStep'] = {
    {name='C_ScenarioInfo.GetCriteriaInfoByStep', count=1, confidence=0.20, sample='local criteriaInfo = C_ScenarioInfo.GetCriteriaInfoByStep(bonusStepIndex, criteriaIndex);'},
  },
  ['GetAchievementCriteriaInfo'] = {
    {name='GetAchievementCriteriaInfo', count=3, confidence=0.60, sample='--local desc, ctype, completed, quantity, requiredQuantity  = GetAchievementCriteriaInfo(achieveid, criteria)'},
  },
  ['GetAchievementGoalData'] = {
    {name='GetAchievementGoalData', count=2, confidence=0.40, sample='local function GetAchievementGoalData(achieveid,criteria)'},
  },
  ['GetAchievementNumCriteria'] = {
    {name='GetAchievementNumCriteria', count=4, confidence=0.80, sample='local numCriteria = GetAchievementNumCriteria(achieveid) --safety check.'},
  },
  ['COLOR_COUNT'] = {
    {name='COLOR_COUNT', count=7, confidence=1.00, sample='local function COLOR_COUNT(s) return "|cffffffcc"..tostring(s).."|r" end'},
  },
  ['COLOR_ITEM'] = {
    {name='COLOR_ITEM', count=39, confidence=1.00, sample='local function COLOR_ITEM(s) return "|cffaaeeff"..tostring(s).."|r" end'},
  },
  ['COLOR_QUEST'] = {
    {name='COLOR_QUEST', count=5, confidence=1.00, sample='local function COLOR_QUEST(s) return "|cffeebbff"..tostring(s).."|r" end'},
  },
  ['COLOR_NPC'] = {
    {name='COLOR_NPC', count=13, confidence=1.00, sample='local function COLOR_NPC(s) return "|cffaaffaa"..tostring(s).."|r" end'},
  },
  ['COLOR_MONSTER'] = {
    {name='COLOR_MONSTER', count=6, confidence=1.00, sample='local function COLOR_MONSTER(s) return "|cffffaaaa"..tostring(s).."|r" end'},
  },
  ['COLOR_GOAL'] = {
    {name='COLOR_GOAL', count=21, confidence=1.00, sample='local function COLOR_GOAL(s) return "|cffffcccc"..tostring(s).."|r" end'},
  },
  ['COLOR_BOLD'] = {
    {name='COLOR_BOLD', count=5, confidence=1.00, sample='local function COLOR_BOLD(s) return "|cffffee55"..tostring(s).."|r" end'},
  },
  ['GenericText'] = {
    {name='GenericText', count=17, confidence=1.00, sample='local function GenericText(brief,goaltype,colorfunc,count,target,nocount,isplural,_done,isthe)'},
  },
  ['SetWaypoint'] = {
    {name='SetWaypoint', count=35, confidence=1.00, sample='local way = ZGV.Pointer:SetWaypoint(last.m,last.x,last.y,{'},
  },
  ['IsControlKeyDown'] = {
    {name='IsControlKeyDown', count=23, confidence=1.00, sample='cleartype=not IsControlKeyDown(),'},
  },
  ['FindNPC_Smart'] = {
    {name='FindNPC_Smart', count=4, confidence=0.80, sample='ZGV.WhoWhere:FindNPC_Smart(self.npctype,self,GOALTYPES[self.action].onLibRoverResults)'},
  },
  ['GetPrice'] = {
    {name='GetPrice', count=8, confidence=1.00, sample='totalvalue = totalvalue + ZGV.Gold.Scan:GetPrice(target[2]) * numInBags'},
  },
  ['SelectOption'] = {
    {name='C_GossipInfo.SelectOption', count=3, confidence=0.60, sample='C_GossipInfo.SelectOption(gossip.gossipOptionID)'},
  },
  ['IsQuestPossible'] = {
    {name='IsQuestPossible', count=4, confidence=0.80, sample='return complete, complete or (ZGV.QuestDB:IsQuestPossible(self.questid)==ZGV.QuestDB.VALID_NOW)     --[[or ZGV.recentlyAcceptedQuests[id] --]]'},
  },
  ['CloseQuest'] = {
    {name='CloseQuest', count=1, confidence=0.20, sample='if noquests then CloseQuest() end'},
  },
  ['GetObjectiveText'] = {
    {name='GetObjectiveText', count=1, confidence=0.20, sample='elseif QuestFrame:IsShown() and ZGV.db.profile.autoaccept and not GetObjectiveText() and not IsQuestCompletable() then -- sitting in an incomplete quest detail'},
  },
  ['IsQuestCompletable'] = {
    {name='IsQuestCompletable', count=2, confidence=0.40, sample='elseif QuestFrame:IsShown() and ZGV.db.profile.autoaccept and not GetObjectiveText() and not IsQuestCompletable() then -- sitting in an incomplete quest detail'},
  },
  ['TriggerEvent'] = {
    {name='TriggerEvent', count=19, confidence=1.00, sample='EventRegistry:TriggerEvent("ZygorGossip", v.gossipOptionID)'},
  },
  ['GetRecipeItemLink'] = {
    {name='C_TradeSkillUI.GetRecipeItemLink', count=2, confidence=0.40, sample='local product = C_TradeSkillUI.GetRecipeItemLink(self.spellid)'},
  },
  ['GetRecipeQualityItemIDs'] = {
    {name='C_TradeSkillUI.GetRecipeQualityItemIDs', count=2, confidence=0.40, sample='local variants = C_TradeSkillUI.GetRecipeQualityItemIDs(self.spellid)'},
  },
  ['PerformTradeSkillGoal'] = {
    {name='PerformTradeSkillGoal', count=4, confidence=0.80, sample='-- self.macrosrc = "#showtooltip ".. castskill .."{;}/run ZGV:PerformTradeSkillGoal({stepnum},{goalnum})"'},
  },
  ['GetRecipe'] = {
    {name='GetRecipe', count=6, confidence=1.00, sample='if  (ZGV.Professions:GetRecipe(self.spellid)) ~= false then'},
  },
  ['GetInventorySlotInfo'] = {
    {name='GetInventorySlotInfo', count=3, confidence=0.60, sample='local slotid,_ = GetInventorySlotInfo(slot)'},
  },
  ['GetBindLocation'] = {
    {name='GetBindLocation', count=4, confidence=0.80, sample='local bind = GetBindLocation("player")'},
  },
  ['GetAchievementCriteriaInfoByID'] = {
    {name='GetAchievementCriteriaInfoByID', count=2, confidence=0.40, sample='if (GetAchievementNumCriteria(self.achieveid) < self.achievesub) and not (GetAchievementCriteriaInfoByID(self.achieveid,self.achievesub)) then -- Causes errors when blizzard changes crap.'},
  },
  ['AchievementFrame_LoadUI'] = {
    {name='AchievementFrame_LoadUI', count=2, confidence=0.40, sample='if not AchievementFrame then  AchievementFrame_LoadUI()  end'},
  },
  ['AchievementFrame_ToggleAchievementFrame'] = {
    {name='AchievementFrame_ToggleAchievementFrame', count=3, confidence=0.60, sample='if not AchievementFrame:IsShown() then  AchievementFrame_ToggleAchievementFrame()  end'},
  },
  ['AchievementFrame_SelectAchievement'] = {
    {name='AchievementFrame_SelectAchievement', count=3, confidence=0.60, sample='AchievementFrame_SelectAchievement(self.achieveid)'},
  },
  ['UnitXP'] = {
    {name='UnitXP', count=10, confidence=1.00, sample='elseif floor(level)>=self.level and UnitXP("player")>=(self.exp or 0) then'},
  },
  ['UnitXPMax'] = {
    {name='UnitXPMax', count=7, confidence=1.00, sample='return false,true, norm_nums(UnitXP("player"),self.exp or UnitXPMax("player"))'},
  },
  ['GetKillsNeeded'] = {
    {name='GetKillsNeeded', count=2, confidence=0.40, sample='local killcount = ZGV.F:GetKillsNeeded(self.level,self.exp)'},
  },
  ['IsEnvironmentPhased'] = {
    {name='IsEnvironmentPhased', count=2, confidence=0.40, sample='if ZGV.Pointer:IsEnvironmentPhased(gm) then'},
  },
  ['GetCurrentMapID'] = {
    {name='ZGV.GetCurrentMapID', count=22, confidence=1.00, sample='gm,gf=ZGV.GetCurrentMapID(),ZGV.GetCurrentMapDungeonLevel()'},
  },
  ['GetCurrentMapDungeonLevel'] = {
    {name='ZGV.GetCurrentMapDungeonLevel', count=12, confidence=1.00, sample='gm,gf=ZGV.GetCurrentMapID(),ZGV.GetCurrentMapDungeonLevel()'},
  },
  ['DIFFERENT'] = {
    {name='DIFFERENT', count=1, confidence=0.20, sample='-- map/floor is DIFFERENT (make it work only with a negative distance, which would mean "leave the zone"'},
  },
  ['GetZoneDistance'] = {
    {name='GetZoneDistance', count=26, confidence=1.00, sample='local realdist=HBD:GetZoneDistance(cm,cx,cy,gm,gx,gy)'},
  },
  ['SanitizeMapFloor'] = {
    {name='SanitizeMapFloor', count=9, confidence=1.00, sample='self.floor= ZGV:SanitizeMapFloor(node.m,node.f)'},
  },
  ['GetMapContinent'] = {
    {name='ZGV.GetMapContinent', count=31, confidence=1.00, sample='local goalcontinent=ZGV.GetMapContinent(self.map or 0,0)'},
    {name='GetMapContinent', count=4, confidence=0.80, sample='function Lib:GetMapContinent(mapID)'},
  },
  ['IsMounted'] = {
    {name='IsMounted', count=1, confidence=0.20, sample='(ZGV.CurrentMapID==self.map and not UnitOnTaxi("player") and IsMounted()) then'},
  },
  ['GetGarrisonInfo'] = {
    {name='GetGarrisonInfo', count=1, confidence=0.20, sample='local level = C_Garrison:GetGarrisonInfo() or 1'},
    {name='C_Garrison.GetGarrisonInfo', count=4, confidence=0.80, sample='local glvl = C_Garrison.GetGarrisonInfo(garr60)'},
  },
  ['GetUnitName'] = {
    {name='GetUnitName', count=32, confidence=1.00, sample='self.param = L["players_garrison_1"]:format(GetUnitName("player"))'},
  },
  ['GetBuildingInfo'] = {
    {name='C_Garrison.GetBuildingInfo', count=5, confidence=1.00, sample='if not self.buildingLevel and type(self.building)=="number" then _,_,_,_,_,self.buildingLevel = C_Garrison.GetBuildingInfo(self.building) end  -- ie. LumberMill is 40,41,138; call "41" means "41,2" explicitly.'},
  },
  ['IsEncounterComplete'] = {
    {name='C_EncounterJournal.IsEncounterComplete', count=1, confidence=0.20, sample='local killed = C_EncounterJournal.IsEncounterComplete(self.targetid)'},
  },
  ['UnitHealth'] = {
    {name='UnitHealth', count=30, confidence=1.00, sample='local bosshp = UnitHealth(unit)'},
  },
  ['UnitHealthMax'] = {
    {name='UnitHealthMax', count=29, confidence=1.00, sample='local bosshpmax = UnitHealthMax(unit)'},
  },
  ['GetSetInfo'] = {
    {name='C_TransmogSets.GetSetInfo', count=2, confidence=0.40, sample='local setinfo = C_TransmogSets.GetSetInfo(self.setid)'},
  },
  ['GetSetSources'] = {
    {name='C_TransmogSets.GetSetSources', count=2, confidence=0.40, sample='for appid in pairs(C_TransmogSets.GetSetSources(self.setid)) do -- find item that matches slot in param'},
  },
  ['GetTitleName'] = {
    {name='GetTitleName', count=1, confidence=0.20, sample='self.title = GetTitleName(self.titleid):sub(0,-2)'},
  },
  ['GoalPopupImage'] = {
    {name='ZGV.GoalPopupImage', count=2, confidence=0.40, sample='ZGV.GoalPopupImage(self)'},
  },
  ['GoalPopupImage_DragStopHandler'] = {
    {name='GoalPopupImage_DragStopHandler', count=1, confidence=0.20, sample='local function GoalPopupImage_DragStopHandler()'},
  },
  ['RefreshRunesList'] = {
    {name='C_Engraving.RefreshRunesList', count=2, confidence=0.40, sample='C_Engraving.RefreshRunesList()'},
  },
  ['GetRuneCategories'] = {
    {name='C_Engraving.GetRuneCategories', count=1, confidence=0.20, sample='self.categories = C_Engraving.GetRuneCategories(false, false)'},
  },
  ['GetRunesForCategory'] = {
    {name='C_Engraving.GetRunesForCategory', count=1, confidence=0.20, sample='local runes = C_Engraving.GetRunesForCategory(cat, true)'},
  },
  ['GetRuneForEquipmentSlot'] = {
    {name='C_Engraving.GetRuneForEquipmentSlot', count=1, confidence=0.20, sample='local rune = C_Engraving.GetRuneForEquipmentSlot(slotid)'},
  },
  ['Prepare'] = {
    {name='Prepare', count=4, confidence=0.80, sample='if not self.prepared then self:Prepare() end'},
  },
  ['IsObsolete'] = {
    {name='IsObsolete', count=8, confidence=1.00, sample='if ZGV.db.profile.skipobsolete and not self.parentStep.parentGuide.noobsolete and self:IsObsolete() then return "obsolete" end'},
  },
  ['UpdateStatus'] = {
    {name='UpdateStatus', count=2, confidence=0.40, sample='function Goal:UpdateStatus()'},
  },
  ['IsValidRole'] = {
    {name='IsValidRole', count=2, confidence=0.40, sample='function Goal:IsValidRole()'},
  },
  ['IsFitting'] = {
    {name='IsFitting', count=4, confidence=0.80, sample='if not self:IsFitting() then return false end'},
  },
  ['MaybeSkipThisGoal'] = {
    {name='MaybeSkipThisGoal', count=3, confidence=0.60, sample='if ZGV.QuestDB:MaybeSkipThisGoal(self) then return false,false,0,1 end -- guide in turnin only mode, or sis skipping'},
  },
  ['WasSavedStickyComplete'] = {
    {name='WasSavedStickyComplete', count=2, confidence=0.40, sample='or self:WasSavedStickyComplete()'},
  },
  ['CheckVisited'] = {
    {name='CheckVisited', count=2, confidence=0.40, sample='function Goal:CheckVisited()  -- AKA arrived'},
  },
  ['IsCompleteAs'] = {
    {name='IsCompleteAs', count=2, confidence=0.40, sample='local isvisited = self:IsCompleteAs("goto")  -- complete me like one of your French gotos, Jack'},
  },
  ['SaveStickyComplete'] = {
    {name='SaveStickyComplete', count=4, confidence=0.80, sample='self:SaveStickyComplete()'},
  },
  ['OnVisited'] = {
    {name='OnVisited', count=2, confidence=0.40, sample='self:OnVisited()'},
  },
  ['OnDevisited'] = {
    {name='OnDevisited', count=2, confidence=0.40, sample='self:OnDevisited()'},
  },
  ['RemoveEventHandler'] = {
    {name='RemoveEventHandler', count=3, confidence=0.60, sample='ZGV:RemoveEventHandler(event,self.eventfunc)'},
  },
  ['RegisterEvents'] = {
    {name='RegisterEvents', count=8, confidence=1.00, sample='function Goal:RegisterEvents()'},
  },
  ['UnregisterEvents'] = {
    {name='UnregisterEvents', count=3, confidence=0.60, sample='function Goal:UnregisterEvents()'},
  },
  ['CycleWaypointFrom'] = {
    {name='CycleWaypointFrom', count=3, confidence=0.60, sample='self.parentStep:CycleWaypointFrom(self.num,"no cycle")'},
  },
  ['RemoveWaypoint'] = {
    {name='RemoveWaypoint', count=11, confidence=1.00, sample='--ZGV.Pointer:RemoveWaypoint(self.waypoint) ZGV:ShowWaypoints()  -- that's bullshit...'},
  },
  ['GetWaypoint'] = {
    {name='GetWaypoint', count=1, confidence=0.20, sample='function Goal:GetWaypoint()'},
  },
  ['OnCompleted'] = {
    {name='OnCompleted', count=2, confidence=0.40, sample='function Goal:OnCompleted()'},
  },
  ['OnUncompleted'] = {
    {name='OnUncompleted', count=2, confidence=0.40, sample='function Goal:OnUncompleted()'},
  },
  ['GetAchievementLink'] = {
    {name='GetAchievementLink', count=1, confidence=0.20, sample='local link = GetAchievementLink(self.achieveid)'},
  },
  ['IsPOIComplete'] = {
    {name='Utils.IsPOIComplete', count=1, confidence=0.20, sample='-- Sorta kinda similar to Utils.IsPOIComplete() in ESO, but not really . . .'},
    {name='IsPOIComplete', count=1, confidence=0.20, sample='function Goal:IsPOIComplete(args)'},
  },
  ['IsDynamic'] = {
    {name='IsDynamic', count=4, confidence=0.80, sample='function Goal:IsDynamic()'},
  },
  ['FindPetActionInfo'] = {
    {name='ZGV.FindPetActionInfo', count=4, confidence=0.80, sample='function ZGV.FindPetActionInfo(goal)'},
  },
  ['IsActionable'] = {
    {name='IsActionable', count=1, confidence=0.20, sample='function Goal:IsActionable()'},
  },
  ['NeedsTranslation'] = {
    {name='NeedsTranslation', count=2, confidence=0.40, sample='function Goal:NeedsTranslation()'},
  },
  ['AutoTranslate'] = {
    {name='AutoTranslate', count=2, confidence=0.40, sample='function Goal:AutoTranslate()'},
  },
  ['GetCurrencyProgress'] = {
    {name='GetCurrencyProgress', count=2, confidence=0.40, sample='function Goal:GetCurrencyProgress(brief,complete)'},
  },
  ['GoalRecipe'] = {
    {name='GoalRecipe', count=3, confidence=0.60, sample='self.recipedata,errortype = ZGV.Professions:GoalRecipe(self.skill,self.spellid)'},
  },
  ['GetItemReagentQualityByItemInfo'] = {
    {name='C_TradeSkillUI.GetItemReagentQualityByItemInfo', count=1, confidence=0.20, sample='reagentquality = C_TradeSkillUI.GetItemReagentQualityByItemInfo(self.targetid )'},
  },
  ['CreateAtlasMarkupWithAtlasSize'] = {
    {name='CreateAtlasMarkupWithAtlasSize', count=1, confidence=0.20, sample='local atlas = CreateAtlasMarkupWithAtlasSize(("Professions-ChatIcon-Quality-Tier%d"):format(reagentquality),nil,nil,nil,nil,nil,0.4*ZGV.db.profile.framescale)'},
  },
  ['GetString'] = {
    {name='GetString', count=1, confidence=0.20, sample='function Goal:GetString()'},
  },
  ['GetNextStep'] = {
    {name='GetNextStep', count=6, confidence=1.00, sample='step=step:GetNextStep()'},
  },
  ['MRM'] = {
    {name='MRM', count=5, confidence=1.00, sample='self.macrosrc = self.macrosrc .."\n/run ZGV:MRM():CG("..self.parentStep.num..","..self.num..")"'},
  },
  ['CG'] = {
    {name='CG', count=2, confidence=0.40, sample='self.macrosrc = self.macrosrc .."\n/run ZGV:MRM():CG("..self.parentStep.num..","..self.num..")"'},
  },
  ['GetNearestTaxiInZone'] = {
    {name='GetNearestTaxiInZone', count=2, confidence=0.40, sample='local npc = LibRover:GetNearestTaxiInZone()'},
  },
  ['SetMacroSpell'] = {
    {name='SetMacroSpell', count=1, confidence=0.20, sample='if self.macrospell then SetMacroSpell(macro,getSpellName(self.macrospell)) end'},
  },
  ['SetMacroItem'] = {
    {name='SetMacroItem', count=1, confidence=0.20, sample='if self.macroitem then SetMacroItem(macro,ZGV:GetItemInfo(self.macroitem)) end'},
  },
  ['GetIndentChildren'] = {
    {name='GetIndentChildren', count=2, confidence=0.40, sample='function Goal:GetIndentChildren()'},
  },
  ['CanBeIndentHidden'] = {
    {name='CanBeIndentHidden', count=3, confidence=0.60, sample='function Goal:CanBeIndentHidden()'},
  },
  ['IsModifiedClick'] = {
    {name='IsModifiedClick', count=6, confidence=1.00, sample='if IsModifiedClick("DRESSUP") and self.itemid and IsDressableItem("item:"..self.itemid) then'},
  },
  ['IsDressableItem'] = {
    {name='IsDressableItem', count=2, confidence=0.40, sample='if IsModifiedClick("DRESSUP") and self.itemid and IsDressableItem("item:"..self.itemid) then'},
  },
  ['DressUpItemLink'] = {
    {name='DressUpItemLink', count=1, confidence=0.20, sample='DressUpItemLink("item:"..self.itemid)'},
  },
  ['FindTravelPath'] = {
    {name='FindTravelPath', count=11, confidence=1.00, sample='ZGV.Pointer:FindTravelPath(way)'},
  },
  ['CycleWaypointTo'] = {
    {name='CycleWaypointTo', count=8, confidence=1.00, sample='self.parentStep:CycleWaypointTo(self.num)'},
  },
  ['SetWaypointToGoal'] = {
    {name='SetWaypointToGoal', count=2, confidence=0.40, sample='ZGV.Pointer:SetWaypointToGoal(self)'},
  },
  ['FakeCompleteGoal'] = {
    {name='FakeCompleteGoal', count=3, confidence=0.60, sample='ZGV:FakeCompleteGoal(self,true)'},
  },
  ['TrackQuest'] = {
    {name='TrackQuest', count=4, confidence=0.80, sample='ZGV:TrackQuest(self.questid)'},
  },
  ['PointToQuest'] = {
    {name='PointToQuest', count=3, confidence=0.60, sample='--self:PointToQuest(self.questid)  -- ONLY point to 'goto' coords now. 2014-09-02 14:34:42 sinus'},
  },
  ['ShareToChat'] = {
    {name='ShareToChat', count=4, confidence=0.80, sample='self:ShareToChat(ZGV.db.profile.share_target or "SAY","brand","withtips")'},
  },
  ['FindNPC'] = {
    {name='FindNPC', count=8, confidence=1.00, sample='ZGV.WhoWhere:FindNPC(self.npc)'},
  },
  ['Click'] = {
    {name='Click', count=46, confidence=1.00, sample='ZGV.actionbuttons[self.num]:Click()'},
  },
  ['IsInlineTravel'] = {
    {name='IsInlineTravel', count=7, confidence=1.00, sample='function Goal:IsInlineTravel()'},
  },
  ['GetTextForSharing'] = {
    {name='GetTextForSharing', count=3, confidence=0.60, sample='function Goal:GetTextForSharing(withtip)'},
  },
  ['GetTextForSharingWithAllTips'] = {
    {name='GetTextForSharingWithAllTips', count=2, confidence=0.40, sample='function Goal:GetTextForSharingWithAllTips()'},
  },
  ['IsInRaid'] = {
    {name='IsInRaid', count=93, confidence=1.00, sample='if target=="RAID" and not IsInRaid() then ZGV:Error(ERR_NOT_IN_RAID) return end'},
  },
  ['GetLFGDungeonInfo'] = {
    {name='GetLFGDungeonInfo', count=2, confidence=0.40, sample='name, typeID, subtypeID, minLevel, maxLevel, recLevel, minRecLevel, maxRecLevel, expansionLevel, groupID, textureFilename, difficulty, maxPlayers, description, isHoliday, bonusRepAmount, minPlayers, isTimeWalker, name2, min_ilevel  = GetLFGDungeonInfo(id)'},
  },
  ['Get'] = {
    {name='Get', count=3, confidence=0.60, sample='function Dungeons:Get(id)'},
  },
  ['GetMaxLevelForLatestExpansion'] = {
    {name='GetMaxLevelForLatestExpansion', count=1, confidence=0.20, sample='Dungeons.MaxLevelForLatestExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()==1 and 70 or 60) or (GetMaxLevelForLatestExpansion and GetMaxLevelForLatestExpansion()) or 60'},
  },
  ['HighlightTaxiDestination'] = {
    {name='HighlightTaxiDestination', count=2, confidence=0.40, sample='Pointer:HighlightTaxiDestination()'},
  },
  ['HighlightFlightMapDestination'] = {
    {name='HighlightFlightMapDestination', count=4, confidence=0.80, sample='Pointer:HighlightFlightMapDestination()'},
  },
  ['LoadSavedPoints'] = {
    {name='LoadSavedPoints', count=2, confidence=0.40, sample='Pointer:LoadSavedPoints()'},
  },
  ['GetCurrentMapContinent'] = {
    {name='GetCurrentMapContinent', count=13, confidence=1.00, sample='local cont = ZGV:GetCurrentMapContinent()'},
    {name='ZGV.GetCurrentMapContinent', count=4, confidence=0.80, sample='function ZGV.GetCurrentMapContinent()'},
  },
  ['GetAllTaxiNodes'] = {
    {name='C_TaxiMap.GetAllTaxiNodes', count=3, confidence=0.60, sample='for _,tnode in ipairs(C_TaxiMap.GetAllTaxiNodes(cont)) do'},
  },
  ['NumTaxiNodes'] = {
    {name='NumTaxiNodes', count=16, confidence=1.00, sample='for i=1,NumTaxiNodes() do'},
  },
  ['TaxiNodePosition'] = {
    {name='TaxiNodePosition', count=7, confidence=1.00, sample='local x,y=TaxiNodePosition(i)'},
  },
  ['TaxiNodeGetType'] = {
    {name='TaxiNodeGetType', count=9, confidence=1.00, sample='if TaxiNodeGetType(i)~="NONE" and (taxinode.taxitag==tag or TaxiNodeName(i):find(taxinode.name,0,true)) then'},
  },
  ['TaxiNodeName'] = {
    {name='TaxiNodeName', count=16, confidence=1.00, sample='if TaxiNodeGetType(i)~="NONE" and (taxinode.taxitag==tag or TaxiNodeName(i):find(taxinode.name,0,true)) then'},
  },
  ['PointTo'] = {
    {name='PointTo', count=4, confidence=0.80, sample='TaxiFrame.ZygorGuidesViewer_TaxiMarker:PointTo(pin,pin)'},
  },
  ['TakeTaxiNode'] = {
    {name='TakeTaxiNode', count=6, confidence=1.00, sample='self:Debug("Would TakeTaxiNode(%d) #%d to %s (tag %s)",id,taxislot,TaxiNodeName(taxislot),taxinode.taxitag)'},
  },
  ['IsAltKeyDown'] = {
    {name='IsAltKeyDown', count=15, confidence=1.00, sample='if ZGV.db.profile.autotaxi and id and ZGV.Frame:IsVisible() and not IsAltKeyDown() then'},
  },
  ['Dismount'] = {
    {name='Dismount', count=3, confidence=0.60, sample='Dismount()'},
  },
  ['GetNumRoutes'] = {
    {name='GetNumRoutes', count=10, confidence=1.00, sample='GetNumRoutes(id) -- dummy call! but needed in 6.1 for TakeTaxiNode to work. WTF Blizzard...'},
  },
  ['RecordLastTaxiSlots'] = {
    {name='RecordLastTaxiSlots', count=3, confidence=0.60, sample='ZGV.LibTaxi:RecordLastTaxiSlots()'},
  },
  ['PointToCoords'] = {
    {name='PointToCoords', count=3, confidence=0.60, sample='FlightMapFrame.ZygorGuidesViewer_TaxiMarker:PointToCoords(FlightMapFrame,0.87,0.16)'},
  },
  ['EnumerateActive'] = {
    {name='EnumerateActive', count=8, confidence=1.00, sample='for pin,_ in FlightMapFrame.pinPools.FlightMap_FlightPointPinTemplate:EnumerateActive() do'},
  },
  ['GetTaxiMapID'] = {
    {name='GetTaxiMapID', count=1, confidence=0.20, sample='local mapID = GetTaxiMapID()'},
  },
  ['GetMapInfoAtPosition'] = {
    {name='C_Map.GetMapInfoAtPosition', count=2, confidence=0.40, sample='local smapid = sx and mapID and (C_Map.GetMapInfoAtPosition(mapID, sx,sy) or {}).mapID or taxinodestart.m'},
  },
  ['IsSet'] = {
    {name='FlagsUtil.IsSet', count=1, confidence=0.20, sample='if smapid and emapid and smapid~=emapid --[[and FlagsUtil.IsSet(subMapInfo.flags, Enum.UIMapFlag.FlightMapAutoZoom) --]] then'},
  },
  ['GetMapCenterOnMap'] = {
    {name='MapUtil.GetMapCenterOnMap', count=1, confidence=0.20, sample='local centerX, centerY = MapUtil.GetMapCenterOnMap(emapid, mapID);'},
  },
  ['ZoomFlightMapToCoords'] = {
    {name='ZoomFlightMapToCoords', count=2, confidence=0.40, sample='self:ZoomFlightMapToCoords(centerX,centerY)'},
  },
  ['ZoomOut'] = {
    {name='ZoomOut', count=2, confidence=0.40, sample='FlightMapFrame:ZoomOut()'},
  },
  ['InstantPanAndZoom'] = {
    {name='InstantPanAndZoom', count=1, confidence=0.20, sample='--FlightMapFrame:InstantPanAndZoom(FlightMapFrame:GetScaleForMaxZoom(), x, y, ignoreScaleRatio);'},
  },
  ['GetScaleForMaxZoom'] = {
    {name='GetScaleForMaxZoom', count=1, confidence=0.20, sample='--FlightMapFrame:InstantPanAndZoom(FlightMapFrame:GetScaleForMaxZoom(), x, y, ignoreScaleRatio);'},
  },
  ['PanAndZoomTo'] = {
    {name='PanAndZoomTo', count=1, confidence=0.20, sample='ZGV:ScheduleTimer(function() FlightMapFrame:PanAndZoomTo(x, y) end, 0.2)'},
  },
  ['ZoomIn'] = {
    {name='ZoomIn', count=1, confidence=0.20, sample='ZGV:ScheduleTimer(function() FlightMapFrame:ZoomIn() end, 0.4) -- in case PanAndZoomTo didn't start zooming'},
  },
  ['GetCanvas'] = {
    {name='GetCanvas', count=5, confidence=1.00, sample='if not self.mapLinePool then self.mapLinePool = CreateFramePool("FRAME", WorldMapFrame:GetCanvas(), "ZygorGuidesViewer_MapLineTemplate",mapLinePoolResetter) end'},
  },
  ['CHAINC'] = {
    {name='CHAINC', count=11, confidence=1.00, sample='self.OverlayFrame = CHAINC(CreateFrame("FRAME","ZygorGuidesViewerPointerOverlay",worldMap_TargetFrame))'},
  },
  ['IsCorpseArrowNeeded'] = {
    {name='IsCorpseArrowNeeded', count=5, confidence=1.00, sample='ZGV:ScheduleRepeatingTimer(function()  if Pointer:IsCorpseArrowNeeded() then Pointer:DoCorpseCheck() end  end,3.0)'},
  },
  ['DoCorpseCheck'] = {
    {name='DoCorpseCheck', count=7, confidence=1.00, sample='ZGV:ScheduleRepeatingTimer(function()  if Pointer:IsCorpseArrowNeeded() then Pointer:DoCorpseCheck() end  end,3.0)'},
  },
  ['SetMinimapPlayerTexture'] = {
    {name='SetMinimapPlayerTexture', count=2, confidence=0.40, sample='if ZGV.db.profile.custom_minimap_arrow then self:SetMinimapPlayerTexture() end  -- 2022-11-07: option not implemented. Kinda on purpose, at this point.'},
  },
  ['GetMapInfo'] = {
    {name='ZGV.GetMapInfo', count=26, confidence=1.00, sample='local mapinfo = ZGV.GetMapInfo(mapid)'},
    {name='C_Map.GetMapInfo', count=19, confidence=1.00, sample='local info = C_Map.GetMapInfo(map)'},
    {name='GetMapInfo', count=2, confidence=0.40, sample='s = s .. "GetMapInfo() = N/I\n"--..konkat({GetMapInfo()},4).."\n"'},
  },
  ['GetMapChildren'] = {
    {name='ZGV.GetMapChildren', count=6, confidence=1.00, sample='local valid_children = ZGV.GetMapChildren(mapid)'},
  },
  ['SetIcon'] = {
    {name='SetIcon', count=113, confidence=1.00, sample='for k,w in pairs(ZGV.Pointer.waypoints) do w:SetIcon() end'},
  },
  ['FixMapLevel'] = {
    {name='Pointer.FixMapLevel', count=1, confidence=0.20, sample='function Pointer.FixMapLevel()'},
  },
  ['GetNumDungeonMapLevels'] = {
    {name='GetNumDungeonMapLevels', count=3, confidence=0.60, sample='numlevels = GetNumDungeonMapLevels()'},
  },
  ['SetMapToCurrentZone'] = {
    {name='SetMapToCurrentZone', count=5, confidence=1.00, sample='SetMapToCurrentZone()'},
  },
  ['SetMapByID'] = {
    {name='SetMapByID', count=6, confidence=1.00, sample='SetMapByID(_mm) SetDungeonMapLevel(_ff)'},
  },
  ['SetDungeonMapLevel'] = {
    {name='SetDungeonMapLevel', count=2, confidence=0.40, sample='SetMapByID(_mm) SetDungeonMapLevel(_ff)'},
  },
  ['SetBasePhase'] = {
    {name='SetBasePhase', count=2, confidence=0.40, sample='function Pointer:SetBasePhase(map)'},
  },
  ['SanitizePhase'] = {
    {name='SanitizePhase', count=8, confidence=1.00, sample='function Pointer:SanitizePhase(map)'},
  },
  ['MakeMarkerFrames'] = {
    {name='MakeMarkerFrames', count=3, confidence=0.60, sample='Pointer:MakeMarkerFrames(waypoint,"Ant")'},
  },
  ['SetWaypoint_ant'] = {
    {name='SetWaypoint_ant', count=2, confidence=0.40, sample='function Pointer:SetWaypoint_ant (m,x,y,num,icon, ant)  -- ant is here for one-time lookup! don't reuse!!'},
  },
  ['UpdateWorldMapIcon'] = {
    {name='UpdateWorldMapIcon', count=8, confidence=1.00, sample='waypoint:UpdateWorldMapIcon(lm)'},
  },
  ['UpdateMiniMapIcon'] = {
    {name='UpdateMiniMapIcon', count=8, confidence=1.00, sample='waypoint:UpdateMiniMapIcon(lm)'},
  },
  ['UpdateTaxiMapIcon'] = {
    {name='UpdateTaxiMapIcon', count=4, confidence=0.80, sample='waypoint:UpdateTaxiMapIcon()'},
  },
  ['ClearWaypoints_ant'] = {
    {name='ClearWaypoints_ant', count=4, confidence=0.80, sample='function Pointer:ClearWaypoints_ant(active)'},
  },
  ['RemoveMinimapIcon'] = {
    {name='RemoveMinimapIcon', count=6, confidence=1.00, sample='HBDPins:RemoveMinimapIcon(Pointer,waypoint.frame_minimap)'},
  },
  ['GetMapMarker'] = {
    {name='GetMapMarker', count=2, confidence=0.40, sample='local waypoint = self:GetMapMarker (m,x,y,data)'},
  },
  ['GetTitle'] = {
    {name='GetTitle', count=11, confidence=1.00, sample='waypoint.frame_worldmap.label:SetText("   " .. (waypoint.goal and waypoint.goal.num..". " or "")  ..  waypoint:GetTitle()  ..  ("  %.1f,%.1f"):format(waypoint.x*100,waypoint.y*100))'},
  },
  ['ShowArrow'] = {
    {name='ShowArrow', count=14, confidence=1.00, sample='self:ShowArrow(waypoint)'},
  },
  ['SoilData'] = {
    {name='SoilData', count=4, confidence=0.80, sample='Pointer.Provider:SoilData()'},
  },
  ['ShowWaiting'] = {
    {name='ShowWaiting', count=7, confidence=1.00, sample='function Pointer:ShowWaiting(phase)'},
  },
  ['GetUnusedMarker'] = {
    {name='GetUnusedMarker', count=2, confidence=0.40, sample='local waypoint = self:GetUnusedMarker()'},
  },
  ['BoatLockDisable'] = {
    {name='BoatLockDisable', count=6, confidence=1.00, sample='LibRover:BoatLockDisable("manual")'},
  },
  ['RemoveWorldMapIcon'] = {
    {name='RemoveWorldMapIcon', count=2, confidence=0.40, sample='HBDPins:RemoveWorldMapIcon(Pointer,waypoint.frame_worldmap)'},
  },
  ['RemoveWaypointFromSets'] = {
    {name='RemoveWaypointFromSets', count=2, confidence=0.40, sample='if waypoint.in_set then self:RemoveWaypointFromSets(waypoint) end'},
  },
  ['HideArrow'] = {
    {name='HideArrow', count=4, confidence=0.80, sample='if self.ArrowFrame.waypoint==waypoint then self:HideArrow() end'},
  },
  ['ClearSet'] = {
    {name='ClearSet', count=24, confidence=1.00, sample='self:ClearSet("route")'},
  },
  ['ResetMinimapZoom'] = {
    {name='ResetMinimapZoom', count=2, confidence=0.40, sample='self:ResetMinimapZoom() -- to perhaps reset the zoom'},
  },
  ['IsMouseButtonDown'] = {
    {name='IsMouseButtonDown', count=5, confidence=1.00, sample='if not IsMouseButtonDown() and self.ArrowFrame.dragging then'},
  },
  ['GetWorldCoordinatesFromZone'] = {
    {name='GetWorldCoordinatesFromZone', count=12, confidence=1.00, sample='local ix,iy,inst = HBD:GetWorldCoordinatesFromZone(tonumber(waypoint.x), tonumber(waypoint.y), waypoint.m)'},
  },
  ['AddMinimapIconWorld'] = {
    {name='AddMinimapIconWorld', count=6, confidence=1.00, sample='HBDPins:AddMinimapIconWorld(Pointer, waypoint.frame_minimap, tonumber(inst), tonumber(ix), tonumber(iy), waypoint.showonedge)'},
  },
  ['CreateFromCoordinates'] = {
    {name='UiMapPoint.CreateFromCoordinates', count=1, confidence=0.20, sample='local uiMapPoint = UiMapPoint.CreateFromCoordinates(waypoint.m, waypoint.x, waypoint.y);'},
  },
  ['SetUserWaypoint'] = {
    {name='C_Map.SetUserWaypoint', count=1, confidence=0.20, sample='C_Map.SetUserWaypoint(uiMapPoint);'},
  },
  ['SetSuperTrackedUserWaypoint'] = {
    {name='C_SuperTrack.SetSuperTrackedUserWaypoint', count=1, confidence=0.20, sample='C_SuperTrack.SetSuperTrackedUserWaypoint(true);'},
  },
  ['GetWaypointBearings'] = {
    {name='GetWaypointBearings', count=1, confidence=0.20, sample='function Pointer:GetWaypointBearings(way)'},
  },
  ['GetChildren'] = {
    {name='GetChildren', count=17, confidence=1.00, sample='marker.frame_minimap.isZygorWaypoint=true -- marking the marker to be protected by substituted Minimap:GetChildren() call.'},
  },
  ['GetFrameStrata'] = {
    {name='GetFrameStrata', count=16, confidence=1.00, sample='--print(markertype=="Ant" and ("MEDIUM" and WorldMapFrame:GetFrameStrata() ~= "HIGH") or "HIGH")'},
  },
  ['POIs'] = {
    {name='POIs', count=1, confidence=0.20, sample='marker.frame_worldmap:SetFrameLevel((markertype=="Ant" and 608 or 609)+WorldMapFrame:GetFrameLevel())  -- built-in POIs (taxis, pet trainers) are 500-ish, so 600 should suffice.'},
  },
  ['IsSizeMax'] = {
    {name='IsSizeMax', count=1, confidence=0.20, sample='if win:IsSizeMax() then'},
  },
  ['SetTexelSnappingBias'] = {
    {name='SetTexelSnappingBias', count=4, confidence=0.80, sample='mini_ico:SetTexelSnappingBias(0)'},
  },
  ['SetSnapToPixelGrid'] = {
    {name='SetSnapToPixelGrid', count=6, confidence=1.00, sample='mini_ico:SetSnapToPixelGrid(false)'},
  },
  ['GetPinFrameLevelsManager'] = {
    {name='GetPinFrameLevelsManager', count=1, confidence=0.20, sample='self.frame_worldmap:SetFrameLevel(self.type=="ant" and 3000 or 3001)	-- self:GetMap():GetPinFrameLevelsManager():GetValidFrameLevel(self.pinFrameLevelType, self.pinFrameLevelIndex);'},
  },
  ['GetValidFrameLevel'] = {
    {name='GetValidFrameLevel', count=1, confidence=0.20, sample='self.frame_worldmap:SetFrameLevel(self.type=="ant" and 3000 or 3001)	-- self:GetMap():GetPinFrameLevelsManager():GetValidFrameLevel(self.pinFrameLevelType, self.pinFrameLevelIndex);'},
  },
  ['Mxlt'] = {
    {name='Mxlt', count=14, confidence=1.00, sample='local x,y = Mxlt(self.m,self.x,self.y,map,true)'},
    {name='MapCoords.Mxlt', count=1, confidence=0.20, sample='function MapCoords.Mxlt(map1,x,y,map2,oob_ok,creative)'},
  },
  ['AddWorldMapIconWorld'] = {
    {name='AddWorldMapIconWorld', count=2, confidence=0.40, sample='HBDPins:AddWorldMapIconWorld(Pointer, self.frame_worldmap, instanceID, xCoord, yCoord, HBD_PINS_WORLDMAP_SHOW_WORLD)'},
  },
  ['ZGV_MapsOnDifferentFloors'] = {
    {name='ZGV_MapsOnDifferentFloors', count=4, confidence=0.80, sample='local alpha_p1 = ZGV_MapsOnDifferentFloors(map,p1m) and 0.3 or 1.0'},
  },
  ['Astrolabe_PlaceIconOnWorldMap2'] = {
    {name='Astrolabe_PlaceIconOnWorldMap2', count=2, confidence=0.40, sample='local function Astrolabe_PlaceIconOnWorldMap2( taxiBgFrame, icon, taximapID, mapID, mapFloor, xPos, yPos )'},
  },
  ['TranslateZoneCoordinates'] = {
    {name='TranslateZoneCoordinates', count=6, confidence=1.00, sample='local nX, nY = HBD:TranslateZoneCoordinates(xPos, yPos, mapID, mapFloor, taximapID, 0)'},
  },
  ['GetTexture'] = {
    {name='GetTexture', count=45, confidence=1.00, sample='Pointer:Debug("No map for taxi! texture is '%s'",taxitextureframe:GetTexture())'},
  },
  ['GetArrowTitle'] = {
    {name='GetArrowTitle', count=6, confidence=1.00, sample='function markerproto:GetArrowTitle()'},
  },
  ['ToString'] = {
    {name='ToString', count=4, confidence=0.80, sample='function markerproto:ToString()'},
  },
  ['FormatDistance'] = {
    {name='FormatDistance', count=2, confidence=0.40, sample='local function FormatDistance(dist)'},
    {name='ZGV.FormatDistance', count=1, confidence=0.20, sample='else  return ZGV.FormatDistance(dist)'},
  },
  ['CreateArrowFrame'] = {
    {name='CreateArrowFrame', count=2, confidence=0.40, sample='function Pointer:CreateArrowFrame()'},
  },
  ['EnableMouseWheel'] = {
    {name='EnableMouseWheel', count=38, confidence=1.00, sample='self.ArrowFrame:EnableMouseWheel(true)'},
  },
  ['SetPushedTexture'] = {
    {name='SetPushedTexture', count=70, confidence=1.00, sample=':SetPushedTexture("Interface\\Buttons\\CheckButtonHilight")'},
  },
  ['SetBlendMode'] = {
    {name='SetBlendMode', count=127, confidence=1.00, sample='self.ArrowFrame.ArrowIcon:GetPushedTexture():SetBlendMode("ADD")'},
  },
  ['RegisterAttributeDriver'] = {
    {name='RegisterAttributeDriver', count=5, confidence=1.00, sample='RegisterAttributeDriver(Pointer.ArrowFrame, "state-combathide", "[combat] hide; show");'},
  },
  ['UnregisterAttributeDriver'] = {
    {name='UnregisterAttributeDriver', count=5, confidence=1.00, sample='UnregisterAttributeDriver(Pointer.ArrowFrame, "state-combathide");'},
  },
  ['ResetWaypointIfOrphaned'] = {
    {name='ResetWaypointIfOrphaned', count=2, confidence=0.40, sample='function Pointer:ResetWaypointIfOrphaned()'},
  },
  ['CycleWaypoint'] = {
    {name='CycleWaypoint', count=8, confidence=1.00, sample='ZGV.CurrentStep:CycleWaypoint(nil,nil,"orphaned")'},
  },
  ['GetFont'] = {
    {name='GetFont', count=65, confidence=1.00, sample='local f=self.ArrowFrame.title:GetFont()'},
  },
  ['SetZoom'] = {
    {name='SetZoom', count=5, confidence=1.00, sample='Minimap:SetZoom(0)'},
  },
  ['AddTexture'] = {
    {name='AddTexture', count=7, confidence=1.00, sample='if line.icon then tooltip:AddTexture(line.icon) end'},
  },
  ['MAPBUT'] = {
    {name='ZGV.MAPBUT', count=1, confidence=0.20, sample='tip:AddLine("|cffff0000DEBUG:|r |cffddff00Ctrl-Alt-click|r to save map button to ZGV.MAPBUT (+Shift to Spoo)")'},
  },
  ['AnimateAnts'] = {
    {name='AnimateAnts', count=9, confidence=1.00, sample='Pointer:AnimateAnts()'},
  },
  ['GetDistanceToIcon'] = {
    {name='GetDistanceToIcon', count=2, confidence=0.40, sample='local dist,x,y = HBDPins:GetDistanceToIcon(self)  -- ADDED by our own HBDragons.lua'},
  },
  ['IsInInstance'] = {
    {name='IsInInstance', count=32, confidence=1.00, sample='if not dist --[[or IsInInstance()--]] then self.icon:Hide() self.arrow:Hide() return end'},
  },
  ['IsMinimapIconOnEdge'] = {
    {name='IsMinimapIconOnEdge', count=2, confidence=0.40, sample='local edge = HBDPins:IsMinimapIconOnEdge(self)'},
  },
  ['GetDirectionToIcon'] = {
    {name='GetDirectionToIcon', count=3, confidence=0.60, sample='local angle = HBDPins:GetDirectionToIcon(self)'},
  },
  ['GetZoom'] = {
    {name='GetZoom', count=6, confidence=1.00, sample='local getzoom = Minimap:GetZoom()'},
  },
  ['GetZoomLevels'] = {
    {name='GetZoomLevels', count=2, confidence=0.40, sample='for i=1,Minimap:GetZoomLevels()-1 do'},
  },
  ['Debug_StartDragging'] = {
    {name='Debug_StartDragging', count=1, confidence=0.20, sample='Pointer:Debug_StartDragging(self.waypoint)'},
  },
  ['Debug_RemovePointFromPath'] = {
    {name='Debug_RemovePointFromPath', count=1, confidence=0.20, sample='Pointer:Debug_RemovePointFromPath(self.waypoint)'},
  },
  ['ShowNodeDebugMenu'] = {
    {name='ZGV.LibRover.ShowNodeDebugMenu', count=1, confidence=0.20, sample='ZGV.LibRover.ShowNodeDebugMenu(self,self.waypoint.pathnode)'},
    {name='Lib.ShowNodeDebugMenu', count=1, confidence=0.20, sample='function Lib.ShowNodeDebugMenu(parent,node)'},
  },
  ['DoSpoo'] = {
    {name='DoSpoo', count=1, confidence=0.20, sample='DoSpoo(ZGV.MAPBUT)'},
  },
  ['GetFloorByMapID'] = {
    {name='GetFloorByMapID', count=6, confidence=1.00, sample='local floor = LibRover:GetFloorByMapID(map)'},
  },
  ['OnMouseWheel'] = {
    {name='OnMouseWheel', count=6, confidence=1.00, sample='function Pointer.frame_worldmap_functions.OnMouseWheel(self,delta,...)'},
  },
  ['ClearMapLines'] = {
    {name='ClearMapLines', count=2, confidence=0.40, sample='function Pointer:ClearMapLines()'},
  },
  ['UpdateMapLines'] = {
    {name='UpdateMapLines', count=2, confidence=0.40, sample='function Pointer:UpdateMapLines()'},
  },
  ['DrawLineZ'] = {
    {name='DrawLineZ', count=4, confidence=0.80, sample='local function DrawLineZ(way1,way2,thickness,r,g,b,a,phase)'},
  },
  ['DrawLine'] = {
    {name='DrawLine', count=23, confidence=1.00, sample='DrawLine(line,wmfc,'},
  },
  ['AddMaskTexture'] = {
    {name='AddMaskTexture', count=18, confidence=1.00, sample='--line:AddMaskTexture(self.MinimapOverlayFrame.mask)'},
  },
  ['SetThickness'] = {
    {name='SetThickness', count=8, confidence=1.00, sample='line.Fill:SetThickness(thickness)'},
  },
  ['IsPlaying'] = {
    {name='IsPlaying', count=33, confidence=1.00, sample='if not line.ScrollAnim:IsPlaying() then line.ScrollAnim:Play() end'},
  },
  ['SetStartPoint'] = {
    {name='SetStartPoint', count=11, confidence=1.00, sample='line.FillScroll1:SetStartPoint(line.Fill:GetStartPoint())'},
  },
  ['GetStartPoint'] = {
    {name='GetStartPoint', count=1, confidence=0.20, sample='line.FillScroll1:SetStartPoint(line.Fill:GetStartPoint())'},
  },
  ['SetEndPoint'] = {
    {name='SetEndPoint', count=12, confidence=1.00, sample='line.FillScroll1:SetEndPoint(line.Fill:GetEndPoint())'},
  },
  ['GetEndPoint'] = {
    {name='GetEndPoint', count=1, confidence=0.20, sample='line.FillScroll1:SetEndPoint(line.Fill:GetEndPoint())'},
  },
  ['DrawLineFrame'] = {
    {name='DrawLineFrame', count=2, confidence=0.40, sample='DrawLineFrame(line,line.Fill,self.MinimapOverlayFrame,'},
  },
  ['DrawLineZygor'] = {
    {name='DrawLineZygor', count=2, confidence=0.40, sample='DrawLineZygor(line,self.MinimapOverlayFrame,'},
  },
  ['ArrowFrame_OnEvent'] = {
    {name='Pointer.ArrowFrame_OnEvent', count=1, confidence=0.20, sample='function Pointer.ArrowFrame_OnEvent(self,event,...)'},
  },
  ['ArrowFrameControl_OnUpdate'] = {
    {name='Pointer.ArrowFrameControl_OnUpdate', count=1, confidence=0.20, sample='function Pointer.ArrowFrameControl_OnUpdate(self,elapsed)'},
  },
  ['ArrowFrame_OnUpdate_Common'] = {
    {name='Pointer.ArrowFrame_OnUpdate_Common', count=2, confidence=0.40, sample='if Pointer.ArrowFrame then Pointer.ArrowFrame_OnUpdate_Common(Pointer.ArrowFrame,arrowctrl_elapsed) end'},
  },
  ['ArrowFrame_HideSpellArrow'] = {
    {name='Pointer.ArrowFrame_HideSpellArrow', count=3, confidence=0.60, sample='if icon and icon:IsVisible() and not ZGV.Pointer.ArrowFrame:IsVisible() then Pointer.ArrowFrame_HideSpellArrow(self) end'},
  },
  ['CalculateDirectionTiers'] = {
    {name='Pointer.CalculateDirectionTiers', count=2, confidence=0.40, sample='function Pointer.CalculateDirectionTiers(perc,t1,t2,t3,t4)'},
  },
  ['GetDefaultStepDist'] = {
    {name='GetDefaultStepDist', count=9, confidence=1.00, sample='function Pointer:GetDefaultStepDist(waypoint)'},
  },
  ['TableFind'] = {
    {name='TableFind', count=1, confidence=0.20, sample='local function TableFind(table,val)  -- unused, yeah'},
  },
  ['TableFind2'] = {
    {name='TableFind2', count=1, confidence=0.20, sample='local function TableFind2(table,val1,val2)'},
  },
  ['L_or_nil'] = {
    {name='L_or_nil', count=1, confidence=0.20, sample='local function L_or_nil(id)'},
  },
  ['GetPreciseFloorCrossingText'] = {
    {name='GetPreciseFloorCrossingText', count=1, confidence=0.20, sample='--local function GetPreciseFloorCrossingText(map_from,map_to)'},
  },
  ['PickupInventoryItem'] = {
    {name='PickupInventoryItem', count=1, confidence=0.20, sample='PickupInventoryItem(slot) --Pickup the quest item'},
  },
  ['RemoveItem'] = {
    {name='RemoveItem', count=2, confidence=0.40, sample='RemoveItem(slot)'},
  },
  ['EquipItemByName'] = {
    {name='C_Item.EquipItemByName', count=3, confidence=0.60, sample='--C_Item.EquipItemByName(previous)'},
  },
  ['ArrowFrame_ShowSpellArrow'] = {
    {name='Pointer.ArrowFrame_ShowSpellArrow', count=2, confidence=0.40, sample='function Pointer.ArrowFrame_ShowSpellArrow(self,waypoint)'},
  },
  ['GetCooldownWithoutGCD'] = {
    {name='GetCooldownWithoutGCD', count=5, confidence=1.00, sample='local cooltime,cooldur,coolactive = LibRover:GetCooldownWithoutGCD((spell and "spell") or (item and "item"),item or spell)'},
  },
  ['GetToyInfo'] = {
    {name='C_ToyBox.GetToyInfo', count=2, confidence=0.40, sample='_,name,texture,_ = C_ToyBox.GetToyInfo(item)'},
  },
  ['Mangle'] = {
    {name='Mangle', count=2, confidence=0.40, sample='local angle,dist = Mangle(pm,px,py,waypoint.m,waypoint.x,waypoint.y)'},
    {name='MapCoords.Mangle', count=1, confidence=0.20, sample='function MapCoords.Mangle(...)'},
  },
  ['SetCooldown'] = {
    {name='SetCooldown', count=2, confidence=0.40, sample='icon.cooldown:SetCooldown(cooltime,cooldur,coolactive and 1 or 0)'},
  },
  ['ShowNothing'] = {
    {name='ShowNothing', count=3, confidence=0.60, sample='self:ShowNothing()'},
  },
  ['ShowText'] = {
    {name='ShowText', count=6, confidence=1.00, sample='self:ShowText(pretext or arrivaltoytext or waypoint:GetArrowTitle() or waypoint:GetTitle())'},
  },
  ['PointToNextTimer'] = {
    {name='PointToNextTimer', count=2, confidence=0.40, sample='function Pointer:PointToNextTimer(elapsed)'},
  },
  ['PointToNextInPath'] = {
    {name='PointToNextInPath', count=5, confidence=1.00, sample='local newway = self:PointToNextInPath(waypoint.in_set)'},
  },
  ['CalculateSpeed'] = {
    {name='CalculateSpeed', count=2, confidence=0.40, sample='function Pointer:CalculateSpeed(elapsed,dist)'},
  },
  ['DoAudioCues'] = {
    {name='DoAudioCues', count=2, confidence=0.40, sample='function Pointer:DoAudioCues(targetangle,playerangle,dist)'},
  },
  ['GetUnitSpeed'] = {
    {name='GetUnitSpeed', count=7, confidence=1.00, sample='if GetUnitSpeed("player")==0 then laststoptime=t else lastmovetime=t end'},
  },
  ['PlaySoundFile'] = {
    {name='PlaySoundFile', count=8, confidence=1.00, sample='PlaySoundFile("Sound\\Doodad\\BoatDockedWarning.wav")'},
  },
  ['ShowWarning'] = {
    {name='ShowWarning', count=1, confidence=0.20, sample='if self.ArrowFrame.ShowWarning then self.ArrowFrame:ShowWarning() end'},
  },
  ['CalculateETA'] = {
    {name='CalculateETA', count=2, confidence=0.40, sample='function Pointer:CalculateETA(speed,dist,elapsed)'},
  },
  ['IsSwimming'] = {
    {name='IsSwimming', count=2, confidence=0.40, sample='spd = IsSwimming() and swimspd or (LibRover.maxspeedinzone[ZGV.CurrentMapID][1] * BASE_MOVEMENT_SPEED) -- *7 is for recalc from multiplier to yds/s  -- or max(mntspd,flyspd)'},
  },
  ['RestoreMapSettings'] = {
    {name='RestoreMapSettings', count=6, confidence=1.00, sample='ZGV.PointerMap:RestoreMapSettings()'},
  },
  ['SetNotice'] = {
    {name='SetNotice', count=3, confidence=0.60, sample='if Pointer.tmp_taxis_assumed then  ArrowFrame:SetNotice(L['pointer_arrow_noflightdata'])'},
  },
  ['ShouldShowPreview'] = {
    {name='ShouldShowPreview', count=6, confidence=1.00, sample='if ZGV.PointerMap:ShouldShowPreview() then -- enable preview on guides with no steps while inside valid instance'},
  },
  ['IsPreviewShown'] = {
    {name='IsPreviewShown', count=3, confidence=0.60, sample='if not ZGV.PointerMap:IsPreviewShown()  then'},
  },
  ['ShowInstance'] = {
    {name='ShowInstance', count=3, confidence=0.60, sample='ArrowFrame:ShowInstance()'},
  },
  ['HideInstance'] = {
    {name='HideInstance', count=3, confidence=0.60, sample='ArrowFrame:HideInstance()'},
  },
  ['ClearSets'] = {
    {name='ClearSets', count=2, confidence=0.40, sample='if not WorldMapFrame:IsVisible() and self.waypoints and #self.waypoints > 0 and not ZGV.Frame:IsVisible() then self:ClearSets() end -- Hide waypoints and ants if we are not looking at the world map.'},
  },
  ['GetCurrentMapContinentAndZone'] = {
    {name='GetCurrentMapContinentAndZone', count=1, confidence=0.20, sample='--if GetCurrentMapContinentAndZone()~=waypoint.c then end'},
  },
  ['ArrowFrame_OnClick'] = {
    {name='Pointer.ArrowFrame_OnClick', count=2, confidence=0.40, sample='Pointer.ArrowFrame_OnClick(nil,"RightButton") --***Is possible for it to not work if click goes up and down without OnUpdate running***'},
  },
  ['ZoneIsOutdoor'] = {
    {name='ZoneIsOutdoor', count=4, confidence=0.80, sample='--if ZoneIsOutdoor(waypoint.m) then errortxt,show_stairs=nil end  -- Don't warn about floors on outdoor maps. TODO: remove later.'},
    {name='Lib.ZoneIsOutdoor', count=2, confidence=0.40, sample='if (system and Lib.ZoneIsOutdoor(zoneid)) or (meta.flyable==true) then'},
  },
  ['ShowStairs'] = {
    {name='ShowStairs', count=4, confidence=0.80, sample='if ArrowFrame.ShowStairs then ArrowFrame:ShowStairs(going_up) end'},
  },
  ['IsOutdoors'] = {
    {name='IsOutdoors', count=1, confidence=0.20, sample='or	 (waypoint.pathnode.indoors and IsOutdoors())'},
  },
  ['BoatLockEnable'] = {
    {name='BoatLockEnable', count=3, confidence=0.60, sample='LibRover:BoatLockEnable("arrival")'},
  },
  ['ClearWaypoint'] = {
    {name='Pointer.ClearWaypoint', count=2, confidence=0.40, sample='Pointer.ClearWaypoint()'},
  },
  ['ShowShip'] = {
    {name='ShowShip', count=4, confidence=0.80, sample='ArrowFrame:ShowShip()'},
  },
  ['ShowArrived'] = {
    {name='ShowArrived', count=2, confidence=0.40, sample='ArrowFrame:ShowArrived()'},
  },
  ['GetNextInPath'] = {
    {name='GetNextInPath', count=5, confidence=1.00, sample='local nextway = self:GetNextInPath("route")'},
  },
  ['ShowError'] = {
    {name='ShowError', count=3, confidence=0.60, sample='ArrowFrame:ShowError()'},
  },
  ['ShowTraveling'] = {
    {name='ShowTraveling', count=3, confidence=0.60, sample='ArrowFrame:ShowTraveling(elapsed,angle,dist)'},
  },
  ['ColorGradient'] = {
    {name='ColorGradient', count=1, confidence=0.20, sample='local r,g,b = ColorGradient(perc, br, bg, bb, mr, mg, mb, gr, gg, gb)'},
  },
  ['ShowTaxi'] = {
    {name='ShowTaxi', count=2, confidence=0.40, sample='ArrowFrame:ShowTaxi()'},
  },
  ['CastingBarFrame_ApplyAlpha'] = {
    {name='CastingBarFrame_ApplyAlpha', count=1, confidence=0.20, sample='CastingBarFrame_ApplyAlpha(CBF, 1.0);'},
  },
  ['SetStatusBarColor'] = {
    {name='SetStatusBarColor', count=87, confidence=1.00, sample='CBF:SetStatusBarColor(0,1,0)'},
  },
  ['SetMinMaxValues'] = {
    {name='SetMinMaxValues', count=66, confidence=1.00, sample='CBF:SetMinMaxValues(0, CBF.maxValue);'},
  },
  ['GetCurStep'] = {
    {name='GetCurStep', count=2, confidence=0.40, sample='local step = ZGV.CurrentGuide and ZGV.CurrentGuide:GetCurStep()'},
  },
  ['ArrowFrame_OnMouseDown'] = {
    {name='Pointer.ArrowFrame_OnMouseDown', count=1, confidence=0.20, sample='function Pointer.ArrowFrame_OnMouseDown(frame,button)'},
  },
  ['QueueShowRouteMenu'] = {
    {name='QueueShowRouteMenu', count=5, confidence=1.00, sample='Pointer:QueueShowRouteMenu(Pointer.ArrowFrame)'},
  },
  ['ShowRouteMenu'] = {
    {name='ShowRouteMenu', count=2, confidence=0.40, sample='Pointer.ShowRouteMenuTimer = ZGV:ScheduleTimer(function() Pointer:ShowRouteMenu(arrowframe) end, 0.01)'},
  },
  ['GetBackdrop'] = {
    {name='GetBackdrop', count=7, confidence=1.00, sample='--local backdrop = DropDownList1:GetBackdrop()'},
  },
  ['GetCFG'] = {
    {name='GetCFG', count=30, confidence=1.00, sample='checked = function() return LibRover:GetCFG("avoid_portals") end,'},
  },
  ['Explain'] = {
    {name='Explain', count=2, confidence=0.40, sample='func = function() LibRover:Explain() end,'},
    {name='IL.Explain', count=1, confidence=0.20, sample='function IL.Explain(itemlink)'},
  },
  ['ArrowFrame_SetAlpha'] = {
    {name='Pointer.ArrowFrame_SetAlpha', count=1, confidence=0.20, sample='function Pointer.ArrowFrame_SetAlpha(but,v)'},
  },
  ['ArrowFrame_SetScale'] = {
    {name='Pointer.ArrowFrame_SetScale', count=1, confidence=0.20, sample='function Pointer.ArrowFrame_SetScale(but,v)'},
  },
  ['IsActiveBattlefieldArena'] = {
    {name='IsActiveBattlefieldArena', count=1, confidence=0.20, sample='return ZGV.db.profile.corpsearrow and UnitIsDeadOrGhost("player") and select(2, IsInInstance()) ~= "pvp" and not (IsActiveBattlefieldArena and IsActiveBattlefieldArena()) and not ZGV.Parser.ConditionEnv.hasbuff("spell:5384")'},
  },
  ['FindCorpseArrow'] = {
    {name='FindCorpseArrow', count=3, confidence=0.60, sample='Pointer:FindCorpseArrow()'},
  },
  ['SetCorpseArrow'] = {
    {name='SetCorpseArrow', count=3, confidence=0.60, sample='function Pointer:SetCorpseArrow(m,x,y)'},
  },
  ['RecordCorpseLocation'] = {
    {name='RecordCorpseLocation', count=2, confidence=0.40, sample='function Pointer:RecordCorpseLocation()'},
  },
  ['ForgetCorpse'] = {
    {name='ForgetCorpse', count=2, confidence=0.40, sample='function Pointer:ForgetCorpse()'},
  },
  ['UnitIsGhost'] = {
    {name='UnitIsGhost', count=3, confidence=0.60, sample='if not UnitIsGhost("player") then self:Debug("FindCorpseArrow: player isn't a ghost...") return end'},
  },
  ['GetCorpseMapPosition'] = {
    {name='C_DeathInfo.GetCorpseMapPosition', count=2, confidence=0.40, sample='if map then corpse = C_DeathInfo.GetCorpseMapPosition(map) end'},
  },
  ['AddArrowSkin'] = {
    {name='AddArrowSkin', count=3, confidence=0.60, sample='function Pointer:AddArrowSkin(id,name)'},
  },
  ['GetSkinPath'] = {
    {name='GetSkinPath', count=1, confidence=0.20, sample='function Pointer:GetSkinPath(skin)'},
  },
  ['GetDir'] = {
    {name='GetDir', count=26, confidence=1.00, sample='return self.ArrowSkins[skin or ZGV.db.options.arrowskin]:GetDir()'},
  },
  ['GetArrowSkin'] = {
    {name='GetArrowSkin', count=2, confidence=0.40, sample='self.ArrowSkinDir = self:GetArrowSkin():GetDir()'},
  },
  ['SetPlayerTexture'] = {
    {name='SetPlayerTexture', count=1, confidence=0.20, sample='Minimap:SetPlayerTexture(ZGV.DIR.."\\skins\\minimaparrow-player")'},
  },
  ['GetDist'] = {
    {name='GetDist', count=1, confidence=0.20, sample='local dist,xd,yd = GetDist(self,node2)'},
    {name='Lib.GetDist', count=1, confidence=0.20, sample='local centermatch = self.centernode.m==node.m and Lib.GetDist(self.centernode,node)<self.radius'},
  },
  ['TestGetNextInPathOne'] = {
    {name='TestGetNextInPathOne', count=2, confidence=0.40, sample='function Pointer:TestGetNextInPathOne(x,y,n)'},
  },
  ['TestGetNextInPathOne_SetWay'] = {
    {name='TestGetNextInPathOne_SetWay', count=3, confidence=0.60, sample='self:TestGetNextInPathOne_SetWay(way)'},
  },
  ['Debug_MoveManualsForward'] = {
    {name='Debug_MoveManualsForward', count=1, confidence=0.20, sample='function Pointer:Debug_MoveManualsForward()'},
  },
  ['TestGetNextInPath'] = {
    {name='TestGetNextInPath', count=1, confidence=0.20, sample='function Pointer:TestGetNextInPath(n)'},
  },
  ['GetMapName'] = {
    {name='Pointer.GetMapName', count=1, confidence=0.20, sample='function Pointer.GetMapName(id)'},
  },
  ['UnwrapMapFloor'] = {
    {name='Pointer.UnwrapMapFloor', count=1, confidence=0.20, sample='local map,floor = Pointer.UnwrapMapFloor(mapfloor)'},
  },
  ['MinimapNodeFlash'] = {
    {name='MinimapNodeFlash', count=1, confidence=0.20, sample='function Pointer:MinimapNodeFlash(s)'},
  },
  ['SetBlipTexture'] = {
    {name='SetBlipTexture', count=3, confidence=0.60, sample='Minimap:SetBlipTexture("Interface\\MINIMAP\\ObjectIcons")'},
  },
  ['MinimapNodeFlashOff'] = {
    {name='MinimapNodeFlashOff', count=1, confidence=0.20, sample='function Pointer:MinimapNodeFlashOff()'},
  },
  ['GetFocusedStep'] = {
    {name='GetFocusedStep', count=6, confidence=1.00, sample='local step = ZGV:GetFocusedStep() or ZGV.CurrentStep or {}'},
  },
  ['GetWayTitle'] = {
    {name='GetWayTitle', count=3, confidence=0.60, sample='or (point.parentStep and point.parentStep:GetWayTitle())'},
  },
  ['SetAntSpacing'] = {
    {name='SetAntSpacing', count=3, confidence=0.60, sample='function Pointer:SetAntSpacing(spacing)'},
  },
  ['Display'] = {
    {name='Display', count=1, confidence=0.20, sample='-- Display (time-phased) ants between all .ants -enabled sets in Pointer.pointsets .'},
  },
  ['ResetAnts'] = {
    {name='ResetAnts', count=5, confidence=1.00, sample='if map~=lastmap then self:ResetAnts() end'},
  },
  ['ShowSet'] = {
    {name='ShowSet', count=6, confidence=1.00, sample='function Pointer:ShowSet(waypath,name,callback)'},
  },
  ['Thread_ShowSet'] = {
    {name='Thread_ShowSet', count=3, confidence=0.60, sample='function Pointer:Thread_ShowSet(waypath,name,callback)'},
  },
  ['PathFoundHandler'] = {
    {name='PathFoundHandler', count=6, confidence=1.00, sample='local function PathFoundHandler(state,path,ext,reason)'},
    {name='ZGV.Pointer.PathFoundHandler', count=3, confidence=0.60, sample='ZGV.Pointer.PathFoundHandler("failure")'},
    {name='WW.PathFoundHandler', count=1, confidence=0.20, sample='function WW.PathFoundHandler(state,path,ext,reason)'},
  },
  ['GetTextAsItinerary'] = {
    {name='GetTextAsItinerary', count=2, confidence=0.40, sample='local wayp = {map=node.m,x=node.x,y=node.y, title=node.maplabel, arrowtitle=node:GetTextAsItinerary(),player=node.player, type="route", icon=icon, pathnode=node, iconoverride=true }'},
  },
  ['GetActionIcon'] = {
    {name='GetActionIcon', count=2, confidence=0.40, sample='wayp.actionicon = node:GetActionIcon(path[i-1],path[i+1])'},
  },
  ['ResetFollowing'] = {
    {name='ResetFollowing', count=1, confidence=0.20, sample='function Pointer:ResetFollowing()'},
  },
  ['QueueFindPath'] = {
    {name='QueueFindPath', count=7, confidence=1.00, sample='LibRover:QueueFindPath(0,0,0,way.m,way.x,way.y, PathFoundHandler,'},
  },
  ['QuestPOI_PointToMe'] = {
    {name='Pointer.QuestPOI_PointToMe', count=1, confidence=0.20, sample='function Pointer.QuestPOI_PointToMe(poiBut,args)'},
  },
  ['QuestPOIGetIconInfo'] = {
    {name='QuestPOIGetIconInfo', count=3, confidence=0.60, sample='local _,x,y=QuestPOIGetIconInfo(questId)'},
  },
  ['QuestWatchPOI_PointToMe'] = {
    {name='Pointer.QuestWatchPOI_PointToMe', count=1, confidence=0.20, sample='function Pointer.QuestWatchPOI_PointToMe(poiBut,args)'},
  },
  ['GetFrameTimeMilliseconds'] = {
    {name='GetFrameTimeMilliseconds', count=2, confidence=0.40, sample='--if lastCycleMilli==GetFrameTimeMilliseconds() then lastCycles=lastCycles+1 end  if lastCycles>10 then return end'},
  },
  ['DelayedRun'] = {
    {name='DelayedRun', count=5, confidence=1.00, sample='--ZGV:DelayedRun("OnUpdate", function() ZGV.Viewer:Update() end)'},
  },
  ['GetWaypointByGoal'] = {
    {name='GetWaypointByGoal', count=2, confidence=0.40, sample='function Pointer:GetWaypointByGoal(goal)'},
  },
  ['SetArrowToFirstCompletableGoal'] = {
    {name='SetArrowToFirstCompletableGoal', count=1, confidence=0.20, sample='function Pointer:SetArrowToFirstCompletableGoal()'},
  },
  ['SetWaypointToFirst'] = {
    {name='SetWaypointToFirst', count=1, confidence=0.20, sample='--	Pointer:SetWaypointToFirst()'},
  },
  ['Debug_FreeWorldMapScale'] = {
    {name='Debug_FreeWorldMapScale', count=1, confidence=0.20, sample='function Pointer:Debug_FreeWorldMapScale()'},
  },
  ['FIXMAPZOOM'] = {
    {name='FIXMAPZOOM', count=2, confidence=0.40, sample='FIXMAPZOOM()  -- in MapCoords'},
  },
  ['TestPOIs'] = {
    {name='TestPOIs', count=1, confidence=0.20, sample='function Pointer:TestPOIs()'},
  },
  ['LimitValue'] = {
    {name='LimitValue', count=8, confidence=1.00, sample='LimitValue(topLeftX       )'},
  },
  ['PointToTimed'] = {
    {name='PointToTimed', count=1, confidence=0.20, sample='function ZygorGuidesViewer_TaxiMarker_Mixin:PointToTimed(parent,pin,timeout)'},
  },
  ['OnCanvasClickHandler'] = {
    {name='OnCanvasClickHandler', count=2, confidence=0.40, sample='self.onCanvasClickHandler = self.onCanvasClickHandler or function(mapCanvas, button, cursorX, cursorY) return self:OnCanvasClickHandler(button, cursorX, cursorY) end;'},
  },
  ['AddCanvasClickHandler'] = {
    {name='AddCanvasClickHandler', count=1, confidence=0.20, sample='mapCanvas:AddCanvasClickHandler(self.onCanvasClickHandler, priority);'},
  },
  ['RecordNextClick'] = {
    {name='RecordNextClick', count=2, confidence=0.40, sample=':SetScript("OnClick", function() Pointer.OverlayProvider:RecordNextClick() end)'},
  },
  ['AddCursorHandler'] = {
    {name='AddCursorHandler', count=1, confidence=0.20, sample='--mapCanvas:AddCursorHandler(self.cursorHandler, priority);'},
  },
  ['RemoveCursorHandler'] = {
    {name='RemoveCursorHandler', count=1, confidence=0.20, sample='--mapCanvas:RemoveCursorHandler(self.cursorHandler);'},
  },
  ['RecordFakeCoords'] = {
    {name='RecordFakeCoords', count=3, confidence=0.60, sample='LibRover:RecordFakeCoords()'},
  },
  ['Debug_AddPointToPath'] = {
    {name='Debug_AddPointToPath', count=2, confidence=0.40, sample='Pointer:Debug_AddPointToPath(map,x,y)'},
  },
  ['ShowMapMarkers'] = {
    {name='ShowMapMarkers', count=2, confidence=0.40, sample='function Pointer:ShowMapMarkers()'},
  },
  ['RegisterGuideSorting'] = {
    {name='RegisterGuideSorting', count=8, confidence=1.00, sample='ZGV:RegisterGuideSorting({'},
  },
  ['Classic'] = {
    {name='Classic', count=521, confidence=1.00, sample='"Classic (1-50)",'},
  },
  ['Crusade'] = {
    {name='Crusade', count=125, confidence=1.00, sample='"The Burning Crusade (10-50)",'},
  },
  ['King'] = {
    {name='King', count=160, confidence=1.00, sample='"Wrath of the Lich King (10-50)",'},
  },
  ['Cataclysm'] = {
    {name='Cataclysm', count=97, confidence=1.00, sample='"Cataclysm (10-50)",'},
  },
  ['Pandaria'] = {
    {name='Pandaria', count=296, confidence=1.00, sample='"Pandaria (10-50)",'},
  },
  ['Draenor'] = {
    {name='Draenor', count=865, confidence=1.00, sample='"Draenor (10-50)",'},
  },
  ['Legion'] = {
    {name='Legion', count=1664, confidence=1.00, sample='"Legion (10-50)",'},
  },
  ['Azeroth'] = {
    {name='Azeroth', count=632, confidence=1.00, sample='"Battle for Azeroth (10-50)",'},
  },
  ['Shadowlands'] = {
    {name='Shadowlands', count=1012, confidence=1.00, sample='"Shadowlands (50-60)",'},
  },
  ['Human'] = {
    {name='Human', count=1, confidence=0.20, sample='"Human (1-5)",'},
  },
  ['Dwarf'] = {
    {name='Dwarf', count=1, confidence=0.20, sample='"Dwarf (1-5)",'},
  },
  ['Elf'] = {
    {name='Elf', count=2, confidence=0.40, sample='"Night Elf (1-11)",'},
  },
  ['Gnome'] = {
    {name='Gnome', count=1, confidence=0.20, sample='"Gnome (1-5)",'},
  },
  ['Draenei'] = {
    {name='Draenei', count=1, confidence=0.20, sample='"Draenei (1-5)",'},
  },
  ['Worgen'] = {
    {name='Worgen', count=2, confidence=0.40, sample='"Worgen (1-13)",'},
  },
  ['Pandaren'] = {
    {name='Pandaren', count=8, confidence=1.00, sample='"Pandaren (1-15)",'},
  },
  ['Knight'] = {
    {name='Knight', count=2, confidence=0.40, sample='"Death Knight (8-10)",'},
  },
  ['Hunter'] = {
    {name='Hunter', count=3, confidence=0.60, sample='"Demon Hunter (98-100)"})'},
  },
  ['Orc'] = {
    {name='Orc', count=1, confidence=0.20, sample='"Orc (1-5)",'},
  },
  ['Undead'] = {
    {name='Undead', count=3, confidence=0.60, sample='"Undead (1-10)",'},
  },
  ['Tauren'] = {
    {name='Tauren', count=1, confidence=0.20, sample='"Tauren (1-4)",'},
  },
  ['Troll'] = {
    {name='Troll', count=1, confidence=0.20, sample='"Troll (1-5)",'},
  },
  ['Goblin'] = {
    {name='Goblin', count=1, confidence=0.20, sample='"Goblin (1-10)",'},
  },
  ['GetNPCNameFromCache'] = {
    {name='GetNPCNameFromCache', count=2, confidence=0.40, sample='local function GetNPCNameFromCache(NPCid)'},
  },
  ['FindNPCIdByName'] = {
    {name='FindNPCIdByName', count=1, confidence=0.20, sample='function Localizers:FindNPCIdByName(testname)'},
  },
  ['PruneNPCs'] = {
    {name='PruneNPCs', count=2, confidence=0.40, sample='function Localizers:PruneNPCs()'},
  },
  ['GetQuestDataFromTooltip'] = {
    {name='GetQuestDataFromTooltip', count=2, confidence=0.40, sample='function Localizers:GetQuestDataFromTooltip(qid)'},
  },
  ['PruneCachedQuestData'] = {
    {name='PruneCachedQuestData', count=2, confidence=0.40, sample='local function PruneCachedQuestData()'},
  },
  ['GetQuestInfo'] = {
    {name='C_QuestLog.GetQuestInfo', count=2, confidence=0.40, sample='title = C_QuestLog.GetQuestInfo(qid)'},
  },
  ['Azuremyst'] = {
    {name='Azuremyst', count=1, confidence=0.20, sample='[775]=Enum_Micro, [776]=Enum_Micro, -- Exodar, Azuremyst (scenario)'},
  },
  ['Rift'] = {
    {name='Rift', count=7, confidence=1.00, sample='[717]=Enum_Micro, -- Dreadscar Rift (Warlock OH)'},
  },
  ['Quarters'] = {
    {name='Quarters', count=1, confidence=0.20, sample='[1690]=Enum_Micro,				-- Aspirant's Quarters (Bastion)'},
  },
  ['Hold'] = {
    {name='Hold', count=33, confidence=1.00, sample='[1707]=Enum_Micro,[1708]=Enum_Micro,			-- Elysian Hold (Bastion)'},
  },
  ['Forest'] = {
    {name='Forest', count=551, confidence=1.00, sample='[1701]=Enum_Zone,[1702]=Enum_Zone,[1703]=Enum_Zone, -- Heart of the Forest (Ardenweald)'},
  },
  ['Primus'] = {
    {name='Primus', count=1, confidence=0.20, sample='[1698]=Enum_Micro,					-- Seat of the Primus (Maldraxxus)'},
  },
  ['Torghast'] = {
    {name='Torghast', count=1, confidence=0.20, sample='[1705]=Enum_Micro,					-- Torghast (Main Floor)'},
  },
  ['Souls'] = {
    {name='Souls', count=18, confidence=1.00, sample='[1652]=Enum_Micro,					-- Vault of Souls (Maldraxxus)'},
  },
  ['Den'] = {
    {name='Den', count=14, confidence=1.00, sample='[1824]=Enum_Micro,					-- Matriarch's Den (Ardenweald)'},
  },
  ['GetMapChildrenInfo'] = {
    {name='C_Map.GetMapChildrenInfo', count=4, confidence=0.80, sample='for i,cData in pairs(C_Map.GetMapChildrenInfo(mapID)) do'},
  },
  ['GetAllContinents'] = {
    {name='ZGV.GetAllContinents', count=3, confidence=0.60, sample='function ZGV.GetAllContinents()'},
  },
  ['GetMapGroupID'] = {
    {name='ZGV.GetMapGroupID', count=3, confidence=0.60, sample='function ZGV.GetMapGroupID(id,floor)'},
    {name='C_Map.GetMapGroupID', count=4, confidence=0.80, sample='mapInfo.groupID = C_Map.GetMapGroupID(id)'},
  },
  ['GetMapFloorNameByID'] = {
    {name='ZGV.GetMapFloorNameByID', count=4, confidence=0.80, sample='function ZGV.GetMapFloorNameByID(id,floor)'},
  },
  ['GetMapGroupMembersInfo'] = {
    {name='C_Map.GetMapGroupMembersInfo', count=2, confidence=0.40, sample='local groupInfo = C_Map.GetMapGroupMembersInfo(groupID)  if not groupInfo then break end'},
  },
  ['MapsOnDifferentFloors'] = {
    {name='ZGV.MapsOnDifferentFloors', count=1, confidence=0.20, sample='function ZGV.MapsOnDifferentFloors(m1,m2)'},
  },
  ['EQ'] = {
    {name='EQ', count=2, confidence=0.40, sample='local function EQ(a,b) return abs(a-b)<0.1 end'},
  },
  ['NE'] = {
    {name='NE', count=3, confidence=0.60, sample='local function NE(a,b) return not EQ(a,b) end'},
  },
  ['GetMAPDATAFromGWP'] = {
    {name='GetMAPDATAFromGWP', count=2, confidence=0.40, sample='local function GetMAPDATAFromGWP()'},
  },
  ['GWP'] = {
    {name='GWP', count=3, confidence=0.60, sample='local _,d1=GWP(i,{x=0,y=0})'},
  },
  ['CloneHBDMap'] = {
    {name='CloneHBDMap', count=2, confidence=0.40, sample='local function CloneHBDMap(src,dst,force,changes)'},
  },
  ['ForceHBDMapUpdate'] = {
    {name='ForceHBDMapUpdate', count=2, confidence=0.40, sample='local function ForceHBDMapUpdate(id)'},
  },
  ['FixHBD'] = {
    {name='FixHBD', count=2, confidence=0.40, sample='local function FixHBD()'},
  },
  ['GetMAPDATAFromHBD'] = {
    {name='GetMAPDATAFromHBD', count=2, confidence=0.40, sample='local function GetMAPDATAFromHBD()'},
  },
  ['FixMAPDATA'] = {
    {name='FixMAPDATA', count=2, confidence=0.40, sample='local function FixMAPDATA()'},
  },
  ['Shallows'] = {
    {name='Shallows', count=1, confidence=0.20, sample='MAPDATA[694]={1220,2441,4040,1485,990} -- Helmouth Shallows (Hunter scenario) on Stormheim'},
  },
  ['HBDmaptest'] = {
    {name='HBDmaptest', count=1, confidence=0.20, sample='local function HBDmaptest(n)'},
  },
  ['HBDuse'] = {
    {name='HBDuse', count=1, confidence=0.20, sample='local function HBDuse(id)'},
  },
  ['GetCosmicWorldMapCoordinatesFromWorld'] = {
    {name='GetCosmicWorldMapCoordinatesFromWorld', count=2, confidence=0.40, sample='local function GetCosmicWorldMapCoordinatesFromWorld(x,y,instance,allowOutOfBounds)'},
  },
  ['GetAzerothWorldMapCoordinatesFromWorld'] = {
    {name='GetAzerothWorldMapCoordinatesFromWorld', count=4, confidence=0.80, sample='return ZGV.HBD:GetAzerothWorldMapCoordinatesFromWorld(x,y,zone,true)'},
  },
  ['Mxlt_get_virtual_cont_data'] = {
    {name='MapCoords.Mxlt_get_virtual_cont_data', count=2, confidence=0.40, sample='dm1 = MapCoords.Mxlt_get_virtual_cont_data(map1,map2)'},
  },
  ['TranslateVirtualContinents'] = {
    {name='MapCoords.TranslateVirtualContinents', count=2, confidence=0.40, sample='function MapCoords.TranslateVirtualContinents()'},
  },
  ['Mxlt_test'] = {
    {name='MapCoords.Mxlt_test', count=1, confidence=0.20, sample='function MapCoords.Mxlt_test()'},
  },
  ['F'] = {
    {name='F', count=2, confidence=0.40, sample='--  local T={}  function F(i) return T[i] end'},
  },
  ['CreateZoomLevels'] = {
    {name='CreateZoomLevels', count=2, confidence=0.40, sample='function MapCanvasScrollControllerMixin:CreateZoomLevels()'},
  },
  ['SetMouseWheelZoomMode'] = {
    {name='SetMouseWheelZoomMode', count=1, confidence=0.20, sample='--WorldMapFrame:GetCanvasContainer():SetMouseWheelZoomMode(MAP_CANVAS_MOUSE_WHEEL_ZOOM_BEHAVIOR_SMOOTH)'},
  },
  ['SetupMapButtons'] = {
    {name='SetupMapButtons', count=2, confidence=0.40, sample='function MapCoords:SetupMapButtons()'},
  },
  ['IsDragging'] = {
    {name='IsDragging', count=4, confidence=0.80, sample='if (MapCoords.MapButton:IsDragging()) then  -- yes, it's the inside button that's dragging the parent.'},
  },
  ['GetRect'] = {
    {name='GetRect', count=2, confidence=0.40, sample='local px,py = parent:GetRect()'},
  },
  ['ShowMapMenu'] = {
    {name='ShowMapMenu', count=2, confidence=0.40, sample=':SetScript("OnClick", function() MapCoords:ShowMapMenu() end)'},
  },
  ['EmbeddedItemTooltip_SetItemByID'] = {
    {name='EmbeddedItemTooltip_SetItemByID', count=2, confidence=0.40, sample='EmbeddedItemTooltip_SetItemByID(GameTooltip.ItemTooltip,item.itemid)'},
  },
  ['GetItemQualityColor'] = {
    {name='C_Item.GetItemQualityColor', count=9, confidence=1.00, sample='local _,_,_,color = C_Item.GetItemQualityColor(2)'},
    {name='GetItemQualityColor', count=1, confidence=0.20, sample='--local r, g, b, hex = GetItemQualityColor(qualityColor)'},
  },
  ['LoadPoint'] = {
    {name='LoadPoint', count=3, confidence=0.60, sample='Poi:LoadPoint(point)'},
  },
  ['ParsePoints'] = {
    {name='ParsePoints', count=2, confidence=0.40, sample='function Poi:ParsePoints()'},
  },
  ['PreparePoints'] = {
    {name='PreparePoints', count=3, confidence=0.60, sample='Poi:PreparePoints()'},
  },
  ['SetupLoader'] = {
    {name='SetupLoader', count=2, confidence=0.40, sample='function Poi:SetupLoader()'},
  },
  ['RefreshPoints'] = {
    {name='RefreshPoints', count=4, confidence=0.80, sample='Poi.CurrentZoneDataProvider:RefreshPoints()'},
  },
  ['EventHandler'] = {
    {name='EventHandler', count=6, confidence=1.00, sample='local function EventHandler(self, event, ...)'},
    {name='ActionButton.EventHandler', count=1, confidence=0.20, sample='function ActionButton.EventHandler(self, event)'},
    {name='PointerMap.EventHandler', count=1, confidence=0.20, sample='function PointerMap.EventHandler(self,event)'},
    {name='Scan.EventHandler', count=1, confidence=0.20, sample='function Scan.EventHandler(frame,event,...)'},
    {name='Appraiser.EventHandler', count=4, confidence=0.80, sample='--Appraiser.EventHandler(frame,"ZGV_AFTER_SINGLE_AILU")'},
  },
  ['GameTooltip_CalculatePadding'] = {
    {name='GameTooltip_CalculatePadding', count=1, confidence=0.20, sample='GameTooltip_CalculatePadding(GameTooltip)'},
  },
  ['DisplayPoints'] = {
    {name='DisplayPoints', count=3, confidence=0.60, sample='DataProvider:DisplayPoints(mapid)'},
  },
  ['HideQuestRewardGlow'] = {
    {name='HideQuestRewardGlow', count=3, confidence=0.60, sample='function QuestItem:HideQuestRewardGlow()'},
  },
  ['ShowQuestRewardGlow'] = {
    {name='ShowQuestRewardGlow', count=2, confidence=0.40, sample='function QuestItem:ShowQuestRewardGlow(index,reason)'},
  },
  ['IsQuestItemsReady'] = {
    {name='IsQuestItemsReady', count=2, confidence=0.40, sample='function QuestItem:IsQuestItemsReady()'},
  },
  ['GetNumQuestChoices'] = {
    {name='GetNumQuestChoices', count=7, confidence=1.00, sample='local totalrewards=GetNumQuestChoices()'},
  },
  ['GetQuestItemLink'] = {
    {name='GetQuestItemLink', count=2, confidence=0.40, sample='local link= GetQuestItemLink("choice",index)'},
  },
  ['GetQuestRewardIndex'] = {
    {name='GetQuestRewardIndex', count=2, confidence=0.40, sample='function QuestItem:GetQuestRewardIndex()'},
  },
  ['QuestItem_StepReset'] = {
    {name='QuestItem_StepReset', count=2, confidence=0.40, sample='local function QuestItem_StepReset(step)'},
  },
  ['TestCurStepForQuestItem'] = {
    {name='TestCurStepForQuestItem', count=3, confidence=0.60, sample='function QuestItem:TestCurStepForQuestItem()'},
  },
  ['CreateQuestPopup'] = {
    {name='CreateQuestPopup', count=3, confidence=0.60, sample='local function CreateQuestPopup()'},
  },
  ['SetHyperlinksEnabled'] = {
    {name='SetHyperlinksEnabled', count=2, confidence=0.40, sample=':SetHyperlinksEnabled(true) :Disable() :SetJustifyH("CENTER")'},
  },
  ['SetCursorPosition'] = {
    {name='SetCursorPosition', count=24, confidence=1.00, sample=':SetCursorPosition(0)'},
  },
  ['OnOpen'] = {
    {name='OnOpen', count=2, confidence=0.40, sample='local function OnOpen() -- If the guide is completed then we know all the needed trainings'},
  },
  ['RemoveButton'] = {
    {name='RemoveButton', count=2, confidence=0.40, sample='ZGV.NotificationCenterOld:RemoveButton(self:GetName())'},
  },
  ['ModifyQuestPopup'] = {
    {name='ModifyQuestPopup', count=3, confidence=0.60, sample='function QuestItem:ModifyQuestPopup(questid,itemid,popupNum,replacing)'},
  },
  ['OnEscape'] = {
    {name='OnEscape', count=4, confidence=0.80, sample='AutoEquip.Popup:OnEscape() AutoEquip.Popup:Hide()'},
  },
  ['FoundQuestItemForCurStep'] = {
    {name='FoundQuestItemForCurStep', count=2, confidence=0.40, sample='--/run ZGV.ItemScore:FoundQuestItemForCurStep(235,19019)'},
  },
  ['ReEquipNormalItem'] = {
    {name='ReEquipNormalItem', count=1, confidence=0.20, sample='function QuestItem:ReEquipNormalItem()'},
  },
  ['GetReverseLookupTable'] = {
    {name='GetReverseLookupTable', count=12, confidence=1.00, sample='local CTR = CT:GetReverseLookupTable()'},
  },
  ['StartUp'] = {
    {name='StartUp', count=2, confidence=0.40, sample='CreatureDetector:StartUp()'},
    {name='Details.Coach.StartUp', count=2, confidence=0.40, sample='Details.Coach.StartUp()'},
  },
  ['UnitIsPlayer'] = {
    {name='UnitIsPlayer', count=4, confidence=0.80, sample='if UnitIsPlayer("target") then -- Screw the IDs this one is safer'},
  },
  ['DetectMount'] = {
    {name='DetectMount', count=2, confidence=0.40, sample='self:DetectMount(not force)'},
  },
  ['UnitCreatureType'] = {
    {name='UnitCreatureType', count=2, confidence=0.40, sample='elseif (CTR[UnitCreatureType("target")] == "Non-combat Pet") then --'},
  },
  ['DetectPet'] = {
    {name='DetectPet', count=2, confidence=0.40, sample='self:DetectPet(not force)'},
  },
  ['DetectHunterPet'] = {
    {name='DetectHunterPet', count=2, confidence=0.40, sample='self:DetectHunterPet(not force)'},
  },
  ['UnitIsUnit'] = {
    {name='UnitIsUnit', count=22, confidence=1.00, sample='if UnitIsUnit("target","pet") then return end -- own pet'},
  },
  ['Report'] = {
    {name='Report', count=74, confidence=1.00, sample='CreatureDetector:Report("hunterpet",guide,owned)'},
  },
  ['MountJournalIconSetup'] = {
    {name='CreatureDetector.MountJournalIconSetup', count=2, confidence=0.40, sample='hooksecurefunc("ToggleCollectionsJournal",function() CreatureDetector.MountJournalIconSetup() end)'},
  },
  ['UpdateMountIcons'] = {
    {name='CreatureDetector.UpdateMountIcons', count=1, confidence=0.20, sample='function CreatureDetector.UpdateMountIcons()'},
  },
  ['MountJournalIcon_OnClick'] = {
    {name='CreatureDetector.MountJournalIcon_OnClick', count=2, confidence=0.40, sample='button:SetScript("OnClick", function() CreatureDetector.MountJournalIcon_OnClick(blizzbutton.spellID) end) -- Find the mount'},
  },
  ['AreRequirementsMet'] = {
    {name='AreRequirementsMet', count=20, confidence=1.00, sample='if not self:AreRequirementsMet(nil,"strict") then return true,true,"req unmet" end'},
    {name='Goldguide.Common.AreRequirementsMet', count=2, confidence=0.40, sample='if string.match(guide.title_short, name) and Goldguide.Common.AreRequirementsMet(guide) then'},
  },
  ['NeedsUpdating'] = {
    {name='NeedsUpdating', count=2, confidence=0.40, sample='function Step:NeedsUpdating()'},
  },
  ['PrepareCompletion'] = {
    {name='PrepareCompletion', count=4, confidence=0.80, sample='function Step:PrepareCompletion(full)'},
  },
  ['IsAuxiliarySkippable'] = {
    {name='IsAuxiliarySkippable', count=4, confidence=0.80, sample='function Step:IsAuxiliarySkippable()'},
  },
  ['ReloadStep'] = {
    {name='ReloadStep', count=3, confidence=0.60, sample='--clickfun=function() ZGV:ReloadStep() end,'},
  },
  ['GetNext'] = {
    {name='GetNext', count=3, confidence=0.60, sample='function Step:GetNext()'},
  },
  ['GetStep'] = {
    {name='GetStep', count=5, confidence=1.00, sample='local stepobj = self.parentGuide:GetStep(step)'},
  },
  ['GetNextValidStep'] = {
    {name='GetNextValidStep', count=3, confidence=0.60, sample='function Step:GetNextValidStep()'},
  },
  ['GetNextCompletableStep'] = {
    {name='GetNextCompletableStep', count=2, confidence=0.40, sample='function Step:GetNextCompletableStep()'},
  },
  ['CheckVisitedGotos'] = {
    {name='CheckVisitedGotos', count=2, confidence=0.40, sample='function Step:CheckVisitedGotos()'},
  },
  ['CanBeSticky'] = {
    {name='CanBeSticky', count=3, confidence=0.60, sample='function Step:CanBeSticky()'},
  },
  ['SelectClosestWaypoint'] = {
    {name='SelectClosestWaypoint', count=2, confidence=0.40, sample='return self:SelectClosestWaypoint()'},
  },
  ['GetLibrary'] = {
    {name='GetLibrary', count=126, confidence=1.00, sample='local LibDeflate = LibStub:GetLibrary("LibDeflate")'},
  },
  ['GS'] = {
    {name='GS', count=1, confidence=0.20, sample='Packet GS (GuideState):'},
  },
  ['CreatePacket_GuideStatus'] = {
    {name='CreatePacket_GuideStatus', count=2, confidence=0.40, sample='function Sync:CreatePacket_GuideStatus()'},
  },
  ['GetStepStatus'] = {
    {name='GetStepStatus', count=3, confidence=0.60, sample='local function GetStepStatus(step)'},
  },
  ['CreatePackets_StepData'] = {
    {name='CreatePackets_StepData', count=3, confidence=0.60, sample='function Sync:CreatePackets_StepData()'},
  },
  ['GetStepSource'] = {
    {name='GetStepSource', count=3, confidence=0.60, sample='local steplines = self:GetStepSource(ZGV.CurrentStepNum)'},
  },
  ['CreatePacket_StatusRequest'] = {
    {name='CreatePacket_StatusRequest', count=2, confidence=0.40, sample='function Sync:CreatePacket_StatusRequest()'},
  },
  ['CreatePacket_StepRequest'] = {
    {name='CreatePacket_StepRequest', count=2, confidence=0.40, sample='function Sync:CreatePacket_StepRequest()'},
  },
  ['CreatePacket_SlaveRequest'] = {
    {name='CreatePacket_SlaveRequest', count=2, confidence=0.40, sample='function Sync:CreatePacket_SlaveRequest()'},
  },
  ['OnChatReceived'] = {
    {name='OnChatReceived', count=2, confidence=0.40, sample='-- /run SDs={ZGV.Sync:CreatePackets_StepData()} for i,pck in ipairs(SDs) do ZGV.Sync:OnChatReceived("zygor7sync",pck,"party","Alice") end'},
  },
  ['SplitXXIntoPacket'] = {
    {name='SplitXXIntoPacket', count=5, confidence=1.00, sample='function Sync:SplitXXIntoPacket(packet,data)'},
  },
  ['DecodeForWoWAddonChannel'] = {
    {name='DecodeForWoWAddonChannel', count=10, confidence=1.00, sample='local msg_decoded = LibDeflate:DecodeForWoWAddonChannel(msg)'},
  },
  ['DecompressDeflate'] = {
    {name='DecompressDeflate', count=15, confidence=1.00, sample='local msg_unpacked = LibDeflate:DecompressDeflate(msg_decoded)'},
  },
  ['Unpack'] = {
    {name='Unpack', count=2, confidence=0.40, sample='Sync:Unpack(packet,data)'},
  },
  ['HandleReceivedPacket'] = {
    {name='HandleReceivedPacket', count=2, confidence=0.40, sample='Sync:HandleReceivedPacket(packet)'},
  },
  ['OnPartyStatusChanged'] = {
    {name='OnPartyStatusChanged', count=5, confidence=1.00, sample='self:OnPartyStatusChanged()'},
  },
  ['BroadcastStepContents'] = {
    {name='BroadcastStepContents', count=6, confidence=1.00, sample='Sync:BroadcastStepContents()'},
  },
  ['AnnounceStatus'] = {
    {name='AnnounceStatus', count=9, confidence=1.00, sample='self:AnnounceStatus()'},
  },
  ['ShowSlaveConfirmation'] = {
    {name='ShowSlaveConfirmation', count=3, confidence=0.60, sample='self:ShowSlaveConfirmation(packet.sender,packet.guide)'},
  },
  ['UpdateButtonColor'] = {
    {name='UpdateButtonColor', count=6, confidence=1.00, sample='self:UpdateButtonColor()'},
  },
  ['GuideShareButton_OnEnter'] = {
    {name='ZGV.Frame.GuideShareButton_OnEnter', count=1, confidence=0.20, sample='if ZGV.Frame.Controls.GuideShareButton:IsMouseOver() then ZGV.Frame.GuideShareButton_OnEnter() end  -- goes to Sync:OnShareButtonEnter() anyway'},
    {name='ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnEnter(self)'},
  },
  ['OnShareButtonEnter'] = {
    {name='OnShareButtonEnter', count=3, confidence=0.60, sample='if ZGV.Frame.Controls.GuideShareButton:IsMouseOver() then ZGV.Frame.GuideShareButton_OnEnter() end  -- goes to Sync:OnShareButtonEnter() anyway'},
  },
  ['IsPartyStatusComplete'] = {
    {name='IsPartyStatusComplete', count=2, confidence=0.40, sample='if self:IsPartyStatusComplete() then self:DeclarePartyStatusComplete() end'},
  },
  ['DeclarePartyStatusComplete'] = {
    {name='DeclarePartyStatusComplete', count=3, confidence=0.60, sample='if self:IsPartyStatusComplete() then self:DeclarePartyStatusComplete() end'},
  },
  ['IsClearToProceed'] = {
    {name='IsClearToProceed', count=3, confidence=0.60, sample='function Sync:IsClearToProceed(stepnum)'},
  },
  ['IsSnapping'] = {
    {name='IsSnapping', count=2, confidence=0.40, sample='if not self:IsEnabled() or not self:IsSnapping() then return true end'},
  },
  ['GetStepGoalPartyStatusText'] = {
    {name='GetStepGoalPartyStatusText', count=2, confidence=0.40, sample='function Sync:GetStepGoalPartyStatusText(stepnum,goalnum)'},
  },
  ['OrderedPairs'] = {
    {name='ZGV.OrderedPairs', count=15, confidence=1.00, sample='for k,v in ZGV.OrderedPairs(self.PartyStatus) do table.insert(partysort,k) end'},
  },
  ['GetAheadBehind'] = {
    {name='GetAheadBehind', count=2, confidence=0.40, sample='function Sync:GetAheadBehind()'},
  },
  ['Send'] = {
    {name='Send', count=7, confidence=1.00, sample='self:Send(self:CreatePacket_GuideStatus())'},
  },
  ['ResetPartyStatus'] = {
    {name='ResetPartyStatus', count=3, confidence=0.60, sample='Sync:ResetPartyStatus()'},
  },
  ['RequestSlaveMode'] = {
    {name='RequestSlaveMode', count=4, confidence=0.80, sample='--self:RequestSlaveMode() -- For new members. Existing slaves should ignore this.'},
  },
  ['Init'] = {
    {name='Init', count=10, confidence=1.00, sample='function Sync:Init()'},
  },
  ['RegisterComm'] = {
    {name='RegisterComm', count=9, confidence=1.00, sample='AceComm:RegisterComm(PREFIX,Sync.OnChatReceived)'},
  },
  ['ON_ZGV_STEP_CHANGED'] = {
    {name='ON_ZGV_STEP_CHANGED', count=2, confidence=0.40, sample='local function ON_ZGV_STEP_CHANGED()'},
  },
  ['RequestPartyStatus'] = {
    {name='RequestPartyStatus', count=4, confidence=0.80, sample='if self:IsEnabled() then self:AnnounceStatus() self:RequestPartyStatus() end'},
  },
  ['IsChecked'] = {
    {name='IsChecked', count=7, confidence=1.00, sample='if dialog.text3checkbox:IsChecked() then'},
  },
  ['RequestStepContents'] = {
    {name='RequestStepContents', count=2, confidence=0.40, sample='if self:IsSlave() then self:RequestStepContents()'},
  },
  ['SetEnabled'] = {
    {name='SetEnabled', count=14, confidence=1.00, sample='ZGV.Frame.Controls.PrevButton:SetEnabled(not self:IsSlave())'},
  },
  ['ShowMasterConfirmation'] = {
    {name='ShowMasterConfirmation', count=2, confidence=0.40, sample='function Sync:ShowMasterConfirmation()'},
  },
  ['IsInNC'] = {
    {name='IsInNC', count=5, confidence=1.00, sample='if ZGV.PopupHandler:IsInNC("ZygorShareInitiate") then return end'},
  },
  ['GetParty_NotSlaveNames'] = {
    {name='GetParty_NotSlaveNames', count=6, confidence=1.00, sample='local notslaves = self:GetParty_NotSlaveNames()'},
  },
  ['FormatNiceGuideTitle'] = {
    {name='FormatNiceGuideTitle', count=4, confidence=0.80, sample='self.InitiateConfirmPopup:SetText(L["share_invite_master"]:format(ZGV:FormatNiceGuideTitle(ZGV.CurrentGuide.title),#zygor_users<GetNumGroupMembers()-1 and (#zygor_users>1 and L['share_invite_master_party_manyzygors'] or L['share_invite_master_party_onezygor']):format(comma_and(zygor_users)) or ""))'},
  },
  ['UnitIsConnected'] = {
    {name='UnitIsConnected', count=6, confidence=1.00, sample='if UnitExists(unit) and UnitIsConnected(unit) then'},
  },
  ['CompressDeflate'] = {
    {name='CompressDeflate', count=15, confidence=1.00, sample='local message_packed = LibDeflate:CompressDeflate(message)'},
  },
  ['EncodeForWoWAddonChannel'] = {
    {name='EncodeForWoWAddonChannel', count=10, confidence=1.00, sample='local message_encoded = LibDeflate:EncodeForWoWAddonChannel(message_packed)'},
  },
  ['SendCommMessage'] = {
    {name='SendCommMessage', count=27, confidence=1.00, sample='AceComm:SendCommMessage(PREFIX,message_encoded,"PARTY")'},
  },
  ['SendSelf'] = {
    {name='SendSelf', count=2, confidence=0.40, sample='function Sync:SendSelf(message,...)'},
  },
  ['RequestAllStatuses'] = {
    {name='RequestAllStatuses', count=1, confidence=0.20, sample='function Sync:RequestAllStatuses(callback,timeout)'},
  },
  ['GetParty_SlaveNames'] = {
    {name='GetParty_SlaveNames', count=4, confidence=0.80, sample='function Sync:GetParty_SlaveNames()'},
  },
  ['OnShareButtonClick'] = {
    {name='OnShareButtonClick', count=2, confidence=0.40, sample='function Sync:OnShareButtonClick()'},
  },
  ['PlayerIsOnQuest'] = {
    {name='PlayerIsOnQuest', count=36, confidence=1.00, sample='function PlayerIsOnQuest(id)'},
  },
  ['CacheQuestNames'] = {
    {name='CacheQuestNames', count=2, confidence=0.40, sample='--QuestDB:CacheQuestNames()'},
  },
  ['CreateButton'] = {
    {name='CreateButton', count=126, confidence=1.00, sample='function QuestDB:CreateButton()'},
  },
  ['SetQuestForButton'] = {
    {name='SetQuestForButton', count=6, confidence=1.00, sample='function QuestDB:SetQuestForButton(questIdent)'},
  },
  ['IsQuestFlaggedCompletedOnAccount'] = {
    {name='C_QuestLog.IsQuestFlaggedCompletedOnAccount', count=1, confidence=0.20, sample='if C_QuestLog.IsQuestFlaggedCompletedOnAccount and C_QuestLog.IsQuestFlaggedCompletedOnAccount(questID) then'},
  },
  ['MaybeShowButton'] = {
    {name='MaybeShowButton', count=3, confidence=0.60, sample='function QuestDB:MaybeShowButton()'},
  },
  ['MaybeStopOnThisStep'] = {
    {name='MaybeStopOnThisStep', count=2, confidence=0.40, sample='function QuestDB:MaybeStopOnThisStep()'},
  },
  ['FocusNextStepForQuest'] = {
    {name='FocusNextStepForQuest', count=2, confidence=0.40, sample='function QuestDB:FocusNextStepForQuest()'},
  },
  ['RequestLoadQuestByID'] = {
    {name='C_QuestLog.RequestLoadQuestByID', count=2, confidence=0.40, sample='C_QuestLog.RequestLoadQuestByID(quest)'},
  },
  ['GetTitleForQuestID'] = {
    {name='C_QuestLog.GetTitleForQuestID', count=2, confidence=0.40, sample='return C_QuestLog.GetTitleForQuestID(questID)'},
  },
  ['GetBuildInfo'] = {
    {name='GetBuildInfo', count=53, confidence=1.00, sample='local version, build, date, tocversion = GetBuildInfo()'},
  },
  ['CacheQuestNameResult'] = {
    {name='CacheQuestNameResult', count=1, confidence=0.20, sample='function QuestDB:CacheQuestNameResult(event,quest,success)'},
  },
  ['SortGuides'] = {
    {name='SortGuides', count=1, confidence=0.20, sample='local function SortGuides(a,b)'},
  },
  ['GetChain'] = {
    {name='GetChain', count=1, confidence=0.20, sample='local chain = QuestDB:GetChain(questid,nil,nil,"")'},
  },
  ['OnAccept'] = {
    {name='OnAccept', count=4, confidence=0.80, sample='Popup:OnAccept()'},
  },
  ['OnDecline'] = {
    {name='OnDecline', count=3, confidence=0.60, sample='Popup:OnDecline()'},
  },
  ['OnMinimize'] = {
    {name='OnMinimize', count=1, confidence=0.20, sample='Popup:OnMinimize()'},
  },
  ['AdjustSize'] = {
    {name='AdjustSize', count=5, confidence=1.00, sample='Popup:AdjustSize()'},
  },
  ['OnSettings'] = {
    {name='OnSettings', count=3, confidence=0.60, sample='Popup:OnSettings()'},
  },
  ['OnClose'] = {
    {name='OnClose', count=3, confidence=0.60, sample='Popup:OnClose() --should not be needed most of the time'},
  },
  ['QueuePush'] = {
    {name='QueuePush', count=2, confidence=0.40, sample='ZGV.PopupHandler:QueuePush(self)'},
  },
  ['Accept'] = {
    {name='Accept', count=2, confidence=0.40, sample='function Popup.private:Accept(popup)'},
  },
  ['Decline'] = {
    {name='Decline', count=2, confidence=0.40, sample='function Popup.private:Decline(popup)'},
  },
  ['Escape'] = {
    {name='Escape', count=2, confidence=0.40, sample='function Popup.private:Escape(popup)'},
  },
  ['More'] = {
    {name='More', count=34, confidence=1.00, sample='function Popup.private:More(popup)'},
  },
  ['OnMore'] = {
    {name='OnMore', count=1, confidence=0.20, sample='popup:OnMore()'},
  },
  ['Minimize'] = {
    {name='Minimize', count=5, confidence=1.00, sample='function Popup.private:Minimize(popup,time,hideDelay)'},
  },
  ['GetDebugName'] = {
    {name='GetDebugName', count=1, confidence=0.20, sample='ZGV:Debug("&popup Minimize initialized: "..popup:GetDebugName())'},
  },
  ['GetNCTextureInfo'] = {
    {name='GetNCTextureInfo', count=2, confidence=0.40, sample='local texture,texcoords = PopupHandler:GetNCTextureInfo(popup.type)'},
  },
  ['QueuePop'] = {
    {name='QueuePop', count=3, confidence=0.60, sample='ZGV:ScheduleTimer(function() ZGV.PopupHandler:QueuePop() end,2) --pop the next popup in the queue.'},
  },
  ['Settings'] = {
    {name='Settings', count=2, confidence=0.40, sample='function Popup.private:Settings(popup)'},
  },
  ['SetToggle'] = {
    {name='SetToggle', count=10, confidence=1.00, sample=':SetToggle(true)'},
  },
  ['ReturnToast'] = {
    {name='ReturnToast', count=2, confidence=0.40, sample='popup.minimize:SetScript("OnClick",function() popup.private:Minimize(popup) PopupHandler:ReturnToast() end)'},
  },
  ['SavedShow'] = {
    {name='SavedShow', count=1, confidence=0.20, sample='popup:SavedShow() --Show was overwrote and saved here.'},
  },
  ['AddStyle'] = {
    {name='AddStyle', count=6, confidence=1.00, sample='function SkinProto:AddStyle(id,name,inherit)'},
  },
  ['GetStyle'] = {
    {name='GetStyle', count=3, confidence=0.60, sample='function SkinProto:GetStyle(id)'},
  },
  ['AddSkin'] = {
    {name='AddSkin', count=2, confidence=0.40, sample='function ZGV.Skins:AddSkin(id,name,inherit)'},
  },
  ['GetSkin'] = {
    {name='GetSkin', count=10, confidence=1.00, sample='function ZGV.Skins:GetSkin(id)'},
  },
  ['AddStyleToBlizzardScrollBar'] = {
    {name='AddStyleToBlizzardScrollBar', count=2, confidence=0.40, sample='function ZGV.Skins:AddStyleToBlizzardScrollBar(scrollbar)'},
  },
  ['GetProp'] = {
    {name='GetProp', count=3, confidence=0.60, sample='function StyleProto:GetProp(propertyname,...)'},
  },
  ['SetDisabledTexture'] = {
    {name='SetDisabledTexture', count=29, confidence=1.00, sample='if not button:GetDisabledTexture() then button:SetDisabledTexture("dummy") end'},
  },
  ['SetMapID'] = {
    {name='SetMapID', count=1, confidence=0.20, sample='WorldMapFrame:SetMapID(arrowpoint.m);'},
  },
  ['DestinationWaypoint'] = {
    {name='Pointer.DestinationWaypoint', count=1, confidence=0.20, sample='ZGV:Debug("&waypoints Finding path to: Pointer.DestinationWaypoint (there are manual points)")'},
  },
  ['QueueProcess'] = {
    {name='QueueProcess', count=3, confidence=0.60, sample='ZGV.WorldQuests:QueueProcess()'},
  },
  ['SetupMenuArray'] = {
    {name='SetupMenuArray', count=2, confidence=0.40, sample='function WW:SetupMenuArray()'},
  },
  ['FindMailbox'] = {
    {name='FindMailbox', count=2, confidence=0.40, sample='{text="Mailbox",icon="Interface\\Minimap\\Tracking\\Mailbox",func = function() ZGV.WhoWhere:FindMailbox() CloseDropDownForks() end},'},
  },
  ['CreateWorkerFrame'] = {
    {name='CreateWorkerFrame', count=2, confidence=0.40, sample='function WW:CreateWorkerFrame()'},
  },
  ['CalcStep'] = {
    {name='CalcStep', count=1, confidence=0.20, sample='local function CalcStep()'},
  },
  ['CalcThread_Direct'] = {
    {name='CalcThread_Direct', count=1, confidence=0.20, sample='local function CalcThread_Direct()'},
  },
  ['FindNPC_Direct'] = {
    {name='FindNPC_Direct', count=2, confidence=0.40, sample='WW:FindNPC_Direct(typ)'},
  },
  ['CalcMailboxThread'] = {
    {name='CalcMailboxThread', count=1, confidence=0.20, sample='local function CalcMailboxThread()'},
  },
  ['LeechLibRover'] = {
    {name='LeechLibRover', count=1, confidence=0.20, sample='function WW:LeechLibRover()'},
  },
  ['InteractionStart'] = {
    {name='InteractionStart', count=1, confidence=0.20, sample='function WW:InteractionStart(_,interactionID)'},
  },
  ['InteractionEnd'] = {
    {name='InteractionEnd', count=1, confidence=0.20, sample='function WW:InteractionEnd()'},
  },
  ['DragStart'] = {
    {name='DragStart', count=2, confidence=0.40, sample='local function DragStart(self)'},
  },
  ['GetAttribute'] = {
    {name='GetAttribute', count=67, confidence=1.00, sample='local objtype = self:GetAttribute("type")'},
  },
  ['PickupItem'] = {
    {name='C_Item.PickupItem', count=3, confidence=0.60, sample='C_Item.PickupItem(object)'},
  },
  ['PickupPetAction'] = {
    {name='PickupPetAction', count=2, confidence=0.40, sample='PickupPetAction(object)'},
  },
  ['PickupSpell'] = {
    {name='PickupSpell', count=2, confidence=0.40, sample='PickupSpell(object)'},
  },
  ['SetMouseClickEnabled'] = {
    {name='SetMouseClickEnabled', count=7, confidence=1.00, sample='frame:SetMouseClickEnabled(false)'},
  },
  ['SetActionButtonsQueued'] = {
    {name='SetActionButtonsQueued', count=2, confidence=0.40, sample='ActionBar:SetActionButtonsQueued()'},
  },
  ['ReanchorButtons'] = {
    {name='ReanchorButtons', count=5, confidence=1.00, sample='ActionBar:ReanchorButtons()'},
  },
  ['SetButton'] = {
    {name='SetButton', count=5, confidence=1.00, sample='ZGV.ActionBar:SetButton(data[1],data[2],data[3],counter)'},
  },
  ['SavePosition'] = {
    {name='SavePosition', count=7, confidence=1.00, sample='ActionBar:SavePosition()'},
    {name='LibWindow.SavePosition', count=9, confidence=1.00, sample='LibWindow.SavePosition(pluginContainerFrame)'},
  },
  ['ShowDisabledOverlay'] = {
    {name='ShowDisabledOverlay', count=1, confidence=0.20, sample='function ActionBar:ShowDisabledOverlay()'},
  },
  ['PoolInit'] = {
    {name='ActionBar.PoolInit', count=1, confidence=0.20, sample='if not ZGV.IsRetail and freshbutton then ActionBar.PoolInit(button) end -- classic does not have custom creationFunc yet, need to call it by hand'},
  },
  ['GetMacroBody'] = {
    {name='GetMacroBody', count=1, confidence=0.20, sample='macro_text = GetMacroBody(object)'},
  },
  ['DoEmote'] = {
    {name='DoEmote', count=485, confidence=1.00, sample='macro_tooltip = macro_text:match("\"(.*)\"") -- /run DoEmote("blah") -> blah'},
  },
  ['MCM'] = {
    {name='MCM', count=3, confidence=0.60, sample='macro_text = (macro_name and "#showtooltip "..macro_name.."\n" or "").."/run ZGV:MCM(4)\n/cleartarget\n/target "..name.."\n/run ZGV:MRM()"'},
  },
  ['GetSkillDataByName'] = {
    {name='GetSkillDataByName', count=2, confidence=0.40, sample='local skilldata = ZGV.Professions:GetSkillDataByName(object.tradeskill)'},
  },
  ['GetTradeSkillTexture'] = {
    {name='C_TradeSkillUI.GetTradeSkillTexture', count=1, confidence=0.20, sample='macro_texture = C_TradeSkillUI.GetTradeSkillTexture(skilldata.skill)'},
  },
  ['OpenTradeSkill'] = {
    {name='C_TradeSkillUI.OpenTradeSkill', count=3, confidence=0.60, sample='macro_text = (macro_name and "#showtooltip "..macro_name.."\n" or "").."/run C_TradeSkillUI.OpenTradeSkill("..skilldata.parent..")"'},
  },
  ['CreateGoaltype'] = {
    {name='CreateGoaltype', count=3, confidence=0.60, sample='macro_text = (macro_name and "#showtooltip "..macro_name.."\n" or "").."/run ZGV.ActionBar:CreateGoaltype("..ActionBar.creategoal..")"'},
  },
  ['PoolOverlayInit'] = {
    {name='ActionBar.PoolOverlayInit', count=1, confidence=0.20, sample='if not ZGV.IsRetail and freshoverlay then ActionBar.PoolOverlayInit(overlay) end -- classic does not have creationFunc yet, need to call it by hand'},
  },
  ['PoolResetter'] = {
    {name='ActionBar.PoolResetter', count=1, confidence=0.20, sample='for _,button in ipairs(ActionBar.KeyboundButtons) do ActionBar.PoolResetter(nil,button) end'},
  },
  ['SetSpellByID'] = {
    {name='SetSpellByID', count=14, confidence=1.00, sample='GameTooltip:SetSpellByID(button:GetAttribute("spellid"))'},
  },
  ['SetPetAction'] = {
    {name='SetPetAction', count=5, confidence=1.00, sample='GameTooltip:SetPetAction(button:GetAttribute("petid"))'},
  },
  ['GetOwner'] = {
    {name='GetOwner', count=18, confidence=1.00, sample='if (GameTooltip:GetOwner()==self) then'},
  },
  ['UpdateCooldown'] = {
    {name='UpdateCooldown', count=5, confidence=1.00, sample='self:UpdateCooldown()'},
  },
  ['GetItemCooldown'] = {
    {name='C_Container.GetItemCooldown', count=5, confidence=1.00, sample='starts,dur,ends = C_Container.GetItemCooldown(button:GetAttribute("itemid"))'},
    {name='ZGV.F.GetItemCooldown', count=1, confidence=0.20, sample='function ZGV.F.GetItemCooldown(itemID)'},
    {name='C_Item.GetItemCooldown', count=1, confidence=0.20, sample='function C_Item.GetItemCooldown() end'},
  },
  ['GetPetActionCooldown'] = {
    {name='GetPetActionCooldown', count=3, confidence=0.60, sample='starts,dur,ends = GetPetActionCooldown(button:GetAttribute("petid"))'},
  },
  ['SetDrawSwipe'] = {
    {name='SetDrawSwipe', count=4, confidence=0.80, sample='self.cooldown:SetDrawSwipe(true);'},
  },
  ['CooldownFrame_Set'] = {
    {name='CooldownFrame_Set', count=4, confidence=0.80, sample='CooldownFrame_Set(self.cooldown, starts,dur,ends)'},
  },
  ['Gossip'] = {
    {name='Gossip', count=2, confidence=0.40, sample='ZGV:AddEventHandler("GOSSIP_SHOW",function(...) return QuestAuto:Gossip(...) end)'},
    {name='QuestAuto.Gossip', count=2, confidence=0.40, sample='QuestAuto.Gossip(ZGV)'},
  },
  ['Greeting'] = {
    {name='Greeting', count=2, confidence=0.40, sample='ZGV:AddEventHandler("QUEST_GREETING",function(...) return QuestAuto:Greeting(...) end)'},
  },
  ['Detail'] = {
    {name='Detail', count=2, confidence=0.40, sample='ZGV:AddEventHandler("QUEST_DETAIL",function(...) return QuestAuto:Detail(...) end)'},
    {name='QuestAuto.Detail', count=1, confidence=0.20, sample='QuestAuto.Detail(ZGV)'},
  },
  ['Progress'] = {
    {name='Progress', count=2, confidence=0.40, sample='ZGV:AddEventHandler("QUEST_PROGRESS",function(...) return QuestAuto:Progress(...) end)'},
    {name='QuestAuto.Progress', count=1, confidence=0.20, sample='QuestAuto.Progress(ZGV)'},
  },
  ['Complete'] = {
    {name='Complete', count=3, confidence=0.60, sample='ZGV:AddEventHandler("QUEST_COMPLETE",function(...) return QuestAuto:Complete(...) end)'},
    {name='QuestAuto.Complete', count=1, confidence=0.20, sample='QuestAuto.Complete(ZGV)'},
  },
  ['Finished'] = {
    {name='Finished', count=2, confidence=0.40, sample='ZGV:AddEventHandler("QUEST_FINISHED",function(...) return QuestAuto:Finished(...) end)'},
  },
  ['Accepted'] = {
    {name='Accepted', count=2, confidence=0.40, sample='ZGV:AddEventHandler("QUEST_ACCEPTED",function(...) return QuestAuto:Accepted(...) end)'},
  },
  ['Retry'] = {
    {name='Retry', count=1, confidence=0.20, sample='function QuestAuto:Retry()'},
  },
  ['SelectAvailableQuest'] = {
    {name='C_GossipInfo.SelectAvailableQuest', count=2, confidence=0.40, sample='C_GossipInfo.SelectAvailableQuest(questInfo.questID)'},
    {name='SelectAvailableQuest', count=2, confidence=0.40, sample='SelectAvailableQuest(qnum)'},
  },
  ['SelectActiveQuest'] = {
    {name='C_GossipInfo.SelectActiveQuest', count=2, confidence=0.40, sample='C_GossipInfo.SelectActiveQuest(questInfo.questID)'},
    {name='SelectActiveQuest', count=2, confidence=0.40, sample='SelectActiveQuest(qnum)'},
  },
  ['QuestDetailAcceptButton_OnClick'] = {
    {name='QuestDetailAcceptButton_OnClick', count=3, confidence=0.60, sample='QuestDetailAcceptButton_OnClick()'},
  },
  ['GetQuestReward'] = {
    {name='GetQuestReward', count=4, confidence=0.80, sample='GetQuestReward(max(QuestInfoFrame.itemChoice,1))'},
  },
  ['CompleteQuest'] = {
    {name='CompleteQuest', count=2, confidence=0.40, sample='CompleteQuest()'},
  },
  ['QuestInfoItem_OnClick'] = {
    {name='QuestInfoItem_OnClick', count=1, confidence=0.20, sample='QuestInfoItem_OnClick(button)'},
  },
  ['GetNumActiveQuests'] = {
    {name='GetNumActiveQuests', count=1, confidence=0.20, sample='for qnum=1,GetNumActiveQuests() do'},
  },
  ['GetActiveTitle'] = {
    {name='GetActiveTitle', count=1, confidence=0.20, sample='queststurnin[qnum] = GetActiveTitle(qnum)'},
  },
  ['GetActiveQuestID'] = {
    {name='GetActiveQuestID', count=1, confidence=0.20, sample='local questID = GetActiveQuestID(qnum)'},
  },
  ['If_Complete_achieveid'] = {
    {name='If_Complete_achieveid', count=2, confidence=0.40, sample='function Guide:If_Complete_achieveid()'},
  },
  ['If_Complete_mounts'] = {
    {name='If_Complete_mounts', count=2, confidence=0.40, sample='function Guide:If_Complete_mounts()'},
  },
  ['If_Complete_pets'] = {
    {name='If_Complete_pets', count=2, confidence=0.40, sample='function Guide:If_Complete_pets()'},
  },
  ['GetCompletionText'] = {
    {name='GetCompletionText', count=1, confidence=0.20, sample='function Guide:GetCompletionText(mode)'},
  },
  ['Load'] = {
    {name='Load', count=2, confidence=0.40, sample='function Guide:Load(step)'},
    {name='Ejc.Load', count=1, confidence=0.20, sample='function Ejc.Load()'},
  },
  ['GetFutureGuides'] = {
    {name='GetFutureGuides', count=1, confidence=0.20, sample='function Guide:GetFutureGuides()'},
  },
  ['HasProfession'] = {
    {name='HasProfession', count=1, confidence=0.20, sample='function Guide:HasProfession() --Real quick and dirty check to see if this profession guide works for us.'},
  },
  ['IsPlayerInCombat'] = {
    {name='IsPlayerInCombat', count=4, confidence=0.80, sample='if delay and ZGV:IsPlayerInCombat() then'},
  },
  ['LegionPopup'] = {
    {name='LegionPopup', count=3, confidence=0.60, sample='function Guide:LegionPopup(title,message,level)'},
  },
  ['GetFirstValidStep'] = {
    {name='GetFirstValidStep', count=5, confidence=1.00, sample='function Guide:GetFirstValidStep(start)'},
  },
  ['GetParentFolder'] = {
    {name='GetParentFolder', count=1, confidence=0.20, sample='function Guide:GetParentFolder()'},
  },
  ['LayoutFull'] = {
    {name='ReloadPopup.LayoutFull', count=1, confidence=0.20, sample='function self.ReloadPopup.LayoutFull() end'},
  },
  ['SuggestPreviousGuide'] = {
    {name='SuggestPreviousGuide', count=2, confidence=0.40, sample='function GuideFuncs:SuggestPreviousGuide(prevguide)'},
  },
  ['CheckIfEvent'] = {
    {name='CheckIfEvent', count=2, confidence=0.40, sample='function GuideFuncs:CheckIfEvent()'},
  },
  ['IsDungeon'] = {
    {name='IsDungeon', count=3, confidence=0.60, sample='function GuideFuncs:IsDungeon()'},
  },
  ['ToggleViewer'] = {
    {name='ToggleViewer', count=2, confidence=0.40, sample='function GuideFuncs:ToggleViewer()'},
  },
  ['IsGuideBanned'] = {
    {name='IsGuideBanned', count=2, confidence=0.40, sample='function GuideFuncs:IsGuideBanned(title)'},
  },
  ['VerifyKeyIntegrity'] = {
    {name='VerifyKeyIntegrity', count=3, confidence=0.60, sample='ZGV.Licence:VerifyKeyIntegrity(ZGV.registered_guide_key)'},
  },
  ['CloneTable'] = {
    {name='ZGV.CloneTable', count=1, confidence=0.20, sample='function ZGV.CloneTable (subj,into)'},
    {name='CloneTable', count=5, confidence=1.00, sample='local function CloneTable(tab)'},
  },
  ['MergeTable'] = {
    {name='ZGV.MergeTable', count=3, confidence=0.60, sample='function ZGV.MergeTable (subj,into)'},
  },
  ['MOVE'] = {
    {name='ZGV.MOVE', count=1, confidence=0.20, sample='function ZGV.MOVE(frame)'},
  },
  ['GetMouseFocus'] = {
    {name='GetMouseFocus', count=3, confidence=0.60, sample='frame = GetMouseFocus()'},
  },
  ['RotatePair'] = {
    {name='ZGV.RotatePair', count=1, confidence=0.20, sample='function ZGV.RotatePair(x,y,ox,oy,a,asp)'},
  },
  ['RotateTex'] = {
    {name='ZGV.RotateTex', count=3, confidence=0.60, sample='function ZGV.RotateTex(self, angle)'},
  },
  ['AnimRotOnUpdate'] = {
    {name='ZGV.AnimRotOnUpdate', count=1, confidence=0.20, sample='function ZGV.AnimRotOnUpdate(self,step)'},
  },
  ['AnimRotOnUpdate2'] = {
    {name='ZGV.AnimRotOnUpdate2', count=1, confidence=0.20, sample='function ZGV.AnimRotOnUpdate2(self)'},
  },
  ['CreateTextureWithCoords'] = {
    {name='CreateTextureWithCoords', count=2, confidence=0.40, sample='local function CreateTextureWithCoords(parent,texture,l,r,u,d,blend,flip)'},
  },
  ['SetNPHtx'] = {
    {name='ZGV.F.SetNPHtx', count=1, confidence=0.20, sample='function ZGV.F.SetNPHtx(but,n,p,h)'},
  },
  ['CreateTexWithCoordsNum'] = {
    {name='CreateTexWithCoordsNum', count=5, confidence=1.00, sample='local function CreateTexWithCoordsNum(obj,tx,x,w,y,h,flip)'},
  },
  ['GetProgress'] = {
    {name='GetProgress', count=1, confidence=0.20, sample='local progress = 1.0 - self:GetProgress()'},
  },
  ['Benchmark'] = {
    {name='ZGV.Benchmark', count=1, confidence=0.20, sample='function ZGV.Benchmark(f,n)'},
  },
  ['FixDropDownMenuFrameLevelBug'] = {
    {name='FixDropDownMenuFrameLevelBug', count=1, confidence=0.20, sample='function FixDropDownMenuFrameLevelBug()'},
  },
  ['FixDropDownMenuFrameLevelBug_List_OnShow'] = {
    {name='FixDropDownMenuFrameLevelBug_List_OnShow', count=1, confidence=0.20, sample='function FixDropDownMenuFrameLevelBug_List_OnShow(self)'},
  },
  ['BigFixDropDownMenuFrameLevelBug'] = {
    {name='BigFixDropDownMenuFrameLevelBug', count=1, confidence=0.20, sample='local function BigFixDropDownMenuFrameLevelBug()'},
  },
  ['WrapperCall'] = {
    {name='WrapperCall', count=1, confidence=0.20, sample='local function WrapperCall(self,...)'},
  },
  ['ChainInternalCall'] = {
    {name='ChainInternalCall', count=1, confidence=0.20, sample='local function ChainInternalCall(self,fun)'},
  },
  ['ChainCallClean'] = {
    {name='ZGV.ChainCallClean', count=1, confidence=0.20, sample='function ZGV.ChainCallClean(obj)'},
  },
  ['AllCall'] = {
    {name='ZGV.AllCall', count=1, confidence=0.20, sample='function ZGV.AllCall(arr)'},
  },
  ['AllWrapperCall'] = {
    {name='AllWrapperCall', count=1, confidence=0.20, sample='local function AllWrapperCall(self,...)'},
  },
  ['AllSetter'] = {
    {name='AllSetter', count=1, confidence=0.20, sample='local function AllSetter(self,key,val)'},
  },
  ['AllChainInternalCall'] = {
    {name='AllChainInternalCall', count=1, confidence=0.20, sample='local function AllChainInternalCall(self,fun)'},
  },
  ['AllCallClean'] = {
    {name='ZGV.AllCallClean', count=1, confidence=0.20, sample='function ZGV.AllCallClean(obj)'},
  },
  ['ShowIf'] = {
    {name='ShowIf', count=6, confidence=1.00, sample='local function ShowIf(self,b) if b then self:Show() else self:Hide() end end'},
  },
  ['EnableIf'] = {
    {name='EnableIf', count=6, confidence=1.00, sample='local function EnableIf(self,b) if b then self:Enable() else self:Disable() end end'},
  },
  ['ZGV_ShowManyLines'] = {
    {name='ZGV_ShowManyLines', count=1, confidence=0.20, sample='function GameTooltip:ZGV_ShowManyLines(lines)'},
  },
  ['ArrayToStringColor'] = {
    {name='ZGV.ArrayToStringColor', count=4, confidence=0.80, sample='function ZGV.ArrayToStringColor(array)'},
  },
  ['TableProduct'] = {
    {name='ZGV.TableProduct', count=1, confidence=0.20, sample='function ZGV.TableProduct(tabs)'},
  },
  ['OrderedPairsCleanup'] = {
    {name='ZGV.OrderedPairsCleanup', count=1, confidence=0.20, sample='function ZGV.OrderedPairsCleanup(t)'},
  },
  ['OrderedPairsCleanFast'] = {
    {name='ZGV.OrderedPairsCleanFast', count=2, confidence=0.40, sample='function ZGV.OrderedPairsCleanFast(t,indextemp,indexrevtemp)'},
  },
  ['CoroNext'] = {
    {name='CoroNext', count=1, confidence=0.20, sample='local function CoroNext(wrappedT,not_state)'},
  },
  ['CoroPairs'] = {
    {name='ZGV.CoroPairs', count=5, confidence=1.00, sample='function ZGV.CoroPairs(T,corofun)'},
  },
  ['GetFollowers'] = {
    {name='C_Garrison.GetFollowers', count=2, confidence=0.40, sample='if not C_Garrison.GetFollowers() then return false end'},
  },
  ['GetBuildings'] = {
    {name='C_Garrison.GetBuildings', count=1, confidence=0.20, sample='for i,building in ipairs(C_Garrison.GetBuildings(garr60)) do'},
  },
  ['GetOwnedBuildingInfo'] = {
    {name='C_Garrison.GetOwnedBuildingInfo', count=2, confidence=0.40, sample='local id, name, texPrefix, icon, description, rank, currencyID, currencyQty, goldQty, buildTime, needsPlan, isPrebuilt, possSpecs, upgrades, canUpgrade, isMaxLevel, hasFollowerSlot, knownSpecs, currSpec, specCooldown, isBuilding, startTime, buildDuration, timeLeftStr, canActivate = C_Garrison.GetOwnedBuildingInfo(building.plotID)'},
  },
  ['Garrison_GetBuildingLocation'] = {
    {name='ZGV.Garrison_GetBuildingLocation', count=33, confidence=1.00, sample='function ZGV.Garrison_GetBuildingLocation(id_or_name)'},
  },
  ['GetPlots'] = {
    {name='C_Garrison.GetPlots', count=2, confidence=0.40, sample='if not C_Garrison.GetPlots(follower60) then return false end'},
  },
  ['MSG'] = {
    {name='MSG', count=1, confidence=0.20, sample='local msg = event:match("MSG (.+)")'},
  },
  ['RegisterMessage'] = {
    {name='RegisterMessage', count=3, confidence=0.60, sample='ZGV:RegisterMessage(event,function(...) if arg then aFunction(arg,...) else aFunction(...) end  ZGV:UnregisterMessage(event) end)'},
    {name='BigWigs.RegisterMessage', count=1, confidence=0.20, sample='BigWigs.RegisterMessage(addon, "BigWigs_Message")'},
    {name='BigWigsLoader.RegisterMessage', count=8, confidence=1.00, sample='BigWigsLoader.RegisterMessage (Details, "BigWigs_SetStage")'},
  },
  ['UnregisterMessage'] = {
    {name='UnregisterMessage', count=1, confidence=0.20, sample='ZGV:RegisterMessage(event,function(...) if arg then aFunction(arg,...) else aFunction(...) end  ZGV:UnregisterMessage(event) end)'},
  },
  ['TimedDelayedRun'] = {
    {name='TimedDelayedRun', count=1, confidence=0.20, sample='function ZGV:TimedDelayedRun(waitTime, aFunction, arg)'},
  },
  ['OnUpdateHandler'] = {
    {name='OnUpdateHandler', count=2, confidence=0.40, sample='local function OnUpdateHandler()'},
  },
  ['OnEventHandler'] = {
    {name='OnEventHandler', count=2, confidence=0.40, sample='local function OnEventHandler(self, event, ...)'},
  },
  ['GetItemInfoWipe'] = {
    {name='GetItemInfoWipe', count=1, confidence=0.20, sample='function ZGV:GetItemInfoWipe()'},
  },
  ['PurgeItemCache'] = {
    {name='PurgeItemCache', count=1, confidence=0.20, sample='function ZGV:PurgeItemCache()'},
  },
  ['GET_ITEM_INFO_RECEIVED'] = {
    {name='GET_ITEM_INFO_RECEIVED', count=1, confidence=0.20, sample='function ZGV:GET_ITEM_INFO_RECEIVED(event,id,success)'},
  },
  ['ExpireItemCache'] = {
    {name='ExpireItemCache', count=2, confidence=0.40, sample='function ZGV:ExpireItemCache()'},
  },
  ['DebugMap'] = {
    {name='DebugMap', count=1, confidence=0.20, sample='function ZGV:DebugMap()'},
  },
  ['DungeonUsesTerrainMap'] = {
    {name='DungeonUsesTerrainMap', count=2, confidence=0.40, sample='s = s .. "DungeonUsesTerrainMap() = N/I\n"--..tostring(DungeonUsesTerrainMap()).."\n"'},
  },
  ['GetCurrentMapZone'] = {
    {name='GetCurrentMapZone', count=2, confidence=0.40, sample='s = s .. "GetCurrentMapZone() = N/I\n"--..konkat({GetCurrentMapZone()},5).."\n"'},
  },
  ['UIFrameFade'] = {
    {name='ZGV.UIFrameFade.UIFrameFade', count=3, confidence=0.60, sample='function ZGV.UIFrameFade.UIFrameFade(frame, fadeInfo)'},
  },
  ['UIFrameFadeRemoveFrame'] = {
    {name='ZGV.UIFrameFade.UIFrameFadeRemoveFrame', count=2, confidence=0.40, sample='function ZGV.UIFrameFade.UIFrameFadeRemoveFrame(frame)'},
  },
  ['UIFrameFade_OnUpdate'] = {
    {name='ZGV.UIFrameFade.UIFrameFade_OnUpdate', count=1, confidence=0.20, sample='function ZGV.UIFrameFade.UIFrameFade_OnUpdate(self, elapsed)'},
  },
  ['UIFrameIsFading'] = {
    {name='ZGV.UIFrameFade.UIFrameIsFading', count=1, confidence=0.20, sample='function ZGV.UIFrameFade.UIFrameIsFading(frame)'},
  },
  ['MatchID'] = {
    {name='IL.MatchID', count=1, confidence=0.20, sample='function IL.MatchID(itemlink1,itemlink2)'},
  },
  ['Strip'] = {
    {name='IL.Strip', count=1, confidence=0.20, sample='function IL.Strip(itemlink)'},
  },
  ['ProcessItemLink'] = {
    {name='IL.ProcessItemLink', count=8, confidence=1.00, sample='function IL.ProcessItemLink(itemlink,keepDecor,...) --  (warning, potential small memory leak)'},
  },
  ['SetCurrentSpec'] = {
    {name='IL.SetCurrentSpec', count=1, confidence=0.20, sample='function IL.SetCurrentSpec(itemlink,keepDecor)'},
  },
  ['FixLink'] = {
    {name='IL.FixLink', count=1, confidence=0.20, sample='function IL.FixLink(itemlink)'},
  },
  ['Match'] = {
    {name='IL.Match', count=1, confidence=0.20, sample='function IL.Match(itemlink1,itemlink2)'},
  },
  ['ReplaceBonus'] = {
    {name='IL.ReplaceBonus', count=1, confidence=0.20, sample='function IL.ReplaceBonus(itemlink,oldbonusid,newbonusid)'},
  },
  ['GetChatLink'] = {
    {name='IL.GetChatLink', count=2, confidence=0.40, sample='function IL.GetChatLink(itemlink)'},
  },
  ['CheckLicence'] = {
    {name='CheckLicence', count=1, confidence=0.20, sample='function ZGV.Licence:CheckLicence(guide)'},
  },
  ['ShowExpiredPopup'] = {
    {name='ShowExpiredPopup', count=6, confidence=1.00, sample='if not guide then return ZGV.Licence:ShowExpiredPopup(0) end -- no guide provided'},
  },
  ['GetType'] = {
    {name='GetType', count=5, confidence=1.00, sample='if not ZGV.Licence:GetType(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide type'},
  },
  ['GetSubtype'] = {
    {name='GetSubtype', count=2, confidence=0.40, sample='if not ZGV.Licence:GetSubtype(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide expansion'},
  },
  ['GetSide'] = {
    {name='GetSide', count=2, confidence=0.40, sample='if not ZGV.Licence:GetSide(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide expansion'},
  },
  ['GetKey'] = {
    {name='GetKey', count=2, confidence=0.40, sample='if not ZGV.Licence:VerifyKeyIntegrity(ZGV.Licence:GetKey(guide)) then return ZGV.Licence:ShowExpiredPopup(2) end'},
  },
  ['VerifyKeyExpiration'] = {
    {name='VerifyKeyExpiration', count=2, confidence=0.40, sample='if not ZGV.Licence:VerifyKeyExpiration(ZGV.Licence:GetKey(guide)) then return ZGV.Licence:ShowExpiredPopup(3) end'},
  },
  ['GetBitmask'] = {
    {name='GetBitmask', count=2, confidence=0.40, sample='local key2,crc1,crc2,crc3,True,False = bit.rshift(key,GenericZygorLicenceEngine:GetBitmask()),key:sub(19,21),key:sub(22,26),"",false,true'},
  },
  ['Check'] = {
    {name='Check', count=1, confidence=0.20, sample='if GenericZygorLicenceEngine and GenericZygorLicenceEngine:Check(key) then return true end'},
  },
  ['Expired'] = {
    {name='Expired', count=1, confidence=0.20, sample='if GenericZygorLicenceEngine and GenericZygorLicenceEngine:Expired(key) then return true end'},
  },
  ['CheckExpirationPopup'] = {
    {name='CheckExpirationPopup', count=2, confidence=0.40, sample='function ZGV.Licence:CheckExpirationPopup()'},
  },
  ['CheckExpirationWarning'] = {
    {name='CheckExpirationWarning', count=2, confidence=0.40, sample='function ZGV.Licence:CheckExpirationWarning()'},
  },
  ['MinimizeStack'] = {
    {name='ZGV.MinimizeStack', count=2, confidence=0.40, sample='function ZGV.MinimizeStack(stack)'},
  },
  ['Start'] = {
    {name='Start', count=9, confidence=1.00, sample='function ZGV.Profiler:Start(tag)'},
    {name='Details222.TimeMachine.Start', count=2, confidence=0.40, sample='Details222.TimeMachine.Start()'},
    {name='AuraScan.Start', count=1, confidence=0.20, sample='function AuraScan.Start()'},
    {name='Details222.TimeCapture.Start', count=2, confidence=0.40, sample='Details222.TimeCapture.Start(Details.playername, DETAILS_ATTRIBUTE_DAMAGE)'},
  },
  ['Store'] = {
    {name='Store', count=2, confidence=0.40, sample='function ZGV.Profiler:Store(tag,mem,cpu,time,cycles)'},
  },
  ['WMU_Suspend'] = {
    {name='ZGV.WMU_Suspend', count=6, confidence=1.00, sample='function ZGV.WMU_Suspend()'},
  },
  ['GetFramesRegisteredForEvent'] = {
    {name='GetFramesRegisteredForEvent', count=1, confidence=0.20, sample='wmuRegistry = {GetFramesRegisteredForEvent("WORLD_MAP_UPDATE")}'},
  },
  ['WMU_Resume'] = {
    {name='ZGV.WMU_Resume', count=6, confidence=1.00, sample='function ZGV.WMU_Resume()'},
  },
  ['IsSavedBossDead'] = {
    {name='ZGV.IsSavedBossDead', count=1, confidence=0.20, sample='function ZGV.IsSavedBossDead(instanceid,bossbit)'},
  },
  ['RequestRaidInfo'] = {
    {name='RequestRaidInfo', count=1, confidence=0.20, sample='RequestRaidInfo()'},
  },
  ['GetNumSavedInstances'] = {
    {name='GetNumSavedInstances', count=1, confidence=0.20, sample='for i=1,GetNumSavedInstances() do'},
  },
  ['GetSavedInstanceChatLink'] = {
    {name='GetSavedInstanceChatLink', count=1, confidence=0.20, sample='local link = GetSavedInstanceChatLink(i)'},
  },
  ['Object'] = {
    {name='Object', count=1, confidence=0.20, sample='-- in: Object (ex: WorldMapFrame)'},
  },
  ['GetItemQuality'] = {
    {name='C_Item.GetItemQuality', count=2, confidence=0.40, sample='local quality = C_Item.GetItemQuality(item_location)'},
  },
  ['IsBound'] = {
    {name='C_Item.IsBound', count=2, confidence=0.40, sample='return C_Item.IsBound(item_location),quality==item_quality_heirloom or quality==item_quality_wowtoken'},
  },
  ['SimpleThreadFrame_OnUpdate'] = {
    {name='SimpleThreadFrame_OnUpdate', count=1, confidence=0.20, sample='local function SimpleThreadFrame_OnUpdate(frame,elapsed)'},
  },
  ['RunCycle'] = {
    {name='RunCycle', count=1, confidence=0.20, sample='promise:RunCycle()'},
  },
  ['Timerize'] = {
    {name='Timerize', count=2, confidence=0.40, sample='function ZGV:Timerize(func,...)'},
  },
  ['Then'] = {
    {name='Then', count=10, confidence=1.00, sample=':Then(function(...) print("success!",...) end)'},
  },
  ['Catch'] = {
    {name='Catch', count=6, confidence=1.00, sample=':Catch(function(...) print("failure!",...) end)'},
  },
  ['Finally'] = {
    {name='Finally', count=8, confidence=1.00, sample=':Finally(function(...) print("finally.",...) end)'},
  },
  ['Defer'] = {
    {name='Defer', count=7, confidence=1.00, sample='function ZGV.Promise:Defer(func)'},
  },
  ['Resolve'] = {
    {name='Resolve', count=5, confidence=1.00, sample='if self.next then return self.next:Resolve(unpack(rets)) end'},
  },
  ['DoFinally'] = {
    {name='DoFinally', count=3, confidence=0.60, sample='self:DoFinally()'},
  },
  ['Reject'] = {
    {name='Reject', count=5, confidence=1.00, sample='if self.next then return self.next:Reject(unpack(rets)) end'},
  },
  ['Promisify'] = {
    {name='Promisify', count=2, confidence=0.40, sample='function ZGV.Promise:Promisify(func)'},
  },
  ['PromisifyTestDefer'] = {
    {name='PromisifyTestDefer', count=5, confidence=1.00, sample='function ZGV.Promise:PromisifyTestDefer(func)'},
  },
  ['PromisifyTest1'] = {
    {name='PromisifyTest1', count=1, confidence=0.20, sample='function ZGV.Promise:PromisifyTest1()'},
  },
  ['PromisifyTest1b'] = {
    {name='PromisifyTest1b', count=1, confidence=0.20, sample='function ZGV.Promise:PromisifyTest1b()'},
  },
  ['PromisifyTest2'] = {
    {name='PromisifyTest2', count=1, confidence=0.20, sample='function ZGV.Promise:PromisifyTest2()'},
  },
  ['PromisifyTest3'] = {
    {name='PromisifyTest3', count=1, confidence=0.20, sample='function ZGV.Promise:PromisifyTest3()'},
  },
  ['PromiseTest1'] = {
    {name='PromiseTest1', count=1, confidence=0.20, sample='function ZGV.Promise:PromiseTest1()'},
  },
  ['PromiseTest2'] = {
    {name='PromiseTest2', count=1, confidence=0.20, sample='function ZGV.Promise:PromiseTest2()'},
  },
  ['PromiseTest3'] = {
    {name='PromiseTest3', count=1, confidence=0.20, sample='function ZGV.Promise:PromiseTest3()'},
  },
  ['PromiseTest4'] = {
    {name='PromiseTest4', count=1, confidence=0.20, sample='function ZGV.Promise:PromiseTest4()'},
  },
  ['PromiseTest5'] = {
    {name='PromiseTest5', count=1, confidence=0.20, sample='function ZGV.Promise:PromiseTest5()'},
  },
  ['GetNumPoints'] = {
    {name='GetNumPoints', count=13, confidence=1.00, sample='for i=1,frame:GetNumPoints() do  repeat'},
  },
  ['Try'] = {
    {name='ZGV.Try', count=2, confidence=0.40, sample='function ZGV.Try()'},
  },
  ['Try2'] = {
    {name='ZGV.Try2', count=2, confidence=0.40, sample='function ZGV.Try2(f,erf)'},
  },
  ['GetCurrentPath'] = {
    {name='ZGV.F.GetCurrentPath', count=3, confidence=0.60, sample='function ZGV.F.GetCurrentPath(n,full_results)'},
  },
  ['GetCurrentPath_Test'] = {
    {name='ZGV.F.GetCurrentPath_Test', count=1, confidence=0.20, sample='function ZGV.F.GetCurrentPath_Test()'},
  },
  ['CreateSprite'] = {
    {name='CreateSprite', count=2, confidence=0.40, sample='function Zygor_SpriteTexture_Mixin:CreateSprite(count,spr_w,spr_h,img_w,img_h)'},
  },
  ['SetBounce'] = {
    {name='SetBounce', count=2, confidence=0.40, sample='function Zygor_SpriteTexture_Mixin:SetBounce(mirror)'},
  },
  ['SetSpriteNum'] = {
    {name='SetSpriteNum', count=3, confidence=0.60, sample='function Zygor_SpriteTexture_Mixin:SetSpriteNum(num)'},
  },
  ['IsPlayerRole'] = {
    {name='ZGV.F.IsPlayerRole', count=1, confidence=0.20, sample='function ZGV.F.IsPlayerRole(role)'},
  },
  ['CutsceneCancel'] = {
    {name='ZGV.F.CutsceneCancel', count=1, confidence=0.20, sample='function ZGV.F.CutsceneCancel()'},
  },
  ['CinematicFrame_CancelCinematic'] = {
    {name='CinematicFrame_CancelCinematic', count=1, confidence=0.20, sample='CinematicFrame_CancelCinematic()'},
  },
  ['MovieCancel'] = {
    {name='ZGV.F.MovieCancel', count=1, confidence=0.20, sample='function ZGV.F.MovieCancel()'},
  },
  ['GameMovieFinished'] = {
    {name='GameMovieFinished', count=1, confidence=0.20, sample='if GameMovieFinished then GameMovieFinished() end'},
  },
  ['CinematicFinished'] = {
    {name='CinematicFinished', count=1, confidence=0.20, sample='if CinematicFinished then CinematicFinished(Enum.CinematicType.GameMovie, true) end'},
  },
  ['GetSecondsFromTime'] = {
    {name='ZGV.F.GetSecondsFromTime', count=7, confidence=1.00, sample='function ZGV.F.GetSecondsFromTime(timeobject)'},
  },
  ['ConvertSecondsToUnits'] = {
    {name='ConvertSecondsToUnits', count=1, confidence=0.20, sample='local units = ConvertSecondsToUnits(seconds or 0)'},
  },
  ['TrackKills'] = {
    {name='ZGV.F.TrackKills', count=1, confidence=0.20, sample='function ZGV.F.TrackKills(_,event,message)'},
  },
  ['GetXPExhaustion'] = {
    {name='GetXPExhaustion', count=1, confidence=0.20, sample='local restedXPBonus = (GetXPExhaustion() or 0)/2 -- function returns how much exp will be gained under rested, including normal exp gain. actual bonus is half of that'},
  },
  ['NewAddon'] = {
    {name='NewAddon', count=31, confidence=1.00, sample='LibStub("AceAddon-3.0"):NewAddon(ZygorGuidesViewer,addonName, "AceConsole-3.0","AceEvent-3.0","AceTimer-3.0","AceHook-3.0")'},
  },
  ['HasActiveSeason'] = {
    {name='C_Seasons.HasActiveSeason', count=5, confidence=1.00, sample='ZGV.IsClassicSoM =  C_Seasons and (ZGV.IsClassic and C_Seasons.HasActiveSeason() and C_Seasons.GetActiveSeason()==Enum.SeasonID.SeasonOfMastery)'},
  },
  ['GetActiveSeason'] = {
    {name='C_Seasons.GetActiveSeason', count=7, confidence=1.00, sample='ZGV.IsClassicSoM =  C_Seasons and (ZGV.IsClassic and C_Seasons.HasActiveSeason() and C_Seasons.GetActiveSeason()==Enum.SeasonID.SeasonOfMastery)'},
  },
  ['PlayerGetTimerunningSeasonID'] = {
    {name='PlayerGetTimerunningSeasonID', count=5, confidence=1.00, sample='ZGV.IsPandariaRemix =  PlayerGetTimerunningSeasonID and PlayerGetTimerunningSeasonID() == Constants.TimerunningConsts.TIMERUNNING_SEASON_PANDARIA'},
  },
  ['GetUnstrictLookupTable'] = {
    {name='GetUnstrictLookupTable', count=11, confidence=1.00, sample='local BZL = BZ:GetUnstrictLookupTable()'},
  },
  ['AceLibrary'] = {
    {name='AceLibrary', count=2, confidence=0.40, sample='--local Dewdrop = AceLibrary("Dewdrop-2.0")'},
  },
  ['SIS_Activate'] = {
    {name='SIS_Activate', count=1, confidence=0.20, sample='OnAccept = function(self) ZGV:SIS_Activate() end,'},
  },
  ['Punch'] = {
    {name='Punch', count=14, confidence=1.00, sample='ZGV.startuptimestamps:Punch("libs.xml start",___ZGV_TIMESTAMP_LOADLIBSXML_START)'},
  },
  ['SetCVar'] = {
    {name='SetCVar', count=2, confidence=0.40, sample='SetCVar("scriptProfile","0")'},
    {name='C_CVar.SetCVar', count=6, confidence=1.00, sample='--C_CVar.SetCVar("cameraDistanceMaxZoomFactor", 2.6)'},
  },
  ['WarnAboutDebugSettings'] = {
    {name='WarnAboutDebugSettings', count=2, confidence=0.40, sample='self:WarnAboutDebugSettings()'},
  },
  ['ClearRecentActivities'] = {
    {name='ClearRecentActivities', count=3, confidence=0.60, sample='self:ClearRecentActivities() -- just to make sure they're not nils'},
  },
  ['QuestRewardSelect'] = {
    {name='QuestRewardSelect', count=2, confidence=0.40, sample='if not ZGV.Expansion_Shadowlands then hooksecurefunc("SendQuestChoiceResponse",function(...) ZGV:QuestRewardSelect(...) end) end'},
  },
  ['PlayerChoiceResponce'] = {
    {name='PlayerChoiceResponce', count=2, confidence=0.40, sample='hooksecurefunc(C_PlayerChoice,"SendPlayerChoiceResponse",function(...) ZGV:PlayerChoiceResponce(...) end)'},
  },
  ['SetFontObject'] = {
    {name='SetFontObject', count=76, confidence=1.00, sample='ZGV.DebugFrame.text1 = ZGV.ChainCall(ZGV.DebugFrame:CreateFontString()) :SetPoint("TOPLEFT") :SetFontObject(SystemFont_Tiny) .__END'},
    {name='ItemBase.SetFontObject', count=1, confidence=0.20, sample='function ItemBase.SetFontObject(self, font)'},
  },
  ['StoreTelemetryBasics'] = {
    {name='StoreTelemetryBasics', count=2, confidence=0.40, sample='self:StoreTelemetryBasics()'},
  },
  ['HandleRaidmarker'] = {
    {name='ZGV.HandleRaidmarker', count=3, confidence=0.60, sample='self:AddEventHandler("UPDATE_MOUSEOVER_UNIT",function() ZGV.HandleRaidmarker("mouseover") end)'},
  },
  ['Hook_QuestChoice'] = {
    {name='Hook_QuestChoice', count=2, confidence=0.40, sample='self:Hook_QuestChoice()'},
  },
  ['SuggestGuideFromBlizzardIcon'] = {
    {name='SuggestGuideFromBlizzardIcon', count=3, confidence=0.60, sample='hooksecurefunc(pin,"OnMouseUp", function(pin,button) ZGV:SuggestGuideFromBlizzardIcon(pin) end)'},
  },
  ['EnumeratePinsByTemplate'] = {
    {name='EnumeratePinsByTemplate', count=4, confidence=0.80, sample='for pin,_ in WorldMapFrame:EnumeratePinsByTemplate(pintemplate) do register_for_suggestion(pin) end'},
  },
  ['ZGV_DEV'] = {
    {name='ZGV_DEV', count=1, confidence=0.20, sample='if ZGV_DEV then ZGV_DEV() end'},
  },
  ['SetBeta'] = {
    {name='SetBeta', count=2, confidence=0.40, sample='self:SetBeta()'},
  },
  ['OnDisable'] = {
    {name='OnDisable', count=9, confidence=1.00, sample='function ZGV:OnDisable()'},
  },
  ['UnregisterAllEvents'] = {
    {name='UnregisterAllEvents', count=12, confidence=1.00, sample='--	self:UnregisterAllEvents()'},
  },
  ['CompGroups'] = {
    {name='CompGroups', count=1, confidence=0.20, sample='local function CompGroups(a,b)'},
  },
  ['SortGroups'] = {
    {name='SortGroups', count=4, confidence=0.80, sample='local function SortGroups(group,recurse)'},
  },
  ['Startup_LoadGuides_Threaded'] = {
    {name='Startup_LoadGuides_Threaded', count=2, confidence=0.40, sample='function ZGV:Startup_LoadGuides_Threaded()'},
  },
  ['LoadInitialGuide'] = {
    {name='LoadInitialGuide', count=4, confidence=0.80, sample='self:LoadInitialGuide("fastload")'},
  },
  ['UpdateGuideMenuButton'] = {
    {name='UpdateGuideMenuButton', count=2, confidence=0.40, sample='--self:UpdateGuideMenuButton()'},
  },
  ['CheckGuideJumps'] = {
    {name='CheckGuideJumps', count=2, confidence=0.40, sample='self:CheckGuideJumps()'},
  },
  ['StartupModule_Threaded'] = {
    {name='StartupModule_Threaded', count=2, confidence=0.40, sample='function ZGV:StartupModule_Threaded(startup,timeleft)  -- resumed in _StartupThread. Returns when module is 100% done. May yield, or may let the module startup yield.'},
  },
  ['ErrorThrow'] = {
    {name='ErrorThrow', count=6, confidence=1.00, sample='if coroutine.status(startup.thread)~="suspended" then self:ErrorThrow("Error during initialization sequence: module '"..startup.name.."' didn't start") end'},
  },
  ['FixPhasedContinents'] = {
    {name='FixPhasedContinents', count=2, confidence=0.40, sample='ZGV.HBD:FixPhasedContinents()'},
  },
  ['SetMaxLines'] = {
    {name='SetMaxLines', count=2, confidence=0.40, sample='if ZGV.db.profile.debug and ChatFrame1 and ChatFrame1.SetMaxLines then ChatFrame1:SetMaxLines(2000) end'},
  },
  ['CacheMentionedFollowups'] = {
    {name='CacheMentionedFollowups', count=2, confidence=0.40, sample='self:CacheMentionedFollowups()'},
  },
  ['CatchEvent'] = {
    {name='CatchEvent', count=6, confidence=1.00, sample='self.Checklist:CatchEvent("_GUIDES_LOADED_")'},
  },
  ['ShowAnimatedPopup'] = {
    {name='ShowAnimatedPopup', count=2, confidence=0.40, sample='--if ZGV.AnimatePopup then ZGV:ShowAnimatedPopup() end -- if we have animated popup, show it'},
  },
  ['View'] = {
    {name='View', count=4, confidence=0.80, sample='function ZGV.startuptimes:View()'},
  },
  ['ViewStartupTimes'] = {
    {name='ViewStartupTimes', count=1, confidence=0.20, sample='function ZGV:ViewStartupTimes()'},
  },
  ['GetFramerate'] = {
    {name='GetFramerate', count=10, confidence=1.00, sample='if GetFramerate()<40 then ZGV.STARTUP_INTENSITY=5'},
  },
  ['Total'] = {
    {name='Total', count=2, confidence=0.40, sample='self.startuptimes['Total (realtime)']=debugprofilestop()-ZGV.timestamp_initing'},
  },
  ['LOADING_SCREEN_DISABLED'] = {
    {name='LOADING_SCREEN_DISABLED', count=1, confidence=0.20, sample='function ZGV:LOADING_SCREEN_DISABLED()'},
  },
  ['LOADING_SCREEN_ENABLED'] = {
    {name='LOADING_SCREEN_ENABLED', count=1, confidence=0.20, sample='function ZGV:LOADING_SCREEN_ENABLED()'},
  },
  ['CINEMATIC_START'] = {
    {name='CINEMATIC_START', count=1, confidence=0.20, sample='function ZGV:CINEMATIC_START()'},
  },
  ['CINEMATIC_STOP'] = {
    {name='CINEMATIC_STOP', count=1, confidence=0.20, sample='function ZGV:CINEMATIC_STOP()'},
  },
  ['RemoveMessageHandler'] = {
    {name='RemoveMessageHandler', count=1, confidence=0.20, sample='function ZGV:RemoveMessageHandler(event,removehandler)'},
  },
  ['EventHandler_Events'] = {
    {name='EventHandler_Events', count=1, confidence=0.20, sample='function ZGV:EventHandler_Events(event,...)'},
  },
  ['EventHandler_Messages'] = {
    {name='EventHandler_Messages', count=1, confidence=0.20, sample='function ZGV:EventHandler_Messages(event,...)'},
  },
  ['RemoveHandler'] = {
    {name='RemoveHandler', count=1, confidence=0.20, sample='function UpdateCentral_Mixin:RemoveHandler(removehandler)'},
  },
  ['AddHiding'] = {
    {name='AddHiding', count=1, confidence=0.20, sample='function UpdateCentral_Mixin:AddHiding(object)'},
  },
  ['RemoveHiding'] = {
    {name='RemoveHiding', count=1, confidence=0.20, sample='function UpdateCentral_Mixin:RemoveHiding(removeobject)'},
  },
  ['IsEventValid'] = {
    {name='C_EventUtils.IsEventValid', count=6, confidence=1.00, sample='if C_EventUtils.IsEventValid("GLOBAL_MOUSE_UP") then'},
  },
  ['ForceReloadInitialGuide'] = {
    {name='ForceReloadInitialGuide', count=1, confidence=0.20, sample='function ZGV:ForceReloadInitialGuide()'},
  },
  ['GetRecipeReagents'] = {
    {name='GetRecipeReagents', count=3, confidence=0.60, sample='--chore:GetRecipeReagents()'},
  },
  ['GenerateGuide'] = {
    {name='ZGV.Goldguide.Crafting.GenerateGuide', count=1, confidence=0.20, sample='ZGV.Goldguide.Crafting.GenerateGuide(chore)'},
    {name='GenerateGuide', count=2, confidence=0.40, sample='function Crafting:GenerateGuide()'},
    {name='Crafting.GenerateGuide', count=1, confidence=0.20, sample='Crafting.GenerateGuide(self)'},
  },
  ['AddGuide'] = {
    {name='AddGuide', count=2, confidence=0.40, sample='function ZGV.StepHistory:AddGuide(name)'},
  },
  ['AddStep'] = {
    {name='AddStep', count=6, confidence=1.00, sample='function ZGV.StepHistory:AddStep(name,num)'},
  },
  ['GetPreviousValidStep'] = {
    {name='GetPreviousValidStep', count=4, confidence=0.80, sample='function ZGV.StepHistory:GetPreviousValidStep(name)'},
  },
  ['Back'] = {
    {name='Back', count=4, confidence=0.80, sample='function ZGV.StepHistory:Back(name,num)'},
  },
  ['HasHistory'] = {
    {name='HasHistory', count=2, confidence=0.40, sample='function ZGV.StepHistory:HasHistory(name)'},
  },
  ['UnlockHighlight'] = {
    {name='UnlockHighlight', count=14, confidence=1.00, sample='ZGV.Tabs.AddButton:UnlockHighlight()'},
  },
  ['ForeachInGuidesAsync'] = {
    {name='ForeachInGuidesAsync', count=2, confidence=0.40, sample='function ZGV:ForeachInGuidesAsync(guides,callback,progress,done)'},
  },
  ['ForeachInGuidesAsync2'] = {
    {name='ForeachInGuidesAsync2', count=2, confidence=0.40, sample='function ZGV:ForeachInGuidesAsync2(guides,callback,progress,done)'},
  },
  ['FindSuggestedGuidesAsync'] = {
    {name='FindSuggestedGuidesAsync', count=1, confidence=0.20, sample='function ZGV:FindSuggestedGuidesAsync(typ)'},
  },
  ['FindSuggestedGuidesAsync2'] = {
    {name='FindSuggestedGuidesAsync2', count=1, confidence=0.20, sample='function ZGV:FindSuggestedGuidesAsync2(typ)'},
  },
  ['SearchForCompleteableGoal'] = {
    {name='SearchForCompleteableGoal', count=2, confidence=0.40, sample='-- function ZGV:SearchForCompleteableGoal() --removed'},
  },
  ['GetStepTag'] = {
    {name='GetStepTag', count=2, confidence=0.40, sample='local reportlabel = self.CurrentStep and ZGV.QuestDB.GetStepTag and (ZGV.QuestDB:GetStepTag(self.CurrentStep) or "").." " or ""'},
  },
  ['StopFlashAnimation'] = {
    {name='StopFlashAnimation', count=3, confidence=0.60, sample='self.Frame:StopFlashAnimation()  -- possibly prevent lines staying green from previous step'},
  },
  ['SetStepFocus'] = {
    {name='SetStepFocus', count=4, confidence=0.80, sample='if prevFocus or forcefocus then ZGV:SetStepFocus(self.CurrentStep) end'},
  },
  ['FocusStepUnquiet'] = {
    {name='FocusStepUnquiet', count=2, confidence=0.40, sample='self:FocusStepUnquiet()'},
  },
  ['UpdateMinimapArrow'] = {
    {name='UpdateMinimapArrow', count=1, confidence=0.20, sample='--self:UpdateMinimapArrow(true)'},
  },
  ['AddGuideItemsToBuy'] = {
    {name='AddGuideItemsToBuy', count=2, confidence=0.40, sample='ZGV.Gold.Appraiser:AddGuideItemsToBuy()'},
  },
  ['UpdateFrameStepSkipping'] = {
    {name='UpdateFrameStepSkipping', count=4, confidence=0.80, sample='ZGV:UpdateFrameStepSkipping()'},
  },
  ['ClearRaidmarker'] = {
    {name='ZGV.ClearRaidmarker', count=2, confidence=0.40, sample='ZGV.ClearRaidmarker()'},
  },
  ['FocusStepQuiet'] = {
    {name='FocusStepQuiet', count=1, confidence=0.20, sample='function ZGV:FocusStepQuiet(num)'},
  },
  ['UpdateCartographerExport'] = {
    {name='UpdateCartographerExport', count=1, confidence=0.20, sample='--self:UpdateCartographerExport()  -- moved to Waypoints where it belongs.'},
  },
  ['GetQuestWatchType'] = {
    {name='C_QuestLog.GetQuestWatchType', count=4, confidence=0.80, sample='if not C_QuestLog.GetQuestWatchType(id) then'},
  },
  ['AddQuestWatch'] = {
    {name='C_QuestLog.AddQuestWatch', count=2, confidence=0.40, sample='C_QuestLog.AddQuestWatch(id, Enum.QuestWatchType.Manual)'},
    {name='AddQuestWatch', count=1, confidence=0.20, sample='AddQuestWatch(q.index)'},
  },
  ['SetSuperTrackedQuestID'] = {
    {name='C_SuperTrack.SetSuperTrackedQuestID', count=1, confidence=0.20, sample='C_SuperTrack.SetSuperTrackedQuestID(q.id)'},
    {name='SetSuperTrackedQuestID', count=1, confidence=0.20, sample='SetSuperTrackedQuestID(q.id)'},
  },
  ['QuestPOIUpdateIcons'] = {
    {name='QuestPOIUpdateIcons', count=1, confidence=0.20, sample='QuestPOIUpdateIcons()'},
  },
  ['IsQuestWatched'] = {
    {name='IsQuestWatched', count=1, confidence=0.20, sample='if not IsQuestWatched(q.index) then'},
  },
  ['WatchFrame_Update'] = {
    {name='WatchFrame_Update', count=3, confidence=0.60, sample='if WatchFrame_Update then WatchFrame_Update() end'},
  },
  ['PreviousStep'] = {
    {name='PreviousStep', count=4, confidence=0.80, sample='function ZGV:PreviousStep(fast,forcefocus)'},
  },
  ['GetShortGuideTitle'] = {
    {name='GetShortGuideTitle', count=2, confidence=0.40, sample='self.NextGuidePopup:SetText(L['dialog_nextguide']:format(self:GetShortGuideTitle(self.CurrentGuide.next)))'},
  },
  ['NextGuide'] = {
    {name='NextGuide', count=1, confidence=0.20, sample='function ZGV:NextGuide()'},
  },
  ['GetMentionedFollowups'] = {
    {name='GetMentionedFollowups', count=3, confidence=0.60, sample='function ZGV:GetMentionedFollowups(questid)'},
  },
  ['PlaySound'] = {
    {name='PlaySound', count=23, confidence=1.00, sample='PlaySound(self.db.profile.completesound)'},
  },
  ['MaybeSuggestNextGuide'] = {
    {name='MaybeSuggestNextGuide', count=2, confidence=0.40, sample='-- self:MaybeSuggestNextGuide()  -- Patch 7.3.5: don't suggest next levels. Players progress to the end of the guide, always. It doesn't make much sense to skip. TODO: detect when they've actually outleveled the current zone!'},
  },
  ['InitializeDropDown'] = {
    {name='InitializeDropDown', count=2, confidence=0.40, sample='function ZGV:InitializeDropDown(frame)'},
  },
  ['UIDropDownFork_AddButton'] = {
    {name='UIDropDownFork_AddButton', count=4, confidence=0.80, sample='UIDropDownFork_AddButton(info)'},
  },
  ['UIDropDownFork_SetText'] = {
    {name='UIDropDownFork_SetText', count=6, confidence=1.00, sample='UIDropDownFork_SetText(frame, self.CurrentGuideName)'},
  },
  ['HideCooldown'] = {
    {name='HideCooldown', count=1, confidence=0.20, sample='function ZGV:HideCooldown(arg)'},
  },
  ['SetDisplayMode'] = {
    {name='SetDisplayMode', count=1, confidence=0.20, sample='function ZGV:SetDisplayMode(mode)'},
  },
  ['GetCardinalDirName'] = {
    {name='GetCardinalDirName', count=1, confidence=0.20, sample='local function GetCardinalDirName(angle)'},
  },
  ['GetCardinalDirNum'] = {
    {name='GetCardinalDirNum', count=1, confidence=0.20, sample='local function GetCardinalDirNum(angle)'},
  },
  ['DoUpdateFrame'] = {
    {name='DoUpdateFrame', count=3, confidence=0.60, sample='do return self:DoUpdateFrame(full,onupdate) end  -- bandaid bypass'},
  },
  ['UpdateFrame_Schedule'] = {
    {name='UpdateFrame_Schedule', count=1, confidence=0.20, sample='function ZGV:UpdateFrame_Schedule() -- called each frame'},
  },
  ['IsDone'] = {
    {name='IsDone', count=2, confidence=0.40, sample='--if ZygorGuidesViewerMiniFrame_bdflash:IsPlaying() and not ZygorGuidesViewerMiniFrame_bdflash:IsDone() then return end'},
  },
  ['GetValue'] = {
    {name='GetValue', count=117, confidence=1.00, sample='local firststep = (showallsteps and math.floor(Scroll.Bar:GetValue()) or self.CurrentStepNum) or 1'},
  },
  ['ClearSteps'] = {
    {name='ClearSteps', count=2, confidence=0.40, sample='ZGV.Frame:ClearSteps()'},
  },
  ['HideRemainingSteps'] = {
    {name='HideRemainingSteps', count=2, confidence=0.40, sample='ZGV.Frame:HideRemainingSteps()'},
  },
  ['GetGuides'] = {
    {name='GetGuides', count=1, confidence=0.20, sample='local guides = self:GetGuides()'},
  },
  ['ShowSpecialState'] = {
    {name='ShowSpecialState', count=3, confidence=0.60, sample='self.Frame:ShowSpecialState()'},
  },
  ['StartRGB'] = {
    {name='StartRGB', count=1, confidence=0.20, sample='--ZygorGuidesViewerFrame_bdflash:StartRGB(1,1,1,1,0,1,0,1)'},
  },
  ['SetFrameScale'] = {
    {name='SetFrameScale', count=1, confidence=0.20, sample='function ZGV:SetFrameScale(scale)'},
  },
  ['SetClampRectInsets'] = {
    {name='SetClampRectInsets', count=7, confidence=1.00, sample='frame:SetClampRectInsets(0,0,-48-tabh,0)'},
  },
  ['UpdateMiniMode'] = {
    {name='UpdateMiniMode', count=2, confidence=0.40, sample='--frame:UpdateMiniMode()'},
  },
  ['CalculateHeight'] = {
    {name='CalculateHeight', count=3, confidence=0.60, sample='local function CalculateHeight()'},
  },
  ['AdjustHeight'] = {
    {name='AdjustHeight', count=5, confidence=1.00, sample='stepframe:AdjustHeight()'},
  },
  ['GetScrollRange'] = {
    {name='GetScrollRange', count=1, confidence=0.20, sample='Scroll.Bar:SetMinMaxValues(0,Scroll:GetScrollRange())'},
  },
  ['GoalProgress'] = {
    {name='GoalProgress', count=1, confidence=0.20, sample='function ZGV:GoalProgress(goal)'},
  },
  ['IsDefaultFitting'] = {
    {name='IsDefaultFitting', count=1, confidence=0.20, sample='function ZGV:IsDefaultFitting(default)'},
  },
  ['RaceClassMatchList'] = {
    {name='RaceClassMatchList', count=1, confidence=0.20, sample='function ZGV:RaceClassMatchList(list)'},
  },
  ['ThunderStageForceUpdate'] = {
    {name='ThunderStageForceUpdate', count=3, confidence=0.60, sample='function ZGV:ThunderStageForceUpdate()'},
  },
  ['GetCurrentMapAreaID'] = {
    {name='GetCurrentMapAreaID', count=5, confidence=1.00, sample='if WorldMapFrame:IsShown() and GetCurrentMapAreaID()~=928 then --Wait for them to close the map then update'},
  },
  ['GetTag'] = {
    {name='C_MapBar.GetTag', count=1, confidence=0.20, sample='if C_MapBar.GetTag()=="THUNDER_ISLE" then'},
  },
  ['GetPhaseIndex'] = {
    {name='C_MapBar.GetPhaseIndex', count=2, confidence=0.40, sample='ZGV.db.char.thunderstage = (C_MapBar.GetPhaseIndex() + 1) or 1'},
  },
  ['GetCurrentValue'] = {
    {name='C_MapBar.GetCurrentValue', count=2, confidence=0.40, sample='ZGV.db.char.thunderprogress = (C_MapBar.GetCurrentValue()/C_MapBar.GetMaxValue()) or 0'},
  },
  ['GetMaxValue'] = {
    {name='C_MapBar.GetMaxValue', count=1, confidence=0.20, sample='ZGV.db.char.thunderprogress = (C_MapBar.GetCurrentValue()/C_MapBar.GetMaxValue()) or 0'},
    {name='GetMaxValue', count=4, confidence=0.80, sample='function GraphFunctions:GetMaxValue()'},
  },
  ['AnalyzeThunderData'] = {
    {name='AnalyzeThunderData', count=1, confidence=0.20, sample='function ZGV:AnalyzeThunderData(reset)'},
  },
  ['GetThunderStageQQ'] = {
    {name='GetThunderStageQQ', count=1, confidence=0.20, sample='function ZGV:GetThunderStageQQ()'},
  },
  ['BarIsShown'] = {
    {name='C_MapBar.BarIsShown', count=1, confidence=0.20, sample='local stage = (C_MapBar and C_MapBar.BarIsShown() and C_MapBar.GetPhaseIndex() + 1)  or  1'},
  },
  ['UNIT_INVENTORY_CHANGED'] = {
    {name='UNIT_INVENTORY_CHANGED', count=1, confidence=0.20, sample='function ZGV:UNIT_INVENTORY_CHANGED(event,unit)'},
  },
  ['MAP_BAR_UPDATE'] = {
    {name='MAP_BAR_UPDATE', count=1, confidence=0.20, sample='function ZGV:MAP_BAR_UPDATE(event)'},
  },
  ['QUEST_LOG_UPDATE'] = {
    {name='QUEST_LOG_UPDATE', count=1, confidence=0.20, sample='function ZGV:QUEST_LOG_UPDATE(event,unit)'},
  },
  ['SPELL_UPDATE_COOLDOWN'] = {
    {name='SPELL_UPDATE_COOLDOWN', count=1, confidence=0.20, sample='function ZGV:SPELL_UPDATE_COOLDOWN()'},
  },
  ['PLAYER_CONTROL_GAINED'] = {
    {name='PLAYER_CONTROL_GAINED', count=1, confidence=0.20, sample='function ZGV:PLAYER_CONTROL_GAINED()'},
  },
  ['CacheCurrentMapID'] = {
    {name='CacheCurrentMapID', count=8, confidence=1.00, sample='self:CacheCurrentMapID()'},
  },
  ['CRITERIA_EARNED'] = {
    {name='CRITERIA_EARNED', count=1, confidence=0.20, sample='function ZGV:CRITERIA_EARNED()'},
  },
  ['WORLD_MAP_UPDATE'] = {
    {name='WORLD_MAP_UPDATE', count=1, confidence=0.20, sample='function ZGV:WORLD_MAP_UPDATE()'},
  },
  ['NEW_WMO_CHUNK'] = {
    {name='NEW_WMO_CHUNK', count=1, confidence=0.20, sample='function ZGV:NEW_WMO_CHUNK()'},
  },
  ['PLAYER_ENTERING_WORLD'] = {
    {name='PLAYER_ENTERING_WORLD', count=5, confidence=1.00, sample='function ZGV:PLAYER_ENTERING_WORLD()'},
  },
  ['ZONE_CHANGED_INDOORS'] = {
    {name='ZONE_CHANGED_INDOORS', count=1, confidence=0.20, sample='function ZGV:ZONE_CHANGED_INDOORS()'},
  },
  ['ZONE_CHANGED'] = {
    {name='ZONE_CHANGED', count=1, confidence=0.20, sample='function ZGV:ZONE_CHANGED()'},
  },
  ['CachePOIs'] = {
    {name='CachePOIs', count=2, confidence=0.40, sample='self:CachePOIs()'},
  },
  ['ZONE_CHANGED_NEW_AREA'] = {
    {name='ZONE_CHANGED_NEW_AREA', count=5, confidence=1.00, sample='function ZGV:ZONE_CHANGED_NEW_AREA()'},
  },
  ['PlayerChoiceCleanUp'] = {
    {name='PlayerChoiceCleanUp', count=2, confidence=0.40, sample='ZGV:PlayerChoiceCleanUp()'},
  },
  ['TAXIMAP_OPENED'] = {
    {name='TAXIMAP_OPENED', count=1, confidence=0.20, sample='function ZGV:TAXIMAP_OPENED()'},
  },
  ['TaxiNodeCost'] = {
    {name='TaxiNodeCost', count=3, confidence=0.60, sample='elseif TaxiNodeCost(dest_i)>GetMoney() then'},
  },
  ['FindData'] = {
    {name='FindData', count=1, confidence=0.20, sample='function ZGV:FindData(array,what,data)'},
  },
  ['ZygorGuidesViewerFrame_Filter'] = {
    {name='ZygorGuidesViewerFrame_Filter', count=1, confidence=0.20, sample='--ZygorGuidesViewerFrame_Filter()'},
  },
  ['IsStepFocused'] = {
    {name='IsStepFocused', count=4, confidence=0.80, sample='function ZGV:IsStepFocused(step)'},
  },
  ['GoalOnClick'] = {
    {name='GoalOnClick', count=2, confidence=0.40, sample='function ZGV:GoalOnClick(frame,button)'},
  },
  ['OpenQuickStepMenu'] = {
    {name='OpenQuickStepMenu', count=2, confidence=0.40, sample='ZGV:OpenQuickStepMenu(stepframe,goalframe)'},
  },
  ['GoalOnEnter'] = {
    {name='GoalOnEnter', count=2, confidence=0.40, sample='function ZGV:GoalOnEnter(goalframe)'},
  },
  ['ShowInspectCursor'] = {
    {name='ShowInspectCursor', count=1, confidence=0.20, sample='ShowInspectCursor()'},
  },
  ['ResetCursor'] = {
    {name='ResetCursor', count=1, confidence=0.20, sample='ResetCursor()'},
  },
  ['GoalOnLeave'] = {
    {name='GoalOnLeave', count=2, confidence=0.40, sample='function ZGV:GoalOnLeave(goalframe,num)'},
  },
  ['GetMostRecentGuide'] = {
    {name='GetMostRecentGuide', count=1, confidence=0.20, sample='function ZGV:GetMostRecentGuide(gtype)'},
  },
  ['GetGuidesHistory'] = {
    {name='GetGuidesHistory', count=1, confidence=0.20, sample='function ZGV:GetGuidesHistory(gtype)'},
  },
  ['OpenGuideMenu'] = {
    {name='OpenGuideMenu', count=1, confidence=0.20, sample='function ZGV:OpenGuideMenu(path)'},
  },
  ['FakeCompleteQuest'] = {
    {name='FakeCompleteQuest', count=3, confidence=0.60, sample='function ZGV:FakeCompleteQuest(questid,docomplete,questtitle)'},
  },
  ['OpenMapToQuest'] = {
    {name='OpenMapToQuest', count=1, confidence=0.20, sample='function ZGV:OpenMapToQuest(questid)'},
  },
  ['WorldMap_OpenToQuest'] = {
    {name='WorldMap_OpenToQuest', count=1, confidence=0.20, sample='WorldMap_OpenToQuest(questid)'},
  },
  ['FindNextActiveQuest'] = {
    {name='FindNextActiveQuest', count=1, confidence=0.20, sample='function ZGV:FindNextActiveQuest()'},
  },
  ['ShowQuestInfo'] = {
    {name='ShowQuestInfo', count=2, confidence=0.40, sample='function ZGV:ShowQuestInfo(questid,questtitle,indump)'},
  },
  ['GetQuestDifficultyColor'] = {
    {name='GetQuestDifficultyColor', count=3, confidence=0.60, sample='local col = GetQuestDifficultyColor(lev)'},
  },
  ['GetQuestRemainingInChain'] = {
    {name='GetQuestRemainingInChain', count=1, confidence=0.20, sample='local remaining = self:GetQuestRemainingInChain(questid)'},
  },
  ['ToggleWatchQuest'] = {
    {name='ToggleWatchQuest', count=1, confidence=0.20, sample='function ZGV:ToggleWatchQuest(questid)'},
  },
  ['QuestMapFrame_OpenToQuestDetails'] = {
    {name='QuestMapFrame_OpenToQuestDetails', count=1, confidence=0.20, sample='func = function() QuestMapFrame_OpenToQuestDetails(goal.quest.id) end,'},
  },
  ['RemoveQuestWatch'] = {
    {name='C_QuestLof.RemoveQuestWatch', count=1, confidence=0.20, sample='C_QuestLof.RemoveQuestWatch(goal.quest.id)'},
  },
  ['GetNumQuestWatches'] = {
    {name='C_QuestLog.GetNumQuestWatches', count=1, confidence=0.20, sample='if ( C_QuestLog.GetNumQuestWatches() < Constants.QuestWatchConsts.MAX_QUEST_WATCHES ) then'},
  },
  ['GetQuestUiMapID'] = {
    {name='GetQuestUiMapID', count=1, confidence=0.20, sample='local quest_map = GetQuestUiMapID and GetQuestUiMapID(goal.quest.id)'},
  },
  ['GetPageText'] = {
    {name='GetPageText', count=1, confidence=0.20, sample='local s = LightHeaded:GetPageText(goal.quest.id)'},
  },
  ['Guides_Mini_to_Full'] = {
    {name='Guides_Mini_to_Full', count=2, confidence=0.40, sample='ZGV:Guides_Mini_to_Full()'},
  },
  ['OpenQuickSteps'] = {
    {name='OpenQuickSteps', count=2, confidence=0.40, sample='function ZGV:OpenQuickSteps()'},
  },
  ['OpenMapToQuestGoal'] = {
    {name='OpenMapToQuestGoal', count=1, confidence=0.20, sample='function ZGV:OpenMapToQuestGoal(questid,goalnum)'},
  },
  ['RegisterGuidePlaceholder'] = {
    {name='RegisterGuidePlaceholder', count=13853, confidence=1.00, sample='function ZGV:RegisterGuidePlaceholder(title)'},
  },
  ['BETASTART'] = {
    {name='ZGV.BETASTART', count=47, confidence=1.00, sample='function ZGV.BETASTART()'},
  },
  ['BETAEND'] = {
    {name='ZGV.BETAEND', count=59, confidence=1.00, sample='function ZGV.BETAEND()'},
  },
  ['RegisterMapSpots'] = {
    {name='RegisterMapSpots', count=1, confidence=0.20, sample='function ZGV:RegisterMapSpots(title,data)'},
  },
  ['NewRaw'] = {
    {name='NewRaw', count=1, confidence=0.20, sample='local set = self.MapSpotSetProto:NewRaw(title,tit or title,data)'},
  },
  ['RegisterInclude'] = {
    {name='RegisterInclude', count=358, confidence=1.00, sample='function ZGV:RegisterInclude(title,text)'},
  },
  ['RegisterFunction'] = {
    {name='RegisterFunction', count=1, confidence=0.20, sample='function ZGV:RegisterFunction(title,func)'},
  },
  ['UnregisterGuide'] = {
    {name='UnregisterGuide', count=1, confidence=0.20, sample='function ZGV:UnregisterGuide(name)'},
  },
  ['RegisterStoredGuides'] = {
    {name='RegisterStoredGuides', count=1, confidence=0.20, sample='function ZGV:RegisterStoredGuides()'},
  },
  ['ProfilerEnable'] = {
    {name='ProfilerEnable', count=1, confidence=0.20, sample='function ZGV:ProfilerEnable()'},
  },
  ['ProfilerReport'] = {
    {name='ProfilerReport', count=1, confidence=0.20, sample='function ZGV:ProfilerReport()'},
  },
  ['GetFunctionCPUUsage'] = {
    {name='GetFunctionCPUUsage', count=2, confidence=0.40, sample='tab.fulltime,tab.count=GetFunctionCPUUsage(fun,true)'},
  },
  ['ResetCPUUsage'] = {
    {name='ResetCPUUsage', count=1, confidence=0.20, sample='ResetCPUUsage()'},
  },
  ['Echo'] = {
    {name='Echo', count=1, confidence=0.20, sample='function ZGV:Echo (s)'},
  },
  ['MarkDisplayDirty'] = {
    {name='MarkDisplayDirty', count=1, confidence=0.20, sample='chatframe:MarkDisplayDirty()'},
  },
  ['RaidNotice_AddMessage'] = {
    {name='RaidNotice_AddMessage', count=2, confidence=0.40, sample='RaidNotice_AddMessage(RaidWarningFrame, "[|cffff8800Z|r] "..formatted_msg, HIGHLIGHT_FONT_COLOR);'},
  },
  ['ListQuests'] = {
    {name='ListQuests', count=1, confidence=0.20, sample='function ZGV:ListQuests(from,to)'},
  },
  ['PeekQuest'] = {
    {name='PeekQuest', count=1, confidence=0.20, sample='local level = CQI:PeekQuest(i)'},
  },
  ['GetQuestText'] = {
    {name='GetQuestText', count=2, confidence=0.40, sample='local title,_,_,_,nobjs = CQI:GetQuestText(i,level)'},
  },
  ['GetModule'] = {
    {name='GetModule', count=19, confidence=1.00, sample='Chatter:GetModule("Chat Copy").editBox:SetText(qlog)'},
  },
  ['ReloadTranslation'] = {
    {name='ReloadTranslation', count=1, confidence=0.20, sample='function ZGV:ReloadTranslation()'},
  },
  ['ConditionTrue'] = {
    {name='ZGV.ConditionTrue', count=1, confidence=0.20, sample='function ZGV.ConditionTrue(subject,case)'},
  },
  ['FindAch_AchievementFrame_OnShow'] = {
    {name='FindAch_AchievementFrame_OnShow', count=1, confidence=0.20, sample='function FindAch_AchievementFrame_OnShow(self)'},
  },
  ['FindAch_Listen_OnEvent'] = {
    {name='FindAch_Listen_OnEvent', count=1, confidence=0.20, sample='function FindAch_Listen_OnEvent(self,event,...)'},
  },
  ['CraptOnReload'] = {
    {name='CraptOnReload', count=1, confidence=0.20, sample='function ZGV:CraptOnReload(name)'},
  },
  ['COMBAT_LOG_EVENT_UNFILTERED'] = {
    {name='COMBAT_LOG_EVENT_UNFILTERED', count=1, confidence=0.20, sample='function ZGV:COMBAT_LOG_EVENT_UNFILTERED(event,time,evtype,a1,a2,a3,a4,a5)'},
  },
  ['SetMagicKey'] = {
    {name='SetMagicKey', count=2, confidence=0.40, sample='self:SetMagicKey()'},
  },
  ['RE'] = {
    {name='SlashCmdList.RE', count=1, confidence=0.20, sample='function SlashCmdList.RE(text)  ReloadUI()  end'},
  },
  ['DoBind'] = {
    {name='DoBind', count=11, confidence=1.00, sample='local function DoBind(bind,bind2,desc)'},
  },
  ['SetBindingClick'] = {
    {name='SetBindingClick', count=1, confidence=0.20, sample='SetBindingClick(self.db.profile.magickey,bind2)'},
  },
  ['SetBinding'] = {
    {name='SetBinding', count=1, confidence=0.20, sample='SetBinding(self.db.profile.magickey,bind)'},
  },
  ['UnitIsDead'] = {
    {name='UnitIsDead', count=3, confidence=0.60, sample='if self.db.profile.magickey_loot and UnitIsDead("target") then'},
  },
  ['UnitIsFriend'] = {
    {name='UnitIsFriend', count=4, confidence=0.80, sample='if UnitIsFriend("target","player") and self.db.profile.magickey_talk then'},
  },
  ['MagicButton_OnClick'] = {
    {name='ZGV.MagicButton_OnClick', count=1, confidence=0.20, sample='function ZGV.MagicButton_OnClick(but)'},
  },
  ['QuestAutoStuff'] = {
    {name='QuestAutoStuff', count=1, confidence=0.20, sample='ZGV:QuestAutoStuff()'},
  },
  ['MagicRaidMarker'] = {
    {name='MagicRaidMarker', count=1, confidence=0.20, sample='function ZGV:MagicRaidMarker(marker)'},
  },
  ['UnitCanAttack'] = {
    {name='UnitCanAttack', count=2, confidence=0.40, sample='if UnitCanAttack("player","target") then'},
  },
  ['GetRaidTargetIndex'] = {
    {name='GetRaidTargetIndex', count=4, confidence=0.80, sample='local icon = GetRaidTargetIndex("target")'},
  },
  ['SetRaidTarget'] = {
    {name='SetRaidTarget', count=9, confidence=1.00, sample='SetRaidTarget("target",raidmarker)'},
  },
  ['MaybeClearRaidMarker'] = {
    {name='MaybeClearRaidMarker', count=1, confidence=0.20, sample='function ZGV:MaybeClearRaidMarker(index)'},
  },
  ['MacroClickGoal'] = {
    {name='MacroClickGoal', count=1, confidence=0.20, sample='function ZGV:MacroClickGoal(stepnum,goalnum)'},
  },
  ['Unparse'] = {
    {name='Unparse', count=1, confidence=0.20, sample='function ZGV:Unparse(id,y,m,d)'},
  },
  ['DoMutex'] = {
    {name='DoMutex', count=593, confidence=1.00, sample='function ZGV:DoMutex(m)'},
  },
  ['GetFlatListOfGroups'] = {
    {name='GetFlatListOfGroups', count=3, confidence=0.60, sample='function ZGV:GetFlatListOfGroups(source,search,target,notoplevel,curlevel)'},
  },
  ['UnloadUnusedGuides'] = {
    {name='UnloadUnusedGuides', count=1, confidence=0.20, sample='function ZGV:UnloadUnusedGuides()'},
  },
  ['LoadGuidesByType'] = {
    {name='LoadGuidesByType', count=1, confidence=0.20, sample='function ZGV:LoadGuidesByType(guidetype)'},
  },
  ['MemHogging'] = {
    {name='MemHogging', count=1, confidence=0.20, sample='function ZGV:MemHogging()'},
  },
  ['UpdateAddOnMemoryUsage'] = {
    {name='UpdateAddOnMemoryUsage', count=6, confidence=1.00, sample='UpdateAddOnMemoryUsage()'},
  },
  ['GetAddOnMemoryUsage'] = {
    {name='GetAddOnMemoryUsage', count=4, confidence=0.80, sample='local mem = GetAddOnMemoryUsage(addonName)'},
  },
  ['MemHogStart'] = {
    {name='MemHogStart', count=4, confidence=0.80, sample='function ZGV:MemHogStart()'},
  },
  ['MemHogStop'] = {
    {name='MemHogStop', count=4, confidence=0.80, sample='function ZGV:MemHogStop(desc)'},
  },
  ['MemHogTest'] = {
    {name='MemHogTest', count=1, confidence=0.20, sample='function ZGV:MemHogTest()'},
  },
  ['ZGV__QUEST_CHOICE_SENT'] = {
    {name='ZGV__QUEST_CHOICE_SENT', count=1, confidence=0.20, sample='function ZGV:ZGV__QUEST_CHOICE_SENT(event,id,choice)'},
  },
  ['Surrogate_SendQuestChoiceResponse'] = {
    {name='ZGV.Surrogate_SendQuestChoiceResponse', count=2, confidence=0.40, sample='hooksecurefunc("SendQuestChoiceResponse",function(...) ZGV.Surrogate_SendQuestChoiceResponse(...) end)'},
  },
  ['GetQuestChoiceInfo'] = {
    {name='C_QuestChoice.GetQuestChoiceInfo', count=2, confidence=0.40, sample='local id = C_QuestChoice.GetQuestChoiceInfo()'},
  },
  ['PLAYER_CHOICE_UPDATE'] = {
    {name='ZGV.PLAYER_CHOICE_UPDATE', count=1, confidence=0.20, sample='function ZGV.PLAYER_CHOICE_UPDATE()'},
  },
  ['GetPlayerChoiceInfo'] = {
    {name='C_PlayerChoice.GetPlayerChoiceInfo', count=1, confidence=0.20, sample='local choice = C_PlayerChoice.GetPlayerChoiceInfo()'},
  },
  ['GetCurrentPlayerChoiceInfo'] = {
    {name='C_PlayerChoice.GetCurrentPlayerChoiceInfo', count=1, confidence=0.20, sample='local c = C_PlayerChoice.GetCurrentPlayerChoiceInfo()'},
  },
  ['PLAYER_CHOICE_CLOSE'] = {
    {name='ZGV.PLAYER_CHOICE_CLOSE', count=1, confidence=0.20, sample='function ZGV.PLAYER_CHOICE_CLOSE()'},
  },
  ['QuestRewardConfirm'] = {
    {name='QuestRewardConfirm', count=3, confidence=0.60, sample='function ZGV:QuestRewardConfirm()'},
  },
  ['RequestTimePlayed'] = {
    {name='RequestTimePlayed', count=3, confidence=0.60, sample='RequestTimePlayed()'},
  },
  ['GetAreaPOIForMap'] = {
    {name='C_AreaPoiInfo.GetAreaPOIForMap', count=3, confidence=0.60, sample='local points = C_AreaPoiInfo.GetAreaPOIForMap(mapid)'},
  },
  ['SetupListener'] = {
    {name='SetupListener', count=6, confidence=1.00, sample='function Checklist:SetupListener()'},
  },
  ['FrameOnUpdate'] = {
    {name='Checklist.FrameOnUpdate', count=1, confidence=0.20, sample='function Checklist.FrameOnUpdate(frame,elapsed)'},
  },
  ['FrameOnEvent'] = {
    {name='Checklist.FrameOnEvent', count=1, confidence=0.20, sample='function Checklist.FrameOnEvent(frame,event,...)'},
    {name='TWP.FrameOnEvent', count=1, confidence=0.20, sample='function TWP.FrameOnEvent(frame,event,...)'},
    {name='MMH.FrameOnEvent', count=1, confidence=0.20, sample='function MMH.FrameOnEvent(frame,event,arg1,arg2,arg3)'},
  },
  ['IsLegionOn'] = {
    {name='ZGV.IsLegionOn', count=11, confidence=1.00, sample='function ZGV.IsLegionOn()'},
  },
  ['TestPhases'] = {
    {name='TestPhases', count=1, confidence=0.20, sample='function ZGV:TestPhases()'},
  },
  ['RecordTirisfal'] = {
    {name='ZGV.RecordTirisfal', count=1, confidence=0.20, sample='function ZGV.RecordTirisfal(_,_,unit)'},
  },
  ['IsBoostedChar'] = {
    {name='IsBoostedChar', count=1, confidence=0.20, sample='function ZGV:IsBoostedChar()'},
  },
  ['IsLegionBoatLock'] = {
    {name='ZGV.IsLegionBoatLock', count=2, confidence=0.40, sample='function ZGV.IsLegionBoatLock()'},
  },
  ['FakeWidescreen'] = {
    {name='FakeWidescreen', count=1, confidence=0.20, sample='function ZGV:FakeWidescreen()'},
  },
  ['SaveChromieProgress'] = {
    {name='SaveChromieProgress', count=9, confidence=1.00, sample='function ZGV:SaveChromieProgress()'},
  },
  ['IsDragonshrineUp'] = {
    {name='IsDragonshrineUp', count=9, confidence=1.00, sample='function ZGV:IsDragonshrineUp(name)'},
  },
  ['EnableMessageDebugging'] = {
    {name='EnableMessageDebugging', count=2, confidence=0.40, sample='function ZGV:EnableMessageDebugging()'},
  },
  ['Orig_SendMessage'] = {
    {name='Orig_SendMessage', count=1, confidence=0.20, sample='Orig_SendMessage(self,...)'},
  },
  ['ZygorGuidesViewer_OnAddonCompartmentEnter'] = {
    {name='ZygorGuidesViewer_OnAddonCompartmentEnter', count=1, confidence=0.20, sample='function ZygorGuidesViewer_OnAddonCompartmentEnter(addonName,buttonFrame)'},
  },
  ['ZygorGuidesViewer_OnAddonCompartmentLeave'] = {
    {name='ZygorGuidesViewer_OnAddonCompartmentLeave', count=1, confidence=0.20, sample='function ZygorGuidesViewer_OnAddonCompartmentLeave(addonName,buttonFrame)'},
  },
  ['ZygorGuidesViewer_OnAddonCompartmentClick'] = {
    {name='ZygorGuidesViewer_OnAddonCompartmentClick', count=1, confidence=0.20, sample='function ZygorGuidesViewer_OnAddonCompartmentClick(addonName,mouseButton,buttonFrame)'},
  },
  ['UnitIsGroupLeader'] = {
    {name='UnitIsGroupLeader', count=4, confidence=0.80, sample='if IsInGroup() and not UnitIsGroupLeader('player') then return end'},
  },
  ['GetTrendsFromScan'] = {
    {name='GetTrendsFromScan', count=2, confidence=0.40, sample='Trends:GetTrendsFromScan()'},
  },
  ['DoImport'] = {
    {name='DoImport', count=3, confidence=0.60, sample='Trends:DoImport(dump)'},
  },
  ['ImportServerPrices'] = {
    {name='ImportServerPrices', count=1, confidence=0.20, sample='function Trends:ImportServerPrices(header,data)'},
  },
  ['DoOldImport'] = {
    {name='DoOldImport', count=2, confidence=0.40, sample='return Trends:DoOldImport(dumpdata,loud)'},
  },
  ['GetHealth'] = {
    {name='GetHealth', count=2, confidence=0.40, sample='ZGV:Print(("Server Trends for %s created. Trend quality: %s."):format(GetRealmName(), Trends:GetHealth()))'},
    {name='C_PetBattles.GetHealth', count=6, confidence=1.00, sample='local health=C_PetBattles.GetHealth(2,i)'},
  },
  ['IsValidChore'] = {
    {name='IsValidChore', count=8, confidence=1.00, sample='function Farming:IsValidChore()'},
  },
  ['CacheSkills'] = {
    {name='CacheSkills', count=3, confidence=0.60, sample='ZGV:CacheSkills()'},
  },
  ['CalculateAllChores'] = {
    {name='CalculateAllChores', count=3, confidence=0.60, sample='Goldguide:CalculateAllChores(true)'},
  },
  ['InitialiseAuctionChores'] = {
    {name='InitialiseAuctionChores', count=2, confidence=0.40, sample='Goldguide:InitialiseAuctionChores()'},
  },
  ['InitialiseCraftingChores'] = {
    {name='InitialiseCraftingChores', count=3, confidence=0.60, sample='Goldguide:InitialiseCraftingChores()'},
  },
  ['CalculateDetails'] = {
    {name='CalculateDetails', count=11, confidence=1.00, sample='for _,chore in pairs(Goldguide.Chores.Farming) do chore:CalculateDetails(refresh)   chore.needsRefresh=refresh end'},
    {name='Auctions.CalculateDetails', count=1, confidence=0.20, sample='if Auctions.CalculateDetails(chore) then Auctions:New(chore) end'},
  },
  ['GetCurrentSelectedItem'] = {
    {name='GetCurrentSelectedItem', count=7, confidence=1.00, sample='local type = Goldguide.Farming_Frame.TypeDropdown:GetCurrentSelectedItem():GetText()'},
  },
  ['SetEnabledIf'] = {
    {name='SetEnabledIf', count=2, confidence=0.40, sample='row.loadbutton:SetEnabledIf(not ZGVG.Appraiser:IsInCurrentDeals(chore.id))'},
  },
  ['IsInCurrentDeals'] = {
    {name='IsInCurrentDeals', count=3, confidence=0.60, sample='row.loadbutton:SetEnabledIf(not ZGVG.Appraiser:IsInCurrentDeals(chore.id))'},
  },
  ['UpdateSortingArrows'] = {
    {name='UpdateSortingArrows', count=3, confidence=0.60, sample='Goldguide:UpdateSortingArrows()'},
  },
  ['UpdateStatusBar'] = {
    {name='UpdateStatusBar', count=6, confidence=1.00, sample='Goldguide:UpdateStatusBar()'},
  },
  ['MainFrame_EventHandler'] = {
    {name='Goldguide.MainFrame_EventHandler', count=1, confidence=0.20, sample='function Goldguide.MainFrame_EventHandler(self, event, ...)'},
  },
  ['MainFrame_UpdateHandler'] = {
    {name='Goldguide.MainFrame_UpdateHandler', count=1, confidence=0.20, sample='function Goldguide.MainFrame_UpdateHandler(self, event)'},
  },
  ['UpdateSorting'] = {
    {name='Goldguide.UpdateSorting', count=1, confidence=0.20, sample='function Goldguide.UpdateSorting(widget,col)  -- NOT called with a colon; called from a ScrollTable widget.'},
    {name='WorldQuests.UpdateSorting', count=1, confidence=0.20, sample='function WorldQuests.UpdateSorting(widget,field)  -- NOT called with a colon; called from a ScrollTable widget.'},
  },
  ['GetItemFlagsAndStatus'] = {
    {name='GetItemFlagsAndStatus', count=3, confidence=0.60, sample='function Goldguide:GetItemFlagsAndStatus(chore)'},
  },
  ['GetProfitPerHour'] = {
    {name='GetProfitPerHour', count=2, confidence=0.40, sample='function Goldguide.Common:GetProfitPerHour()  -- NOT SMART. Stupid as hell.'},
  },
  ['GetItemPrice'] = {
    {name='GetItemPrice', count=4, confidence=0.80, sample='local vendorprice,ahprice = ZGVG:GetItemPrice(id)'},
  },
  ['GetSmartProfitPerHour'] = {
    {name='GetSmartProfitPerHour', count=2, confidence=0.40, sample='function Goldguide.Common:GetSmartProfitPerHour()'},
  },
  ['GetSellPrice'] = {
    {name='GetSellPrice', count=12, confidence=1.00, sample='local sellprice = ZGVG:GetSellPrice(itemid)'},
  },
  ['GetPriceStatus'] = {
    {name='GetPriceStatus', count=8, confidence=1.00, sample='local priceStatus = ZGVG:GetPriceStatus(itemid,sellprice)'},
  },
  ['GetTooltipData'] = {
    {name='GetTooltipData', count=7, confidence=1.00, sample='function Goldguide.Common:GetTooltipData(refresh)'},
  },
  ['GetPetFallbackId'] = {
    {name='GetPetFallbackId', count=3, confidence=0.60, sample='return Gold:GetSellPrice(ZGV.PetBattle:GetPetFallbackId(itemid),itemCount,true)'},
  },
  ['GetSaturation'] = {
    {name='GetSaturation', count=1, confidence=0.20, sample='function Gold:GetSaturation(itemid)'},
  },
  ['ZGV_GOLD_SCANNED'] = {
    {name='ZGV_GOLD_SCANNED', count=1, confidence=0.20, sample='function ZGV:ZGV_GOLD_SCANNED()'},
  },
  ['LastScan'] = {
    {name='LastScan', count=3, confidence=0.60, sample='function Gold:LastScan(min)	--in minutes'},
  },
  ['Can'] = {
    {name='Can', count=1, confidence=0.20, sample='"High risk. Can (and often will) face losses.",'},
  },
  ['GetInfoFrame'] = {
    {name='GetInfoFrame', count=5, confidence=1.00, sample='local function GetInfoFrame(parentFrame)'},
  },
  ['SetSummaryText'] = {
    {name='SetSummaryText', count=5, confidence=1.00, sample='function infoframe:SetSummaryText(txt)'},
  },
  ['AddPro'] = {
    {name='AddPro', count=5, confidence=1.00, sample='function infoframe:AddPro(text)'},
  },
  ['AddCon'] = {
    {name='AddCon', count=5, confidence=1.00, sample='function infoframe:AddCon(text)'},
  },
  ['SetDiffBarPercent'] = {
    {name='SetDiffBarPercent', count=5, confidence=1.00, sample='function infoframe:SetDiffBarPercent(num)'},
  },
  ['ToggleInfoPage'] = {
    {name='ToggleInfoPage', count=3, confidence=0.60, sample='Goldguide:ToggleInfoPage()'},
  },
  ['MakeInfoPages'] = {
    {name='MakeInfoPages', count=2, confidence=0.40, sample='function Goldguide:MakeInfoPages()'},
  },
  ['CD'] = {
    {name='CD', count=4, confidence=0.80, sample='-- yes, .CD() and not :CD(). There are way too many auctions to do a full parse on them, so we are'},
  },
  ['UNDERCUT'] = {
    {name='UNDERCUT', count=2, confidence=0.40, sample='local function UNDERCUT(price,limit)'},
  },
  ['M'] = {
    {name='M', count=7, confidence=1.00, sample='--worth=M(self.targetprice),'},
  },
  ['BUY'] = {
    {name='BUY', count=1, confidence=0.20, sample='{ title="BUY (ALL)", width=110, titlej="RIGHT", textj="RIGHT", name="buyall" },'},
  },
  ['SELL'] = {
    {name='SELL', count=1, confidence=0.20, sample='{ title="SELL (ALL)", width=110, titlej="RIGHT", textj="RIGHT", name="sellall" },'},
  },
  ['MakeImgButton'] = {
    {name='MakeImgButton', count=5, confidence=1.00, sample='local function MakeImgButton(name,seticon,caption)'},
  },
  ['ShowMenuTooltip'] = {
    {name='ShowMenuTooltip', count=2, confidence=0.40, sample=':SetScript("OnEnter", function() Goldguide:ShowMenuTooltip(MF.HeaderFrame.menu,"Go back to main menu") end)'},
  },
  ['HideMenuTooltip'] = {
    {name='HideMenuTooltip', count=2, confidence=0.40, sample=':SetScript("OnLeave", function() Goldguide:HideMenuTooltip() end)'},
  },
  ['ToggleHelpPage'] = {
    {name='ToggleHelpPage', count=3, confidence=0.60, sample=':SetScript("OnClick", function() Goldguide:ToggleHelpPage() end)'},
  },
  ['SetCurrentTab'] = {
    {name='SetCurrentTab', count=16, confidence=1.00, sample=':SetScript("OnClick",function(tab) Goldguide:SetCurrentTab("Farming") end)'},
  },
  ['MakeTable_Farming'] = {
    {name='MakeTable_Farming', count=2, confidence=0.40, sample='Goldguide.Farming_Frame   = Goldguide:MakeTable_Farming()'},
  },
  ['MakeTable_Gathering'] = {
    {name='MakeTable_Gathering', count=2, confidence=0.40, sample='Goldguide.Gathering_Frame = Goldguide:MakeTable_Gathering()'},
  },
  ['MakeTable_Crafting'] = {
    {name='MakeTable_Crafting', count=2, confidence=0.40, sample='Goldguide.Crafting_Frame  = Goldguide:MakeTable_Crafting()'},
  },
  ['MakeTable_Auctions'] = {
    {name='MakeTable_Auctions', count=2, confidence=0.40, sample='Goldguide.Auctions_Frame  = Goldguide:MakeTable_Auctions()'},
  },
  ['MakeTooltip'] = {
    {name='MakeTooltip', count=5, confidence=1.00, sample='Goldguide.FarmingTooltip = Goldguide:MakeTooltip("Farming",FARMING_TOOLTIP)'},
  },
  ['ShowLoadbuttonTooltip'] = {
    {name='ShowLoadbuttonTooltip', count=5, confidence=1.00, sample='row.loadbutton:SetScript("OnEnter",function() if row.chore then Goldguide:ShowLoadbuttonTooltip(row.loadbutton,"Load guide",row.chore.display_name) end end)'},
  },
  ['HideLoadbuttonTooltip'] = {
    {name='HideLoadbuttonTooltip', count=5, confidence=1.00, sample='row.loadbutton:SetScript("OnLeave",function() Goldguide:HideLoadbuttonTooltip(row) end)'},
  },
  ['DisplayData'] = {
    {name='DisplayData', count=5, confidence=1.00, sample='row:SetScript("OnEnter",function(self) ZGV.Goldguide.FarmingTooltip:DisplayData(row) end)'},
  },
  ['AddTooltip'] = {
    {name='AddTooltip', count=14, confidence=1.00, sample=':AddTooltip("ANCHOR_TOPLEFT",L["gold_expertmode_generictooltip"])'},
  },
  ['AddItemToBuy'] = {
    {name='AddItemToBuy', count=3, confidence=0.60, sample='ZGV.Gold.Appraiser:AddItemToBuy(row.chore.id,row.chore.count,ZGV.Gold.Appraiser.ShoppingModes.GOLD,row.chore.price,nil,row.chore.category)'},
  },
  ['OldColor'] = {
    {name='OldColor', count=7, confidence=1.00, sample='local function OldColor(timestamp,red,yellow)'},
  },
  ['GetTimeStamp'] = {
    {name='GetTimeStamp', count=5, confidence=1.00, sample='timestamptext = ("|c%s%s|r"):format(OldColor(ScanDatabase.LastScan,3600*2,60*10), ui.GetTimeStamp(ScanDatabase.LastScan))'},
    {name='UI.GetTimeStamp', count=1, confidence=0.20, sample='function UI.GetTimeStamp(lasttime)'},
    {name='ZGV.UI.GetTimeStamp', count=2, confidence=0.40, sample='self.timestamp:SetText(ZGV.UI.GetTimeStamp(self.lastTimeStampReset))'},
  },
  ['CreateHelpContentPanel'] = {
    {name='CreateHelpContentPanel', count=2, confidence=0.40, sample='if not Goldguide.MainFrame.helpPanel then Goldguide:CreateHelpContentPanel() end'},
  },
  ['HighlightGoldguideColumn'] = {
    {name='HighlightGoldguideColumn', count=44, confidence=1.00, sample='function() return {L['gold_4_header'],nil,L['gold_4_sum'],Goldguide.Farming_Frame,defaultPoint,nil,nil,function() Goldguide:SetCurrentTab("Farming") Goldguide:HighlightGoldguideColumn() if AuctionFrame_Hide then AuctionFrame_Hide() end end } end, -- HiColumn for hitting back support'},
  },
  ['AuctionFrame_Hide'] = {
    {name='AuctionFrame_Hide', count=4, confidence=0.80, sample='function() return {L['gold_4_header'],nil,L['gold_4_sum'],Goldguide.Farming_Frame,defaultPoint,nil,nil,function() Goldguide:SetCurrentTab("Farming") Goldguide:HighlightGoldguideColumn() if AuctionFrame_Hide then AuctionFrame_Hide() end end } end, -- HiColumn for hitting back support'},
  },
  ['SetPerfectSizing'] = {
    {name='SetPerfectSizing', count=2, confidence=0.40, sample='--:SetPerfectSizing(1)'},
  },
  ['RunTutorial'] = {
    {name='RunTutorial', count=4, confidence=0.80, sample='Goldguide:RunTutorial(info[2],1)'},
  },
  ['CreateHelpPopup'] = {
    {name='CreateHelpPopup', count=2, confidence=0.40, sample='function Goldguide:CreateHelpPopup()'},
  },
  ['SavedSetParent'] = {
    {name='SavedSetParent', count=1, confidence=0.20, sample='self:SavedSetParent(parent)'},
  },
  ['SetHeader'] = {
    {name='SetHeader', count=2, confidence=0.40, sample='function popup:SetHeader(text)'},
  },
  ['SetImage'] = {
    {name='SetImage', count=11, confidence=1.00, sample='function popup:SetImage(object)'},
  },
  ['SetSummary'] = {
    {name='SetSummary', count=2, confidence=0.40, sample='function popup:SetSummary(text)'},
  },
  ['OnNextHook'] = {
    {name='OnNextHook', count=1, confidence=0.20, sample='--function popup:OnNextHook()	end'},
  },
  ['SavedSetPoint'] = {
    {name='SavedSetPoint', count=1, confidence=0.20, sample='self:SavedSetPoint(...)'},
  },
  ['SetRowElementsAlpha'] = {
    {name='SetRowElementsAlpha', count=3, confidence=0.60, sample='local function SetRowElementsAlpha(row,a)'},
  },
  ['SetColumnsAlpha'] = {
    {name='SetColumnsAlpha', count=3, confidence=0.60, sample='local function SetColumnsAlpha(page,a)'},
  },
  ['SetupSprites'] = {
    {name='SetupSprites', count=2, confidence=0.40, sample='self:SetupSprites()'},
  },
  ['SetupColors'] = {
    {name='SetupColors', count=2, confidence=0.40, sample='self:SetupColors()'},
  },
  ['GetArrowColors'] = {
    {name='GetArrowColors', count=2, confidence=0.40, sample='local r,g,b = self:GetArrowColors(angle_rad,dist)'},
  },
  ['GetPrecisionMeter'] = {
    {name='GetPrecisionMeter', count=2, confidence=0.40, sample='local precise = self:GetPrecisionMeter(angle)'},
  },
  ['GetVertexColor'] = {
    {name='GetVertexColor', count=36, confidence=1.00, sample='local r,g,b,a = self.arrow.arr:GetVertexColor()'},
  },
  ['SetAngle'] = {
    {name='SetAngle', count=1, confidence=0.20, sample='--self.arrow:SetAngle(phase*6.28)'},
  },
  ['GetDistTxt'] = {
    {name='GetDistTxt', count=2, confidence=0.40, sample='function ZygorGuidesViewerFrame_Arrow_Mixin:GetDistTxt(dist)'},
  },
  ['GetFarText'] = {
    {name='GetFarText', count=2, confidence=0.40, sample='if not dist or dist=="far" or ((tonumber(dist or 0) or 0)>9999998) then return self:GetFarText()'},
  },
  ['GetETATxt'] = {
    {name='GetETATxt', count=2, confidence=0.40, sample='function ZygorGuidesViewerFrame_Arrow_Mixin:GetETATxt(eta)'},
  },
  ['ConvertSpritesForArrows'] = {
    {name='ConvertSpritesForArrows', count=2, confidence=0.40, sample='self:ConvertSpritesForArrows(self.arrow.arr)'},
  },
  ['ArrowFrame_Proto_ShowText'] = {
    {name='Pointer.ArrowFrame_Proto_ShowText', count=1, confidence=0.20, sample='--Pointer.ArrowFrame_Proto_ShowText(self)'},
  },
  ['SetRadians'] = {
    {name='SetRadians', count=2, confidence=0.40, sample='self.turn.anim:SetRadians(frac_angle/rad2deg)  self.turn:Play()'},
  },
  ['Verteidigung'] = {
    {name='Verteidigung', count=1, confidence=0.20, sample='DEFENSE_SKILL = "Verteidigung ([+-]+)([0-9]+).",'},
  },
  ['Goal'] = {
    {name='Goal', count=1, confidence=0.20, sample='["stepgoal_scenariogoal_unknown #"] = "Complete %d Scenario Goal(s)",'},
  },
  ['GetItemClassInfo'] = {
    {name='C_Item.GetItemClassInfo', count=21, confidence=1.00, sample='["type_armor"] = C_Item.GetItemClassInfo(Enum.ItemClass.Armor),'},
  },
  ['GetItemSubClassInfo'] = {
    {name='C_Item.GetItemSubClassInfo', count=98, confidence=1.00, sample='["subtype_armor_miscellaneous"] = C_Item.GetItemSubClassInfo(Enum.ItemClass.Armor,Enum.ItemArmorSubclass.Generic),'},
  },
  ['Defense'] = {
    {name='Defense', count=5, confidence=1.00, sample='DEFENSE_SKILL = "Increased Defense ([+-]+)([0-9]+).",'},
  },
  ['Profiler'] = {
    {name='Profiler', count=1, confidence=0.20, sample='opt_profiler = "Profiler (caution!)",'},
  },
  ['Slave'] = {
    {name='Slave', count=2, confidence=0.40, sample='opt_share_masterslave_slave = "Slave (receives)",'},
  },
  ['L'] = {
    {name='L', count=1, confidence=0.20, sample='-- rest is pulled from L("zta")'},
  },
  ['Ahead'] = {
    {name='Ahead', count=1, confidence=0.20, sample='sync_ahead = "|cff88ff88%s: Ahead (%d)|r", -- name, count'},
  },
  ['Behind'] = {
    {name='Behind', count=1, confidence=0.20, sample='sync_behind = "|cffff8888%s: Behind (%d)|r", -- name, count'},
  },
  ['C_GREEN'] = {
    {name='C_GREEN', count=2, confidence=0.40, sample='local function C_GREEN(s) return "|cff00ff00"..s.."|r" end'},
  },
  ['C_WHITE'] = {
    {name='C_WHITE', count=5, confidence=1.00, sample='local function C_WHITE(s) return "|cffffffff"..s.."|r" end'},
  },
  ['C_RED'] = {
    {name='C_RED', count=2, confidence=0.40, sample='local function C_RED(s) return "|cffff0000"..s.."|r" end'},
  },
  ['C_GRAY'] = {
    {name='C_GRAY', count=2, confidence=0.40, sample='local function C_GRAY(s) return "|cffaaaaaa"..s.."|r" end'},
  },
  ['Guides_xxXX'] = {
    {name='Guides_xxXX', count=1, confidence=0.20, sample='-- Guides_xxXX (temporarily) have simply full guide texts, translated - hence NO enUS file there.'},
  },
  ['Esploratori'] = {
    {name='Esploratori', count=6, confidence=1.00, sample='[13655] = "Documento della Lega degli Esploratori (2 di 6)",'},
  },
  ['La'] = {
    {name='La', count=1, confidence=0.20, sample='[26700] = "La (S)Fortuna della Damigella",'},
  },
  ['Vittoria'] = {
    {name='Vittoria', count=1, confidence=0.20, sample='[52291] = "Vittoria (non proprio) assicurata",'},
  },
  ['Temp'] = {
    {name='Temp', count=1, confidence=0.20, sample='[67026] = "Tieni il Temp(i)o",'},
  },
  ['Expedicionarios'] = {
    {name='Expedicionarios', count=6, confidence=1.00, sample='[13655] = "Documento de la Liga de Expedicionarios (2 de 6)",'},
  },
  ['GUERRA'] = {
    {name='GUERRA', count=1, confidence=0.20, sample='[27001] = "Esto es la GUERRA (Gran Unificación y Erradicación de Raras y Rabiosas Arañas)",'},
  },
  ['Exploradores'] = {
    {name='Exploradores', count=6, confidence=1.00, sample='[13655] = "Documento da Liga dos Exploradores (2 de 6)",'},
  },
  ['Como'] = {
    {name='Como', count=1, confidence=0.20, sample='[13979] = "Como (des)motivar goblins",'},
  },
  ['Ora'] = {
    {name='Ora', count=1, confidence=0.20, sample='[26683] = "Ora (direis) ouvir estrelas!",'},
  },
  ['A'] = {
    {name='A', count=3, confidence=0.60, sample='[26700] = "A (má) Sorte da Donzela",'},
  },
  ['PAU'] = {
    {name='PAU', count=1, confidence=0.20, sample='[27001] = "Tá na hora do PAU (Porrada nas Aranhas Urgente!)",'},
  },
  ['Grim'] = {
    {name='Grim', count=9, confidence=1.00, sample='[10998] = "Grim(oire) Business",'},
  },
  ['Grand'] = {
    {name='Grand', count=5, confidence=1.00, sample='[12839] = "The Grand (Admiral's) Plan",'},
  },
  ['Document'] = {
    {name='Document', count=23, confidence=1.00, sample='[13655] = "Explorers' League Document (2 of 6)",'},
  },
  ['WAR'] = {
    {name='WAR', count=11, confidence=1.00, sample='[27001] = "This Means WAR (Wild Arachnid Roundup)",'},
  },
  ['Grub'] = {
    {name='Grub', count=13, confidence=1.00, sample='[27456] = "Gathering Some Grub(s)",'},
  },
  ['Dark'] = {
    {name='Dark', count=9, confidence=1.00, sample='[48399] = "A Dark (Iron) Tide",'},
  },
  ['Reforg'] = {
    {name='Reforg', count=3, confidence=0.60, sample='[77831] = "A Key To Reforg(ing)",'},
  },
  ['Mine'] = {
    {name='Mine', count=7, confidence=1.00, sample='[79579] = "That Airspace is Mine(d)!",'},
  },
  ['Plan'] = {
    {name='Plan', count=1, confidence=0.20, sample='[12839] = "Der große Plan (des Admirals)",'},
  },
  ['Forscherliga'] = {
    {name='Forscherliga', count=6, confidence=1.00, sample='[13655] = "Dokument der Forscherliga (2 von 6)",'},
  },
  ['IDEEN'] = {
    {name='IDEEN', count=1, confidence=0.20, sample='[25110] = "Kaja'Cola! Hier kommen die IDEEN (TM)",'},
  },
  ['WoW'] = {
    {name='WoW', count=1, confidence=0.20, sample='[27001] = "Hier ist WoW (Wald ohne Wildspinnen)",'},
  },
  ['Dunkle'] = {
    {name='Dunkle', count=1, confidence=0.20, sample='[48399] = "Dunkle (Eisen-)Flut",'},
  },
  ['Fallbei'] = {
    {name='Fallbei', count=1, confidence=0.20, sample='[64854] = "Fallbei(l)spiele",'},
  },
  ['Welpen'] = {
    {name='Welpen', count=1, confidence=0.20, sample='[78356] = "Traumwappen des Welpen (Keine Begrenzung)",'},
  },
  ['UIDropDownForkDelegate_OnAttributeChanged'] = {
    {name='UIDropDownForkDelegate_OnAttributeChanged', count=1, confidence=0.20, sample='function UIDropDownForkDelegate_OnAttributeChanged (self, attribute, value)'},
  },
  ['UIDropDownFork_CreateFrames'] = {
    {name='UIDropDownFork_CreateFrames', count=2, confidence=0.40, sample='UIDropDownFork_CreateFrames(self:GetAttribute("createframes-level"), self:GetAttribute("createframes-index"));'},
  },
  ['UIDropDownForkDelegate_OnEvent'] = {
    {name='UIDropDownForkDelegate_OnEvent', count=1, confidence=0.20, sample='function UIDropDownForkDelegate_OnEvent (self, event, ...)'},
  },
  ['UIDropDownFork_InitializeHelper'] = {
    {name='UIDropDownFork_InitializeHelper', count=1, confidence=0.20, sample='function UIDropDownFork_InitializeHelper (frame)'},
  },
  ['GetChild'] = {
    {name='GetChild', count=29, confidence=1.00, sample='local function GetChild(frame, name, key)'},
  },
  ['UIDropDownFork_Initialize'] = {
    {name='UIDropDownFork_Initialize', count=3, confidence=0.60, sample='function UIDropDownFork_Initialize(frame, initFunction, displayMode, level, menuList)'},
  },
  ['UIDropDownFork_SetInitializeFunction'] = {
    {name='UIDropDownFork_SetInitializeFunction', count=2, confidence=0.40, sample='UIDropDownFork_SetInitializeFunction(frame, initFunction);'},
  },
  ['UIDropDownFork_SetDisplayMode'] = {
    {name='UIDropDownFork_SetDisplayMode', count=2, confidence=0.40, sample='UIDropDownFork_SetDisplayMode(frame, displayMode);'},
  },
  ['UIDropDownFork_RefreshDropDownSize'] = {
    {name='UIDropDownFork_RefreshDropDownSize', count=3, confidence=0.60, sample='function UIDropDownFork_RefreshDropDownSize(self)'},
  },
  ['UIDropDownFork_GetMaxButtonWidth'] = {
    {name='UIDropDownFork_GetMaxButtonWidth', count=2, confidence=0.40, sample='self.maxWidth = UIDropDownFork_GetMaxButtonWidth(self);'},
  },
  ['UIDropDownFork_OnUpdate'] = {
    {name='UIDropDownFork_OnUpdate', count=1, confidence=0.20, sample='function UIDropDownFork_OnUpdate(self, elapsed)'},
  },
  ['UIDropDownFork_StartCounting'] = {
    {name='UIDropDownFork_StartCounting', count=4, confidence=0.80, sample='function UIDropDownFork_StartCounting(frame)'},
  },
  ['UIDropDownFork_StopCounting'] = {
    {name='UIDropDownFork_StopCounting', count=4, confidence=0.80, sample='function UIDropDownFork_StopCounting(frame)'},
  },
  ['UIDropDownForkButtonInvisibleButton_OnEnter'] = {
    {name='UIDropDownForkButtonInvisibleButton_OnEnter', count=1, confidence=0.20, sample='function UIDropDownForkButtonInvisibleButton_OnEnter(self)'},
  },
  ['GameTooltip_SetTitle'] = {
    {name='GameTooltip_SetTitle', count=2, confidence=0.40, sample='GameTooltip_SetTitle(GameTooltip, parent.tooltipTitle);'},
  },
  ['GameTooltip_AddInstructionLine'] = {
    {name='GameTooltip_AddInstructionLine', count=1, confidence=0.20, sample='GameTooltip_AddInstructionLine(GameTooltip, parent.tooltipInstruction);'},
  },
  ['GameTooltip_AddNormalLine'] = {
    {name='GameTooltip_AddNormalLine', count=2, confidence=0.40, sample='GameTooltip_AddNormalLine(GameTooltip, parent.tooltipText, true);'},
  },
  ['GameTooltip_AddColoredLine'] = {
    {name='GameTooltip_AddColoredLine', count=1, confidence=0.20, sample='GameTooltip_AddColoredLine(GameTooltip, parent.tooltipWarning, RED_FONT_COLOR, true);'},
  },
  ['UIDropDownForkButtonInvisibleButton_OnLeave'] = {
    {name='UIDropDownForkButtonInvisibleButton_OnLeave', count=1, confidence=0.20, sample='function UIDropDownForkButtonInvisibleButton_OnLeave(self)'},
  },
  ['UIDropDownFork_CreateInfo'] = {
    {name='UIDropDownFork_CreateInfo', count=1, confidence=0.20, sample='function UIDropDownFork_CreateInfo()'},
  },
  ['UIDropDownFork_AddSeparator'] = {
    {name='UIDropDownFork_AddSeparator', count=1, confidence=0.20, sample='function UIDropDownFork_AddSeparator(level)'},
  },
  ['SetDisabledFontObject'] = {
    {name='SetDisabledFontObject', count=9, confidence=1.00, sample='button:SetDisabledFontObject(GameFontDisableSmallLeft);'},
  },
  ['SetNormalFontObject'] = {
    {name='SetNormalFontObject', count=15, confidence=1.00, sample='button:SetNormalFontObject(info.fontObject);'},
  },
  ['SetHighlightFontObject'] = {
    {name='SetHighlightFontObject', count=11, confidence=1.00, sample='button:SetHighlightFontObject(info.fontObject);'},
  },
  ['UIDropDownFork_SetIconImage'] = {
    {name='UIDropDownFork_SetIconImage', count=3, confidence=0.60, sample='UIDropDownFork_SetIconImage(icon, info.icon, info.iconInfo);'},
  },
  ['UIDropDownFork_GetSelectedName'] = {
    {name='UIDropDownFork_GetSelectedName', count=7, confidence=1.00, sample='if ( UIDropDownFork_GetSelectedName(frame) ) then'},
  },
  ['UIDropDownFork_GetSelectedID'] = {
    {name='UIDropDownFork_GetSelectedID', count=5, confidence=1.00, sample='elseif ( UIDropDownFork_GetSelectedID(frame) ) then'},
  },
  ['UIDropDownFork_GetSelectedValue'] = {
    {name='UIDropDownFork_GetSelectedValue', count=7, confidence=1.00, sample='elseif ( UIDropDownFork_GetSelectedValue(frame) ) then'},
  },
  ['SetAtlas'] = {
    {name='SetAtlas', count=66, confidence=1.00, sample='check:SetAtlas(info.customCheckIconAtlas);'},
  },
  ['LockHighlight'] = {
    {name='LockHighlight', count=11, confidence=1.00, sample='button:LockHighlight();'},
  },
  ['UIDropDownFork_CheckAddCustomFrame'] = {
    {name='UIDropDownFork_CheckAddCustomFrame', count=2, confidence=0.40, sample='UIDropDownFork_CheckAddCustomFrame(listFrame, button, info);'},
  },
  ['UIDropDownFork_GetButtonWidth'] = {
    {name='UIDropDownFork_GetButtonWidth', count=4, confidence=0.80, sample='width = UIDropDownFork_GetButtonWidth(button)'},
  },
  ['SetOwningButton'] = {
    {name='SetOwningButton', count=1, confidence=0.20, sample='customFrame:SetOwningButton(button);'},
  },
  ['UIDropDownFork_RegisterCustomFrame'] = {
    {name='UIDropDownFork_RegisterCustomFrame', count=2, confidence=0.40, sample='UIDropDownFork_RegisterCustomFrame(self, customFrame);'},
  },
  ['GetPreferredEntryWidth'] = {
    {name='GetPreferredEntryWidth', count=1, confidence=0.20, sample='return math.max(minWidth, button.customFrame:GetPreferredEntryWidth());'},
  },
  ['UIDropDownFork_RefreshAll'] = {
    {name='UIDropDownFork_RefreshAll', count=2, confidence=0.40, sample='function UIDropDownFork_RefreshAll(frame, useValue)'},
  },
  ['UIDropDownFork_SetSelectedName'] = {
    {name='UIDropDownFork_SetSelectedName', count=1, confidence=0.20, sample='function UIDropDownFork_SetSelectedName(frame, name, useValue)'},
  },
  ['UIDropDownFork_SetSelectedValue'] = {
    {name='UIDropDownFork_SetSelectedValue', count=1, confidence=0.20, sample='function UIDropDownFork_SetSelectedValue(frame, value, useValue)'},
  },
  ['UIDropDownFork_SetSelectedID'] = {
    {name='UIDropDownFork_SetSelectedID', count=1, confidence=0.20, sample='function UIDropDownFork_SetSelectedID(frame, id, useValue)'},
  },
  ['UIDropDownForkButton_OnClick'] = {
    {name='UIDropDownForkButton_OnClick', count=1, confidence=0.20, sample='function UIDropDownForkButton_OnClick(self)'},
  },
  ['HideDropDownFork'] = {
    {name='HideDropDownFork', count=1, confidence=0.20, sample='function HideDropDownFork(level)'},
  },
  ['GetScreenWidth'] = {
    {name='GetScreenWidth', count=11, confidence=1.00, sample='local offRight = (GetScreenWidth() - listFrame:GetRight())/uiScale;'},
  },
  ['GetScreenHeight'] = {
    {name='GetScreenHeight', count=11, confidence=1.00, sample='local offTop = (GetScreenHeight() - listFrame:GetTop())/uiScale;'},
  },
  ['TOP'] = {
    {name='TOP', count=4, confidence=0.80, sample='point = gsub(point, "TOP(.*)", "BOTTOM%1");'},
  },
  ['DropDownForkList'] = {
    {name='DropDownForkList', count=1, confidence=0.20, sample='listFrame.parentLevel = tonumber(strmatch(anchorFrame:GetName(), "DropDownForkList(%d+)"));'},
  },
  ['UIDropDownFork_ApplySkin'] = {
    {name='UIDropDownFork_ApplySkin', count=2, confidence=0.40, sample='UIDropDownFork_ApplySkin()'},
  },
  ['UIDropDownFork_OnHide'] = {
    {name='UIDropDownFork_OnHide', count=1, confidence=0.20, sample='function UIDropDownFork_OnHide(self)'},
  },
  ['UIDropDownFork_SetButtonWidth'] = {
    {name='UIDropDownFork_SetButtonWidth', count=1, confidence=0.20, sample='function UIDropDownFork_SetButtonWidth(frame, width)'},
  },
  ['UIDropDownFork_GetText'] = {
    {name='UIDropDownFork_GetText', count=1, confidence=0.20, sample='function UIDropDownFork_GetText(frame)'},
  },
  ['UIDropDownFork_ClearAll'] = {
    {name='UIDropDownFork_ClearAll', count=1, confidence=0.20, sample='function UIDropDownFork_ClearAll(frame)'},
  },
  ['UIDropDownFork_JustifyText'] = {
    {name='UIDropDownFork_JustifyText', count=1, confidence=0.20, sample='function UIDropDownFork_JustifyText(frame, justification)'},
  },
  ['UIDropDownFork_GetCurrentDropDown'] = {
    {name='UIDropDownFork_GetCurrentDropDown', count=1, confidence=0.20, sample='function UIDropDownFork_GetCurrentDropDown()'},
  },
  ['UIDropDownForkButton_GetChecked'] = {
    {name='UIDropDownForkButton_GetChecked', count=1, confidence=0.20, sample='function UIDropDownForkButton_GetChecked(self)'},
  },
  ['UIDropDownForkButton_GetName'] = {
    {name='UIDropDownForkButton_GetName', count=1, confidence=0.20, sample='function UIDropDownForkButton_GetName(self)'},
  },
  ['UIDropDownForkButton_OpenColorPicker'] = {
    {name='UIDropDownForkButton_OpenColorPicker', count=1, confidence=0.20, sample='function UIDropDownForkButton_OpenColorPicker(self, button)'},
  },
  ['CloseMenus'] = {
    {name='CloseMenus', count=1, confidence=0.20, sample='CloseMenus();'},
  },
  ['OpenColorPicker'] = {
    {name='OpenColorPicker', count=3, confidence=0.60, sample='OpenColorPicker(button);'},
  },
  ['UIDropDownFork_DisableButton'] = {
    {name='UIDropDownFork_DisableButton', count=1, confidence=0.20, sample='function UIDropDownFork_DisableButton(level, id)'},
  },
  ['UIDropDownFork_EnableButton'] = {
    {name='UIDropDownFork_EnableButton', count=1, confidence=0.20, sample='function UIDropDownFork_EnableButton(level, id)'},
  },
  ['UIDropDownFork_SetButtonText'] = {
    {name='UIDropDownFork_SetButtonText', count=1, confidence=0.20, sample='function UIDropDownFork_SetButtonText(level, id, text, colorCode)'},
  },
  ['UIDropDownFork_SetButtonNotClickable'] = {
    {name='UIDropDownFork_SetButtonNotClickable', count=1, confidence=0.20, sample='function UIDropDownFork_SetButtonNotClickable(level, id)'},
  },
  ['UIDropDownFork_SetButtonClickable'] = {
    {name='UIDropDownFork_SetButtonClickable', count=1, confidence=0.20, sample='function UIDropDownFork_SetButtonClickable(level, id)'},
  },
  ['UIDropDownFork_DisableDropDown'] = {
    {name='UIDropDownFork_DisableDropDown', count=1, confidence=0.20, sample='function UIDropDownFork_DisableDropDown(dropDown)'},
  },
  ['UIDropDownFork_EnableDropDown'] = {
    {name='UIDropDownFork_EnableDropDown', count=1, confidence=0.20, sample='function UIDropDownFork_EnableDropDown(dropDown)'},
  },
  ['UIDropDownFork_IsEnabled'] = {
    {name='UIDropDownFork_IsEnabled', count=1, confidence=0.20, sample='function UIDropDownFork_IsEnabled(dropDown)'},
  },
  ['UIDropDownFork_GetValue'] = {
    {name='UIDropDownFork_GetValue', count=1, confidence=0.20, sample='function UIDropDownFork_GetValue(id)'},
  },
  ['SetColorRGB'] = {
    {name='SetColorRGB', count=7, confidence=1.00, sample='ColorPickerFrame:SetColorRGB(info.r, info.g, info.b);'},
  },
  ['ColorPicker_GetPreviousValues'] = {
    {name='ColorPicker_GetPreviousValues', count=1, confidence=0.20, sample='function ColorPicker_GetPreviousValues()'},
  },
  ['GetPlayerWorldPosition'] = {
    {name='GetPlayerWorldPosition', count=8, confidence=1.00, sample='local oX, oY, instanceID = HBD:GetPlayerWorldPosition()'},
  },
  ['GetWorldVector'] = {
    {name='GetWorldVector', count=3, confidence=0.60, sample='return HBD:GetWorldVector(instanceID, oX, oY, data.x, data.y)'},
  },
  ['GetWorldDistance'] = {
    {name='GetWorldDistance', count=4, confidence=0.80, sample='local dist, detalx, deltay = HBD:GetWorldDistance(instanceID, oX, oY, data.x, data.y)'},
  },
  ['EasyFork_Initialize'] = {
    {name='EasyFork_Initialize', count=1, confidence=0.20, sample='local function EasyFork_Initialize( frame, level, menuList )'},
  },
  ['FriendsFrame_GetLastOnline'] = {
    {name='FriendsFrame_GetLastOnline', count=1, confidence=0.20, sample='--local s = FriendsFrame_GetLastOnline(lasttime)'},
  },
  ['InventoryClick'] = {
    {name='InventoryClick', count=1, confidence=0.20, sample='Appraiser:InventoryClick(row)'},
  },
  ['MaxValueAtOnce'] = {
    {name='MaxValueAtOnce', count=6, confidence=1.00, sample=':MaxValueAtOnce(DATA.ROW_COUNT)'},
  },
  ['ResizeRows'] = {
    {name='ResizeRows', count=4, confidence=0.80, sample='self:ResizeRows()'},
  },
  ['SetColumnWidth'] = {
    {name='SetColumnWidth', count=1, confidence=0.20, sample='function ScrollTable:SetColumnWidth(column,width)'},
  },
  ['MaxWidth'] = {
    {name='MaxWidth', count=1, confidence=0.20, sample=':MaxWidth(maxwidth)'},
  },
  ['OnHyperEnter'] = {
    {name='OnHyperEnter', count=2, confidence=0.40, sample=':SetScript("OnHyperlinkEnter", function(self,...) self:OnHyperEnter(...) end)'},
  },
  ['OnHyperLeave'] = {
    {name='OnHyperLeave', count=2, confidence=0.40, sample=':SetScript("OnHyperlinkLeave", function(self,...) self:OnHyperLeave(...) end)'},
  },
  ['SetMaxWidth'] = {
    {name='SetMaxWidth', count=2, confidence=0.40, sample='function HyperEditBox:SetMaxWidth(width)'},
  },
  ['ShowPetTooltip'] = {
    {name='ShowPetTooltip', count=1, confidence=0.20, sample='local function ShowPetTooltip(self)'},
  },
  ['HideTooltip'] = {
    {name='HideTooltip', count=6, confidence=1.00, sample='local function HideTooltip(self)'},
  },
  ['SetAllSizes'] = {
    {name='SetAllSizes', count=1, confidence=0.20, sample='function ActionButton:SetAllSizes(width,height)'},
  },
  ['UpdateTexture'] = {
    {name='UpdateTexture', count=6, confidence=1.00, sample='function ActionButton:UpdateTexture()'},
  },
  ['SetSpell'] = {
    {name='SetSpell', count=2, confidence=0.40, sample='function ActionButton:SetSpell(spellid)'},
  },
  ['ClearData'] = {
    {name='ClearData', count=6, confidence=1.00, sample='self:ClearData()'},
  },
  ['EnableCooldown'] = {
    {name='EnableCooldown', count=1, confidence=0.20, sample='function ActionButton:EnableCooldown()'},
  },
  ['DisableCooldown'] = {
    {name='DisableCooldown', count=1, confidence=0.20, sample='function ActionButton:DisableCooldown()'},
  },
  ['EnableHighlight'] = {
    {name='EnableHighlight', count=1, confidence=0.20, sample='function ActionButton:EnableHighlight()'},
  },
  ['DisableHighlight'] = {
    {name='DisableHighlight', count=1, confidence=0.20, sample='function ActionButton:DisableHighlight()'},
  },
  ['EnableTooltip'] = {
    {name='EnableTooltip', count=1, confidence=0.20, sample='function ActionButton:EnableTooltip()'},
  },
  ['DisableTooltip'] = {
    {name='DisableTooltip', count=1, confidence=0.20, sample='function ActionButton:DisableTooltip()'},
  },
  ['EnableDrag'] = {
    {name='EnableDrag', count=1, confidence=0.20, sample='function ActionButton:EnableDrag()'},
  },
  ['DisableDrag'] = {
    {name='DisableDrag', count=1, confidence=0.20, sample='function ActionButton:DisableDrag()'},
  },
  ['UpdateTimeStamp'] = {
    {name='UpdateTimeStamp', count=2, confidence=0.40, sample='function Frame:UpdateTimeStamp()'},
  },
  ['ResetTimeStamp'] = {
    {name='ResetTimeStamp', count=1, confidence=0.20, sample='function Frame:ResetTimeStamp()'},
  },
  ['RegisterToggleCallback'] = {
    {name='RegisterToggleCallback', count=6, confidence=1.00, sample='function ToggleButton:RegisterToggleCallback(callback)'},
  },
  ['RemoveToggleCallbacks'] = {
    {name='RemoveToggleCallbacks', count=2, confidence=0.40, sample='function ToggleButton:RemoveToggleCallbacks()'},
  },
  ['RegisterOnEnterCallback'] = {
    {name='RegisterOnEnterCallback', count=2, confidence=0.40, sample='function ToggleButton:RegisterOnEnterCallback(callback)'},
  },
  ['RegisterOnLeaveCallback'] = {
    {name='RegisterOnLeaveCallback', count=2, confidence=0.40, sample='function ToggleButton:RegisterOnLeaveCallback(callback)'},
  },
  ['RemoveOnEnterCallbacks'] = {
    {name='RemoveOnEnterCallbacks', count=2, confidence=0.40, sample='function ToggleButton:RemoveOnEnterCallbacks()'},
  },
  ['RemoveOnLeaveCallbacks'] = {
    {name='RemoveOnLeaveCallbacks', count=2, confidence=0.40, sample='function ToggleButton:RemoveOnLeaveCallbacks()'},
  },
  ['SetCanToggle'] = {
    {name='SetCanToggle', count=2, confidence=0.40, sample='function ToggleButton:SetCanToggle(set)'},
  },
  ['SetTextPos'] = {
    {name='SetTextPos', count=2, confidence=0.40, sample='function ToggleButton:SetTextPos(pos)'},
  },
  ['ShowMenu'] = {
    {name='ShowMenu', count=5, confidence=1.00, sample='container:SetScript("OnClick",function() container:ShowMenu() end)'},
  },
  ['SetSelected'] = {
    {name='SetSelected', count=8, confidence=1.00, sample='container.Dropdown.OnButtonClicked = function(button) container:SetSelected(button) end'},
  },
  ['SetButtonColor'] = {
    {name='SetButtonColor', count=2, confidence=0.40, sample='self.Button:SetButtonColor(unpack(SkinData("UIDropDownLabelColor")))'},
  },
  ['ValuesFunc'] = {
    {name='ValuesFunc', count=2, confidence=0.40, sample='if self.ValuesFunc then self:ValuesFunc() end -- fill self.Values with options'},
  },
  ['OnButtonClicked'] = {
    {name='OnButtonClicked', count=4, confidence=0.80, sample='function DropDownFork:OnButtonClicked(func)'},
  },
  ['IsButtonChecked'] = {
    {name='IsButtonChecked', count=4, confidence=0.80, sample='function DropDownFork:IsButtonChecked(func)'},
  },
  ['SetValues'] = {
    {name='SetValues', count=2, confidence=0.40, sample='function DropDownFork:SetValues(array)'},
  },
  ['SetValuesFunc'] = {
    {name='SetValuesFunc', count=3, confidence=0.60, sample='function DropDownFork:SetValuesFunc(func)'},
  },
  ['GetCurrentSelectedText'] = {
    {name='GetCurrentSelectedText', count=1, confidence=0.20, sample='function DropDownFork:GetCurrentSelectedText()'},
  },
  ['AddRadio'] = {
    {name='AddRadio', count=2, confidence=0.40, sample='radio1 = groupname:AddRadio("value",parent)'},
  },
  ['GetVerticalScroll'] = {
    {name='GetVerticalScroll', count=7, confidence=1.00, sample='me:SetValue(me:GetVerticalScroll())'},
  },
  ['ScrollingEdit_OnUpdate'] = {
    {name='ScrollingEdit_OnUpdate', count=1, confidence=0.20, sample='ScrollingEdit_OnUpdate(me, elapsed, me:GetParent());'},
  },
  ['ScrollingEdit_OnCursorChanged'] = {
    {name='ScrollingEdit_OnCursorChanged', count=1, confidence=0.20, sample='ScrollingEdit_OnCursorChanged(me, x, y, w, h)'},
  },
  ['ScrollingEdit_OnTextChanged'] = {
    {name='ScrollingEdit_OnTextChanged', count=1, confidence=0.20, sample='ScrollingEdit_OnTextChanged(me, me:GetParent());'},
  },
  ['ScrollingEdit_SetCursorOffsets'] = {
    {name='ScrollingEdit_SetCursorOffsets', count=1, confidence=0.20, sample='ScrollingEdit_SetCursorOffsets(child, 0, 0);'},
  },
  ['SetScrollChild'] = {
    {name='SetScrollChild', count=15, confidence=1.00, sample='scroll:SetScrollChild(child)'},
  },
  ['UpdateList'] = {
    {name='UpdateList', count=5, confidence=1.00, sample='me:UpdateList()'},
  },
  ['ClearList'] = {
    {name='ClearList', count=1, confidence=0.20, sample='function ScrollItems:ClearList()'},
  },
  ['SetItemYOffset'] = {
    {name='SetItemYOffset', count=1, confidence=0.20, sample='function ScrollItems:SetItemYOffset(offset)'},
  },
  ['SetClipsChildren'] = {
    {name='SetClipsChildren', count=2, confidence=0.40, sample=':SetClipsChildren(true)'},
  },
  ['HideBar'] = {
    {name='HideBar', count=4, confidence=0.80, sample='self:HideBar()'},
  },
  ['ShowBar'] = {
    {name='ShowBar', count=4, confidence=0.80, sample='self:ShowBar()'},
  },
  ['SetColor'] = {
    {name='SetColor', count=88, confidence=1.00, sample='function ProgressBar:SetColor(r,g,b,a)'},
  },
  ['SetTextOnMouse'] = {
    {name='SetTextOnMouse', count=2, confidence=0.40, sample='function ProgressBar:SetTextOnMouse(mode)'},
  },
  ['SetPushedTextOffset'] = {
    {name='SetPushedTextOffset', count=2, confidence=0.40, sample=':SetPushedTextOffset(0,0)'},
  },
  ['SetMultiselect'] = {
    {name='SetMultiselect', count=5, confidence=1.00, sample=':SetMultiselect(multi)'},
  },
  ['UpdatePulloutSize'] = {
    {name='UpdatePulloutSize', count=6, confidence=1.00, sample='function DropDown:UpdatePulloutSize()'},
  },
  ['SetCurrentSelectedItem'] = {
    {name='SetCurrentSelectedItem', count=6, confidence=1.00, sample='function DropDown:SetCurrentSelectedItem(item)'},
  },
  ['OnWidthSet'] = {
    {name='OnWidthSet', count=9, confidence=1.00, sample='function DropDown:OnWidthSet(width)'},
  },
  ['OnHeightSet'] = {
    {name='OnHeightSet', count=6, confidence=1.00, sample='function DropDown:OnHeightSet(height)'},
  },
  ['DropDown_Click'] = {
    {name='DropDown_Click', count=1, confidence=0.20, sample='function private.DropDown_Click(self,button)'},
  },
  ['PulloutItem_Click'] = {
    {name='PulloutItem_Click', count=2, confidence=0.40, sample='function private.PulloutItem_Click(this)'},
  },
  ['OnMouseDown'] = {
    {name='OnMouseDown', count=4, confidence=0.80, sample=':SetScript("OnMouseDown",function(me,...) scrollframe.OnMouseDown(scrollframe,me,...) end)'},
  },
  ['OnMouseUp'] = {
    {name='OnMouseUp', count=6, confidence=1.00, sample=':SetScript("OnMouseUp",function(me,...) scrollframe.OnMouseUp(scrollframe,me,...) end)'},
  },
  ['SetDefaults'] = {
    {name='SetDefaults', count=2, confidence=0.40, sample='scrollframe:SetDefaults()'},
  },
  ['AddButtons'] = {
    {name='AddButtons', count=2, confidence=0.40, sample='scrollframe:AddButtons()'},
  },
  ['But_OnMouseDown'] = {
    {name='But_OnMouseDown', count=3, confidence=0.60, sample='local function But_OnMouseDown(me,but,dir)'},
  },
  ['But_OnMouse_Up'] = {
    {name='But_OnMouse_Up', count=1, confidence=0.20, sample='local function But_OnMouse_Up(me)'},
  },
  ['RefreshScroller'] = {
    {name='RefreshScroller', count=5, confidence=1.00, sample='self:RefreshScroller()'},
  },
  ['ValueChanged'] = {
    {name='ValueChanged', count=2, confidence=0.40, sample='self:ValueChanged() -- pass it back'},
  },
  ['GetWidtth'] = {
    {name='GetWidtth', count=1, confidence=0.20, sample='if not width then renderer.WIDTH=parent:GetWidtth() end'},
  },
  ['GetAsString'] = {
    {name='GetAsString', count=1, confidence=0.20, sample='function Visuals:GetAsString(data)'},
  },
  ['SetTextColors'] = {
    {name='SetTextColors', count=10, confidence=1.00, sample='local function SetTextColors(str,gray,dev)'},
  },
  ['SetCursor'] = {
    {name='SetCursor', count=4, confidence=0.80, sample='if self.cursor then SetCursor(self.cursor) end'},
  },
  ['POSTCLICK'] = {
    {name='POSTCLICK', count=5, confidence=1.00, sample='if self.POSTCLICK then self.POSTCLICK() end'},
  },
  ['Multiselect_Click'] = {
    {name='Multiselect_Click', count=1, confidence=0.20, sample='function private.Multiselect_Click(self,button)'},
  },
  ['AddSuggestItem'] = {
    {name='AddSuggestItem', count=2, confidence=0.40, sample='SuggestBox:AddSuggestItem(display,value)'},
  },
  ['SetAllTrigger'] = {
    {name='SetAllTrigger', count=2, confidence=0.40, sample='SuggestBox:SetAllTrigger(...)'},
  },
  ['ShowSuggestList'] = {
    {name='ShowSuggestList', count=4, confidence=0.80, sample='internal SuggestBox:ShowSuggestList(mode)'},
  },
  ['AceGUI_OnClick'] = {
    {name='Dropdown.AceGUI_OnClick', count=2, confidence=0.40, sample='frame.Dropdown.AceGUI_OnClick(frame.Dropdown.dropdown) -- hide it, so it can be redrawn'},
  },
  ['SetList'] = {
    {name='SetList', count=5, confidence=1.00, sample='self.frame.Dropdown:SetList(currentList)'},
  },
  ['RestoreBlizzardFrame'] = {
    {name='RestoreBlizzardFrame', count=4, confidence=0.80, sample='CharacterFrame:HookScript("OnHide", function() GearFinder:RestoreBlizzardFrame() end)'},
  },
  ['PanelTemplates_DeselectTab'] = {
    {name='PanelTemplates_DeselectTab', count=4, confidence=0.80, sample='PanelTemplates_DeselectTab(CharacterFrameTab4); -- 8.2 taint error workaround'},
  },
  ['OnZygorTabClick'] = {
    {name='OnZygorTabClick', count=1, confidence=0.20, sample='local function OnZygorTabClick(self)'},
  },
  ['ToggleCharacter'] = {
    {name='ToggleCharacter', count=3, confidence=0.60, sample='ToggleCharacter("ZygorGearFinder")'},
  },
  ['PanelTemplates_SetTab'] = {
    {name='PanelTemplates_SetTab', count=1, confidence=0.20, sample='PanelTemplates_SetTab(CharacterFrame, self:GetID())'},
  },
  ['PanelTemplates_SelectTab'] = {
    {name='PanelTemplates_SelectTab', count=3, confidence=0.60, sample='PanelTemplates_SelectTab(CharacterFrameTab4); -- 8.2 taint error workaround'},
  },
  ['ZygorTabAnchor'] = {
    {name='ZygorTabAnchor', count=3, confidence=0.60, sample='local function ZygorTabAnchor()'},
  },
  ['OnNonZygorClick'] = {
    {name='OnNonZygorClick', count=1, confidence=0.20, sample='local function OnNonZygorClick()'},
  },
  ['PanelTemplates_SetNumTabs'] = {
    {name='PanelTemplates_SetNumTabs', count=1, confidence=0.20, sample='--PanelTemplates_SetNumTabs(CharacterFrame, n) -- 8.2 taint error'},
  },
  ['PanelTemplates_EnableTab'] = {
    {name='PanelTemplates_EnableTab', count=1, confidence=0.20, sample='PanelTemplates_EnableTab(CharacterFrame, n)'},
  },
  ['PanelTemplates_TabResize'] = {
    {name='PanelTemplates_TabResize', count=4, confidence=0.80, sample='PanelTemplates_TabResize(_G["CharacterFrameTab4"], nil, 100, nil, nil);'},
  },
  ['SecureHook'] = {
    {name='SecureHook', count=3, confidence=0.60, sample='ItemScore:SecureHook("PanelTemplates_Tab_OnClick", OnNonZygorClick, true)'},
  },
  ['Hook'] = {
    {name='Hook', count=5, confidence=1.00, sample='--ItemScore:Hook("CharacterFrame_Expand", OnNonZygorClick, true)'},
  },
  ['DelayShowPreview'] = {
    {name='DelayShowPreview', count=3, confidence=0.60, sample='function PointerMap:DelayShowPreview()'},
  },
  ['SetCVarBitfield'] = {
    {name='SetCVarBitfield', count=1, confidence=0.20, sample='if not GetCVarBool("closedInfoFrames") then SetCVarBitfield( "closedInfoFrames", LE_FRAME_TUTORIAL_WORLD_MAP_FRAME, true ) end'},
  },
  ['QuestMapFrame_Hide'] = {
    {name='QuestMapFrame_Hide', count=1, confidence=0.20, sample='if GetCVar("questLogOpen") then QuestMapFrame_Hide() end'},
  },
  ['RemoveFrame'] = {
    {name='PlayerMovementFrameFader.RemoveFrame', count=1, confidence=0.20, sample='PlayerMovementFrameFader.RemoveFrame(WorldMapFrame)'},
  },
  ['DelayRestoreMap'] = {
    {name='DelayRestoreMap', count=2, confidence=0.40, sample='function PointerMap:DelayRestoreMap(manual)'},
  },
  ['Maximize'] = {
    {name='Maximize', count=1, confidence=0.20, sample='WorldMapFrame:Maximize()'},
  },
  ['QuestMapFrame_Show'] = {
    {name='QuestMapFrame_Show', count=1, confidence=0.20, sample='if GetCVar("questLogOpen") then QuestMapFrame_Show() end'},
  },
  ['AddDeferredFrame'] = {
    {name='PlayerMovementFrameFader.AddDeferredFrame', count=1, confidence=0.20, sample='PlayerMovementFrameFader.AddDeferredFrame(WorldMapFrame, .5, 1.0, .5, function() return GetCVarBool("mapFade") and not WorldMapFrame:IsMouseOver() end);'},
  },
  ['FadeIn'] = {
    {name='FadeIn', count=3, confidence=0.60, sample='function PointerMap:FadeIn()'},
  },
  ['ShowTooltipQuest'] = {
    {name='ShowTooltipQuest', count=2, confidence=0.40, sample='{ title=L["wqp_col_NAME"], width=100, titlej="LEFT", textj="LEFT", name="name", sortable=true, sortfunction=WorldQuests.UpdateSorting, onentertooltip=function(row) WorldQuests:ShowTooltipQuest(row) end, tooltipanchor="ANCHOR_BOTTOM" },'},
  },
  ['ShowTooltipReward'] = {
    {name='ShowTooltipReward', count=3, confidence=0.60, sample='{ title="", width=20, headerwidth=20, titlej="LEFT", textj="LEFT", name="rewardicon", type="icon", onentertooltip=function(row) WorldQuests:ShowTooltipReward(row) end, tooltipanchor="ANCHOR_BOTTOM" },'},
  },
  ['ShowTooltipFaction'] = {
    {name='ShowTooltipFaction', count=2, confidence=0.40, sample='{ title=L["wqp_col_FACTION"], width=65, titlej="LEFT", textj="LEFT", name="faction", sortable=true, sortfunction=WorldQuests.UpdateSorting, onentertooltip=function(row) WorldQuests:ShowTooltipFaction(row) end, tooltipanchor="ANCHOR_BOTTOM"  },'},
  },
  ['SuggestWorldQuestGuideFromMap'] = {
    {name='SuggestWorldQuestGuideFromMap', count=5, confidence=1.00, sample='hooksecurefunc(pin,"OnMouseUp", function(pin,button) ZGV:ScheduleTimer(function() WorldQuests:SuggestWorldQuestGuideFromMap(pin) end,0) end)'},
  },
  ['HighlightHide'] = {
    {name='HighlightHide', count=4, confidence=0.80, sample='WorldQuests:HighlightHide()'},
  },
  ['SUPER_TRACKING_CHANGED'] = {
    {name='SUPER_TRACKING_CHANGED', count=2, confidence=0.40, sample='ZGV:AddEventHandler("SUPER_TRACKING_CHANGED",function(self,event) WorldQuests:SUPER_TRACKING_CHANGED() end)'},
  },
  ['QueueDetailsLoad'] = {
    {name='QueueDetailsLoad', count=6, confidence=1.00, sample='WorldQuests:QueueDetailsLoad()'},
  },
  ['GetSuperTrackedQuestID'] = {
    {name='C_SuperTrack.GetSuperTrackedQuestID', count=1, confidence=0.20, sample='local questID = C_SuperTrack.GetSuperTrackedQuestID()'},
  },
  ['IsQuestBeingTracked'] = {
    {name='WorldQuestTrackerAddon.IsQuestBeingTracked', count=2, confidence=0.40, sample='if not WorldQuestTrackerAddon.IsQuestBeingTracked(questID) then return end'},
  },
  ['WQTwrapper'] = {
    {name='WorldQuests.WQTwrapper', count=1, confidence=0.20, sample='function WorldQuests.WQTwrapper(object)'},
  },
  ['SuggestWorldQuestGuide'] = {
    {name='SuggestWorldQuestGuide', count=9, confidence=1.00, sample='function WorldQuests:SuggestWorldQuestGuide(object,questID,force,mapID)'},
  },
  ['SuggestWorldQuestGuideFromList'] = {
    {name='SuggestWorldQuestGuideFromList', count=2, confidence=0.40, sample='function WorldQuests:SuggestWorldQuestGuideFromList(object)'},
  },
  ['GetQuestZoneID'] = {
    {name='C_TaskQuest.GetQuestZoneID', count=5, confidence=1.00, sample='data.mapID = data.mapID or C_TaskQuest.GetQuestZoneID(qid)'},
  },
  ['GetQuestInfoByQuestID'] = {
    {name='C_TaskQuest.GetQuestInfoByQuestID', count=5, confidence=1.00, sample='data.title,data.faction,_ = C_TaskQuest.GetQuestInfoByQuestID(qid)'},
  },
  ['GetQuestTagInfo'] = {
    {name='C_QuestLog.GetQuestTagInfo', count=3, confidence=0.60, sample='local info = C_QuestLog.GetQuestTagInfo(qid)'},
  },
  ['GetQuestTimeLeftMinutes'] = {
    {name='C_TaskQuest.GetQuestTimeLeftMinutes', count=1, confidence=0.20, sample='data.timedisp = C_TaskQuest.GetQuestTimeLeftMinutes(qid)'},
  },
  ['GetQuestLogRewardXP'] = {
    {name='GetQuestLogRewardXP', count=1, confidence=0.20, sample='data.exp = GetQuestLogRewardXP(qid)'},
  },
  ['GetQuestLogRewardMoney'] = {
    {name='GetQuestLogRewardMoney', count=1, confidence=0.20, sample='data.gold = GetQuestLogRewardMoney(qid)'},
  },
  ['GetQuestLogRewardHonor'] = {
    {name='GetQuestLogRewardHonor', count=1, confidence=0.20, sample='data.honor = GetQuestLogRewardHonor(qid)'},
  },
  ['GetQuestRewardCurrencies'] = {
    {name='C_QuestLog.GetQuestRewardCurrencies', count=1, confidence=0.20, sample='for i,v in ipairs(C_QuestLog.GetQuestRewardCurrencies(qid)) do'},
  },
  ['GetFactionGrantedByCurrency'] = {
    {name='C_CurrencyInfo.GetFactionGrantedByCurrency', count=1, confidence=0.20, sample='if C_CurrencyInfo.GetFactionGrantedByCurrency(v.currencyID) then'},
  },
  ['GetNumQuestLogRewards'] = {
    {name='GetNumQuestLogRewards', count=1, confidence=0.20, sample='if GetNumQuestLogRewards(qid)>0 then'},
  },
  ['GetQuestLogRewardInfo'] = {
    {name='GetQuestLogRewardInfo', count=1, confidence=0.20, sample='local _, _, numItems = GetQuestLogRewardInfo(1,qid)'},
  },
  ['IsAnimaItemByID'] = {
    {name='C_Item.IsAnimaItemByID', count=2, confidence=0.40, sample='if itemlink then data.rewards.anima = C_Item.IsAnimaItemByID(itemlink) end'},
  },
  ['DoesQuestAwardReputationWithFaction'] = {
    {name='C_QuestLog.DoesQuestAwardReputationWithFaction', count=1, confidence=0.20, sample='if (C_QuestLog.DoesQuestAwardReputationWithFaction(qid, factionID) or C_QuestLog.IsQuestCriteriaForBounty(qid, factionData.quest) or (data.mapID==factionData.zone) or (data.faction==factionID)) and (not factionData.faction or factionData.faction==player_faction) then'},
  },
  ['IsQuestCriteriaForBounty'] = {
    {name='C_QuestLog.IsQuestCriteriaForBounty', count=1, confidence=0.20, sample='if (C_QuestLog.DoesQuestAwardReputationWithFaction(qid, factionID) or C_QuestLog.IsQuestCriteriaForBounty(qid, factionData.quest) or (data.mapID==factionData.zone) or (data.faction==factionID)) and (not factionData.faction or factionData.faction==player_faction) then'},
  },
  ['GetWorldQuests'] = {
    {name='GetWorldQuests', count=2, confidence=0.40, sample='function WorldQuests:GetWorldQuests()'},
  },
  ['GetQuestsForPlayerByMapID'] = {
    {name='C_TaskQuest.GetQuestsForPlayerByMapID', count=2, confidence=0.40, sample='local quests = C_TaskQuest.GetQuestsForPlayerByMapID(current_mapid)'},
  },
  ['HighlightShow'] = {
    {name='HighlightShow', count=5, confidence=1.00, sample='function WorldQuests:HighlightShow(row)'},
  },
  ['IsValidQuest'] = {
    {name='IsValidQuest', count=4, confidence=0.80, sample='function WorldQuests:IsValidQuest(object)'},
  },
  ['IsMaximized'] = {
    {name='IsMaximized', count=1, confidence=0.20, sample='if WorldMapFrame:IsMaximized() then WorldQuests.DisplayFrame:Hide() end'},
  },
  ['SetDisableTooltip'] = {
    {name='SetDisableTooltip', count=1, confidence=0.20, sample='-- SetDisableTooltip()'},
  },
  ['HaveQuestData'] = {
    {name='HaveQuestData', count=1, confidence=0.20, sample='if ( not HaveQuestData(questItem.questID) ) then'},
  },
  ['QuestUtils_AddQuestTypeToTooltip'] = {
    {name='QuestUtils_AddQuestTypeToTooltip', count=1, confidence=0.20, sample='QuestUtils_AddQuestTypeToTooltip(tooltip_object, questItem.questID, NORMAL_FONT_COLOR);'},
  },
  ['GetRGB'] = {
    {name='GetRGB', count=2, confidence=0.40, sample='tooltip_object:AddLine(factionName, GRAY_FONT_COLOR:GetRGB());'},
  },
  ['WorldMap_AddQuestTimeToTooltip'] = {
    {name='WorldMap_AddQuestTimeToTooltip', count=1, confidence=0.20, sample='WorldMap_AddQuestTimeToTooltip(questItem.questID);'},
  },
  ['GetQuestProgressBarInfo'] = {
    {name='C_TaskQuest.GetQuestProgressBarInfo', count=1, confidence=0.20, sample='local percent = C_TaskQuest.GetQuestProgressBarInfo(questItem.questID);'},
  },
  ['GameTooltip_ShowProgressBar'] = {
    {name='GameTooltip_ShowProgressBar', count=1, confidence=0.20, sample='GameTooltip_ShowProgressBar(tooltip_object, 0, 100, percent, PERCENTAGE_STRING:format(percent));'},
  },
  ['GameTooltip_AddQuestRewardsToTooltip'] = {
    {name='GameTooltip_AddQuestRewardsToTooltip', count=1, confidence=0.20, sample='GameTooltip_AddQuestRewardsToTooltip(tooltip_object, questItem.questID);'},
  },
  ['AddDebugWorldQuestInfo'] = {
    {name='AddDebugWorldQuestInfo', count=1, confidence=0.20, sample='tooltip_object:AddDebugWorldQuestInfo(questItem.questID);'},
  },
  ['ToggleAll'] = {
    {name='ToggleAll', count=2, confidence=0.40, sample='function WorldQuests:ToggleAll(isChecked)'},
  },
  ['QueueUpdate'] = {
    {name='QueueUpdate', count=2, confidence=0.40, sample='WorldQuests:QueueUpdate(row)'},
  },
  ['QueueUpdateButton'] = {
    {name='QueueUpdateButton', count=2, confidence=0.40, sample='WorldQuests:QueueUpdateButton()'},
  },
  ['FindPath'] = {
    {name='FindPath', count=7, confidence=1.00, sample='LibRover:FindPath(0,0,0, endpoint.m,endpoint.x,endpoint.y, ZGV.WorldQuests.QueuePathHandler, {direct=not ZGV.db.profile.pathfinding, multiple_ends=more_points, reportEnd=true })'},
  },
  ['QueuePathHandler'] = {
    {name='WorldQuests.QueuePathHandler', count=1, confidence=0.20, sample='function WorldQuests.QueuePathHandler(state,path,ext,reason)'},
  },
  ['QuestsQueued'] = {
    {name='QuestsQueued', count=85, confidence=1.00, sample='function WorldQuests:QuestsQueued()'},
  },
  ['GetPinTemplate'] = {
    {name='GetPinTemplate', count=2, confidence=0.40, sample='function WorldQuests.DataProvier:GetPinTemplate()'},
  },
  ['RefreshVisuals'] = {
    {name='RefreshVisuals', count=1, confidence=0.20, sample='pin:RefreshVisuals();'},
  },
  ['AddWorldQuest'] = {
    {name='AddWorldQuest', count=1, confidence=0.20, sample='self.activePins[info.questID] = self:AddWorldQuest(info);'},
  },
  ['RemovePin'] = {
    {name='RemovePin', count=3, confidence=0.60, sample='mapCanvas:RemovePin(self.activePins[questID]);'},
  },
  ['GetNumActivePinsByTemplate'] = {
    {name='GetNumActivePinsByTemplate', count=1, confidence=0.20, sample='mapCanvas:TriggerEvent("WorldQuestsUpdate", mapCanvas:GetNumActivePinsByTemplate(self:GetPinTemplate()));'},
  },
  ['PetRegEvents'] = {
    {name='PetRegEvents', count=2, confidence=0.40, sample='PetBattle:PetRegEvents()'},
  },
  ['JournalIconSetup'] = {
    {name='PetBattle.PetJournal.JournalIconSetup', count=3, confidence=0.60, sample='hooksecurefunc("ToggleCollectionsJournal",function() PetBattle.PetJournal.JournalIconSetup() end)'},
  },
  ['IsFrameLockActive'] = {
    {name='IsFrameLockActive', count=1, confidence=0.20, sample='if IsFrameLockActive("PETBATTLES") then'},
  },
  ['ShowInterface'] = {
    {name='ShowInterface', count=3, confidence=0.60, sample='ZGV.PetBattle:ShowInterface()'},
  },
  ['PrepareCachePets'] = {
    {name='PrepareCachePets', count=2, confidence=0.40, sample='PetBattle:PrepareCachePets()'},
  },
  ['GetAbilityText'] = {
    {name='GetAbilityText', count=4, confidence=0.80, sample='function PetBattle:GetAbilityText(id,maxHp,power,speed)'},
  },
  ['GetAbilityInfoByID'] = {
    {name='C_PetBattles.GetAbilityInfoByID', count=1, confidence=0.20, sample='local _,name = C_PetBattles.GetAbilityInfoByID(id)'},
  },
  ['FloatingPetBattleAbility_Show'] = {
    {name='FloatingPetBattleAbility_Show', count=7, confidence=1.00, sample='FloatingPetBattleAbility_Show(id,maxHp,power,speed)'},
  },
  ['PetBattle_MainFrameUpdateRound'] = {
    {name='PetBattle_MainFrameUpdateRound', count=2, confidence=0.40, sample='function PetBattle_MainFrameUpdateRound(round)'},
  },
  ['GetActivePet'] = {
    {name='C_PetBattles.GetActivePet', count=5, confidence=1.00, sample='local enemyPet=C_PetBattles.GetActivePet(2)'},
  },
  ['GetPower'] = {
    {name='C_PetBattles.GetPower', count=6, confidence=1.00, sample='local power=C_PetBattles.GetPower(2,enemyPet)'},
  },
  ['GetSpeed'] = {
    {name='C_PetBattles.GetSpeed', count=7, confidence=1.00, sample='local speed=C_PetBattles.GetSpeed(2,enemyPet)'},
  },
  ['GetMaxHealth'] = {
    {name='C_PetBattles.GetMaxHealth', count=7, confidence=1.00, sample='local maxHp=C_PetBattles.GetMaxHealth(2,enemyPet)'},
  },
  ['GetAbilityState'] = {
    {name='C_PetBattles.GetAbilityState', count=5, confidence=1.00, sample='C_PetBattles.GetAbilityState(owner,petindex,ability) -- TODO: what? these are all nils!'},
  },
  ['GetAbilityInfo'] = {
    {name='C_PetBattles.GetAbilityInfo', count=6, confidence=1.00, sample='local id, name, icon, maxCooldown, description, numTurns, abilityPetType, noStrongWeakHints = C_PetBattles.GetAbilityInfo(2, enemyPet, i)'},
  },
  ['GetBattlePetAbilityHyperlink'] = {
    {name='GetBattlePetAbilityHyperlink', count=5, confidence=1.00, sample='local link = GetBattlePetAbilityHyperlink(id,maxHp,power,speed)'},
  },
  ['PetBattle_EnemyFrameUpdateRound'] = {
    {name='PetBattle_EnemyFrameUpdateRound', count=2, confidence=0.40, sample='function PetBattle_EnemyFrameUpdateRound(round)'},
  },
  ['GetExp'] = {
    {name='GetExp', count=2, confidence=0.40, sample='local function GetExp(pet)'},
  },
  ['GetLevel'] = {
    {name='C_PetBattles.GetLevel', count=5, confidence=1.00, sample='local level=C_PetBattles.GetLevel(1,pet)'},
  },
  ['PetBattle_AllyFrameUpdateRound'] = {
    {name='PetBattle_AllyFrameUpdateRound', count=2, confidence=0.40, sample='function PetBattle_AllyFrameUpdateRound(round)'},
  },
  ['MainFrameUpdate'] = {
    {name='MainFrameUpdate', count=4, confidence=0.80, sample='function PetBattle:MainFrameUpdate()'},
  },
  ['GetPetType'] = {
    {name='C_PetBattles.GetPetType', count=5, confidence=1.00, sample='local petTypeNum=C_PetBattles.GetPetType(2,enemyPet)'},
  },
  ['GetBreedQuality'] = {
    {name='C_PetBattles.GetBreedQuality', count=3, confidence=0.60, sample='local quality=C_PetBattles.GetBreedQuality(2,enemyPet)'},
  },
  ['GetIcon'] = {
    {name='C_PetBattles.GetIcon', count=4, confidence=0.80, sample='local bigIcon=C_PetBattles.GetIcon(2,enemyPet) --always their pets.'},
    {name='Details.Immersion.GetIcon', count=2, confidence=0.40, sample='function Details.Immersion.GetIcon(aID)'},
    {name='GetIcon', count=7, confidence=1.00, sample='Details:AddTooltipSpellHeaderText (customObject:GetName(), "yellow", 1, customObject:GetIcon(), 0.90625, 0.109375, 0.15625, 0.875, false, 18)'},
  },
  ['ComparePets'] = {
    {name='ComparePets', count=3, confidence=0.60, sample='local scores = PetBattle:ComparePets(petTypeNum,enemyAbilities,level,speed)'},
  },
  ['UpdateSuggestedPets'] = {
    {name='UpdateSuggestedPets', count=3, confidence=0.60, sample='PetBattle:UpdateSuggestedPets(scores,"Main")'},
  },
  ['EnemyFrameUpdate'] = {
    {name='EnemyFrameUpdate', count=4, confidence=0.80, sample='function PetBattle:EnemyFrameUpdate()'},
  },
  ['AllyFrameUpdate'] = {
    {name='AllyFrameUpdate', count=4, confidence=0.80, sample='function PetBattle:AllyFrameUpdate()'},
  },
  ['IsDamageAbility'] = {
    {name='IsDamageAbility', count=3, confidence=0.60, sample='local function IsDamageAbility(description,abilityType)'},
  },
  ['GetNumPets'] = {
    {name='C_PetBattles.GetNumPets', count=1, confidence=0.20, sample='for petnum=1, C_PetBattles.GetNumPets(1) do'},
    {name='C_PetJournal.GetNumPets', count=1, confidence=0.20, sample='local numPets = C_PetJournal.GetNumPets();'},
  },
  ['SortScores'] = {
    {name='SortScores', count=2, confidence=0.40, sample='local function SortScores(scores)'},
  },
  ['MakeFontStrings'] = {
    {name='MakeFontStrings', count=42, confidence=1.00, sample='function PetBattle:MakeFontStrings(frame,name,text,point,x,y,label)'},
  },
  ['SetIndentedWordWrap'] = {
    {name='SetIndentedWordWrap', count=4, confidence=0.80, sample=':SetIndentedWordWrap(true)'},
  },
  ['MakeEditBox'] = {
    {name='MakeEditBox', count=11, confidence=1.00, sample='function PetBattle:MakeEditBox(frame,name,text,point,labelpoint,x,y,label)'},
  },
  ['SetHeightAllFrames'] = {
    {name='SetHeightAllFrames', count=3, confidence=0.60, sample='local function SetHeightAllFrames(y)'},
  },
  ['PetBattle_ToggleFrames'] = {
    {name='PetBattle_ToggleFrames', count=1, confidence=0.20, sample='local function PetBattle_ToggleFrames(button)'},
  },
  ['CreateMainFrames'] = {
    {name='CreateMainFrames', count=2, confidence=0.40, sample='local function CreateMainFrames(self)'},
  },
  ['SetUserPlaced'] = {
    {name='SetUserPlaced', count=8, confidence=1.00, sample=':SetUserPlaced(true)'},
  },
  ['CreateTabs'] = {
    {name='CreateTabs', count=2, confidence=0.40, sample='local function CreateTabs(self)'},
  },
  ['CreateMainFrameText'] = {
    {name='CreateMainFrameText', count=2, confidence=0.40, sample='local function CreateMainFrameText(self)'},
  },
  ['SetTextHeight'] = {
    {name='SetTextHeight', count=6, confidence=1.00, sample='parent.Icon:SetTextHeight(50) parent.Icon:SetWidth(225)'},
  },
  ['MakeEnemys'] = {
    {name='MakeEnemys', count=4, confidence=0.80, sample='local function MakeEnemys(parent)'},
  },
  ['CreateEnemyFrameText'] = {
    {name='CreateEnemyFrameText', count=2, confidence=0.40, sample='local function CreateEnemyFrameText(self)'},
  },
  ['MakeAllys'] = {
    {name='MakeAllys', count=4, confidence=0.80, sample='local function MakeAllys(parent)'},
  },
  ['CreateAllyFrameText'] = {
    {name='CreateAllyFrameText', count=2, confidence=0.40, sample='local function CreateAllyFrameText(self)'},
  },
  ['Icon_OnClick'] = {
    {name='PetBattle.PetJournal.Icon_OnClick', count=1, confidence=0.20, sample='function PetBattle.PetJournal.Icon_OnClick(self,but)'},
    {name='ZGV.PetBattle.PetJournal.Icon_OnClick', count=1, confidence=0.20, sample='button:SetScript("OnClick", function(...) ZGV.PetBattle.PetJournal.Icon_OnClick(...) end) -- Find the pet!'},
    {name='Achievement.Icon_OnClick', count=1, confidence=0.20, sample='function Achievement.Icon_OnClick(self,but)'},
    {name='ZGV.Achievement.Icon_OnClick', count=1, confidence=0.20, sample='button:SetScript("OnClick", function(...) ZGV.Achievement.Icon_OnClick(...) end)'},
  },
  ['ScheduleUpdate'] = {
    {name='PetBattle.PetJournal.ScheduleUpdate', count=2, confidence=0.40, sample='function PetBattle.PetJournal.ScheduleUpdate()'},
    {name='Achievement.ScheduleUpdate', count=1, confidence=0.20, sample='function Achievement.ScheduleUpdate()'},
    {name='ScheduleUpdate', count=1, confidence=0.20, sample='function Details:ScheduleUpdate(instancia)'},
  },
  ['UpdateIcons'] = {
    {name='PetBattle.PetJournal.UpdateIcons', count=2, confidence=0.40, sample='ZGV:ScheduleTimer(function() PetBattle.PetJournal.UpdateIcons() end, 0.0001)'},
    {name='Achievement.UpdateIcons', count=2, confidence=0.40, sample='ZGV:ScheduleTimer(function() Achievement.UpdateIcons() end, 0.0001)'},
  },
  ['CachePets'] = {
    {name='CachePets', count=2, confidence=0.40, sample='PetBattle:CachePets()'},
  },
  ['IsFilterChecked'] = {
    {name='C_PetJournal.IsFilterChecked', count=2, confidence=0.40, sample='[LE_PET_JOURNAL_FILTER_COLLECTED] = C_PetJournal.IsFilterChecked(LE_PET_JOURNAL_FILTER_COLLECTED),'},
  },
  ['GetNumPetTypes'] = {
    {name='C_PetJournal.GetNumPetTypes', count=1, confidence=0.20, sample='for i=1, C_PetJournal.GetNumPetTypes() do'},
  },
  ['IsPetTypeChecked'] = {
    {name='C_PetJournal.IsPetTypeChecked', count=1, confidence=0.20, sample='filters_types[i] = C_PetJournal.IsPetTypeChecked(i)'},
  },
  ['GetNumPetSources'] = {
    {name='C_PetJournal.GetNumPetSources', count=1, confidence=0.20, sample='for i=1, C_PetJournal.GetNumPetSources() do'},
  },
  ['IsPetSourceChecked'] = {
    {name='C_PetJournal.IsPetSourceChecked', count=1, confidence=0.20, sample='filters_sources[i] = C_PetJournal.IsPetSourceChecked(i)'},
  },
  ['SetDefaultFilters'] = {
    {name='C_PetJournal.SetDefaultFilters', count=1, confidence=0.20, sample='C_PetJournal.SetDefaultFilters();'},
  },
  ['SetFilterChecked'] = {
    {name='C_PetJournal.SetFilterChecked', count=1, confidence=0.20, sample='for i,v in pairs(filters_collected) do C_PetJournal.SetFilterChecked(i, v) end'},
  },
  ['SetPetTypeFilter'] = {
    {name='C_PetJournal.SetPetTypeFilter', count=1, confidence=0.20, sample='for i,v in pairs(filters_types) do C_PetJournal.SetPetTypeFilter(i, v) end'},
  },
  ['SetPetSourceChecked'] = {
    {name='C_PetJournal.SetPetSourceChecked', count=1, confidence=0.20, sample='for i,v in pairs(filters_sources) do C_PetJournal.SetPetSourceChecked(i, v) end'},
  },
  ['GetPetInfoByIndex'] = {
    {name='C_PetJournal.GetPetInfoByIndex', count=1, confidence=0.20, sample='local _, speciesID, _, _, level = C_PetJournal.GetPetInfoByIndex(i)'},
  },
  ['GetPetFakeIdByLink'] = {
    {name='GetPetFakeIdByLink', count=5, confidence=1.00, sample='function PetBattle:GetPetFakeIdByLink(link,generic)'},
  },
  ['GetPetBreedByLink'] = {
    {name='GetPetBreedByLink', count=2, confidence=0.40, sample='local breedid,breedname = ZGV.PetBattle:GetPetBreedByLink(link)'},
  },
  ['GetBattlePetIdFromFakeId'] = {
    {name='GetBattlePetIdFromFakeId', count=4, confidence=0.80, sample='function PetBattle:GetBattlePetIdFromFakeId(link)'},
  },
  ['GetPetBreedByStats'] = {
    {name='GetPetBreedByStats', count=3, confidence=0.60, sample='return PetBattle:GetPetBreedByStats(BattlePetId,BattlePetHP,BattlePetAtt,BattlePetSpeed,BattlePetRarity,BattlePetLevel)'},
  },
  ['GetPetBreedBySlot'] = {
    {name='GetPetBreedBySlot', count=2, confidence=0.40, sample='function PetBattle:GetPetBreedBySlot(bag,slot)'},
  },
  ['HasPetByDisplay'] = {
    {name='HasPetByDisplay', count=1, confidence=0.20, sample='function PetBattle:HasPetByDisplay(petid)'},
  },
  ['CanPlayerDualWield'] = {
    {name='CanPlayerDualWield', count=3, confidence=0.60, sample='self.playerDualWield, self.playerDualTwohanders = ItemScore:CanPlayerDualWield()'},
  },
  ['IconSetup'] = {
    {name='IconSetup', count=2, confidence=0.40, sample='hooksecurefunc("ToggleAchievementFrame",function() Achievement:IconSetup() end)'},
  },
  ['CacheSkills_Queued'] = {
    {name='CacheSkills_Queued', count=2, confidence=0.40, sample='ZGV:CacheSkills_Queued()'},
  },
  ['GetCategoryInfo'] = {
    {name='C_TradeSkillUI.GetCategoryInfo', count=1, confidence=0.20, sample='local cat = C_TradeSkillUI.GetCategoryInfo(subid)'},
  },
  ['CacheRecipes'] = {
    {name='CacheRecipes', count=2, confidence=0.40, sample='--self:CacheRecipes(profs)  -- or try to, anyway. --Do Cooking masteries too'},
  },
  ['CacheRecipes_Queued'] = {
    {name='CacheRecipes_Queued', count=4, confidence=0.80, sample='if ZGVP.LastRecipeCheckLine~=skill then ZGV:CacheRecipes_Queued(profs) return end -- we changed skill line, grab recipes now'},
  },
  ['IsTradeSkillReady'] = {
    {name='C_TradeSkillUI.IsTradeSkillReady', count=1, confidence=0.20, sample='if not C_TradeSkillUI.IsTradeSkillReady() then return end -- prevents missing reagents in recipes'},
  },
  ['IsTradeSkillGuild'] = {
    {name='C_TradeSkillUI.IsTradeSkillGuild', count=1, confidence=0.20, sample='if C_TradeSkillUI.IsTradeSkillGuild() or C_TradeSkillUI.IsTradeSkillLinked() then return end'},
  },
  ['IsTradeSkillLinked'] = {
    {name='C_TradeSkillUI.IsTradeSkillLinked', count=1, confidence=0.20, sample='if C_TradeSkillUI.IsTradeSkillGuild() or C_TradeSkillUI.IsTradeSkillLinked() then return end'},
  },
  ['GetAllRecipeIDs'] = {
    {name='C_TradeSkillUI.GetAllRecipeIDs', count=1, confidence=0.20, sample='local all_recipes = C_TradeSkillUI.GetAllRecipeIDs()'},
  },
  ['GetRecipeInfo'] = {
    {name='C_TradeSkillUI.GetRecipeInfo', count=2, confidence=0.40, sample='local api_recipe = C_TradeSkillUI.GetRecipeInfo(recipeid)'},
  },
  ['GetRecipeSchematic'] = {
    {name='C_TradeSkillUI.GetRecipeSchematic', count=1, confidence=0.20, sample='local api_schematic = C_TradeSkillUI.GetRecipeSchematic(recipeid,false)'},
  },
  ['GetCraftableCount'] = {
    {name='C_TradeSkillUI.GetCraftableCount', count=1, confidence=0.20, sample='numAvailable = C_TradeSkillUI.GetCraftableCount(recipeid),'},
  },
  ['GetRecipeSourceText'] = {
    {name='C_TradeSkillUI.GetRecipeSourceText', count=1, confidence=0.20, sample='source = C_TradeSkillUI.GetRecipeSourceText(recipeid),'},
  },
  ['Profession_NEW_RECIPE_LEARNED'] = {
    {name='Profession_NEW_RECIPE_LEARNED', count=1, confidence=0.20, sample='function ZGV:Profession_NEW_RECIPE_LEARNED(event,spell)'},
  },
  ['Profession_CHAT_MSG_SYSTEM'] = {
    {name='Profession_CHAT_MSG_SYSTEM', count=1, confidence=0.20, sample='function ZGV:Profession_CHAT_MSG_SYSTEM(event,text)'},
  },
  ['PerformTradeSkill'] = {
    {name='PerformTradeSkill', count=4, confidence=0.80, sample='self:PerformTradeSkill(goal.spellid,goal.count-C_Item.GetItemCount(goal.targetid))'},
  },
  ['SelectRecipe'] = {
    {name='SelectRecipe', count=1, confidence=0.20, sample='ProfessionsFrame.CraftingPage:SelectRecipe(api_recipe)'},
  },
  ['GetTransaction'] = {
    {name='GetTransaction', count=1, confidence=0.20, sample='local transaction = (ProfessionsFrame and ProfessionsFrame.CraftingPage and ProfessionsFrame.CraftingPage.SchematicForm) and ProfessionsFrame.CraftingPage.SchematicForm:GetTransaction()'},
  },
  ['CreateCraftingReagentInfoTbl'] = {
    {name='CreateCraftingReagentInfoTbl', count=1, confidence=0.20, sample='local craftingReagentTbl = transaction and transaction:CreateCraftingReagentInfoTbl()'},
  },
  ['CraftRecipe'] = {
    {name='C_TradeSkillUI.CraftRecipe', count=1, confidence=0.20, sample='C_TradeSkillUI.CraftRecipe(id, count, craftingReagentTbl)'},
  },
  ['UpdateSkillConsole'] = {
    {name='UpdateSkillConsole', count=1, confidence=0.20, sample='local function UpdateSkillConsole(_,_,msg)'},
  },
  ['HasProfessionSlot'] = {
    {name='HasProfessionSlot', count=1, confidence=0.20, sample='function ZGVP:HasProfessionSlot()'},
  },
  ['SetTalents'] = {
    {name='TA.SetTalents', count=5, confidence=1.00, sample='PlayerSpellsFrame.TalentsFrame:HookScript("OnShow",function() TA.SetTalents() end)'},
  },
  ['LearnNextTalent'] = {
    {name='LearnNextTalent', count=2, confidence=0.40, sample='TA:LearnNextTalent()'},
  },
  ['SetSpec'] = {
    {name='TA.SetSpec', count=2, confidence=0.40, sample='function TA.SetSpec()'},
  },
  ['DelayedSetTalents'] = {
    {name='TA.DelayedSetTalents', count=1, confidence=0.20, sample='function TA.DelayedSetTalents()'},
  },
  ['GetBuild'] = {
    {name='GetBuild', count=2, confidence=0.40, sample='TA.ActiveBuild = TA:GetBuild(ident)'},
  },
  ['GetBuildStatus'] = {
    {name='GetBuildStatus', count=3, confidence=0.60, sample='local status = TA:GetBuildStatus()'},
  },
  ['SetAvailable'] = {
    {name='SetAvailable', count=2, confidence=0.40, sample='zygorbutton:SetAvailable(available)'},
  },
  ['SetSelectionTalents'] = {
    {name='TA.SetSelectionTalents', count=1, confidence=0.20, sample='function TA.SetSelectionTalents()'},
  },
  ['ParseLines'] = {
    {name='ParseLines', count=5, confidence=1.00, sample='function TA:ParseLines(text,spec,tree)'},
  },
  ['GetEntryInfo'] = {
    {name='C_Traits.GetEntryInfo', count=12, confidence=1.00, sample='local leftEntryInfo =  C_Traits.GetEntryInfo(configID, left)'},
  },
  ['GetSubTreeInfo'] = {
    {name='C_Traits.GetSubTreeInfo', count=4, confidence=0.80, sample='local leftTreeInfo = C_Traits.GetSubTreeInfo(configID, leftEntryInfo.subTreeID);'},
  },
  ['GetNodeCost'] = {
    {name='C_Traits.GetNodeCost', count=1, confidence=0.20, sample='local cost = C_Traits.GetNodeCost(configID,nodeInfo.ID)'},
  },
  ['LearnBuild'] = {
    {name='LearnBuild', count=2, confidence=0.40, sample='function TA:LearnBuild()'},
  },
  ['ResetTree'] = {
    {name='C_Traits.ResetTree', count=1, confidence=0.20, sample='C_Traits.ResetTree(configID,treeID)'},
  },
  ['SetSelection'] = {
    {name='C_Traits.SetSelection', count=3, confidence=0.60, sample='if build.hero=="left" then C_Traits.SetSelection(configID,nodeID,left) end'},
  },
  ['PurchaseRank'] = {
    {name='C_Traits.PurchaseRank', count=1, confidence=0.20, sample='C_Traits.PurchaseRank(configID,node.ID)'},
  },
  ['RecordTalents'] = {
    {name='ZGV.Testing.RecordTalents', count=1, confidence=0.20, sample='func = function() ZGV.Testing.RecordTalents() end,'},
  },
  ['DumpTalents'] = {
    {name='ZGV.Testing.DumpTalents', count=1, confidence=0.20, sample='func = function() ZGV.Testing.DumpTalents() end,'},
  },
  ['ExportCurrentBuild'] = {
    {name='ZGV.Testing.ExportCurrentBuild', count=1, confidence=0.20, sample='func = function() ZGV.Testing.ExportCurrentBuild() end,'},
  },
  ['CheckForChanges'] = {
    {name='ZGV.Testing.CheckForChanges', count=1, confidence=0.20, sample='func = function() ZGV.Testing.CheckForChanges() end,'},
  },
  ['ContinueOnAddOnLoaded'] = {
    {name='EventUtil.ContinueOnAddOnLoaded', count=1, confidence=0.20, sample='EventUtil.ContinueOnAddOnLoaded("Blizzard_PlayerSpells", TA.Initialise);'},
  },
  ['GetRaceZone'] = {
    {name='GetRaceZone', count=1, confidence=0.20, sample='function DR:GetRaceZone(zone)'},
  },
  ['GetRaceName'] = {
    {name='GetRaceName', count=1, confidence=0.20, sample='function DR:GetRaceName(zone,race)'},
  },
  ['GetRaceLocation'] = {
    {name='GetRaceLocation', count=1, confidence=0.20, sample='function DR:GetRaceLocation(zone,race)'},
  },
  ['GetRaceMedal'] = {
    {name='GetRaceMedal', count=2, confidence=0.40, sample='function DR:GetRaceMedal(zone,race,diff)'},
  },
  ['Blood'] = {
    {name='Blood', count=13, confidence=1.00, sample='name = "Blood (Leveling)",'},
  },
  ['Frost'] = {
    {name='Frost', count=20, confidence=1.00, sample='name = "Frost (Leveling)",'},
  },
  ['Unholy'] = {
    {name='Unholy', count=3, confidence=0.60, sample='name = "Unholy (Leveling)",'},
  },
  ['Havoc'] = {
    {name='Havoc', count=3, confidence=0.60, sample='name = "Havoc (Leveling)",'},
  },
  ['Vengeance'] = {
    {name='Vengeance', count=4, confidence=0.80, sample='name = "Vengeance (Leveling)",'},
  },
  ['Balance'] = {
    {name='Balance', count=3, confidence=0.60, sample='name = "Balance (Leveling)",'},
  },
  ['Feral'] = {
    {name='Feral', count=3, confidence=0.60, sample='name = "Feral (Leveling)",'},
  },
  ['Guardian'] = {
    {name='Guardian', count=11, confidence=1.00, sample='name = "Guardian (Leveling)",'},
  },
  ['Restoration'] = {
    {name='Restoration', count=6, confidence=1.00, sample='name = "Restoration (Leveling)",'},
  },
  ['Devastation'] = {
    {name='Devastation', count=3, confidence=0.60, sample='name = "Devastation (Leveling)",'},
  },
  ['Preservation'] = {
    {name='Preservation', count=3, confidence=0.60, sample='name = "Preservation (Leveling)",'},
  },
  ['Augmentation'] = {
    {name='Augmentation', count=3, confidence=0.60, sample='name = "Augmentation (Leveling)",'},
  },
  ['Mastery'] = {
    {name='Mastery', count=45, confidence=1.00, sample='name = "Beast Mastery (Leveling)",'},
  },
  ['Marksmanship'] = {
    {name='Marksmanship', count=3, confidence=0.60, sample='name = "Marksmanship (Leveling)",'},
  },
  ['Survival'] = {
    {name='Survival', count=3, confidence=0.60, sample='name = "Survival (Leveling)",'},
  },
  ['Arcane'] = {
    {name='Arcane', count=3, confidence=0.60, sample='name = "Arcane (Leveling)",'},
  },
  ['Fire'] = {
    {name='Fire', count=143, confidence=1.00, sample='name = "Fire (Leveling)",'},
  },
  ['Brewmaster'] = {
    {name='Brewmaster', count=3, confidence=0.60, sample='name = "Brewmaster (Leveling)",'},
  },
  ['Mistweaver'] = {
    {name='Mistweaver', count=3, confidence=0.60, sample='name = "Mistweaver (Leveling)",'},
  },
  ['Windwalker'] = {
    {name='Windwalker', count=3, confidence=0.60, sample='name = "Windwalker (Leveling)",'},
  },
  ['Holy'] = {
    {name='Holy', count=6, confidence=1.00, sample='name = "Holy (Leveling)",'},
  },
  ['Protection'] = {
    {name='Protection', count=6, confidence=1.00, sample='name = "Protection (Leveling)",'},
  },
  ['Retribution'] = {
    {name='Retribution', count=5, confidence=1.00, sample='name = "Retribution (Leveling)",'},
  },
  ['Discipline'] = {
    {name='Discipline', count=3, confidence=0.60, sample='name = "Discipline (Leveling)",'},
  },
  ['Shadow'] = {
    {name='Shadow', count=7, confidence=1.00, sample='name = "Shadow (Leveling)",'},
  },
  ['Assassination'] = {
    {name='Assassination', count=3, confidence=0.60, sample='name = "Assassination (Leveling)",'},
  },
  ['Outlaw'] = {
    {name='Outlaw', count=3, confidence=0.60, sample='name = "Outlaw (Leveling)",'},
  },
  ['Subtlety'] = {
    {name='Subtlety', count=3, confidence=0.60, sample='name = "Subtlety (Leveling)",'},
  },
  ['Enhancement'] = {
    {name='Enhancement', count=3, confidence=0.60, sample='name = "Enhancement (Leveling)",'},
  },
  ['Elemental'] = {
    {name='Elemental', count=9, confidence=1.00, sample='name = "Elemental (Leveling)",'},
  },
  ['Affliction'] = {
    {name='Affliction', count=8, confidence=1.00, sample='name = "Affliction (Leveling)",'},
  },
  ['Demonology'] = {
    {name='Demonology', count=2, confidence=0.40, sample='name = "Demonology (Leveling)",'},
  },
  ['Demonologist'] = {
    {name='Demonologist', count=1, confidence=0.20, sample='name = "Demonologist (M+)",'},
  },
  ['Destruction'] = {
    {name='Destruction', count=3, confidence=0.60, sample='name = "Destruction (Leveling)",'},
  },
  ['Arms'] = {
    {name='Arms', count=3, confidence=0.60, sample='name = "Arms (Leveling)",'},
  },
  ['Fury'] = {
    {name='Fury', count=12, confidence=1.00, sample='name = "Fury (Leveling)",'},
  },
  ['Niffelem'] = {
    {name='Niffelem', count=11, confidence=1.00, sample='["DAILIES\\Wrath of the Lich King Dailies\\The Storm Peaks\\Dun Niffelem (The Sons of Hodir) Pre-quest and Dailies"] = {'},
  },
  ['Jungle'] = {
    {name='Jungle', count=130, confidence=1.00, sample='["DAILIES\\Warlords of Draenor Dailies\\Tanaan Jungle (100)\\Hand of the Prophet Dailies"] = {'},
  },
  ['Dragonflight'] = {
    {name='Dragonflight', count=663, confidence=1.00, sample='["DAILIES\\Dragonflight (10-70)\\A Cataloger's Paradise"] = {'},
  },
  ['Quests'] = {
    {name='Quests', count=60, confidence=1.00, sample='["DAILIES\\Dragonflight (10-70)\\Maruuk Centaur\\Aylaag Outpost Daily Quests (Eaglewatch Outpost)"] = {'},
  },
  ['Camp'] = {
    {name='Camp', count=16, confidence=1.00, sample='["DAILIES\\Dragonflight (10-70)\\Suffusion Camp (Ohn'ahran Plains)"] = {'},
  },
  ['Within'] = {
    {name='Within', count=631, confidence=1.00, sample='["DAILIES\\The War Within (70-80)\\Awakening the Machine/Snuffling Weeklies"] = {'},
  },
  ['Summit'] = {
    {name='Summit', count=103, confidence=1.00, sample='["DUNGEONS\\Outland Raids\\Hyjal Summit (Battle for Mount Hyjal)"] = {'},
  },
  ['Chromie'] = {
    {name='Chromie', count=12, confidence=1.00, sample='["DUNGEONS\\Legion Scenarios\\The Deaths of Chromie (Stratholme Intro)"] = {'},
  },
  ['Storm'] = {
    {name='Storm', count=27, confidence=1.00, sample='["DUNGEONS\\Pandaria (10-70)\\Pandaria Scenarios\\A Brewing Storm (10-70)"] = {'},
  },
  ['Patience'] = {
    {name='Patience', count=7, confidence=1.00, sample='["DUNGEONS\\Pandaria (10-70)\\Pandaria Scenarios\\A Little Patience (20-70)"] = {'},
  },
  ['Annihilation'] = {
    {name='Annihilation', count=8, confidence=1.00, sample='["DUNGEONS\\Pandaria (10-70)\\Pandaria Scenarios\\Arena of Annihilation (25-70)"] = {'},
  },
  ['Festival'] = {
    {name='Festival', count=8, confidence=1.00, sample='["DUNGEONS\\Pandaria (10-70)\\Pandaria Scenarios\\Brewmoon Festival (25-70)"] = {'},
  },
  ['Ingoo'] = {
    {name='Ingoo', count=8, confidence=1.00, sample='["DUNGEONS\\Pandaria (10-70)\\Pandaria Scenarios\\Unga Ingoo (20-70)"] = {'},
  },
  ['Ascension'] = {
    {name='Ascension', count=12, confidence=1.00, sample='["EVENTS\\Battle for Azeroth\\Tyrande's Ascension (Darkshore Warfront Unlock)"] = {'},
  },
  ['Dreamsurge'] = {
    {name='Dreamsurge', count=32, confidence=1.00, sample='["EVENTS\\Dragonflight (10-70)\\Emerald Dreamsurge (Ohn'ahran Plains)"] = {'},
  },
  ['Beans'] = {
    {name='Beans', count=8, confidence=1.00, sample='["GOLD\\Farming\\Cocoa Beans (Alliance)"] = {'},
  },
  ['Drustvar'] = {
    {name='Drustvar', count=45, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Kul Tiras\\Drustvar (10-70)"] = {'},
  },
  ['Loremaster'] = {
    {name='Loremaster', count=27, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Kul Tiras\\Drustvar Loremaster (Story Quest Only)"] = {'},
  },
  ['Valley'] = {
    {name='Valley', count=266, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Kul Tiras\\Stormsong Valley (10-70)"] = {'},
  },
  ['Sound'] = {
    {name='Sound', count=64, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Kul Tiras\\Tiragarde Sound (10-70)"] = {'},
  },
  ['Crash'] = {
    {name='Crash', count=6, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Grimwatt's Crash (Nazmir)"] = {'},
  },
  ['Ledge'] = {
    {name='Ledge', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Mistvine Ledge (Zuldazar)"] = {'},
  },
  ['Overlook'] = {
    {name='Overlook', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Mugamba Overlook (Zuldazar)"] = {'},
  },
  ['Grotto'] = {
    {name='Grotto', count=6, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Veiled Grotto (Zuldazar)"] = {'},
  },
  ['Hollow'] = {
    {name='Hollow', count=12, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Verdant Hollow (Zuldazar)"] = {'},
  },
  ['Nest'] = {
    {name='Nest', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Vulture's Nest (Vol'dun)"] = {'},
  },
  ['Reach'] = {
    {name='Reach', count=28, confidence=1.00, sample='["LEVELING\\Starter Guides\\Exile's Reach (1-10)"] = {'},
  },
  ['Deepholm'] = {
    {name='Deepholm', count=42, confidence=1.00, sample='["LEVELING\\Cataclysm (10-70)\\Deepholm (30-70)"] = {'},
  },
  ['Hyjal'] = {
    {name='Hyjal', count=68, confidence=1.00, sample='["LEVELING\\Cataclysm (10-70)\\Mount Hyjal (30-70)"] = {'},
  },
  ['Highlands'] = {
    {name='Highlands', count=210, confidence=1.00, sample='["LEVELING\\Cataclysm (10-70)\\Twilight Highlands (30-70)"] = {'},
  },
  ['Uldum'] = {
    {name='Uldum', count=73, confidence=1.00, sample='["LEVELING\\Cataclysm (10-70)\\Uldum (30-70)"] = {'},
  },
  ['Badlands'] = {
    {name='Badlands', count=52, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Badlands (15-70)"] = {'},
  },
  ['Lands'] = {
    {name='Lands', count=58, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Blasted Lands (15-70)"] = {'},
  },
  ['Steppes'] = {
    {name='Steppes', count=70, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Burning Steppes (15-70)"] = {'},
  },
  ['Morogh'] = {
    {name='Morogh', count=117, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Dun Morogh (1-70)"] = {'},
  },
  ['Duskwood'] = {
    {name='Duskwood', count=37, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Duskwood (10-70)"] = {'},
  },
  ['Plaguelands'] = {
    {name='Plaguelands', count=108, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Eastern Plaguelands (15-70)"] = {'},
  },
  ['Modan'] = {
    {name='Modan', count=47, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Loch Modan (5-70)"] = {'},
  },
  ['Stranglethorn'] = {
    {name='Stranglethorn', count=129, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Northern Stranglethorn (10-70)"] = {'},
  },
  ['Mountains'] = {
    {name='Mountains', count=168, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Redridge Mountains (7-70)"] = {'},
  },
  ['Gorge'] = {
    {name='Gorge', count=29, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Searing Gorge (15-70)"] = {'},
  },
  ['Sorrows'] = {
    {name='Sorrows', count=61, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Swamp of Sorrows (15-70)"] = {'},
  },
  ['Hinterlands'] = {
    {name='Hinterlands', count=49, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\The Hinterlands (10-70)"] = {'},
  },
  ['Westfall'] = {
    {name='Westfall', count=27, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Westfall (5-70)"] = {'},
  },
  ['Wetlands'] = {
    {name='Wetlands', count=59, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Wetlands (10-70)"] = {'},
  },
  ['Ashenvale'] = {
    {name='Ashenvale', count=80, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Ashenvale (7-70)"] = {'},
  },
  ['Isle'] = {
    {name='Isle', count=136, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Azuremyst Isle (1-70)"] = {'},
  },
  ['Darkshore'] = {
    {name='Darkshore', count=55, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Darkshore (5-70)"] = {'},
  },
  ['Desolace'] = {
    {name='Desolace', count=51, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Desolace (10-70)"] = {'},
  },
  ['Marsh'] = {
    {name='Marsh', count=79, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Dustwallow Marsh (15-70)"] = {'},
  },
  ['Felwood'] = {
    {name='Felwood', count=51, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Felwood (15-70)"] = {'},
  },
  ['Feralas'] = {
    {name='Feralas', count=76, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Feralas (15-70)"] = {'},
  },
  ['Silithus'] = {
    {name='Silithus', count=37, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Silithus (15-70)"] = {'},
  },
  ['Barrens'] = {
    {name='Barrens', count=160, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Southern Barrens (10-70)"] = {'},
  },
  ['Tanaris'] = {
    {name='Tanaris', count=69, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Tanaris (15-70)"] = {'},
  },
  ['Needles'] = {
    {name='Needles', count=27, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Thousand Needles (15-70)"] = {'},
  },
  ['Crater'] = {
    {name='Crater', count=27, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Un'Goro Crater (15-70)"] = {'},
  },
  ['Winterspring'] = {
    {name='Winterspring', count=50, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Winterspring (15-70)"] = {'},
  },
  ['Peninsula'] = {
    {name='Peninsula', count=123, confidence=1.00, sample='["LEVELING\\The Burning Crusade (10-70)\\Hellfire Peninsula (10-70)"] = {'},
  },
  ['Nagrand'] = {
    {name='Nagrand', count=122, confidence=1.00, sample='["LEVELING\\The Burning Crusade (10-70)\\Nagrand (15-70)"] = {'},
  },
  ['Netherstorm'] = {
    {name='Netherstorm', count=69, confidence=1.00, sample='["LEVELING\\The Burning Crusade (10-70)\\Netherstorm (25-70)"] = {'},
  },
  ['Zangarmarsh'] = {
    {name='Zangarmarsh', count=60, confidence=1.00, sample='["LEVELING\\The Burning Crusade (10-70)\\Zangarmarsh (10-70)"] = {'},
  },
  ['Tundra'] = {
    {name='Tundra', count=127, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Borean Tundra (10-70)"] = {'},
  },
  ['Dragonblight'] = {
    {name='Dragonblight', count=97, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Dragonblight (15-70)"] = {'},
  },
  ['Hills'] = {
    {name='Hills', count=67, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Grizzly Hills (15-70)"] = {'},
  },
  ['Fjord'] = {
    {name='Fjord', count=122, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Howling Fjord (10-70)"] = {'},
  },
  ['Icecrown'] = {
    {name='Icecrown', count=123, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Icecrown (25-70)"] = {'},
  },
  ['Basin'] = {
    {name='Basin', count=36, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Sholazar Basin (20-70)"] = {'},
  },
  ['Peaks'] = {
    {name='Peaks', count=71, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\The Storm Peaks (25-70)"] = {'},
  },
  ['Drak'] = {
    {name='Drak', count=58, confidence=1.00, sample='["LEVELING\\Wrath of the Lich King (10-70)\\Zul'Drak (20-70)"] = {'},
  },
  ['Suramar'] = {
    {name='Suramar', count=182, confidence=1.00, sample='["LEVELING\\Legion (10-70)\\Suramar (45-70)"] = {'},
  },
  ['Wastes'] = {
    {name='Wastes', count=51, confidence=1.00, sample='["LEVELING\\Pandaria (10-70)\\Dread Wastes (30-70)"] = {'},
  },
  ['Thunder'] = {
    {name='Thunder', count=44, confidence=1.00, sample='["LEVELING\\Pandaria (10-70)\\Isle of Thunder (50-70)"] = {'},
  },
  ['Wilds'] = {
    {name='Wilds', count=65, confidence=1.00, sample='["LEVELING\\Pandaria (10-70)\\Krasarang Wilds (15-70)"] = {'},
  },
  ['Winds'] = {
    {name='Winds', count=73, confidence=1.00, sample='["LEVELING\\Pandaria (10-70)\\Valley of the Four Winds (15-70)"] = {'},
  },
  ['Gorgrond'] = {
    {name='Gorgrond', count=35, confidence=1.00, sample='["LEVELING\\Draenor (10-70)\\Gorgrond (15-70)"] = {'},
  },
  ['Arak'] = {
    {name='Arak', count=47, confidence=1.00, sample='["LEVELING\\Draenor (10-70)\\Spires of Arak (30-70)"] = {'},
  },
  ['Talador'] = {
    {name='Talador', count=72, confidence=1.00, sample='["LEVELING\\Draenor (10-70)\\Talador (20-70)"] = {'},
  },
  ['Questline'] = {
    {name='Questline', count=8, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Augmentation Questline (Evoker)"] = {'},
  },
  ['Zones'] = {
    {name='Zones', count=288, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\Intro & The Waking Shores (Full Zone)"] = {'},
  },
  ['Shores'] = {
    {name='Shores', count=74, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\Intro & The Waking Shores (Full Zone)"] = {'},
  },
  ['Plains'] = {
    {name='Plains', count=34, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\Ohn'ahran Plains (Full Zone)"] = {'},
  },
  ['Thaldraszus'] = {
    {name='Thaldraszus', count=37, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\Thaldraszus (Full Zone)"] = {'},
  },
  ['Span'] = {
    {name='Span', count=31, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\The Azure Span (Full Zone)"] = {'},
  },
  ['Things'] = {
    {name='Things', count=8, confidence=1.00, sample='["LEVELING\\Dragonflight (10-70)\\Some Wicked Things (Warlock)"] = {'},
  },
  ['Starter'] = {
    {name='Starter', count=19, confidence=1.00, sample='["LEVELING\\Starter Guides\\Dracthyr Starter (10-15)"] = {'},
  },
  ['Ardenweald'] = {
    {name='Ardenweald', count=99, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Ardenweald (Story Only)"] = {'},
  },
  ['Bastion'] = {
    {name='Bastion', count=60, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Bastion (Story Only)"] = {'},
  },
  ['Maldraxxus'] = {
    {name='Maldraxxus', count=62, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Maldraxxus (Story Only)"] = {'},
  },
  ['Chordy'] = {
    {name='Chordy', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Chordy (Abomination)"] = {'},
  },
  ['Bag'] = {
    {name='Bag', count=8, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Gas Bag (Abomination)"] = {'},
  },
  ['Guillotine'] = {
    {name='Guillotine', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Guillotine (Abomination)"] = {'},
  },
  ['Phillip'] = {
    {name='Phillip', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Iron Phillip (Abomination)"] = {'},
  },
  ['Tomalin'] = {
    {name='Tomalin', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Mama Tomalin (Abomination)"] = {'},
  },
  ['Naxx'] = {
    {name='Naxx', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Naxx (Abomination)"] = {'},
  },
  ['Professor'] = {
    {name='Professor', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Professor (Abomination)"] = {'},
  },
  ['Sabrina'] = {
    {name='Sabrina', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Sabrina (Abomination)"] = {'},
  },
  ['Toothpick'] = {
    {name='Toothpick', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Toothpick (Abomination)"] = {'},
  },
  ['Revendreth'] = {
    {name='Revendreth', count=67, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Revendreth (Story Only)"] = {'},
  },
  ['Court'] = {
    {name='Court', count=6, confidence=1.00, sample='["LEVELING\\Shadowlands (50-70)\\Venthyr Covenant\\Venthyr The Ember Court (Weekly Scenario)"] = {'},
  },
  ['Leveling'] = {
    {name='Leveling', count=6, confidence=1.00, sample='["LEVELING\\Allied Races\\Earthen Exploration Leveling (10-71)"] = {'},
  },
  ['Kahet'] = {
    {name='Kahet', count=100, confidence=1.00, sample='["LEVELING\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\Azj-Kahet (Full Zone)"] = {'},
  },
  ['Hallowfall'] = {
    {name='Hallowfall', count=81, confidence=1.00, sample='["LEVELING\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\Hallowfall (Full Zone)"] = {'},
  },
  ['Dorn'] = {
    {name='Dorn', count=156, confidence=1.00, sample='["LEVELING\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\Intro & Isle of Dorn (Full Zone)"] = {'},
  },
  ['Deeps'] = {
    {name='Deeps', count=57, confidence=1.00, sample='["LEVELING\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\The Ringing Deeps (Full Zone)"] = {'},
  },
  ['Undermine'] = {
    {name='Undermine', count=149, confidence=1.00, sample='["LEVELING\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\Undermine (Full Zone)"] = {'},
  },
  ['Spider'] = {
    {name='Spider', count=8, confidence=1.00, sample='["PETSMOUNTS\\Hunter Pets\\Beast Mastery Exotic Pets\\Shale Spiders\\Green Shale Spider (Rare Spawn)"] = {'},
  },
  ['Drone'] = {
    {name='Drone', count=8, confidence=1.00, sample='["PETSMOUNTS\\Mounts\\Flying Mounts\\Quest Mounts\\Shadowbarb Drone (Beta)"] = {'},
  },
  ['Angler'] = {
    {name='Angler', count=8, confidence=1.00, sample='["PROFESSIONS\\Fishing\\Quest Guides\\Underlight Angler (Legion Fishing Artifact)"] = {'},
  },
  ['Leaper'] = {
    {name='Leaper', count=12, confidence=1.00, sample='["GOLD\\Gathering\\Prismatic Leaper (Ohn'ahran Plains)"] = {'},
  },
  ['Pterrordax'] = {
    {name='Pterrordax', count=4, confidence=0.80, sample='["ACHIEVEMENTS\\Quests\\Battle for Azeroth\\How to Ptrain Your Pterrordax (Part Two)"] = {'},
  },
  ['Path'] = {
    {name='Path', count=4, confidence=0.80, sample='["DAILIES\\Wrath of the Lich King Dailies\\The Storm Peaks\\The Storm Peaks Full Zone Quest Path (Includes Pre-Quests)"] = {'},
  },
  ['Dailies'] = {
    {name='Dailies', count=4, confidence=0.80, sample='["DAILIES\\Mists of Pandaria Dailies\\Beast Master Dailies (Dominance Offensive)"] = {'},
  },
  ['Pasture'] = {
    {name='Pasture', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Hillcrest Pasture (Stormsong Valley)"] = {'},
  },
  ['Cove'] = {
    {name='Cove', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Mudfisher Cove (Drustvar)"] = {'},
  },
  ['Watch'] = {
    {name='Watch', count=8, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Stonefist Watch (Tiragarde Sound)"] = {'},
  },
  ['Post'] = {
    {name='Post', count=4, confidence=0.80, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Swiftwind Post (Drustvar)"] = {'},
  },
  ['Cavern'] = {
    {name='Cavern', count=8, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Scouting Reports\\Windfall Cavern (Stormsong Valley)"] = {'},
  },
  ['Nazmir'] = {
    {name='Nazmir', count=44, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Zandalar\\Nazmir (10-70)"] = {'},
  },
  ['Zuldazar'] = {
    {name='Zuldazar', count=117, confidence=1.00, sample='["LEVELING\\Battle for Azeroth (10-70)\\Zandalar\\Zuldazar (10-70)"] = {'},
  },
  ['Woods'] = {
    {name='Woods', count=69, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Eversong Woods (1-70)"] = {'},
  },
  ['Ghostlands'] = {
    {name='Ghostlands', count=25, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Ghostlands (1-70)"] = {'},
  },
  ['Foothills'] = {
    {name='Foothills', count=85, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Eastern Kingdoms\\Hillsbrad Foothills (7-70)"] = {'},
  },
  ['Azshara'] = {
    {name='Azshara', count=47, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Azshara (5-70)"] = {'},
  },
  ['Durotar'] = {
    {name='Durotar', count=122, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Durotar (1-70)"] = {'},
  },
  ['Mulgore'] = {
    {name='Mulgore', count=64, confidence=1.00, sample='["LEVELING\\Classic (1-70)\\Kalimdor\\Mulgore (1-70)"] = {'},
  },
  ['Ridge'] = {
    {name='Ridge', count=53, confidence=1.00, sample='["LEVELING\\Draenor (10-70)\\Frostfire Ridge (10-70)"] = {'},
  },
  ['TestFindNearest'] = {
    {name='ZGV.Testing.TestFindNearest', count=1, confidence=0.20, sample='--/run ZGV.Testing.TestFindNearest("TrainerInscription")'},
  },
  ['City'] = {
    {name='City', count=417, confidence=1.00, sample='69334=sA|m84|x68.00|y17.00--, Stormwind City (Adherent Hanjun)'},
  },
  ['Ironforge'] = {
    {name='Ironforge', count=98, confidence=1.00, sample='27819=sA|m87|x19.00|y51.80--, Ironforge (Brew Vendor)'},
  },
  ['Northshire'] = {
    {name='Northshire', count=8, confidence=1.00, sample='91405=sA|m425|x75.30|y10.80--, Northshire (Jeremiah Seely)'},
  },
  ['Gilneas'] = {
    {name='Gilneas', count=61, confidence=1.00, sample='42953=sA|m179|x68.00|y74.50--, Gilneas (Benjamin Sykes)'},
  },
  ['Tinkertown'] = {
    {name='Tinkertown', count=11, confidence=1.00, sample='3162=sA|m469|x49.50|y51.90--, New Tinkertown (Burdrak Harglhelm)'},
  },
  ['Depths'] = {
    {name='Depths', count=43, confidence=1.00, sample='42966=sA|m204|x56.00|y73.00--, Abyssal Depths (Chase Whithers)'},
  },
  ['Expanse'] = {
    {name='Expanse', count=26, confidence=1.00, sample='42488=sA|m205|x57.00|y76.20--, Shimmering Expanse (Chief Engineer Yoon)'},
  },
  ['Shadowglen'] = {
    {name='Shadowglen', count=10, confidence=1.00, sample='3592=sA|m460|x49.50|y65.69--, Shadowglen (Andiss)'},
  },
  ['Sea'] = {
    {name='Sea', count=5, confidence=1.00, sample='156800=sA|m1409|x52.23|y55.32--Exile's Reach, North Sea (Quartermaster Richter)'},
  },
  ['Glades'] = {
    {name='Glades', count=102, confidence=1.00, sample='63073=sH|m18|x60.80|y54.20--, Tirisfal Glades (Ansel Fincap)'},
  },
  ['Deathknell'] = {
    {name='Deathknell', count=4, confidence=0.80, sample='2116=sH|m465|x52.50|y59.10--, Deathknell (Blacksmith Rand)'},
  },
  ['Undercity'] = {
    {name='Undercity', count=92, confidence=1.00, sample='4604=sH|m90|x54.90|y37.70|cZGV.InPhase("Old Undercity")--, Undercity (Abigail Sawyer)'},
  },
  ['Pass'] = {
    {name='Pass', count=1, confidence=0.20, sample='18255=sB|m42|x47.10|y75.30--, Deadwind Pass (Mage Darius)'},
  },
  ['Enclave'] = {
    {name='Enclave', count=12, confidence=1.00, sample='29203=sB|m124|x48.60|y32.60--, Plaguelands: The Scarlet Enclave (Alchemist Karloff)'},
  },
  ['Danas'] = {
    {name='Danas', count=17, confidence=1.00, sample='25036=sB|m122|x51.10|y33.59--, Isle of Quel'Danas (Caregiver Inaara)'},
  },
  ['Teldrassil'] = {
    {name='Teldrassil', count=72, confidence=1.00, sample='3608=sA|m57|x55.20|y50.00--, Teldrassil (Aldia)'},
  },
  ['Darnassus'] = {
    {name='Darnassus', count=69, confidence=1.00, sample='3562=sA|m89|x42.60|y52.80--, Darnassus (Alaindia)'},
  },
  ['Exodar'] = {
    {name='Exodar', count=48, confidence=1.00, sample='16705=sA|m103|x27.60|y63.00--, The Exodar (Altaa)'},
  },
  ['Vale'] = {
    {name='Vale', count=6, confidence=1.00, sample='16917=sA|m468|x51.80|y38.50--, Ammen Vale (Aurok)'},
  },
  ['Orgrimmar'] = {
    {name='Orgrimmar', count=203, confidence=1.00, sample='114104=sH|m85|x52.40|y56.00--, Orgrimmar (Adept Yad M'Sivart)'},
  },
  ['Bluff'] = {
    {name='Bluff', count=65, confidence=1.00, sample='35343=sH|m88|x30.60|y63.30--, Thunder Bluff (Bountiful Barrel)'},
  },
  ['Isles'] = {
    {name='Isles', count=122, confidence=1.00, sample='39032=sH|m463|x57.20|y62.80--, Echo Isles (Gora'tin)'},
  },
  ['Narache'] = {
    {name='Narache', count=8, confidence=1.00, sample='3075=sH|m462|x25.80|y29.50--, Camp Narache (Bronk Steelrage)'},
  },
  ['Trials'] = {
    {name='Trials', count=10, confidence=1.00, sample='3158=sH|m461|x42.65|y62.65--, Valley of Trials (Duokna)'},
  },
  ['Moonglade'] = {
    {name='Moonglade', count=19, confidence=1.00, sample='7940=sB|m80|x51.50|y33.20--, Moonglade (Darnall)'},
  },
  ['Front'] = {
    {name='Front', count=6, confidence=1.00, sample='53881=sB|m338|x44.50|y85.40--, Molten Front (Ayla Shadowstorm)'},
  },
  ['Wintergrasp'] = {
    {name='Wintergrasp', count=7, confidence=1.00, sample='32294=sA|m123|x51.60|y17.50--, Wintergrasp (Knight Dameron)'},
  },
  ['Citadel'] = {
    {name='Citadel', count=44, confidence=1.00, sample='38841=sH|m186|x34.80|y22.80--, Icecrown Citadel (Vol'guk)'},
  },
  ['Blossoms'] = {
    {name='Blossoms', count=105, confidence=1.00, sample='64557=sA|m390|x85.60|y62.20--, Vale of Eternal Blossoms (Aster)'},
  },
  ['Giants'] = {
    {name='Giants', count=6, confidence=1.00, sample='70030=sA|m507|x35.65|y53.50--, Isle of Giants (Agrant Sharpshot)'},
  },
  ['Stars'] = {
    {name='Stars', count=10, confidence=1.00, sample='64094=sA|m393|x75.00|y47.80--, Shrine of Seven Stars (Tanner Pang)'},
  },
  ['Ashran'] = {
    {name='Ashran', count=159, confidence=1.00, sample='86007=sH|m624|x62.25|y22.40--Warspear, Ashran (Aldrich Rolan)'},
  },
  ['Moons'] = {
    {name='Moons', count=2, confidence=0.40, sample='64038=sH|m392|x71.52|y62.83--, Shrine of Two Moons (Marli Two-Toes)'},
  },
  ['Tournament'] = {
    {name='Tournament', count=3, confidence=0.60, sample='--73815=sB|m571|x37.80|y53.60--, Celestial Tournament (Hearthminder Digao)'},
  },
  ['Stair'] = {
    {name='Stair', count=4, confidence=0.80, sample='70436=sB|m433|x54.40|y72.80--, The Veiled Stair (Blacktalon Quartermaster)'},
  },
  ['Shore'] = {
    {name='Shore', count=171, confidence=1.00, sample='119484=sA|m627|x29.50|y74.90--Dalaran, Broken Shore (Captain Roberts)'},
  },
  ['Stormheim'] = {
    {name='Stormheim', count=22, confidence=1.00, sample='110521=sA|m634|x33.50|y50.80--, Stormheim (Supplier Barleyfoot)'},
  },
  ['Helheim'] = {
    {name='Helheim', count=1, confidence=0.20, sample='93225=sB|m649|x65.20|y43.50--, Helheim (Ku'ku)'},
  },
  ['Lodge'] = {
    {name='Lodge', count=11, confidence=1.00, sample='98737=sB|m739|x52.69|y54.79|cHunter--, Trueshot Lodge (Holt Thunderhorn)'},
  },
  ['Totem'] = {
    {name='Totem', count=32, confidence=1.00, sample='120457=sB|m750|x32.50|y41.30--, Thunder Totem (Akule Riverhorn)'},
  },
  ['Highmountain'] = {
    {name='Highmountain', count=53, confidence=1.00, sample='108534=sB|m650|x41.70|y10.50--, Highmountain (Adaleigh Mae Nelson)'},
  },
  ['Azsuna'] = {
    {name='Azsuna', count=30, confidence=1.00, sample='89939=sB|m630|x47.80|y23.20--, Azsuna (Berazus)'},
  },
  ['Krokuun'] = {
    {name='Krokuun', count=15, confidence=1.00, sample='125346=sB|m830|x56.20|y66.80--, Krokuun (Alchemist Funen)'},
  },
  ['Boralus'] = {
    {name='Boralus', count=94, confidence=1.00, sample='132228=sA|m1161|x74.09|y6.50--, Boralus (Elric Whalgrene)'},
  },
  ['Nazjatar'] = {
    {name='Nazjatar', count=62, confidence=1.00, sample='153510=sA|m1355|x37.80|y55.60--, Nazjatar (Artisan Itanu)'},
  },
  ['Mechagon'] = {
    {name='Mechagon', count=14, confidence=1.00, sample='155209=sB|m1497|x70.30|y30.50--, Mechagon (Alan Greasehops)'},
  },
  ['Cay'] = {
    {name='Cay', count=8, confidence=1.00, sample='143755=sA|m1035|x31.50|y61.40--, Molten Cay (Fitzi Gearwobble)'},
  },
  ['Chain'] = {
    {name='Chain', count=12, confidence=1.00, sample='143758=sA|m1036|x27.10|y61.20--, The Dread Chain (Brewer Ahna)'},
  },
  ['Nashal'] = {
    {name='Nashal', count=2, confidence=0.40, sample='92932=sA|m671|x26.90|y5.50--, The Cove of Nashal (Tinkmaster Overspark)'},
  },
  ['Valor'] = {
    {name='Valor', count=26, confidence=1.00, sample='118882=sH|m829|x49.40|y90.95--, Halls of Valor (Eitrigg)'},
  },
  ['Abyss'] = {
    {name='Abyss', count=9, confidence=1.00, sample='95242=sH|m719|x58.20|y62.40--, Mardum, the Shattered Abyss (Falara Nightsong)'},
  },
  ['Kezan'] = {
    {name='Kezan', count=4, confidence=0.80, sample='37762=sH|m194|x59.67|y72.57--, Kezan (Brett "Coins" McQuid)'},
  },
  ['Temple'] = {
    {name='Temple', count=18, confidence=1.00, sample='111738=sB|m702|x58.20|y28.20|cPriest--, Netherlight Temple (Juvess the Duskwhisperer)'},
  },
  ['Skyhold'] = {
    {name='Skyhold', count=3, confidence=0.60, sample='111741=sB|m695|x44.80|y29.70|cWarrior--, Skyhold (Fjornson Stonecarver)'},
  },
  ['Dreamgrove'] = {
    {name='Dreamgrove', count=2, confidence=0.40, sample='112323=sB|m747|x39.80|y25.80|cDruid--, The Dreamgrove (Amurra Thistledew)'},
  },
  ['Maelstrom'] = {
    {name='Maelstrom', count=4, confidence=0.80, sample='112318=sB|m276|x30.50|y60.35|cShaman--, The Maelstrom (Flamesmith Lanying)'},
  },
  ['Island'] = {
    {name='Island', count=33, confidence=1.00, sample='55072=sB|m407|x47.65|y66.44--, Darkmoon Island (Barum)'},
  },
  ['Hostile'] = {
    {name='Hostile', count=3, confidence=0.60, sample='--174679=sB|m1536|x65.06|y36.26-- , Maldraxxus, (Forgehand Veris)--VERIFY! --Hostile (find condition)'},
  },
  ['Mortis'] = {
    {name='Mortis', count=11, confidence=1.00, sample='180918=sB|m1970|x35.24|y65.56--Haven, Zereth Mortis (Tuul)'},
  },
  ['Valdrakken'] = {
    {name='Valdrakken', count=3, confidence=0.60, sample='221421=sB|m2112|x43.55|y42.52|cZGV.DEV -- Valdrakken (Eraneth)'},
  },
  ['Dornogal'] = {
    {name='Dornogal', count=83, confidence=1.00, sample='223728=sB|m2339|x39.1|y24.17|wInside the building. -- Dornogal (Auditor Balwurz)'},
  },
  ['Stormshield'] = {
    {name='Stormshield', count=21, confidence=1.00, sample='93905=sA|m622|x54.50|y18.39--, Stormshield (Alixandr Fallor)'},
  },
  ['Northrend'] = {
    {name='Northrend', count=5, confidence=1.00, sample='35594=sA|m125|x37.07|y54.77--Dalaran, Northrend (Brassbolt Mechawrench)'},
  },
  ['Tiras'] = {
    {name='Tiras', count=17, confidence=1.00, sample='35594=sA|m1161|x77.25|y13.97|cskill("Engineering") >= 1--Boralus, Kul Tiras (Brassbolt Mechawrench)'},
  },
  ['Eredath'] = {
    {name='Eredath', count=1, confidence=0.20, sample='96507=sB|m883|x46.22|y69.34--The Vindicaar, Eredath (Tassia Whisperglen)'},
  },
  ['Crafters'] = {
    {name='Crafters', count=11, confidence=1.00, sample='122703=sH|m1165|x42.22|y37.95--Terrace of Crafters (Dazar'alor), Zandalar (Clever Kumali)'},
  },
  ['Zandalar'] = {
    {name='Zandalar', count=23, confidence=1.00, sample='122703=sH|m1165|x42.22|y37.95--Terrace of Crafters (Dazar'alor), Zandalar (Clever Kumali)'},
  },
  ['Kings'] = {
    {name='Kings', count=11, confidence=1.00, sample='122701=sH|m1165|x32.01|y34.96--Vault of Kings (Dazar'alor), Zandalar (Examiner Alerinda)'},
  },
  ['House'] = {
    {name='House', count=19, confidence=1.00, sample='131741=sH|m1165|x38.08|y14.15--Hot House (Dazar'alor), Zandalar (Cooka Mala)'},
  },
  ['Sliver'] = {
    {name='Sliver', count=1, confidence=0.20, sample='122705=sH|m1165|x50.52|y23.37--The Sliver (Dazar'alor), Zandalar (Silent Tali)'},
  },
  ['Dread'] = {
    {name='Dread', count=1, confidence=0.20, sample='132265=sH|m1165|x36.54|y17.89--Threads of Dread (Dazar'alor), Zandalar (Milliner Hakkit)'},
  },
  ['Harbor'] = {
    {name='Harbor', count=3, confidence=0.60, sample='sA|m84|x37.91|y34.33|tM--Stormwind Harbor (Stairs), Stormwind City'},
  },
  ['Lift'] = {
    {name='Lift', count=5, confidence=1.00, sample='sH|m85|x50.52|y64.89|tM--Orgrimmar Lift(East), Orgrimmar'},
  },
  ['Tunnel'] = {
    {name='Tunnel', count=3, confidence=0.60, sample='sH|m85|x36.39|y65.10|tM--Valley of Sprits Tunnel (West), Orgrimmar'},
  },
  ['Dalran'] = {
    {name='Dalran', count=13, confidence=1.00, sample='sA|m125|x37.16|y59.99|tM--The Silver Enclave, Dalran (Northrend)'},
  },
  ['Grounds'] = {
    {name='Grounds', count=10, confidence=1.00, sample='sA|m118|x75.75|y19.95|tM--Argent Tournament Grounds (North), Icecrown'},
  },
  ['Dalaran'] = {
    {name='Dalaran', count=51, confidence=1.00, sample='sB|m125|x49.12|y25.10|tM--The Bank of Dalaran (Left), Dalran (Northrend)'},
  },
  ['Lounge'] = {
    {name='Lounge', count=2, confidence=0.40, sample='sB|m125|x49.88|y36.87|tM--The Ledgermain Lounge (North), Dalran (Northrend)'},
  },
  ['Underbelly'] = {
    {name='Underbelly', count=1, confidence=0.20, sample='sB|m126|x33.55|y56.28|tM--Cantrips & Crows, The Underbelly (Dalaran, Northrend)'},
  },
  ['Stand'] = {
    {name='Stand', count=3, confidence=0.60, sample='sB|m121|x40.46|y67.63|tM--The Argent Stand (South), Zul'drak'},
  },
  ['Terrace'] = {
    {name='Terrace', count=11, confidence=1.00, sample='sA|m1530|x85.11|y58.54|tM--The Summer Terrace (Lower Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Lantern'] = {
    {name='Lantern', count=2, confidence=0.40, sample='sA|m1530|x86.77|y66.58|tM--The Golden Lantern (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Vault'] = {
    {name='Vault', count=9, confidence=1.00, sample='sA|m1530|x87.52|y67.52|tM--The Celestial Vault (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Corridor'] = {
    {name='Corridor', count=2, confidence=0.40, sample='sA|m1530|x88.16|y70.37|tM--Ethereal Corridor (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Step'] = {
    {name='Step', count=2, confidence=0.40, sample='sA|m1530|x89.69|y65.46|tM--The Emperor's Step (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Bazaar'] = {
    {name='Bazaar', count=2, confidence=0.40, sample='sA|m1530|x90.15|y63.97|tM--The Star's Bazaar (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Exchange'] = {
    {name='Exchange', count=2, confidence=0.40, sample='sA|m1530|x90.69|y64.05|tM--The Imperial Exchange (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Serenity'] = {
    {name='Serenity', count=9, confidence=1.00, sample='sA|m1530|x91.91|y66.26|tM--Path of Serenity (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Village'] = {
    {name='Village', count=6, confidence=1.00, sample='sH|m371|x27.72|y14.93|tM--Honeydew Village (Southwest, The Jade Forest'},
  },
  ['Rest'] = {
    {name='Rest', count=9, confidence=1.00, sample='sH|m1530|x62.84|y12.37|tM--Summer's Rest (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Balcony'] = {
    {name='Balcony', count=4, confidence=0.80, sample='sH|m1530|x62.59|y13.18|tM--Hall of the Crescent Moon East Balcony (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Mercantile'] = {
    {name='Mercantile', count=2, confidence=0.40, sample='sH|m1530|x63.53|y8.52|tM--The Imperial Mercantile (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Area'] = {
    {name='Area', count=2, confidence=0.40, sample='sH|m1530|x62.15|y12.15|tM--Hall of the Crescent Moon Engineering Area (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Entrance'] = {
    {name='Entrance', count=8, confidence=1.00, sample='sH|m1530|x61.26|y14.99|tM--Hall of the Crescent Moon Entrance (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Masters'] = {
    {name='Masters', count=2, confidence=0.40, sample='sH|m1530|x59.88|y13.02|tM--Chamber of the Masters (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)'},
  },
  ['Nathria'] = {
    {name='Nathria', count=28, confidence=1.00, sample='[2093]=60, -- Castle Nathria (Mythic)'},
  },
  ['Tazavesh'] = {
    {name='Tazavesh', count=1, confidence=0.20, sample='[2225]=60, -- Tazavesh (Mythic)'},
  },
  ['Domination'] = {
    {name='Domination', count=8, confidence=1.00, sample='[2226]=60, -- Sanctum of Domination (Mythic)'},
  },
  ['Ones'] = {
    {name='Ones', count=11, confidence=1.00, sample='[2290]=60, -- Sepulcher of the First Ones (Mythic)'},
  },
  ['Crucible'] = {
    {name='Crucible', count=17, confidence=1.00, sample='[2405]=70, -- Aberrus, the Shadowed Crucible (Mythic)'},
  },
  ['Dungeon'] = {
    {name='Dungeon', count=9, confidence=1.00, sample='[2274] = {buff=359082}, -- Random Timewalking Dungeon (Legion)'},
  },
  ['Event'] = {
    {name='Event', count=1, confidence=0.20, sample='{"list", text=[[Click here to load the **20th Anniversary Event (Beta)** guide]], guide="EVENTS\\The War Within (70-80)\\20th Anniversary Event"},'},
  },
  ['ModelsToNPCCounter'] = {
    {name='ZGV.ModelsToNPCCounter', count=1, confidence=0.20, sample='function ZGV.ModelsToNPCCounter(id,count)'},
  },
  ['Glyphs'] = {
    {name='Glyphs', count=14, confidence=1.00, sample='{"item", text=[[**The War Within Dragon Glyphs (All Zones)**]], guide="Leveling Guides\\The War Within (70-80)\\Dragon Glyphs\\The War Within Dragon Glyphs (All Zones)"},'},
  },
  ['Mycobloom'] = {
    {name='Mycobloom', count=28, confidence=1.00, sample='{"item", text=[[**Mycobloom (Azj-Kahet)**]], guide="Profession Guides\\Herbalism\\Farming Guides\\Mycobloom (Azj-Kahet)"},'},
  },
  ['Spear'] = {
    {name='Spear', count=12, confidence=1.00, sample='{"item", text=[[**Arathor's Spear (Hallowfall)**]], guide="Profession Guides\\Herbalism\\Farming Guides\\Arathor's Spear (Hallowfall)"},'},
  },
  ['Blossom'] = {
    {name='Blossom', count=12, confidence=1.00, sample='{"item", text=[[**Blessing Blossom (Hallowfall)**]], guide="Profession Guides\\Herbalism\\Farming Guides\\Blessing Blossom (Hallowfall)"},'},
  },
  ['Orbinid'] = {
    {name='Orbinid', count=8, confidence=1.00, sample='{"item", text=[[**Orbinid (Azj-Kahet)**]], guide="Profession Guides\\Herbalism\\Farming Guides\\Orbinid (Azj-Kahet)"},'},
  },
  ['Luredrop'] = {
    {name='Luredrop', count=9, confidence=1.00, sample='{"item", text=[[**Luredrop (Azj-Kahet)**]], guide="Profession Guides\\Herbalism\\Farming Guides\\Luredrop (Azj-Kahet)"},'},
  },
  ['Bismuth'] = {
    {name='Bismuth', count=36, confidence=1.00, sample='{"item", text=[[**Bismuth (Azj-Kahet)**]], guide="Profession Guides\\Mining\\Farming Guides\\Bismuth (Azj-Kahet)"},'},
  },
  ['Ironclaw'] = {
    {name='Ironclaw', count=8, confidence=1.00, sample='{"item", text=[[**Ironclaw (Isle of Dorn)**]], guide="Profession Guides\\Mining\\Farming Guides\\Ironclaw (Isle of Dorn)"},'},
  },
  ['Aqirite'] = {
    {name='Aqirite', count=8, confidence=1.00, sample='{"item", text=[[**Aqirite (Azj-Kahet)**]], guide="Profession Guides\\Mining\\Farming Guides\\Aqirite (Azj-Kahet)"},'},
  },
  ['Leather'] = {
    {name='Leather', count=32, confidence=1.00, sample='{"item", text=[[**Stormcharged Leather (Isle of Dorn)**]], guide="Profession Guides\\Skinning\\Farming Guides\\Stormcharged Leather (Isle of Dorn)"},'},
  },
  ['Chitin'] = {
    {name='Chitin', count=5, confidence=1.00, sample='{"item", text=[[**Gloom Chitin (Azj-Kahet)**]], guide="Profession Guides\\Skinning\\Farming Guides\\Gloom Chitin (Azj-Kahet)"},'},
  },
  ['Carapace'] = {
    {name='Carapace', count=4, confidence=0.80, sample='{"item", text=[[**Sunless Carapace (Azj-Kahet)**]], guide="Profession Guides\\Skinning\\Farming Guides\\Sunless Carapace (Azj-Kahet)"},'},
  },
  ['Understanding'] = {
    {name='Understanding', count=2, confidence=0.40, sample='{"text", text=[[Zereth Mortis introduces a new crafting system called Protoform Synthesis that allows you to craft Battle Pets and Mounts.|n|nAfter you complete Chapter 3 of the Zereth Mortis campaign you will gain access to the Cypher Research Console. To unlock Protoform Synthesis, you will need to use the Dealic section of the Cypher Research Console to research the talents Dealic Understanding (for crafting Battle Pets) and Sopranian Understanding (for crafting Mounts).|n|nYou can then use the following guides to obtain schematics which teach you how to craft different creatures.|n|nNote: Some aspects of this content is time-gated until week 4 of the Patch 9.2 release.]]},'},
  },
  ['Goblins'] = {
    {name='Goblins', count=1, confidence=0.20, sample='{"text", text=[[You can now obtain Heritage Armor for Worgen (Alliance only) and Goblins (Horde only).]]},'},
  },
  ['GameTooltip_AddQuest'] = {
    {name='GameTooltip_AddQuest', count=5, confidence=1.00, sample='GameTooltip_AddQuest(row)'},
  },
  ['OnLegendPinMouseEnter'] = {
    {name='OnLegendPinMouseEnter', count=1, confidence=0.20, sample='function row:OnLegendPinMouseEnter() return end'},
  },
  ['SetAbsMonth'] = {
    {name='C_Calendar.SetAbsMonth', count=1, confidence=0.20, sample='C_Calendar.SetAbsMonth(currentCalendarTime.month, currentCalendarTime.year);'},
  },
  ['OpenCalendar'] = {
    {name='C_Calendar.OpenCalendar', count=1, confidence=0.20, sample='C_Calendar.OpenCalendar()'},
  },
  ['GetWorldEvents'] = {
    {name='GetWorldEvents', count=4, confidence=0.80, sample='self:GetWorldEvents()'},
  },
  ['GetMonthInfo'] = {
    {name='C_Calendar.GetMonthInfo', count=1, confidence=0.20, sample='local currentmonth = C_Calendar.GetMonthInfo()'},
  },
  ['UpdateTimes'] = {
    {name='UpdateTimes', count=6, confidence=1.00, sample='self:UpdateTimes()'},
  },
  ['RequestCallings'] = {
    {name='C_CovenantCallings.RequestCallings', count=1, confidence=0.20, sample='C_CovenantCallings.RequestCallings()'},
  },
  ['GetMapTable'] = {
    {name='C_ChallengeMode.GetMapTable', count=2, confidence=0.40, sample='C_ChallengeMode.GetMapTable()'},
  },
  ['RequestCurrentAffixes'] = {
    {name='C_MythicPlus.RequestCurrentAffixes', count=1, confidence=0.20, sample='C_MythicPlus.RequestCurrentAffixes()'},
  },
  ['RequestMapInfo'] = {
    {name='C_MythicPlus.RequestMapInfo', count=1, confidence=0.20, sample='C_MythicPlus.RequestMapInfo()'},
  },
  ['GetCurrentAffixes'] = {
    {name='C_MythicPlus.GetCurrentAffixes', count=1, confidence=0.20, sample='local affixes = C_MythicPlus.GetCurrentAffixes()'},
  },
  ['GetAffixInfo'] = {
    {name='C_ChallengeMode.GetAffixInfo', count=2, confidence=0.40, sample='local name,desc,texture = C_ChallengeMode.GetAffixInfo(aff.id)'},
    {name='GetAffixInfo', count=1, confidence=0.20, sample='local affixName, desc, texture = GetAffixInfo(i)'},
  },
  ['CreateFromSpellID'] = {
    {name='CreateFromSpellID', count=2, confidence=0.40, sample='local sdata = Spell:CreateFromSpellID(spell)'},
  },
  ['GetSpellName'] = {
    {name='GetSpellName', count=1, confidence=0.20, sample='local sname = sdata:GetSpellName()'},
  },
  ['GetSpellDescription'] = {
    {name='GetSpellDescription', count=2, confidence=0.40, sample='local sdesc = sdata:GetSpellDescription()'},
    {name='C_Spell.GetSpellDescription', count=2, confidence=0.40, sample='local desc = C_Spell.GetSpellDescription and C_Spell.GetSpellDescription(spellId) or GetSpellDescription(spellId)'},
  },
  ['ContinueOnSpellLoad'] = {
    {name='ContinueOnSpellLoad', count=1, confidence=0.20, sample='spell:ContinueOnSpellLoad(function() widget:Update() end)'},
  },
  ['CreateGraphLine'] = {
    {name='CreateGraphLine', count=8, confidence=1.00, sample='self.graph = Graph:CreateGraphLine("ZGVWidgetTokenGraph", self.frame , "BOTTOM", "BOTTOM", 0,25,self.widthpx,self.heightpx/2)'},
  },
  ['SetXAxis'] = {
    {name='SetXAxis', count=14, confidence=1.00, sample=':SetXAxis(0, 48)'},
  },
  ['SetDrawGrid'] = {
    {name='SetDrawGrid', count=4, confidence=0.80, sample=':SetDrawGrid(false)'},
  },
  ['SetUseHotspots'] = {
    {name='SetUseHotspots', count=4, confidence=0.80, sample=':SetUseHotspots(false)'},
  },
  ['SetGridSpacing'] = {
    {name='SetGridSpacing', count=15, confidence=1.00, sample=':SetGridSpacing(12, 500000)'},
  },
  ['SetGridColor'] = {
    {name='SetGridColor', count=10, confidence=1.00, sample=':SetGridColor({0.5, 0.5, 0.5, 0.5})'},
  },
  ['SetAxisDrawing'] = {
    {name='SetAxisDrawing', count=10, confidence=1.00, sample=':SetAxisDrawing(true, true)'},
  },
  ['SetAxisColor'] = {
    {name='SetAxisColor', count=10, confidence=1.00, sample=':SetAxisColor({1.0, 1.0, 1.0, 1.0})'},
  },
  ['SetAutoScale'] = {
    {name='SetAutoScale', count=14, confidence=1.00, sample=':SetAutoScale(true)'},
  },
  ['SetYAxis'] = {
    {name='SetYAxis', count=10, confidence=1.00, sample=':SetYAxis(minv, maxv)'},
  },
  ['AddDataSeries'] = {
    {name='AddDataSeries', count=15, confidence=1.00, sample=':AddDataSeries(self.values,{1.0, 0.0, 0.0, 0.8})'},
  },
  ['SetUseHotlines'] = {
    {name='SetUseHotlines', count=3, confidence=0.60, sample=':SetUseHotlines(true)'},
  },
  ['SetYLabels'] = {
    {name='SetYLabels', count=4, confidence=0.80, sample=':SetYLabels(true,false)'},
  },
  ['SetXLabels'] = {
    {name='SetXLabels', count=3, confidence=0.60, sample=':SetXLabels(false,true)'},
  },
  ['SetYLabelsFormatter'] = {
    {name='SetYLabelsFormatter', count=3, confidence=0.60, sample=':SetYLabelsFormatter(ylabelformatter)'},
  },
  ['SetXLabelsFormatter'] = {
    {name='SetXLabelsFormatter', count=3, confidence=0.60, sample=':SetXLabelsFormatter(xlabelformatter)'},
  },
  ['GetCurrentMarketPrice'] = {
    {name='C_WowTokenPublic.GetCurrentMarketPrice', count=2, confidence=0.40, sample='local price = C_WowTokenPublic.GetCurrentMarketPrice()'},
  },
  ['UpdateMarketPrice'] = {
    {name='C_WowTokenPublic.UpdateMarketPrice', count=1, confidence=0.20, sample='C_WowTokenPublic.UpdateMarketPrice()'},
  },
  ['GetCurrentRegion'] = {
    {name='GetCurrentRegion', count=3, confidence=0.60, sample='local region = GetCurrentRegion()'},
  },
  ['GetServerTime'] = {
    {name='GetServerTime', count=8, confidence=1.00, sample='local timer = self.interval - ((GetServerTime() - self.firstEvent) % self.interval)'},
  },
  ['UpdateCurrentDay'] = {
    {name='UpdateCurrentDay', count=4, confidence=0.80, sample='self:UpdateCurrentDay()'},
  },
  ['ShowRange'] = {
    {name='ShowRange', count=2, confidence=0.40, sample=':SetScript("OnClick",function() self:ShowRange() end)'},
  },
  ['CreateGraphPieChart'] = {
    {name='CreateGraphPieChart', count=5, confidence=1.00, sample='self.todaygraph = Graph:CreateGraphPieChart("ZGVWidgetGoldGraphPie", self.popup , "BOTTOM", "BOTTOM", 0,100,self.popup:GetWidth()/2,(self.popup:GetHeight())/2)'},
  },
  ['GetHistory'] = {
    {name='GetHistory', count=4, confidence=0.80, sample='local startmoney,endmoney,gain,loss = self:GetHistory(0)'},
  },
  ['AddPie'] = {
    {name='AddPie', count=10, confidence=1.00, sample=':AddPie(gainper*100, {0.0, 1.0, 0.0})'},
  },
  ['CompletePie'] = {
    {name='CompletePie', count=5, confidence=1.00, sample=':CompletePie({0.2, 0.2, 1.0})'},
  },
  ['HideLines'] = {
    {name='HideLines', count=19, confidence=1.00, sample=':HideLines(self.todaygraph)'},
  },
  ['AdjustTimeByDays'] = {
    {name='C_DateAndTime.AdjustTimeByDays', count=1, confidence=0.20, sample='local timeobject = C_DateAndTime.AdjustTimeByDays(timeobjectnow,offset)'},
  },
  ['UpdateMoney'] = {
    {name='UpdateMoney', count=2, confidence=0.40, sample='function widget:UpdateMoney()'},
  },
  ['PrepareResults'] = {
    {name='PrepareResults', count=11, confidence=1.00, sample=':SetScript("OnShow",function() self:PrepareResults() end)'},
  },
  ['ShowCharacters'] = {
    {name='ShowCharacters', count=2, confidence=0.40, sample=':SetScript("OnClick",function() self:ShowCharacters() end)'},
  },
  ['ShowModes'] = {
    {name='ShowModes', count=2, confidence=0.40, sample=':SetScript("OnClick",function() self:ShowModes() end)'},
  },
  ['BattlePetToolTip_ShowLink'] = {
    {name='BattlePetToolTip_ShowLink', count=1, confidence=0.20, sample='BattlePetToolTip_ShowLink(row.item.link)'},
  },
  ['SwitchMode'] = {
    {name='SwitchMode', count=2, confidence=0.40, sample='self:SwitchMode(data)'},
  },
  ['Reagent'] = {
    {name='Reagent', count=1, confidence=0.20, sample='[5] = 6,  -- Reagent (obsolete)'},
  },
  ['Projectile'] = {
    {name='Projectile', count=1, confidence=0.20, sample='[6] = 7,  -- Projectile (obsolete)'},
  },
  ['Money'] = {
    {name='Money', count=1, confidence=0.20, sample='[10] = 11, -- Money (obsolete)'},
  },
  ['Quiver'] = {
    {name='Quiver', count=1, confidence=0.20, sample='[11] = 12, -- Quiver (obsolete)'},
  },
  ['Key'] = {
    {name='Key', count=1, confidence=0.20, sample='[13] = 14, -- Key  (obsolete)'},
  },
  ['Permanent'] = {
    {name='Permanent', count=1, confidence=0.20, sample='[14] = 15, -- Permanent  (obsolete)'},
  },
  ['NewLibrary'] = {
    {name='NewLibrary', count=89, confidence=1.00, sample='local AceConsole, oldminor = LibStub:NewLibrary(MAJOR, MINOR)'},
  },
  ['ChatFrame'] = {
    {name='ChatFrame', count=2, confidence=0.40, sample='--- Print to DEFAULT_CHAT_FRAME or given ChatFrame (anything with an .AddMessage function)'},
  },
  ['Formatted'] = {
    {name='Formatted', count=1, confidence=0.20, sample='--- Formatted (using format()) print to DEFAULT_CHAT_FRAME or given ChatFrame (anything with an .AddMessage function)'},
  },
  ['Printf'] = {
    {name='Printf', count=1, confidence=0.20, sample='function AceConsole:Printf(...)'},
  },
  ['RegisterChatCommand'] = {
    {name='RegisterChatCommand', count=4, confidence=0.80, sample='function AceConsole:RegisterChatCommand( command, func, persist )'},
    {name='AceConsole.RegisterChatCommand', count=1, confidence=0.20, sample='if AceConsole.RegisterChatCommand(self, slashcmd, function(input)'},
  },
  ['UnregisterChatCommand'] = {
    {name='UnregisterChatCommand', count=2, confidence=0.40, sample='function AceConsole:UnregisterChatCommand( command )'},
  },
  ['Iterator'] = {
    {name='Iterator', count=1, confidence=0.20, sample='-- @return Iterator (pairs) over all commands'},
  },
  ['IterateChatCommands'] = {
    {name='IterateChatCommands', count=1, confidence=0.20, sample='function AceConsole:IterateChatCommands() return pairs(AceConsole.commands) end'},
  },
  ['GetArgs'] = {
    {name='GetArgs', count=2, confidence=0.40, sample='function AceConsole:GetArgs(str, numargs, startpos)'},
  },
  ['OnEmbedEnable'] = {
    {name='OnEmbedEnable', count=1, confidence=0.20, sample='function AceConsole:OnEmbedEnable( target )'},
  },
  ['OnEmbedDisable'] = {
    {name='OnEmbedDisable', count=11, confidence=1.00, sample='function AceConsole:OnEmbedDisable( target )'},
  },
  ['Remove'] = {
    {name='Remove', count=7, confidence=1.00, sample='function NodeSet:Remove(node)'},
  },
  ['GetCheapest'] = {
    {name='GetCheapest', count=1, confidence=0.20, sample='function NodeSet:GetCheapest()'},
  },
  ['Length'] = {
    {name='Length', count=4, confidence=0.80, sample='function NodeSet:Length()'},
  },
  ['InterfaceWithLib'] = {
    {name='InterfaceWithLib', count=8, confidence=1.00, sample='function NodeSet:InterfaceWithLib(lib)'},
  },
  ['AddNeigh'] = {
    {name='AddNeigh', count=16, confidence=1.00, sample='function Node:AddNeigh(node,meta)'},
  },
  ['RemoveNeigh'] = {
    {name='RemoveNeigh', count=2, confidence=0.40, sample='function Node:RemoveNeigh(node)'},
  },
  ['IterNeighs'] = {
    {name='IterNeighs', count=6, confidence=1.00, sample='function Node:IterNeighs()'},
  },
  ['RemoveNeighType'] = {
    {name='RemoveNeighType', count=2, confidence=0.40, sample='function LibRover_Node:RemoveNeighType(type1,type2,type3)'},
  },
  ['GetNeigh'] = {
    {name='GetNeigh', count=1, confidence=0.20, sample='function LibRover_Node:GetNeigh(node,num)'},
  },
  ['DoLinkage'] = {
    {name='DoLinkage', count=5, confidence=1.00, sample='function LibRover_Node:DoLinkage(n2,dryrun)'},
  },
  ['CanFlyTo'] = {
    {name='CanFlyTo', count=5, confidence=1.00, sample='canfly,reasonfly = n1:CanFlyTo(n2,dryrun)'},
  },
  ['CanWalkTo'] = {
    {name='CanWalkTo', count=4, confidence=0.80, sample='canwalk,reasonwalk,penalty = n1:CanWalkTo(n2,dryrun)'},
  },
  ['GetActionTitle'] = {
    {name='GetActionTitle', count=3, confidence=0.60, sample='function LibRover_Node:GetActionTitle(prevnode,nextnode)'},
  },
  ['FromTo'] = {
    {name='FromTo', count=6, confidence=1.00, sample='local function FromTo(strfrom,strto)'},
  },
  ['MapName'] = {
    {name='MapName', count=16, confidence=1.00, sample='return ("%s/%s border"):format(MapName(self),MapName(self.border or self.ms and next(self.ms)))'},
    {name='Lib.MapName', count=1, confidence=0.20, sample='local ret = ("[%d] %s\"|cffddddee%s|r\" = |cffddeedd%s|r/%d (%d) |cffddeedd%.1f|r,|cffddeedd%.1f|r [|cffeedddd%s|r]"):format(self.num, (self.id and "@"..self.id.." " or ""), self:GetText() or "\"#"..self.num.."\"", Lib.MapName(self.m), self.f, self.m, self.x*100,self.y*100, stype)'},
  },
  ['IsTaxiKnown'] = {
    {name='IsTaxiKnown', count=8, confidence=1.00, sample='function LibRover_Node:IsTaxiKnown()'},
  },
  ['GetMapLevels'] = {
    {name='C_Map.GetMapLevels', count=3, confidence=0.60, sample='elseif (self.level and ZGV:GetPlayerPreciseLevel()<self.level) or (not C_Map.GetMapLevels(self.m) or C_Map.GetMapLevels(self.m)>ZGV:GetPlayerPreciseLevel()+5) then return false,"|cffff0000unavailable (high lvl)|r",false'},
  },
  ['GetAngleTo'] = {
    {name='GetAngleTo', count=3, confidence=0.60, sample='function LibRover_Node:GetAngleTo(node2)'},
  },
  ['Lib_GetDist'] = {
    {name='Lib_GetDist', count=1, confidence=0.20, sample='local dist,xd,yd = Lib_GetDist(self,node2)'},
  },
  ['Lib_IsSegmentWalled'] = {
    {name='Lib_IsSegmentWalled', count=1, confidence=0.20, sample='local walled,_,_,penalty = Lib_IsSegmentWalled(n1,n2)'},
  },
  ['CanCross'] = {
    {name='CanCross', count=3, confidence=0.60, sample='if Lib.greenborders:CanCross(n1_m,n2_m) then return true,debug and "greenborder "..n1_m.." -> "..n2_m, penalty end'},
  },
  ['HasGreenBorder'] = {
    {name='HasGreenBorder', count=3, confidence=0.60, sample='if n1.regionobj and n1.regionobj:HasGreenBorder(n2_m) then return true, debug and "region greenborder region "..n1.region.." -> "..n2_m, penalty end'},
  },
  ['Cleft'] = {
    {name='Cleft', count=3, confidence=0.60, sample='if (m==504 and self.f==2)  -- Orgri or Dala  -- 2015-07-27 sinus: CAN fly in Orgri Cleft (321/2) for some time now.'},
  },
  ['CanConnectTo'] = {
    {name='CanConnectTo', count=1, confidence=0.20, sample='function LibRover_Node:CanConnectTo(dest)'},
  },
  ['AssignRegion'] = {
    {name='AssignRegion', count=4, confidence=0.80, sample='function LibRover_Node:AssignRegion(regionobj)'},
  },
  ['AssignSpecialMap'] = {
    {name='AssignSpecialMap', count=2, confidence=0.40, sample='function LibRover_Node:AssignSpecialMap()'},
  },
  ['GetDebugNeighs'] = {
    {name='GetDebugNeighs', count=1, confidence=0.20, sample='function LibRover_Node:GetDebugNeighs()'},
  },
  ['CacheMaxSpeeds'] = {
    {name='CacheMaxSpeeds', count=2, confidence=0.40, sample='function LibRover_Node:CacheMaxSpeeds()'},
  },
  ['NeighbourhoodCache_Localize'] = {
    {name='NeighbourhoodCache_Localize', count=2, confidence=0.40, sample='function LibRover_Node:NeighbourhoodCache_Localize()'},
  },
  ['NeighbourhoodCache_Kill'] = {
    {name='NeighbourhoodCache_Kill', count=3, confidence=0.60, sample='function LibRover_Node:NeighbourhoodCache_Kill()'},
  },
  ['Author'] = {
    {name='Author', count=5, confidence=1.00, sample='Author(s): sinus (sinus@sinpi.net)'},
  },
  ['TryBZL'] = {
    {name='TryBZL', count=19, confidence=1.00, sample='local function TryBZL(text)'},
  },
  ['TranslateWorldMapPosition'] = {
    {name='TranslateWorldMapPosition', count=2, confidence=0.40, sample='local x,y = Astrolabe:TranslateWorldMapPosition( lam, laf, lax, lay, m, f )'},
  },
  ['Arathi'] = {
    {name='Arathi', count=1, confidence=0.20, sample='[BIT_NORTH]={MAPENUM["TIRISFALGLADES"],MAPENUM["UNDERCITY"],MAPENUM["WESTERNPLAGUELANDS"],MAPENUM["EASTERNPLAGUELANDS"],MAPENUM["SILVERPINEFOREST"],MAPENUM["HILLSBRADFOOTHILLS"],MAPENUM["ARATHIHIGHLANDS"],MAPENUM["THEHINTERLANDS"]}, --northmost, down to Arathi (common)'},
  },
  ['AddNode'] = {
    {name='AddNode', count=16, confidence=1.00, sample='local function AddNode(node,dontlink)'},
  },
  ['DoLinkage_in_scope'] = {
    {name='DoLinkage_in_scope', count=4, confidence=0.80, sample='local function DoLinkage_in_scope(scope)'},
  },
  ['ParseFullNode'] = {
    {name='ParseFullNode', count=1, confidence=0.20, sample='local function ParseFullNode(text)'},
  },
  ['ParseMapXY'] = {
    {name='ParseMapXY', count=2, confidence=0.40, sample='local m1,x1,y1 = ParseMapXY(mxy1)'},
  },
  ['Contains'] = {
    {name='Contains', count=3, confidence=0.60, sample='for ri,region in ipairs(self) do if region:Contains(node) then node:AssignRegion(region) break end end'},
  },
  ['AddNewRegion'] = {
    {name='AddNewRegion', count=2, confidence=0.40, sample='function Lib.NodeRegions:AddNewRegion(data)'},
  },
  ['B'] = {
    {name='B', count=2, confidence=0.40, sample='-- Intersect segments A (x1,y1 : x2,y2) and B (x1,y1 : x2,y2).'},
  },
  ['IsSegmentWalledN'] = {
    {name='Lib.IsSegmentWalledN', count=1, confidence=0.20, sample='function Lib.IsSegmentWalledN(n1,n2)'},
  },
  ['IsSegmentWalled'] = {
    {name='Lib.IsSegmentWalled', count=2, confidence=0.40, sample='return Lib.IsSegmentWalled(Lib.nodes.all[n1],Lib.nodes.all[n2])'},
  },
  ['HandleSpellsAndItems'] = {
    {name='HandleSpellsAndItems', count=3, confidence=0.60, sample='local function HandleSpellsAndItems(node,link)'},
  },
  ['ParseDataCond'] = {
    {name='ParseDataCond', count=4, confidence=0.80, sample='local function ParseDataCond(data)'},
  },
  ['AddError'] = {
    {name='AddError', count=6, confidence=1.00, sample='local function AddError(fmt,...)'},
  },
  ['SmartAddNode'] = {
    {name='SmartAddNode', count=13, confidence=1.00, sample='--assert(n1,"No coords in SmartAddNode(\""..text.."\")")'},
  },
  ['AddMap'] = {
    {name='AddMap', count=2, confidence=0.40, sample='Lib.SpecialMapNodeData:AddMap(Lib.data.MapIDsByName[data.map],data.floor or 0,data.extra)'},
  },
  ['InitializeTaxis'] = {
    {name='InitializeTaxis', count=4, confidence=0.80, sample='local function InitializeTaxis(dontlink)'},
  },
  ['RemoveUselessWalkLinks'] = {
    {name='RemoveUselessWalkLinks', count=2, confidence=0.40, sample='local function RemoveUselessWalkLinks()'},
  },
  ['Sha2Data'] = {
    {name='Sha2Data', count=2, confidence=0.40, sample='--Lib:Sha2Data()'},
  },
  ['GetCurrentMapLevelRange'] = {
    {name='GetCurrentMapLevelRange', count=2, confidence=0.40, sample='--Lib.MapLevels[770]=84 -- 770 is a phase in Twlight Highlands and it returns 0 for GetCurrentMapLevelRange() this is a fix for that since it breaks the taxi system.'},
  },
  ['FixRemapData'] = {
    {name='FixRemapData', count=2, confidence=0.40, sample='Lib:FixRemapData(Lib.data.RemapData)'},
  },
  ['ProcessBakedNeighbourCache'] = {
    {name='ProcessBakedNeighbourCache', count=2, confidence=0.40, sample='Lib:ProcessBakedNeighbourCache()  -- takes about 0.17s'},
  },
  ['StopStartup'] = {
    {name='StopStartup', count=4, confidence=0.80, sample='function Lib:StopStartup()'},
  },
  ['ShowStartupSummary'] = {
    {name='ShowStartupSummary', count=2, confidence=0.40, sample='if ZGV.db.profile.debug then self:ShowStartupSummary() end'},
  },
  ['RecordVindicaar'] = {
    {name='RecordVindicaar', count=2, confidence=0.40, sample='--Lib:RecordVindicaar() --use realtime map check now'},
  },
  ['GetPlayerPos'] = {
    {name='GetPlayerPos', count=1, confidence=0.20, sample='local function GetPlayerPos()'},
  },
  ['GetCurrentPlayerPosition'] = {
    {name='GetCurrentPlayerPosition', count=1, confidence=0.20, sample='local m,f,x,y = Astrolabe:GetCurrentPlayerPosition()'},
  },
  ['GetNearestTaxi'] = {
    {name='GetNearestTaxi', count=1, confidence=0.20, sample='function Lib:GetNearestTaxi()'},
  },
  ['ComputeDistance'] = {
    {name='ComputeDistance', count=3, confidence=0.60, sample='local dist = Astrolabe:ComputeDistance(m,f,x,y,node.m,node.f,node.x,node.y)'},
  },
  ['ImportTaxis'] = {
    {name='ImportTaxis', count=4, confidence=0.80, sample='function Lib:ImportTaxis(taxiset)'},
  },
  ['ImportBorders'] = {
    {name='ImportBorders', count=2, confidence=0.40, sample='function Lib:ImportBorders()'},
  },
  ['SetupInitialQuickTravel'] = {
    {name='SetupInitialQuickTravel', count=3, confidence=0.60, sample='function Lib:SetupInitialQuickTravel(startnode)'},
  },
  ['GetVindicaarPosition'] = {
    {name='GetVindicaarPosition', count=2, confidence=0.40, sample='bind = bind..", "..Lib:GetVindicaarPosition()'},
  },
  ['FindBindLocation'] = {
    {name='FindBindLocation', count=2, confidence=0.40, sample='local function FindBindLocation(bind)'},
  },
  ['FindGarrisonBindLocation'] = {
    {name='FindGarrisonBindLocation', count=2, confidence=0.40, sample='local function FindGarrisonBindLocation(silent)'},
    {name='Lib.FindGarrisonBindLocation', count=1, confidence=0.20, sample='local inn = Lib.FindGarrisonBindLocation and Lib.FindGarrisonBindLocation("silent")'},
  },
  ['PredictWhistle'] = {
    {name='PredictWhistle', count=4, confidence=0.80, sample='elseif dest=="_TAXIWHISTLE" then  dest = self.TaxiWhistlePredictor:PredictWhistle()'},
  },
  ['IsUsableItem'] = {
    {name='C_Item.IsUsableItem', count=2, confidence=0.40, sample='valid = valid or (C_Item.GetItemCount(port.item)>0 and C_Item.IsUsableItem(port.item)) -- item owned'},
  },
  ['GetGlyphSocketInfo'] = {
    {name='GetGlyphSocketInfo', count=1, confidence=0.20, sample='local enabled, glyphType, glyphTooltipIndex, glyphSpell, icon = GetGlyphSocketInfo(i)'},
  },
  ['Lerp'] = {
    {name='Lerp', count=14, confidence=1.00, sample='local raritycost = 0--Lerp(rarity_min,rarity_max,1-Lib:GetCFG("blow_item_cd_ratio")) --30m cd = 25 extra cost.'},
  },
  ['GetMoleLocation'] = {
    {name='GetMoleLocation', count=2, confidence=0.40, sample='local mole = Lib.MoleMachineHandler:GetMoleLocation()'},
  },
  ['GetDestinations'] = {
    {name='GetDestinations', count=2, confidence=0.40, sample='local destinations = Lib.MoleMachineHandler:GetDestinations()'},
  },
  ['ClearQueue'] = {
    {name='ClearQueue', count=1, confidence=0.20, sample='function Lib:ClearQueue()'},
  },
  ['DelayFindPath'] = {
    {name='DelayFindPath', count=1, confidence=0.20, sample='function Lib:DelayFindPath()'},
  },
  ['IsDestinationImpossible'] = {
    {name='IsDestinationImpossible', count=3, confidence=0.60, sample='function Lib:IsDestinationImpossible(mymap,destmap)'},
  },
  ['GMNBID'] = {
    {name='GMNBID', count=1, confidence=0.20, sample='local title=destmap~=899 and ZGV.GetMapNameByID(destmap) or "Arena of Annilhilation" --TODO Localize Area of Annilhilation; GMNBID(899)=="Proving Grounds"...'},
  },
  ['ReportFail'] = {
    {name='ReportFail', count=5, confidence=1.00, sample='self:ReportFail(GetPlayerFacing() and "Current location unknown.")'},
  },
  ['InitializePath__RemoveStartEnd_Threaded'] = {
    {name='InitializePath__RemoveStartEnd_Threaded', count=2, confidence=0.40, sample='function Lib:InitializePath__RemoveStartEnd_Threaded()'},
  },
  ['InitializePath_Threaded'] = {
    {name='InitializePath_Threaded', count=2, confidence=0.40, sample='function Lib:InitializePath_Threaded() --called in as part of StepForever_Threaded only.'},
  },
  ['IsSubmerged'] = {
    {name='IsSubmerged', count=1, confidence=0.20, sample='self.startnode.submerged=IsSubmerged()'},
  },
  ['RebuildNodes'] = {
    {name='RebuildNodes', count=1, confidence=0.20, sample='self:RebuildNodes()'},
  },
  ['StepForever_Threaded'] = {
    {name='StepForever_Threaded', count=1, confidence=0.20, sample='function Lib:StepForever_Threaded()'},
  },
  ['StepPath'] = {
    {name='StepPath', count=3, confidence=0.60, sample='code,ret = self:StepPath()'},
  },
  ['RemoveCheapest'] = {
    {name='RemoveCheapest', count=2, confidence=0.40, sample='local current = self.opennodes:RemoveCheapest()'},
  },
  ['FadingFrame_Show'] = {
    {name='FadingFrame_Show', count=2, confidence=0.40, sample='FadingFrame_Show( ZoneTextFrame )'},
  },
  ['PlayerHasKhazAlgarFlightMasterAchievement'] = {
    {name='PlayerHasKhazAlgarFlightMasterAchievement', count=3, confidence=0.60, sample='and LibTaxi:PlayerHasKhazAlgarFlightMasterAchievement() then -- flight time was 25% reduced'},
  },
  ['BubbleUp'] = {
    {name='BubbleUp', count=2, confidence=0.40, sample='self.opennodes:BubbleUp(neigh)'},
  },
  ['Cleanup'] = {
    {name='Cleanup', count=10, confidence=1.00, sample='function Lib:Cleanup()'},
    {name='Details222.TimeMachine.Cleanup', count=1, confidence=0.20, sample='function Details222.TimeMachine.Cleanup()'},
  },
  ['AngleBetween'] = {
    {name='AngleBetween', count=5, confidence=1.00, sample='local function AngleBetween(n1,n2,n3)'},
  },
  ['BuildResults'] = {
    {name='BuildResults', count=3, confidence=0.60, sample='function Lib:BuildResults(endnode)'},
  },
  ['ReportPath'] = {
    {name='ReportPath', count=4, confidence=0.80, sample='function Lib:ReportPath(endnode)'},
  },
  ['ReportArrival'] = {
    {name='ReportArrival', count=2, confidence=0.40, sample='if getdist(results[1],results[2])<ZGV.Pointer:GetDefaultStepDist() then return self:ReportArrival() end'},
  },
  ['GetGlidingInfo'] = {
    {name='C_PlayerInfo.GetGlidingInfo', count=1, confidence=0.20, sample='local isGliding = C_PlayerInfo and C_PlayerInfo.GetGlidingInfo and C_PlayerInfo.GetGlidingInfo()'},
  },
  ['HasBuff'] = {
    {name='Lib.HasBuff', count=1, confidence=0.20, sample='function Lib.HasBuff(name,id)'},
  },
  ['UnitBuff'] = {
    {name='UnitBuff', count=4, confidence=0.80, sample='local name, _, _, _, _, _, _, _, _, _, spellID = UnitBuff("player",name)'},
  },
  ['HasAchievement'] = {
    {name='Lib.HasAchievement', count=1, confidence=0.20, sample='function Lib.HasAchievement(id)'},
    {name='HasAchievement', count=2, confidence=0.40, sample='local A_UNLOCKING_THE_SECRETS = HasAchievement(15514)'},
    {name='LibRover.HasAchievement', count=5, confidence=1.00, sample='"Dun Morogh 02.0,28.0 -x- Kelp'thar Forest 71.0,63.0 {mode:FLY} {cond:LibRover.HasAchievement(890)}", -- anyone can fly this one, really'},
  },
  ['GetConfigIDByTreeID'] = {
    {name='C_Traits.GetConfigIDByTreeID', count=1, confidence=0.20, sample='local configID = C_Traits.GetConfigIDByTreeID(treeID)'},
  },
  ['GetTreeCurrencyInfo'] = {
    {name='C_Traits.GetTreeCurrencyInfo', count=1, confidence=0.20, sample='local treeCurrencyInfo = configID and C_Traits.GetTreeCurrencyInfo(configID, 1115, true)'},
  },
  ['Outland'] = {
    {name='Outland', count=9, confidence=1.00, sample='["Outland"] = { groundspeed + max(BONUS_GUILDPERK_MOUNTUP), dragonspeed_nerfed or flyspeed, flyspeed }, --Outland (flying)'},
  },
  ['CanFlyAt'] = {
    {name='CanFlyAt', count=2, confidence=0.40, sample='function Lib:CanFlyAt(map)  -- unused?'},
  },
  ['HasFlyingMount'] = {
    {name='HasFlyingMount', count=2, confidence=0.40, sample='return Lib.maxspeedinzone[map][3]>0 and (has_flying_mount or Lib:HasFlyingMount())'},
  },
  ['GetNumDisplayedMounts'] = {
    {name='C_MountJournal.GetNumDisplayedMounts', count=2, confidence=0.40, sample='C_MountJournal.GetNumDisplayedMounts()'},
  },
  ['GetDisplayedMountInfo'] = {
    {name='C_MountJournal.GetDisplayedMountInfo', count=1, confidence=0.20, sample='local mountID = select(12,C_MountJournal.GetDisplayedMountInfo(i))'},
  },
  ['UnitVehicleSkin'] = {
    {name='UnitVehicleSkin', count=1, confidence=0.20, sample='and UnitVehicleSkin("player")=="INTERFACE\\PLAYERACTIONBARALT\\NATURAL.BLP"'},
  },
  ['IsVindicaarIn'] = {
    {name='IsVindicaarIn', count=4, confidence=0.80, sample='function Lib:IsVindicaarIn(name)  -- map ids fixed for bfa'},
  },
  ['ShowAllNodes'] = {
    {name='ShowAllNodes', count=4, confidence=0.80, sample='function Lib:ShowAllNodes(nodetype,do_spoo)'},
  },
  ['DEV_ShowAllWalls'] = {
    {name='DEV_ShowAllWalls', count=3, confidence=0.60, sample='function Lib:DEV_ShowAllWalls()'},
  },
  ['IsWintergraspControlled'] = {
    {name='IsWintergraspControlled', count=5, confidence=1.00, sample='function Lib:IsWintergraspControlled()'},
  },
  ['GetNumMapLandmarks'] = {
    {name='GetNumMapLandmarks', count=1, confidence=0.20, sample='for i=1,GetNumMapLandmarks() do'},
  },
  ['GetMapLandmarkInfo'] = {
    {name='C_WorldMap.GetMapLandmarkInfo', count=1, confidence=0.20, sample='name,_,textureIndex,_,_ = C_WorldMap.GetMapLandmarkInfo(i);'},
    {name='GetMapLandmarkInfo', count=1, confidence=0.20, sample='name,_,textureIndex,_,_ = GetMapLandmarkInfo(i);'},
  },
  ['ShowDebugMenu'] = {
    {name='Lib.ShowDebugMenu', count=1, confidence=0.20, sample='function Lib.ShowDebugMenu(parent,but)'},
  },
  ['GetMapRectOnMap'] = {
    {name='C_Map.GetMapRectOnMap', count=1, confidence=0.20, sample='local x1,x2,y1,y2 = C_Map.GetMapRectOnMap(self.value,mapid)'},
  },
  ['DebugRegionsForPlayer'] = {
    {name='DebugRegionsForPlayer', count=2, confidence=0.40, sample='tinsert(menu,{ text = "Is player in region..?",  notCheckable=true, disabled=not Spoo or not Lib.startnode, func=function() Spoo(LibRover:DebugRegionsForPlayer()) end, tooltipTitle=(not Spoo and "|cffff0000Spoo not loaded or no start point!"), tooltipWhileDisabled=true })'},
  },
  ['AnnouncePrediction'] = {
    {name='AnnouncePrediction', count=3, confidence=0.60, sample='tinsert(menu,{ text = "Test Flight Whistle", notCheckable=true, func=function() Lib.TaxiWhistlePredictor:PredictWhistle() Lib.TaxiWhistlePredictor:AnnouncePrediction() end })'},
  },
  ['SetupFakeStartingPoint'] = {
    {name='SetupFakeStartingPoint', count=2, confidence=0.40, sample='tinsert(menu,{ text = "Use fake starting point?", isNotRadio=true, checked=self.FAKE_STARTING_POINT_SETUP or self.FAKE_STARTING_POINT, func=function() Lib:SetupFakeStartingPoint() end})'},
  },
  ['DebugNodes'] = {
    {name='DebugNodes', count=3, confidence=0.60, sample='function LibRover:DebugNodes(n1,n2,...)'},
  },
  ['FindNode'] = {
    {name='FindNode', count=5, confidence=1.00, sample='if type(n1)=="string" then n1=self:FindNode(n1)[1] end'},
  },
  ['DebugPath'] = {
    {name='DebugPath', count=1, confidence=0.20, sample='function LibRover:DebugPath(...)'},
  },
  ['DebugBanLink'] = {
    {name='DebugBanLink', count=1, confidence=0.20, sample='function LibRover:DebugBanLink(n1,n2,mode)'},
  },
  ['DumpAllNodes'] = {
    {name='DumpAllNodes', count=1, confidence=0.20, sample='function LibRover:DumpAllNodes(zone)'},
  },
  ['PathToString'] = {
    {name='PathToString', count=2, confidence=0.40, sample='function LibRover:PathToString(path)'},
  },
  ['DumpNode'] = {
    {name='DumpNode', count=1, confidence=0.20, sample='function LibRover:DumpNode(...)'},
  },
  ['UnitPosition'] = {
    {name='UnitPosition', count=7, confidence=1.00, sample='wy,wx=UnitPosition("player")'},
  },
  ['GetZoneCoordinatesFromWorld'] = {
    {name='GetZoneCoordinatesFromWorld', count=7, confidence=1.00, sample='if wx then x,y = ZGV.HBD:GetZoneCoordinatesFromWorld(wx,wy,map,false) end'},
  },
  ['RelocalizeFunctions'] = {
    {name='RelocalizeFunctions', count=1, confidence=0.20, sample='function Lib:RelocalizeFunctions(fun,fun2)'},
  },
  ['RunPrint'] = {
    {name='RunPrint', count=1, confidence=0.20, sample='function LibRover.Tests.TestProto:RunPrint()'},
  },
  ['RunTests'] = {
    {name='RunTests', count=2, confidence=0.40, sample='function LibRover.Tests:RunTests(tests,final_callback)'},
  },
  ['RunTestSet'] = {
    {name='RunTestSet', count=1, confidence=0.20, sample='function LibRover.Tests:RunTestSet(number)'},
  },
  ['FindNearestTaxis'] = {
    {name='FindNearestTaxis', count=4, confidence=0.80, sample='function TWP:FindNearestTaxis()'},
  },
  ['IsOnValidMap'] = {
    {name='IsOnValidMap', count=3, confidence=0.60, sample='if self:IsOnValidMap() then'},
  },
  ['ConfirmPrediction'] = {
    {name='ConfirmPrediction', count=2, confidence=0.40, sample='function TWP:ConfirmPrediction()'},
  },
  ['ValidDHSMap'] = {
    {name='ValidDHSMap', count=2, confidence=0.40, sample='function Lib:ValidDHSMap()'},
  },
  ['GetMapZoneNumbers'] = {
    {name='GetMapZoneNumbers', count=1, confidence=0.20, sample='local function GetMapZoneNumbers(zonename)'},
  },
  ['GetMapContinents'] = {
    {name='GetMapContinents', count=1, confidence=0.20, sample='for cont in pairs{GetMapContinents()} do'},
  },
  ['GetMapZones'] = {
    {name='GetMapZones', count=1, confidence=0.20, sample='for zone,name in pairs{GetMapZones(cont)} do'},
  },
  ['CompareNodes'] = {
    {name='CompareNodes', count=2, confidence=0.40, sample='local function CompareNodes(i,j)'},
  },
  ['CompareNodesSort'] = {
    {name='CompareNodesSort', count=1, confidence=0.20, sample='local function CompareNodesSort(node1,node2)'},
  },
  ['HeapSwimMinUp'] = {
    {name='HeapSwimMinUp', count=3, confidence=0.60, sample='local function HeapSwimMinUp(num)'},
  },
  ['SinkNodeDown'] = {
    {name='SinkNodeDown', count=2, confidence=0.40, sample='local function SinkNodeDown()'},
  },
  ['GetUIMapIDFromMapAreaId'] = {
    {name='GetUIMapIDFromMapAreaId', count=2, confidence=0.40, sample='function HBDMigrate:GetUIMapIDFromMapAreaId(mapId, floor)'},
  },
  ['GetUIMapIDFromMapFile'] = {
    {name='GetUIMapIDFromMapFile', count=1, confidence=0.20, sample='function HBDMigrate:GetUIMapIDFromMapFile(mapFile, floor)'},
  },
  ['SetupMigrationData'] = {
    {name='SetupMigrationData', count=3, confidence=0.60, sample='if not mapFileToIdMap then SetupMigrationData() end'},
  },
  ['GetLegacyMapInfo'] = {
    {name='GetLegacyMapInfo', count=1, confidence=0.20, sample='function HBDMigrate:GetLegacyMapInfo(uiMapId)'},
  },
  ['Scenario'] = {
    {name='Scenario', count=8, confidence=1.00, sample='[1277] = 1116, -- Defense of Karabor Scenario (SMV)'},
  },
  ['CreateVector2D'] = {
    {name='CreateVector2D', count=5, confidence=1.00, sample='local vector00, vector05 = CreateVector2D(0, 0), CreateVector2D(0.5, 0.5)'},
  },
  ['GetWorldPosFromMapPos'] = {
    {name='C_Map.GetWorldPosFromMapPos', count=2, confidence=0.40, sample='local instance, topLeft = C_Map.GetWorldPosFromMapPos(id, vector00)'},
  },
  ['GetXY'] = {
    {name='GetXY', count=3, confidence=0.60, sample='local top, left = topLeft:GetXY()'},
  },
  ['UpdateCurrentPosition'] = {
    {name='UpdateCurrentPosition', count=3, confidence=0.60, sample='local function UpdateCurrentPosition(instanceCheck)'},
    {name='HereBeDragons.UpdateCurrentPosition', count=1, confidence=0.20, sample='HereBeDragons.UpdateCurrentPosition()'},
  },
  ['StartUpdateTimer'] = {
    {name='StartUpdateTimer', count=2, confidence=0.40, sample='StartUpdateTimer()'},
  },
  ['UpdateTimerCallback'] = {
    {name='UpdateTimerCallback', count=1, confidence=0.20, sample='local function UpdateTimerCallback()'},
  },
  ['GetLocalizedMap'] = {
    {name='GetLocalizedMap', count=1, confidence=0.20, sample='function HereBeDragons:GetLocalizedMap(uiMapID)'},
  },
  ['GetZoneSize'] = {
    {name='GetZoneSize', count=1, confidence=0.20, sample='function HereBeDragons:GetZoneSize(uiMapID)'},
  },
  ['GetAllMapIDs'] = {
    {name='GetAllMapIDs', count=1, confidence=0.20, sample='function HereBeDragons:GetAllMapIDs()'},
  },
  ['GetWorldCoordinatesFromAzerothWorldMap'] = {
    {name='GetWorldCoordinatesFromAzerothWorldMap', count=2, confidence=0.40, sample='function HereBeDragons:GetWorldCoordinatesFromAzerothWorldMap(x, y, instance)'},
  },
  ['TranslateAzerothWorldMapCoordinates'] = {
    {name='TranslateAzerothWorldMapCoordinates', count=2, confidence=0.40, sample='local function TranslateAzerothWorldMapCoordinates(self, x, y, oZone, dZone, allowOutOfBounds)'},
  },
  ['GetUnitWorldPosition'] = {
    {name='GetUnitWorldPosition', count=1, confidence=0.20, sample='function HereBeDragons:GetUnitWorldPosition(unitId)'},
  },
  ['GetPlayerZone'] = {
    {name='GetPlayerZone', count=2, confidence=0.40, sample='function HereBeDragons:GetPlayerZone()'},
  },
  ['GetPlayerZonePosition'] = {
    {name='GetPlayerZonePosition', count=1, confidence=0.20, sample='function HereBeDragons:GetPlayerZonePosition(allowOutOfBounds)'},
  },
  ['IsLoggedIn'] = {
    {name='IsLoggedIn', count=6, confidence=1.00, sample='if IsLoggedIn() then'},
  },
  ['IsParentMap'] = {
    {name='IsParentMap', count=2, confidence=0.40, sample='local function IsParentMap(originMapId, toCheckMapId)'},
  },
  ['UpdateMinimapPins'] = {
    {name='UpdateMinimapPins', count=6, confidence=1.00, sample='local function UpdateMinimapPins(force)'},
  },
  ['GetMinimapShape'] = {
    {name='GetMinimapShape', count=2, confidence=0.40, sample='minimapShape = GetMinimapShape and minimap_shapes[GetMinimapShape() or "ROUND"]'},
  },
  ['GetViewRadius'] = {
    {name='C_Minimap.GetViewRadius', count=2, confidence=0.40, sample='mapRadius = C_Minimap.GetViewRadius()'},
  },
  ['UpdateMinimapIconPosition'] = {
    {name='UpdateMinimapIconPosition', count=2, confidence=0.40, sample='local function UpdateMinimapIconPosition()'},
  },
  ['UpdateMinimapZoom'] = {
    {name='UpdateMinimapZoom', count=2, confidence=0.40, sample='local function UpdateMinimapZoom()'},
  },
  ['FramePool_HideAndClearAnchors'] = {
    {name='FramePool_HideAndClearAnchors', count=1, confidence=0.20, sample='FramePool_HideAndClearAnchors(pinPool, pin)'},
  },
  ['OnReleased'] = {
    {name='OnReleased', count=2, confidence=0.40, sample='pin:OnReleased()'},
  },
  ['RemovePinByIcon'] = {
    {name='RemovePinByIcon', count=2, confidence=0.40, sample='function worldmapProvider:RemovePinByIcon(icon)'},
  },
  ['RemovePinsByRef'] = {
    {name='RemovePinsByRef', count=2, confidence=0.40, sample='function worldmapProvider:RemovePinsByRef(ref)'},
  },
  ['HandlePin'] = {
    {name='HandlePin', count=4, confidence=0.80, sample='self:HandlePin(icon, data)'},
  },
  ['SetScalingLimits'] = {
    {name='SetScalingLimits', count=1, confidence=0.20, sample='self:SetScalingLimits(1, 1.0, 1.2)'},
  },
  ['OnAcquired'] = {
    {name='OnAcquired', count=1, confidence=0.20, sample='function worldmapProviderPin:OnAcquired(icon, x, y, frameLevelType)'},
  },
  ['UpdateMinimap'] = {
    {name='UpdateMinimap', count=3, confidence=0.60, sample='local function UpdateMinimap()'},
  },
  ['UpdateWorldMap'] = {
    {name='UpdateWorldMap', count=2, confidence=0.40, sample='local function UpdateWorldMap()'},
  },
  ['AddMinimapIconMap'] = {
    {name='AddMinimapIconMap', count=1, confidence=0.20, sample='function pins:AddMinimapIconMap(ref, icon, uiMapID, x, y, showInParentZone, floatOnEdge)'},
  },
  ['RemoveAllMinimapIcons'] = {
    {name='RemoveAllMinimapIcons', count=1, confidence=0.20, sample='function pins:RemoveAllMinimapIcons(ref)'},
  },
  ['SetMinimapObject'] = {
    {name='SetMinimapObject', count=1, confidence=0.20, sample='function pins:SetMinimapObject(minimapObject)'},
  },
  ['AddWorldMapIconMap'] = {
    {name='AddWorldMapIconMap', count=1, confidence=0.20, sample='function pins:AddWorldMapIconMap(ref, icon, uiMapID, x, y, showFlag, frameLevel)'},
  },
  ['RemoveAllWorldMapIcons'] = {
    {name='RemoveAllWorldMapIcons', count=1, confidence=0.20, sample='function pins:RemoveAllWorldMapIcons(ref)'},
  },
  ['GetVectorToIcon'] = {
    {name='GetVectorToIcon', count=1, confidence=0.20, sample='function pins:GetVectorToIcon(icon)'},
  },
  ['C_TimerAfter'] = {
    {name='C_TimerAfter', count=4, confidence=0.80, sample='C_TimerAfter(ndelay, timer.callback)'},
  },
  ['TimerFeedback'] = {
    {name='TimerFeedback', count=4, confidence=0.80, sample='-- function MyAddOn:TimerFeedback()'},
  },
  ['CancelAllTimers'] = {
    {name='CancelAllTimers', count=4, confidence=0.80, sample='function AceTimer:CancelAllTimers()'},
  },
  ['TimeLeft'] = {
    {name='TimeLeft', count=2, confidence=0.40, sample='function AceTimer:TimeLeft(id)'},
  },
  ['GetDuration'] = {
    {name='GetDuration', count=4, confidence=0.80, sample='local duration, elapsed = timer:GetDuration(), timer:GetElapsed()'},
  },
  ['GetElapsed'] = {
    {name='GetElapsed', count=2, confidence=0.40, sample='local duration, elapsed = timer:GetDuration(), timer:GetElapsed()'},
  },
  ['IterateCZNN'] = {
    {name='IterateCZNN', count=1, confidence=0.20, sample='local function IterateCZNN(T)'},
  },
  ['CacheTaxiPoints'] = {
    {name='CacheTaxiPoints', count=4, confidence=0.80, sample='Lib:CacheTaxiPoints()'},
  },
  ['MergeData'] = {
    {name='MergeData', count=3, confidence=0.60, sample='Lib:MergeData()'},
  },
  ['MarkKnownTaxis'] = {
    {name='MarkKnownTaxis', count=5, confidence=1.00, sample='Lib:MarkKnownTaxis()'},
  },
  ['ImportTaxiDataFromGame'] = {
    {name='ImportTaxiDataFromGame', count=3, confidence=0.60, sample='Lib:ImportTaxiDataFromGame()'},
  },
  ['HookMapChange'] = {
    {name='HookMapChange', count=2, confidence=0.40, sample='Lib:HookMapChange()'},
  },
  ['HookTaxiAborts'] = {
    {name='HookTaxiAborts', count=2, confidence=0.40, sample='Lib:HookTaxiAborts()'},
  },
  ['HookTakeTaxiNode'] = {
    {name='HookTakeTaxiNode', count=2, confidence=0.40, sample='Lib:HookTakeTaxiNode()'},
  },
  ['ImportTaxiTimesFromSV'] = {
    {name='ImportTaxiTimesFromSV', count=2, confidence=0.40, sample='Lib:ImportTaxiTimesFromSV()'},
  },
  ['UpdateAntoranTaxis'] = {
    {name='UpdateAntoranTaxis', count=2, confidence=0.40, sample='function Lib:UpdateAntoranTaxis()'},
    {name='Lib.UpdateAntoranTaxis', count=1, confidence=0.20, sample='Lib.UpdateAntoranTaxis(this)'},
  },
  ['GetTaxiNodesForMap'] = {
    {name='C_TaxiMap.GetTaxiNodesForMap', count=3, confidence=0.60, sample='local nodes = C_TaxiMap.GetTaxiNodesForMap(ZONE_ARGUS_ANTORAN)'},
  },
  ['GetTaxiTripTime'] = {
    {name='GetTaxiTripTime', count=5, confidence=1.00, sample='function Lib:GetTaxiTripTime(node1,node2)'},
  },
  ['FindTaxiByNodeID'] = {
    {name='FindTaxiByNodeID', count=18, confidence=1.00, sample='local node1n=Lib:FindTaxiByNodeID(node1)  if not node1n then return false,false,"npc 1 missing" end'},
  },
  ['AbortTaxiTiming'] = {
    {name='AbortTaxiTiming', count=4, confidence=0.80, sample='function Lib:AbortTaxiTiming()'},
  },
  ['PlayerOnOffTaxi'] = {
    {name='PlayerOnOffTaxi', count=2, confidence=0.40, sample='function Lib:PlayerOnOffTaxi(ontaxi)'},
  },
  ['FlashClientIcon'] = {
    {name='FlashClientIcon', count=1, confidence=0.20, sample='if ZGV.DEV or ZGV.db.profile.flash_on_taxi_arrival then FlashClientIcon() end'},
  },
  ['DEV_ScanCurrentTaxiNPC'] = {
    {name='DEV_ScanCurrentTaxiNPC', count=2, confidence=0.40, sample='Lib:DEV_ScanCurrentTaxiNPC()'},
  },
  ['DEV_HookZygorButtons'] = {
    {name='DEV_HookZygorButtons', count=2, confidence=0.40, sample='Lib:DEV_HookZygorButtons()'},
  },
  ['HookTaxiMapPins_Delayed'] = {
    {name='HookTaxiMapPins_Delayed', count=2, confidence=0.40, sample='Lib:HookTaxiMapPins_Delayed() -- need to give FlightMap time to initialize'},
  },
  ['ScanTaxiMap'] = {
    {name='ScanTaxiMap', count=2, confidence=0.40, sample='Lib:ScanTaxiMap()'},
  },
  ['CacheRoutesAsNodeIDs'] = {
    {name='CacheRoutesAsNodeIDs', count=2, confidence=0.40, sample='Lib:CacheRoutesAsNodeIDs()'},
  },
  ['DEV_HighlightIncompletePins'] = {
    {name='DEV_HighlightIncompletePins', count=2, confidence=0.40, sample='if ZGV.DEV then Lib.HooksForFlightMapFrame:DEV_HighlightIncompletePins() end'},
  },
  ['GetNextToastToDisplay'] = {
    {name='C_EventToastManager.GetNextToastToDisplay', count=1, confidence=0.20, sample='local toastInfo = C_EventToastManager.GetNextToastToDisplay();'},
  },
  ['LearnCurrentTaxi'] = {
    {name='LearnCurrentTaxi', count=4, confidence=0.80, sample='Lib:LearnCurrentTaxi()'},
  },
  ['MarkNeightboursUnknown'] = {
    {name='MarkNeightboursUnknown', count=2, confidence=0.40, sample='Lib:MarkNeightboursUnknown(node)'},
  },
  ['MarkKnownByLevels'] = {
    {name='MarkKnownByLevels', count=2, confidence=0.40, sample='--Lib:MarkKnownByLevels() --Only needs to be ran once after the faction's information has been made available at startup'},
  },
  ['CacheTaxiNodeIDs'] = {
    {name='CacheTaxiNodeIDs', count=3, confidence=0.60, sample='function Lib:CacheTaxiNodeIDs()'},
  },
  ['GetAllBlizNodesForCurrentContinent'] = {
    {name='GetAllBlizNodesForCurrentContinent', count=5, confidence=1.00, sample='function Lib:GetAllBlizNodesForCurrentContinent()'},
  },
  ['GetBlizNodesByEverything'] = {
    {name='GetBlizNodesByEverything', count=9, confidence=1.00, sample='function Lib:GetBlizNodesByEverything()'},
  },
  ['ClearAllKnowledge'] = {
    {name='ClearAllKnowledge', count=2, confidence=0.40, sample='function Lib:ClearAllKnowledge(status)'},
  },
  ['ClearContinentKnowledge'] = {
    {name='ClearContinentKnowledge', count=3, confidence=0.60, sample='Lib:ClearContinentKnowledge(c,"all",status)'},
  },
  ['MarkContinentSeen'] = {
    {name='MarkContinentSeen', count=3, confidence=0.60, sample='function Lib:MarkContinentSeen(cont,operator)'},
  },
  ['LearnTaxi'] = {
    {name='LearnTaxi', count=11, confidence=1.00, sample='if node.taxioperator==operator and node.known==nil then self:LearnTaxi(node,false) end'},
  },
  ['ResetKnowledge'] = {
    {name='ResetKnowledge', count=1, confidence=0.20, sample='function Lib:ResetKnowledge()'},
  },
  ['GetCurrentBlizTaxiFromMap'] = {
    {name='GetCurrentBlizTaxiFromMap', count=3, confidence=0.60, sample='function Lib:GetCurrentBlizTaxiFromMap()'},
  },
  ['GetLastSlotsData'] = {
    {name='GetLastSlotsData', count=6, confidence=1.00, sample='self.lastSlotsToData = self.TaxiMapAdapter:GetLastSlotsData()'},
  },
  ['TaxiIsDirectFlight'] = {
    {name='TaxiIsDirectFlight', count=1, confidence=0.20, sample='if TaxiIsDirectFlight(dest) and TaxiNodeGetType(dest)=="REACHABLE" then'},
  },
  ['TaxiGetNodeSlot'] = {
    {name='TaxiGetNodeSlot', count=7, confidence=1.00, sample='local srcSlot = TaxiGetNodeSlot(dest, 1, true)'},
  },
  ['GetCurrentTaxiSlot'] = {
    {name='GetCurrentTaxiSlot', count=4, confidence=0.80, sample='self.lastCurrentSlot = self:GetCurrentTaxiSlot()'},
  },
  ['GetTotalFlightTimeTo'] = {
    {name='GetTotalFlightTimeTo', count=4, confidence=0.80, sample='function Lib:GetTotalFlightTimeTo(destNodeID)'},
  },
  ['GetTaxiByTarget'] = {
    {name='GetTaxiByTarget', count=4, confidence=0.80, sample='function Lib:GetTaxiByTarget(token)'},
  },
  ['HookPins'] = {
    {name='HookPins', count=4, confidence=0.80, sample='C_Timer.After(0,function() self.TaxiMapAdapter:HookPins() end)'},
  },
  ['GetFlightPathDataProvider'] = {
    {name='GetFlightPathDataProvider', count=6, confidence=1.00, sample='-- /dump LibTaxi.HooksForFlightMapFrame:GetFlightPathDataProvider().slotIndexToPin'},
  },
  ['FlightMapFrameTimer'] = {
    {name='FlightMapFrameTimer', count=1, confidence=0.20, sample='--if not self.taxi_tooltip_timer then self.taxi_tooltip_timer = ZGV:ScheduleRepeatingTimer(function() self:FlightMapFrameTimer() end,0.1) end'},
  },
  ['AnyTaxiKnown'] = {
    {name='AnyTaxiKnown', count=4, confidence=0.80, sample='function Lib:AnyTaxiKnown(...)'},
  },
  ['DEV_FindNodeIDs'] = {
    {name='DEV_FindNodeIDs', count=1, confidence=0.20, sample='function Lib:DEV_FindNodeIDs(operator,continent)'},
  },
  ['DEV_DumpFlightCosts'] = {
    {name='DEV_DumpFlightCosts', count=3, confidence=0.60, sample='Lib:DEV_DumpFlightCosts(continent)'},
  },
  ['DEV_ConvertCostsToNodeID'] = {
    {name='DEV_ConvertCostsToNodeID', count=1, confidence=0.20, sample='function Lib:DEV_ConvertCostsToNodeID()'},
  },
  ['DEV_FixByDupes'] = {
    {name='DEV_FixByDupes', count=1, confidence=0.20, sample='function Lib:DEV_FixByDupes()'},
  },
  ['DumpFlightCosts'] = {
    {name='DumpFlightCosts', count=2, confidence=0.40, sample='-- /run LibTaxi:DumpFlightCosts()'},
  },
  ['DEV_DumpSavedTaxiNPCs'] = {
    {name='DEV_DumpSavedTaxiNPCs', count=2, confidence=0.40, sample='function Lib:DEV_DumpSavedTaxiNPCs()'},
  },
  ['DEV_DumpTaxiByTarget'] = {
    {name='DEV_DumpTaxiByTarget', count=1, confidence=0.20, sample='function Lib:DEV_DumpTaxiByTarget()  -- DEV'},
  },
  ['DEV_TestAllFlights'] = {
    {name='DEV_TestAllFlights', count=1, confidence=0.20, sample='function Lib:DEV_TestAllFlights()'},
  },
  ['FindTaxiByTag'] = {
    {name='FindTaxiByTag', count=1, confidence=0.20, sample='local tagmatch = Lib:FindTaxiByTag(Lib:GetCurrentMapContinent(),ttag)'},
  },
  ['DEV_CheckNodeMatches'] = {
    {name='DEV_CheckNodeMatches', count=1, confidence=0.20, sample='function Lib:DEV_CheckNodeMatches()'},
  },
  ['DeepScanTaxiMap'] = {
    {name='DeepScanTaxiMap', count=1, confidence=0.20, sample='-- /run LibTaxi:DeepScanTaxiMap()'},
  },
  ['DEV_DeepScanTaxiMap'] = {
    {name='DEV_DeepScanTaxiMap', count=2, confidence=0.40, sample='function Lib:DEV_DeepScanTaxiMap()  -- DEV FUNCTION'},
  },
  ['DEV_ViewTaxiMapData'] = {
    {name='DEV_ViewTaxiMapData', count=2, confidence=0.40, sample='function Lib:DEV_ViewTaxiMapData()  -- DEV FUNCTION (simple)'},
  },
  ['FUNCTION'] = {
    {name='FUNCTION', count=1, confidence=0.20, sample='function Lib:DEV_ViewTaxiMapData()  -- DEV FUNCTION (simple)'},
  },
  ['NPCs'] = {
    {name='NPCs', count=2, confidence=0.40, sample=':SetText("[Z] Dump NPCs ()")'},
  },
  ['MergeTags__'] = {
    {name='MergeTags__', count=1, confidence=0.20, sample='function Lib:MergeTags__()  --unused?'},
  },
  ['DumpNeighborFlights'] = {
    {name='DumpNeighborFlights', count=1, confidence=0.20, sample='function Lib:DumpNeighborFlights()'},
  },
  ['DumpAllFlights'] = {
    {name='DumpAllFlights', count=1, confidence=0.20, sample='function Lib:DumpAllFlights()'},
  },
  ['ConvertTag'] = {
    {name='ConvertTag', count=1, confidence=0.20, sample='function Lib:ConvertTag(typ,a,b,c)'},
  },
  ['TestCurrent'] = {
    {name='TestCurrent', count=1, confidence=0.20, sample='function Lib:TestCurrent()'},
  },
  ['HookButtons'] = {
    {name='HookButtons', count=2, confidence=0.40, sample='if TaxiFrame then Lib.HooksForTaxiFrame:HookButtons() end'},
  },
  ['FlightMapPinOnEnter'] = {
    {name='FlightMapPinOnEnter', count=2, confidence=0.40, sample='pin:HookScript("OnEnter",function(...) HooksForFlightMapFrame:FlightMapPinOnEnter(...) end)'},
  },
  ['GetCurrentFlightMapPin'] = {
    {name='GetCurrentFlightMapPin', count=1, confidence=0.20, sample='function HooksForFlightMapFrame:GetCurrentFlightMapPin()'},
  },
  ['ClassicTaxiButtonOnEnter'] = {
    {name='ClassicTaxiButtonOnEnter', count=2, confidence=0.40, sample='hooksecurefunc("TaxiNodeOnButtonEnter",function(...) HooksForTaxiFrame:ClassicTaxiButtonOnEnter(...) end)'},
  },
  ['GetCurrentTaxiMapButton'] = {
    {name='GetCurrentTaxiMapButton', count=1, confidence=0.20, sample='function HooksForTaxiFrame:GetCurrentTaxiMapButton() --Classic'},
  },
  ['SHL'] = {
    {name='SHL', count=23, confidence=1.00, sample='function SHL(x, n)'},
  },
  ['SHR'] = {
    {name='SHR', count=27, confidence=1.00, sample='function SHR(x, n)'},
  },
  ['ROL'] = {
    {name='ROL', count=11, confidence=1.00, sample='function ROL(x, n)'},
  },
  ['ROR'] = {
    {name='ROR', count=14, confidence=1.00, sample='function ROR(x, n)'},
  },
  ['AND'] = {
    {name='AND', count=71, confidence=1.00, sample='function AND(x, y)'},
  },
  ['OR'] = {
    {name='OR', count=2, confidence=0.40, sample='function OR(x, y)'},
  },
  ['XOR'] = {
    {name='XOR', count=147, confidence=1.00, sample='function XOR(x, y, z, t, u) -- 2..5 arguments'},
  },
  ['XOR_BYTE'] = {
    {name='XOR_BYTE', count=3, confidence=0.60, sample='function XOR_BYTE(x, y)'},
  },
  ['HEX'] = {
    {name='HEX', count=8, confidence=1.00, sample='function HEX(x)'},
  },
  ['XOR32A5'] = {
    {name='XOR32A5', count=3, confidence=0.60, sample='local function XOR32A5(x)'},
  },
  ['SHAKE'] = {
    {name='SHAKE', count=2, confidence=0.40, sample='--    NIST FIPS 202 defines SHAKE(message,num_bits)'},
  },
  ['HMAC'] = {
    {name='HMAC', count=1, confidence=0.20, sample='lib.hmac = hmac -- HMAC(hash_func, key, message) is applicable to any hash function from this module except SHAKE*'},
  },
  ['He'] = {
    {name='He', count=2, confidence=0.40, sample='@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))'},
  },
  ['Illidan'] = {
    {name='Illidan', count=2, confidence=0.40, sample='@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))'},
  },
  ['Gailly'] = {
    {name='Gailly', count=2, confidence=0.40, sample='1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).'},
  },
  ['Adler'] = {
    {name='Adler', count=2, confidence=0.40, sample='1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).'},
  },
  ['Stormrage'] = {
    {name='Stormrage', count=6, confidence=1.00, sample='3. LibCompress, by jjsheets and Galmok of European Stormrage (Horde)'},
  },
  ['Copyright'] = {
    {name='Copyright', count=2, confidence=0.40, sample='.." Copyright (C) 2018-2020 Haoqian He."'},
  },
  ['Adler32'] = {
    {name='Adler32', count=16, confidence=1.00, sample='function LibDeflate:Adler32(str)'},
  },
  ['IsEqualAdler32'] = {
    {name='IsEqualAdler32', count=8, confidence=1.00, sample='local function IsEqualAdler32(actual, expected)'},
  },
  ['CreateDictionary'] = {
    {name='CreateDictionary', count=24, confidence=1.00, sample='-- local dict = LibDeflate:CreateDictionary(dict_str, 10, 187433486)'},
  },
  ['IsValidDictionary'] = {
    {name='IsValidDictionary', count=4, confidence=0.80, sample='local function IsValidDictionary(dictionary)'},
  },
  ['IsValidArguments'] = {
    {name='IsValidArguments', count=18, confidence=1.00, sample='local function IsValidArguments(str,'},
  },
  ['WriteBits'] = {
    {name='WriteBits', count=70, confidence=1.00, sample='1. WriteBits(code, bitlen):'},
  },
  ['WriteString'] = {
    {name='WriteString', count=6, confidence=1.00, sample='2. WriteString(str):'},
  },
  ['Flush'] = {
    {name='Flush', count=2, confidence=0.40, sample='3. Flush(mode):'},
  },
  ['CreateWriter'] = {
    {name='CreateWriter', count=6, confidence=1.00, sample='local function CreateWriter()'},
  },
  ['FlushWriter'] = {
    {name='FlushWriter', count=14, confidence=1.00, sample='local function FlushWriter(mode)'},
  },
  ['MinHeapPush'] = {
    {name='MinHeapPush', count=4, confidence=0.80, sample='local function MinHeapPush(heap, e, heap_size)'},
  },
  ['MinHeapPop'] = {
    {name='MinHeapPop', count=6, confidence=1.00, sample='local function MinHeapPop(heap, heap_size)'},
  },
  ['GetHuffmanCodeFromBitlen'] = {
    {name='GetHuffmanCodeFromBitlen', count=8, confidence=1.00, sample='local function GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens'},
  },
  ['SortByFirstThenSecond'] = {
    {name='SortByFirstThenSecond', count=2, confidence=0.40, sample='local function SortByFirstThenSecond(a, b)'},
  },
  ['GetHuffmanBitlenAndCode'] = {
    {name='GetHuffmanBitlenAndCode', count=8, confidence=1.00, sample='local function GetHuffmanBitlenAndCode(symbol_counts, max_bitlen, max_symbol)'},
  },
  ['RunLengthEncodeHuffmanBitlen'] = {
    {name='RunLengthEncodeHuffmanBitlen', count=4, confidence=0.80, sample='local function RunLengthEncodeHuffmanBitlen('},
  },
  ['LoadStringToTable'] = {
    {name='LoadStringToTable', count=6, confidence=1.00, sample='local function LoadStringToTable(str, t, start, stop, offset)'},
  },
  ['GetBlockLZ77Result'] = {
    {name='GetBlockLZ77Result', count=4, confidence=0.80, sample='local function GetBlockLZ77Result(level, string_table, hash_tables, block_start,'},
  },
  ['GetBlockDynamicHuffmanHeader'] = {
    {name='GetBlockDynamicHuffmanHeader', count=8, confidence=1.00, sample='local function GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)'},
  },
  ['GetDynamicHuffmanBlockSize'] = {
    {name='GetDynamicHuffmanBlockSize', count=4, confidence=0.80, sample='local function GetDynamicHuffmanBlockSize(lcodes, dcodes, HCLEN'},
  },
  ['CompressDynamicHuffmanBlock'] = {
    {name='CompressDynamicHuffmanBlock', count=4, confidence=0.80, sample='local function CompressDynamicHuffmanBlock(WriteBits, is_last_block'},
  },
  ['GetFixedHuffmanBlockSize'] = {
    {name='GetFixedHuffmanBlockSize', count=4, confidence=0.80, sample='local function GetFixedHuffmanBlockSize(lcodes, dcodes)'},
  },
  ['CompressFixedHuffmanBlock'] = {
    {name='CompressFixedHuffmanBlock', count=4, confidence=0.80, sample='local function CompressFixedHuffmanBlock(WriteBits, is_last_block,'},
  },
  ['GetStoreBlockSize'] = {
    {name='GetStoreBlockSize', count=4, confidence=0.80, sample='local function GetStoreBlockSize(block_start, block_end, total_bitlen)'},
  },
  ['CompressStoreBlock'] = {
    {name='CompressStoreBlock', count=4, confidence=0.80, sample='local function CompressStoreBlock(WriteBits, WriteString, is_last_block, str'},
  },
  ['Deflate'] = {
    {name='Deflate', count=6, confidence=1.00, sample='local function Deflate(configs, WriteBits, WriteString, FlushWriter, str'},
  },
  ['CompressDeflateWithDict'] = {
    {name='CompressDeflateWithDict', count=6, confidence=1.00, sample='-- @see LibDeflate:CompressDeflateWithDict(str, dictionary, configs)'},
  },
  ['CompressDeflateInternal'] = {
    {name='CompressDeflateInternal', count=6, confidence=1.00, sample='local function CompressDeflateInternal(str, dictionary, configs)'},
  },
  ['CompressZlibInternal'] = {
    {name='CompressZlibInternal', count=6, confidence=1.00, sample='local function CompressZlibInternal(str, dictionary, configs)'},
  },
  ['CompressZlib'] = {
    {name='CompressZlib', count=6, confidence=1.00, sample='function LibDeflate:CompressZlib(str, configs)'},
  },
  ['CompressZlibWithDict'] = {
    {name='CompressZlibWithDict', count=4, confidence=0.80, sample='function LibDeflate:CompressZlibWithDict(str, dictionary, configs)'},
  },
  ['ReadBits'] = {
    {name='ReadBits', count=50, confidence=1.00, sample='1. ReadBits(bitlen)'},
  },
  ['ReadBytes'] = {
    {name='ReadBytes', count=6, confidence=1.00, sample='2. ReadBytes(bytelen, buffer, buffer_size)'},
  },
  ['Decode'] = {
    {name='Decode', count=27, confidence=1.00, sample='3. Decode(huffman_bitlen_count, huffman_symbol, min_bitlen)'},
  },
  ['ReaderBitlenLeft'] = {
    {name='ReaderBitlenLeft', count=26, confidence=1.00, sample='4. ReaderBitlenLeft()'},
  },
  ['SkipToByteBoundary'] = {
    {name='SkipToByteBoundary', count=8, confidence=1.00, sample='5. SkipToByteBoundary()'},
  },
  ['CreateReader'] = {
    {name='CreateReader', count=4, confidence=0.80, sample='local function CreateReader(input_string)'},
  },
  ['CreateDecompressState'] = {
    {name='CreateDecompressState', count=6, confidence=1.00, sample='local function CreateDecompressState(str, dictionary)'},
  },
  ['GetHuffmanForDecode'] = {
    {name='GetHuffmanForDecode', count=12, confidence=1.00, sample='local function GetHuffmanForDecode(huffman_bitlens, max_symbol, max_bitlen)'},
  },
  ['DecodeUntilEndOfBlock'] = {
    {name='DecodeUntilEndOfBlock', count=6, confidence=1.00, sample='local function DecodeUntilEndOfBlock(state, lcodes_huffman_bitlens'},
  },
  ['DecompressStoreBlock'] = {
    {name='DecompressStoreBlock', count=4, confidence=0.80, sample='local function DecompressStoreBlock(state)'},
  },
  ['DecompressFixBlock'] = {
    {name='DecompressFixBlock', count=4, confidence=0.80, sample='local function DecompressFixBlock(state)'},
  },
  ['DecompressDynamicBlock'] = {
    {name='DecompressDynamicBlock', count=4, confidence=0.80, sample='local function DecompressDynamicBlock(state)'},
  },
  ['Inflate'] = {
    {name='Inflate', count=6, confidence=1.00, sample='local function Inflate(state)'},
  },
  ['DecompressDeflateWithDict'] = {
    {name='DecompressDeflateWithDict', count=8, confidence=1.00, sample='-- @see LibDeflate:DecompressDeflateWithDict(str, dictionary)'},
  },
  ['DecompressDeflateInternal'] = {
    {name='DecompressDeflateInternal', count=6, confidence=1.00, sample='local function DecompressDeflateInternal(str, dictionary)'},
  },
  ['DecompressZlib'] = {
    {name='DecompressZlib', count=8, confidence=1.00, sample='-- @see LibDeflate:DecompressZlib(str)'},
  },
  ['DecompressZlibWithDict'] = {
    {name='DecompressZlibWithDict', count=8, confidence=1.00, sample='-- @see LibDeflate:DecompressZlibWithDict(str)'},
  },
  ['DecompressZlibInternal'] = {
    {name='DecompressZlibInternal', count=6, confidence=1.00, sample='local function DecompressZlibInternal(str, dictionary)'},
  },
  ['Encode'] = {
    {name='Encode', count=13, confidence=1.00, sample='-- t:Encode(str) returns the encoded string. <br>'},
  },
  ['CreateCodec'] = {
    {name='CreateCodec', count=10, confidence=1.00, sample='-- local codec = LibDeflate:CreateCodec("\000\001", "\002", "\003")'},
  },
  ['GenerateWoWAddonChannelCodec'] = {
    {name='GenerateWoWAddonChannelCodec', count=6, confidence=1.00, sample='local function GenerateWoWAddonChannelCodec()'},
  },
  ['NULL'] = {
    {name='NULL', count=2, confidence=0.40, sample='-- The encoded string is guaranteed to contain no NULL ("\000") character.'},
  },
  ['GenerateWoWChatChannelCodec'] = {
    {name='GenerateWoWChatChannelCodec', count=6, confidence=1.00, sample='local function GenerateWoWChatChannelCodec()'},
  },
  ['EncodeForWoWChatChannel'] = {
    {name='EncodeForWoWChatChannel', count=4, confidence=0.80, sample='function LibDeflate:EncodeForWoWChatChannel(str)'},
  },
  ['DecodeForWoWChatChannel'] = {
    {name='DecodeForWoWChatChannel', count=4, confidence=0.80, sample='function LibDeflate:DecodeForWoWChatChannel(str)'},
  },
  ['Galmok'] = {
    {name='Galmok', count=2, confidence=0.40, sample='-- and Galmok (galmok@gmail.com) for the 6 bit encoding algorithm.'},
  },
  ['EncodeForPrint'] = {
    {name='EncodeForPrint', count=5, confidence=1.00, sample='function LibDeflate:EncodeForPrint(str)'},
  },
  ['DecodeForPrint'] = {
    {name='DecodeForPrint', count=5, confidence=1.00, sample='function LibDeflate:DecodeForPrint(str)'},
  },
  ['InternalClearCache'] = {
    {name='InternalClearCache', count=2, confidence=0.40, sample='local function InternalClearCache()'},
  },
  ['IsEventRegistered'] = {
    {name='IsEventRegistered', count=1, confidence=0.20, sample='if not grip:IsEventRegistered("PLAYER_LOGIN") then'},
  },
  ['IsMouseWheelEnabled'] = {
    {name='IsMouseWheelEnabled', count=1, confidence=0.20, sample='if not InterfaceOptionsFrameAddOns:IsMouseWheelEnabled() then'},
  },
  ['GetCurrentRegionName'] = {
    {name='GetCurrentRegionName', count=1, confidence=0.20, sample='local regionKey = regionTable[GetCurrentRegion()] or GetCurrentRegionName() or "TR"'},
  },
  ['ResetDB'] = {
    {name='ResetDB', count=2, confidence=0.40, sample='function DBObjectLib:ResetDB(defaultProfile)'},
  },
  ['GetNamespace'] = {
    {name='GetNamespace', count=4, confidence=0.80, sample='-- local namespace = self.db:GetNamespace('namespace')'},
  },
  ['NewLocale'] = {
    {name='NewLocale', count=26, confidence=1.00, sample='-- Remember the locale table being registered right now (it gets set by :NewLocale())'},
  },
  ['Dispatch'] = {
    {name='Dispatch', count=32, confidence=1.00, sample='local function Dispatch(handlers, ...)'},
  },
  ['OnUsed'] = {
    {name='OnUsed', count=7, confidence=1.00, sample='registry.OnUsed(registry, target, event)'},
  },
  ['OnUnused'] = {
    {name='OnUnused', count=7, confidence=1.00, sample='registry.OnUnused(registry, target, eventname)'},
  },
  ['ListProfiles'] = {
    {name='ListProfiles', count=2, confidence=0.40, sample='function OptionsHandlerPrototype:ListProfiles(info)'},
  },
  ['HasNoProfiles'] = {
    {name='HasNoProfiles', count=1, confidence=0.20, sample='function OptionsHandlerPrototype:HasNoProfiles(info)'},
  },
  ['Cryect'] = {
    {name='Cryect', count=2, confidence=0.40, sample='Author(s): Cryect (cryect@gmail.com), Xinhuan'},
  },
  ['SetupGraphRealtimeFunctions'] = {
    {name='SetupGraphRealtimeFunctions', count=6, confidence=1.00, sample='local function SetupGraphRealtimeFunctions(graph, upgrade)'},
  },
  ['CreateGraphRealtime'] = {
    {name='CreateGraphRealtime', count=6, confidence=1.00, sample='function lib:CreateGraphRealtime(name, parent, relative, relativeTo, offsetX, offsetY, Width, Height)'},
  },
  ['SetOrientation'] = {
    {name='SetOrientation', count=20, confidence=1.00, sample='bar:SetOrientation("VERTICAL")'},
  },
  ['SetStatusBarTexture'] = {
    {name='SetStatusBarTexture', count=24, confidence=1.00, sample='bar:SetStatusBarTexture("Interface\\Buttons\\WHITE8X8")'},
  },
  ['GetStatusBarTexture'] = {
    {name='GetStatusBarTexture', count=19, confidence=1.00, sample='bar:GetStatusBarTexture():SetHorizTile(false)'},
  },
  ['SetHorizTile'] = {
    {name='SetHorizTile', count=19, confidence=1.00, sample='bar:GetStatusBarTexture():SetHorizTile(false)'},
  },
  ['SetVertTile'] = {
    {name='SetVertTile', count=18, confidence=1.00, sample='bar:GetStatusBarTexture():SetVertTile(false)'},
  },
  ['SetGradientAlpha'] = {
    {name='SetGradientAlpha', count=9, confidence=1.00, sample='t:SetGradientAlpha("VERTICAL", 0.2, 0.0, 0.0, 0.5, 1.0, 0.0, 0.0, 1.0)'},
  },
  ['SetupGraphLineFunctions'] = {
    {name='SetupGraphLineFunctions', count=6, confidence=1.00, sample='local function SetupGraphLineFunctions(graph)'},
  },
  ['SetupGraphScatterPlotFunctions'] = {
    {name='SetupGraphScatterPlotFunctions', count=6, confidence=1.00, sample='local function SetupGraphScatterPlotFunctions(graph)'},
  },
  ['CreateGraphScatterPlot'] = {
    {name='CreateGraphScatterPlot', count=4, confidence=0.80, sample='function lib:CreateGraphScatterPlot(name, parent, relative, relativeTo, offsetX, offsetY, Width, Height)'},
  },
  ['SetupGraphPieChartFunctions'] = {
    {name='SetupGraphPieChartFunctions', count=6, confidence=1.00, sample='local function SetupGraphPieChartFunctions(graph)'},
  },
  ['AddTimeData'] = {
    {name='AddTimeData', count=4, confidence=0.80, sample='function GraphFunctions:AddTimeData(value)'},
  },
  ['RefreshRealtimeGraph'] = {
    {name='RefreshRealtimeGraph', count=2, confidence=0.40, sample='function GraphFunctions:RefreshRealtimeGraph()'},
  },
  ['CreateGridlines'] = {
    {name='CreateGridlines', count=8, confidence=1.00, sample='self:CreateGridlines()'},
  },
  ['SetFilterRadius'] = {
    {name='SetFilterRadius', count=4, confidence=0.80, sample='function GraphFunctions:SetFilterRadius(radius)'},
  },
  ['SetAutoscaleYAxis'] = {
    {name='SetAutoscaleYAxis', count=2, confidence=0.40, sample='function GraphFunctions:SetAutoscaleYAxis(scale)'},
  },
  ['SetBarColors'] = {
    {name='SetBarColors', count=16, confidence=1.00, sample='function GraphFunctions:SetBarColors(BotColor, TopColor)'},
  },
  ['SetMode'] = {
    {name='SetMode', count=18, confidence=1.00, sample='function GraphFunctions:SetMode(mode)'},
  },
  ['RealtimeSetColors'] = {
    {name='RealtimeSetColors', count=2, confidence=0.40, sample='function GraphFunctions:RealtimeSetColors(BotColor, TopColor)'},
  },
  ['RealtimeSetWidth'] = {
    {name='RealtimeSetWidth', count=2, confidence=0.40, sample='function GraphFunctions:RealtimeSetWidth(Width)'},
  },
  ['OldSetWidth'] = {
    {name='OldSetWidth', count=2, confidence=0.40, sample='self:OldSetWidth(Width)'},
  },
  ['RefreshGraph'] = {
    {name='RefreshGraph', count=8, confidence=1.00, sample='self:RefreshGraph()'},
  },
  ['RealtimeSetHeight'] = {
    {name='RealtimeSetHeight', count=2, confidence=0.40, sample='function GraphFunctions:RealtimeSetHeight(Height)'},
  },
  ['OldSetHeight'] = {
    {name='OldSetHeight', count=2, confidence=0.40, sample='self:OldSetHeight(Height)'},
  },
  ['RealtimeGetValue'] = {
    {name='RealtimeGetValue', count=2, confidence=0.40, sample='function GraphFunctions:RealtimeGetValue(Time)'},
  },
  ['SetUpdateLimit'] = {
    {name='SetUpdateLimit', count=2, confidence=0.40, sample='function GraphFunctions:SetUpdateLimit(Time)'},
  },
  ['SetDecay'] = {
    {name='SetDecay', count=2, confidence=0.40, sample='function GraphFunctions:SetDecay(decay)'},
  },
  ['AddBar'] = {
    {name='AddBar', count=4, confidence=0.80, sample='function GraphFunctions:AddBar(value)'},
  },
  ['SetBars'] = {
    {name='SetBars', count=4, confidence=0.80, sample='function GraphFunctions:SetBars()'},
  },
  ['AddFilledDataSeries'] = {
    {name='AddFilledDataSeries', count=2, confidence=0.40, sample='function GraphFunctions:AddFilledDataSeries(points, color, n2)'},
  },
  ['ResetData'] = {
    {name='ResetData', count=4, confidence=0.80, sample='function GraphFunctions:ResetData()'},
  },
  ['SetLinearFit'] = {
    {name='SetLinearFit', count=4, confidence=0.80, sample='function GraphFunctions:SetLinearFit(fit)'},
  },
  ['HideTextures'] = {
    {name='HideTextures', count=6, confidence=1.00, sample='function GraphFunctions:HideTextures()'},
  },
  ['FindTexture'] = {
    {name='FindTexture', count=10, confidence=1.00, sample='function GraphFunctions:FindTexture()'},
  },
  ['HideFontStrings'] = {
    {name='HideFontStrings', count=4, confidence=0.80, sample='function GraphFunctions:HideFontStrings()'},
  },
  ['FindFontString'] = {
    {name='FindFontString', count=12, confidence=1.00, sample='function GraphFunctions:FindFontString()'},
  },
  ['LinearRegression'] = {
    {name='LinearRegression', count=4, confidence=0.80, sample='function GraphFunctions:LinearRegression(data)'},
  },
  ['DrawLinePie'] = {
    {name='DrawLinePie', count=6, confidence=1.00, sample='self:DrawLinePie(0)'},
  },
  ['RotateTexture'] = {
    {name='RotateTexture', count=8, confidence=1.00, sample='GraphFunctions:RotateTexture(t, CurAngle)'},
  },
  ['ResetPie'] = {
    {name='ResetPie', count=2, confidence=0.40, sample='function GraphFunctions:ResetPie()'},
  },
  ['SetSelectionFunc'] = {
    {name='SetSelectionFunc', count=2, confidence=0.40, sample='function GraphFunctions:SetSelectionFunc(f)'},
  },
  ['PieChart_OnUpdate'] = {
    {name='PieChart_OnUpdate', count=2, confidence=0.40, sample='function GraphFunctions:PieChart_OnUpdate()'},
  },
  ['SelectionFunc'] = {
    {name='SelectionFunc', count=6, confidence=1.00, sample='self:SelectionFunc(k)'},
  },
  ['SetYMax'] = {
    {name='SetYMax', count=6, confidence=1.00, sample='function GraphFunctions:SetYMax(ymax)'},
  },
  ['SetMinMaxY'] = {
    {name='SetMinMaxY', count=2, confidence=0.40, sample='function GraphFunctions:SetMinMaxY(val)'},
  },
  ['LockXMin'] = {
    {name='LockXMin', count=2, confidence=0.40, sample='function GraphFunctions:LockXMin(state)'},
  },
  ['LockXMax'] = {
    {name='LockXMax', count=2, confidence=0.40, sample='function GraphFunctions:LockXMax(state)'},
  },
  ['LockYMin'] = {
    {name='LockYMin', count=2, confidence=0.40, sample='function GraphFunctions:LockYMin(state)'},
  },
  ['LockYMax'] = {
    {name='LockYMax', count=2, confidence=0.40, sample='function GraphFunctions:LockYMax(state)'},
  },
  ['SetGridColorSecondary'] = {
    {name='SetGridColorSecondary', count=2, confidence=0.40, sample='function GraphFunctions:SetGridColorSecondary(color)'},
  },
  ['SetGridSecondaryMultiple'] = {
    {name='SetGridSecondaryMultiple', count=2, confidence=0.40, sample='function GraphFunctions:SetGridSecondaryMultiple(XAxis, YAxis)'},
  },
  ['SetLineTexture'] = {
    {name='SetLineTexture', count=4, confidence=0.80, sample='function GraphFunctions:SetLineTexture(texture)'},
  },
  ['SetBorderSize'] = {
    {name='SetBorderSize', count=8, confidence=1.00, sample='function GraphFunctions:SetBorderSize(border, size)'},
  },
  ['YLabelsFormatter'] = {
    {name='YLabelsFormatter', count=2, confidence=0.40, sample='F:SetText(self.YLabelsFormatter(i * self.YGridInterval))'},
  },
  ['XLabelsFormatter'] = {
    {name='XLabelsFormatter', count=2, confidence=0.40, sample='F:SetText(self.XLabelsFormatter(i * self.XGridInterval))'},
  },
  ['OnUpdateGraph'] = {
    {name='OnUpdateGraph', count=2, confidence=0.40, sample='function GraphFunctions:OnUpdateGraph()'},
  },
  ['OnUpdateGraphRealtime'] = {
    {name='OnUpdateGraphRealtime', count=2, confidence=0.40, sample='function GraphFunctions:OnUpdateGraphRealtime()'},
  },
  ['RegisterHotspot'] = {
    {name='RegisterHotspot', count=2, confidence=0.40, sample='function GraphFunctions:RegisterHotspot(x,y,text)'},
  },
  ['RefreshLineGraph'] = {
    {name='RefreshLineGraph', count=2, confidence=0.40, sample='function GraphFunctions:RefreshLineGraph()'},
  },
  ['HideBars'] = {
    {name='HideBars', count=4, confidence=0.80, sample='self:HideBars(self)'},
  },
  ['DrawBar'] = {
    {name='DrawBar', count=4, confidence=0.80, sample='self:DrawBar(self, LastPoint.x, LastPoint.y, TPoint.x, TPoint.y, series.Color, k1)'},
  },
  ['RefreshScatterPlot'] = {
    {name='RefreshScatterPlot', count=2, confidence=0.40, sample='function GraphFunctions:RefreshScatterPlot()'},
  },
  ['Frame'] = {
    {name='Frame', count=2, confidence=0.40, sample='-- C		- Canvas Frame (for anchoring)'},
  },
  ['DrawVLine'] = {
    {name='DrawVLine', count=4, confidence=0.80, sample='return self:DrawVLine(C, sx, sy, ey, w, color, layer)'},
  },
  ['DrawHLine'] = {
    {name='DrawHLine', count=4, confidence=0.80, sample='return self:DrawHLine(C, sx, ex, sy, w, color, layer)'},
  },
  ['TestGraph2Lib'] = {
    {name='TestGraph2Lib', count=4, confidence=0.80, sample='--To test the library do /script LibStub("LibGraph-2.0"):TestGraph2Lib()'},
  },
  ['TestRealtimeGraph'] = {
    {name='TestRealtimeGraph', count=4, confidence=0.80, sample='local function TestRealtimeGraph()'},
  },
  ['TestRealtimeGraphRaw'] = {
    {name='TestRealtimeGraphRaw', count=2, confidence=0.40, sample='local function TestRealtimeGraphRaw()'},
  },
  ['TestLineGraph'] = {
    {name='TestLineGraph', count=4, confidence=0.80, sample='local function TestLineGraph()'},
  },
  ['TestScatterPlot'] = {
    {name='TestScatterPlot', count=4, confidence=0.80, sample='local function TestScatterPlot()'},
  },
  ['TestPieChart'] = {
    {name='TestPieChart', count=4, confidence=0.80, sample='local function TestPieChart()'},
  },
  ['Stoutwrithe'] = {
    {name='Stoutwrithe', count=1, confidence=0.20, sample='Author: Tekkub Stoutwrithe (tekkub@gmail.com)'},
  },
  ['CreateTooltip'] = {
    {name='CreateTooltip', count=2, confidence=0.40, sample='function lib:CreateTooltip()'},
  },
  ['AddFontStrings'] = {
    {name='AddFontStrings', count=1, confidence=0.20, sample='tt:AddFontStrings(self.vars.Llines[i], self.vars.Rlines[i])'},
  },
  ['Erase'] = {
    {name='Erase', count=2, confidence=0.40, sample='function lib:Erase()'},
  },
  ['IsOwned'] = {
    {name='IsOwned', count=5, confidence=1.00, sample='--	if not self.vars.tooltip:IsOwned(self.vars.tooltip) then self.vars.tooltip:SetOwner(self.vars.tooltip, "ANCHOR_NONE") end'},
  },
  ['Find'] = {
    {name='Find', count=10, confidence=1.00, sample='function lib:Find(txt, startln, endln, ignoreleft, ignoreright, exact)'},
  },
  ['MultiFind'] = {
    {name='MultiFind', count=2, confidence=0.40, sample='function lib:MultiFind(startln, endln, ignoreleft, ignoreright, t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)'},
  },
  ['FindDeformat'] = {
    {name='FindDeformat', count=1, confidence=0.20, sample='function lib:FindDeformat(txt, startln, endln, ignoreleft, ignoreright)'},
  },
  ['HasInstance'] = {
    {name='HasInstance', count=1, confidence=0.20, sample='if not AceLibrary or not AceLibrary:HasInstance("Deformat-2.0") then'},
  },
  ['HasAction'] = {
    {name='HasAction', count=1, confidence=0.20, sample='SetAction = function(id) return HasAction(id) end,'},
  },
  ['CreateSetMethods'] = {
    {name='CreateSetMethods', count=2, confidence=0.40, sample='function lib:CreateSetMethods()'},
  },
  ['Register'] = {
    {name='Register', count=46, confidence=1.00, sample='AceLibrary:Register(Gratuity20, "Gratuity-2.0", vminor+70000000)'},
    {name='DetailsFramework.Language.Register', count=5, confidence=1.00, sample='Register() = DetailsFramework.Language.Register()'},
  },
  ['GetLookupTable'] = {
    {name='GetLookupTable', count=6, confidence=1.00, sample='local BL = B:GetLookupTable()'},
  },
  ['DoSomething'] = {
    {name='DoSomething', count=9, confidence=1.00, sample='DoSomething(BL["Some english word that doesn't exist"]) -- warning!'},
  },
  ['GetBaseLookupTable'] = {
    {name='GetBaseLookupTable', count=6, confidence=1.00, sample='local B_hasBase = B:GetBaseLookupTable()'},
  },
  ['GetReverseIterator'] = {
    {name='GetReverseIterator', count=9, confidence=1.00, sample='* This will return only one English word that it maps to, if there are more than one to check, see :GetReverseIterator("word")'},
  },
  ['Iterate'] = {
    {name='Iterate', count=6, confidence=1.00, sample='for english, localized in B:Iterate() do'},
  },
  ['SetBaseTranslations'] = {
    {name='SetBaseTranslations', count=3, confidence=0.60, sample='function prototype:SetBaseTranslations(base)'},
  },
  ['SetCurrentTranslations'] = {
    {name='SetCurrentTranslations', count=6, confidence=1.00, sample='function prototype:SetCurrentTranslations(current)'},
  },
  ['Thirst'] = {
    {name='Thirst', count=36, confidence=1.00, sample='["Arcane Thirst (Oculeth)"] = "Arcane Thirst (Oculeth)",'},
  },
  ['Legionfall'] = {
    {name='Legionfall', count=12, confidence=1.00, sample='["Armies of Legionfall (Paragon)"] = "Armies of Legionfall (Paragon)",'},
  },
  ['Light'] = {
    {name='Light', count=30, confidence=1.00, sample='["Army of the Light (Paragon)"] = "Army of the Light (Paragon)",'},
  },
  ['Brawlpub'] = {
    {name='Brawlpub', count=36, confidence=1.00, sample='["Bizmo's Brawlpub (Season 1)"] = "Bizmo's Brawlpub (Season 1)",'},
  },
  ['Arena'] = {
    {name='Arena', count=59, confidence=1.00, sample='["Brawl'gar Arena (Season 1)"] = "Brawl'gar Arena (Season 1)",'},
  },
  ['Farondis'] = {
    {name='Farondis', count=17, confidence=1.00, sample='["Court of Farondis (Paragon)"] = "Court of Farondis (Paragon)",'},
  },
  ['Harvesters'] = {
    {name='Harvesters', count=12, confidence=1.00, sample='["Court of Harvesters (Paragon)"] = "Court of Harvesters (Paragon)",'},
  },
  ['Dreamweavers'] = {
    {name='Dreamweavers', count=12, confidence=1.00, sample='["Dreamweavers (Paragon)"] = "Dreamweavers (Paragon)",'},
  },
  ['Tribe'] = {
    {name='Tribe', count=12, confidence=1.00, sample='["Highmountain Tribe (Paragon)"] = "Highmountain Tribe (Paragon)",'},
  },
  ['Embers'] = {
    {name='Embers', count=14, confidence=1.00, sample='["Order of Embers (Paragon)"] = "Order of Embers (Paragon)",'},
  },
  ['Admiralty'] = {
    {name='Admiralty', count=12, confidence=1.00, sample='["Proudmoore Admiralty (Paragon)"] = "Proudmoore Admiralty (Paragon)",'},
  },
  ['Rajani'] = {
    {name='Rajani', count=18, confidence=1.00, sample='["Rajani (Paragon)"] = "Rajani (Paragon)",'},
  },
  ['Resistance'] = {
    {name='Resistance', count=12, confidence=1.00, sample='["Rustbolt Resistance (Paragon)"] = "Rustbolt Resistance (Paragon)",'},
  },
  ['Wake'] = {
    {name='Wake', count=21, confidence=1.00, sample='["Storm's Wake (Paragon)"] = "Storm's Wake (Paragon)",'},
  },
  ['Expedition'] = {
    {name='Expedition', count=13, confidence=1.00, sample='["Talanji's Expedition (Paragon)"] = "Talanji's Expedition (Paragon)",'},
  },
  ['Ascended'] = {
    {name='Ascended', count=12, confidence=1.00, sample='["The Ascended (Paragon)"] = "The Ascended (Paragon)",'},
  },
  ['Honorbound'] = {
    {name='Honorbound', count=12, confidence=1.00, sample='["The Honorbound (Paragon)"] = "The Honorbound (Paragon)",'},
  },
  ['Nightfallen'] = {
    {name='Nightfallen', count=12, confidence=1.00, sample='["The Nightfallen (Paragon)"] = "The Nightfallen (Paragon)",'},
  },
  ['Army'] = {
    {name='Army', count=12, confidence=1.00, sample='["The Undying Army (Paragon)"] = "The Undying Army (Paragon)",'},
  },
  ['Unshackled'] = {
    {name='Unshackled', count=12, confidence=1.00, sample='["The Unshackled (Paragon)"] = "The Unshackled (Paragon)",'},
  },
  ['Wardens'] = {
    {name='Wardens', count=20, confidence=1.00, sample='["The Wardens (Paragon)"] = "The Wardens (Paragon)",'},
  },
  ['Hunt'] = {
    {name='Hunt', count=12, confidence=1.00, sample='["The Wild Hunt (Paragon)"] = "The Wild Hunt (Paragon)",'},
  },
  ['Seekers'] = {
    {name='Seekers', count=12, confidence=1.00, sample='["Tortollan Seekers (Paragon)"] = "Tortollan Seekers (Paragon)",'},
  },
  ['Accord'] = {
    {name='Accord', count=12, confidence=1.00, sample='["Uldum Accord (Paragon)"] = "Uldum Accord (Paragon)",'},
  },
  ['Valarjar'] = {
    {name='Valarjar', count=18, confidence=1.00, sample='["Valarjar (Paragon)"] = "Valarjar (Paragon)",'},
  },
  ['Voldunai'] = {
    {name='Voldunai', count=17, confidence=1.00, sample='["Voldunai (Paragon)"] = "Voldunai (Paragon)",'},
  },
  ['Ankoan'] = {
    {name='Ankoan', count=12, confidence=1.00, sample='["Waveblade Ankoan (Paragon)"] = "Waveblade Ankoan (Paragon)",'},
  },
  ['Empire'] = {
    {name='Empire', count=12, confidence=1.00, sample='["Zandalari Empire (Paragon)"] = "Zandalari Empire (Paragon)"'},
  },
  ['Durst'] = {
    {name='Durst', count=3, confidence=0.60, sample='["Arcane Thirst (Oculeth)"] = "Arkaner Durst (Oculeth)",'},
  },
  ['Legionsrichter'] = {
    {name='Legionsrichter', count=1, confidence=0.20, sample='["Armies of Legionfall (Paragon)"] = "Die Legionsrichter (huldigend)",'},
  },
  ['Boxbar'] = {
    {name='Boxbar', count=3, confidence=0.60, sample='["Bizmo's Brawlpub (Season 1)"] = "Bizmos Boxbar (Saison 1)",'},
  },
  ['Hofstaat'] = {
    {name='Hofstaat', count=1, confidence=0.20, sample='["Court of Farondis (Paragon)"] = "Farondis' Hofstaat (huldigend)",'},
  },
  ['Ernter'] = {
    {name='Ernter', count=1, confidence=0.20, sample='["Court of Harvesters (Paragon)"] = "Hof der Ernter (huldigend)",'},
  },
  ['Traumweber'] = {
    {name='Traumweber', count=1, confidence=0.20, sample='["Dreamweavers (Paragon)"] = "Die Traumweber (huldigend)",'},
  },
  ['Hochbergstamm'] = {
    {name='Hochbergstamm', count=1, confidence=0.20, sample='["Highmountain Tribe (Paragon)"] = "Der Hochbergstamm (huldigend)",'},
  },
  ['Glutorden'] = {
    {name='Glutorden', count=1, confidence=0.20, sample='["Order of Embers (Paragon)"] = "Glutorden (huldigend)",'},
  },
  ['Rostbolzenwiderstand'] = {
    {name='Rostbolzenwiderstand', count=1, confidence=0.20, sample='["Rustbolt Resistance (Paragon)"] = "Rostbolzenwiderstand (huldigend)",'},
  },
  ['Sturmwacht'] = {
    {name='Sturmwacht', count=1, confidence=0.20, sample='["Storm's Wake (Paragon)"] = "Die Sturmwacht (huldigend)",'},
  },
  ['Aufgestiegenen'] = {
    {name='Aufgestiegenen', count=1, confidence=0.20, sample='["The Ascended (Paragon)"] = "Die Aufgestiegenen (huldigend)",'},
  },
  ['Eidgebundenen'] = {
    {name='Eidgebundenen', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Die Eidgebundenen (huldigend)",'},
  },
  ['Armee'] = {
    {name='Armee', count=1, confidence=0.20, sample='["The Undying Army (Paragon)"] = "Die Uvergängliche Armee (huldigend)",'},
  },
  ['Entfesselten'] = {
    {name='Entfesselten', count=1, confidence=0.20, sample='["The Unshackled (Paragon)"] = "Die Entfesselten (huldigend)",'},
  },
  ['Jagd'] = {
    {name='Jagd', count=1, confidence=0.20, sample='["The Wild Hunt (Paragon)"] = "Die Wilde Jagd (huldigend)",'},
  },
  ['Sucher'] = {
    {name='Sucher', count=1, confidence=0.20, sample='["Tortollan Seekers (Paragon)"] = "Tortollanische Sucher (huldigend)",'},
  },
  ['Meeresklinge'] = {
    {name='Meeresklinge', count=1, confidence=0.20, sample='["Waveblade Ankoan (Paragon)"] = "Ankoaner der Meeresklinge (huldigend)",'},
  },
  ['Zandalariimperium'] = {
    {name='Zandalariimperium', count=1, confidence=0.20, sample='["Zandalari Empire (Paragon)"] = "Zandalariimperium (huldigend)"'},
  },
  ['Arcanes'] = {
    {name='Arcanes', count=3, confidence=0.60, sample='["Arcane Thirst (Oculeth)"] = "Soif des Arcanes (Oculeth)",'},
  },
  ['Bizmo'] = {
    {name='Bizmo', count=15, confidence=1.00, sample='["Bizmo's Brawlpub (Season 1)"] = "Bar-Tabasse de Bizmo (saison 1)",'},
  },
  ['Moissonneurs'] = {
    {name='Moissonneurs', count=1, confidence=0.20, sample='["Court of Harvesters (Paragon)"] = "Cour des Moissonneurs (parangon)",'},
  },
  ['Centaures'] = {
    {name='Centaures', count=2, confidence=0.40, sample='["Gelkis Clan Centaur"] = "Centaures (Gelkis)",'},
  },
  ['Roc'] = {
    {name='Roc', count=1, confidence=0.20, sample='["Highmountain Tribe (Paragon)"] = "Tribu de Haut-Roc (parangon)",'},
  },
  ['Braises'] = {
    {name='Braises', count=1, confidence=0.20, sample='["Order of Embers (Paragon)"] = "Ordre des Braises (parangon)",'},
  },
  ['Portvaillant'] = {
    {name='Portvaillant', count=1, confidence=0.20, sample='["Proudmoore Admiralty (Paragon)"] = "Amirauté des Portvaillant (parangon)",'},
  },
  ['Talanji'] = {
    {name='Talanji', count=5, confidence=1.00, sample='["Talanji's Expedition (Paragon)"] = "Expédition de Talanji (parangon)",'},
  },
  ['Honneur'] = {
    {name='Honneur', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Brigade de l’Honneur (parangon)",'},
  },
  ['Souffrenuit'] = {
    {name='Souffrenuit', count=1, confidence=0.20, sample='["The Nightfallen (Paragon)"] = "Souffrenuit (parangon)",'},
  },
  ['Affranchis'] = {
    {name='Affranchis', count=1, confidence=0.20, sample='["The Unshackled (Paragon)"] = "Affranchis (parangon)",'},
  },
  ['Gardiennes'] = {
    {name='Gardiennes', count=1, confidence=0.20, sample='["The Wardens (Paragon)"] = "Gardiennes (parangon)",'},
  },
  ['Hallali'] = {
    {name='Hallali', count=1, confidence=0.20, sample='["The Wild Hunt (Paragon)"] = "L’Hallali (parangon)",'},
  },
  ['Volduni'] = {
    {name='Volduni', count=1, confidence=0.20, sample='["Voldunai (Paragon)"] = "Volduni (parangon)",'},
  },
  ['Brisant'] = {
    {name='Brisant', count=1, confidence=0.20, sample='["Waveblade Ankoan (Paragon)"] = "Ankoïens du Brisant (parangon)",'},
  },
  ['Arcano'] = {
    {name='Arcano', count=2, confidence=0.40, sample='["Arcane Thirst (Oculeth)"] = "Sedientos de lo Arcano (Oculeth)",'},
  },
  ['Arcana'] = {
    {name='Arcana', count=10, confidence=1.00, sample='["Arcane Thirst (Valtrois)"] = "Ansia Arcana (Valtrois)",'},
  },
  ['Argus'] = {
    {name='Argus', count=1, confidence=0.20, sample='["Argussian Reach (Paragon)"] = "Gloria de Argus (baluarte)",'},
  },
  ['Luz'] = {
    {name='Luz', count=1, confidence=0.20, sample='["Army of the Light (Paragon)"] = "Ejército de la Luz (baluarte)",'},
  },
  ['Cosechadores'] = {
    {name='Cosechadores', count=2, confidence=0.40, sample='["Court of Harvesters (Paragon)"] = "Corte de los Cosechadores (dechado)",'},
  },
  ['Alto'] = {
    {name='Alto', count=1, confidence=0.20, sample='["Highmountain Tribe (Paragon)"] = "Tribu Monte Alto (baluarte)",'},
  },
  ['Ascuas'] = {
    {name='Ascuas', count=2, confidence=0.40, sample='["Order of Embers (Paragon)"] = "Orden de Ascuas (baluarte)",'},
  },
  ['Valiente'] = {
    {name='Valiente', count=2, confidence=0.40, sample='["Proudmoore Admiralty (Paragon)"] = "Almirantazgo de la Casa Valiente (baluarte)",'},
  },
  ['Tormenta'] = {
    {name='Tormenta', count=4, confidence=0.80, sample='["Storm's Wake (Paragon)"] = "Despertar de la Tormenta (baluarte)",'},
  },
  ['Ascendidos'] = {
    {name='Ascendidos', count=3, confidence=0.60, sample='["The Ascended (Paragon)"] = "Los Ascendidos (dechado)",'},
  },
  ['Honor'] = {
    {name='Honor', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Defensores del Honor (baluarte)",'},
  },
  ['Noche'] = {
    {name='Noche', count=1, confidence=0.20, sample='["The Nightfallen (Paragon)"] = "Caídos de la Noche (baluarte)",'},
  },
  ['Inmortal'] = {
    {name='Inmortal', count=2, confidence=0.40, sample='["The Undying Army (Paragon)"] = "El Ejército Inmortal (dechado)",'},
  },
  ['Desencadenados'] = {
    {name='Desencadenados', count=2, confidence=0.40, sample='["The Unshackled (Paragon)"] = "Desencadenados (baluarte)",'},
  },
  ['Celadoras'] = {
    {name='Celadoras', count=2, confidence=0.40, sample='["The Wardens (Paragon)"] = "Las Celadoras (baluarte)",'},
  },
  ['Salvaje'] = {
    {name='Salvaje', count=1, confidence=0.20, sample='["The Wild Hunt (Paragon)"] = "La Cacería Salvaje (dechado)",'},
  },
  ['Tortolianos'] = {
    {name='Tortolianos', count=1, confidence=0.20, sample='["Tortollan Seekers (Paragon)"] = "Buscadores Tortolianos (baluarte)",'},
  },
  ['Hojamarea'] = {
    {name='Hojamarea', count=1, confidence=0.20, sample='["Waveblade Ankoan (Paragon)"] = "Ankoan Hojamarea (baluarte)",'},
  },
  ['Zandalari'] = {
    {name='Zandalari', count=5, confidence=1.00, sample='["Zandalari Empire (Paragon)"] = "Imperio Zandalari (baluarte)"'},
  },
  ['Pernoxidado'] = {
    {name='Pernoxidado', count=1, confidence=0.20, sample='["Rustbolt Resistance (Paragon)"] = "Resistencia de Pernoxidado (Dechado)",'},
  },
  ['Honorables'] = {
    {name='Honorables', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Los Honorables (Dechado)",'},
  },
  ['Fea'] = {
    {name='Fea', count=3, confidence=0.60, sample='["Brawl'gar Arena (Season 1)"] = "Arena de Brig'ga Fea (Temporada 1)",'},
  },
  ['Ceifadores'] = {
    {name='Ceifadores', count=1, confidence=0.20, sample='["Court of Harvesters (Paragon)"] = "Corte dos Ceifadores (Paragão)",'},
  },
  ['Montanha'] = {
    {name='Montanha', count=1, confidence=0.20, sample='["Highmountain Tribe (Paragon)"] = "Tribo Alta Montanha (Paragão)",'},
  },
  ['Brasas'] = {
    {name='Brasas', count=1, confidence=0.20, sample='["Order of Embers (Paragon)"] = "Ordem das Brasas (Paragão)",'},
  },
  ['Proudmore'] = {
    {name='Proudmore', count=1, confidence=0.20, sample='["Proudmoore Admiralty (Paragon)"] = "Almirantado Proudmore (Paragão)",'},
  },
  ['Tempestade'] = {
    {name='Tempestade', count=1, confidence=0.20, sample='["Storm's Wake (Paragon)"] = "Rastro da Tempestade (Paragão)",'},
  },
  ['Honra'] = {
    {name='Honra', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Brigada da Honra (Paragão)",'},
  },
  ['Imorredouro'] = {
    {name='Imorredouro', count=1, confidence=0.20, sample='["The Undying Army (Paragon)"] = "O Exército Imorredouro (Paragão)",'},
  },
  ['Libertos'] = {
    {name='Libertos', count=1, confidence=0.20, sample='["The Unshackled (Paragon)"] = "Os Libertos (Paragão)",'},
  },
  ['Selvagem'] = {
    {name='Selvagem', count=1, confidence=0.20, sample='["The Wild Hunt (Paragon)"] = "A Caçada Selvagem (Paragão)",'},
  },
  ['Tortollanos'] = {
    {name='Tortollanos', count=1, confidence=0.20, sample='["Tortollan Seekers (Paragon)"] = "Peregrinos Tortollanos (Paragão)",'},
  },
  ['Lamionda'] = {
    {name='Lamionda', count=1, confidence=0.20, sample='["Waveblade Ankoan (Paragon)"] = "Ankoano Lamionda (Paragão)",'},
  },
  ['Legione'] = {
    {name='Legione', count=1, confidence=0.20, sample='["7th Legion (Paragon)"] = "VII Legione (Eccellenza)",'},
  },
  ['Spezzalegione'] = {
    {name='Spezzalegione', count=1, confidence=0.20, sample='["Armies of Legionfall (Paragon)"] = "Armata Spezzalegione (Eccellenza)",'},
  },
  ['Combattenti'] = {
    {name='Combattenti', count=3, confidence=0.60, sample='["Brawl'gar Arena (Season 1)"] = "Arena dei Combattenti (Stagione 1)",'},
  },
  ['Mietitori'] = {
    {name='Mietitori', count=1, confidence=0.20, sample='["Court of Harvesters (Paragon)"] = "Corte dei Mietitori (Eccellenza)",'},
  },
  ['Plasmasogni'] = {
    {name='Plasmasogni', count=1, confidence=0.20, sample='["Dreamweavers (Paragon)"] = "Plasmasogni (Eccellenza)",'},
  },
  ['Monte'] = {
    {name='Monte', count=1, confidence=0.20, sample='["Highmountain Tribe (Paragon)"] = "Tribù Alto Monte (Eccellenza)",'},
  },
  ['Braci'] = {
    {name='Braci', count=1, confidence=0.20, sample='["Order of Embers (Paragon)"] = "Ordine delle Braci (Eccellenza)",'},
  },
  ['Marefiero'] = {
    {name='Marefiero', count=1, confidence=0.20, sample='["Proudmoore Admiralty (Paragon)"] = "Ammiragliato dei Marefiero (Eccellenza)",'},
  },
  ['Bullonaccio'] = {
    {name='Bullonaccio', count=1, confidence=0.20, sample='["Rustbolt Resistance (Paragon)"] = "Resistenza di Bullonaccio (Eccellenza)",'},
  },
  ['Destatempesta'] = {
    {name='Destatempesta', count=1, confidence=0.20, sample='["Storm's Wake (Paragon)"] = "Destatempesta (Eccellenza)",'},
  },
  ['Ascesi'] = {
    {name='Ascesi', count=1, confidence=0.20, sample='["The Ascended (Paragon)"] = "Gli Ascesi (Eccellenza)",'},
  },
  ['Onore'] = {
    {name='Onore', count=1, confidence=0.20, sample='["The Honorbound (Paragon)"] = "Brigata dell'Onore (Eccellenza)",'},
  },
  ['Oscuri'] = {
    {name='Oscuri', count=1, confidence=0.20, sample='["The Nightfallen (Paragon)"] = "Esuli Oscuri (Eccellenza)",'},
  },
  ['Imperitura'] = {
    {name='Imperitura', count=1, confidence=0.20, sample='["The Undying Army (Paragon)"] = "L'Armata Imperitura (Eccellenza)",'},
  },
  ['Liberti'] = {
    {name='Liberti', count=1, confidence=0.20, sample='["The Unshackled (Paragon)"] = "Liberti (Eccellenza)",'},
  },
  ['Custodi'] = {
    {name='Custodi', count=1, confidence=0.20, sample='["The Wardens (Paragon)"] = "Custodi (Eccellenza)",'},
  },
  ['Selvaggia'] = {
    {name='Selvaggia', count=1, confidence=0.20, sample='["The Wild Hunt (Paragon)"] = "La Caccia Selvaggia (Eccellenza)",'},
  },
  ['Tortolliani'] = {
    {name='Tortolliani', count=1, confidence=0.20, sample='["Tortollan Seekers (Paragon)"] = "Cercatori Tortolliani (Eccellenza)",'},
  },
  ['Lamaonda'] = {
    {name='Lamaonda', count=1, confidence=0.20, sample='["Waveblade Ankoan (Paragon)"] = "Ankoan Lamaonda (Eccellenza)",'},
  },
  ['EmbedLibraries'] = {
    {name='EmbedLibraries', count=10, confidence=1.00, sample='self:EmbedLibraries(object, select(i,...))'},
  },
  ['GetAddon'] = {
    {name='GetAddon', count=24, confidence=1.00, sample='-- MyAddon = LibStub("AceAddon-3.0"):GetAddon("MyAddon")'},
    {name='Details222.WarcraftLogs.GetAddon', count=3, confidence=0.60, sample='function Details222.WarcraftLogs.GetAddon()'},
  },
  ['EmbedLibrary'] = {
    {name='EmbedLibrary', count=8, confidence=1.00, sample='self:EmbedLibrary(addon, libname, false, 4)'},
  },
  ['IsModuleTrue'] = {
    {name='IsModuleTrue', count=2, confidence=0.40, sample='local function IsModuleTrue(self) return true end'},
  },
  ['SetEnabledState'] = {
    {name='SetEnabledState', count=8, confidence=1.00, sample='module:SetEnabledState(self.defaultModuleState)'},
  },
  ['EnableAddon'] = {
    {name='EnableAddon', count=10, confidence=1.00, sample='-- This internally calls AceAddon:EnableAddon(), thus dispatching a OnEnable callback'},
  },
  ['DisableAddon'] = {
    {name='DisableAddon', count=8, confidence=1.00, sample='-- This internally calls AceAddon:DisableAddon(), thus dispatching a OnDisable callback'},
  },
  ['EnableModule'] = {
    {name='EnableModule', count=4, confidence=0.80, sample='-- MyAddon:EnableModule("MyModule")'},
  },
  ['DisableModule'] = {
    {name='DisableModule', count=4, confidence=0.80, sample='-- MyAddon:DisableModule("MyModule")'},
  },
  ['SetDefaultModuleLibraries'] = {
    {name='SetDefaultModuleLibraries', count=6, confidence=1.00, sample='-- MyAddon:SetDefaultModuleLibraries("AceEvent-3.0")'},
  },
  ['SetDefaultModuleState'] = {
    {name='SetDefaultModuleState', count=6, confidence=1.00, sample='-- MyAddon:SetDefaultModuleState(false)'},
  },
  ['SetDefaultModulePrototype'] = {
    {name='SetDefaultModulePrototype', count=8, confidence=1.00, sample='-- MyAddon:SetDefaultModulePrototype(prototype)'},
  },
  ['IterateModules'] = {
    {name='IterateModules', count=4, confidence=0.80, sample='-- for name, module in MyAddon:IterateModules() do'},
  },
  ['IterateEmbeds'] = {
    {name='IterateEmbeds', count=4, confidence=0.80, sample='local function IterateEmbeds(self) return pairs(AceAddon.embeds[self]) end'},
  },
  ['IsModule'] = {
    {name='IsModule', count=2, confidence=0.40, sample='local function IsModule(self) return false end'},
  },
  ['InitializeAddon'] = {
    {name='InitializeAddon', count=4, confidence=0.80, sample='function AceAddon:InitializeAddon(addon)'},
  },
  ['IterateAddons'] = {
    {name='IterateAddons', count=4, confidence=0.80, sample='-- for name, addon in AceAddon:IterateAddons() do'},
  },
  ['IterateAddonStatus'] = {
    {name='IterateAddonStatus', count=4, confidence=0.80, sample='-- for name, status in AceAddon:IterateAddonStatus() do'},
  },
  ['IterateEmbedsOnAddon'] = {
    {name='IterateEmbedsOnAddon', count=4, confidence=0.80, sample='-- e.g. addon:IterateEmbeds() instead of :IterateEmbedsOnAddon(addon)'},
  },
  ['IterateModulesOfAddon'] = {
    {name='IterateModulesOfAddon', count=2, confidence=0.40, sample='function AceAddon:IterateModulesOfAddon(addon) return pairs(addon.modules) end'},
  },
  ['IterateLibraries'] = {
    {name='IterateLibraries', count=19, confidence=1.00, sample='function LibStub:IterateLibraries() return pairs(self.libs) end'},
  },
  ['UnhookAll'] = {
    {name='UnhookAll', count=2, confidence=0.40, sample='target:UnhookAll()'},
  },
  ['IsProtected'] = {
    {name='IsProtected', count=1, confidence=0.20, sample='if not secure and obj.IsProtected and obj:IsProtected() and protectedScripts[method] then'},
  },
  ['SecureHookScript'] = {
    {name='SecureHookScript', count=3, confidence=0.60, sample='error(format("Cannot hook secure script %q; Use SecureHookScript(obj, method, [handler]) instead.", method), 3)'},
  },
  ['ActionButton_UpdateHotkeys'] = {
    {name='ActionButton_UpdateHotkeys', count=3, confidence=0.60, sample='-- function MyAddon:ActionButton_UpdateHotkeys(button, type)'},
  },
  ['RawHook'] = {
    {name='RawHook', count=3, confidence=0.60, sample='--   self:RawHook("ActionButton_UpdateHotkeys", true)'},
  },
  ['FriendsFrameOnShow'] = {
    {name='FriendsFrameOnShow', count=2, confidence=0.40, sample='-- function MyAddon:FriendsFrameOnShow(frame)'},
  },
  ['RawHookScript'] = {
    {name='RawHookScript', count=3, confidence=0.60, sample='--   self:RawHookScript(FriendsFrame, "OnShow", "FriendsFrameOnShow")'},
  },
  ['Unhook'] = {
    {name='Unhook', count=2, confidence=0.40, sample='function AceHook:Unhook(obj, method)'},
    {name='AceHook.Unhook', count=2, confidence=0.40, sample='AceHook.Unhook(self, key, method)'},
  },
  ['IsHooked'] = {
    {name='IsHooked', count=1, confidence=0.20, sample='function AceHook:IsHooked(obj, method)'},
  },
  ['Release'] = {
    {name='Release', count=7, confidence=1.00, sample='-- f:SetCallback("OnClose",function(widget) AceGUI:Release(widget) end)'},
  },
  ['SetStatusText'] = {
    {name='SetStatusText', count=4, confidence=0.80, sample='-- f:SetStatusText("Status Bar")'},
  },
  ['SetLayout'] = {
    {name='SetLayout', count=8, confidence=1.00, sample='-- f:SetLayout("Flow")'},
  },
  ['AddChild'] = {
    {name='AddChild', count=9, confidence=1.00, sample='-- f:AddChild(btn)'},
  },
  ['OnAcquire'] = {
    {name='OnAcquire', count=5, confidence=1.00, sample='widget:OnAcquire()'},
    {name='ItemBase.OnAcquire', count=1, confidence=0.20, sample='function ItemBase.OnAcquire(self)'},
  },
  ['Layout'] = {
    {name='Layout', count=5, confidence=1.00, sample='-- Set the default Layout ("List")'},
  },
  ['OnRelease'] = {
    {name='OnRelease', count=6, confidence=1.00, sample='widget:OnRelease()'},
    {name='ItemBase.OnRelease', count=2, confidence=0.40, sample='function ItemBase.OnRelease(self)'},
  },
  ['IsReleasing'] = {
    {name='IsReleasing', count=4, confidence=0.80, sample='function AceGUI:IsReleasing(widget)'},
  },
  ['LayoutFinished'] = {
    {name='LayoutFinished', count=1, confidence=0.20, sample=':LayoutFinished(width, height) - called after a layout has finished, the width and height will be the width and height of the'},
  },
  ['SetRelativeWidth'] = {
    {name='SetRelativeWidth', count=1, confidence=0.20, sample='error(":SetRelativeWidth(width): Invalid relative width.", 2)'},
  },
  ['SetRelativeHeight'] = {
    {name='SetRelativeHeight', count=1, confidence=0.20, sample='error(":SetRelativeHeight(height): Invalid relative height.", 2)'},
  },
  ['LayoutOnUpdate'] = {
    {name='LayoutOnUpdate', count=1, confidence=0.20, sample='--	local function LayoutOnUpdate(this)'},
  },
  ['PerformLayout'] = {
    {name='PerformLayout', count=3, confidence=0.60, sample='--		this.obj:PerformLayout()'},
  },
  ['DoLayout'] = {
    {name='DoLayout', count=16, confidence=1.00, sample='self:DoLayout()'},
  },
  ['GetLayout'] = {
    {name='GetLayout', count=2, confidence=0.40, sample='self.LayoutFunc = AceGUI:GetLayout(Layout)'},
  },
  ['FrameResize'] = {
    {name='FrameResize', count=1, confidence=0.20, sample='local function FrameResize(this)'},
  },
  ['ContentResize'] = {
    {name='ContentResize', count=1, confidence=0.20, sample='local function ContentResize(this)'},
  },
  ['RegisterAsContainer'] = {
    {name='RegisterAsContainer', count=10, confidence=1.00, sample='function AceGUI:RegisterAsContainer(widget)'},
  },
  ['RegisterAsWidget'] = {
    {name='RegisterAsWidget', count=20, confidence=1.00, sample='function AceGUI:RegisterAsWidget(widget)'},
  },
  ['RegisterWidgetType'] = {
    {name='RegisterWidgetType', count=30, confidence=1.00, sample='function AceGUI:RegisterWidgetType(Name, Constructor, Version)'},
  },
  ['RegisterLayout'] = {
    {name='RegisterLayout', count=6, confidence=1.00, sample='function AceGUI:RegisterLayout(Name, LayoutFunc)'},
  },
  ['GetNextWidgetNum'] = {
    {name='GetNextWidgetNum', count=15, confidence=1.00, sample='function AceGUI:GetNextWidgetNum(widgetType)'},
  },
  ['GetWidgetCount'] = {
    {name='GetWidgetCount', count=3, confidence=0.60, sample='function AceGUI:GetWidgetCount(widgetType)'},
  },
  ['GetWidgetVersion'] = {
    {name='GetWidgetVersion', count=23, confidence=1.00, sample='function AceGUI:GetWidgetVersion(widgetType)'},
  },
  ['GetCellAlign'] = {
    {name='GetCellAlign', count=3, confidence=0.60, sample='- align, alignH, alignV: Overall, horizontal and vertical cell alignment. See GetCellAlign() for possible values.'},
  },
  ['PauseLayout'] = {
    {name='PauseLayout', count=3, confidence=0.60, sample='obj:PauseLayout()'},
  },
  ['GetUserData'] = {
    {name='GetUserData', count=22, confidence=1.00, sample='local tableObj = obj:GetUserData("table")'},
  },
  ['GetCellDimension'] = {
    {name='GetCellDimension', count=7, confidence=1.00, sample='laneH[col] = math_max(laneH[col], childH - GetCellDimension("H", laneH, colStart[child], col - 1, spaceH))'},
  },
  ['IsFullWidth'] = {
    {name='IsFullWidth', count=1, confidence=0.20, sample='if child:IsFullWidth() or alignFn == "fill" or childH > cellH then'},
  },
  ['IsFullHeight'] = {
    {name='IsFullHeight', count=1, confidence=0.20, sample='if child:IsFullHeight() or alignFn == "fill" then'},
  },
  ['ResumeLayout'] = {
    {name='ResumeLayout', count=4, confidence=0.80, sample='obj:ResumeLayout()'},
  },
  ['CreateChatCommand'] = {
    {name='CreateChatCommand', count=3, confidence=0.60, sample='cfgcmd:CreateChatCommand(cmd, appName)'},
  },
  ['Priority'] = {
    {name='Priority', count=2, confidence=0.40, sample='-- a Priority ("BULK", "NORMAL", "ALERT") as well as prefix for SendChatMessage.'},
  },
  ['Ring_Link'] = {
    {name='Ring_Link', count=4, confidence=0.80, sample='local function Ring_Link(self, other)  -- Move and append all contents of another ring to this ring'},
  },
  ['DelPipe'] = {
    {name='DelPipe', count=4, confidence=0.80, sample='local function DelPipe(pipe)'},
  },
  ['NewPipe'] = {
    {name='NewPipe', count=4, confidence=0.80, sample='local function NewPipe()'},
  },
  ['DelMsg'] = {
    {name='DelMsg', count=4, confidence=0.80, sample='local function DelMsg(msg)'},
  },
  ['NewMsg'] = {
    {name='NewMsg', count=6, confidence=1.00, sample='local function NewMsg()'},
  },
  ['Hook_SendChatMessage'] = {
    {name='ChatThrottleLib.Hook_SendChatMessage', count=4, confidence=0.80, sample='return ChatThrottleLib.Hook_SendChatMessage(...)'},
  },
  ['Hook_SendAddonMessage'] = {
    {name='ChatThrottleLib.Hook_SendAddonMessage', count=8, confidence=1.00, sample='return ChatThrottleLib.Hook_SendAddonMessage(...)'},
  },
  ['Hook_SendAddonMessageLogged'] = {
    {name='ChatThrottleLib.Hook_SendAddonMessageLogged', count=4, confidence=0.80, sample='return ChatThrottleLib.Hook_SendAddonMessageLogged(...)'},
  },
  ['Hook_BNSendGameData'] = {
    {name='ChatThrottleLib.Hook_BNSendGameData', count=4, confidence=0.80, sample='return ChatThrottleLib.Hook_BNSendGameData(...)'},
  },
  ['UpdateAvail'] = {
    {name='UpdateAvail', count=8, confidence=1.00, sample='function ChatThrottleLib:UpdateAvail()'},
  },
  ['MapToSendResult'] = {
    {name='MapToSendResult', count=4, confidence=0.80, sample='local function MapToSendResult(ok, ...)'},
  },
  ['IsThrottledSendResult'] = {
    {name='IsThrottledSendResult', count=8, confidence=1.00, sample='local function IsThrottledSendResult(result)'},
  },
  ['CallErrorHandler'] = {
    {name='CallErrorHandler', count=2, confidence=0.40, sample='local function CallErrorHandler(...)'},
  },
  ['PerformSend'] = {
    {name='PerformSend', count=8, confidence=1.00, sample='local function PerformSend(sendFunction, ...)'},
  },
  ['Despool'] = {
    {name='Despool', count=4, confidence=0.80, sample='function ChatThrottleLib:Despool(Prio)'},
  },
  ['Enqueue'] = {
    {name='Enqueue', count=6, confidence=1.00, sample='function ChatThrottleLib:Enqueue(prioname, pipename, msg)'},
  },
  ['ChatMessage'] = {
    {name='ChatMessage', count=2, confidence=0.40, sample='error('ChatThrottleLib:ChatMessage(): callbackFn: expected function, got '..type(callbackFn), 2)'},
  },
  ['SendAddonMessageInternal'] = {
    {name='SendAddonMessageInternal', count=8, confidence=1.00, sample='local function SendAddonMessageInternal(self, sendFunction, prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)'},
  },
  ['SendAddonMessage'] = {
    {name='SendAddonMessage', count=16, confidence=1.00, sample='function ChatThrottleLib:SendAddonMessage(prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)'},
    {name='C_ChatInfo.SendAddonMessage', count=1, confidence=0.20, sample='C_ChatInfo.SendAddonMessage(CONST_COMM_PREFIX, dataEncoded, channel)'},
  },
  ['SendAddonMessageLogged'] = {
    {name='SendAddonMessageLogged', count=10, confidence=1.00, sample='function ChatThrottleLib:SendAddonMessageLogged(prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)'},
  },
  ['BNSendGameDataReordered'] = {
    {name='BNSendGameDataReordered', count=2, confidence=0.40, sample='local function BNSendGameDataReordered(prefix, text, _, gameAccountID)'},
  },
  ['BNSendGameData'] = {
    {name='BNSendGameData', count=12, confidence=1.00, sample='return _G.BNSendGameData(gameAccountID, prefix, text)'},
  },
  ['SayTimer'] = {
    {name='SayTimer', count=2, confidence=0.40, sample='local function SayTimer()'},
  },
  ['RegisterAddonMessagePrefix'] = {
    {name='C_ChatInfo.RegisterAddonMessagePrefix', count=3, confidence=0.60, sample='C_ChatInfo.RegisterAddonMessagePrefix(prefix)'},
    {name='RegisterAddonMessagePrefix', count=3, confidence=0.60, sample='RegisterAddonMessagePrefix(prefix)'},
  },
  ['OnReceiveMultipartFirst'] = {
    {name='OnReceiveMultipartFirst', count=4, confidence=0.80, sample='function AceComm:OnReceiveMultipartFirst(prefix, message, distribution, sender)'},
  },
  ['OnReceiveMultipartNext'] = {
    {name='OnReceiveMultipartNext', count=4, confidence=0.80, sample='function AceComm:OnReceiveMultipartNext(prefix, message, distribution, sender)'},
  },
  ['OnReceiveMultipartLast'] = {
    {name='OnReceiveMultipartLast', count=4, confidence=0.80, sample='function AceComm:OnReceiveMultipartLast(prefix, message, distribution, sender)'},
  },
  ['Ambiguate'] = {
    {name='Ambiguate', count=34, confidence=1.00, sample='sender = Ambiguate(sender, "none")'},
  },
  ['SILENTLY'] = {
    {name='SILENTLY', count=2, confidence=0.40, sample='-- unknown control character, ignore SILENTLY (dont warn unnecessarily about future extensions!)'},
  },
  ['UnregisterAllComm'] = {
    {name='UnregisterAllComm', count=2, confidence=0.40, sample='target:UnregisterAllComm()'},
  },
  ['UnregisterAllMessages'] = {
    {name='UnregisterAllMessages', count=1, confidence=0.20, sample='target:UnregisterAllMessages()'},
  },
  ['MyMethod'] = {
    {name='MyMethod', count=3, confidence=0.60, sample='function lib:MyMethod()'},
  },
  ['Button_OnClick'] = {
    {name='Button_OnClick', count=5, confidence=1.00, sample='local function Button_OnClick(frame, ...)'},
  },
  ['Control_OnEnter'] = {
    {name='Control_OnEnter', count=10, confidence=1.00, sample='local function Control_OnEnter(frame)'},
  },
  ['Control_OnLeave'] = {
    {name='Control_OnLeave', count=10, confidence=1.00, sample='local function Control_OnLeave(frame)'},
  },
  ['SetDisabled'] = {
    {name='SetDisabled', count=22, confidence=1.00, sample='self:SetDisabled(false)'},
    {name='ItemBase.SetDisabled', count=3, confidence=0.60, sample='function ItemBase.SetDisabled(self, disabled)'},
  },
  ['SetAutoWidth'] = {
    {name='SetAutoWidth', count=1, confidence=0.20, sample='self:SetAutoWidth(false)'},
  },
  ['SetStyle'] = {
    {name='SetStyle', count=2, confidence=0.40, sample='self:SetStyle()'},
  },
  ['Constructor'] = {
    {name='Constructor', count=33, confidence=1.00, sample='local function Constructor()'},
  },
  ['GetTextColor'] = {
    {name='GetTextColor', count=25, confidence=1.00, sample='self.label:SetTextColor(font:GetTextColor())'},
  },
  ['ApplyStatus'] = {
    {name='ApplyStatus', count=5, confidence=1.00, sample='self:ApplyStatus()'},
  },
  ['EnableResize'] = {
    {name='EnableResize', count=3, confidence=0.60, sample='self:EnableResize(true)'},
  },
  ['SetStatusTable'] = {
    {name='SetStatusTable', count=7, confidence=1.00, sample='local function SetStatusTable(self, status)'},
  },
  ['ColorCallback'] = {
    {name='ColorCallback', count=7, confidence=1.00, sample='local function ColorCallback(self, r, g, b, a, isAlpha)'},
  },
  ['ColorSwatch_OnClick'] = {
    {name='ColorSwatch_OnClick', count=1, confidence=0.20, sample='local function ColorSwatch_OnClick(frame)'},
  },
  ['GetColorRGB'] = {
    {name='GetColorRGB', count=10, confidence=1.00, sample='local r, g, b = ColorPickerFrame:GetColorRGB()'},
  },
  ['GetColorAlpha'] = {
    {name='GetColorAlpha', count=3, confidence=0.60, sample='local a = ColorPickerFrame:GetColorAlpha()'},
  },
  ['SetupColorPickerAndShow'] = {
    {name='SetupColorPickerAndShow', count=2, confidence=0.40, sample='ColorPickerFrame:SetupColorPickerAndShow(info)'},
  },
  ['SetHasAlpha'] = {
    {name='SetHasAlpha', count=2, confidence=0.40, sample='self:SetHasAlpha(false)'},
  },
  ['SetLabel'] = {
    {name='SetLabel', count=20, confidence=1.00, sample='self:SetLabel(nil)'},
  },
  ['Frame_OnClose'] = {
    {name='Frame_OnClose', count=1, confidence=0.20, sample='local function Frame_OnClose(frame)'},
  },
  ['Frame_OnMouseDown'] = {
    {name='Frame_OnMouseDown', count=3, confidence=0.60, sample='local function Frame_OnMouseDown(frame)'},
  },
  ['Title_OnMouseDown'] = {
    {name='Title_OnMouseDown', count=1, confidence=0.20, sample='local function Title_OnMouseDown(frame)'},
  },
  ['MoverSizer_OnMouseUp'] = {
    {name='MoverSizer_OnMouseUp', count=1, confidence=0.20, sample='local function MoverSizer_OnMouseUp(mover)'},
  },
  ['SizerSE_OnMouseDown'] = {
    {name='SizerSE_OnMouseDown', count=1, confidence=0.20, sample='local function SizerSE_OnMouseDown(frame)'},
  },
  ['SizerS_OnMouseDown'] = {
    {name='SizerS_OnMouseDown', count=1, confidence=0.20, sample='local function SizerS_OnMouseDown(frame)'},
  },
  ['SizerE_OnMouseDown'] = {
    {name='SizerE_OnMouseDown', count=1, confidence=0.20, sample='local function SizerE_OnMouseDown(frame)'},
  },
  ['StatusBar_OnEnter'] = {
    {name='StatusBar_OnEnter', count=1, confidence=0.20, sample='local function StatusBar_OnEnter(frame)'},
  },
  ['StatusBar_OnLeave'] = {
    {name='StatusBar_OnLeave', count=1, confidence=0.20, sample='local function StatusBar_OnLeave(frame)'},
  },
  ['FixScrollOnUpdate'] = {
    {name='FixScrollOnUpdate', count=1, confidence=0.20, sample='local function FixScrollOnUpdate(frame)'},
  },
  ['FixScroll'] = {
    {name='FixScroll', count=5, confidence=1.00, sample='frame.obj:FixScroll()'},
  },
  ['ScrollFrame_OnMouseWheel'] = {
    {name='ScrollFrame_OnMouseWheel', count=1, confidence=0.20, sample='local function ScrollFrame_OnMouseWheel(frame, value)'},
  },
  ['MoveScroll'] = {
    {name='MoveScroll', count=3, confidence=0.60, sample='frame.obj:MoveScroll(value)'},
  },
  ['ScrollFrame_OnSizeChanged'] = {
    {name='ScrollFrame_OnSizeChanged', count=1, confidence=0.20, sample='local function ScrollFrame_OnSizeChanged(frame)'},
  },
  ['ScrollBar_OnScrollValueChanged'] = {
    {name='ScrollBar_OnScrollValueChanged', count=1, confidence=0.20, sample='local function ScrollBar_OnScrollValueChanged(frame, value)'},
  },
  ['SetScroll'] = {
    {name='SetScroll', count=6, confidence=1.00, sample='frame.obj:SetScroll(value)'},
  },
  ['SetValueStep'] = {
    {name='SetValueStep', count=12, confidence=1.00, sample='scrollbar:SetValueStep(1)'},
  },
  ['Label_OnClick'] = {
    {name='Label_OnClick', count=1, confidence=0.20, sample='local function Label_OnClick(frame, button)'},
  },
  ['LabelOnAcquire'] = {
    {name='LabelOnAcquire', count=1, confidence=0.20, sample='self:LabelOnAcquire()'},
  },
  ['SetHighlightTexCoord'] = {
    {name='SetHighlightTexCoord', count=1, confidence=0.20, sample='self:SetHighlightTexCoord()'},
  },
  ['AceGUIEditBoxInsertLink'] = {
    {name='AceGUIEditBoxInsertLink', count=2, confidence=0.40, sample='hooksecurefunc("ChatEdit_InsertLink", function(...) return _G.AceGUIEditBoxInsertLink(...) end)'},
  },
  ['Insert'] = {
    {name='Insert', count=19, confidence=1.00, sample='editbox:Insert(text)'},
  },
  ['ShowButton'] = {
    {name='ShowButton', count=2, confidence=0.40, sample='local function ShowButton(self)'},
  },
  ['SetTextInsets'] = {
    {name='SetTextInsets', count=16, confidence=1.00, sample='self.editbox:SetTextInsets(0, 20, 3, 3)'},
  },
  ['HideButton'] = {
    {name='HideButton', count=6, confidence=1.00, sample='local function HideButton(self)'},
  },
  ['Frame_OnShowFocus'] = {
    {name='Frame_OnShowFocus', count=1, confidence=0.20, sample='local function Frame_OnShowFocus(frame)'},
  },
  ['EditBox_OnEscapePressed'] = {
    {name='EditBox_OnEscapePressed', count=2, confidence=0.40, sample='local function EditBox_OnEscapePressed(frame)'},
  },
  ['EditBox_OnEnterPressed'] = {
    {name='EditBox_OnEnterPressed', count=3, confidence=0.60, sample='local function EditBox_OnEnterPressed(frame)'},
  },
  ['EditBox_OnReceiveDrag'] = {
    {name='EditBox_OnReceiveDrag', count=1, confidence=0.20, sample='local function EditBox_OnReceiveDrag(frame)'},
  },
  ['EditBox_OnTextChanged'] = {
    {name='EditBox_OnTextChanged', count=1, confidence=0.20, sample='local function EditBox_OnTextChanged(frame)'},
  },
  ['EditBox_OnFocusGained'] = {
    {name='EditBox_OnFocusGained', count=1, confidence=0.20, sample='local function EditBox_OnFocusGained(frame)'},
  },
  ['DisableButton'] = {
    {name='DisableButton', count=2, confidence=0.40, sample='self:DisableButton(false)'},
  },
  ['SetLabelFontObject'] = {
    {name='SetLabelFontObject', count=10, confidence=1.00, sample='self:SetLabelFontObject()'},
  },
  ['SetEditFontObject'] = {
    {name='SetEditFontObject', count=3, confidence=0.60, sample='self:SetEditFontObject()'},
  },
  ['SetButtonNormalFontObject'] = {
    {name='SetButtonNormalFontObject', count=3, confidence=0.60, sample='self:SetButtonNormalFontObject()'},
  },
  ['SetButtonHighlightFontObject'] = {
    {name='SetButtonHighlightFontObject', count=3, confidence=0.60, sample='self:SetButtonHighlightFontObject()'},
  },
  ['SetButtonText'] = {
    {name='SetButtonText', count=2, confidence=0.40, sample='self:SetButtonText()'},
  },
  ['SetButtonWidth'] = {
    {name='SetButtonWidth', count=2, confidence=0.40, sample='self:SetButtonWidth()'},
  },
  ['SetButtonStatic'] = {
    {name='SetButtonStatic', count=2, confidence=0.40, sample='self:SetButtonStatic()'},
  },
  ['SetHiddenText'] = {
    {name='SetHiddenText', count=2, confidence=0.40, sample='self:SetHiddenText()'},
  },
  ['Frame_OnEnter'] = {
    {name='ItemBase.Frame_OnEnter', count=1, confidence=0.20, sample='function ItemBase.Frame_OnEnter(this)'},
  },
  ['Frame_OnLeave'] = {
    {name='ItemBase.Frame_OnLeave', count=1, confidence=0.20, sample='function ItemBase.Frame_OnLeave(this)'},
  },
  ['SetPullout'] = {
    {name='ItemBase.SetPullout', count=1, confidence=0.20, sample='function ItemBase.SetPullout(self, pullout)'},
    {name='SetPullout', count=1, confidence=0.20, sample='item:SetPullout(self)'},
  },
  ['SetOnLeave'] = {
    {name='ItemBase.SetOnLeave', count=1, confidence=0.20, sample='function ItemBase.SetOnLeave(self, func)'},
  },
  ['SetOnEnter'] = {
    {name='ItemBase.SetOnEnter', count=1, confidence=0.20, sample='function ItemBase.SetOnEnter(self, func)'},
    {name='SetOnEnter', count=1, confidence=0.20, sample='item:SetOnEnter(OnEnter)'},
  },
  ['Frame_OnClick'] = {
    {name='Frame_OnClick', count=2, confidence=0.40, sample='local function Frame_OnClick(this, button)'},
  },
  ['UpdateToggle'] = {
    {name='UpdateToggle', count=3, confidence=0.60, sample='local function UpdateToggle(self)'},
  },
  ['GetRightBorderWidth'] = {
    {name='GetRightBorderWidth', count=2, confidence=0.40, sample='self.submenu:Open("TOPLEFT", self.frame, "TOPRIGHT", self.pullout:GetRightBorderWidth(), 0, self.frame:GetFrameLevel() + 100)'},
  },
  ['SetMenu'] = {
    {name='SetMenu', count=1, confidence=0.20, sample='local function SetMenu(self, menu)'},
  },
  ['CloseMenu'] = {
    {name='CloseMenu', count=2, confidence=0.40, sample='local function CloseMenu(self)'},
  },
  ['OnScrollValueChanged'] = {
    {name='OnScrollValueChanged', count=2, confidence=0.40, sample='local function OnScrollValueChanged(this, value)'},
  },
  ['SetItemFontObject'] = {
    {name='SetItemFontObject', count=2, confidence=0.40, sample='local function SetItemFontObject(self, font)'},
  },
  ['IterateItems'] = {
    {name='IterateItems', count=5, confidence=1.00, sample='local function IterateItems(self)'},
  },
  ['SetHideOnLeave'] = {
    {name='SetHideOnLeave', count=1, confidence=0.20, sample='local function SetHideOnLeave(self, val)'},
  },
  ['SetMaxHeight'] = {
    {name='SetMaxHeight', count=1, confidence=0.20, sample='local function SetMaxHeight(self, height)'},
  },
  ['GetLeftBorderWidth'] = {
    {name='GetLeftBorderWidth', count=1, confidence=0.20, sample='local function GetLeftBorderWidth(self)'},
  },
  ['SetHitRectInsets'] = {
    {name='SetHitRectInsets', count=7, confidence=1.00, sample='slider:SetHitRectInsets(0, 0, -10, 0)'},
  },
  ['SetThumbTexture'] = {
    {name='SetThumbTexture', count=18, confidence=1.00, sample='slider:SetThumbTexture("Interface\\Buttons\\UI-SliderBar-Button-Vertical")'},
  },
  ['Button_OnEnter'] = {
    {name='Button_OnEnter', count=2, confidence=0.40, sample='local function Button_OnEnter(this)'},
  },
  ['Button_OnLeave'] = {
    {name='Button_OnLeave', count=2, confidence=0.40, sample='local function Button_OnLeave(this)'},
  },
  ['Dropdown_OnHide'] = {
    {name='Dropdown_OnHide', count=1, confidence=0.20, sample='local function Dropdown_OnHide(this)'},
  },
  ['Dropdown_TogglePullout'] = {
    {name='Dropdown_TogglePullout', count=1, confidence=0.20, sample='local function Dropdown_TogglePullout(this)'},
  },
  ['OnPulloutOpen'] = {
    {name='OnPulloutOpen', count=1, confidence=0.20, sample='local function OnPulloutOpen(this)'},
  },
  ['OnPulloutClose'] = {
    {name='OnPulloutClose', count=1, confidence=0.20, sample='local function OnPulloutClose(this)'},
  },
  ['ShowMultiText'] = {
    {name='ShowMultiText', count=5, confidence=1.00, sample='local function ShowMultiText(self)'},
  },
  ['OnItemValueChanged'] = {
    {name='OnItemValueChanged', count=1, confidence=0.20, sample='local function OnItemValueChanged(this, event, checked)'},
  },
  ['SetPulloutWidth'] = {
    {name='SetPulloutWidth', count=6, confidence=1.00, sample='self:SetPulloutWidth(nil)'},
  },
  ['SetValueFontObject'] = {
    {name='SetValueFontObject', count=7, confidence=1.00, sample='self:SetValueFontObject()'},
  },
  ['GetFontObject'] = {
    {name='GetFontObject', count=2, confidence=0.40, sample='self.label:SetTextColor(self.label:GetFontObject():GetTextColor())'},
  },
  ['SetItemValue'] = {
    {name='SetItemValue', count=2, confidence=0.40, sample='local function SetItemValue(self, item, value)'},
  },
  ['SetItemDisabled'] = {
    {name='SetItemDisabled', count=1, confidence=0.20, sample='local function SetItemDisabled(self, item, disabled)'},
  },
  ['AddListItem'] = {
    {name='AddListItem', count=4, confidence=0.80, sample='local function AddListItem(self, value, text, itemType)'},
  },
  ['AddCloseButton'] = {
    {name='AddCloseButton', count=3, confidence=0.60, sample='local function AddCloseButton(self)'},
  },
  ['GetMultiselect'] = {
    {name='GetMultiselect', count=1, confidence=0.20, sample='local function GetMultiselect(self)'},
  },
  ['SelectedGroup'] = {
    {name='SelectedGroup', count=1, confidence=0.20, sample='local function SelectedGroup(self, event, value)'},
  },
  ['SetDropdownWidth'] = {
    {name='SetDropdownWidth', count=1, confidence=0.20, sample='self:SetDropdownWidth(200)'},
  },
  ['AceGUIMultiLineEditBoxInsertLink'] = {
    {name='AceGUIMultiLineEditBoxInsertLink', count=2, confidence=0.40, sample='hooksecurefunc("ChatEdit_InsertLink", function(...) return _G.AceGUIMultiLineEditBoxInsertLink(...) end)'},
  },
  ['OnCursorChanged'] = {
    {name='OnCursorChanged', count=1, confidence=0.20, sample='local function OnCursorChanged(self, _, y, _, cursorHeight)                      -- EditBox'},
  },
  ['OnEditFocusLost'] = {
    {name='OnEditFocusLost', count=1, confidence=0.20, sample='local function OnEditFocusLost(self)                                             -- EditBox'},
  },
  ['GetNumLetters'] = {
    {name='GetNumLetters', count=4, confidence=0.80, sample='self:SetCursorPosition(self:GetNumLetters())'},
  },
  ['OnReceiveDrag'] = {
    {name='OnReceiveDrag', count=1, confidence=0.20, sample='local function OnReceiveDrag(self)                                               -- EditBox / ScrollFrame'},
  },
  ['OnTextChanged'] = {
    {name='OnTextChanged', count=2, confidence=0.40, sample='local function OnTextChanged(self, userInput)                                    -- EditBox'},
  },
  ['OnTextSet'] = {
    {name='OnTextSet', count=1, confidence=0.20, sample='local function OnTextSet(self)                                                   -- EditBox'},
  },
  ['OnVerticalScroll'] = {
    {name='OnVerticalScroll', count=2, confidence=0.40, sample='local function OnVerticalScroll(self, offset)                                    -- ScrollFrame'},
  },
  ['OnScrollRangeChanged'] = {
    {name='OnScrollRangeChanged', count=1, confidence=0.20, sample='local function OnScrollRangeChanged(self, xrange, yrange)'},
  },
  ['OnShowFocus'] = {
    {name='OnShowFocus', count=1, confidence=0.20, sample='local function OnShowFocus(frame)'},
  },
  ['OnEditFocusGained'] = {
    {name='OnEditFocusGained', count=1, confidence=0.20, sample='local function OnEditFocusGained(frame)'},
  },
  ['SetNumLines'] = {
    {name='SetNumLines', count=2, confidence=0.40, sample='self:SetNumLines()'},
  },
  ['GetNormalFontObject'] = {
    {name='GetNormalFontObject', count=1, confidence=0.20, sample='--self.button:GetNormalFontObject():SetTextColor(unpack(SkinData("AceGUIButtonTextColor")))'},
  },
  ['GetHighlightFontObject'] = {
    {name='GetHighlightFontObject', count=1, confidence=0.20, sample='--self.button:GetHighlightFontObject():SetTextColor(unpack(SkinData("AceGUIButtonTextColor")))'},
  },
  ['GetDisabledFontObject'] = {
    {name='GetDisabledFontObject', count=1, confidence=0.20, sample='--self.button:GetDisabledFontObject():SetTextColor(unpack(SkinData("AceGUIButtonTextColorDisabled")))'},
  },
  ['SetCountInvisibleLetters'] = {
    {name='SetCountInvisibleLetters', count=1, confidence=0.20, sample='editBox:SetCountInvisibleLetters(false)'},
  },
  ['AlignImage'] = {
    {name='AlignImage', count=3, confidence=0.60, sample='local function AlignImage(self)'},
  },
  ['CheckBox_OnMouseDown'] = {
    {name='CheckBox_OnMouseDown', count=1, confidence=0.20, sample='local function CheckBox_OnMouseDown(frame)'},
  },
  ['CheckBox_OnMouseUp'] = {
    {name='CheckBox_OnMouseUp', count=1, confidence=0.20, sample='local function CheckBox_OnMouseUp(frame)'},
  },
  ['ToggleChecked'] = {
    {name='ToggleChecked', count=1, confidence=0.20, sample='self:ToggleChecked()'},
  },
  ['SetType'] = {
    {name='SetType', count=37, confidence=1.00, sample='self:SetType()'},
  },
  ['SetTriState'] = {
    {name='SetTriState', count=4, confidence=0.80, sample='self:SetTriState(nil)'},
  },
  ['SetDescription'] = {
    {name='SetDescription', count=2, confidence=0.40, sample='self:SetDescription(nil)'},
  },
  ['SetDesaturation'] = {
    {name='SetDesaturation', count=12, confidence=1.00, sample='SetDesaturation(self.check, true)'},
  },
  ['SetDescriptionFontObject'] = {
    {name='SetDescriptionFontObject', count=2, confidence=0.40, sample='self:SetDescriptionFontObject(self.descFont)'},
  },
  ['GetButtonUniqueValue'] = {
    {name='GetButtonUniqueValue', count=3, confidence=0.60, sample='local function GetButtonUniqueValue(line)'},
  },
  ['ShouldDisplayLevel'] = {
    {name='ShouldDisplayLevel', count=3, confidence=0.60, sample='local function ShouldDisplayLevel(tree)'},
  },
  ['FirstFrameUpdate'] = {
    {name='FirstFrameUpdate', count=1, confidence=0.20, sample='local function FirstFrameUpdate(frame)'},
  },
  ['RefreshTree'] = {
    {name='RefreshTree', count=9, confidence=1.00, sample='self:RefreshTree(nil, true)'},
  },
  ['BuildUniqueValue'] = {
    {name='BuildUniqueValue', count=3, confidence=0.60, sample='local function BuildUniqueValue(...)'},
  },
  ['Expand_OnClick'] = {
    {name='Expand_OnClick', count=1, confidence=0.20, sample='local function Expand_OnClick(frame)'},
  },
  ['Button_OnDoubleClick'] = {
    {name='Button_OnDoubleClick', count=1, confidence=0.20, sample='local function Button_OnDoubleClick(button)'},
  },
  ['Tree_OnSizeChanged'] = {
    {name='Tree_OnSizeChanged', count=1, confidence=0.20, sample='local function Tree_OnSizeChanged(frame)'},
  },
  ['Tree_OnMouseWheel'] = {
    {name='Tree_OnMouseWheel', count=1, confidence=0.20, sample='local function Tree_OnMouseWheel(frame, delta)'},
  },
  ['GetMinMaxValues'] = {
    {name='GetMinMaxValues', count=23, confidence=1.00, sample='local min, max = scrollbar:GetMinMaxValues()'},
  },
  ['Dragger_OnLeave'] = {
    {name='Dragger_OnLeave', count=1, confidence=0.20, sample='local function Dragger_OnLeave(frame)'},
  },
  ['Dragger_OnEnter'] = {
    {name='Dragger_OnEnter', count=1, confidence=0.20, sample='local function Dragger_OnEnter(frame)'},
  },
  ['Dragger_OnMouseDown'] = {
    {name='Dragger_OnMouseDown', count=1, confidence=0.20, sample='local function Dragger_OnMouseDown(frame)'},
  },
  ['Dragger_OnMouseUp'] = {
    {name='Dragger_OnMouseUp', count=1, confidence=0.20, sample='local function Dragger_OnMouseUp(frame)'},
  },
  ['SetTreeWidth'] = {
    {name='SetTreeWidth', count=3, confidence=0.60, sample='self:SetTreeWidth(DEFAULT_TREE_WIDTH, DEFAULT_TREE_SIZABLE)'},
  },
  ['EnableButtonTooltips'] = {
    {name='EnableButtonTooltips', count=2, confidence=0.40, sample='self:EnableButtonTooltips(true)'},
  },
  ['BuildLevel'] = {
    {name='BuildLevel', count=2, confidence=0.40, sample='self:BuildLevel(v.children, level+1, line)'},
  },
  ['ShowScroll'] = {
    {name='ShowScroll', count=4, confidence=0.80, sample='self:ShowScroll(false)'},
  },
  ['Select'] = {
    {name='Select', count=95, confidence=1.00, sample='self:Select(BuildUniqueValue(...), ...)'},
  },
  ['UpdateLabels'] = {
    {name='UpdateLabels', count=11, confidence=1.00, sample='local function UpdateLabels(self)'},
  },
  ['SetFormattedText'] = {
    {name='SetFormattedText', count=2, confidence=0.40, sample='self.lowtext:SetFormattedText("%s%%", (min_value * 100))'},
  },
  ['Slider_OnValueChanged'] = {
    {name='Slider_OnValueChanged', count=2, confidence=0.40, sample='local function Slider_OnValueChanged(frame, newvalue)'},
  },
  ['Slider_OnMouseUp'] = {
    {name='Slider_OnMouseUp', count=2, confidence=0.40, sample='local function Slider_OnMouseUp(frame)'},
  },
  ['Slider_OnMouseWheel'] = {
    {name='Slider_OnMouseWheel', count=2, confidence=0.40, sample='local function Slider_OnMouseWheel(frame, v)'},
  },
  ['EditBox_OnEnter'] = {
    {name='EditBox_OnEnter', count=1, confidence=0.20, sample='local function EditBox_OnEnter(frame)'},
  },
  ['EditBox_OnLeave'] = {
    {name='EditBox_OnLeave', count=1, confidence=0.20, sample='local function EditBox_OnLeave(frame)'},
  },
  ['SetIsPercent'] = {
    {name='SetIsPercent', count=2, confidence=0.40, sample='self:SetIsPercent(nil)'},
  },
  ['SetSliderValues'] = {
    {name='SetSliderValues', count=4, confidence=0.80, sample='self:SetSliderValues(0,100,1)'},
  },
  ['SetRangeFontObject'] = {
    {name='SetRangeFontObject', count=2, confidence=0.40, sample='self:SetRangeFontObject()'},
  },
  ['SetImageSize'] = {
    {name='SetImageSize', count=4, confidence=0.80, sample='self:SetImageSize(64, 64)'},
  },
  ['SetFullWidth'] = {
    {name='SetFullWidth', count=1, confidence=0.20, sample='self:SetFullWidth()'},
  },
  ['PanelTemplates_SetDisabledTabState'] = {
    {name='PanelTemplates_SetDisabledTabState', count=2, confidence=0.40, sample='local function PanelTemplates_SetDisabledTabState(tab)'},
  },
  ['UpdateTabLook'] = {
    {name='UpdateTabLook', count=3, confidence=0.60, sample='local function UpdateTabLook(frame)'},
  },
  ['Tab_SetText'] = {
    {name='Tab_SetText', count=1, confidence=0.20, sample='local function Tab_SetText(frame, text)'},
  },
  ['Tab_SetSelected'] = {
    {name='Tab_SetSelected', count=1, confidence=0.20, sample='local function Tab_SetSelected(frame, selected)'},
  },
  ['Tab_SetDisabled'] = {
    {name='Tab_SetDisabled', count=1, confidence=0.20, sample='local function Tab_SetDisabled(frame, disabled)'},
  },
  ['BuildTabsOnUpdate'] = {
    {name='BuildTabsOnUpdate', count=1, confidence=0.20, sample='local function BuildTabsOnUpdate(frame)'},
  },
  ['BuildTabs'] = {
    {name='BuildTabs', count=5, confidence=1.00, sample='self:BuildTabs()'},
  },
  ['Tab_OnClick'] = {
    {name='Tab_OnClick', count=1, confidence=0.20, sample='local function Tab_OnClick(frame)'},
  },
  ['SelectTab'] = {
    {name='SelectTab', count=2, confidence=0.40, sample='frame.obj:SelectTab(frame.value)'},
  },
  ['Tab_OnEnter'] = {
    {name='Tab_OnEnter', count=1, confidence=0.20, sample='local function Tab_OnEnter(frame)'},
  },
  ['Tab_OnLeave'] = {
    {name='Tab_OnLeave', count=1, confidence=0.20, sample='local function Tab_OnLeave(frame)'},
  },
  ['Tab_OnShow'] = {
    {name='Tab_OnShow', count=1, confidence=0.20, sample='local function Tab_OnShow(frame)'},
  },
  ['GetTextWidth'] = {
    {name='GetTextWidth', count=2, confidence=0.40, sample='_G[frame:GetName().."HighlightTexture"]:SetWidth(frame:GetTextWidth() + 30)'},
  },
  ['SetFontString'] = {
    {name='SetFontString', count=2, confidence=0.40, sample='tab:SetFontString(tab.Text)'},
  },
  ['Keybinding_OnClick'] = {
    {name='Keybinding_OnClick', count=1, confidence=0.20, sample='local function Keybinding_OnClick(frame, button)'},
  },
  ['EnableKeyboard'] = {
    {name='EnableKeyboard', count=6, confidence=1.00, sample='frame:EnableKeyboard(false)'},
  },
  ['Keybinding_OnKeyDown'] = {
    {name='Keybinding_OnKeyDown', count=3, confidence=0.60, sample='local function Keybinding_OnKeyDown(frame, key)'},
  },
  ['SetKey'] = {
    {name='SetKey', count=3, confidence=0.60, sample='self:SetKey(keyPressed)'},
  },
  ['Keybinding_OnMouseDown'] = {
    {name='Keybinding_OnMouseDown', count=1, confidence=0.20, sample='local function Keybinding_OnMouseDown(frame, button)'},
  },
  ['Keybinding_OnMouseWheel'] = {
    {name='Keybinding_OnMouseWheel', count=1, confidence=0.20, sample='local function Keybinding_OnMouseWheel(frame, direction)'},
  },
  ['FindValueIndex'] = {
    {name='FindValueIndex', count=2, confidence=0.40, sample='local index = self:FindValueIndex(value)'},
  },
  ['CreateLabel'] = {
    {name='CreateLabel', count=190, confidence=1.00, sample='local label = self.labels[index] or self:CreateLabel()'},
  },
  ['SetObeyStepOnDrag'] = {
    {name='SetObeyStepOnDrag', count=3, confidence=0.60, sample='slider:SetObeyStepOnDrag(true)'},
  },
  ['UpdateImageAnchor'] = {
    {name='UpdateImageAnchor', count=7, confidence=1.00, sample='local function UpdateImageAnchor(self)'},
  },
  ['IterateOptionsTables'] = {
    {name='IterateOptionsTables', count=2, confidence=0.40, sample='-- :IterateOptionsTables() (and :GetOptionsTable() if only given one argument) return a function reference that the requesting config handling addon must call with valid "uiType", "uiName".'},
  },
  ['ValidateOptionsTable'] = {
    {name='ValidateOptionsTable', count=4, confidence=0.80, sample='error(MAJOR..":ValidateOptionsTable(): "..tconcat(t,".")..msg, errlvl+2)'},
  },
  ['GetSubOption'] = {
    {name='GetSubOption', count=9, confidence=1.00, sample='local function GetSubOption(group, key)'},
  },
  ['GetOptionsMemberValue'] = {
    {name='GetOptionsMemberValue', count=59, confidence=1.00, sample='local function GetOptionsMemberValue(membername, option, options, path, appName, ...)'},
  },
  ['CallOptionsFunction'] = {
    {name='CallOptionsFunction', count=1, confidence=0.20, sample='local function CallOptionsFunction(funcname ,option, options, path, appName, ...)'},
  },
  ['BuildSortedOptionsTable'] = {
    {name='BuildSortedOptionsTable', count=6, confidence=1.00, sample='local function BuildSortedOptionsTable(group, keySort, opts, options, path, appName)'},
  },
  ['DelTree'] = {
    {name='DelTree', count=3, confidence=0.60, sample='local function DelTree(tree)'},
  },
  ['CleanUserData'] = {
    {name='CleanUserData', count=1, confidence=0.20, sample='local function CleanUserData(widget, event)'},
  },
  ['GetUserDataTable'] = {
    {name='GetUserDataTable', count=11, confidence=1.00, sample='local user = widget:GetUserDataTable()'},
  },
  ['SetTree'] = {
    {name='SetTree', count=2, confidence=0.40, sample='widget:SetTree(nil)'},
  },
  ['SetTabs'] = {
    {name='SetTabs', count=2, confidence=0.40, sample='widget:SetTabs(nil)'},
  },
  ['SetGroupList'] = {
    {name='SetGroupList', count=2, confidence=0.40, sample='widget:SetGroupList(nil)'},
  },
  ['GetStatusTable'] = {
    {name='GetStatusTable', count=10, confidence=1.00, sample='function AceConfigDialog:GetStatusTable(appName, path)'},
  },
  ['SelectGroup'] = {
    {name='SelectGroup', count=1, confidence=0.20, sample='function AceConfigDialog:SelectGroup(appName, ...)'},
  },
  ['OptionOnMouseOver'] = {
    {name='OptionOnMouseOver', count=1, confidence=0.20, sample='local function OptionOnMouseOver(widget, event)'},
  },
  ['OptionOnMouseLeave'] = {
    {name='OptionOnMouseLeave', count=1, confidence=0.20, sample='local function OptionOnMouseLeave(widget, event)'},
  },
  ['GetFuncName'] = {
    {name='GetFuncName', count=2, confidence=0.40, sample='local function GetFuncName(option)'},
  },
  ['SetPropagateKeyboardInput'] = {
    {name='SetPropagateKeyboardInput', count=3, confidence=0.60, sample='self:SetPropagateKeyboardInput(false)'},
  },
  ['SetFixedFrameStrata'] = {
    {name='SetFixedFrameStrata', count=1, confidence=0.20, sample='frame:SetFixedFrameStrata(true)'},
  },
  ['SetFixedFrameLevel'] = {
    {name='SetFixedFrameLevel', count=1, confidence=0.20, sample='frame:SetFixedFrameLevel(true)'},
  },
  ['ActivateControl'] = {
    {name='ActivateControl', count=4, confidence=0.80, sample='local function ActivateControl(widget, event, ...)'},
  },
  ['ActivateSlider'] = {
    {name='ActivateSlider', count=1, confidence=0.20, sample='local function ActivateSlider(widget, event, value)'},
  },
  ['ActivateSliderLabeled'] = {
    {name='ActivateSliderLabeled', count=1, confidence=0.20, sample='local function ActivateSliderLabeled(widget, event, value)'},
  },
  ['ActivateMultiControl'] = {
    {name='ActivateMultiControl', count=1, confidence=0.20, sample='local function ActivateMultiControl(widget, event, ...)'},
  },
  ['MultiControlOnClosed'] = {
    {name='MultiControlOnClosed', count=1, confidence=0.20, sample='local function MultiControlOnClosed(widget, event, ...)'},
  },
  ['FrameOnClose'] = {
    {name='FrameOnClose', count=1, confidence=0.20, sample='local function FrameOnClose(widget, event)'},
  },
  ['CheckOptionHidden'] = {
    {name='CheckOptionHidden', count=9, confidence=1.00, sample='local function CheckOptionHidden(option, options, path, appName)'},
  },
  ['CheckOptionDisabled'] = {
    {name='CheckOptionDisabled', count=6, confidence=1.00, sample='local function CheckOptionDisabled(option, options, path, appName)'},
  },
  ['BuildSelect'] = {
    {name='BuildSelect', count=2, confidence=0.40, sample='local function BuildSelect(group, options, path, appName)'},
  },
  ['BuildSubGroups'] = {
    {name='BuildSubGroups', count=3, confidence=0.60, sample='local function BuildSubGroups(group, tree, options, path, appName)'},
  },
  ['BuildGroups'] = {
    {name='BuildGroups', count=3, confidence=0.60, sample='local function BuildGroups(group, options, path, appName, recurse)'},
  },
  ['InjectInfo'] = {
    {name='InjectInfo', count=7, confidence=1.00, sample='local function InjectInfo(control, options, option, path, rootframe, appName)'},
  },
  ['CreateControl'] = {
    {name='CreateControl', count=10, confidence=1.00, sample='local function CreateControl(userControlType, fallbackControlType)'},
  },
  ['FeedOptions'] = {
    {name='FeedOptions', count=3, confidence=0.60, sample='local function FeedOptions(appName, options,container,rootframe,path,group,inline)'},
  },
  ['SetButtonHeight'] = {
    {name='SetButtonHeight', count=1, confidence=0.20, sample='control:SetButtonHeight(v.buttonheight)'},
  },
  ['SetAutoselect'] = {
    {name='SetAutoselect', count=1, confidence=0.20, sample='control:SetAutoselect(v.autoselect)'},
  },
  ['SetPlusMinus'] = {
    {name='SetPlusMinus', count=1, confidence=0.20, sample='control:SetPlusMinus(v.plusminus)  --sinus@zygor'},
  },
  ['SetIndent'] = {
    {name='SetIndent', count=1, confidence=0.20, sample='control:SetIndent(v.indent or 0)'},
  },
  ['BuildPath'] = {
    {name='BuildPath', count=4, confidence=0.80, sample='local function BuildPath(path, ...)'},
  },
  ['TreeOnButtonEnter'] = {
    {name='TreeOnButtonEnter', count=1, confidence=0.20, sample='local function TreeOnButtonEnter(widget, event, uniquevalue, button)'},
  },
  ['TreeOnButtonLeave'] = {
    {name='TreeOnButtonLeave', count=1, confidence=0.20, sample='local function TreeOnButtonLeave(widget, event, value, button)'},
  },
  ['GroupExists'] = {
    {name='GroupExists', count=4, confidence=0.80, sample='local function GroupExists(appName, options, path, uniquevalue)'},
  },
  ['GroupSelected'] = {
    {name='GroupSelected', count=1, confidence=0.20, sample='local function GroupSelected(widget, event, uniquevalue)'},
  },
  ['ReleaseChildren'] = {
    {name='ReleaseChildren', count=4, confidence=0.80, sample='widget:ReleaseChildren()'},
  },
  ['FeedGroup'] = {
    {name='FeedGroup', count=3, confidence=0.60, sample='AceConfigDialog:FeedGroup(user.appName,options,widget,rootframe,feedpath)'},
  },
  ['SetGroup'] = {
    {name='SetGroup', count=1, confidence=0.20, sample='selectGroup:SetGroup((GroupExists(appName, options, path,status.groups.selected) and status.groups.selected) or firstgroup)'},
  },
  ['SelectByValue'] = {
    {name='SelectByValue', count=1, confidence=0.20, sample='tree:SelectByValue((GroupExists(appName, options, path,status.groups.selected) and status.groups.selected) or entry.value)'},
  },
  ['RefreshOnUpdate'] = {
    {name='RefreshOnUpdate', count=1, confidence=0.20, sample='local function RefreshOnUpdate(this)'},
  },
  ['CloseAll'] = {
    {name='CloseAll', count=2, confidence=0.40, sample='function AceConfigDialog:CloseAll()'},
  },
  ['ConfigTableChanged'] = {
    {name='ConfigTableChanged', count=1, confidence=0.20, sample='function AceConfigDialog:ConfigTableChanged(event, appName)'},
  },
  ['SetTitleFontObject'] = {
    {name='SetTitleFontObject', count=2, confidence=0.40, sample='f:SetTitleFontObject(font)'},
  },
  ['FeedToBlizPanel'] = {
    {name='FeedToBlizPanel', count=1, confidence=0.20, sample='local function FeedToBlizPanel(widget, event)'},
  },
  ['ClearBlizPanel'] = {
    {name='ClearBlizPanel', count=1, confidence=0.20, sample='local function ClearBlizPanel(widget, event)'},
  },
  ['OpenToCategory'] = {
    {name='Settings.OpenToCategory', count=1, confidence=0.20, sample='-- @return The category ID to pass to Settings.OpenToCategory (or InterfaceOptionsFrame_OpenToCategory)'},
    {name='OpenToCategory', count=1, confidence=0.20, sample='--SettingsPanel:OpenToCategory(self.OptionsFrame1.name)'},
  },
  ['GetCategory'] = {
    {name='Settings.GetCategory', count=1, confidence=0.20, sample='local category = Settings.GetCategory(parent)'},
    {name='GetCategory', count=1, confidence=0.20, sample='local category = SettingsPanel:GetCategoryList():GetCategory(self.OptionsFrame1.name)'},
  },
  ['RegisterCanvasLayoutSubcategory'] = {
    {name='Settings.RegisterCanvasLayoutSubcategory', count=1, confidence=0.20, sample='local subcategory = Settings.RegisterCanvasLayoutSubcategory(category, group.frame, categoryName)'},
  },
  ['RegisterCanvasLayoutCategory'] = {
    {name='Settings.RegisterCanvasLayoutCategory', count=1, confidence=0.20, sample='local category = Settings.RegisterCanvasLayoutCategory(group.frame, categoryName)'},
  },
  ['RegisterAddOnCategory'] = {
    {name='Settings.RegisterAddOnCategory', count=1, confidence=0.20, sample='Settings.RegisterAddOnCategory(category)'},
  },
  ['InterfaceOptions_AddCategory'] = {
    {name='InterfaceOptions_AddCategory', count=2, confidence=0.40, sample='InterfaceOptions_AddCategory(group.frame)'},
  },
  ['ChatCommand'] = {
    {name='ChatCommand', count=1, confidence=0.20, sample='-- function MyAddon:ChatCommand(input)'},
  },
  ['GetChatCommandOptions'] = {
    {name='GetChatCommandOptions', count=1, confidence=0.20, sample='function AceConfigCmd:GetChatCommandOptions(slashcmd)'},
  },
  ['Fleet'] = {
    {name='Fleet', count=12, confidence=1.00, sample='["Brashtide Attack Fleet (Force Outdoors)"] = "Flotte d'attaque des Fiers-à-flot (Force à l'extérieur)",'},
  },
  ['Pit'] = {
    {name='Pit', count=16, confidence=1.00, sample='["Darkmoon Deathmatch Pit (PH)"] = "Fosse des combats à mort de Sombrelune [PH]",'},
  },
  ['Wrynn'] = {
    {name='Wrynn', count=18, confidence=1.00, sample='["Fort Wrynn (Alliance)"] = "Fort Wrynn (Alliance)",'},
  },
  ['Cognefort'] = {
    {name='Cognefort', count=1, confidence=0.20, sample='["Highmaul Arena (Inside Raid)"] = "Arène de Cognefort (en raid)",'},
  },
  ['Hautebrande'] = {
    {name='Hautebrande', count=1, confidence=0.20, sample='["Hillsbrad Foothills (Southshore vs. Tarren Mill)"] = "Contreforts de Hautebrande (Austrivage contre Moulin-de-Tarren)",'},
  },
  ['Karazhan'] = {
    {name='Karazhan', count=9, confidence=1.00, sample='["Lower Return to Karazhan"] = "Retour à Karazhan (bas)",'},
  },
  ['Lunarfall'] = {
    {name='Lunarfall', count=12, confidence=1.00, sample='["Lunarfall (Alliance)"] = "Chutelune (Alliance)",'},
  },
  ['Chutelune'] = {
    {name='Chutelune', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Chutelune (Alliance)",'},
  },
  ['Nexus'] = {
    {name='Nexus', count=9, confidence=1.00, sample='["Nexus Legendary"] = "Nexus (légendaire)",'},
  },
  ['Ombrelune'] = {
    {name='Ombrelune', count=1, confidence=0.20, sample='["Shadowmoon Valley (Outland)"] = "Vallée d’Ombrelune (Outreterre)",'},
  },
  ['Triumvirate'] = {
    {name='Triumvirate', count=17, confidence=1.00, sample='["The Seat of the Triumvirate (cin)"] = "Siège du triumvirat",'},
  },
  ['Caverns'] = {
    {name='Caverns', count=25, confidence=1.00, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Cavernes des Lamentations (donjon de combat de mascottes)",'},
  },
  ['Lamentations'] = {
    {name='Lamentations', count=1, confidence=0.20, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Cavernes des Lamentations (donjon de combat de mascottes)",'},
  },
  ['Gunship'] = {
    {name='Gunship', count=28, confidence=1.00, sample='["Transport: Alliance Gunship (IGB)"] = "Transport: canonnière de l’Alliance (IGB)",'},
  },
  ['Alliance'] = {
    {name='Alliance', count=3, confidence=0.60, sample='["Transport: Alliance Gunship (IGB)"] = "Transport: canonnière de l’Alliance (IGB)",'},
  },
  ['Horde'] = {
    {name='Horde', count=2, confidence=0.40, sample='["Transport: Horde Gunship (IGB)"] = "Transport : canonnière de la Horde(IGB)",'},
  },
  ['Razziamarea'] = {
    {name='Razziamarea', count=2, confidence=0.40, sample='["Brashtide Attack Fleet (Force Outdoors)"] = "Flotta d'Attacco dei Razziamarea (Forza Esterna)",'},
  },
  ['Colletorto'] = {
    {name='Colletorto', count=1, confidence=0.20, sample='["Hillsbrad Foothills (Southshore vs. Tarren Mill)"] = "Alture di Colletorto (Riva del Sud contro Mulino di Tarren)",'},
  },
  ['Calaluna'] = {
    {name='Calaluna', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Calaluna (Alleanza)",'},
  },
  ['Torvaluna'] = {
    {name='Torvaluna', count=1, confidence=0.20, sample='["Shadowmoon Valley (Outland)"] = "Valle di Torvaluna (Terre Esterne)",'},
  },
  ['Vento'] = {
    {name='Vento', count=1, confidence=0.20, sample='["Stormshield (Alliance)"] = "Scudo del Vento (Alleanza)",'},
  },
  ['Lamenti'] = {
    {name='Lamenti', count=2, confidence=0.40, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Caverna dei Lamenti (Spedizione Scontri tra Mascotte)",'},
  },
  ['Mareforte'] = {
    {name='Mareforte', count=1, confidence=0.20, sample='["Brashtide Attack Fleet (Force Outdoors)"] = "Esquadra de Assalto da Mareforte (Força de Fora)",'},
  },
  ['Negraluna'] = {
    {name='Negraluna', count=1, confidence=0.20, sample='["Darkmoon Deathmatch Pit (PH)"] = "Ringue do Vale-tudo de Negraluna (PH)",'},
  },
  ['Imponente'] = {
    {name='Imponente', count=1, confidence=0.20, sample='["Highmaul Arena (Inside Raid)"] = "Arena do Malho Imponente (Raide Interno)",'},
  },
  ['Montes'] = {
    {name='Montes', count=1, confidence=0.20, sample='["Hillsbrad Foothills (Southshore vs. Tarren Mill)"] = "Contraforte de Eira dos Montes (Serraria Tarren vs Costa Sul)",'},
  },
  ['Quedaluna'] = {
    {name='Quedaluna', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Quedaluna (Aliança)",'},
  },
  ['Negra'] = {
    {name='Negra', count=1, confidence=0.20, sample='["Shadowmoon Valley (Outland)"] = "Vale da Lua Negra (Terralém)",'},
  },
  ['Tonante'] = {
    {name='Tonante', count=1, confidence=0.20, sample='["Stormshield (Alliance)"] = "Escudo Tonante (Aliança)",'},
  },
  ['Ululante'] = {
    {name='Ululante', count=1, confidence=0.20, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Caverna Ululante (Masmorra de Batalha de Mascotes)",'},
  },
  ['Horda'] = {
    {name='Horda', count=1, confidence=0.20, sample='["Transport: Horde Gunship (IGB)"] = "Transporte: Belonave da Horda (IGB)",'},
  },
  ['Mondsturz'] = {
    {name='Mondsturz', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Mondsturz (Allianz)",'},
  },
  ['Schattenmondtal'] = {
    {name='Schattenmondtal', count=1, confidence=0.20, sample='["Shadowmoon Valley (Outland)"] = "Schattenmondtal (Scherbenwelt)",'},
  },
  ['Sturmschild'] = {
    {name='Sturmschild', count=1, confidence=0.20, sample='["Stormshield (Alliance)"] = "Sturmschild (Allianz)",'},
  },
  ['Wehklagens'] = {
    {name='Wehklagens', count=1, confidence=0.20, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Die Höhlen des Wehklagens (Haustierkampfdungeon)",'},
  },
  ['Allianz'] = {
    {name='Allianz', count=1, confidence=0.20, sample='["Transport: Alliance Gunship (IGB)"] = "Transport: Kanonenboot der Allianz (IGB)",'},
  },
  ['Trabalomas'] = {
    {name='Trabalomas', count=2, confidence=0.40, sample='["Hillsbrad Foothills (Southshore vs. Tarren Mill)"] = "Laderas de Trabalomas (Costasur contra Molino Tarren)",'},
  },
  ['Bajaluna'] = {
    {name='Bajaluna', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Bajaluna (Alianza)",'},
  },
  ['Sombraluna'] = {
    {name='Sombraluna', count=2, confidence=0.40, sample='["Shadowmoon Valley (Outland)"] = "Valle Sombraluna (Terrallende)",'},
  },
  ['Fuertemarea'] = {
    {name='Fuertemarea', count=1, confidence=0.20, sample='["Brashtide Attack Fleet (Force Outdoors)"] = "Flota de Asalto Fuertemarea (Fuerzas de exterior)",'},
  },
  ['Magullador'] = {
    {name='Magullador', count=1, confidence=0.20, sample='["Highmaul Arena (Inside Raid)"] = "Arena de Gran Magullador (asalto interno)",'},
  },
  ['Luna'] = {
    {name='Luna', count=1, confidence=0.20, sample='["Lunarfall (Alliance)"] = "Caída de la Luna (Alianza)",'},
  },
  ['Triunvirato'] = {
    {name='Triunvirato', count=1, confidence=0.20, sample='["The Seat of the Triumvirate (cin)"] = "El Trono del Triunvirato (cin)",'},
  },
  ['Lamentos'] = {
    {name='Lamentos', count=1, confidence=0.20, sample='["The Wailing Caverns (Pet Battle Dungeon)"] = "Cuevas de los Lamentos (Calabozo de Duelo de Mascotas)",'},
  },
  ['GY'] = {
    {name='GY', count=1, confidence=0.20, sample='["SM Cathedral/GY (TEMP)"] = 6123,'},
  },
  ['JT'] = {
    {name='JT', count=1, confidence=0.20, sample='["[TEMP] JT (copy)"] = 7609,'},
  },
  ['Tower'] = {
    {name='Tower', count=5, confidence=1.00, sample='["Warden Tower (PH)"] = 8077,'},
  },
  ['Elunaria'] = {
    {name='Elunaria', count=1, confidence=0.20, sample='["Elunaria (cin)"] = 9306,'},
  },
  ['Lowlands'] = {
    {name='Lowlands', count=1, confidence=0.20, sample='["DEV Lowlands (DO NOT USE)"] = 13416,'},
  },
  ['GetAreaInfo'] = {
    {name='GetAreaInfo', count=1, confidence=0.20, sample='function lib:GetAreaInfo(zoneName)'},
    {name='C_Map.GetAreaInfo', count=1, confidence=0.20, sample='return C_Map.GetAreaInfo(data[zoneName])'},
  },
  ['PlayerLevel'] = {
    {name='PlayerLevel', count=93, confidence=1.00, sample='"Mulgore 67.8,59.9 -x- Southern Barrens 39.8,48.0 {cond:PlayerLevel()>10} {title:Go around the side of the Great Gate}",'},
  },
  ['PlayerCompletedQuest'] = {
    {name='PlayerCompletedQuest', count=357, confidence=1.00, sample='"Un'Goro Crater 50.4,7.9 <region:shapers_terrace> -x- Sholazar Basin 40.4,83.0 {mode:PORTAL} {template:portalauto} {cond:PlayerCompletedQuest(12613)}", -- Only if the player completed quest 12613 "Powering the Waygate - The Makers' Overlook"'},
  },
  ['ALGAR'] = {
    {name='ALGAR', count=3, confidence=0.60, sample='-----     KHAZ ALGAR (THE WAR WITHIN)     -----'},
  },
  ['Algar'] = {
    {name='Algar', count=2, confidence=0.40, sample='["Dalaran TWW"] = {[0]=2305,[1]=2306,[2]=2307},			-- Pre-Khaz Algar (TWW Intro)'},
  },
  ['Campaign'] = {
    {name='Campaign', count=1, confidence=0.20, sample='["Priory Scenario"] = {[0]=2330},				-- War Within Campaign (Priory of the Sacred Flame Scenario)'},
  },
  ['Rookery'] = {
    {name='Rookery', count=8, confidence=1.00, sample='--["The Rookery (The Rookery Landing)"] = {[0]=2315},'},
  },
  ['EJ_GetInstanceInfo'] = {
    {name='EJ_GetInstanceInfo', count=1, confidence=0.20, sample='-- /run D={}  for i=1,1000 do pcall(EJ_SelectInstance,i) local _, _, _, _, _, _, dungeonMapId, _ = EJ_GetInstanceInfo()  D[dungeonMapId or 0]=true end  ZGV:ShowDump(ZGV:Serialize(D),"")'},
    {name='DetailsFramework.EncounterJournal.EJ_GetInstanceInfo', count=10, confidence=1.00, sample='local name, description, bgImage, buttonImage, loreImage, dungeonAreaMapID, link = DetailsFramework.EncounterJournal.EJ_GetInstanceInfo (ejID)'},
  },
  ['Vindicaar'] = {
    {name='Vindicaar', count=3, confidence=0.60, sample='{"Krokuun/1","Krokuun/2"},			-- Vindicaar (Krokuun)'},
  },
  ['Lake'] = {
    {name='Lake', count=2, confidence=0.40, sample='{ 48.8,50.9, 50.8,50.7, 51.0,56.1, 48.2,56.4, "loop" }, -- Calston Lake (example)'},
  },
  ['GetLogIndexForQuestID'] = {
    {name='C_QuestLog.GetLogIndexForQuestID', count=3, confidence=0.60, sample='{top=911.40002441406, bottom=533.79998779297, left=-4434.2001953125, right=-4767.3002929688, target=1, cond=function() return C_QuestLog.GetLogIndexForQuestID(56719) end },--Only if on quest 56719, Alliance'},
  },
  ['Anguish'] = {
    {name='Anguish', count=6, confidence=1.00, sample='-- Pit of Anguish (Upper) -x- Pit of Anguish (Lower)'},
  },
  ['Outside'] = {
    {name='Outside', count=1, confidence=0.20, sample='--		Swamp of Sorrows 69.6,53.9 (Temple of Atal'Hakkar Outside (Entering Doorway Outside mini map))'},
  },
  ['Inside'] = {
    {name='Inside', count=1, confidence=0.20, sample='--		Swamp of Sorrows 69.8,52.9 (Temple of Atal'Hakkar Inside (going downstairs Inside mini map))'},
  },
  ['Halls'] = {
    {name='Halls', count=43, confidence=1.00, sample='--		Swamp of Sorrows 70.2,50.4 (5 yds into Broken Halls (swimming across pool indoors))'},
  },
  ['Hakkar'] = {
    {name='Hakkar', count=2, confidence=0.40, sample='--		Swamp of Sorrows 71.1,45.4 (5 yds entering indoor The Temple of Atal'Hakkar (hallway L))'},
  },
  ['Masks'] = {
    {name='Masks', count=1, confidence=0.20, sample='--		Swamp of Sorrows 74.3,44.5 (5 yds Entering Hall of Masks (exiting stairs hallway))'},
  },
  ['Archives'] = {
    {name='Archives', count=3, confidence=0.60, sample='-- The Eonian Archives (Bastion)'},
  },
  ['Vortrexxis'] = {
    {name='Vortrexxis', count=1, confidence=0.20, sample='-- Vortrexxis (Maldraxxus)'},
  },
  ['Secrets'] = {
    {name='Secrets', count=1, confidence=0.20, sample='-- Vault of Secrets (Korthia)'},
  },
  ['Market'] = {
    {name='Market', count=4, confidence=0.80, sample='--Tazavesh, the Veiled Market (Shadowlands)--'},
  },
  ['Sangua'] = {
    {name='Sangua', count=2, confidence=0.40, sample='--Invasion Point: Sangua (Krokuun)'},
  },
  ['Val'] = {
    {name='Val', count=2, confidence=0.40, sample='--Invasion Point: Val (Krokuun)'},
  },
  ['Naigtal'] = {
    {name='Naigtal', count=2, confidence=0.40, sample='--Invasion Point: Naigtal (Eredath)'},
  },
  ['Bonich'] = {
    {name='Bonich', count=2, confidence=0.40, sample='--Invasion Point: Bonich (Eredath)'},
  },
  ['Aurinor'] = {
    {name='Aurinor', count=2, confidence=0.40, sample='--Invasion Point: Aurinor (Antoran Wastes)'},
  },
  ['Stormwind'] = {
    {name='Stormwind', count=2, confidence=0.40, sample='-- Stormwind (The Eastern Earthshrine) - Elwynn Forest, Eastern Kingdoms --'},
  },
  ['Portal'] = {
    {name='Portal', count=9, confidence=1.00, sample='-- Oribos Transport Portal (Downstairs to Upstairs) #1'},
  },
  ['Pad'] = {
    {name='Pad', count=2, confidence=0.40, sample='-- Transport Pad (Enter the Vault of the Archon)'},
  },
  ['Commons'] = {
    {name='Commons', count=3, confidence=0.60, sample='-- Elysian Hold (Tamed Larion), Bastion -x- Everdrawn Commons (Tamed Larion), Bastion --'},
  },
  ['Precipice'] = {
    {name='Precipice', count=1, confidence=0.20, sample='-- Elysian Hold (Tamed Larion), Bastion -x- Fate's Precipice (Tamed Larion), Bastion --'},
  },
  ['Teleporter'] = {
    {name='Teleporter', count=2, confidence=0.40, sample='-- Necropolis Teleporter (Entering the Vortrexxis)'},
  },
  ['QuestActiveOrComplete'] = {
    {name='QuestActiveOrComplete', count=15, confidence=1.00, sample='"{cond:covenantnetwork() >= 2 and QuestActiveOrComplete(63543) and covenant('Necrolord')}",'},
  },
  ['Oribos'] = {
    {name='Oribos', count=1, confidence=0.20, sample='-- Ardenweald to Oribos (Portal non-existent on live)'},
  },
  ['Chamber'] = {
    {name='Chamber', count=2, confidence=0.40, sample='-- Winter Queen's Audience Chamber (Entering)'},
  },
  ['Mad'] = {
    {name='Mad', count=1, confidence=0.20, sample='-- Sanctuary of the Mad (Sinfall), Revendreth -x- The Shrouded Asylum, Revendreth'},
  },
  ['Sinfall'] = {
    {name='Sinfall', count=4, confidence=0.80, sample='-- Sinfall (Entering)'},
  },
  ['Guests'] = {
    {name='Guests', count=1, confidence=0.20, sample='-- Spire of the Unseen Guests (Ember Court) (Entering)'},
  },
  ['SINFALL'] = {
    {name='SINFALL', count=1, confidence=0.20, sample='-- SINFALL (VENTHYR COVENANT) --'},
  },
  ['Flyer'] = {
    {name='Flyer', count=2, confidence=0.40, sample='-- Sinfall Surface Flyer (Bat to fly out of Sinfall)'},
  },
  ['Kalimdor'] = {
    {name='Kalimdor', count=2, confidence=0.40, sample='-- Temple of the Moon - Darnassus, Kalimdor (Old Time) -to- Hellfire Peninsula, Outland (Portal Usable) --'},
  },
  ['Kingdoms'] = {
    {name='Kingdoms', count=16, confidence=1.00, sample='-- Northern Stranglethorn Vale, Kalimdor -to- Tirisfal Glades, Eastern Kingdoms (After Destruction) --CHECKED'},
  },
  ['Gnomeregan'] = {
    {name='Gnomeregan', count=6, confidence=1.00, sample='-- Dalaran (Legion) -to- Gnomeregan		(Gnomeregan Pet Battle Dungeon Reward) --'},
  },
  ['Stratholme'] = {
    {name='Stratholme', count=9, confidence=1.00, sample='-- Dalaran (Legion) -to- Stratholme		(Stratholme Pet Battle Dungeon Reward) --'},
  },
  ['Deadmines'] = {
    {name='Deadmines', count=14, confidence=1.00, sample='-- Dalaran (Legion) -to- Deadmines		(Deadmines Pet Battle Dungeon Reward) --'},
  },
  ['DK'] = {
    {name='DK', count=1, confidence=0.20, sample='-- DK (DEATHGATE)'},
  },
  ['MONKS'] = {
    {name='MONKS', count=1, confidence=0.20, sample='-- MONKS (Zen Pilgrimage)'},
  },
  ['Plaguefall'] = {
    {name='Plaguefall', count=7, confidence=1.00, sample='"Maldraxxus/0 59.60,65.31			<spell:354463>",			--Keystone Hero: Plaguefall (Path of the Plagued)'},
  },
  ['Scithe'] = {
    {name='Scithe', count=7, confidence=1.00, sample='"Ardenweald/0 35.41,54.11			<spell:354464>",			--Keystone Hero: Mists of Tirna Scithe (Path of the Misty Forest)'},
  },
  ['Atonement'] = {
    {name='Atonement', count=4, confidence=0.80, sample='"Revendreth/0 78.58,49.22			<spell:354465>",			--Keystone Hero: Halls of Atonement (Path of the Sinful Soul)'},
  },
  ['Pain'] = {
    {name='Pain', count=27, confidence=1.00, sample='"Maldraxxus/0 53.09,52.87			<spell:354467>",			--Keystone Hero: Theater of Pain (Path of the Undefeated)'},
  },
  ['Side'] = {
    {name='Side', count=7, confidence=1.00, sample='"Ardenweald/0 68.66,66.71			<spell:354468>",			--Keystone Hero: De Other Side (Path of the Scheming Loa)'},
  },
  ['Docks'] = {
    {name='Docks', count=7, confidence=1.00, sample='"Gorgrond/0 45.42,13.51				<spell:159896>",			--Keystone Hero: Iron Docks (Path of the Iron Prow)'},
  },
  ['Depot'] = {
    {name='Depot', count=9, confidence=1.00, sample='"Gorgrond 55.01,31.30				<spell:159900>",			--Keystone Hero: Grimrail Depot (Path of the Dark Rail)'},
  },
  ['Raids'] = {
    {name='Raids', count=3, confidence=0.60, sample='"Revendreth/0 46.37,41.50			<spell:373190>",			--Mythic: Fates of the Shadowlands Raids (Path of the Sire)'},
  },
  ['Freehold'] = {
    {name='Freehold', count=9, confidence=1.00, sample='"Tiragarde Sound/0 84.45,78.88			<spell:257701>",			--Keystone Hero: Freehold (Teleport to Freehold)'},
  },
  ['Lair'] = {
    {name='Lair', count=19, confidence=1.00, sample='"Highmountain/0 49.56,68.66			<spell:205379>",			--Keystone Hero: Neltharion's Lair (Teleport: Neltharion's Lair)'},
  },
  ['Underrot'] = {
    {name='Underrot', count=7, confidence=1.00, sample='"Nazmir/0 51.38,64.83				<spell:272269>",			--Keystone Hero: The Underrot (Teleport: The Underrot)'},
  },
  ['Pinnacle'] = {
    {name='Pinnacle', count=14, confidence=1.00, sample='"Uldum 76.81,84.55				<spell:88775>",				--Keystone Hero: The Vortex Pinnacle (Teleport to The Vortex Pinnacle)'},
  },
  ['Inn'] = {
    {name='Inn', count=3, confidence=0.60, sample='-- Snug Harbor Inn (Tradewinds Market)'},
  },
  ['Tale'] = {
    {name='Tale', count=1, confidence=0.20, sample='-- Dead Man's Tale (Freehold)'},
  },
  ['Octopus'] = {
    {name='Octopus', count=1, confidence=0.20, sample='-- The Curious Octopus (Mariner's Row)'},
  },
  ['Flagon'] = {
    {name='Flagon', count=1, confidence=0.20, sample='-- The Golden Flagon (Brennadam)'},
  },
  ['Bar'] = {
    {name='Bar', count=1, confidence=0.20, sample='-- The Drust Bar (Anyport)'},
  },
  ['Roost'] = {
    {name='Roost', count=2, confidence=0.40, sample='-- Falcon's Roost (Falconhurst)'},
  },
  ['Home'] = {
    {name='Home', count=1, confidence=0.20, sample='-- Northwood Home (Arom's Stand)'},
  },
  ['Larder'] = {
    {name='Larder', count=1, confidence=0.20, sample='-- The Swine's Larder (Fallhaven)'},
  },
  ['Throne'] = {
    {name='Throne', count=27, confidence=1.00, sample='-- The Hozen Throne (Grand Bazaar)'},
  },
  ['You'] = {
    {name='You', count=1, confidence=0.20, sample='-- Spirits Be With You (Port of Zandalar)'},
  },
  ['Jani'] = {
    {name='Jani', count=1, confidence=0.20, sample='-- Atal'Jani (The Zocalo)'},
  },
  ['Vines'] = {
    {name='Vines', count=1, confidence=0.20, sample='-- Village in the Vines (The Shrunken Head)'},
  },
  ['Ruins'] = {
    {name='Ruins', count=1, confidence=0.20, sample='-- Zul'jan Ruins (Zul'jan)'},
  },
  ['Fallen'] = {
    {name='Fallen', count=1, confidence=0.20, sample='-- Wayshrine of the Fallen (Zo'bal Ruins)'},
  },
  ['Cottage'] = {
    {name='Cottage', count=1, confidence=0.20, sample='-- Thornton's Cottage (Bradensbrook)'},
  },
  ['Compound'] = {
    {name='Compound', count=1, confidence=0.20, sample='-- Prepfoot Compound (Prepfoot)'},
  },
  ['Barracks'] = {
    {name='Barracks', count=1, confidence=0.20, sample='-- Greywatch Barracks (Greywatch - Alliance Only)'},
  },
  ['Nighthold'] = {
    {name='Nighthold', count=7, confidence=1.00, sample='-- The Nighthold (Nightborned Allied Race Default Hearthstone)'},
  },
  ['KALIMDOR'] = {
    {name='KALIMDOR', count=2, confidence=0.40, sample='-----     KALIMDOR (VANILLA + CATACLYSM)     -----'},
  },
  ['KINGDOMS'] = {
    {name='KINGDOMS', count=2, confidence=0.40, sample='-----     EASTERN KINGDOMS (VANILLA + CATACLYSM)     -----'},
  },
  ['OUTLAND'] = {
    {name='OUTLAND', count=2, confidence=0.40, sample='-----     OUTLAND (THE BURNING CRUSADE)     -----'},
  },
  ['NORTHREND'] = {
    {name='NORTHREND', count=2, confidence=0.40, sample='-----     NORTHREND (WRATH OF THE LICH KING)     -----'},
  },
  ['PANDARIA'] = {
    {name='PANDARIA', count=2, confidence=0.40, sample='-----     PANDARIA (MISTS OF PANDARIA)     -----'},
  },
  ['DRAENOR'] = {
    {name='DRAENOR', count=2, confidence=0.40, sample='-----     DRAENOR (WARLORDS OF DRAENOR)     -----'},
  },
  ['ISLES'] = {
    {name='ISLES', count=4, confidence=0.80, sample='-----     BROKEN ISLES (LEGION)     -----'},
  },
  ['ARGUS'] = {
    {name='ARGUS', count=2, confidence=0.40, sample='-----     ARGUS (LEGION)     -----'},
  },
  ['ZANDALAR'] = {
    {name='ZANDALAR', count=2, confidence=0.40, sample='-----     ZANDALAR (BATTLE FOR AZEROTH)     -----'},
  },
  ['TIRAS'] = {
    {name='TIRAS', count=2, confidence=0.40, sample='-----     KUL'TIRAS (BATTLE FOR AZEROTH)     -----'},
  },
  ['NAZJATAR'] = {
    {name='NAZJATAR', count=2, confidence=0.40, sample='-----     NAZJATAR (BATTLE FOR AZEROTH)     -----'},
  },
  ['SHADOWLANDS'] = {
    {name='SHADOWLANDS', count=2, confidence=0.40, sample='-----     THE SHADOWLANDS (SHADOWLANDS)     -----'},
  },
  ['SetNonBlocking'] = {
    {name='SetNonBlocking', count=2, confidence=0.40, sample='if control.SetNonBlocking then control:SetNonBlocking(false) end'},
  },
  ['ApplySkinToSteps'] = {
    {name='ApplySkinToSteps', count=2, confidence=0.40, sample='frame:ApplySkinToSteps()'},
  },
  ['ApplyBackdrop'] = {
    {name='ApplyBackdrop', count=1, confidence=0.20, sample=':ApplyBackdrop()'},
  },
  ['GenericDragStartHandler'] = {
    {name='ZGV.GenericDragStartHandler', count=2, confidence=0.40, sample='function ZGV.GenericDragStartHandler(source,button)'},
  },
  ['GenericDragStopHandler'] = {
    {name='ZGV.GenericDragStopHandler', count=3, confidence=0.60, sample='function ZGV.GenericDragStopHandler()'},
  },
  ['CreateLines'] = {
    {name='CreateLines', count=5, confidence=1.00, sample='self:CreateLines()'},
  },
  ['ApplySkinToLines'] = {
    {name='ApplySkinToLines', count=2, confidence=0.40, sample='self:ApplySkinToLines()'},
  },
  ['ShowClickersIfFocused'] = {
    {name='ShowClickersIfFocused', count=2, confidence=0.40, sample='self:ShowClickersIfFocused()'},
  },
  ['ShowBorderIfCurrent'] = {
    {name='ShowBorderIfCurrent', count=2, confidence=0.40, sample='self:ShowBorderIfCurrent()'},
  },
  ['NextLine'] = {
    {name='NextLine', count=7, confidence=1.00, sample='lineframe = self:NextLine()'},
  },
  ['ShowAsHeader'] = {
    {name='ShowAsHeader', count=2, confidence=0.40, sample='lineframe:ShowAsHeader((numbertext or "")..(leveltext or "")..(reqtext or "")..(titletext or "")..(betatext or "")..(prereqtext or "")..(devtext or ""))'},
  },
  ['SetMultilineIndent'] = {
    {name='SetMultilineIndent', count=5, confidence=1.00, sample='--lineframe.label:SetMultilineIndent(1)'},
  },
  ['ShowAsGrind'] = {
    {name='ShowAsGrind', count=2, confidence=0.40, sample='lineframe:ShowAsGrind(goal,indent..goaltxt,briefhidden)'},
  },
  ['ShowAsGoal'] = {
    {name='ShowAsGoal', count=2, confidence=0.40, sample='lineframe:ShowAsGoal(goal,indent..goaltxt,briefhidden)'},
  },
  ['ShowAsGoalTip'] = {
    {name='ShowAsGoalTip', count=2, confidence=0.40, sample='lineframe:ShowAsGoalTip(goal,indent.."|cffeeeecc".. goal.tooltip.."|r")'},
  },
  ['ShowAsLoadguide'] = {
    {name='ShowAsLoadguide', count=2, confidence=0.40, sample='lineframe:ShowAsLoadguide(goal,indent..goaltxt)'},
  },
  ['ShowAsSecText'] = {
    {name='ShowAsSecText', count=4, confidence=0.80, sample='lineframe:ShowAsSecText(indent..partystatus)'},
  },
  ['SetBackColor'] = {
    {name='SetBackColor', count=9, confidence=1.00, sample='if color then lineframe:SetBackColor(ZGV.F.HTMLColor(color)) end'},
  },
  ['SetBackgroundForStep'] = {
    {name='SetBackgroundForStep', count=2, confidence=0.40, sample='self:SetBackgroundForStep()'},
  },
  ['SetTextIndent'] = {
    {name='SetTextIndent', count=3, confidence=0.60, sample='lineframe:SetTextIndent()'},
  },
  ['SetIconTexture'] = {
    {name='SetIconTexture', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_StepLine_Mixin:SetIconTexture(tex)'},
  },
  ['PlayFadeAnim'] = {
    {name='PlayFadeAnim', count=3, confidence=0.60, sample='function ZGV_DefaultSkin_StepLine_Mixin:PlayFadeAnim(sr,sg,sb,sa,r,g,b,a)'},
  },
  ['SetFadeAnimRGBA'] = {
    {name='SetFadeAnimRGBA', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_StepLine_Mixin:SetFadeAnimRGBA(r,g,b,a)'},
  },
  ['GetBackdropColor'] = {
    {name='GetBackdropColor', count=15, confidence=1.00, sample='local oldr,oldg,oldb,olda = self.back:GetBackdropColor()'},
  },
  ['HideBack'] = {
    {name='HideBack', count=5, confidence=1.00, sample='function ZGV_DefaultSkin_StepLine_Mixin:HideBack()'},
  },
  ['ShowAsStickySeparator'] = {
    {name='ShowAsStickySeparator', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_StepLine_Mixin:ShowAsStickySeparator(sr,sg,sb)  -- used only in inline sticky mode, thus unused'},
  },
  ['ShowAsStickyLine'] = {
    {name='ShowAsStickyLine', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_StepLine_Mixin:ShowAsStickyLine(sr,sg,sb)  -- used only in inline sticky mode, thus unused'},
  },
  ['ShowAsSubtitle'] = {
    {name='ShowAsSubtitle', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_StepLine_Mixin:ShowAsSubtitle()'},
  },
  ['SetBackHighlight'] = {
    {name='SetBackHighlight', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_StepLine_Mixin:SetBackHighlight(highlight)  -- better, but unused'},
  },
  ['AddHighlightToBack'] = {
    {name='AddHighlightToBack', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_StepLine_Mixin:AddHighlightToBack()'},
  },
  ['ShowGoalBackground'] = {
    {name='ShowGoalBackground', count=4, confidence=0.80, sample='self:ShowGoalBackground()'},
  },
  ['ShowGoalIcon'] = {
    {name='ShowGoalIcon', count=3, confidence=0.60, sample='self:ShowGoalIcon()'},
  },
  ['ShowAsPriText'] = {
    {name='ShowAsPriText', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_StepLine_Mixin:ShowAsPriText(text)  --unused'},
  },
  ['IsTruncated'] = {
    {name='IsTruncated', count=3, confidence=0.60, sample='--if text:IsTruncated() then textheight=textheight+self.db.profile.fontsize+6 end'},
  },
  ['OnBackdropLoaded'] = {
    {name='OnBackdropLoaded', count=3, confidence=0.60, sample='if self.SetBackdrop then self:OnBackdropLoaded() end'},
  },
  ['SearchButton_OnClick'] = {
    {name='SearchButton_OnClick', count=1, confidence=0.20, sample='--function ZGV_DefaultSkin_Frame_Mixin:SearchButton_OnClick(button)'},
  },
  ['ShowFindNearest'] = {
    {name='ShowFindNearest', count=1, confidence=0.20, sample='--	ZGV.WhoWhere:ShowFindNearest()'},
  },
  ['SearchButton_OnEnter'] = {
    {name='SearchButton_OnEnter', count=1, confidence=0.20, sample='--function ZGV_DefaultSkin_Frame_Mixin:SearchButton_OnEnter(button)'},
  },
  ['CreateProgressBar'] = {
    {name='CreateProgressBar', count=2, confidence=0.40, sample='local function CreateProgressBar(frame)'},
  },
  ['GetRestState'] = {
    {name='GetRestState', count=1, confidence=0.20, sample='local rested = GetRestState()'},
  },
  ['ProgressBar_OnClick'] = {
    {name='ProgressBar_OnClick', count=2, confidence=0.40, sample='local function ProgressBar_OnClick(self)'},
  },
  ['ScrollByDelta'] = {
    {name='ScrollByDelta', count=3, confidence=0.60, sample='Scroll:SetScript("OnMouseWheel",function(f,delta) Scroll:ScrollByDelta(-delta) end)'},
  },
  ['OldSetVerticalScroll'] = {
    {name='OldSetVerticalScroll', count=1, confidence=0.20, sample='return self:OldSetVerticalScroll(self.Bar:GetValue())'},
  },
  ['GetContentHeight'] = {
    {name='GetContentHeight', count=1, confidence=0.20, sample='if ZGV.db.profile.showcountsteps>0 then return max(0,self:GetContentHeight()-self:GetHeight()) or 0'},
  },
  ['SetupBorderFlash'] = {
    {name='SetupBorderFlash', count=2, confidence=0.40, sample='self:SetupBorderFlash()'},
  },
  ['SetupDragWithAnything'] = {
    {name='SetupDragWithAnything', count=2, confidence=0.40, sample='self:SetupDragWithAnything()'},
  },
  ['CreateStepPools'] = {
    {name='CreateStepPools', count=2, confidence=0.40, sample='self:CreateStepPools()'},
  },
  ['HookControlMessages'] = {
    {name='HookControlMessages', count=2, confidence=0.40, sample='self:HookControlMessages()'},
  },
  ['SetMaxFramerate'] = {
    {name='SetMaxFramerate', count=1, confidence=0.20, sample='if f.SetMaxFramerate then f:SetMaxFramerate(99) end  -- 4.1 PTR issue? is SetMaxFramerate gone?'},
  },
  ['GetObjectType'] = {
    {name='GetObjectType', count=19, confidence=1.00, sample='if v.GetObjectType and v:GetObjectType()=="Button" then'},
  },
  ['SetUp'] = {
    {name='SetUp', count=1, confidence=0.20, sample='--ZGV.ProgressBar:SetUp()'},
  },
  ['ZGVFSectionDropDown_Initialize'] = {
    {name='ZGVFSectionDropDown_Initialize', count=1, confidence=0.20, sample='function ZGVFSectionDropDown_Initialize(frame,level,menulist)'},
  },
  ['ZGVFSectionDropDown_Func'] = {
    {name='ZGVFSectionDropDown_Func', count=1, confidence=0.20, sample='function ZGVFSectionDropDown_Func()'},
  },
  ['ToggleDropDownMenu'] = {
    {name='ToggleDropDownMenu', count=1, confidence=0.20, sample='--	ToggleDropDownMenu(1, nil, ZygorGuidesViewerFrame_SectionDropDown, ZygorGuidesViewerFrame, 0, 0);'},
  },
  ['ZGV_SetHeight'] = {
    {name='ZGV_SetHeight', count=1, confidence=0.20, sample='function ZGV_SetHeight(self,height)'},
  },
  ['ZygorGuidesViewerFrame_HideTooltip'] = {
    {name='ZygorGuidesViewerFrame_HideTooltip', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_HideTooltip(self)'},
  },
  ['LockButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.LockButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.LockButton_OnClick(self,button)'},
  },
  ['LockButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.LockButton_OnEnter', count=2, confidence=0.40, sample='ZGV_DefaultSkin_Frame_Mixin.LockButton_OnEnter(self,button)'},
  },
  ['HookMenuMessages'] = {
    {name='HookMenuMessages', count=3, confidence=0.60, sample='local function HookMenuMessages(menu,message)'},
  },
  ['MenuSettingsButton_OnClick'] = {
    {name='MenuSettingsButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin:MenuSettingsButton_OnClick()'},
  },
  ['MenuSettingsButton_OnEnter'] = {
    {name='MenuSettingsButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin:MenuSettingsButton_OnEnter()'},
  },
  ['MenuAdditionalButton_OnClick'] = {
    {name='MenuAdditionalButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin:MenuAdditionalButton_OnClick()'},
  },
  ['ShowGuideHelper'] = {
    {name='ShowGuideHelper', count=1, confidence=0.20, sample='func=function() ZGV.QuestDB:ShowGuideHelper() end,'},
  },
  ['MenuAdditionalButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.MenuAdditionalButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.MenuAdditionalButton_OnEnter(self)'},
  },
  ['PrevButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnClick(self,button)'},
  },
  ['PrevButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnEnter(self)'},
  },
  ['NextButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.NextButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.NextButton_OnClick(self,button)'},
  },
  ['NextButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.NextButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.NextButton_OnEnter(self)'},
  },
  ['NextButtonSpecial_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnClick(self)'},
  },
  ['NextButtonSpecial_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnEnter(self)'},
  },
  ['HelpButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnClick(self,button)'},
  },
  ['HelpButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnEnter(self)'},
  },
  ['ReportButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnClick(self,button)'},
  },
  ['ReportButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnEnter(self)'},
  },
  ['GuideShareButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnClick(self,button)'},
  },
  ['MiniButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnClick(self,button)'},
  },
  ['MiniButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnEnter', count=2, confidence=0.40, sample='ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnEnter(self,button)'},
  },
  ['CloseButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.CloseButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.CloseButton_OnClick(self,button)'},
  },
  ['ReportStepButton_OnClick'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnClick', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnClick(self,button)'},
  },
  ['ReportStepButton_OnEnter'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnEnter', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnEnter(self)'},
  },
  ['Scroll_OnUpdate'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.Scroll_OnUpdate', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.Scroll_OnUpdate(self,elapsed)'},
  },
  ['GetVerticalScrollRange'] = {
    {name='GetVerticalScrollRange', count=2, confidence=0.40, sample='if self:GetVerticalScrollRange()==0 then'},
  },
  ['Scroll_Slider_OnValueChanged'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.Scroll_Slider_OnValueChanged', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.Scroll_Slider_OnValueChanged(self,value)'},
  },
  ['StepNum_OnMouseWheel'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.StepNum_OnMouseWheel', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.StepNum_OnMouseWheel(self,delta)'},
  },
  ['ThinFlash_OnLoad'] = {
    {name='ZGV_DefaultSkin_Frame_Mixin.ThinFlash_OnLoad', count=1, confidence=0.20, sample='function ZGV_DefaultSkin_Frame_Mixin.ThinFlash_OnLoad(self)'},
  },
  ['HighlightOn'] = {
    {name='HighlightOn', count=1, confidence=0.20, sample='function ZGV_ResizerMixin:HighlightOn(button)'},
  },
  ['HighlightOff'] = {
    {name='HighlightOff', count=1, confidence=0.20, sample='function ZGV_ResizerMixin:HighlightOff(button)'},
  },
  ['SizeOff'] = {
    {name='SizeOff', count=1, confidence=0.20, sample='function ZGV_ResizerMixin:SizeOff(button)'},
  },
  ['AssignTextures'] = {
    {name='AssignTextures', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_TitleButton_Mixin:AssignTextures(set,key)'},
  },
  ['SetSizeFromSkin'] = {
    {name='SetSizeFromSkin', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_TitleButton_Mixin:SetSizeFromSkin()'},
  },
  ['SetTextureInsetsFromSkin'] = {
    {name='SetTextureInsetsFromSkin', count=3, confidence=0.60, sample='function ZGV_DefaultSkin_TitleButton_Mixin:SetTextureInsetsFromSkin()'},
  },
  ['AssignTexture'] = {
    {name='AssignTexture', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_MenuButton_Mixin:AssignTexture(set,key)'},
  },
  ['SetLabelFont'] = {
    {name='SetLabelFont', count=2, confidence=0.40, sample='function ZGV_DefaultSkin_MenuButton_Mixin:SetLabelFont()'},
  },
  ['ZygorGuidesViewerFrame_OnKeyDown'] = {
    {name='ZygorGuidesViewerFrame_OnKeyDown', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_OnKeyDown(self,value)'},
  },
  ['ZygorGuidesViewerFrame_OnKeyUp'] = {
    {name='ZygorGuidesViewerFrame_OnKeyUp', count=1, confidence=0.20, sample='function ZygorGuidesViewerFrame_OnKeyUp(self,value)'},
  },
  ['Starlight'] = {
    {name='Starlight', count=1, confidence=0.20, sample='local STYLE = ZGV.Skins:GetSkin("default"):AddStyle("starlight-glass","Starlight (Glass)", "starlight")'},
  },
  ['CreateWorkFrame'] = {
    {name='CreateWorkFrame', count=3, confidence=0.60, sample='Scan:CreateWorkFrame()'},
  },
  ['CreateUIFrame'] = {
    {name='CreateUIFrame', count=2, confidence=0.40, sample='Scan:CreateUIFrame()'},
  },
  ['ImportHourly'] = {
    {name='ImportHourly', count=2, confidence=0.40, sample='Scan:ImportHourly()'},
  },
  ['ScanFast'] = {
    {name='ScanFast', count=3, confidence=0.60, sample='function Scan:ScanFast()'},
  },
  ['CanSendAuctionQuery'] = {
    {name='CanSendAuctionQuery', count=3, confidence=0.60, sample='--if not select(2,CanSendAuctionQuery()) then return false,"can't scan yet" end'},
  },
  ['PerformQuery'] = {
    {name='PerformQuery', count=2, confidence=0.40, sample='self.Proxy:PerformQuery("", nil, nil, 0, false, -1, true) -- FULL SCAN!'},
  },
  ['SetState'] = {
    {name='SetState', count=33, confidence=1.00, sample='self:SetState("SS_QUERYING")'},
  },
  ['ScanByName'] = {
    {name='ScanByName', count=3, confidence=0.60, sample='function Scan:ScanByName(name,itemid,dontanalyze)'},
  },
  ['SendBrowseQuery'] = {
    {name='C_AuctionHouse.SendBrowseQuery', count=1, confidence=0.20, sample='C_AuctionHouse.SendBrowseQuery(Scan.BrowseQuery);'},
    {name='SendBrowseQuery', count=1, confidence=0.20, sample='AuctionHouseFrame:SendBrowseQuery(item.name,0,0,{4,5,6,7,8,10,9})'},
  },
  ['ListenByKey'] = {
    {name='ListenByKey', count=2, confidence=0.40, sample='function Scan:ListenByKey(itemkey)'},
  },
  ['CanScanFast'] = {
    {name='CanScanFast', count=3, confidence=0.60, sample='function Scan:CanScanFast()'},
  },
  ['ResultsListComplete'] = {
    {name='ResultsListComplete', count=1, confidence=0.20, sample='function Scan:ResultsListComplete()'},
  },
  ['GetAuctionCount'] = {
    {name='GetAuctionCount', count=3, confidence=0.60, sample='local count = self:GetAuctionCount("list")'},
  },
  ['GetAuctionItemInfo'] = {
    {name='GetAuctionItemInfo', count=3, confidence=0.60, sample='local name, texture, count, quality,canUse,  level,levelColHeader,minBid,minIncrement,buyoutPrice,  bidAmount,ishighBidder,bidderFullName,ownerName,ownerFullName,  saleStatus,itemId,hasAllInfo = GetAuctionItemInfo("list", row)'},
  },
  ['DumpAuctionItems'] = {
    {name='DumpAuctionItems', count=1, confidence=0.20, sample='function Scan:DumpAuctionItems(focusrow)'},
  },
  ['AH'] = {
    {name='AH', count=1, confidence=0.20, sample='ZGV:Debug("Here's what's on the AH (%d rows):",GetNumAuctionItems("list"))'},
  },
  ['GetNumAuctionItems'] = {
    {name='GetNumAuctionItems', count=2, confidence=0.40, sample='ZGV:Debug("Here's what's on the AH (%d rows):",GetNumAuctionItems("list"))'},
  },
  ['RILU'] = {
    {name='RILU', count=1, confidence=0.20, sample='self:Debug("RILU (auctions updated)")'},
  },
  ['SaveLastReplicateCount'] = {
    {name='SaveLastReplicateCount', count=2, confidence=0.40, sample='self:SaveLastReplicateCount()'},
  },
  ['ScanAuctions'] = {
    {name='ScanAuctions', count=3, confidence=0.60, sample='self:ScanAuctions()'},
  },
  ['HasFullBrowseResults'] = {
    {name='C_AuctionHouse.HasFullBrowseResults', count=3, confidence=0.60, sample='if C_AuctionHouse.HasFullBrowseResults() then'},
  },
  ['GetBrowseResults'] = {
    {name='C_AuctionHouse.GetBrowseResults', count=4, confidence=0.80, sample='local browseresults = C_AuctionHouse.GetBrowseResults()'},
  },
  ['ScanOne'] = {
    {name='ScanOne', count=8, confidence=1.00, sample='--Scan:ScanOne()'},
  },
  ['HasFullCommoditySearchResults'] = {
    {name='C_AuctionHouse.HasFullCommoditySearchResults', count=2, confidence=0.40, sample='if C_AuctionHouse.HasFullCommoditySearchResults(Scan.ScannedItemID or Scan.ListenItemID) then'},
  },
  ['HasFullItemSearchResults'] = {
    {name='C_AuctionHouse.HasFullItemSearchResults', count=3, confidence=0.60, sample='if Scan.ScannedItemKey and C_AuctionHouse.HasFullItemSearchResults(Scan.ScannedItemKey) then'},
  },
  ['CanScanCallback'] = {
    {name='CanScanCallback', count=1, confidence=0.20, sample='if can_scan and self.CanScanCallback then self.CanScanCallback() self.CanScanCallback=nil end'},
  },
  ['GetItemKeyInfo'] = {
    {name='C_AuctionHouse.GetItemKeyInfo', count=2, confidence=0.40, sample='local keyinfo = C_AuctionHouse.GetItemKeyInfo(itemKey);'},
  },
  ['HasSearchResults'] = {
    {name='C_AuctionHouse.HasSearchResults', count=2, confidence=0.40, sample='if not C_AuctionHouse.HasSearchResults(itemKey) then'},
  },
  ['SendSearchQuery'] = {
    {name='C_AuctionHouse.SendSearchQuery', count=1, confidence=0.20, sample='C_AuctionHouse.SendSearchQuery(itemKey, {}, false);'},
  },
  ['GetNumItemSearchResults'] = {
    {name='C_AuctionHouse.GetNumItemSearchResults', count=3, confidence=0.60, sample='local searchresults = C_AuctionHouse.GetNumItemSearchResults(AuctionHouseFrame.ItemSellFrame.listDisplayedItemKey)'},
  },
  ['GetItemSearchResultInfo'] = {
    {name='C_AuctionHouse.GetItemSearchResultInfo', count=3, confidence=0.60, sample='local data = C_AuctionHouse.GetItemSearchResultInfo(AuctionHouseFrame.ItemSellFrame.listDisplayedItemKey,i)'},
  },
  ['GetNumCommoditySearchResults'] = {
    {name='C_AuctionHouse.GetNumCommoditySearchResults', count=3, confidence=0.60, sample='local searchresults = C_AuctionHouse.GetNumCommoditySearchResults(desiredID)'},
  },
  ['GetCommoditySearchResultInfo'] = {
    {name='C_AuctionHouse.GetCommoditySearchResultInfo', count=3, confidence=0.60, sample='local data = C_AuctionHouse.GetCommoditySearchResultInfo(desiredID,i)'},
  },
  ['AnalyzeAuctions'] = {
    {name='AnalyzeAuctions', count=7, confidence=1.00, sample='Scan:AnalyzeAuctions("reset")'},
  },
  ['Work'] = {
    {name='Work', count=4, confidence=0.80, sample='function Scan:Work()'},
  },
  ['GetNumReplicateItems'] = {
    {name='C_AuctionHouse.GetNumReplicateItems', count=9, confidence=1.00, sample='local GNRI = C_AuctionHouse.GetNumReplicateItems()'},
  },
  ['IsFullScan'] = {
    {name='IsFullScan', count=5, confidence=1.00, sample='if self.Proxy:IsFullScan() then'},
  },
  ['FailCallback'] = {
    {name='ZGVG.Scan.FailCallback', count=1, confidence=0.20, sample='if ZGVG.Scan.FailCallback then ZGVG.Scan.FailCallback() ZGVG.Scan.FailCallback=nil end'},
  },
  ['PrepareBeforeScanning'] = {
    {name='PrepareBeforeScanning', count=2, confidence=0.40, sample='function Scan:PrepareBeforeScanning()'},
  },
  ['GetReplicateItemInfo'] = {
    {name='C_AuctionHouse.GetReplicateItemInfo', count=2, confidence=0.40, sample='-- C_AuctionHouse.GetReplicateItemInfo(row) causes RILU. GetReplicateItemLINK does NOT!! -- Does too, just maybe not in same frame.'},
  },
  ['GetReplicateItemLink'] = {
    {name='C_AuctionHouse.GetReplicateItemLink', count=1, confidence=0.20, sample='if name then link = C_AuctionHouse.GetReplicateItemLink(row) end'},
  },
  ['GetAuctionItemLink'] = {
    {name='GetAuctionItemLink', count=2, confidence=0.40, sample='link = GetAuctionItemLink("list", row)'},
  },
  ['ItemIDStrfromLink'] = {
    {name='ItemIDStrfromLink', count=1, confidence=0.20, sample='local IDstring = zc.ItemIDStrfromLink (itemLink);'},
  },
  ['Atr_ILevelHist_Update'] = {
    {name='Atr_ILevelHist_Update', count=1, confidence=0.20, sample='Atr_ILevelHist_Update(itemLink)'},
  },
  ['StringSame'] = {
    {name='StringSame', count=1, confidence=0.20, sample='if (self.exactMatchText == nil or zc.StringSame (name, self.exactMatchText)) then'},
  },
  ['Atr_FindScanAndInit'] = {
    {name='Atr_FindScanAndInit', count=1, confidence=0.20, sample='self.items[IDstring] = Atr_FindScanAndInit (IDstring, name)'},
  },
  ['AddScanItem'] = {
    {name='AddScanItem', count=1, confidence=0.20, sample='scn:AddScanItem (count, buyoutPrice, owner, 1, curpage)'},
  },
  ['UpdateItemLink'] = {
    {name='UpdateItemLink', count=1, confidence=0.20, sample='scn:UpdateItemLink (itemLink)'},
  },
  ['DebugItem'] = {
    {name='DebugItem', count=2, confidence=0.40, sample='if save_itemId then self:DebugItem(save_itemId) end'},
  },
  ['ResultCallback'] = {
    {name='ZGVG.Scan.ResultCallback', count=1, confidence=0.20, sample='if ZGVG.Scan.ResultCallback then ZGVG.Scan.ResultCallback() ZGVG.Scan.ResultCallback=nil end'},
  },
  ['QueryAuctionItems'] = {
    {name='QueryAuctionItems', count=2, confidence=0.40, sample='--if not (self.queried_by_name or self.queried_by_partial_name or self.queried_by_link or self.WAITFORII_callbacks or ZGV.Gold.Appraiser.AttemptingToBuyout) then ZGV:Debug("&gold Scan: Sending abominable empty query")  QueryAuctionItems("chrzaszcz brzmi w trzcinie", nil, nil, 0, false, -1, false) end'},
  },
  ['ReAnalyze'] = {
    {name='ReAnalyze', count=1, confidence=0.20, sample='function Scan:ReAnalyze()'},
  },
  ['GetAnalysis'] = {
    {name='GetAnalysis', count=1, confidence=0.20, sample='function Scan:GetAnalysis(itemid)'},
  },
  ['GetPrices'] = {
    {name='GetPrices', count=1, confidence=0.20, sample='function Scan:GetPrices(itemid)'},
  },
  ['UIFrameOnUpdate'] = {
    {name='Scan.UIFrameOnUpdate', count=2, confidence=0.40, sample='function Scan.UIFrameOnUpdate(frame,elapsed)'},
  },
  ['Analyzing'] = {
    {name='Analyzing', count=1, confidence=0.20, sample='elseif Scan.state=="SS_ANALYZING" then  s=("Analyzing (%d%%)"):format((Scan.analysis_progress or 0)*100)'},
  },
  ['Scanning'] = {
    {name='Scanning', count=1, confidence=0.20, sample='elseif Scan.state=="SS_SCANNING" then  s=("Scanning (%d%%)"):format((Scan.scan_progress  or 0)*100)'},
  },
  ['UIFrameOnShow'] = {
    {name='Scan.UIFrameOnShow', count=1, confidence=0.20, sample='function Scan.UIFrameOnShow(frame)'},
  },
  ['UIFrameOnEvent'] = {
    {name='Scan.UIFrameOnEvent', count=1, confidence=0.20, sample='function Scan.UIFrameOnEvent(frame,event,arg1,arg2)'},
  },
  ['ShowScanButton'] = {
    {name='ShowScanButton', count=2, confidence=0.40, sample='Scan:ShowScanButton()'},
  },
  ['DebugL'] = {
    {name='DebugL', count=11, confidence=1.00, sample='local function DebugL(s,...) self:Debug(color..":|r "..s,...) end'},
  },
  ['EstimateTimeUntilHourly'] = {
    {name='EstimateTimeUntilHourly', count=1, confidence=0.20, sample='function Scan:EstimateTimeUntilHourly()'},
  },
  ['GetLastReplicateCount'] = {
    {name='GetLastReplicateCount', count=3, confidence=0.60, sample='function Scan:GetLastReplicateCount()'},
  },
  ['ReplicateItems'] = {
    {name='C_AuctionHouse.ReplicateItems', count=2, confidence=0.40, sample='C_AuctionHouse.ReplicateItems()'},
  },
  ['GetInventoryItems'] = {
    {name='GetInventoryItems', count=5, confidence=1.00, sample='Appraiser:GetInventoryItems()'},
  },
  ['UpdateItemInInventory'] = {
    {name='UpdateItemInInventory', count=2, confidence=0.40, sample='Appraiser:UpdateItemInInventory(invItem)'},
  },
  ['SelectNextShoppingItem'] = {
    {name='SelectNextShoppingItem', count=5, confidence=1.00, sample='ZGV:ScheduleTimer(function() Appraiser:SelectNextShoppingItem() end,0)'},
  },
  ['GetSellingItemIndex'] = {
    {name='GetSellingItemIndex', count=3, confidence=0.60, sample='local currow = self:GetSellingItemIndex(self.ActiveSellingItem)'},
  },
  ['ScrollToSellingItem'] = {
    {name='ScrollToSellingItem', count=2, confidence=0.40, sample='ZGV:ScheduleTimer(function() Appraiser:ScrollToSellingItem() end,0)'},
  },
  ['RefreshSellingItem'] = {
    {name='RefreshSellingItem', count=2, confidence=0.40, sample='Appraiser:RefreshSellingItem()'},
  },
  ['ScanAll'] = {
    {name='ScanAll', count=2, confidence=0.40, sample='function Appraiser:ScanAll()'},
  },
  ['Scan'] = {
    {name='Scan', count=3, confidence=0.60, sample='self:Scan("scanfast")'},
  },
  ['UpdateScannedList'] = {
    {name='UpdateScannedList', count=4, confidence=0.80, sample='self:UpdateScannedList()'},
  },
  ['UpdateProgressBar'] = {
    {name='UpdateProgressBar', count=5, confidence=1.00, sample='self:UpdateProgressBar()'},
  },
  ['CanScanByName'] = {
    {name='CanScanByName', count=3, confidence=0.60, sample='elseif mode=="scannew" and ZGVG.Scan:CanScanByName() then'},
  },
  ['StartNewItemScan'] = {
    {name='StartNewItemScan', count=2, confidence=0.40, sample='self:StartNewItemScan()'},
  },
  ['StartManualScan'] = {
    {name='StartManualScan', count=2, confidence=0.40, sample='function Appraiser:StartManualScan()'},
  },
  ['ScanNextItem'] = {
    {name='ScanNextItem', count=3, confidence=0.60, sample='self:ScanNextItem()'},
  },
  ['ProcessBrowseResults'] = {
    {name='ProcessBrowseResults', count=2, confidence=0.40, sample='function Appraiser:ProcessBrowseResults()'},
  },
  ['UpdateCoverFrame'] = {
    {name='UpdateCoverFrame', count=3, confidence=0.60, sample='self:UpdateCoverFrame()'},
  },
  ['AbortManualScan'] = {
    {name='AbortManualScan', count=3, confidence=0.60, sample='if self.manualScanning or self.manualBuyScanning then self:AbortManualScan() else ZGVG.Scan:Abort() end'},
  },
  ['SaveScanTable'] = {
    {name='SaveScanTable', count=2, confidence=0.40, sample='function Appraiser:SaveScanTable()'},
  },
  ['Appraiser_SetTooltipData'] = {
    {name='Appraiser_SetTooltipData', count=19, confidence=1.00, sample='local function Appraiser_SetTooltipData(tooltip, itemLink)'},
  },
  ['AddDoubleLine'] = {
    {name='AddDoubleLine', count=31, confidence=1.00, sample='tooltip:AddDoubleLine("  |cffeeeeeeCurrent lowest price:|r ",minprice_g)'},
  },
  ['Appraiser_ClearTooltipData'] = {
    {name='Appraiser_ClearTooltipData', count=1, confidence=0.20, sample='local function Appraiser_ClearTooltipData(tooltip, ...)'},
  },
  ['OnAuctionSetMode'] = {
    {name='OnAuctionSetMode', count=3, confidence=0.60, sample='function Appraiser:OnAuctionSetMode(f,mode)'},
  },
  ['MakeOptionsButton'] = {
    {name='MakeOptionsButton', count=2, confidence=0.40, sample='Appraiser:MakeOptionsButton()'},
  },
  ['GetDisplayMode'] = {
    {name='GetDisplayMode', count=2, confidence=0.40, sample='--local mode = AuctionHouseFrame:GetDisplayMode()'},
  },
  ['DisplayBuyItem'] = {
    {name='DisplayBuyItem', count=2, confidence=0.40, sample='Appraiser:DisplayBuyItem()'},
  },
  ['WipeSellHistoricalData'] = {
    {name='WipeSellHistoricalData', count=1, confidence=0.20, sample='--Appraiser:WipeSellHistoricalData()'},
  },
  ['WipeSellPricingData'] = {
    {name='WipeSellPricingData', count=1, confidence=0.20, sample='--Appraiser:WipeSellPricingData()'},
  },
  ['FocusOnSelectedAuction'] = {
    {name='FocusOnSelectedAuction', count=2, confidence=0.40, sample='Appraiser:FocusOnSelectedAuction()'},
  },
  ['PostMessageCallback'] = {
    {name='PostMessageCallback', count=1, confidence=0.20, sample='self.PostMessageCallback()'},
  },
  ['ClearShoppingItemDetails'] = {
    {name='ClearShoppingItemDetails', count=1, confidence=0.20, sample='Appraiser:ClearShoppingItemDetails()'},
  },
  ['ShowSearchFrame'] = {
    {name='ShowSearchFrame', count=1, confidence=0.20, sample='Appraiser:ShowSearchFrame(true)'},
  },
  ['SelectBuyoutRow'] = {
    {name='SelectBuyoutRow', count=1, confidence=0.20, sample='--Appraiser:SelectBuyoutRow()'},
  },
  ['GetBuyoutPrice'] = {
    {name='GetBuyoutPrice', count=2, confidence=0.40, sample='Appraiser:GetBuyoutPrice(Appraiser.SelectedShoppingItem) -- refresh, but leave SelectedBuyAuction alone if it's set.'},
  },
  ['GetShoppingAuctions'] = {
    {name='GetShoppingAuctions', count=2, confidence=0.40, sample='Appraiser:GetShoppingAuctions()'},
  },
  ['SetBuyoutLabels'] = {
    {name='SetBuyoutLabels', count=2, confidence=0.40, sample='Appraiser:SetBuyoutLabels()'},
  },
  ['GetTrueItemCount'] = {
    {name='Appraiser.GetTrueItemCount', count=3, confidence=0.60, sample='function Appraiser.GetTrueItemCount(item)'},
  },
  ['MarkActiveItem'] = {
    {name='MarkActiveItem', count=2, confidence=0.40, sample='Appraiser:MarkActiveItem()'},
  },
  ['UpdateButtonStates'] = {
    {name='UpdateButtonStates', count=2, confidence=0.40, sample='self:UpdateButtonStates()'},
  },
  ['FindNextBuyout'] = {
    {name='FindNextBuyout', count=2, confidence=0.40, sample='Appraiser:FindNextBuyout(dfnb)'},
  },
  ['GoToPage'] = {
    {name='GoToPage', count=1, confidence=0.20, sample='ZGV.Gold.Scan.Proxy:GoToPage(Appraiser.GoToPage)'},
  },
  ['SelectNextSellingItem'] = {
    {name='SelectNextSellingItem', count=4, confidence=0.80, sample='self:SelectNextSellingItem()'},
  },
  ['CreateTrackerFrame'] = {
    {name='CreateTrackerFrame', count=2, confidence=0.40, sample='function Appraiser:CreateTrackerFrame()'},
  },
  ['ShowItemTooltip'] = {
    {name='ShowItemTooltip', count=3, confidence=0.60, sample='{ title="", width=15, headerwidth=15, titlej="LEFT", textj="LEFT", name="icon", type="icon", onentertooltip=function(row) Appraiser:ShowItemTooltip(row.item) end},'},
  },
  ['MakeInventoryTable'] = {
    {name='MakeInventoryTable', count=2, confidence=0.40, sample='self.Inventory_Frame = self:MakeInventoryTable()'},
  },
  ['MakeBuyTable'] = {
    {name='MakeBuyTable', count=2, confidence=0.40, sample='self.Buy_Frame = self:MakeBuyTable()'},
  },
  ['SetAuctionButtonDisabled'] = {
    {name='SetAuctionButtonDisabled', count=2, confidence=0.40, sample='function Appraiser:SetAuctionButtonDisabled(disabled)'},
  },
  ['ActivateSellItem'] = {
    {name='ActivateSellItem', count=3, confidence=0.60, sample='self:ActivateSellItem(row.item)'},
  },
  ['InventoryRowMenu'] = {
    {name='InventoryRowMenu', count=2, confidence=0.40, sample='self:InventoryRowMenu(row)'},
  },
  ['ActivateBuyItem'] = {
    {name='ActivateBuyItem', count=3, confidence=0.60, sample='self:ActivateBuyItem(row.item)'},
  },
  ['ShoppingRowMenu'] = {
    {name='ShoppingRowMenu', count=2, confidence=0.40, sample='self:ShoppingRowMenu(row)'},
  },
  ['BattlePetToolTip_Show'] = {
    {name='BattlePetToolTip_Show', count=1, confidence=0.20, sample='BattlePetToolTip_Show(tonumber(BattlePetId), tonumber(BattlePetLevel), tonumber(BattlePetRarity), tonumber(BattlePetHP), tonumber(BattlePetAtt), tonumber(BattlePetSpeed), BattlePetName)'},
  },
  ['SetBagItem'] = {
    {name='SetBagItem', count=1, confidence=0.20, sample='GameTooltip:SetBagItem(item.bag,item.slot)'},
  },
  ['SetItemByID'] = {
    {name='SetItemByID', count=1, confidence=0.20, sample='GameTooltip:SetItemByID(item.itemid)'},
  },
  ['ShowDisabledTooltip'] = {
    {name='ShowDisabledTooltip', count=1, confidence=0.20, sample='function Appraiser:ShowDisabledTooltip(object)'},
  },
  ['TabKeyNavigation'] = {
    {name='TabKeyNavigation', count=1, confidence=0.20, sample='function Appraiser:TabKeyNavigation(parent,orderarray,field)'},
  },
  ['ApplyDebugDisplay'] = {
    {name='ApplyDebugDisplay', count=1, confidence=0.20, sample='function Appraiser:ApplyDebugDisplay()'},
  },
  ['AddItemToInventory'] = {
    {name='AddItemToInventory', count=3, confidence=0.60, sample='self:AddItemToInventory(bag,slot)'},
  },
  ['SetSellFields'] = {
    {name='SetSellFields', count=1, confidence=0.20, sample='Appraiser:SetSellFields()'},
  },
  ['SetSellHistoricalLabels'] = {
    {name='SetSellHistoricalLabels', count=1, confidence=0.20, sample='Appraiser:SetSellHistoricalLabels()'},
  },
  ['GetItemKeyFromItem'] = {
    {name='C_AuctionHouse.GetItemKeyFromItem', count=1, confidence=0.20, sample='local itemkey = C_AuctionHouse.GetItemKeyFromItem(location)'},
  },
  ['OnOverlayClick'] = {
    {name='OnOverlayClick', count=2, confidence=0.40, sample='AuctionHouseFrame.ItemSellFrame:OnOverlayClick()'},
  },
  ['GetItemLocation'] = {
    {name='GetItemLocation', count=2, confidence=0.40, sample='location = AuctionHouseFrame.CommoditiesSellFrame.ItemDisplay:GetItemLocation()'},
    {name='C_Item.GetItemLocation', count=1, confidence=0.20, sample='function C_Item.GetItemLocation() end'},
  },
  ['Poppy'] = {
    {name='Poppy', count=1, confidence=0.20, sample='[72237]=ST_HERB,--Rain Poppy  ( or silkweed below )'},
  },
  ['RemoveItemFromBuy'] = {
    {name='RemoveItemFromBuy', count=2, confidence=0.40, sample='Appraiser:RemoveItemFromBuy(row)'},
  },
  ['RemoveAllItemsFromBuy'] = {
    {name='RemoveAllItemsFromBuy', count=2, confidence=0.40, sample='Appraiser:RemoveAllItemsFromBuy(row)'},
  },
  ['SearchForBuyItem'] = {
    {name='SearchForBuyItem', count=2, confidence=0.40, sample='Appraiser:SearchForBuyItem(item)'},
  },
  ['QueryItem'] = {
    {name='QueryItem', count=1, confidence=0.20, sample='AuctionHouseFrame:QueryItem(15,selected.itemKey)'},
  },
  ['SelectBrowseResult'] = {
    {name='SelectBrowseResult', count=1, confidence=0.20, sample='AuctionHouseFrame:SelectBrowseResult(selected)'},
  },
  ['Mechanar'] = {
    {name='Mechanar', count=7, confidence=1.00, sample='|tip you'll have to complete the Mechanar (Fresh From the Mechanar) And Shadow Labyrinth (The Lexicon Demonica) portions of the dungeon guide in order to recive this quest'},
  },
  ['Labyrinth'] = {
    {name='Labyrinth', count=7, confidence=1.00, sample='|tip you'll have to complete the Mechanar (Fresh From the Mechanar) And Shadow Labyrinth (The Lexicon Demonica) portions of the dungeon guide in order to recive this quest'},
  },
  ['Honored'] = {
    {name='Honored', count=1, confidence=0.20, sample='If you are below Honored (5,999) you can grind Normal Hellfire Ramparts, Blood Furnace and Shattered Halls.'},
  },
  ['VehicleExit'] = {
    {name='VehicleExit', count=74, confidence=1.00, sample='Click the red arrow to get off the bear|script VehicleExit()|outvehicle|c'},
  },
  ['DAILIES'] = {
    {name='DAILIES', count=15, confidence=1.00, sample='|tip You must turn in the Up To The Challenge quest before you can accept this quest.  The Up To The Challenge quest is turned in at the end of the ARGENT TOURNAMENT GROUNDS DAILIES (ASPIRANT RANK) guide section.'},
  },
  ['Uncommon'] = {
    {name='Uncommon', count=65, confidence=1.00, sample='|tip You can get these by Disenchanting item level 5-16 Uncommon (green) armor and weapons.'},
  },
  ['Rare'] = {
    {name='Rare', count=30, confidence=1.00, sample='|tip You can get these by Disenchanting Rare (blue) items from any Outland zone.'},
  },
  ['Epic'] = {
    {name='Epic', count=9, confidence=1.00, sample='|tip You can get these by Disenchanting Epic (purple) items from any Outland raids.'},
  },
  ['Concealment'] = {
    {name='Concealment', count=4, confidence=0.80, sample='Train Potion of Concealment (Rank 1) |learn Potion of Concealment##252400 |goto Boralus/0 74.21,6.53'},
  },
  ['Potion'] = {
    {name='Potion', count=13, confidence=1.00, sample='Train Coastal Healing Potion (Rank 2) |learn Coastal Healing Potion##252383 |goto Boralus/0 74.21,6.53'},
  },
  ['Agility'] = {
    {name='Agility', count=4, confidence=0.80, sample='Train Battle Potion of Agility (Rank 1) |learn Battle Potion of Agility##279159 |goto Boralus/0 74.21,6.53'},
  },
  ['Horizon'] = {
    {name='Horizon', count=2, confidence=0.40, sample='Train Flask of the Vast Horizon (Rank 1) |learn Flask of the Vast Horizon##252354 |goto Boralus/0 74.21,6.53'},
  },
  ['Currents'] = {
    {name='Currents', count=2, confidence=0.40, sample='Train Flask of the Currents (Rank 1) |learn Flask of the Currents##252348 |goto Boralus/0 74.21,6.53'},
  },
  ['Undertow'] = {
    {name='Undertow', count=4, confidence=0.80, sample='Train Flask of the Undertow (Rank 1) |learn Flask of the Undertow##252357 |goto Boralus/0 74.21,6.53'},
  },
  ['Dagger'] = {
    {name='Dagger', count=6, confidence=1.00, sample='Train Stormsteel Dagger (Rank 1) |learn Stormsteel Dagger##253156 |goto Boralus/0 73.40,8.45'},
  },
  ['Rissole'] = {
    {name='Rissole', count=4, confidence=0.80, sample='Train Abyssal-Fried Rissole (Rank 1) |learn Abyssal-Fried Rissole##297084 |goto Nazjatar/0 37.98,52.91'},
  },
  ['Versatility'] = {
    {name='Versatility', count=2, confidence=0.40, sample='Train Seal of Versatility (Rank 2) |learn Seal of Versatility##255089 |goto Boralus/0 74.02,11.56'},
  },
  ['Strike'] = {
    {name='Strike', count=43, confidence=1.00, sample='Train Pact of Critical Strike (Rank 2) |learn Pact of Critical Strike##255090 |goto Boralus/0 74.02,11.56'},
  },
  ['Navigation'] = {
    {name='Navigation', count=4, confidence=0.80, sample='Train Weapon Enchant - Quick Navigation (Rank 1) |learn Weapon Enchant - Quick Navigation##268894 |goto Boralus/0 74.02,11.56'},
  },
  ['Brilliance'] = {
    {name='Brilliance', count=4, confidence=0.80, sample='Train Machinist's Brilliance (Rank 1) |learn Machinist's Brilliance##298433 |goto Nazjatar/0 37.93,53.18'},
  },
  ['War'] = {
    {name='War', count=9, confidence=1.00, sample='Train Darkmoon Card of War (Rank 1) |learn Darkmoon Card of War##278527 |goto Boralus/0 73.39,6.32'},
  },
  ['Mittens'] = {
    {name='Mittens', count=6, confidence=1.00, sample='Train Notorious Combatant's Satin Mittens (Rank 1) |learn Notorious Combatant's Satin Mittens##294835 |goto Nazjatar/0 38.01,53.59'},
  },
  ['Felslate'] = {
    {name='Felslate', count=29, confidence=1.00, sample='|tip Use the "Leystone Ore & Felslate (Mining Route)" guide to gather them, if you have Mining.'},
  },
  ['Meat'] = {
    {name='Meat', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Cooking\\Farming Guides\\Aethereal Meat (Bastion)",{'},
  },
  ['Haunch'] = {
    {name='Haunch', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Cooking\\Farming Guides\\Phantasmal Haunch (Ardenweald)",{'},
  },
  ['Shank'] = {
    {name='Shank', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Cooking\\Farming Guides\\Shadowy Shank (Ardenweald)",{'},
  },
  ['Ribs'] = {
    {name='Ribs', count=9, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Cooking\\Farming Guides\\Tenebrous Ribs (Maldraxxus)",{'},
  },
  ['Bone'] = {
    {name='Bone', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Skinning\\Farming Guides\\Pallid Bone (Bastion)",{'},
  },
  ['Silk'] = {
    {name='Silk', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Tailoring\\Farming Guides\\Lightless Silk (Ardenweald)",{'},
  },
  ['Cloth'] = {
    {name='Cloth', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Profession Guides\\Tailoring\\Farming Guides\\Shrouded Cloth (Ardenweald)",{'},
  },
  ['Juice'] = {
    {name='Juice', count=1, confidence=0.20, sample='|tip Artisanal Berry Juice (Vendor): 13'},
  },
  ['Potato'] = {
    {name='Potato', count=1, confidence=0.20, sample='|tip Ohn'ahran Potato (Vendor): 16'},
  },
  ['Blend'] = {
    {name='Blend', count=1, confidence=0.20, sample='|tip Three-Cheese Blend (Vendor): 14'},
  },
  ['Ingredients'] = {
    {name='Ingredients', count=1, confidence=0.20, sample='|tip Conveniently Packaged Ingredients (Vendor): 128'},
  },
  ['Core'] = {
    {name='Core', count=6, confidence=1.00, sample='Click Here to Farm in Molten Core (Best) |confirm'},
  },
  ['Skaggldrynk'] = {
    {name='Skaggldrynk', count=1, confidence=0.20, sample='Train Skaggldrynk (Rank 1) |learn Skaggldrynk##188316 |goto Dalaran L/10 42.18,32.31'},
  },
  ['Grace'] = {
    {name='Grace', count=1, confidence=0.20, sample='Train Potion of Deadly Grace (Rank 1) |learn Potion of Deadly Grace##188325 |goto Dalaran L/10 42.18,32.30'},
  },
  ['Demon'] = {
    {name='Demon', count=1, confidence=0.20, sample='Train Flask of the Seventh Demon (Rank 1) |learn Flask of the Seventh Demon##188340 |goto Dalaran L/10 42.18,32.30'},
  },
  ['Armies'] = {
    {name='Armies', count=2, confidence=0.40, sample='Train Flask of the Countless Armies (Rank 1) |learn Flask of the Countless Armies##188343 |goto Dalaran L/10 42.18,32.30'},
  },
  ['Scars'] = {
    {name='Scars', count=2, confidence=0.40, sample='Train Flask of Ten Thousand Scars (Rank 1) |learn Flask of Ten Thousand Scars##188346 |goto Dalaran L/10 42.18,32.30'},
  },
  ['Darkbough'] = {
    {name='Darkbough', count=7, confidence=1.00, sample='|tip Use the "Emerald Nightmare - Darkbough (LFR)" guide to accomplish this.'},
  },
  ['Waistguard'] = {
    {name='Waistguard', count=2, confidence=0.40, sample='Train Demonsteel Waistguard (Rank 1) |learn Demonsteel Waistguard##182945 |goto Suramar/0 30.11,53.26'},
  },
  ['Charge'] = {
    {name='Charge', count=3, confidence=0.60, sample='Train Gunpowder Charge (Rank 2) |learn Gunpowder Charge##199000 |goto Dalaran L/11 72.19,24.44'},
  },
  ['Aquaducts'] = {
    {name='Aquaducts', count=6, confidence=1.00, sample='|tip Use the "Nighthold - Arcing Aquaducts (LFR)" raid guide to accomplish this.'},
  },
  ['Loop'] = {
    {name='Loop', count=4, confidence=0.80, sample='Train Skystone Loop (Rank 1) |learn Skystone Loop Rank 1##195857 |goto Dalaran L/10 39.82,34.09'},
  },
  ['Pendant'] = {
    {name='Pendant', count=3, confidence=0.60, sample='Train Deep Amber Pendant (Rank 1) |learn Deep Amber Pendant Rank 1##195859 |goto Dalaran L/10 39.82,34.09'},
  },
  ['Girdle'] = {
    {name='Girdle', count=2, confidence=0.40, sample='Train Gravenscale Girdle (Rank 2) |learn Gravenscale Girdle##194760'},
  },
  ['Chimaera'] = {
    {name='Chimaera', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Chimaeras\\Green Chimaera (Rare Spawn)",{'},
  },
  ['Drakeadon'] = {
    {name='Drakeadon', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Core Hounds\\Drake Hounds\\Drakeadon (Rare Spawn)",{'},
  },
  ['Devilsaur'] = {
    {name='Devilsaur', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Devilsaurs\\Green Devilsaur (Rare Spawn)",{'},
  },
  ['Colossi'] = {
    {name='Colossi', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Silithids\\Silithid Colossi\\Damaged Blue Silithid Colossi (Rare Spawn)",{'},
  },
  ['Fox'] = {
    {name='Fox', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Spirit Beasts\\Spirit Foxes\\Lightning Spirit Fox (Rare Spawn)",{'},
  },
  ['Worm'] = {
    {name='Worm', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Worms\\Ghostly White Worm (Rare Spawn)",{'},
  },
  ['Scarab'] = {
    {name='Scarab', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Beetles\\Scarabs\\Turquoise-Spotted Plum Scarab (Rare Spawn)",{'},
  },
  ['Beetle'] = {
    {name='Beetle', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Beetles\\Green Beetle (Rare Spawn)",{'},
  },
  ['Boar'] = {
    {name='Boar', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Boars\\Ghostly Diseased Boar (Rare Spawn)",{'},
  },
  ['Lion'] = {
    {name='Lion', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Cats\\Lions\\White Lion (Rare Spawn)",{'},
  },
  ['Cat'] = {
    {name='Cat', count=29, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Cats\\Mystic Cats\\Brown and Tan Mystic Cat (Rare Spawn)",{'},
  },
  ['Dog'] = {
    {name='Dog', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Dogs\\Demon Dogs\\White Demon Dog (Rare Spawn)",{'},
  },
  ['Gorilla'] = {
    {name='Gorilla', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Gorillas\\White Gorilla (Rare Spawn)",{'},
  },
  ['Fez'] = {
    {name='Fez', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Monkeys\\Black Monkey with Fez (Rare Spawn)",{'},
  },
  ['Ravager'] = {
    {name='Ravager', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Ravagers\\Orange and Magenta Ravager (Rare Spawn)",{'},
  },
  ['Scorpion'] = {
    {name='Scorpion', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Scorpids\\Rugged Scorpions\\Blue Rugged Scorpion (Rare Spawn)",{'},
  },
  ['Worg'] = {
    {name='Worg', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Ground Pets\\Wolves\\Saber Worgs\\Ghostly Black Saber Worg (Rare Spawn)",{'},
  },
  ['Bat'] = {
    {name='Bat', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Bats\\Ghostly Tan Bat (Rare Spawn)",{'},
  },
  ['Owl'] = {
    {name='Owl', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Birds of Prey\\Owls\\Sapphire Owl (Rare Spawn)",{'},
  },
  ['Vulture'] = {
    {name='Vulture', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Carrion Birds\\Two-Headed Vultures\\Ghostly White Two-Headed Vulture (Rare Spawn)",{'},
  },
  ['Dragonhawk'] = {
    {name='Dragonhawk', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Dragonhawks\\Black Dragonhawk (Rare Spawn)",{'},
  },
  ['Moth'] = {
    {name='Moth', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Moths\\Green and Blue Moth (Rare Spawn)",{'},
  },
  ['Wasp'] = {
    {name='Wasp', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Wasps\\Black Wasp (Rare Spawn)",{'},
  },
  ['Serpent'] = {
    {name='Serpent', count=34, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Flying Pets\\Wind Serpents\\Spiked Wind Serpents\\Blue and White Spiked Wind Serpent (Rare Spawn)",{'},
  },
  ['Crab'] = {
    {name='Crab', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Water Pets\\Crabs\\Spiked Crabs\\Gem Crab (Rare Spawn)",{'},
  },
  ['Turtle'] = {
    {name='Turtle', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Water Pets\\Turtles\\Ancient Turtles\\Fiery Ancient Turtle (Rare Spawn)",{'},
  },
  ['Zara'] = {
    {name='Zara', count=4, confidence=0.80, sample='|tip Use the "Que Zara(lek), Zara(lek)" Achievement guide to accomplish this.'},
  },
  ['Guide'] = {
    {name='Guide', count=7, confidence=1.00, sample='Click Here to Load {b}Dragonflight Full Zones Leveling Guide (Story + Side Quests){} |confirm |loadguide "Leveling Guides\\Dragonflight (10-70)\\Full Zones (Story + Side Quests)\\Intro & The Waking Shores (Full Zone)"'},
  },
  ['Zone'] = {
    {name='Zone', count=64, confidence=1.00, sample='Click Here to Load the Full Zone (Story + Side Quests) Leveling Guide |confirm |loadguide "Leveling Guides\\The War Within (70-80)\\Full Zones (Story + Side Quests)\\Intro & Isle of Dorn (Full Zone)" |or'},
  },
  ['Promotion'] = {
    {name='Promotion', count=1, confidence=0.20, sample='This mount is tied to a Steelseries Promotion (unknown if it's obtainable through other sources). |confirm |next'},
  },
  ['Cartel'] = {
    {name='Cartel', count=2, confidence=0.40, sample='accept Exalted with the Bilgewater Cartel (Paragon) |only if questactive(85806) |or'},
  },
  ['Dumpsters'] = {
    {name='Dumpsters', count=1, confidence=0.20, sample='|tip Loot Trash Piles, Big Trash Dumpsters (at renown 13), and treasure chests, kill rares, complete world quests, and complete the Scrap Event to loot the Uncovered Strongbox.'},
  },
  ['Basilisk'] = {
    {name='Basilisk', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Legion Pets\\Ground Pets\\Basilisks\\Spiny Basilisks\\Purple Spiny Basilisk (Legion)",{'},
  },
  ['Eagle'] = {
    {name='Eagle', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Legion Pets\\Flying Pets\\Birds of Prey\\Eagles\\Brown Eagle (Legion)",{'},
  },
  ['Hippogryph'] = {
    {name='Hippogryph', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Legion Pets\\Flying Pets\\Feathermanes\\Hippogryphs\\Pale Hippogryph (Rare Spawn)",{'},
  },
  ['Rider'] = {
    {name='Rider', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Hunter Pets\\Legion Pets\\Flying Pets\\Feathermanes\\Wind Riders\\Blue Wind Rider (Rare Spawn)",{'},
  },
  ['Anniversary'] = {
    {name='Anniversary', count=2, confidence=0.40, sample='This pet is only attainable during WoW's 10th Anniversary (November 21, 2014 to January 6, 2015)'},
  },
  ['Battleground'] = {
    {name='Battleground', count=4, confidence=0.80, sample='Win 40 Rated Battleground (10v10) Matches |achieve 9236/2 |or'},
  },
  ['Kodo'] = {
    {name='Kodo', count=2, confidence=0.40, sample='description="This guide will help you acquire the Sunwalker Kodo (Paladin only) mount.",'},
  },
  ['Warhorse'] = {
    {name='Warhorse', count=2, confidence=0.40, sample='description="This guide will help you acquire the Thalassian Warhorse (Paladin only) mount.",'},
  },
  ['Charger'] = {
    {name='Charger', count=4, confidence=0.80, sample='description="This guide will help you acquire the Thalassian Charger (Paladin only) mount.",'},
  },
  ['Felsteed'] = {
    {name='Felsteed', count=2, confidence=0.40, sample='description="This guide will help you acquire the Felsteed (Warlock only) mount.",'},
  },
  ['Dreadsteed'] = {
    {name='Dreadsteed', count=2, confidence=0.40, sample='description="This guide will help you acquire the Dreadsteed (Warlock only) mount.",'},
  },
  ['Player'] = {
    {name='Player', count=4, confidence=0.80, sample='|tip To change an instance to heroic mode: right click your portait and hover over "Dungeon Difficulty", click on 5 Player (Heroic). You should see the entrance portal change into a giant skull.'},
  },
  ['Crusader'] = {
    {name='Crusader', count=16, confidence=1.00, sample='The Swift Horde Wolf dropped from the Argent Crusader Tribute Chest in Trial of the Grand Crusader (10H) with all 50 attempts left'},
  },
  ['Raider'] = {
    {name='Raider', count=46, confidence=1.00, sample='This mount is a reward for completing the _"Glory of the Icecrown Raider (10 player)"_ achievement.'},
  },
  ['Control_'] = {
    {name='Control_', count=2, confidence=0.40, sample='The easiest way to attain this achievement is to have some form of _Crowd Control_ (Sheep Excluded).'},
  },
  ['Container'] = {
    {name='Container', count=2, confidence=0.40, sample='Buy any Unclaimed Black Market Container(s) you wish.'},
  },
  ['Commanders'] = {
    {name='Commanders', count=4, confidence=0.80, sample='|tip The best strategy to defeat the Boneguard Commanders is to always make sure your shield is up by using your Defend ability.  Make sure your shield is stacked to 3 charges before you begin the fights.  When the fights begin, immediately use your Charge ability on the Boneguard Commanders (use your Shield-Breaker ability as you circle around to come back to the Boneguard Commanders, if possible).  Stay in very close range and spam your Thrust ability.  Remember to keep your shield maxed at 3 charges, also.  Eventually, the Boneguard Commanders will try to run away to get into Charge range.  When they start to run away, start spamming your Charge ability until you charge them in the back (use your Shield-Breaker ability as you circle around to come back to the Boneguard Commanders, if possible), then get back into melee range and start spamming your Thrust ability again.  Keep repeating this process until you kill 3 Boneguard Commanders.  Also, it may help you try to party with other players while doing this quest, as it will get done much faster and there are always other players in this area doing this same daily quest.'},
  },
  ['Flayedwing'] = {
    {name='Flayedwing', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Mounts\\Flying Mounts\\Covenant Mounts\\Kyrian Mounts\\Gruesome Flayedwing (Kyrian)",{'},
  },
  ['Dredwing'] = {
    {name='Dredwing', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Mounts\\Flying Mounts\\Covenant Mounts\\Kyrian Mounts\\Silvertip Dredwing (Kyrian)",{'},
  },
  ['Acidmaw'] = {
    {name='Acidmaw', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Mounts\\Ground Mounts\\Covenant Mounts\\Kyrian Mounts\\Pale Acidmaw (Kyrian)",{'},
  },
  ['Duskrunner'] = {
    {name='Duskrunner', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Mounts\\Flying Mounts\\Covenant Mounts\\Necrolord Mounts\\Dauntless Duskrunner (Necrolord)",{'},
  },
  ['Gorm'] = {
    {name='Gorm', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Pets & Mounts Guides\\Mounts\\Ground Mounts\\Miscellaneous Mounts\\Vicious War Gorm (Alliance)",{'},
  },
  ['Beams'] = {
    {name='Beams', count=2, confidence=0.40, sample='"_Suramar Beams (Requires Group)_\n"..'},
  },
  ['Toy'] = {
    {name='Toy', count=2, confidence=0.40, sample='"_Lost Cat Toy (Requires Group)_\n"..'},
  },
  ['Puzzle'] = {
    {name='Puzzle', count=2, confidence=0.40, sample='"_Jumping Puzzle (Requires Group)_\n"..'},
  },
  ['Lava'] = {
    {name='Lava', count=2, confidence=0.40, sample='"_Arcane Lava (Requires Group)_\n"..'},
  },
  ['Hivemind'] = {
    {name='Hivemind', count=2, confidence=0.40, sample='"_Claiming The Hivemind (Requires Group)_",'},
  },
  ['Carrier'] = {
    {name='Carrier', count=123, confidence=1.00, sample='collect Cat Carrier (Black Tabby)##8491 |n'},
  },
  ['Elekk'] = {
    {name='Elekk', count=2, confidence=0.40, sample='description="This guide will help you acquire the Exarch's Elekk (Paladin only) mount.",'},
  },
  ['Hellscream'] = {
    {name='Hellscream', count=2, confidence=0.40, sample='This mount used to be awarded for completing the achievement "Ahead of the Curve: Garrosh Hellscream (10/25 player)" in Siege of Orgrimmar'},
  },
  ['Lure'] = {
    {name='Lure', count=2, confidence=0.40, sample='use the Beguiling Lure (Optional)##440025'},
  },
  ['Crate'] = {
    {name='Crate', count=11, confidence=1.00, sample='buy 1 Rabbit Crate (Snowshoe)##8497 |goto Dun Morogh 70.60,49.00'},
  },
  ['Herald'] = {
    {name='Herald', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Pets & Mounts Guides\\Battle Pets\\Humanoid Pets\\Guild Herald (Horde)")'},
  },
  ['Page'] = {
    {name='Page', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Pets & Mounts Guides\\Battle Pets\\Humanoid Pets\\Guild Page (Horde)")'},
  },
  ['Hatchling'] = {
    {name='Hatchling', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Pets & Mounts Guides\\Battle Pets\\Humanoid Pets\\Moonkin Hatchling (Horde)")'},
  },
  ['Silkworm'] = {
    {name='Silkworm', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Pets & Mounts Guides\\Hunter Pets\\Beast Mastery Exotic Pets\\Worms\\Silkworms\\Purple Silkworm (Rare Spawn)")'},
  },
  ['Intellect'] = {
    {name='Intellect', count=2, confidence=0.40, sample='You will also need a Scroll of Intellect (the level 1 version)'},
  },
  ['Orphanage'] = {
    {name='Orphanage', count=26, confidence=1.00, sample='You may only get _three_ of these pets _per year_ from _completing_ the quest lines _Back to the Orphanage (Shattrath)_, _Warden of the Alliance_, and _Back to the Orphanage (Dalaran)_'},
  },
  ['Atticus'] = {
    {name='Atticus', count=6, confidence=1.00, sample='|tip Use the "Atticus (Abomination)" guide to unlock this vendor if you already haven't.'},
  },
  ['Cage'] = {
    {name='Cage', count=10, confidence=1.00, sample='buy Parrot Cage (Cockatiel)##8496 |n'},
  },
  ['Ulduar'] = {
    {name='Ulduar', count=3, confidence=0.60, sample='|tip This is only be achieved in Ulduar (25 player) Hard Mode.'},
  },
  ['Observed'] = {
    {name='Observed', count=1, confidence=0.20, sample='Earn the "Observed (25 player)" Achievement |achieve 3037'},
  },
  ['Press'] = {
    {name='Press', count=4, confidence=0.80, sample='rare=[[Kafa Press (Frozen Trail Packer)]],'},
  },
  ['Whelk'] = {
    {name='Whelk', count=4, confidence=0.80, sample='rare=[[Manipulator's Talisman on a Glinting Rapana Whelk (65552)]],'},
  },
  ['Ancients'] = {
    {name='Ancients', count=4, confidence=0.80, sample='|tip When you click the Blade, you will have to fight the three Ancients (one at a time).'},
  },
  ['Terror'] = {
    {name='Terror', count=11, confidence=1.00, sample='rare=[[Roardan the Sky Terror (Horde)]],'},
  },
  ['Pools'] = {
    {name='Pools', count=8, confidence=1.00, sample='rare=[[Dessicus of the Dead Pools (Horde)]],'},
  },
  ['Igneous'] = {
    {name='Igneous', count=2, confidence=0.40, sample='rare=[[Crater Lord Igneous (Horde)]],'},
  },
  ['Doomwing'] = {
    {name='Doomwing', count=2, confidence=0.40, sample='rare=[[Charl Doomwing (Horde)]],'},
  },
  ['Violent'] = {
    {name='Violent', count=2, confidence=0.40, sample='rare=[[Erosian the Violent (Horde)]],'},
  },
  ['Devourer'] = {
    {name='Devourer', count=2, confidence=0.40, sample='rare=[[Khargax the Devourer (Horde)]],'},
  },
  ['Praetorian'] = {
    {name='Praetorian', count=2, confidence=0.40, sample='rare=[[Fungal Praetorian (Horde)]],'},
  },
  ['Biolante'] = {
    {name='Biolante', count=2, confidence=0.40, sample='rare=[[Biolante (Horde)]],'},
  },
  ['CancelSpellByName'] = {
    {name='CancelSpellByName', count=15, confidence=1.00, sample='|script local d=C_UnitAuras.GetPlayerAuraBySpellID(1214374) if d then CancelSpellByName(d.name) end |only if hasbuff(1214374)'},
  },
  ['DRUID'] = {
    {name='DRUID', count=8, confidence=1.00, sample='//DRUID (BALANCE) - START'},
  },
  ['Spellbook'] = {
    {name='Spellbook', count=26, confidence=1.00, sample='|tip Open your Spellbook (press P) and move the rest of your abilities to your action bars.'},
  },
  ['Hodir'] = {
    {name='Hodir', count=3, confidence=0.60, sample='description="This guide section will walk you through completing the daily quests in the Brunnhildar Village region of The Storm Peaks. If you are not Revered with The Sons of Hodir, you will not be able to accept some of the quests in this guide section. To become Revered with The Sons of Hodir, use the The Sons of Hodir (Friendly), The Sons of Hodir (Honored) - Pre-Quest, and The Sons of Hodir (Honored) guide sections in the Reputation section of the Dailies guide.",'},
  },
  ['Wildercloth'] = {
    {name='Wildercloth', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("GOLD\\Farming\\Tattered Wildercloth/Wildercloth (Tailoring)")'},
  },
  ['Flesh'] = {
    {name='Flesh', count=34, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("GOLD\\Gathering\\Abyssal Gulper Eel Flesh/Crescent Saberfish Flesh (Garrison)")'},
  },
  ['Lotus'] = {
    {name='Lotus', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("GOLD\\Gathering\\Dreamfoil/Black Lotus (15-30)",{'},
  },
  ['Mushroom'] = {
    {name='Mushroom', count=5, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("GOLD\\Gathering\\Ghost Mushroom (Un'Goro Crater)",{'},
  },
  ['Stranglekelp'] = {
    {name='Stranglekelp', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("GOLD\\Gathering\\Stranglekelp (Speedbarge Diving Helm)",{'},
  },
  ['Wildvine'] = {
    {name='Wildvine', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("GOLD\\Gathering\\Wildvine (Kill Only)",{'},
  },
  ['Stone'] = {
    {name='Stone', count=9, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("GOLD\\Gathering\\Copper Ore/Rough Stone (Horde)",{'},
  },
  ['SelectGossipOption'] = {
    {name='SelectGossipOption', count=74, confidence=1.00, sample='|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex("player", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff("player", i) break end end end)'},
  },
  ['GetBuffDataByIndex'] = {
    {name='C_UnitAuras.GetBuffDataByIndex', count=7, confidence=1.00, sample='|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex("player", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff("player", i) break end end end)'},
  },
  ['CancelUnitBuff'] = {
    {name='CancelUnitBuff', count=6, confidence=1.00, sample='|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex("player", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff("player", i) break end end end)'},
  },
  ['Day'] = {
    {name='Day', count=2, confidence=0.40, sample='|tip These gifts only appear on Christmas Day (December 25th).'},
  },
  ['GetCurrentTitle'] = {
    {name='GetCurrentTitle', count=1, confidence=0.20, sample='Equip the {o}Detective{} Title |complete _G.GetCurrentTitle() == 571 |goto Dornogal/0 55.03,28.96 |q 84685 |future'},
  },
  ['Senses'] = {
    {name='Senses', count=1, confidence=0.20, sample='|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).'},
  },
  ['Suppression'] = {
    {name='Suppression', count=1, confidence=0.20, sample='|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).'},
  },
  ['Field'] = {
    {name='Field', count=1, confidence=0.20, sample='|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).'},
  },
  ['Armor'] = {
    {name='Armor', count=1, confidence=0.20, sample='|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).'},
  },
  ['Threads'] = {
    {name='Threads', count=3, confidence=0.60, sample='|tip Click Gossamer Threads (small blue spools of thread) to get the Gossamer Laces buff.  Click Suspiciously Untouched Harps (light colored wooden statues with strings in them) while the buff is active.'},
  },
  ['Harps'] = {
    {name='Harps', count=1, confidence=0.20, sample='|tip Click Gossamer Threads (small blue spools of thread) to get the Gossamer Laces buff.  Click Suspiciously Untouched Harps (light colored wooden statues with strings in them) while the buff is active.'},
  },
  ['Piles'] = {
    {name='Piles', count=1, confidence=0.20, sample='|tip Click Shimmerdust Piles (purple piles of dirt) to get the Gossamer Laces buff.  Click Suspiciously Untouched Baskets (small grey wooden baskets) while the buff is active.'},
  },
  ['Baskets'] = {
    {name='Baskets', count=1, confidence=0.20, sample='|tip Click Shimmerdust Piles (purple piles of dirt) to get the Gossamer Laces buff.  Click Suspiciously Untouched Baskets (small grey wooden baskets) while the buff is active.'},
  },
  ['Freshleaves'] = {
    {name='Freshleaves', count=1, confidence=0.20, sample='|tip Click Freshleaves (small green leafy plants) to get the Minty Fresh Breath buff.  Click Suspiciously Untouched Soulweb (small grey spirals) while the buff is active.'},
  },
  ['Soulweb'] = {
    {name='Soulweb', count=1, confidence=0.20, sample='|tip Click Freshleaves (small green leafy plants) to get the Minty Fresh Breath buff.  Click Suspiciously Untouched Soulweb (small grey spirals) while the buff is active.'},
  },
  ['Flytrap'] = {
    {name='Flytrap', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("Leveling Guides\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Flytrap (Abomination)",{'},
  },
  ['Marz'] = {
    {name='Marz', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("Leveling Guides\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Marz (Abomination)",{'},
  },
  ['Roseboil'] = {
    {name='Roseboil', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("Leveling Guides\\Shadowlands (50-70)\\Necrolords Covenant\\Abomination Factory\\Roseboil (Abomination)",{'},
  },
  ['Information'] = {
    {name='Information', count=1, confidence=0.20, sample='Ask Lady Ilinca for More Information (Optional) |q 61704/2 |goto Revendreth/0 28.48,41.06'},
  },
  ['Azsunica'] = {
    {name='Azsunica', count=4, confidence=0.80, sample='click Encyclopedia Azsunica (K-M)##250373'},
  },
  ['Client'] = {
    {name='Client', count=2, confidence=0.40, sample='Use the Zygor Guides Client (desktop) to install Trend Data. |complete (ZGV.Gold.servertrends ~= nil)'},
  },
  ['Flame'] = {
    {name='Flame', count=7, confidence=1.00, sample='|tip You must infuse your Heart of Azeroth with The Crucible of Flame (Rank 3) and relog if Kalecgos is not offering this quest.'},
  },
  ['Waiver'] = {
    {name='Waiver', count=2, confidence=0.40, sample='use Tally's Waiver (Unsigned)##30540'},
  },
  ['Difficulty'] = {
    {name='Difficulty', count=1, confidence=0.20, sample='Clear Zekvir on Tier ? Difficulty (Solo or in a Group)|achieve 40103'},
  },
  ['Raid'] = {
    {name='Raid', count=25, confidence=1.00, sample='Inside the Liberation of Undermine Raid ({g}Normal or Higher Difficulty{}):'},
  },
  ['Ruth'] = {
    {name='Ruth', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Achievement Guides\\Collections\\Appearances\\Legion\\Ruth(less) is More")'},
  },
  ['Male'] = {
    {name='Male', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Achievement Guides\\Collections\\Appearances\\Legion\\Why Male(volent) Models?")'},
  },
  ['Force'] = {
    {name='Force', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Achievement Guides\\Dungeons & Raids\\Legion Raids\\Use the Force(s)")'},
  },
  ['Gruul'] = {
    {name='Gruul', count=2, confidence=0.40, sample='Skulloc, Son of Gruul (Iron Docks) |achieve 9619/2'},
  },
  ['Viryx'] = {
    {name='Viryx', count=2, confidence=0.40, sample='High Sage Viryx (Skyreach) |achieve 9619/4'},
  },
  ['Yainu'] = {
    {name='Yainu', count=2, confidence=0.40, sample='Yainu (The Everbloom) |achieve 9619/5'},
  },
  ['Tovra'] = {
    {name='Tovra', count=2, confidence=0.40, sample='Skylord Tovra (Grimrail Depot) |achieve 9619/6'},
  },
  ['Zaela'] = {
    {name='Zaela', count=2, confidence=0.40, sample='Warlord Zaela (Upper Blackrock Spire) |achieve 9619/8'},
  },
  ['Blackhand'] = {
    {name='Blackhand', count=2, confidence=0.40, sample='Warlord Blackhand (Blackrock Foundry) |achieve 9619/10'},
  },
  ['Superior'] = {
    {name='Superior', count=7, confidence=1.00, sample='For this achievement you will need to simply equip a Superior (blue) item of at least _item level 608_ in all your Armor and Weapon slots'},
  },
  ['Damage'] = {
    {name='Damage', count=6, confidence=1.00, sample='Choose _"Start Basic Damage (Bronze)"_'},
  },
  ['Tank'] = {
    {name='Tank', count=8, confidence=1.00, sample='Choose _"Start Basic Tank (Bronze)"_'},
  },
  ['Doubt'] = {
    {name='Doubt', count=4, confidence=0.80, sample='Sha of Doubt (Heroic) |achieve 6926/1'},
  },
  ['Violence'] = {
    {name='Violence', count=4, confidence=0.80, sample='Sha of Violence (Heroic) |achieve 6926/3'},
  },
  ['Fear'] = {
    {name='Fear', count=17, confidence=1.00, sample='Sha of Fear (Normal or Heroic) |achieve 6926/6'},
  },
  ['Rage'] = {
    {name='Rage', count=9, confidence=1.00, sample='|tip Fel Rage (Player) is a 30 second debuff that increases armor, health, healing, damage, and size. Gurtogg will only attack the player that has this.'},
  },
  ['Eye'] = {
    {name='Eye', count=18, confidence=1.00, sample='_The Mind's Eye (Inside)_'},
  },
  ['Collection'] = {
    {name='Collection', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\World Events\\Brawler's Guild\\Deck Your Collection (Season 1)",{'},
  },
  ['Genesaur'] = {
    {name='Genesaur', count=1, confidence=0.20, sample='Power of the Genesaur (or Chains of Iron) |achieve 8923/3'},
  },
  ['Iron'] = {
    {name='Iron', count=1, confidence=0.20, sample='Chains of Iron (or Power of the Genesaur) |achieve 8923/3'},
  },
  ['Fel'] = {
    {name='Fel', count=2, confidence=0.40, sample='|tip So players with the Fire debuff must run into the Fire (Red) portal, players with the Fel debuff must run into the Fel (Green) portal, and players with the Shadow debuff must run into the Shadow (Purple) portal.'},
  },
  ['Eat'] = {
    {name='Eat', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\All You Can Eat (10 player)",{'},
  },
  ['This'] = {
    {name='This', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Been Waiting a Long Time for This (10 player)",{'},
  },
  ['Boned'] = {
    {name='Boned', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Boned (10 player)",{'},
  },
  ['Hall'] = {
    {name='Hall', count=36, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Crimson Hall (10 player)",{'},
  },
  ['Oozes'] = {
    {name='Oozes', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Dances with Oozes(10 player)",{'},
  },
  ['Few'] = {
    {name='Few', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Dedicated Few (10 player)",{'},
  },
  ['Scion'] = {
    {name='Scion', count=20, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Denyin' the Scion (10 player)",{'},
  },
  ['Disk'] = {
    {name='Disk', count=4, confidence=0.80, sample='Defeat a Scion of Eternity While Riding Hover Disk (10 player) |achieve 2148 |goto The Eye of Eternity 45.00,56.80'},
  },
  ['Naxxramas'] = {
    {name='Naxxramas', count=20, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Fall of Naxxramas (10 player)",{'},
  },
  ['Quarter'] = {
    {name='Quarter', count=52, confidence=1.00, sample='The Arachnid Quarter (10 player) |achieve 576/1'},
  },
  ['Demise'] = {
    {name='Demise', count=20, confidence=1.00, sample='Sapphiron's Demise (10 player) |achieve 576/5'},
  },
  ['Defeat'] = {
    {name='Defeat', count=20, confidence=1.00, sample='Kel'Thuzad's Defeat (10 player) |achieve 576/6'},
  },
  ['Shortage'] = {
    {name='Shortage', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Flu Shot Shortage (10 player)",{'},
  },
  ['Blows'] = {
    {name='Blows', count=24, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Gonna Go When the Volcano Blows (10 player)",{'},
  },
  ['Plagueworks'] = {
    {name='Plagueworks', count=28, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Heroic: The Plagueworks (10 player)",{'},
  },
  ['Club'] = {
    {name='Club', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Hundred Club (10 player)",{'},
  },
  ['Boat'] = {
    {name='Boat', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\I'm on a Boat (10 player)",{'},
  },
  ['Mess'] = {
    {name='Mess', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\I've Gone and Made a Mess (10 player)",{'},
  },
  ['Enough'] = {
    {name='Enough', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Just Can't Get Enough (10 player)",{'},
  },
  ['Thuzad'] = {
    {name='Thuzad', count=4, confidence=0.80, sample='Defeat Kel'Thuzad (10 player) |achieve 574 |goto Naxxramas/6 36.50,22.30'},
  },
  ['Him'] = {
    {name='Him', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Make Quick Werk of Him (10 player)",{'},
  },
  ['Out'] = {
    {name='Out', count=20, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Momma Said Knock You Out (10 player)",{'},
  },
  ['Faerlina'] = {
    {name='Faerlina', count=4, confidence=0.80, sample='Defeat Grand Widow Faerlina (10 player) |achieve 1997 |goto Naxxramas/2 44.10,36.00'},
  },
  ['Vile'] = {
    {name='Vile', count=18, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Neck-Deep in Vile (10 Player)",{'},
  },
  ['Explode'] = {
    {name='Explode', count=4, confidence=0.80, sample='Kill the Vile Spirits Before They Explode (10-player) |achieve 4581 |goto Icecrown Citadel/7 49.80,52.80'},
  },
  ['Jormungars'] = {
    {name='Jormungars', count=20, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Not One, But Two Jormungars (10 player)",{'},
  },
  ['Shy'] = {
    {name='Shy', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Once Bitten, Twice Shy (10 player)",{'},
  },
  ['Whisperer'] = {
    {name='Whisperer', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Orb Whisperer (10 player)",{'},
  },
  ['Jockey'] = {
    {name='Jockey', count=14, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Portal Jockey (10 player)",{'},
  },
  ['It'] = {
    {name='It', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Resilience Will Fix It (10 player)",{'},
  },
  ['Dance'] = {
    {name='Dance', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Saftey Dance(10 player)",{'},
  },
  ['Pepper'] = {
    {name='Pepper', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Salt and Pepper (10 player)",{'},
  },
  ['Less'] = {
    {name='Less', count=4, confidence=0.80, sample='Defeat the Twin Val'kyr in 3 Minutes or Less (10 player) |achieve 3799 |goto Trial of the Crusader 46.30,64.90'},
  },
  ['Sapphiron'] = {
    {name='Sapphiron', count=4, confidence=0.80, sample='Defeat Sapphiron (10 player) |achieve 572 |goto Naxxramas/6 56.50,67.50'},
  },
  ['Thaddius'] = {
    {name='Thaddius', count=4, confidence=0.80, sample='Defeat Thaddius (10 player) |achieve 2178 |goto Naxxramas 26.50,14.50'},
  },
  ['Leviathan'] = {
    {name='Leviathan', count=2, confidence=0.40, sample='|tip Just simply kill Flame Leviathan (without boarding it and destroying its two defense turrets).'},
  },
  ['Downfall'] = {
    {name='Downfall', count=22, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\The Spellweaver's Downfall (10 player)",{'},
  },
  ['Malygos'] = {
    {name='Malygos', count=8, confidence=1.00, sample='Defeat Malygos (10 player) |achieve 622 |goto The Eye of Eternity 38.40,49.80'},
  },
  ['Loser'] = {
    {name='Loser', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Spore Loser(10 player)",{'},
  },
  ['Subtraction'] = {
    {name='Subtraction', count=12, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Subtraction (10 player)",{'},
  },
  ['Spike'] = {
    {name='Spike', count=20, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Three Sixty Pain Spike (10 player)",{'},
  },
  ['Assist'] = {
    {name='Assist', count=16, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\Twilight Assist (10 player)",{'},
  },
  ['Eternity'] = {
    {name='Eternity', count=26, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Dungeons & Raids\\Northrend Raids\\You Don't Have an Eternity (10 player)",{'},
  },
  ['Shock'] = {
    {name='Shock', count=10, confidence=1.00, sample='No player hit by Static Shock (Electron) |achieve 5307/1'},
  },
  ['Annihilator'] = {
    {name='Annihilator', count=2, confidence=0.40, sample='No player hit by Arcane Annihilator (Arcanotron) |achieve 5307/2'},
  },
  ['Bomb'] = {
    {name='Bomb', count=13, confidence=1.00, sample='No player hit by Poison Bomb (Toxitron) |achieve 5307/3'},
  },
  ['Flamthrower'] = {
    {name='Flamthrower', count=2, confidence=0.40, sample='No more than one player hit by each Flamthrower (Magmatron) |achieve 5307/4'},
  },
  ['Mana'] = {
    {name='Mana', count=4, confidence=0.80, sample='|tip During phase 2, dealing damage will cause her to lose Mana (not health). After dealing some damage she will cast Twilight Extinction. After the cast, deal more damage to lower her Mana once again and then kill the two Pulsing Twilight Eggs that spawn to each side of her.'},
  },
  ['Arachnophobia'] = {
    {name='Arachnophobia', count=4, confidence=0.80, sample='Arachnophobia (10 player) |achieve 2137/2'},
  },
  ['Together'] = {
    {name='Together', count=4, confidence=0.80, sample='And They Would All Go Down Together (10 player) |achieve 2137/14'},
  },
  ['Squirrels'] = {
    {name='Squirrels', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\General\\To All The Squirrels (Loved, Shared, Cared)/Pest Control",{'},
  },
  ['Lady'] = {
    {name='Lady', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Crazy Cat Lady (10 player)",{'},
  },
  ['Disarmed'] = {
    {name='Disarmed', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Disarmed (10 player)",{'},
  },
  ['Firefighter'] = {
    {name='Firefighter', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Firefighter (10 player)",{'},
  },
  ['Heartbreaker'] = {
    {name='Heartbreaker', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Heartbreaker (10 player)",{'},
  },
  ['Steelbreaker'] = {
    {name='Steelbreaker', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\I Choose You, Steelbreaker (10 player)",{'},
  },
  ['Morning'] = {
    {name='Morning', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\I Love the Smell of Saronite in the Morning (10 player)",{'},
  },
  ['Wood'] = {
    {name='Wood', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Knock, Knock, Knock on Wood (10 player)",{'},
  },
  ['Illusion'] = {
    {name='Illusion', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Lose Your Illusion (10 player)",{'},
  },
  ['Darkness'] = {
    {name='Darkness', count=9, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\One Light in the Darkness (10 player)",{'},
  },
  ['Furnace'] = {
    {name='Furnace', count=15, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Achievement Guides\\Legacy\\Raids\\Stokin' the Furnace (10 player)",{'},
  },
  ['Sentinels'] = {
    {name='Sentinels', count=1, confidence=0.20, sample='Feed Ribs to Sentinels (5) |q 29318/1 |goto Darnassus 52.20,35.60'},
  },
  ['Mountain'] = {
    {name='Mountain', count=1, confidence=0.20, sample='Click here to load the "Redridge Mountain (15-70)" leveling guide |confirm |next "Leveling Guides\\Classic (1-70)\\Eastern Kingdoms\\Redridge Mountains (7-70)"'},
  },
  ['Monastery'] = {
    {name='Monastery', count=13, confidence=1.00, sample='//Scarlet Monastery (6m 1s)'},
  },
  ['Scholomance'] = {
    {name='Scholomance', count=11, confidence=1.00, sample='//Scholomance (7m 29s)'},
  },
  ['Keep'] = {
    {name='Keep', count=19, confidence=1.00, sample='//Shadowfang Keep (9m 47s)'},
  },
  ['Stockade'] = {
    {name='Stockade', count=3, confidence=0.60, sample='//Stockade (4m 16s)'},
  },
  ['Uldaman'] = {
    {name='Uldaman', count=3, confidence=0.60, sample='//Uldaman (9m 20s)'},
  },
  ['Spire'] = {
    {name='Spire', count=9, confidence=1.00, sample='//Blackrock Spire (12m 4s) 4.97'},
  },
  ['Tides'] = {
    {name='Tides', count=7, confidence=1.00, sample='//Throne of Tides (11m 30s) 5.22'},
  },
  ['Pens'] = {
    {name='Pens', count=5, confidence=1.00, sample='//The Slave Pens (7m 15s) 8.28'},
  },
  ['Steamvault'] = {
    {name='Steamvault', count=5, confidence=1.00, sample='//The Steamvault (6m 50s) 8.78'},
  },
  ['Underbog'] = {
    {name='Underbog', count=7, confidence=1.00, sample='//The Underbog (8m 26s) 7.11'},
  },
  ['Tombs'] = {
    {name='Tombs', count=7, confidence=1.00, sample='//Mana-Tombs (5m 51s) 10.26'},
  },
  ['Crypts'] = {
    {name='Crypts', count=5, confidence=1.00, sample='//Auchenai Crypts (5m 58s) 10.06'},
  },
  ['Arcatraz'] = {
    {name='Arcatraz', count=5, confidence=1.00, sample='//The Arcatraz (9m 2s) 6.64'},
  },
  ['Botanica'] = {
    {name='Botanica', count=7, confidence=1.00, sample='//The Botanica (6m 7s) 9.81'},
  },
  ['Oculus'] = {
    {name='Oculus', count=5, confidence=1.00, sample='//The Oculus (8m 24s) 7.14'},
  },
  ['Nerub'] = {
    {name='Nerub', count=7, confidence=1.00, sample='//Azjol-Nerub (4m 4s) 14.75'},
  },
  ['Kingdom'] = {
    {name='Kingdom', count=5, confidence=1.00, sample='//Ahn'Kahet: The Old Kingdom (6m 57s) 8.63'},
  },
  ['Saron'] = {
    {name='Saron', count=5, confidence=1.00, sample='//Pit of Saron (8m 53s) 6.75'},
  },
  ['Reflection'] = {
    {name='Reflection', count=5, confidence=1.00, sample='//Halls of Reflection (10m 48s) 5.56'},
  },
  ['Lightning'] = {
    {name='Lightning', count=9, confidence=1.00, sample='//Halls of Lightning (8m 8s) 7.38'},
  },
  ['Batol'] = {
    {name='Batol', count=5, confidence=1.00, sample='//Grim Batol (13m 31s) 4.44'},
  },
  ['Stonecore'] = {
    {name='Stonecore', count=7, confidence=1.00, sample='//The Stonecore (13m 6s) 4.58'},
  },
  ['Chasm'] = {
    {name='Chasm', count=3, confidence=0.60, sample='//Ragefire Chasm (3m00s)'},
  },
  ['Gundrak'] = {
    {name='Gundrak', count=7, confidence=1.00, sample='//Gundrak (8m43s) 6.88'},
  },
  ['Kraul'] = {
    {name='Kraul', count=3, confidence=0.60, sample='//Razorfen Kraul (7m 10s) 8.37'},
  },
  ['Downs'] = {
    {name='Downs', count=3, confidence=0.60, sample='//Razorfen Downs (8m 48s) 6.82'},
  },
  ['Farrak'] = {
    {name='Farrak', count=5, confidence=1.00, sample='//Zul'Farrak (10m 2s) 5.98'},
  },
  ['Morass'] = {
    {name='Morass', count=5, confidence=1.00, sample='//Caverns of Time The Black Morass (10m 20s) (MISSING NORMAL DROPS)'},
  },
  ['Ramparts'] = {
    {name='Ramparts', count=5, confidence=1.00, sample='//Hellfire Ramparts (MISSING TIME)'},
  },
  ['Champion'] = {
    {name='Champion', count=5, confidence=1.00, sample='//Trial of the Champion (MISSING TIME)'},
  },
  ['Purple'] = {
    {name='Purple', count=1, confidence=0.20, sample='//Maraudon Purple (4m 38s) (MISSING NORMAL DROPS)'},
  },
  ['Falls'] = {
    {name='Falls', count=3, confidence=0.60, sample='//Maraudon Falls (6m 37s) (MISSING NORMAL DROPS)'},
  },
  ['Orange'] = {
    {name='Orange', count=1, confidence=0.20, sample='//Maraudon Orange (3m 29s) (MISSING NORMAL DROPS)'},
  },
  ['Gardens'] = {
    {name='Gardens', count=5, confidence=1.00, sample='//Diremaul Gardens (9m 32s) (MISSING NORMAL DROPS)'},
  },
  ['Warpwood'] = {
    {name='Warpwood', count=1, confidence=0.20, sample='//Diremaul Warpwood (10m 40s) (MISSING NORMAL DROPS)'},
  },
  ['Ogres'] = {
    {name='Ogres', count=1, confidence=0.20, sample='//Dire Maul Ogres (10m 35s) (MISSING NORMAL DROPS)'},
  },
  ['PST'] = {
    {name='PST', count=1, confidence=0.20, sample='|tip It allegedly appears between 18:30 PST (6:30pm PST) and 20:30 (8:30pm PST).'},
  },
  ['Sun'] = {
    {name='Sun', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Dungeons\\Gate of the Setting Sun (Normal 5)"] = {'},
  },
  ['Approach'] = {
    {name='Approach', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Heart of Fear LFR The Dread Approach (Raid Finder 25)"] = {'},
  },
  ['Palace'] = {
    {name='Palace', count=20, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Dungeons\\Mogu'shan Palace (Normal 5)"] = {'},
  },
  ['Vaults'] = {
    {name='Vaults', count=14, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Mogu'shan Vaults (Normal 10)"] = {'},
  },
  ['Mysteries'] = {
    {name='Mysteries', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Mogu'shan Vaults LFR The Vault of Mysteries (Raid Finder 25)"] = {'},
  },
  ['Underhold'] = {
    {name='Underhold', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Siege of Orgrimmar LFR The Underhold (Raid Finder )"] = {'},
  },
  ['Brewery'] = {
    {name='Brewery', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Dungeons\\Stormstout Brewery (Normal 5)"] = {'},
  },
  ['Spring'] = {
    {name='Spring', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Terrace of Endless Spring (Normal 10)"] = {'},
  },
  ['LFR'] = {
    {name='LFR', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Terrace of Endless Spring LFR (Raid Finder 25)"] = {'},
  },
  ['Shaping'] = {
    {name='Shaping', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Throne of Thunder LFR Halls of Flesh-Shaping (Raid Finder 25)"] = {'},
  },
  ['Storms'] = {
    {name='Storms', count=10, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Mists of Pandaria Raids\\Throne of Thunder LFR Pinnacle of Storms (Raid Finder 25)"] = {'},
  },
  ['Bolt'] = {
    {name='Bolt', count=20, confidence=1.00, sample='|tip Frost Bolt (single) inflicts 10,000-13,000 Frost damage and reduces movement speed by 50% for 4 seconds.'},
  },
  ['Well_'] = {
    {name='Well_', count=4, confidence=0.80, sample='|tip She will need to be tanked and moved when she creates a _Gravity Well_ (purple circle with that deals shadow damage).'},
  },
  ['Soul'] = {
    {name='Soul', count=13, confidence=1.00, sample='Click here if you are queueing for the First wing of Dragon Soul (Siege of Wyrmrest Temple) |next "First_Wing_DS"'},
  },
  ['LeaveInstanceParty'] = {
    {name='LeaveInstanceParty', count=38, confidence=1.00, sample=''|script LeaveInstanceParty()'},
  },
  ['Fall'] = {
    {name='Fall', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\Theramore's Fall (10-70)",{'},
  },
  ['Landing'] = {
    {name='Landing', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\Lion's Landing (20-70)",{'},
  },
  ['Seas'] = {
    {name='Seas', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\Battle on the High Seas (40-70)",{'},
  },
  ['Snow'] = {
    {name='Snow', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\Blood in the Snow (40-70)",{'},
  },
  ['Ragefire'] = {
    {name='Ragefire', count=10, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\The Secrets of Ragefire (40-70)",{'},
  },
  ['Dazar'] = {
    {name='Dazar', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Dungeons\\Atal'Dazar (Normal 5)"] = {'},
  },
  ['Devotion'] = {
    {name='Devotion', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Ny'alotha, the Waking City, Halls of Devotion (Raid Finder )"] = {'},
  },
  ['Destiny'] = {
    {name='Destiny', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Ny'alotha, the Waking City, Vision of Destiny (Raid Finder )"] = {'},
  },
  ['Dream'] = {
    {name='Dream', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Ny'alotha, the Waking City, The Waking Dream (Raid Finder )"] = {'},
  },
  ['Sethraliss'] = {
    {name='Sethraliss', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Dungeons\\Temple of Sethraliss (Normal 5)"] = {'},
  },
  ['Devoted'] = {
    {name='Devoted', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Eternal Palace, Depths of the Devoted (Raid Finder )"] = {'},
  },
  ['Reception'] = {
    {name='Reception', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Eternal Palace, The Grand Reception (Raid Finder )"] = {'},
  },
  ['Dagor'] = {
    {name='Dagor', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Dungeons\\Tol Dagor (Normal 5)"] = {'},
  },
  ['Uldir'] = {
    {name='Uldir', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Uldir (Normal )"] = {'},
  },
  ['Containment'] = {
    {name='Containment', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Uldir, Halls of Containment (Raid Finder )"] = {'},
  },
  ['Descent'] = {
    {name='Descent', count=16, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Uldir, Crimson Descent (Raid Finder )"] = {'},
  },
  ['Corruption'] = {
    {name='Corruption', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Uldir, Heart of Corruption (Raid Finder )"] = {'},
  },
  ['Manor'] = {
    {name='Manor', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Dungeons\\Waycrest Manor (Normal 5)"] = {'},
  },
  ['HasFullControl'] = {
    {name='HasFullControl', count=6, confidence=1.00, sample='Jump down the hole |complete not _G.HasFullControl()'},
  },
  ['Ain'] = {
    {name='Ain', count=4, confidence=0.80, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Emerald Nightmare - Rift of Ain (LFR)",{'},
  },
  ['Guardians'] = {
    {name='Guardians', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Emerald Nightmare - Tormented Guardians (LFR)",{'},
  },
  ['Rise'] = {
    {name='Rise', count=18, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Nighthold - Betrayer's Rise (LFR)",{'},
  },
  ['Nightspire'] = {
    {name='Nightspire', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Nighthold - Nightspire (LFR)",{'},
  },
  ['Athenaeum'] = {
    {name='Athenaeum', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Nighthold - Royal Athenaeum (LFR)",{'},
  },
  ['Suffusion'] = {
    {name='Suffusion', count=24, confidence=1.00, sample='|tip When standing on the Lunar Suffusion (when the floor is white), you will gain a stacking debuff, increasing damage taken by Lunar abilities. |grouprole EVERYONE'},
  },
  ['Nathreza'] = {
    {name='Nathreza', count=8, confidence=1.00, sample='|tip When Eternal Flames appear on the main platform, a few raid members should take them inside the Nathreza (green) portal before its boss is active. |grouprole EVERYONE'},
  },
  ['Xoroth'] = {
    {name='Xoroth', count=8, confidence=1.00, sample='|tip While inside the Xoroth (orange) portal at 90% health, use an interrupt rotation and move out of areas targeted on the ground. |grouprole DAMAGE'},
  },
  ['Rancora'] = {
    {name='Rancora', count=8, confidence=1.00, sample='|tip While inside the Rancora (green) portal at 60% health, free players trapped in webs and avoid stepping in slime puddles. |grouprole DAMAGE'},
  },
  ['Breach'] = {
    {name='Breach', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Antorus, the Burning Throne - Light's Breach (LFR)",{'},
  },
  ['End'] = {
    {name='End', count=8, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Antorus, the Burning Throne - Hope's End (LFR)",{'},
  },
  ['Pantheon'] = {
    {name='Pantheon', count=6, confidence=1.00, sample='ZygorGuidesViewer:RegisterGuide("Dungeon Guides\\Legion Raids\\Antorus, the Burning Throne - Seat of the Pantheon (LFR)",{'},
  },
  ['Auchindoun'] = {
    {name='Auchindoun', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Dungeons\\Auchindoun (Normal 5)"] = {'},
  },
  ['Foundry'] = {
    {name='Foundry', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Blackrock Foundry (Normal )"] = {'},
  },
  ['Assembly'] = {
    {name='Assembly', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Blackrock Foundry LFR Iron Assembly (Raid Finder )"] = {'},
  },
  ['Slagworks'] = {
    {name='Slagworks', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Blackrock Foundry LFR Slagworks (Raid Finder )"] = {'},
  },
  ['Forge'] = {
    {name='Forge', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Blackrock Foundry LFR The Black Forge (Raid Finder )"] = {'},
  },
  ['Mines'] = {
    {name='Mines', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Dungeons\\Bloodmaul Slag Mines (Normal 5)"] = {'},
  },
  ['Hellbreach'] = {
    {name='Hellbreach', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Hellfire Citadel LFR Hellbreach (Raid Finder )"] = {'},
  },
  ['Shadows'] = {
    {name='Shadows', count=7, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Hellfire Citadel LFR Bastion of Shadows (Raid Finder )"] = {'},
  },
  ['Gate'] = {
    {name='Gate', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Hellfire Citadel LFR The Black Gate (Raid Finder )"] = {'},
  },
  ['Highmaul'] = {
    {name='Highmaul', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Highmaul (Normal )"] = {'},
  },
  ['Sanctum'] = {
    {name='Sanctum', count=18, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Raids\\Highmaul LFR Arcane Sanctum (Raid Finder )"] = {'},
  },
  ['Skyreach'] = {
    {name='Skyreach', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Dungeons\\Skyreach (Normal 5)"] = {'},
  },
  ['Everbloom'] = {
    {name='Everbloom', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Warlords of Draenor Dungeons\\The Everbloom (Normal 5)"] = {'},
  },
  ['Coommons'] = {
    {name='Coommons', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Classic Dungeons\\Dire Maul Gordok Coommons (Normal 5)"] = {'},
  },
  ['Deathwing'] = {
    {name='Deathwing', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Raids\\Dragon Soul LFR Fall of Deathwing (Raid Finder 25)"] = {'},
  },
  ['Time'] = {
    {name='Time', count=5, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Dungeons\\End Time (Heroic 5)"] = {'},
  },
  ['Firelands'] = {
    {name='Firelands', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Raids\\Firelands (Normal )"] = {'},
  },
  ['Origination'] = {
    {name='Origination', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Dungeons\\Halls of Origination (Normal 5)"] = {'},
  },
  ['Twilight'] = {
    {name='Twilight', count=10, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Dungeons\\Hour of Twilight (Heroic 5)"] = {'},
  },
  ['Qiraj'] = {
    {name='Qiraj', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Classic Raids\\Ruins of Ahn'Qiraj (Normal 10)"] = {'},
  },
  ['Living'] = {
    {name='Living', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Classic Dungeons\\Stratholme Living (Normal 5)"] = {'},
  },
  ['Plateau'] = {
    {name='Plateau', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Burning Crusade Raids\\Sunwell Plateau (Normal 25)"] = {'},
  },
  ['Archavon'] = {
    {name='Archavon', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Wrath of the Lich King Raids\\Vault of Archavon (Normal 10)"] = {'},
  },
  ['Aman'] = {
    {name='Aman', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Dungeons\\Zul'Aman (Normal 5)"] = {'},
  },
  ['Gurub'] = {
    {name='Gurub', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Cataclysm Dungeons\\Zul'Gurub (Normal 5)"] = {'},
  },
  ['DPS'] = {
    {name='DPS', count=6, confidence=1.00, sample='|tip One tank, one healer, and three DPS (strong AoE).'},
  },
  ['Gorefiend'] = {
    {name='Gorefiend', count=2, confidence=0.40, sample='|tip Some bosses are easier than others, and this is the suggested route to take for progression, going from easiest to hardest: Hellfire Assault, Iron Reaver, Kormrok, Hellfire High Council, Kilrogg Deadeye, Gorefiend(this is a very hard boss but is required to advance), Shadow-Lord Iskar, Socrethar the Eternal, Fel Lord Zakuun, Tyrant Velhari, Xhul'horac, Mannoroth, and Archimonde.'},
  },
  ['Point'] = {
    {name='Point', count=2, confidence=0.40, sample='ZygorGuidesViewer:RegisterGuidePlaceholder("Dungeon Guides\\Pandaria (10-70)\\Pandaria Scenarios\\Domination Point (20-70)")'},
  },
  ['Energy'] = {
    {name='Energy', count=1, confidence=0.20, sample='|tip During "Siphon Energy (Conduit)", group up and avoid Shadow Lines while dodging the boss damage until his energy reaches zero. |grouprole EVERYONE'},
  },
  ['Bargain'] = {
    {name='Bargain', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Dazar'alor, Death's Bargain (Raid Finder )"] = {'},
  },
  ['Death'] = {
    {name='Death', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Battle for Azeroth Raids\\Dazar'alor, Victory or Death (Raid Finder )"] = {'},
  },
  ['Opulence'] = {
    {name='Opulence', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Castle Nathria, Reliquary of Opulence (Raid Finder )"] = {'},
  },
  ['Arrogance'] = {
    {name='Arrogance', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Castle Nathria, An Audience with Arrogance (Raid Finder )"] = {'},
  },
  ['Reckoning'] = {
    {name='Reckoning', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sanctum of Domination: The Reckoning (Raid Finder )"] = {'},
  },
  ['Fate'] = {
    {name='Fate', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sanctum of Domination: Shackles of Fate (Raid Finder )"] = {'},
  },
  ['Bastille'] = {
    {name='Bastille', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sanctum of Domination: The Dark Bastille (Raid Finder )"] = {'},
  },
  ['Vanguard'] = {
    {name='Vanguard', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sanctum of Domination: The Jailer's Vanguard (Raid Finder )"] = {'},
  },
  ['Grasp'] = {
    {name='Grasp', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sepulcher of the First Ones: Domination's Grasp (Raid Finder )"] = {'},
  },
  ['Creation'] = {
    {name='Creation', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sepulcher of the First Ones: Cornerstone of Creation (Raid Finder )"] = {'},
  },
  ['Design'] = {
    {name='Design', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Shadowlands Raids\\Sepulcher of the First Ones: The Grand Design (Raid Finder )"] = {'},
  },
  ['Night'] = {
    {name='Night', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Legion Dungeons\\Cathedral of Eternal Night (Heroic 5)"] = {'},
  },
  ['Thicket'] = {
    {name='Thicket', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Legion Dungeons\\Darkheart Thicket (Normal 5)"] = {'},
  },
  ['Points'] = {
    {name='Points', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\Invasion Points (Normal )"] = {'},
  },
  ['Arcway'] = {
    {name='Arcway', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Legion Dungeons\\The Arcway (Heroic 5)"] = {'},
  },
  ['Nightmare'] = {
    {name='Nightmare', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\The Emerald Nightmare (Normal )"] = {'},
  },
  ['Aln'] = {
    {name='Aln', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\Emeral Nightmare LFR Rift of Aln (Raid Finder )"] = {'},
  },
  ['Aqueducts'] = {
    {name='Aqueducts', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\The Nighthold LFR Arcing Aqueducts (Raid Finder )"] = {'},
  },
  ['Sargeras'] = {
    {name='Sargeras', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\Tomb of Sargeras (Normal )"] = {'},
  },
  ['Avatar'] = {
    {name='Avatar', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\Tomb of Sargeras Chamber of the Avatar (Raid Finder )"] = {'},
  },
  ['Hell'] = {
    {name='Hell', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Legion Raids\\Tomb of Sargeras The Gates of Hell (Raid Finder )"] = {'},
  },
  ['Void'] = {
    {name='Void', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Aberrus, the Shadowed Crucible: Edge of the Void (Raid Finder )"] = {'},
  },
  ['Works'] = {
    {name='Works', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Aberrus, the Shadowed Crucible: Discarded Works (Raid Finder )"] = {'},
  },
  ['Academy'] = {
    {name='Academy', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\Algeth'ar Academy (Normal 5)"] = {'},
  },
  ['Hope'] = {
    {name='Hope', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Amirdrassil, the Dream's Hope (Normal )"] = {'},
  },
  ['Weave'] = {
    {name='Weave', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Amirdrassil, the Dream's Hope: The Viridian Weave (Raid Finder )"] = {'},
  },
  ['Amirdrassil'] = {
    {name='Amirdrassil', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Amirdrassil, the Dream's Hope: Fate of Amirdrassil (Raid Finder )"] = {'},
  },
  ['Incursion'] = {
    {name='Incursion', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Amirdrassil, the Dream's Hope: Molten Incursion (Raid Finder )"] = {'},
  },
  ['Infinite'] = {
    {name='Infinite', count=4, confidence=0.80, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\Dawn of the Infinite (Heroic 5)"] = {'},
  },
  ['Infusion'] = {
    {name='Infusion', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\Halls of Infusion (Normal 5)"] = {'},
  },
  ['Neltharus'] = {
    {name='Neltharus', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\Neltharus (Normal 5)"] = {'},
  },
  ['Offensive'] = {
    {name='Offensive', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\The Nokhud Offensive (Normal 5)"] = {'},
  },
  ['Tyr'] = {
    {name='Tyr', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Dungeons\\Uldaman: Legacy of Tyr (Normal 5)"] = {'},
  },
  ['Incarnates'] = {
    {name='Incarnates', count=6, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Vault of the Incarnates (Normal )"] = {'},
  },
  ['Bulwark'] = {
    {name='Bulwark', count=8, confidence=1.00, sample='ZygorGuidesViewer.ItemScore.Items["Dragonflight Raids\\Vault of the Incarnates: The Primal Bulwark (Raid Finder )"] = {'},
  },
  ['Echoes'] = {
    {name='Echoes', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Dungeons\\Ara-Kara, City of Echoes (Normal 5)"] = {'},
  },
  ['Omega'] = {
    {name='Omega', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Raids\\Manaforge Omega (Normal )"] = {'},
  },
  ['Sands'] = {
    {name='Sands', count=1, confidence=0.20, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Raids\\Manaforge Omega: Monsters of the Sands (Raid Finder )"] = {'},
  },
  ['Shadowguard'] = {
    {name='Shadowguard', count=1, confidence=0.20, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Raids\\Manaforge Omega: Might of the Shadowguard (Raid Finder )"] = {'},
  },
  ['Floodgate'] = {
    {name='Floodgate', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Dungeons\\Operation: Floodgate (Normal 5)"] = {'},
  },
  ['Gambit'] = {
    {name='Gambit', count=1, confidence=0.20, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Dungeons\\Tazavesh: So'leah's Gambit (Heroic 5)"] = {'},
  },
  ['Wonder'] = {
    {name='Wonder', count=1, confidence=0.20, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Dungeons\\Tazavesh: Streets of Wonder (Heroic 5)"] = {'},
  },
  ['Dawnbreaker'] = {
    {name='Dawnbreaker', count=3, confidence=0.60, sample='ZygorGuidesViewer.ItemScore.Items["Current Season Dungeons\\The Dawnbreaker (Normal 5)"] = {'},
  },
  ['Meadery'] = {
    {name='Meadery', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Dungeons\\Cinderbrew Meadery (Normal 5)"] = {'},
  },
  ['Better'] = {
    {name='Better', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Raids\\Liberation of Undermine: Two Heads Are Better (Raid Finder )"] = {'},
  },
  ['Machinist'] = {
    {name='Machinist', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Raids\\Liberation of Undermine: Maniacal Machinist (Raid Finder )"] = {'},
  },
  ['Awesome'] = {
    {name='Awesome', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Raids\\Liberation of Undermine: Shock and Awesome (Raid Finder )"] = {'},
  },
  ['Battlements'] = {
    {name='Battlements', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Raids\\Nerub-ar Palace: The Skittering Battlements (Raid Finder )"] = {'},
  },
  ['Stonevault'] = {
    {name='Stonevault', count=2, confidence=0.40, sample='ZygorGuidesViewer.ItemScore.Items["The War Within Dungeons\\The Stonevault (Normal 5)"] = {'},
  },
  ['Ooze'] = {
    {name='Ooze', count=1, confidence=0.20, sample='|tip Kill the Erupting Ooze(s) that spawns after "Slime Injection" is removed. |grouprole DAMAGE'},
  },
  ['GetCoreVersion'] = {
    {name='GetCoreVersion', count=4, confidence=0.80, sample='function Details:GetCoreVersion()'},
  },
  ['GetVersionString'] = {
    {name='Details.GetVersionString', count=8, confidence=1.00, sample='function Details.GetVersionString()'},
  },
  ['GetColorFor'] = {
    {name='Details222.ColorScheme.GetColorFor', count=3, confidence=0.60, sample='function Details222.ColorScheme.GetColorFor(colorScheme)'},
  },
  ['DebugMsg'] = {
    {name='Details222.DebugMsg', count=18, confidence=1.00, sample='function Details222.DebugMsg(...)'},
    {name='DebugMsg', count=4, confidence=0.80, sample='function pluginContainerFrame.DebugMsg(...)'},
  },
  ['CheckContextInterest'] = {
    {name='CheckContextInterest', count=3, confidence=0.60, sample='---start a new context, this is called from the CheckContextInterest() function'},
  },
  ['CreateEventListener'] = {
    {name='CreateEventListener', count=20, confidence=1.00, sample='self.DetailsEventListener = Details:CreateEventListener()'},
  },
  ['FinishContext'] = {
    {name='FinishContext', count=3, confidence=0.60, sample='C_Timer.After(1.1, function() self:FinishContext() end)'},
  },
  ['IsDragonflightAndBeyond'] = {
    {name='DetailsFramework.IsDragonflightAndBeyond', count=7, confidence=1.00, sample='if (DetailsFramework.IsDragonflightAndBeyond()) then'},
    {name='IsDragonflightAndBeyond', count=5, confidence=1.00, sample='if (detailsFramework.IsDragonflightAndBeyond()) then'},
    {name='DF.IsDragonflightAndBeyond', count=3, confidence=0.60, sample='function DF.IsDragonflightAndBeyond()'},
  },
  ['GetCurrentCombat'] = {
    {name='GetCurrentCombat', count=102, confidence=1.00, sample='local currentCombat = Details:GetCurrentCombat()'},
  },
  ['GetActiveChallengeMapID'] = {
    {name='C_ChallengeMode.GetActiveChallengeMapID', count=7, confidence=1.00, sample='if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then'},
  },
  ['GetActiveKeystoneInfo'] = {
    {name='C_ChallengeMode.GetActiveKeystoneInfo', count=15, confidence=1.00, sample='if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then'},
    {name='GetActiveKeystoneInfo', count=1, confidence=0.20, sample='local level, affixes, wasEnergized = GetActiveKeystoneInfo()'},
  },
  ['IsChallengeModeActive'] = {
    {name='C_ChallengeMode.IsChallengeModeActive', count=4, confidence=0.80, sample='if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then'},
  },
  ['GetCombatSegments'] = {
    {name='GetCombatSegments', count=54, confidence=1.00, sample='local segments = Details:GetCombatSegments()'},
  },
  ['StartCombat'] = {
    {name='Details222.StartCombat', count=15, confidence=1.00, sample='Details222.StartCombat()'},
    {name='StartCombat', count=2, confidence=0.40, sample='function Details:StartCombat(...)'},
  },
  ['AddCombat'] = {
    {name='AddCombat', count=4, confidence=0.80, sample='currentCombat:AddCombat(interestCombat, i == 1, i == #interestCombats)'},
    {name='Details222.Combat.AddCombat', count=2, confidence=0.40, sample='function Details222.Combat.AddCombat(combatToBeAdded)'},
  },
  ['GetCombatTime'] = {
    {name='GetCombatTime', count=160, confidence=1.00, sample='Details222.DebugMsg("combat time:", currentCombat:GetCombatTime())'},
  },
  ['EndCombat'] = {
    {name='EndCombat', count=10, confidence=1.00, sample='Details:EndCombat()'},
  },
  ['StartContext'] = {
    {name='StartContext', count=1, confidence=0.20, sample='self:StartContext(instanceId, instanceName, instanceType, difficultyId, contextEventTable, fOnCombatFinished, fOnContextFinished, fHasLostInterest)'},
  },
  ['UnpackAuraData'] = {
    {name='AuraUtil.UnpackAuraData', count=2, confidence=0.40, sample='return AuraUtil.UnpackAuraData(auraData)'},
  },
  ['UnitDebuff'] = {
    {name='UnitDebuff', count=2, confidence=0.40, sample='local auraData = UnitDebuff(unitToken, index, filter)'},
  },
  ['OpenPlayerDetails'] = {
    {name='OpenPlayerDetails', count=18, confidence=1.00, sample='{Name = "Click on Your Own Bar", Desc = "To open the player details window on your character, like if you click on your bar in the damage window. The number '1' is the window number where it'll click.", MacroText = "/script Details:OpenPlayerDetails(1)"},'},
  },
  ['Breakdown'] = {
    {name='Breakdown', count=2, confidence=0.40, sample='{Name = "Open Encounter Breakdown", Desc = "Open the encounter breakdown plugin. Details! Encounter Breakdown (plugin) must be enabled.", MacroText = "/script Details:OpenPlugin ('Encounter Breakdown')"},'},
  },
  ['OpenPlugin'] = {
    {name='OpenPlugin', count=14, confidence=1.00, sample='{Name = "Open Encounter Breakdown", Desc = "Open the encounter breakdown plugin. Details! Encounter Breakdown (plugin) must be enabled.", MacroText = "/script Details:OpenPlugin ('Encounter Breakdown')"},'},
    {name='DetailsPluginContainerWindow.OpenPlugin', count=12, confidence=1.00, sample='DetailsPluginContainerWindow.OpenPlugin(DetailsAPI2Frame)'},
  },
  ['ResetSegmentData'] = {
    {name='ResetSegmentData', count=5, confidence=1.00, sample='{Name = "Reset Data", Desc = "Reset the overall and regular segments data. Use 'ResetSegmentOverallData' to reset only the overall.", MacroText = "/script Details:ResetSegmentData()"},'},
  },
  ['GetWindow'] = {
    {name='GetWindow', count=12, confidence=1.00, sample='{Name = "Change What the Window Shows", Desc = "Make a window show different data. SetDisplay uses (segment, displayGroup, displayID), the menu from the sword icon is in order (damage = group 1, overheal is: displayGroup 2 displayID 3.", MacroText = "/script Details:GetWindow(1):SetDisplay( DETAILS_SEGMENTID_CURRENT, 4, 5 )"},'},
  },
  ['SetDisplay'] = {
    {name='SetDisplay', count=10, confidence=1.00, sample='{Name = "Change What the Window Shows", Desc = "Make a window show different data. SetDisplay uses (segment, displayGroup, displayID), the menu from the sword icon is in order (damage = group 1, overheal is: displayGroup 2 displayID 3.", MacroText = "/script Details:GetWindow(1):SetDisplay( DETAILS_SEGMENTID_CURRENT, 4, 5 )"},'},
  },
  ['ToggleMaxSize'] = {
    {name='ToggleMaxSize', count=3, confidence=0.60, sample='{Name = "Toggle Window Height to Max Size", Desc = "Make a window be 450 pixel height, pressing the macro again toggle back to the original size. The number '1' if the window number. Hold a click in any window to show their number.", MacroText = "/script Details:GetWindow(1):ToggleMaxSize()"},'},
  },
  ['FastReportWindow'] = {
    {name='FastReportWindow', count=2, confidence=0.40, sample='{Name = "Report What is Shown In the Window", Desc = "Report the current data shown in the window, the number 1 is the window number, replace it to report another window.", MacroText = "/script Details:FastReportWindow(1)"},'},
  },
  ['GetFramework'] = {
    {name='GetFramework', count=8, confidence=1.00, sample='function _detalhes:GetFramework()'},
  },
  ['GetMenuTextColor'] = {
    {name='Details.Colors.GetMenuTextColor', count=1, confidence=0.20, sample='function Details.Colors.GetMenuTextColor()'},
  },
  ['GetTextureAtlasTable'] = {
    {name='GetTextureAtlasTable', count=2, confidence=0.40, sample='function Details:GetTextureAtlasTable()'},
  },
  ['GetArenaInfo'] = {
    {name='GetArenaInfo', count=6, confidence=1.00, sample='function _detalhes:GetArenaInfo (mapid)'},
  },
  ['GetBattlegroundInfo'] = {
    {name='GetBattlegroundInfo', count=3, confidence=0.60, sample='function _detalhes:GetBattlegroundInfo(mapid)'},
  },
  ['SafeRun'] = {
    {name='Details.SafeRun', count=5, confidence=1.00, sample='function Details.SafeRun(func, executionName, ...)'},
  },
  ['Msg'] = {
    {name='Msg', count=397, confidence=1.00, sample='Details:Msg("Safe run failed:", executionName, errorText)'},
    {name='DetailsFramework.Msg', count=22, confidence=1.00, sample='DetailsFramework.Msg({__name = "DetailsFramework"}, "Spell not found: " .. (spellName or ""))'},
  },
  ['GetAttributeIcon'] = {
    {name='GetAttributeIcon', count=3, confidence=0.60, sample='function _detalhes:GetAttributeIcon (attribute)'},
  },
  ['NewColor'] = {
    {name='NewColor', count=10, confidence=1.00, sample='DetailsFramework:NewColor("DETAILS_PLUGIN_BUTTONTEXT_COLOR", 0.9999, 0.8196, 0, 1)'},
  },
  ['InstallTemplate'] = {
    {name='InstallTemplate', count=22, confidence=1.00, sample='DetailsFramework:InstallTemplate("button", "DETAILS_PLUGINPANEL_BUTTON_TEMPLATE",'},
  },
  ['IsWotLKWow'] = {
    {name='DetailsFramework.IsWotLKWow', count=6, confidence=1.00, sample='if (DetailsFramework.IsWotLKWow()) then'},
    {name='IsWotLKWow', count=1, confidence=0.20, sample='local isWOTLK = detailsFramework.IsWotLKWow()'},
    {name='DF.IsWotLKWow', count=2, confidence=0.40, sample='function DF.IsWotLKWow()'},
  },
  ['Healthstone'] = {
    {name='Healthstone', count=13, confidence=1.00, sample='--[[global]] DETAILS_HEALTHSTONE2_ID = 47876 --Warlock's Healthstone (1/2 Talent)'},
  },
  ['SendHighFive'] = {
    {name='Details.SendHighFive', count=4, confidence=0.80, sample='function Details.SendHighFive()'},
  },
  ['SendRaidData'] = {
    {name='SendRaidData', count=11, confidence=1.00, sample='Details:SendRaidData(Details.network.ids.HIGHFIVE_REQUEST)'},
  },
  ['SendPartyData'] = {
    {name='SendPartyData', count=6, confidence=1.00, sample='Details:SendPartyData(Details.network.ids.HIGHFIVE_REQUEST)'},
  },
  ['GetPluginDefaultBackdrop'] = {
    {name='Details.GetPluginDefaultBackdrop', count=1, confidence=0.20, sample='function Details.GetPluginDefaultBackdrop()'},
  },
  ['CreateWelcomePanel'] = {
    {name='CreateWelcomePanel', count=5, confidence=1.00, sample='function _detalhes:CreateWelcomePanel(name, parent, width, height, makeMovable)'},
  },
  ['ApplyStandardBackdrop'] = {
    {name='ApplyStandardBackdrop', count=116, confidence=1.00, sample='DetailsFramework:ApplyStandardBackdrop(newWelcomePanel)'},
  },
  ['VarDump'] = {
    {name='Details.VarDump', count=5, confidence=1.00, sample='function Details.VarDump(t)'},
  },
  ['GetAtlasInfo'] = {
    {name='C_Texture.GetAtlasInfo', count=10, confidence=1.00, sample='atlas = C_Texture.GetAtlasInfo(value)'},
  },
  ['GetAtlas'] = {
    {name='GetAtlas', count=4, confidence=0.80, sample='local atlas = icon:GetAtlas()'},
  },
  ['FindSpellByName'] = {
    {name='FindSpellByName', count=1, confidence=0.20, sample='function FindSpellByName(spellName) --[[GLOBAL]]'},
  },
  ['GSI'] = {
    {name='GSI', count=2, confidence=0.40, sample='local thisSpellName = GSI(i)'},
  },
  ['CopyTable'] = {
    {name='Details.CopyTable', count=65, confidence=1.00, sample='function Details.CopyTable(orig)'},
  },
  ['DelayMsg'] = {
    {name='DelayMsg', count=3, confidence=0.60, sample='function _detalhes:DelayMsg(msg)'},
  },
  ['ShowDelayMsg'] = {
    {name='ShowDelayMsg', count=1, confidence=0.20, sample='function _detalhes:ShowDelayMsg()'},
  },
  ['WelcomeMsgLogon'] = {
    {name='WelcomeMsgLogon', count=1, confidence=0.20, sample='function _detalhes:WelcomeMsgLogon()'},
  },
  ['CreateNewSegmentDatabase'] = {
    {name='CreateNewSegmentDatabase', count=6, confidence=1.00, sample='_detalhes.tabela_historico = _detalhes.historico:CreateNewSegmentDatabase()'},
  },
  ['NovaTabela'] = {
    {name='NovaTabela', count=26, confidence=1.00, sample='_detalhes.tabela_overall = _detalhes.combate:NovaTabela()'},
  },
  ['NewTimer'] = {
    {name='C_Timer.NewTimer', count=29, confidence=1.00, sample='Details.failed_to_load = C_Timer.NewTimer(1, function() Details.Schedules.NewTimer(20, _detalhes.WelcomeMsgLogon) end)'},
    {name='Details.Schedules.NewTimer', count=22, confidence=1.00, sample='Details.failed_to_load = C_Timer.NewTimer(1, function() Details.Schedules.NewTimer(20, _detalhes.WelcomeMsgLogon) end)'},
    {name='Schedules.NewTimer', count=7, confidence=1.00, sample='detailsFramework.Schedules.NewTimer (10, function()'},
    {name='DetailsFramework.Schedules.NewTimer', count=9, confidence=1.00, sample='DetailsFramework.Schedules.NewTimer(0, function() SetSpecialization(1) end)'},
    {name='DF.Schedules.NewTimer', count=1, confidence=0.20, sample='DF.Schedules.NewTimer(0.2, DF.RefreshImageEditor)'},
  },
  ['GetClassFromCache'] = {
    {name='Details222.ClassCache.GetClassFromCache', count=1, confidence=0.20, sample='function Details222.ClassCache.GetClassFromCache(value)'},
  },
  ['AddClassToCache'] = {
    {name='Details222.ClassCache.AddClassToCache', count=1, confidence=0.20, sample='function Details222.ClassCache.AddClassToCache(value, whichCache)'},
  },
  ['GetClass'] = {
    {name='Details222.ClassCache.GetClass', count=3, confidence=0.60, sample='function Details222.ClassCache.GetClass(value)'},
    {name='GetClass', count=14, confidence=1.00, sample='function Details:GetClass(actorName)'},
  },
  ['MakeCache'] = {
    {name='Details222.ClassCache.MakeCache', count=1, confidence=0.20, sample='function Details222.ClassCache.MakeCache()'},
  },
  ['GetContainer'] = {
    {name='GetContainer', count=98, confidence=1.00, sample='for _, actorObject in combatObject:GetContainer(DETAILS_ATTRIBUTE_DAMAGE):ListActors() do'},
  },
  ['ListActors'] = {
    {name='ListActors', count=66, confidence=1.00, sample='for _, actorObject in combatObject:GetContainer(DETAILS_ATTRIBUTE_DAMAGE):ListActors() do'},
  },
  ['IsPlayer'] = {
    {name='IsPlayer', count=50, confidence=1.00, sample='if (actorObject:IsPlayer()) then'},
  },
  ['MakeWeakTable'] = {
    {name='Details222.Tables.MakeWeakTable', count=1, confidence=0.20, sample='function Details222.Tables.MakeWeakTable(mode)'},
  },
  ['AddStat'] = {
    {name='AddStat', count=1, confidence=0.20, sample='function Details222.PlayerStats:AddStat(statName, value)'},
  },
  ['GetStat'] = {
    {name='GetStat', count=3, confidence=0.60, sample='function Details222.PlayerStats:GetStat(statName)'},
  },
  ['SetStat'] = {
    {name='SetStat', count=2, confidence=0.40, sample='function Details222.PlayerStats:SetStat(statName, value)'},
  },
  ['ProfileStart'] = {
    {name='Details222.Profiling.ProfileStart', count=8, confidence=1.00, sample='function Details222.Profiling.ProfileStart()end'},
  },
  ['ProfileStop'] = {
    {name='Details222.Profiling.ProfileStop', count=13, confidence=1.00, sample='function Details222.Profiling.ProfileStop()end'},
  },
  ['EnableProfiler'] = {
    {name='Details222.Profiling.EnableProfiler', count=2, confidence=0.40, sample='function Details222.Profiling.EnableProfiler()'},
  },
  ['DisableProfiler'] = {
    {name='Details222.Profiling.DisableProfiler', count=1, confidence=0.20, sample='function Details222.Profiling.DisableProfiler()'},
  },
  ['ResetProfiler'] = {
    {name='Details222.Profiling.ResetProfiler', count=1, confidence=0.20, sample='function Details222.Profiling.ResetProfiler()'},
  },
  ['ProfilerResult'] = {
    {name='ProfilerResult', count=1, confidence=0.20, sample='function Details:ProfilerResult()'},
  },
  ['ResetProfilerResult'] = {
    {name='ResetProfilerResult', count=1, confidence=0.20, sample='function Details:ResetProfilerResult()'},
  },
  ['Destroy'] = {
    {name='Destroy', count=187, confidence=1.00, sample='function Details:Destroy(object, key)'},
  },
  ['DestroyCombat'] = {
    {name='DestroyCombat', count=14, confidence=1.00, sample='function Details:DestroyCombat(combatObject)'},
  },
  ['DestroyActor'] = {
    {name='DestroyActor', count=9, confidence=1.00, sample='Details:DestroyActor(actorObject, actorContainer, combatObject, 3)'},
  },
  ['RemoveActor'] = {
    {name='RemoveActor', count=2, confidence=0.40, sample='---destroy the actor, also calls container:RemoveActor(actor)'},
    {name='Details222.TimeMachine.RemoveActor', count=13, confidence=1.00, sample='Details222.TimeMachine.RemoveActor(actorObject)'},
  },
  ['GetParserCacheTables'] = {
    {name='Details222.Cache.GetParserCacheTables', count=2, confidence=0.40, sample='local c1, c2, c3, c4 = Details222.Cache.GetParserCacheTables()'},
  },
  ['Name'] = {
    {name='Name', count=80, confidence=1.00, sample='local actorName = actorObject:Name()'},
  },
  ['RemoveActorFromSpellCastTable'] = {
    {name='RemoveActorFromSpellCastTable', count=2, confidence=0.40, sample='combatObject:RemoveActorFromSpellCastTable(actorName)'},
  },
  ['StartMeUp'] = {
    {name='Details222.StartUp.StartMeUp', count=2, confidence=0.40, sample='function Details222.StartUp.StartMeUp()'},
    {name='StartMeUp', count=1, confidence=0.20, sample='--custom displays - if there's no saved custom display, they will be filled from the StartMeUp() when a new version is installed'},
  },
  ['IsWarWow'] = {
    {name='IsWarWow', count=2, confidence=0.40, sample='if (PVPMatchResults and detailsFramework.IsWarWow()) then'},
    {name='DetailsFramework.IsWarWow', count=3, confidence=0.60, sample='if (DetailsFramework.IsWarWow()) then'},
    {name='DF.IsWarWow', count=5, confidence=1.00, sample='function DF.IsWarWow()'},
  },
  ['OpenArenaSummaryWindow'] = {
    {name='OpenArenaSummaryWindow', count=4, confidence=0.80, sample='Details:OpenArenaSummaryWindow()'},
  },
  ['GetStartupTime'] = {
    {name='Details.GetStartupTime', count=3, confidence=0.60, sample='function Details.GetStartupTime()'},
  },
  ['FillUserCustomSpells'] = {
    {name='FillUserCustomSpells', count=4, confidence=0.80, sample='Details:FillUserCustomSpells()'},
  },
  ['ReplaceRowSingleClickFunction'] = {
    {name='ReplaceRowSingleClickFunction', count=1, confidence=0.20, sample='function Details:ReplaceRowSingleClickFunction(attribute, subAttribute, func)'},
  },
  ['CreatePluginWindowContainer'] = {
    {name='CreatePluginWindowContainer', count=2, confidence=0.40, sample='Details:CreatePluginWindowContainer()'},
  },
  ['InitializeForge'] = {
    {name='InitializeForge', count=2, confidence=0.40, sample='Details:InitializeForge() --to install into the container plugin'},
  },
  ['InitializeRaidHistoryWindow'] = {
    {name='InitializeRaidHistoryWindow', count=2, confidence=0.40, sample='Details:InitializeRaidHistoryWindow()'},
  },
  ['InitializeOptionsWindow'] = {
    {name='InitializeOptionsWindow', count=2, confidence=0.40, sample='--Details:InitializeOptionsWindow() --debug, uncoment to open options window on startup'},
    {name='Details222.OptionsPanel.InitializeOptionsWindow', count=3, confidence=0.60, sample='return Details222.OptionsPanel.InitializeOptionsWindow(instance)'},
  },
  ['InitializeAuraCreationWindow'] = {
    {name='InitializeAuraCreationWindow', count=2, confidence=0.40, sample='Details:InitializeAuraCreationWindow()'},
  },
  ['InitializeCustomDisplayWindow'] = {
    {name='InitializeCustomDisplayWindow', count=2, confidence=0.40, sample='Details:InitializeCustomDisplayWindow()'},
  },
  ['InitializeAPIWindow'] = {
    {name='InitializeAPIWindow', count=2, confidence=0.40, sample='Details:InitializeAPIWindow()'},
  },
  ['InitializeRunCodeWindow'] = {
    {name='InitializeRunCodeWindow', count=2, confidence=0.40, sample='Details:InitializeRunCodeWindow()'},
  },
  ['InitializePlaterIntegrationWindow'] = {
    {name='InitializePlaterIntegrationWindow', count=2, confidence=0.40, sample='Details:InitializePlaterIntegrationWindow()'},
  },
  ['InitializeMacrosWindow'] = {
    {name='InitializeMacrosWindow', count=2, confidence=0.40, sample='Details:InitializeMacrosWindow()'},
  },
  ['InitializeEncounterSwapper'] = {
    {name='InitializeEncounterSwapper', count=2, confidence=0.40, sample='Details:InitializeEncounterSwapper()'},
  },
  ['CreateAllDisplaysFrame'] = {
    {name='Details222.CreateAllDisplaysFrame', count=2, confidence=0.40, sample='Details222.CreateAllDisplaysFrame()'},
  },
  ['LoadCommentatorFunctions'] = {
    {name='Details222.LoadCommentatorFunctions', count=2, confidence=0.40, sample='--Details222.LoadCommentatorFunctions()'},
  },
  ['FindAndIgnoreWorldAuras'] = {
    {name='Details222.AuraScan.FindAndIgnoreWorldAuras', count=1, confidence=0.20, sample='Details222.AuraScan.FindAndIgnoreWorldAuras()'},
    {name='AuraScan.FindAndIgnoreWorldAuras', count=1, confidence=0.20, sample='function AuraScan.FindAndIgnoreWorldAuras()'},
  },
  ['RegisterForOpenRaidNotes'] = {
    {name='Details222.Notes.RegisterForOpenRaidNotes', count=2, confidence=0.40, sample='Details222.Notes.RegisterForOpenRaidNotes()'},
  },
  ['InitializeCDTrackerWindow'] = {
    {name='InitializeCDTrackerWindow', count=3, confidence=0.60, sample='Details:InitializeCDTrackerWindow()'},
  },
  ['InitRecap'] = {
    {name='Details222.InitRecap', count=1, confidence=0.20, sample='--Details222.InitRecap()'},
  },
  ['CreateBreakdownWindow'] = {
    {name='CreateBreakdownWindow', count=2, confidence=0.40, sample='Details.BreakdownWindowFrame = Details:CreateBreakdownWindow()'},
  },
  ['Fader'] = {
    {name='Details.FadeHandler.Fader', count=116, confidence=1.00, sample='Details.FadeHandler.Fader(Details.BreakdownWindowFrame, 1)'},
  },
  ['CreateCopyPasteWindow'] = {
    {name='CreateCopyPasteWindow', count=2, confidence=0.40, sample='Details:CreateCopyPasteWindow()'},
  },
  ['GetNumInstancesAmount'] = {
    {name='GetNumInstancesAmount', count=6, confidence=1.00, sample='if (Details:GetNumInstancesAmount() == 0) then'},
  },
  ['CreateInstance'] = {
    {name='CreateInstance', count=7, confidence=1.00, sample='Details:CreateInstance()'},
  },
  ['GetLowerInstanceNumber'] = {
    {name='GetLowerInstanceNumber', count=36, confidence=1.00, sample='Details:GetLowerInstanceNumber()'},
  },
  ['UpdateSelectedToKFunction'] = {
    {name='UpdateSelectedToKFunction', count=30, confidence=1.00, sample='Details.atributo_damage:UpdateSelectedToKFunction()'},
  },
  ['CheckSwitchOnLogon'] = {
    {name='CheckSwitchOnLogon', count=6, confidence=1.00, sample='Details:CheckSwitchOnLogon()'},
  },
  ['ScheduledWindowUpdate'] = {
    {name='ScheduledWindowUpdate', count=1, confidence=0.20, sample='function Details:ScheduledWindowUpdate(bIsForced)'},
  },
  ['RefreshMainWindow'] = {
    {name='RefreshMainWindow', count=34, confidence=1.00, sample='Details:RefreshMainWindow(-1, bForceRefresh)'},
  },
  ['ScheduleWindowUpdate'] = {
    {name='ScheduleWindowUpdate', count=7, confidence=1.00, sample='function Details:ScheduleWindowUpdate(time, bIsForced)'},
  },
  ['RefreshUpdater'] = {
    {name='RefreshUpdater', count=5, confidence=1.00, sample='Details:RefreshUpdater()'},
  },
  ['GetNumInstances'] = {
    {name='GetNumInstances', count=4, confidence=0.80, sample='for instanceId = 1, Details:GetNumInstances() do'},
  },
  ['GetInstance'] = {
    {name='GetInstance', count=144, confidence=1.00, sample='local instance = Details:GetInstance(instanceId)'},
  },
  ['RefreshAfterStartup'] = {
    {name='RefreshAfterStartup', count=1, confidence=0.20, sample='function Details:RefreshAfterStartup()'},
  },
  ['GetNickname'] = {
    {name='GetNickname', count=5, confidence=1.00, sample='local nickname = Details:GetNickname(actorObject:Name(), false, true)'},
  },
  ['SetDisplayName'] = {
    {name='SetDisplayName', count=2, confidence=0.40, sample='actorObject:SetDisplayName(nickname)'},
  },
  ['InstanceWallpaper'] = {
    {name='InstanceWallpaper', count=9, confidence=1.00, sample='instance:InstanceWallpaper(true)'},
  },
  ['DesaturateMenu'] = {
    {name='DesaturateMenu', count=4, confidence=0.80, sample='instance:DesaturateMenu()'},
  },
  ['SetAutoHideMenu'] = {
    {name='SetAutoHideMenu', count=7, confidence=1.00, sample='instance:SetAutoHideMenu(nil, nil, true)'},
  },
  ['ReorganizeIcons'] = {
    {name='ReorganizeIcons', count=9, confidence=1.00, sample='Details.ToolBar:ReorganizeIcons()'},
  },
  ['ChangeSkin'] = {
    {name='ChangeSkin', count=25, confidence=1.00, sample='instance:ChangeSkin()'},
  },
  ['CheckWallpaperAfterStartup'] = {
    {name='CheckWallpaperAfterStartup', count=1, confidence=0.20, sample='function Details:CheckWallpaperAfterStartup()'},
  },
  ['CaptureRefresh'] = {
    {name='CaptureRefresh', count=5, confidence=1.00, sample='Details:CaptureRefresh()'},
  },
  ['IsTimewalkWoW'] = {
    {name='DetailsFramework.IsTimewalkWoW', count=13, confidence=1.00, sample='if (not DetailsFramework.IsTimewalkWoW()) then --C_EventUtils.IsEventValid'},
    {name='IsTimewalkWoW', count=2, confidence=0.40, sample='if (detailsFramework.IsTimewalkWoW()) then'},
    {name='DF.IsTimewalkWoW', count=3, confidence=0.60, sample='function DF.IsTimewalkWoW()'},
  },
  ['SchedulePetUpdate'] = {
    {name='SchedulePetUpdate', count=9, confidence=1.00, sample='Details:SchedulePetUpdate(1)'},
  },
  ['ListInstances'] = {
    {name='ListInstances', count=25, confidence=1.00, sample='for id, instancia in Details:ListInstances() do'},
  },
  ['SendEvent'] = {
    {name='SendEvent', count=101, confidence=1.00, sample='Details:SendEvent("DETAILS_INSTANCE_OPEN", nil, instancia)'},
  },
  ['AnnounceStartup'] = {
    {name='AnnounceStartup', count=1, confidence=0.20, sample='function Details:AnnounceStartup()'},
  },
  ['AnnounceVersion'] = {
    {name='AnnounceVersion', count=1, confidence=0.20, sample='function Details:AnnounceVersion()'},
  },
  ['CheckVersion'] = {
    {name='CheckVersion', count=3, confidence=0.60, sample='Details:CheckVersion(true)'},
  },
  ['Restore'] = {
    {name='Restore', count=2, confidence=0.40, sample='DetailsTooltipAnchor:Restore()'},
  },
  ['AddDefaultCustomDisplays'] = {
    {name='AddDefaultCustomDisplays', count=9, confidence=1.00, sample='Details:AddDefaultCustomDisplays()'},
  },
  ['OpenNewsWindow'] = {
    {name='Details.OpenNewsWindow', count=1, confidence=0.20, sample='Details.OpenNewsWindow()'},
    {name='OpenNewsWindow', count=2, confidence=0.40, sample='Details:OpenNewsWindow()'},
  },
  ['InstanceAlert'] = {
    {name='InstanceAlert', count=15, confidence=1.00, sample='lowerInstanceId:InstanceAlert(Loc["STRING_VERSION_UPDATE"],'},
  },
  ['CanUseVoidStorage'] = {
    {name='CanUseVoidStorage', count=1, confidence=0.20, sample='if (not CanUseVoidStorage()) then'},
  },
  ['SwitchBack'] = {
    {name='SwitchBack', count=6, confidence=1.00, sample='instance:SwitchBack()'},
  },
  ['FadeStartVersion'] = {
    {name='FadeStartVersion', count=1, confidence=0.20, sample='function Details:FadeStartVersion()'},
  },
  ['OnUnitUpdate'] = {
    {name='OnUnitUpdate', count=2, confidence=0.40, sample='function t.OnUnitUpdate(unitId, unitInfo)'},
  },
  ['GetSpellIdsFromTalentString'] = {
    {name='GetSpellIdsFromTalentString', count=2, confidence=0.40, sample='--local unitTalents = openRaidLib.GetSpellIdsFromTalentString(talents)'},
  },
  ['GetUnitInfo'] = {
    {name='GetUnitInfo', count=9, confidence=1.00, sample='local unitInfo = openRaidLib.GetUnitInfo("player")'},
    {name='UnitInfoManager.GetUnitInfo', count=6, confidence=1.00, sample='return openRaidLib.UnitInfoManager.GetUnitInfo(unitName)'},
  },
  ['OpenOptionsWindowAtStart'] = {
    {name='OpenOptionsWindowAtStart', count=1, confidence=0.20, sample='function Details:OpenOptionsWindowAtStart()'},
  },
  ['OpenOptionsWindow'] = {
    {name='OpenOptionsWindow', count=27, confidence=1.00, sample='--Details:OpenOptionsWindow (Details.tabela_instancias[1])'},
  },
  ['OpenCustomDisplayWindow'] = {
    {name='OpenCustomDisplayWindow', count=4, confidence=0.80, sample='--Details:OpenCustomDisplayWindow()'},
  },
  ['OpenWelcomeWindow'] = {
    {name='OpenWelcomeWindow', count=3, confidence=0.60, sample='--Details:OpenWelcomeWindow()'},
  },
  ['RestoreState_CurrentMythicDungeonRun'] = {
    {name='RestoreState_CurrentMythicDungeonRun', count=2, confidence=0.40, sample='Details:RestoreState_CurrentMythicDungeonRun()'},
  },
  ['OpenProfiler'] = {
    {name='OpenProfiler', count=2, confidence=0.40, sample='Details:OpenProfiler()'},
  },
  ['StartAnnouncers'] = {
    {name='StartAnnouncers', count=2, confidence=0.40, sample='Details:StartAnnouncers()'},
  },
  ['LoadFramesForBroadcastTools'] = {
    {name='LoadFramesForBroadcastTools', count=9, confidence=1.00, sample='Details:LoadFramesForBroadcastTools()'},
  },
  ['BrokerTick'] = {
    {name='BrokerTick', count=8, confidence=1.00, sample='Details:BrokerTick()'},
  },
  ['GetTrinketData'] = {
    {name='GetTrinketData', count=4, confidence=0.80, sample='function Details:GetTrinketData()'},
  },
  ['GetDefaultCustomItemList'] = {
    {name='GetDefaultCustomItemList', count=2, confidence=0.40, sample='local customSpellList = Details:GetDefaultCustomItemList()'},
  },
  ['GetItemNameByID'] = {
    {name='C_Item.GetItemNameByID', count=3, confidence=0.60, sample='itemName = C_Item.GetItemNameByID(trinketTable.itemId),'},
  },
  ['GetPool'] = {
    {name='GetPool', count=2, confidence=0.40, sample='for guid, ilevelTable in pairs(Details.ilevel:GetPool()) do'},
  },
  ['ClearIlvl'] = {
    {name='ClearIlvl', count=2, confidence=0.40, sample='Details.ilevel:ClearIlvl(guid)'},
  },
  ['CheckChatEmbed'] = {
    {name='CheckChatEmbed', count=2, confidence=0.40, sample='Details.chat_embed:CheckChatEmbed(true)'},
  },
  ['InstallRaidInfo'] = {
    {name='Details.InstallRaidInfo', count=2, confidence=0.40, sample='Details.InstallRaidInfo()'},
  },
  ['RefreshPlaterIntegration'] = {
    {name='RefreshPlaterIntegration', count=5, confidence=1.00, sample='Details:RefreshPlaterIntegration()'},
  },
  ['IsClassicWow'] = {
    {name='DetailsFramework.IsClassicWow', count=6, confidence=1.00, sample='if (not DetailsFramework.IsClassicWow()) then'},
    {name='IsClassicWow', count=1, confidence=0.20, sample='local isERA = detailsFramework.IsClassicWow()'},
    {name='DF.IsClassicWow', count=3, confidence=0.60, sample='function DF.IsClassicWow()'},
  },
  ['Discord'] = {
    {name='Discord', count=1, confidence=0.20, sample='--print("|CFFFFFF00[Details!]: you're using Details! for RETAIL on Classic WOW, please get the classic version (Details! Damage Meter Classic WoW), if you need help see our Discord (/details discord).")'},
  },
  ['InstallHook'] = {
    {name='InstallHook', count=11, confidence=1.00, sample='Details:InstallHook("HOOK_DEATH", Details.Coach.Client.SendMyDeath)'},
  },
  ['InitializeSpellBreakdownTab'] = {
    {name='Details.InitializeSpellBreakdownTab', count=2, confidence=0.40, sample='Details.InitializeSpellBreakdownTab()'},
  },
  ['BuildSpecsNameCache'] = {
    {name='BuildSpecsNameCache', count=2, confidence=0.40, sample='Details:BuildSpecsNameCache()'},
  },
  ['DoMaintenance'] = {
    {name='Details222.Cache.DoMaintenance', count=2, confidence=0.40, sample='Details222.Cache.DoMaintenance()'},
    {name='Details222.PetContainer.DoMaintenance', count=1, confidence=0.20, sample='Details222.PetContainer.DoMaintenance()'},
    {name='DoMaintenance', count=2, confidence=0.40, sample='function petContainer.DoMaintenance()'},
  },
  ['InstallOkey'] = {
    {name='InstallOkey', count=1, confidence=0.20, sample='function Details:InstallOkey()'},
  },
  ['IsNearlyEqual'] = {
    {name='IsNearlyEqual', count=9, confidence=1.00, sample='if (DetailsFramework:IsNearlyEqual(Details.class_coords.ROGUE[4], 0.25)) then'},
    {name='Math.IsNearlyEqual', count=1, confidence=0.20, sample='if (previousEvent[1] == 4 and previousEvent[2] == spellId and detailsFramework.Math.IsNearlyEqual(time, previousEvent[4], 0.01)) then'},
    {name='DF.Math.IsNearlyEqual', count=1, confidence=0.20, sample='function DF.Math.IsNearlyEqual(value1, value2, tolerance)'},
  },
  ['SetHelpTipsEnabled'] = {
    {name='SetHelpTipsEnabled', count=1, confidence=0.20, sample='function HelpTip:SetHelpTipsEnabled(flag, enabled)'},
  },
  ['Usage'] = {
    {name='Usage', count=1, confidence=0.20, sample='-- Usage (for developers)'},
  },
  ['GetMaxBytes'] = {
    {name='GetMaxBytes', count=1, confidence=0.20, sample='editbox.oldMaxBytes = editbox:GetMaxBytes()'},
  },
  ['GetMaxLetters'] = {
    {name='GetMaxLetters', count=1, confidence=0.20, sample='editbox.oldMaxLetters = editbox:GetMaxLetters()'},
  },
  ['SetMaxBytes'] = {
    {name='SetMaxBytes', count=3, confidence=0.60, sample='editbox:SetMaxBytes(0)'},
  },
  ['GetTextureAtlas'] = {
    {name='GetTextureAtlas', count=21, confidence=1.00, sample='function Details:GetTextureAtlas(atlasName)'},
  },
  ['PreviewTexture'] = {
    {name='PreviewTexture', count=3, confidence=0.60, sample='--DetailsFramework:PreviewTexture(Details.TextureAtlas["segment-icon-arena"])'},
  },
  ['DoesCombatWithUIDExists'] = {
    {name='DoesCombatWithUIDExists', count=3, confidence=0.60, sample='---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()'},
  },
  ['GetCombatByUID'] = {
    {name='GetCombatByUID', count=3, confidence=0.60, sample='---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()'},
  },
  ['GetCombatUID'] = {
    {name='GetCombatUID', count=9, confidence=1.00, sample='---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()'},
  },
  ['Remap'] = {
    {name='Remap', count=11, confidence=1.00, sample='---@field _NameIndexTable table<string, number> [actorName] = actorIndex in the _ActorTable, actorcontainer:Remap() refreshes the _NameIndexTable'},
  },
  ['ParseColors'] = {
    {name='ParseColors', count=209, confidence=1.00, sample='---@alias red number color value representing the red component of a color, the value must be between 0 and 1. To retrieve a color from a string or table use: local red, green, blue, alpha = DetailsFramework:ParseColors(color)'},
  },
  ['CompressString'] = {
    {name='C_EncodingUtil.CompressString', count=2, confidence=0.40, sample='function C_EncodingUtil.CompressString(source, method, level) return "" end'},
  },
  ['DecodeBase64'] = {
    {name='C_EncodingUtil.DecodeBase64', count=2, confidence=0.40, sample='function C_EncodingUtil.DecodeBase64(source, variant) return "" end'},
  },
  ['DecodeHex'] = {
    {name='C_EncodingUtil.DecodeHex', count=1, confidence=0.20, sample='function C_EncodingUtil.DecodeHex(source) return "" end'},
  },
  ['DecompressString'] = {
    {name='C_EncodingUtil.DecompressString', count=2, confidence=0.40, sample='function C_EncodingUtil.DecompressString(source, method) return "" end'},
  },
  ['DeserializeCBOR'] = {
    {name='C_EncodingUtil.DeserializeCBOR', count=2, confidence=0.40, sample='function C_EncodingUtil.DeserializeCBOR(source) return nil end'},
  },
  ['DeserializeJSON'] = {
    {name='C_EncodingUtil.DeserializeJSON', count=1, confidence=0.20, sample='function C_EncodingUtil.DeserializeJSON(source) return nil end'},
  },
  ['EncodeBase64'] = {
    {name='C_EncodingUtil.EncodeBase64', count=2, confidence=0.40, sample='function C_EncodingUtil.EncodeBase64(source, variant) return "" end'},
  },
  ['EncodeHex'] = {
    {name='C_EncodingUtil.EncodeHex', count=1, confidence=0.20, sample='function C_EncodingUtil.EncodeHex(source) return "" end'},
  },
  ['SerializeCBOR'] = {
    {name='C_EncodingUtil.SerializeCBOR', count=2, confidence=0.40, sample='function C_EncodingUtil.SerializeCBOR(value, options) return "" end'},
  },
  ['SerializeJSON'] = {
    {name='C_EncodingUtil.SerializeJSON', count=1, confidence=0.20, sample='function C_EncodingUtil.SerializeJSON(value, options) return "" end'},
  },
  ['GetMouseFoci'] = {
    {name='GetMouseFoci', count=1, confidence=0.20, sample='function GetMouseFoci()'},
  },
  ['IsBoundToAccountUntilEquip'] = {
    {name='C_Item.IsBoundToAccountUntilEquip', count=1, confidence=0.20, sample='function C_Item.IsBoundToAccountUntilEquip() end'},
  },
  ['LockItem'] = {
    {name='C_Item.LockItem', count=1, confidence=0.20, sample='function C_Item.LockItem() end'},
  },
  ['DoesItemMatchTargetEnchantingSpell'] = {
    {name='C_Item.DoesItemMatchTargetEnchantingSpell', count=1, confidence=0.20, sample='function C_Item.DoesItemMatchTargetEnchantingSpell() end'},
  },
  ['IsItemCorruptionRelated'] = {
    {name='C_Item.IsItemCorruptionRelated', count=1, confidence=0.20, sample='function C_Item.IsItemCorruptionRelated() end'},
  },
  ['GetItemIconByID'] = {
    {name='C_Item.GetItemIconByID', count=3, confidence=0.60, sample='function C_Item.GetItemIconByID(itemInfo) return 0 end'},
  },
  ['GetItemIcon'] = {
    {name='C_Item.GetItemIcon', count=1, confidence=0.20, sample='function C_Item.GetItemIcon(itemLocation) return 0 end'},
  },
  ['ConfirmOnUse'] = {
    {name='C_Item.ConfirmOnUse', count=1, confidence=0.20, sample='function C_Item.ConfirmOnUse() end'},
  },
  ['GetItemIDForItemInfo'] = {
    {name='C_Item.GetItemIDForItemInfo', count=1, confidence=0.20, sample='function C_Item.GetItemIDForItemInfo() end'},
  },
  ['IsCorruptedItem'] = {
    {name='C_Item.IsCorruptedItem', count=1, confidence=0.20, sample='function C_Item.IsCorruptedItem() end'},
  },
  ['GetBaseItemTransmogInfo'] = {
    {name='C_Item.GetBaseItemTransmogInfo', count=1, confidence=0.20, sample='function C_Item.GetBaseItemTransmogInfo() end'},
  },
  ['GetItemMaxStackSize'] = {
    {name='C_Item.GetItemMaxStackSize', count=1, confidence=0.20, sample='function C_Item.GetItemMaxStackSize() end'},
  },
  ['ConfirmNoRefundOnUse'] = {
    {name='C_Item.ConfirmNoRefundOnUse', count=1, confidence=0.20, sample='function C_Item.ConfirmNoRefundOnUse() end'},
  },
  ['GetFirstTriggeredSpellForItem'] = {
    {name='C_Item.GetFirstTriggeredSpellForItem', count=1, confidence=0.20, sample='function C_Item.GetFirstTriggeredSpellForItem() end'},
  },
  ['GetItemInventorySlotInfo'] = {
    {name='C_Item.GetItemInventorySlotInfo', count=1, confidence=0.20, sample='function C_Item.GetItemInventorySlotInfo() end'},
  },
  ['IsItemCorrupted'] = {
    {name='C_Item.IsItemCorrupted', count=1, confidence=0.20, sample='function C_Item.IsItemCorrupted() end'},
  },
  ['ActionBindsItem'] = {
    {name='C_Item.ActionBindsItem', count=1, confidence=0.20, sample='function C_Item.ActionBindsItem() end'},
  },
  ['GetCurrentItemTransmogInfo'] = {
    {name='C_Item.GetCurrentItemTransmogInfo', count=1, confidence=0.20, sample='function C_Item.GetCurrentItemTransmogInfo() end'},
  },
  ['RequestLoadItemDataByID'] = {
    {name='C_Item.RequestLoadItemDataByID', count=1, confidence=0.20, sample='function C_Item.RequestLoadItemDataByID() end'},
  },
  ['GetItemSetInfo'] = {
    {name='C_Item.GetItemSetInfo', count=1, confidence=0.20, sample='function C_Item.GetItemSetInfo() end'},
  },
  ['GetItemCreationContext'] = {
    {name='C_Item.GetItemCreationContext', count=1, confidence=0.20, sample='function C_Item.GetItemCreationContext() end'},
  },
  ['IsItemDataCachedByID'] = {
    {name='C_Item.IsItemDataCachedByID', count=1, confidence=0.20, sample='function C_Item.IsItemDataCachedByID() end'},
  },
  ['ItemHasRange'] = {
    {name='C_Item.ItemHasRange', count=1, confidence=0.20, sample='function C_Item.ItemHasRange() end'},
  },
  ['ConfirmBindOnUse'] = {
    {name='C_Item.ConfirmBindOnUse', count=1, confidence=0.20, sample='function C_Item.ConfirmBindOnUse() end'},
  },
  ['GetItemSpecInfo'] = {
    {name='C_Item.GetItemSpecInfo', count=1, confidence=0.20, sample='function C_Item.GetItemSpecInfo() end'},
  },
  ['EndBoundTradeable'] = {
    {name='C_Item.EndBoundTradeable', count=1, confidence=0.20, sample='function C_Item.EndBoundTradeable() end'},
  },
  ['EndRefund'] = {
    {name='C_Item.EndRefund', count=1, confidence=0.20, sample='function C_Item.EndRefund() end'},
  },
  ['UseItemByName'] = {
    {name='C_Item.UseItemByName', count=1, confidence=0.20, sample='function C_Item.UseItemByName() end'},
  },
  ['IsDressableItemByID'] = {
    {name='C_Item.IsDressableItemByID', count=1, confidence=0.20, sample='function C_Item.IsDressableItemByID() end'},
  },
  ['GetItemGUID'] = {
    {name='C_Item.GetItemGUID', count=1, confidence=0.20, sample='function C_Item.GetItemGUID() end'},
  },
  ['GetItemInventoryTypeByID'] = {
    {name='C_Item.GetItemInventoryTypeByID', count=1, confidence=0.20, sample='function C_Item.GetItemInventoryTypeByID() end'},
  },
  ['UnlockItem'] = {
    {name='C_Item.UnlockItem', count=1, confidence=0.20, sample='function C_Item.UnlockItem() end'},
  },
  ['RequestLoadItemData'] = {
    {name='C_Item.RequestLoadItemData', count=1, confidence=0.20, sample='function C_Item.RequestLoadItemData() end'},
  },
  ['IsItemInRange'] = {
    {name='C_Item.IsItemInRange', count=1, confidence=0.20, sample='function C_Item.IsItemInRange() end'},
  },
  ['IsItemConvertibleAndValidForPlayer'] = {
    {name='C_Item.IsItemConvertibleAndValidForPlayer', count=1, confidence=0.20, sample='function C_Item.IsItemConvertibleAndValidForPlayer() end'},
  },
  ['DoesItemExist'] = {
    {name='C_Item.DoesItemExist', count=1, confidence=0.20, sample='function C_Item.DoesItemExist() end'},
  },
  ['ReplaceTradeEnchant'] = {
    {name='C_Item.ReplaceTradeEnchant', count=1, confidence=0.20, sample='function C_Item.ReplaceTradeEnchant() end'},
    {name='ReplaceTradeEnchant', count=1, confidence=0.20, sample='function ReplaceTradeEnchant(slotId) end'},
  },
  ['UnlockItemByGUID'] = {
    {name='C_Item.UnlockItemByGUID', count=1, confidence=0.20, sample='function C_Item.UnlockItemByGUID() end'},
  },
  ['DoesItemExistByID'] = {
    {name='C_Item.DoesItemExistByID', count=1, confidence=0.20, sample='function C_Item.DoesItemExistByID() end'},
  },
  ['LockItemByGUID'] = {
    {name='C_Item.LockItemByGUID', count=1, confidence=0.20, sample='function C_Item.LockItemByGUID() end'},
  },
  ['GetItemIDByGUID'] = {
    {name='C_Item.GetItemIDByGUID', count=1, confidence=0.20, sample='function C_Item.GetItemIDByGUID() end'},
  },
  ['IsLocked'] = {
    {name='C_Item.IsLocked', count=1, confidence=0.20, sample='function C_Item.IsLocked() end'},
  },
  ['IsItemSpecificToPlayerClass'] = {
    {name='C_Item.IsItemSpecificToPlayerClass', count=1, confidence=0.20, sample='function C_Item.IsItemSpecificToPlayerClass() end'},
  },
  ['GetItemNumAddedSockets'] = {
    {name='C_Item.GetItemNumAddedSockets', count=1, confidence=0.20, sample='function C_Item.GetItemNumAddedSockets() end'},
  },
  ['IsItemKeystoneByID'] = {
    {name='C_Item.IsItemKeystoneByID', count=1, confidence=0.20, sample='function C_Item.IsItemKeystoneByID() end'},
  },
  ['IsConsumableItem'] = {
    {name='C_Item.IsConsumableItem', count=1, confidence=0.20, sample='function C_Item.IsConsumableItem() end'},
  },
  ['IsCurioItem'] = {
    {name='C_Item.IsCurioItem', count=1, confidence=0.20, sample='function C_Item.IsCurioItem() end'},
  },
  ['GetItemStatDelta'] = {
    {name='C_Item.GetItemStatDelta', count=1, confidence=0.20, sample='function C_Item.GetItemStatDelta() end'},
  },
  ['IsItemDataCached'] = {
    {name='C_Item.IsItemDataCached', count=1, confidence=0.20, sample='function C_Item.IsItemDataCached() end'},
  },
  ['IsItemConduit'] = {
    {name='C_Item.IsItemConduit', count=1, confidence=0.20, sample='function C_Item.IsItemConduit() end'},
  },
  ['GetItemNumSockets'] = {
    {name='C_Item.GetItemNumSockets', count=1, confidence=0.20, sample='function C_Item.GetItemNumSockets() end'},
  },
  ['GetAppliedItemTransmogInfo'] = {
    {name='C_Item.GetAppliedItemTransmogInfo', count=1, confidence=0.20, sample='function C_Item.GetAppliedItemTransmogInfo() end'},
  },
  ['IsHelpfulItem'] = {
    {name='C_Item.IsHelpfulItem', count=1, confidence=0.20, sample='function C_Item.IsHelpfulItem() end'},
  },
  ['GetItemUniquenessByID'] = {
    {name='C_Item.GetItemUniquenessByID', count=1, confidence=0.20, sample='function C_Item.GetItemUniquenessByID() end'},
  },
  ['GetItemGemID'] = {
    {name='C_Item.GetItemGemID', count=1, confidence=0.20, sample='function C_Item.GetItemGemID() end'},
  },
  ['IsHarmfulItem'] = {
    {name='C_Item.IsHarmfulItem', count=1, confidence=0.20, sample='function C_Item.IsHarmfulItem() end'},
  },
  ['DropItemOnUnit'] = {
    {name='C_Item.DropItemOnUnit', count=1, confidence=0.20, sample='function C_Item.DropItemOnUnit() end'},
    {name='DropItemOnUnit', count=1, confidence=0.20, sample='function DropItemOnUnit(itemName, unit) end'},
  },
  ['IsEquippedItemType'] = {
    {name='C_Item.IsEquippedItemType', count=1, confidence=0.20, sample='function C_Item.IsEquippedItemType() end'},
  },
  ['GetItemFamily'] = {
    {name='C_Item.GetItemFamily', count=1, confidence=0.20, sample='function C_Item.GetItemFamily() end'},
  },
  ['GetLimitedCurrencyItemInfo'] = {
    {name='C_Item.GetLimitedCurrencyItemInfo', count=1, confidence=0.20, sample='function C_Item.GetLimitedCurrencyItemInfo() end'},
  },
  ['GetItemInventorySlotKey'] = {
    {name='C_Item.GetItemInventorySlotKey', count=1, confidence=0.20, sample='function C_Item.GetItemInventorySlotKey() end'},
  },
  ['IsEquippableItem'] = {
    {name='C_Item.IsEquippableItem', count=1, confidence=0.20, sample='function C_Item.IsEquippableItem() end'},
  },
  ['GetItemConversionOutputIcon'] = {
    {name='C_Item.GetItemConversionOutputIcon', count=1, confidence=0.20, sample='function C_Item.GetItemConversionOutputIcon() end'},
  },
  ['ReplaceEnchant'] = {
    {name='C_Item.ReplaceEnchant', count=1, confidence=0.20, sample='function C_Item.ReplaceEnchant() end'},
  },
  ['GetItemLearnTransmogSet'] = {
    {name='C_Item.GetItemLearnTransmogSet', count=1, confidence=0.20, sample='function C_Item.GetItemLearnTransmogSet() end'},
  },
  ['IsCurrentItem'] = {
    {name='C_Item.IsCurrentItem', count=1, confidence=0.20, sample='function C_Item.IsCurrentItem() end'},
  },
  ['IsItemGUIDInInventory'] = {
    {name='C_Item.IsItemGUIDInInventory', count=1, confidence=0.20, sample='function C_Item.IsItemGUIDInInventory() end'},
  },
  ['GetItemGem'] = {
    {name='C_Item.GetItemGem', count=1, confidence=0.20, sample='function C_Item.GetItemGem() end'},
  },
  ['IsCosmeticItem'] = {
    {name='C_Item.IsCosmeticItem', count=1, confidence=0.20, sample='function C_Item.IsCosmeticItem() end'},
  },
  ['IsArtifactPowerItem'] = {
    {name='C_Item.IsArtifactPowerItem', count=1, confidence=0.20, sample='function C_Item.IsArtifactPowerItem() end'},
  },
  ['ReplaceTradeskillEnchant'] = {
    {name='C_Item.ReplaceTradeskillEnchant', count=1, confidence=0.20, sample='function C_Item.ReplaceTradeskillEnchant() end'},
  },
  ['GetSetBonusesForSpecializationByItemID'] = {
    {name='C_Item.GetSetBonusesForSpecializationByItemID', count=1, confidence=0.20, sample='function C_Item.GetSetBonusesForSpecializationByItemID() end'},
  },
  ['GetItemSpell'] = {
    {name='C_Item.GetItemSpell', count=1, confidence=0.20, sample='function C_Item.GetItemSpell() end'},
  },
  ['DoesItemMatchBonusTreeReplacement'] = {
    {name='C_Item.DoesItemMatchBonusTreeReplacement', count=1, confidence=0.20, sample='function C_Item.DoesItemMatchBonusTreeReplacement() end'},
  },
  ['GetCurrentItemLevel'] = {
    {name='C_Item.GetCurrentItemLevel', count=1, confidence=0.20, sample='function C_Item.GetCurrentItemLevel() end'},
  },
  ['DoesItemContainSpec'] = {
    {name='C_Item.DoesItemContainSpec', count=1, confidence=0.20, sample='function C_Item.DoesItemContainSpec() end'},
  },
  ['CanItemTransmogAppearance'] = {
    {name='C_Item.CanItemTransmogAppearance', count=1, confidence=0.20, sample='function C_Item.CanItemTransmogAppearance() end'},
  },
  ['GetItemQualityByID'] = {
    {name='C_Item.GetItemQualityByID', count=1, confidence=0.20, sample='function C_Item.GetItemQualityByID() end'},
  },
  ['GetItemLinkByGUID'] = {
    {name='C_Item.GetItemLinkByGUID', count=1, confidence=0.20, sample='function C_Item.GetItemLinkByGUID() end'},
  },
  ['BindEnchant'] = {
    {name='C_Item.BindEnchant', count=1, confidence=0.20, sample='function C_Item.BindEnchant() end'},
  },
  ['IsItemCorruptionResistant'] = {
    {name='C_Item.IsItemCorruptionResistant', count=1, confidence=0.20, sample='function C_Item.IsItemCorruptionResistant() end'},
  },
  ['CanViewItemPowers'] = {
    {name='C_Item.CanViewItemPowers', count=1, confidence=0.20, sample='function C_Item.CanViewItemPowers() end'},
  },
  ['GetItemChildInfo'] = {
    {name='C_Item.GetItemChildInfo', count=1, confidence=0.20, sample='function C_Item.GetItemChildInfo() end'},
  },
  ['GetItemLink'] = {
    {name='C_Item.GetItemLink', count=1, confidence=0.20, sample='function C_Item.GetItemLink() end'},
  },
  ['CanScrapItem'] = {
    {name='C_Item.CanScrapItem', count=1, confidence=0.20, sample='function C_Item.CanScrapItem() end'},
  },
  ['GetItemName'] = {
    {name='C_Item.GetItemName', count=1, confidence=0.20, sample='function C_Item.GetItemName() end'},
  },
  ['GetItemInventoryType'] = {
    {name='C_Item.GetItemInventoryType', count=1, confidence=0.20, sample='function C_Item.GetItemInventoryType() end'},
  },
  ['GetItemMaxStackSizeByID'] = {
    {name='C_Item.GetItemMaxStackSizeByID', count=1, confidence=0.20, sample='function C_Item.GetItemMaxStackSizeByID() end'},
  },
  ['DoesItemMatchTrackJump'] = {
    {name='C_Item.DoesItemMatchTrackJump', count=1, confidence=0.20, sample='function C_Item.DoesItemMatchTrackJump() end'},
  },
  ['GetStackCount'] = {
    {name='C_Item.GetStackCount', count=1, confidence=0.20, sample='function C_Item.GetStackCount() end'},
  },
  ['GetGuildFactionData'] = {
    {name='C_Reputation.GetGuildFactionData', count=1, confidence=0.20, sample='function C_Reputation.GetGuildFactionData() return {} end'},
  },
  ['AddPrivateAuraAnchor'] = {
    {name='C_UnitAuras.AddPrivateAuraAnchor', count=1, confidence=0.20, sample='function C_UnitAuras.AddPrivateAuraAnchor(privateAuraAnchor)end'},
  },
  ['AddPrivateAuraAppliedSound'] = {
    {name='C_UnitAuras.AddPrivateAuraAppliedSound', count=1, confidence=0.20, sample='function C_UnitAuras.AddPrivateAuraAppliedSound(privateAuraAnchor) return 0 end'},
  },
  ['AuraIsPrivate'] = {
    {name='C_UnitAuras.AuraIsPrivate', count=1, confidence=0.20, sample='function C_UnitAuras.AuraIsPrivate(spellID) return true end'},
  },
  ['SetPrivateWarningTextAnchor'] = {
    {name='C_UnitAuras.SetPrivateWarningTextAnchor', count=1, confidence=0.20, sample='function C_UnitAuras.SetPrivateWarningTextAnchor(parent, anchor) end'},
  },
  ['RemovePrivateAuraAnchor'] = {
    {name='C_UnitAuras.RemovePrivateAuraAnchor', count=1, confidence=0.20, sample='function C_UnitAuras.RemovePrivateAuraAnchor(anchorID) end'},
  },
  ['RemovePrivateAuraAppliedSound'] = {
    {name='C_UnitAuras.RemovePrivateAuraAppliedSound', count=1, confidence=0.20, sample='function C_UnitAuras.RemovePrivateAuraAppliedSound(privateAuraSoundID) end'},
  },
  ['GetAuraDataByAuraInstanceID'] = {
    {name='C_UnitAuras.GetAuraDataByAuraInstanceID', count=6, confidence=1.00, sample='function C_UnitAuras.GetAuraDataByAuraInstanceID(unitToken, auraInstanceID) return {} end'},
  },
  ['GetAuraDataBySlot'] = {
    {name='C_UnitAuras.GetAuraDataBySlot', count=1, confidence=0.20, sample='function C_UnitAuras.GetAuraDataBySlot(unitToken, auraSlot) return {} end'},
  },
  ['GetAuraDataBySpellName'] = {
    {name='C_UnitAuras.GetAuraDataBySpellName', count=1, confidence=0.20, sample='function C_UnitAuras.GetAuraDataBySpellName(unitToken, spellName, filter) return {} end'},
  },
  ['GetAuraSlots'] = {
    {name='C_UnitAuras.GetAuraSlots', count=1, confidence=0.20, sample='function C_UnitAuras.GetAuraSlots(unitToken, filter, maxSlots, continuationToken) return 0, 0 end'},
  },
  ['GetDebuffDataByIndex'] = {
    {name='C_UnitAuras.GetDebuffDataByIndex', count=1, confidence=0.20, sample='function C_UnitAuras.GetDebuffDataByIndex(unitToken, index, filter) return {} end'},
  },
  ['GetCooldownAuraBySpellID'] = {
    {name='C_UnitAuras.GetCooldownAuraBySpellID', count=1, confidence=0.20, sample='function C_UnitAuras.GetCooldownAuraBySpellID(spellID) return 0 end'},
  },
  ['IsAuraFilteredOutByInstanceID'] = {
    {name='C_UnitAuras.IsAuraFilteredOutByInstanceID', count=1, confidence=0.20, sample='function C_UnitAuras.IsAuraFilteredOutByInstanceID(unitToken, auraInstanceID, filterString) return true end'},
  },
  ['WantsAlteredForm'] = {
    {name='C_UnitAuras.WantsAlteredForm', count=1, confidence=0.20, sample='function C_UnitAuras.WantsAlteredForm(unitToken) return true end'},
  },
  ['Clamp'] = {
    {name='Clamp', count=12, confidence=1.00, sample='---clamps a value between a minimum and maximum range. Example: Clamp(17, 13, 15) return 15'},
    {name='DF.Math.Clamp', count=1, confidence=0.20, sample='function DF.Math.Clamp(minValue, maxValue, value)'},
  },
  ['Saturate'] = {
    {name='Saturate', count=17, confidence=1.00, sample='--lock a value to be between 0 and 1. Example: Saturate(1.324) return 1, Saturate(-0.324) return 0'},
  },
  ['Wrap'] = {
    {name='Wrap', count=2, confidence=0.40, sample='---wraps a value within a specified range. Example: Wrap(17, 13) return 4'},
  },
  ['ClampMod'] = {
    {name='ClampMod', count=2, confidence=0.40, sample='---wraps a value within a specified range using modular arithmetic. Example: ClampMod(11, 3) return 2 (11 % 3 = 2)'},
  },
  ['ClampDegrees'] = {
    {name='ClampDegrees', count=1, confidence=0.20, sample='function ClampDegrees(value) return 0 end'},
  },
  ['NegateIf'] = {
    {name='NegateIf', count=1, confidence=0.20, sample='function NegateIf(value, condition) return 0 end'},
  },
  ['RandomFloatInRange'] = {
    {name='RandomFloatInRange', count=9, confidence=1.00, sample='function RandomFloatInRange(minValue, maxValue) return 0 end'},
  },
  ['PercentageBetween'] = {
    {name='PercentageBetween', count=1, confidence=0.20, sample='function PercentageBetween(value, startValue, endValue) return 0 end'},
  },
  ['ClampedPercentageBetween'] = {
    {name='ClampedPercentageBetween', count=2, confidence=0.40, sample='function ClampedPercentageBetween(value, startValue, endValue) return 0 end'},
  },
  ['GetTickTime'] = {
    {name='GetTickTime', count=1, confidence=0.20, sample='function GetTickTime() return 0 end'},
  },
  ['DeltaLerp'] = {
    {name='DeltaLerp', count=1, confidence=0.20, sample='function DeltaLerp(startValue, endValue, amount, timeSec) return 0 end'},
  },
  ['FrameDeltaLerp'] = {
    {name='FrameDeltaLerp', count=1, confidence=0.20, sample='function FrameDeltaLerp(startValue, endValue, amount) return 0 end'},
  },
  ['RoundToSignificantDigits'] = {
    {name='RoundToSignificantDigits', count=1, confidence=0.20, sample='function RoundToSignificantDigits(value, numDigits) return 0 end'},
  },
  ['Square'] = {
    {name='Square', count=1, confidence=0.20, sample='function Square(value) return 0 end'},
  },
  ['Sign'] = {
    {name='Sign', count=1, confidence=0.20, sample='function Sign(value) return 0 end'},
  },
  ['WithinRange'] = {
    {name='WithinRange', count=1, confidence=0.20, sample='function WithinRange(value, min, max) return true end'},
  },
  ['WithinRangeExclusive'] = {
    {name='WithinRangeExclusive', count=1, confidence=0.20, sample='function WithinRangeExclusive(value, min, max) return true end'},
  },
  ['ApproximatelyEqual'] = {
    {name='ApproximatelyEqual', count=1, confidence=0.20, sample='function ApproximatelyEqual(v1, v2, epsilon) return true end'},
  },
  ['CalculateDistanceSq'] = {
    {name='CalculateDistanceSq', count=1, confidence=0.20, sample='function CalculateDistanceSq(x1, y1, x2, y2) return 0 end'},
  },
  ['CalculateDistance'] = {
    {name='CalculateDistance', count=1, confidence=0.20, sample='function CalculateDistance(x1, y1, x2, y2) return 0 end'},
  },
  ['CalculateAngleBetween'] = {
    {name='CalculateAngleBetween', count=1, confidence=0.20, sample='function CalculateAngleBetween(x1, y1, x2, y2) return 0 end'},
  },
  ['Round'] = {
    {name='Round', count=3, confidence=0.60, sample='function Round(value) return 0 end'},
    {name='DF.Math.Round', count=1, confidence=0.20, sample='function DF.Math.Round(num, numDecimalPlaces)'},
  },
  ['SetRGBA'] = {
    {name='SetRGBA', count=1, confidence=0.20, sample='function ColorMixin:SetRGBA(r, g, b, a) end'},
  },
  ['SetRGB'] = {
    {name='SetRGB', count=1, confidence=0.20, sample='function ColorMixin:SetRGB(r, g, b) end'},
  },
  ['GetRGBAsBytes'] = {
    {name='GetRGBAsBytes', count=1, confidence=0.20, sample='function ColorMixin:GetRGBAsBytes() return 0, 0, 0 end'},
  },
  ['GetRGBA'] = {
    {name='GetRGBA', count=1, confidence=0.20, sample='function ColorMixin:GetRGBA() return 0, 0, 0, 0 end'},
  },
  ['GetRGBAAsBytes'] = {
    {name='GetRGBAAsBytes', count=1, confidence=0.20, sample='function ColorMixin:GetRGBAAsBytes() return 0, 0, 0, 0 end'},
  },
  ['IsRGBEqualTo'] = {
    {name='IsRGBEqualTo', count=1, confidence=0.20, sample='function ColorMixin:IsRGBEqualTo(otherColor) return true end'},
  },
  ['IsEqualTo'] = {
    {name='IsEqualTo', count=1, confidence=0.20, sample='function ColorMixin:IsEqualTo(otherColor) return true end'},
  },
  ['GenerateHexColor'] = {
    {name='GenerateHexColor', count=2, confidence=0.40, sample='function ColorMixin:GenerateHexColor() return "" end'},
  },
  ['GenerateHexColorNoAlpha'] = {
    {name='GenerateHexColorNoAlpha', count=1, confidence=0.20, sample='function ColorMixin:GenerateHexColorNoAlpha() return "" end'},
  },
  ['GenerateHexColorMarkup'] = {
    {name='GenerateHexColorMarkup', count=1, confidence=0.20, sample='function ColorMixin:GenerateHexColorMarkup() return "" end'},
  },
  ['WrapTextInColorCode'] = {
    {name='WrapTextInColorCode', count=3, confidence=0.60, sample='function ColorMixin:WrapTextInColorCode(text) return "" end'},
  },
  ['GetChallengeCompletionInfo'] = {
    {name='C_ChallengeMode.GetChallengeCompletionInfo', count=4, confidence=0.80, sample='function C_ChallengeMode.GetChallengeCompletionInfo() return {} end'},
    {name='GetChallengeCompletionInfo', count=2, confidence=0.40, sample='Details222.MythicPlus.LogStep("GetChallengeCompletionInfo() Found, Time: " .. Details222.MythicPlus.time)'},
  },
  ['GetDeathCount'] = {
    {name='C_ChallengeMode.GetDeathCount', count=3, confidence=0.60, sample='function C_ChallengeMode.GetDeathCount() return 0, 0 end'},
  },
  ['GetDungeonScoreRarityColor'] = {
    {name='C_ChallengeMode.GetDungeonScoreRarityColor', count=3, confidence=0.60, sample='function C_ChallengeMode.GetDungeonScoreRarityColor(dungeonScore) return {} end'},
  },
  ['GetGuildLeaders'] = {
    {name='C_ChallengeMode.GetGuildLeaders', count=1, confidence=0.20, sample='function C_ChallengeMode.GetGuildLeaders() return {} end'},
  },
  ['GetKeystoneLevelRarityColor'] = {
    {name='C_ChallengeMode.GetKeystoneLevelRarityColor', count=1, confidence=0.20, sample='function C_ChallengeMode.GetKeystoneLevelRarityColor(level) return {} end'},
  },
  ['GetMapScoreInfo'] = {
    {name='C_ChallengeMode.GetMapScoreInfo', count=1, confidence=0.20, sample='function C_ChallengeMode.GetMapScoreInfo() return {} end'},
  },
  ['GetMapUIInfo'] = {
    {name='C_ChallengeMode.GetMapUIInfo', count=7, confidence=1.00, sample='function C_ChallengeMode.GetMapUIInfo(mapChallengeModeID) return "", 0, 0, 0, 0 end'},
  },
  ['CanUseKeystoneInCurrentMap'] = {
    {name='C_ChallengeMode.CanUseKeystoneInCurrentMap', count=1, confidence=0.20, sample='function C_ChallengeMode.CanUseKeystoneInCurrentMap(itemLocation) return true end'},
  },
  ['ClearKeystone'] = {
    {name='C_ChallengeMode.ClearKeystone', count=1, confidence=0.20, sample='function C_ChallengeMode.ClearKeystone() end'},
  },
  ['CloseKeystoneFrame'] = {
    {name='C_ChallengeMode.CloseKeystoneFrame', count=1, confidence=0.20, sample='function C_ChallengeMode.CloseKeystoneFrame() end'},
  },
  ['HasSlottedKeystone'] = {
    {name='C_ChallengeMode.HasSlottedKeystone', count=1, confidence=0.20, sample='function C_ChallengeMode.HasSlottedKeystone() return true end'},
  },
  ['RemoveKeystone'] = {
    {name='C_ChallengeMode.RemoveKeystone', count=1, confidence=0.20, sample='function C_ChallengeMode.RemoveKeystone() return true end'},
  },
  ['RequestLeaders'] = {
    {name='C_ChallengeMode.RequestLeaders', count=1, confidence=0.20, sample='function C_ChallengeMode.RequestLeaders(mapChallengeModeID) end'},
  },
  ['SlotKeystone'] = {
    {name='C_ChallengeMode.SlotKeystone', count=1, confidence=0.20, sample='function C_ChallengeMode.SlotKeystone() end'},
  },
  ['StartChallengeMode'] = {
    {name='C_ChallengeMode.StartChallengeMode', count=1, confidence=0.20, sample='function C_ChallengeMode.StartChallengeMode() return true end'},
  },
  ['GetPowerLevelDamageHealthMod'] = {
    {name='C_ChallengeMode.GetPowerLevelDamageHealthMod', count=1, confidence=0.20, sample='function C_ChallengeMode.GetPowerLevelDamageHealthMod(powerLevel) return 0, 0 end'},
  },
  ['GetOverallDungeonScore'] = {
    {name='C_ChallengeMode.GetOverallDungeonScore', count=1, confidence=0.20, sample='function C_ChallengeMode.GetOverallDungeonScore() return 0 end'},
  },
  ['GetSlottedKeystoneInfo'] = {
    {name='C_ChallengeMode.GetSlottedKeystoneInfo', count=1, confidence=0.20, sample='function C_ChallengeMode.GetSlottedKeystoneInfo() return 0, {}, 0 end'},
  },
  ['GetSpecificDungeonOverallScoreRarityColor'] = {
    {name='C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor', count=1, confidence=0.20, sample='function C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor(specificDungeonOverallScore) return {} end'},
  },
  ['GetSpecificDungeonScoreRarityColor'] = {
    {name='C_ChallengeMode.GetSpecificDungeonScoreRarityColor', count=1, confidence=0.20, sample='function C_ChallengeMode.GetSpecificDungeonScoreRarityColor(specificDungeonScore) return {} end'},
  },
  ['GetOverallDungeonScoreRarityColor'] = {
    {name='C_ChallengeMode.GetOverallDungeonScoreRarityColor', count=1, confidence=0.20, sample='function C_ChallengeMode.GetOverallDungeonScoreRarityColor(overallDungeonScore) return {} end'},
  },
  ['GetSpellCharges'] = {
    {name='C_Spell.GetSpellCharges', count=5, confidence=1.00, sample='function C_Spell.GetSpellCharges(spellID) return {} end'},
    {name='GetSpellCharges', count=2, confidence=0.40, sample='local chargesAvailable, chargesTotal, start, duration = GetSpellCharges(spellId)'},
  },
  ['GetSpecializationInfoForSpecID'] = {
    {name='GetSpecializationInfoForSpecID', count=1, confidence=0.20, sample='--make here the documentation for the function GetSpecializationInfoForSpecID() following the same pattern as the other functions'},
  },
  ['SetupFullscreenScale'] = {
    {name='SetupFullscreenScale', count=1, confidence=0.20, sample='function SetupFullscreenScale(scale) end'},
  },
  ['UpdateMapHighlight'] = {
    {name='UpdateMapHighlight', count=1, confidence=0.20, sample='function UpdateMapHighlight(highlightType, texturePath, textureX, textureY, pulseTexturePath, pulseTextureX, pulseTextureY) end'},
  },
  ['CreateWorldMapArrowFrame'] = {
    {name='CreateWorldMapArrowFrame', count=1, confidence=0.20, sample='function CreateWorldMapArrowFrame() return {} end'},
  },
  ['UpdateWorldMapArrowFrames'] = {
    {name='UpdateWorldMapArrowFrames', count=1, confidence=0.20, sample='function UpdateWorldMapArrowFrames(arrowFrame, playerX, playerY) end'},
  },
  ['ShowWorldMapArrowFrame'] = {
    {name='ShowWorldMapArrowFrame', count=1, confidence=0.20, sample='function ShowWorldMapArrowFrame(arrowFrame) end'},
  },
  ['IsMacClient'] = {
    {name='IsMacClient', count=1, confidence=0.20, sample='function IsMacClient() return true end'},
  },
  ['IsRightAltKeyDown'] = {
    {name='IsRightAltKeyDown', count=1, confidence=0.20, sample='function IsRightAltKeyDown() return true end'},
  },
  ['IsRightControlKeyDown'] = {
    {name='IsRightControlKeyDown', count=1, confidence=0.20, sample='function IsRightControlKeyDown() return true end'},
  },
  ['IsRightShiftKeyDown'] = {
    {name='IsRightShiftKeyDown', count=1, confidence=0.20, sample='function IsRightShiftKeyDown() return true end'},
  },
  ['IsStereoVideoAvailable'] = {
    {name='IsStereoVideoAvailable', count=1, confidence=0.20, sample='function IsStereoVideoAvailable() return true end'},
  },
  ['IsWindowsClient'] = {
    {name='IsWindowsClient', count=1, confidence=0.20, sample='function IsWindowsClient() return true end'},
  },
  ['OpeningCinematic'] = {
    {name='OpeningCinematic', count=1, confidence=0.20, sample='function OpeningCinematic(cinematicIndex) end'},
  },
  ['PlayMusic'] = {
    {name='PlayMusic', count=1, confidence=0.20, sample='function PlayMusic(musicFile) end'},
  },
  ['StopSound'] = {
    {name='StopSound', count=2, confidence=0.40, sample='function StopSound(soundHandle, fadeOutTime) end'},
  },
  ['MuteSoundFile'] = {
    {name='MuteSoundFile', count=1, confidence=0.20, sample='function MuteSoundFile(soundId) end'},
  },
  ['UnmuteSoundFile'] = {
    {name='UnmuteSoundFile', count=1, confidence=0.20, sample='function UnmuteSoundFile(soundId) end'},
  },
  ['RepopMe'] = {
    {name='RepopMe', count=1, confidence=0.20, sample='function RepopMe() end'},
  },
  ['RestartGx'] = {
    {name='RestartGx', count=1, confidence=0.20, sample='function RestartGx() end'},
  },
  ['RunScript'] = {
    {name='RunScript', count=1, confidence=0.20, sample='function RunScript(script) end'},
  },
  ['SetAutoDeclineGuildInvites'] = {
    {name='SetAutoDeclineGuildInvites', count=1, confidence=0.20, sample='function SetAutoDeclineGuildInvites(autoDecline) end'},
  },
  ['StopCinematic'] = {
    {name='StopCinematic', count=1, confidence=0.20, sample='function StopCinematic() end'},
  },
  ['StopMusic'] = {
    {name='StopMusic', count=1, confidence=0.20, sample='function StopMusic() end'},
  },
  ['UIParentLoadAddOn'] = {
    {name='UIParentLoadAddOn', count=1, confidence=0.20, sample='function UIParentLoadAddOn(addonName) end'},
  },
  ['TakeScreenshot'] = {
    {name='TakeScreenshot', count=1, confidence=0.20, sample='function TakeScreenshot(delay) end'},
  },
  ['BuyTrainerService'] = {
    {name='BuyTrainerService', count=1, confidence=0.20, sample='function BuyTrainerService(trainerIndex, talentIndex) end'},
  },
  ['CheckTalentMasterDist'] = {
    {name='CheckTalentMasterDist', count=1, confidence=0.20, sample='function CheckTalentMasterDist() return 0, 0 end'},
  },
  ['ConfirmTalentWipe'] = {
    {name='ConfirmTalentWipe', count=1, confidence=0.20, sample='function ConfirmTalentWipe() end'},
  },
  ['GetActiveTalentGroup'] = {
    {name='GetActiveTalentGroup', count=2, confidence=0.40, sample='function GetActiveTalentGroup() return 0 end'},
  },
  ['GetNumTalentTabs'] = {
    {name='GetNumTalentTabs', count=3, confidence=0.60, sample='function GetNumTalentTabs() return 0 end'},
  },
  ['GetNumTalents'] = {
    {name='GetNumTalents', count=2, confidence=0.40, sample='function GetNumTalents(tabIndex) return 0 end'},
  },
  ['GetTalentLink'] = {
    {name='GetTalentLink', count=1, confidence=0.20, sample='function GetTalentLink(tabIndex, talentIndex, isInspect) return "" end'},
  },
  ['GetTalentPrereqs'] = {
    {name='GetTalentPrereqs', count=1, confidence=0.20, sample='function GetTalentPrereqs(tabIndex, talentIndex, isInspect) return 0 end'},
  },
  ['LearnTalent'] = {
    {name='LearnTalent', count=1, confidence=0.20, sample='function LearnTalent(tabIndex, talentIndex) end'},
  },
  ['SetActiveTalentGroup'] = {
    {name='SetActiveTalentGroup', count=1, confidence=0.20, sample='function SetActiveTalentGroup(talentGroup) end'},
  },
  ['GetNumTalentGroups'] = {
    {name='GetNumTalentGroups', count=1, confidence=0.20, sample='function GetNumTalentGroups() return 0 end'},
  },
  ['AddPreviewTalentPoints'] = {
    {name='AddPreviewTalentPoints', count=1, confidence=0.20, sample='function AddPreviewTalentPoints(amount) end'},
  },
  ['GetGroupPreviewTalentPointsSpent'] = {
    {name='GetGroupPreviewTalentPointsSpent', count=1, confidence=0.20, sample='function GetGroupPreviewTalentPointsSpent(talentGroup) return 0 end'},
  },
  ['GetPreviewTalentPointsSpent'] = {
    {name='GetPreviewTalentPointsSpent', count=1, confidence=0.20, sample='function GetPreviewTalentPointsSpent() return 0 end'},
  },
  ['GetUnspentTalentPoints'] = {
    {name='GetUnspentTalentPoints', count=1, confidence=0.20, sample='function GetUnspentTalentPoints() return 0 end'},
  },
  ['LearnPreviewTalents'] = {
    {name='LearnPreviewTalents', count=1, confidence=0.20, sample='function LearnPreviewTalents() end'},
  },
  ['ResetGroupPreviewTalentPoints'] = {
    {name='ResetGroupPreviewTalentPoints', count=1, confidence=0.20, sample='function ResetGroupPreviewTalentPoints(talentGroup) end'},
  },
  ['ResetPreviewTalentPoints'] = {
    {name='ResetPreviewTalentPoints', count=1, confidence=0.20, sample='function ResetPreviewTalentPoints() end'},
  },
  ['AssistUnit'] = {
    {name='AssistUnit', count=2, confidence=0.40, sample='function AssistUnit(unit) end'},
  },
  ['AttackTarget'] = {
    {name='AttackTarget', count=1, confidence=0.20, sample='function AttackTarget() end'},
  },
  ['ClearTarget'] = {
    {name='ClearTarget', count=1, confidence=0.20, sample='function ClearTarget() end'},
  },
  ['ClickTargetTradeButton'] = {
    {name='ClickTargetTradeButton', count=1, confidence=0.20, sample='function ClickTargetTradeButton() end'},
  },
  ['TargetLastEnemy'] = {
    {name='TargetLastEnemy', count=1, confidence=0.20, sample='function TargetLastEnemy() end'},
  },
  ['TargetLastTarget'] = {
    {name='TargetLastTarget', count=1, confidence=0.20, sample='function TargetLastTarget() end'},
  },
  ['TargetNearestEnemy'] = {
    {name='TargetNearestEnemy', count=1, confidence=0.20, sample='function TargetNearestEnemy() end'},
  },
  ['TargetNearestEnemyPlayer'] = {
    {name='TargetNearestEnemyPlayer', count=1, confidence=0.20, sample='function TargetNearestEnemyPlayer() end'},
  },
  ['TargetNearestFriend'] = {
    {name='TargetNearestFriend', count=1, confidence=0.20, sample='function TargetNearestFriend() end'},
  },
  ['TargetNearestFriendPlayer'] = {
    {name='TargetNearestFriendPlayer', count=1, confidence=0.20, sample='function TargetNearestFriendPlayer() end'},
  },
  ['TargetNearestPartyMember'] = {
    {name='TargetNearestPartyMember', count=1, confidence=0.20, sample='function TargetNearestPartyMember() end'},
  },
  ['TargetNearestRaidMember'] = {
    {name='TargetNearestRaidMember', count=1, confidence=0.20, sample='function TargetNearestRaidMember() end'},
  },
  ['TargetUnit'] = {
    {name='TargetUnit', count=2, confidence=0.40, sample='function TargetUnit(unit) end'},
  },
  ['ToggleBackpack'] = {
    {name='ToggleBackpack', count=1, confidence=0.20, sample='function ToggleBackpack() end'},
  },
  ['ToggleBag'] = {
    {name='ToggleBag', count=1, confidence=0.20, sample='function ToggleBag() end'},
  },
  ['ToggleFriendsFrame'] = {
    {name='ToggleFriendsFrame', count=1, confidence=0.20, sample='function ToggleFriendsFrame() end'},
  },
  ['ToggleSpellBook'] = {
    {name='ToggleSpellBook', count=1, confidence=0.20, sample='function ToggleSpellBook() end'},
  },
  ['TradeSkill'] = {
    {name='TradeSkill', count=1, confidence=0.20, sample='function TradeSkill() end'},
  },
  ['CloseTradeSkill'] = {
    {name='CloseTradeSkill', count=1, confidence=0.20, sample='function CloseTradeSkill() end'},
  },
  ['CollapseTradeSkillSubClass'] = {
    {name='CollapseTradeSkillSubClass', count=1, confidence=0.20, sample='function CollapseTradeSkillSubClass(index) end'},
  },
  ['PickupPlayerMoney'] = {
    {name='PickupPlayerMoney', count=1, confidence=0.20, sample='function PickupPlayerMoney(amount) end'},
  },
  ['PickupTradeMoney'] = {
    {name='PickupTradeMoney', count=1, confidence=0.20, sample='function PickupTradeMoney(amount) end'},
  },
  ['SetTradeMoney'] = {
    {name='SetTradeMoney', count=1, confidence=0.20, sample='function SetTradeMoney(money) end'},
  },
  ['CheckInteractDistance'] = {
    {name='CheckInteractDistance', count=4, confidence=0.80, sample='function CheckInteractDistance(unit, maxDistance) return true end'},
  },
  ['FollowUnit'] = {
    {name='FollowUnit', count=1, confidence=0.20, sample='function FollowUnit(unit) end'},
  },
  ['FocusUnit'] = {
    {name='FocusUnit', count=1, confidence=0.20, sample='function FocusUnit(unit) end'},
  },
  ['GetUnitPitch'] = {
    {name='GetUnitPitch', count=1, confidence=0.20, sample='function GetUnitPitch(unit) return 0 end'},
  },
  ['InviteUnit'] = {
    {name='InviteUnit', count=1, confidence=0.20, sample='function InviteUnit(unit) end'},
  },
  ['IsUnitOnQuest'] = {
    {name='IsUnitOnQuest', count=1, confidence=0.20, sample='function IsUnitOnQuest(unit, questID) return true end'},
  },
  ['SpellCanTargetUnit'] = {
    {name='SpellCanTargetUnit', count=1, confidence=0.20, sample='function SpellCanTargetUnit(spellNameOrID, unit) return true end'},
  },
  ['SpellTargetUnit'] = {
    {name='SpellTargetUnit', count=1, confidence=0.20, sample='function SpellTargetUnit(unit) end'},
  },
  ['UnitArmor'] = {
    {name='UnitArmor', count=1, confidence=0.20, sample='function UnitArmor(unit) return 0 end'},
  },
  ['UnitAttackBothHands'] = {
    {name='UnitAttackBothHands', count=1, confidence=0.20, sample='function UnitAttackBothHands(unit) return 0 end'},
  },
  ['UnitAttackPower'] = {
    {name='UnitAttackPower', count=1, confidence=0.20, sample='function UnitAttackPower(unit) return 0 end'},
  },
  ['UnitAttackSpeed'] = {
    {name='UnitAttackSpeed', count=1, confidence=0.20, sample='function UnitAttackSpeed(unit) return 0 end'},
  },
  ['UnitCanAssist'] = {
    {name='UnitCanAssist', count=1, confidence=0.20, sample='function UnitCanAssist(unit) return true end'},
  },
  ['UnitCanCooperate'] = {
    {name='UnitCanCooperate', count=1, confidence=0.20, sample='function UnitCanCooperate(unit) return true end'},
  },
  ['UnitClassification'] = {
    {name='UnitClassification', count=1, confidence=0.20, sample='function UnitClassification(unit) return "" end'},
  },
  ['UnitCreatureFamily'] = {
    {name='UnitCreatureFamily', count=1, confidence=0.20, sample='function UnitCreatureFamily(unit) return "" end'},
  },
  ['UnitDamage'] = {
    {name='UnitDamage', count=1, confidence=0.20, sample='function UnitDamage(unit) return 0, 0, 0, 0 end'},
    {name='Details.UnitDamage', count=4, confidence=0.80, sample='Details.UnitDamage (unitId, segment)'},
  },
  ['UnitDefense'] = {
    {name='UnitDefense', count=1, confidence=0.20, sample='function UnitDefense(unit) return 0 end'},
  },
  ['UnitDetailedThreatSituation'] = {
    {name='UnitDetailedThreatSituation', count=2, confidence=0.40, sample='function UnitDetailedThreatSituation(unit, mobUnit) return 0, "", 0, 0, 0 end'},
  },
  ['GetPlayerInfoByGUID'] = {
    {name='GetPlayerInfoByGUID', count=5, confidence=1.00, sample='function GetPlayerInfoByGUID(guid) return "", "", "", "" end'},
  },
  ['UnitHasLFGDeserter'] = {
    {name='UnitHasLFGDeserter', count=1, confidence=0.20, sample='function UnitHasLFGDeserter(unit) return true end'},
  },
  ['UnitHasLFGRandomCooldown'] = {
    {name='UnitHasLFGRandomCooldown', count=1, confidence=0.20, sample='function UnitHasLFGRandomCooldown(unit) return true end'},
  },
  ['UnitHasRelicSlot'] = {
    {name='UnitHasRelicSlot', count=1, confidence=0.20, sample='function UnitHasRelicSlot(unit) return true end'},
  },
  ['UnitInParty'] = {
    {name='UnitInParty', count=6, confidence=1.00, sample='function UnitInParty(unit) return true end'},
  },
  ['UnitInRaid'] = {
    {name='UnitInRaid', count=8, confidence=1.00, sample='function UnitInRaid(unit) return true end'},
  },
  ['UnitInBattleground'] = {
    {name='UnitInBattleground', count=1, confidence=0.20, sample='function UnitInBattleground(unit) return true end'},
  },
  ['UnitIsInMyGuild'] = {
    {name='UnitIsInMyGuild', count=4, confidence=0.80, sample='function UnitIsInMyGuild(unit) return true end'},
  },
  ['UnitInRange'] = {
    {name='UnitInRange', count=1, confidence=0.20, sample='function UnitInRange(unit) return true end'},
  },
  ['UnitIsAFK'] = {
    {name='UnitIsAFK', count=1, confidence=0.20, sample='function UnitIsAFK(unit) return true end'},
  },
  ['UnitIsCharmed'] = {
    {name='UnitIsCharmed', count=1, confidence=0.20, sample='function UnitIsCharmed(unit) return true end'},
  },
  ['UnitIsCorpse'] = {
    {name='UnitIsCorpse', count=1, confidence=0.20, sample='function UnitIsCorpse(unit) return true end'},
  },
  ['UnitIsDND'] = {
    {name='UnitIsDND', count=1, confidence=0.20, sample='function UnitIsDND(unit) return true end'},
  },
  ['UnitIsEnemy'] = {
    {name='UnitIsEnemy', count=1, confidence=0.20, sample='function UnitIsEnemy(unit) return true end'},
  },
  ['UnitIsFeignDeath'] = {
    {name='UnitIsFeignDeath', count=2, confidence=0.40, sample='function UnitIsFeignDeath(unit) return true end'},
  },
  ['UnitIsPVP'] = {
    {name='UnitIsPVP', count=1, confidence=0.20, sample='function UnitIsPVP(unit) return true end'},
  },
  ['UnitIsPVPFreeForAll'] = {
    {name='UnitIsPVPFreeForAll', count=1, confidence=0.20, sample='function UnitIsPVPFreeForAll(unit) return true end'},
  },
  ['UnitIsPVPSanctuary'] = {
    {name='UnitIsPVPSanctuary', count=1, confidence=0.20, sample='function UnitIsPVPSanctuary(unit) return true end'},
  },
  ['UnitIsPartyLeader'] = {
    {name='UnitIsPartyLeader', count=1, confidence=0.20, sample='function UnitIsPartyLeader(unit) return true end'},
  },
  ['UnitIsPossessed'] = {
    {name='UnitIsPossessed', count=1, confidence=0.20, sample='function UnitIsPossessed(unit) return true end'},
  },
  ['UnitIsRaidOfficer'] = {
    {name='UnitIsRaidOfficer', count=1, confidence=0.20, sample='function UnitIsRaidOfficer(unit) return true end'},
  },
  ['UnitIsSameServer'] = {
    {name='UnitIsSameServer', count=1, confidence=0.20, sample='function UnitIsSameServer(unit) return true end'},
  },
  ['UnitIsTapped'] = {
    {name='UnitIsTapped', count=1, confidence=0.20, sample='function UnitIsTapped(unit) return true end'},
  },
  ['UnitIsTappedByPlayer'] = {
    {name='UnitIsTappedByPlayer', count=1, confidence=0.20, sample='function UnitIsTappedByPlayer(unit) return true end'},
  },
  ['UnitIsTappedByAllThreatList'] = {
    {name='UnitIsTappedByAllThreatList', count=1, confidence=0.20, sample='function UnitIsTappedByAllThreatList(unit) return true end'},
  },
  ['UnitIsTrivial'] = {
    {name='UnitIsTrivial', count=1, confidence=0.20, sample='function UnitIsTrivial(unit) return true end'},
  },
  ['UnitIsVisible'] = {
    {name='UnitIsVisible', count=1, confidence=0.20, sample='function UnitIsVisible(unit) return true end'},
  },
  ['UnitMana'] = {
    {name='UnitMana', count=1, confidence=0.20, sample='function UnitMana(unit) return 0 end'},
  },
  ['UnitManaMax'] = {
    {name='UnitManaMax', count=1, confidence=0.20, sample='function UnitManaMax(unit) return 0 end'},
  },
  ['UnitPlayerControlled'] = {
    {name='UnitPlayerControlled', count=5, confidence=1.00, sample='function UnitPlayerControlled(unit) return true end'},
  },
  ['UnitPlayerOrPetInParty'] = {
    {name='UnitPlayerOrPetInParty', count=1, confidence=0.20, sample='function UnitPlayerOrPetInParty(unit) return true end'},
  },
  ['UnitPlayerOrPetInRaid'] = {
    {name='UnitPlayerOrPetInRaid', count=1, confidence=0.20, sample='function UnitPlayerOrPetInRaid(unit) return true end'},
  },
  ['UnitPVPName'] = {
    {name='UnitPVPName', count=1, confidence=0.20, sample='function UnitPVPName(unit) return "" end'},
  },
  ['UnitPVPRank'] = {
    {name='UnitPVPRank', count=1, confidence=0.20, sample='function UnitPVPRank(unit) return 0 end'},
  },
  ['UnitPower'] = {
    {name='UnitPower', count=4, confidence=0.80, sample='function UnitPower(unit, powerType) return 0 end'},
  },
  ['UnitPowerMax'] = {
    {name='UnitPowerMax', count=3, confidence=0.60, sample='function UnitPowerMax(unit, powerType) return 0 end'},
  },
  ['UnitPowerType'] = {
    {name='UnitPowerType', count=3, confidence=0.60, sample='function UnitPowerType(unit, powerType) return 0 end'},
  },
  ['UnitRangedAttack'] = {
    {name='UnitRangedAttack', count=1, confidence=0.20, sample='function UnitRangedAttack(unit) end'},
  },
  ['UnitRangedAttackPower'] = {
    {name='UnitRangedAttackPower', count=1, confidence=0.20, sample='function UnitRangedAttackPower(unit) return 0 end'},
  },
  ['UnitRangedDamage'] = {
    {name='UnitRangedDamage', count=1, confidence=0.20, sample='function UnitRangedDamage(unit) return 0, 0 end'},
  },
  ['UnitReaction'] = {
    {name='UnitReaction', count=5, confidence=1.00, sample='function UnitReaction(unit, otherUnit) return 0 end'},
  },
  ['UnitResistance'] = {
    {name='UnitResistance', count=1, confidence=0.20, sample='function UnitResistance(unit, school) return 0 end'},
  },
  ['UnitSelectionColor'] = {
    {name='UnitSelectionColor', count=2, confidence=0.40, sample='function UnitSelectionColor(unit) return 0, 0, 0, 0 end'},
  },
  ['UnitStat'] = {
    {name='UnitStat', count=1, confidence=0.20, sample='function UnitStat(unit, index) return 0 end'},
  },
  ['UnitThreatSituation'] = {
    {name='UnitThreatSituation', count=1, confidence=0.20, sample='function UnitThreatSituation(unit, mobUnit) return 0, "", 0, 0, 0 end'},
  },
  ['UnitUsingVehicle'] = {
    {name='UnitUsingVehicle', count=1, confidence=0.20, sample='function UnitUsingVehicle(unit) return true end'},
  },
  ['GetThreatStatusColor'] = {
    {name='GetThreatStatusColor', count=1, confidence=0.20, sample='function GetThreatStatusColor(status) return 0, 0, 0 end'},
  },
  ['SetPortraitTexture'] = {
    {name='SetPortraitTexture', count=5, confidence=1.00, sample='function SetPortraitTexture(frame, texture) end'},
  },
  ['SetPortraitToTexture'] = {
    {name='SetPortraitToTexture', count=1, confidence=0.20, sample='function SetPortraitToTexture(frame, texture) end'},
  },
  ['GetCombat'] = {
    {name='GetCombat', count=75, confidence=1.00, sample='@CODElocal combat = Details:GetCombat(segmentID = DETAILS_SEGMENTID_CURRENT)@'},
  },
  ['GetActor'] = {
    {name='GetActor', count=121, confidence=1.00, sample='@CODElocal player = Details:GetActor(segmentID = DETAILS_SEGMENTID_CURRENT, attributeID = DETAILS_ATTRIBUTE_DAMAGE, "PlayerName")@'},
  },
  ['GetPlayer'] = {
    {name='GetPlayer', count=4, confidence=0.80, sample='there is an alias which receives the player name as the first parameter: Details:GetPlayer(playerName, segmentID, attributeID), combat also accept GetActor(): combat:GetActor(attributeID, playerName).'},
  },
  ['Tempo'] = {
    {name='Tempo', count=37, confidence=1.00, sample='@COMMENT--player:Tempo() returns the activity time@'},
  },
  ['GetActorList'] = {
    {name='GetActorList', count=21, confidence=1.00, sample='characterList = combat:GetActorList ( attribute )'},
  },
  ['GetCombatName'] = {
    {name='GetCombatName', count=24, confidence=1.00, sample='combatName = combat:GetCombatName( try_to_find )'},
  },
  ['GetBossInfo'] = {
    {name='GetBossInfo', count=31, confidence=1.00, sample='bossInfo = combat:GetBossInfo()'},
  },
  ['GetPvPInfo'] = {
    {name='GetPvPInfo', count=2, confidence=0.40, sample='battlegroudInfo = combat:GetPvPInfo()'},
  },
  ['GetMSTime'] = {
    {name='GetMSTime', count=5, confidence=1.00, sample='minutes, seconds = GetMSTime()'},
  },
  ['GetDate'] = {
    {name='GetDate', count=28, confidence=1.00, sample='startDate, endDate = combat:GetDate()'},
  },
  ['IsTrash'] = {
    {name='IsTrash', count=3, confidence=0.60, sample='isTrash = combat:IsTrash()'},
  },
  ['GetDifficulty'] = {
    {name='GetDifficulty', count=8, confidence=1.00, sample='encounterDiff = combat:GetDifficulty()'},
  },
  ['GetDeaths'] = {
    {name='GetDeaths', count=7, confidence=1.00, sample='deaths = combat:GetDeaths()'},
  },
  ['GetCombatNumber'] = {
    {name='GetCombatNumber', count=2, confidence=0.40, sample='combatNumber = combat:GetCombatNumber()'},
  },
  ['GetCombatId'] = {
    {name='GetCombatId', count=4, confidence=0.80, sample='combatId = combat:GetCombatId()'},
  },
  ['GetRoster'] = {
    {name='GetRoster', count=2, confidence=0.40, sample='roster = combat:GetRoster()'},
  },
  ['GetTimeData'] = {
    {name='GetTimeData', count=2, confidence=0.40, sample='chartData = combat:GetTimeData ( chart_data_name )'},
  },
  ['GetStartTime'] = {
    {name='GetStartTime', count=7, confidence=1.00, sample='start_at = GetStartTime()'},
  },
  ['GetEndTime'] = {
    {name='GetEndTime', count=5, confidence=1.00, sample='ended_at = GetEndTime()'},
  },
  ['GetTotal'] = {
    {name='GetTotal', count=7, confidence=1.00, sample='total = combat:GetTotal ( attribute, subAttribute [, onlyGroup] )'},
  },
  ['GetMythicDungeonInfo'] = {
    {name='GetMythicDungeonInfo', count=11, confidence=1.00, sample='mythictInfo = combat:GetMythicDungeonInfo()'},
  },
  ['IsMythicDungeon'] = {
    {name='IsMythicDungeon', count=9, confidence=1.00, sample='isMythicDungeonSegment = combat:IsMythicDungeon()'},
  },
  ['IsMythicDungeonOverall'] = {
    {name='IsMythicDungeonOverall', count=3, confidence=0.60, sample='isMythicDungeonOverallSegment = combat:IsMythicDungeonOverall()'},
  },
  ['GetCombatType'] = {
    {name='GetCombatType', count=19, confidence=1.00, sample='combatType = combat:GetCombatType()'},
  },
  ['GetAlteranatePower'] = {
    {name='GetAlteranatePower', count=2, confidence=0.40, sample='alternatePowerTable = combat:GetAlteranatePower()'},
  },
  ['GetSpell'] = {
    {name='GetSpell', count=27, confidence=1.00, sample='container:GetSpell (spellid)'},
  },
  ['GetAmount'] = {
    {name='GetAmount', count=4, confidence=0.80, sample='amount = container:GetAmount (actorName [, key = "total"])'},
  },
  ['SortByKey'] = {
    {name='SortByKey', count=7, confidence=1.00, sample='container:SortByKey (keyname)'},
  },
  ['GetSpellSource'] = {
    {name='GetSpellSource', count=2, confidence=0.40, sample='sourceName = container:GetSpellSource (spellid)'},
  },
  ['GetTotalOnRaid'] = {
    {name='GetTotalOnRaid', count=2, confidence=0.40, sample='total = container:GetTotalOnRaid (key = "total", combat)'},
  },
  ['GetDisplayName'] = {
    {name='GetDisplayName', count=2, confidence=0.40, sample='displayName = actor:GetDisplayName()'},
  },
  ['GetOnlyName'] = {
    {name='GetOnlyName', count=42, confidence=1.00, sample='name = actor:GetOnlyName()'},
  },
  ['IsGroupPlayer'] = {
    {name='IsGroupPlayer', count=22, confidence=1.00, sample='isGroupMember = actor:IsGroupPlayer()'},
  },
  ['IsNeutralOrEnemy'] = {
    {name='IsNeutralOrEnemy', count=9, confidence=1.00, sample='IsneutralOrEnemy = actor:IsNeutralOrEnemy()'},
  },
  ['IsEnemy'] = {
    {name='IsEnemy', count=8, confidence=1.00, sample='isEnemy = actor:IsEnemy()'},
  },
  ['IsPetOrGuardian'] = {
    {name='IsPetOrGuardian', count=6, confidence=1.00, sample='isPet = actor:IsPetOrGuardian()'},
  },
  ['GetSpellList'] = {
    {name='GetSpellList', count=18, confidence=1.00, sample='list = actor:GetSpellList()'},
  },
  ['GetBarColor'] = {
    {name='GetBarColor', count=14, confidence=1.00, sample='r, g, b = actor:GetBarColor()'},
  },
  ['GetClassColor'] = {
    {name='GetClassColor', count=5, confidence=1.00, sample='r, g, b = Details:GetClassColor()'},
    {name='C_ClassColor.GetClassColor', count=1, confidence=0.20, sample='local classColor = C_ClassColor.GetClassColor(cooldownLine.class or "PRIEST")'},
  },
  ['GetClassIcon'] = {
    {name='GetClassIcon', count=19, confidence=1.00, sample='texture, left, right, top, bottom = actor:GetClassIcon()'},
  },
  ['Dispel'] = {
    {name='Dispel', count=1, confidence=0.20, sample='- Dispel (members has 2 "L" instead of 1)'},
  },
  ['GetSourceFromNpcId'] = {
    {name='GetSourceFromNpcId', count=3, confidence=0.60, sample='Details:GetSourceFromNpcId (npcId)'},
  },
  ['GetBestFromPlayer'] = {
    {name='GetBestFromPlayer', count=6, confidence=1.00, sample='bestResult, encounterTable = Details222.storage.GetBestFromPlayer (encounterDiff, encounterId, playerRole, playerName)'},
  },
  ['ID'] = {
    {name='ID', count=2, confidence=0.40, sample='encounterDiff = raid difficult ID (15 for heroic, 16 for mythic).'},
  },
  ['GetUnitData'] = {
    {name='GetUnitData', count=2, confidence=0.40, sample='heal_or_damage_done = Details222.storage.GetUnitData (encounterDiff, encounterId, role, playerName)'},
  },
  ['GetIlvl'] = {
    {name='GetIlvl', count=5, confidence=1.00, sample='itemLevel = Details.ilevel:GetIlvl (guid)'},
  },
  ['GetTalents'] = {
    {name='GetTalents', count=2, confidence=0.40, sample='talentsTable = Details:GetTalents (guid)'},
  },
  ['GetTalentInfoByID'] = {
    {name='GetTalentInfoByID', count=4, confidence=0.80, sample='use with GetTalentInfoByID()'},
  },
  ['GetSpec'] = {
    {name='GetSpec', count=10, confidence=1.00, sample='spec = Details:GetSpec(guid)'},
  },
  ['GetSpecializationInfoByID'] = {
    {name='GetSpecializationInfoByID', count=10, confidence=1.00, sample='if available, return the spec id of the actor, use with GetSpecializationInfoByID()'},
    {name='DetailsFramework.GetSpecializationInfoByID', count=5, confidence=1.00, sample='local specId, specName, specDescription, specIcon, specRole, specClass = DetailsFramework.GetSpecializationInfoByID(self.spec)'},
    {name='DF.GetSpecializationInfoByID', count=1, confidence=0.20, sample='function DF.GetSpecializationInfoByID(specId)'},
  },
  ['SetDeathLogLimit'] = {
    {name='SetDeathLogLimit', count=3, confidence=0.60, sample='Details:SetDeathLogLimit (limit)'},
  },
  ['GetNpcIdFromGuid'] = {
    {name='GetNpcIdFromGuid', count=26, confidence=1.00, sample='npcId = Details:GetNpcIdFromGuid (guid)'},
  },
  ['CODEif'] = {
    {name='CODEif', count=1, confidence=0.20, sample='@CODEif (actor:IsPetOrGuardian()) then'},
  },
  ['AddValue'] = {
    {name='AddValue', count=29, confidence=1.00, sample='@CODECustomContainer:AddValue (petOwner, petDamage)@'},
  },
  ['GetTotalAndHighestValue'] = {
    {name='GetTotalAndHighestValue', count=9, confidence=1.00, sample='@CODEtotal, top = CustomContainer:GetTotalAndHighestValue()'},
  },
  ['GetNumActors'] = {
    {name='GetNumActors', count=9, confidence=1.00, sample='amount = CustomContainer:GetNumActors()'},
  },
  ['GetCurrentToKFunction'] = {
    {name='GetCurrentToKFunction', count=16, confidence=1.00, sample='local Format = Details:GetCurrentToKFunction()'},
  },
  ['Combat'] = {
    {name='Combat', count=4, confidence=0.80, sample='local petActor = Combat( DETAILS_ATTRIBUTE_DAMAGE, petName)'},
  },
  ['Format'] = {
    {name='Format', count=42, confidence=1.00, sample='GameCooltip:AddLine( petName, Format( nil, petActor.total ) )'},
  },
  ['AddTooltipBackgroundStatusbar'] = {
    {name='AddTooltipBackgroundStatusbar', count=92, confidence=1.00, sample='Details:AddTooltipBackgroundStatusbar()'},
  },
  ['HasActor'] = {
    {name='HasActor', count=2, confidence=0.40, sample='container:HasActor (actor)'},
  },
  ['WipeCustomActorContainer'] = {
    {name='WipeCustomActorContainer', count=4, confidence=0.80, sample='container:WipeCustomActorContainer()'},
  },
  ['RestoreOverallMetatables'] = {
    {name='RestoreOverallMetatables', count=2, confidence=0.40, sample='function Details:RestoreOverallMetatables()'},
  },
  ['RestoreMetatables'] = {
    {name='RestoreMetatables', count=2, confidence=0.40, sample='function Details:RestoreMetatables() --called from Details222.LoadSavedVariables.CombatSegments() --restore actor containers indexes e metatables'},
  },
  ['CombatSegments'] = {
    {name='Details222.LoadSavedVariables.CombatSegments', count=3, confidence=0.60, sample='function Details:RestoreMetatables() --called from Details222.LoadSavedVariables.CombatSegments() --restore actor containers indexes e metatables'},
  },
  ['SetDate'] = {
    {name='SetDate', count=11, confidence=1.00, sample='overallCombatObject:SetDate(thisCombatObject:GetDate() or 0)'},
  },
  ['AddToCombat'] = {
    {name='AddToCombat', count=6, confidence=1.00, sample='classDamage:AddToCombat(actorObject, bRefreshActor, overallCombatObject)'},
  },
  ['DoInstanceCleanup'] = {
    {name='DoInstanceCleanup', count=2, confidence=0.40, sample='function Details:DoInstanceCleanup()'},
  },
  ['RemoveOwnerFromPets'] = {
    {name='RemoveOwnerFromPets', count=2, confidence=0.40, sample='function Details:RemoveOwnerFromPets()'},
  },
  ['DoClassesCleanup'] = {
    {name='DoClassesCleanup', count=2, confidence=0.40, sample='function Details:DoClassesCleanup()'},
  },
  ['DoContainerCleanup'] = {
    {name='DoContainerCleanup', count=2, confidence=0.40, sample='function Details:DoContainerCleanup()'},
  },
  ['DoContainerIndexCleanup'] = {
    {name='DoContainerIndexCleanup', count=2, confidence=0.40, sample='function Details:DoContainerIndexCleanup()'},
  },
  ['PrepareTablesForSave'] = {
    {name='PrepareTablesForSave', count=3, confidence=0.60, sample='function Details:PrepareTablesForSave()'},
  },
  ['GetActorTable'] = {
    {name='GetActorTable', count=13, confidence=1.00, sample='local actorTable = actorContainer:GetActorTable()'},
  },
  ['IsDisposable'] = {
    {name='Details222.Actors.IsDisposable', count=3, confidence=0.60, sample='if (Details222.Actors.IsDisposable(actorObject) and not actorObject.owner) then'},
  },
  ['LogEvent'] = {
    {name='Details222.SaveVariables.LogEvent', count=5, confidence=1.00, sample='Details222.SaveVariables.LogEvent("actor removed " .. actorObject.nome .. " (disposable)")'},
  },
  ['ResetaGump'] = {
    {name='ResetaGump', count=16, confidence=1.00, sample='instancia:ResetaGump()'},
  },
  ['RestartInternalGarbageCollector'] = {
    {name='Details222.GarbageCollector.RestartInternalGarbageCollector', count=3, confidence=0.60, sample='function Details222.GarbageCollector.RestartInternalGarbageCollector(bShouldForceCollect, lastEvent)'},
  },
  ['ClearParserCache'] = {
    {name='ClearParserCache', count=12, confidence=1.00, sample='Details:ClearParserCache()'},
  },
  ['RunGarbageCollector'] = {
    {name='RunGarbageCollector', count=2, confidence=0.40, sample='--print("d! debug: RunGarbageCollector() Start")'},
    {name='Details222.GarbageCollector.RunGarbageCollector', count=2, confidence=0.40, sample='local amountActorRemoved = Details222.GarbageCollector.RunGarbageCollector(lastEvent)'},
  },
  ['InstanceCallDetailsFunc'] = {
    {name='InstanceCallDetailsFunc', count=35, confidence=1.00, sample='Details:InstanceCallDetailsFunc(Details.reset_window)'},
  },
  ['ClearCCPetsBlackList'] = {
    {name='ClearCCPetsBlackList', count=3, confidence=0.60, sample='Details:ClearCCPetsBlackList()'},
  },
  ['ResetSpecCache'] = {
    {name='ResetSpecCache', count=4, confidence=0.80, sample='Details:ResetSpecCache()'},
  },
  ['RefreshPlayerScroll'] = {
    {name='Details222.BreakdownWindow.RefreshPlayerScroll', count=2, confidence=0.40, sample='Details222.BreakdownWindow.RefreshPlayerScroll()'},
  },
  ['UpdateSolo'] = {
    {name='UpdateSolo', count=1, confidence=0.20, sample='function _detalhes:UpdateSolo()'},
  },
  ['GetOrSetCombatId'] = {
    {name='GetOrSetCombatId', count=6, confidence=1.00, sample='_detalhes.SoloTables.CombatID = _detalhes:GetOrSetCombatId()'},
  },
  ['CreateSoloCloseButton'] = {
    {name='CreateSoloCloseButton', count=1, confidence=0.20, sample='function _detalhes:CreateSoloCloseButton()'},
  },
  ['CreateSimplePanel'] = {
    {name='CreateSimplePanel', count=37, confidence=1.00, sample='button.close_confirmation = gump:CreateSimplePanel(button, 296, 60, "", plugin.real_name .. "CloseConfirmation")'},
  },
  ['GetPluginInstance'] = {
    {name='GetPluginInstance', count=5, confidence=1.00, sample='local instance = plugin:GetPluginInstance()'},
  },
  ['ShutDown'] = {
    {name='ShutDown', count=10, confidence=1.00, sample='instance:ShutDown()'},
  },
  ['NewButton'] = {
    {name='NewButton', count=84, confidence=1.00, sample='local close_window = gump:NewButton(button.close_confirmation, nil, "$parentCloseWindowButton", "CloseWindowButton", 140, 20, close_func, nil, nil, nil, Loc ["STRING_MENU_CLOSE_INSTANCE"], 1, gump:GetTemplate("dropdown", "OPTIONS_DROPDOWN_TEMPLATE"))'},
  },
  ['GetTemplate'] = {
    {name='GetTemplate', count=320, confidence=1.00, sample='local close_window = gump:NewButton(button.close_confirmation, nil, "$parentCloseWindowButton", "CloseWindowButton", 140, 20, close_func, nil, nil, nil, Loc ["STRING_MENU_CLOSE_INSTANCE"], 1, gump:GetTemplate("dropdown", "OPTIONS_DROPDOWN_TEMPLATE"))'},
  },
  ['SoloMode'] = {
    {name='SoloMode', count=10, confidence=1.00, sample='function _detalhes:SoloMode (show)'},
  },
  ['SaveMainWindowPosition'] = {
    {name='SaveMainWindowPosition', count=37, confidence=1.00, sample='self:SaveMainWindowPosition()'},
  },
  ['EsconderScrollBar'] = {
    {name='EsconderScrollBar', count=20, confidence=1.00, sample='self:EsconderScrollBar() --hida a scrollbar'},
  },
  ['PrepareSoloMode'] = {
    {name='PrepareSoloMode', count=2, confidence=0.40, sample='gump:PrepareSoloMode (self)'},
  },
  ['AtualizaSliderSolo'] = {
    {name='AtualizaSliderSolo', count=1, confidence=0.20, sample='--self:AtualizaSliderSolo (0)'},
  },
  ['RestoreMainWindowPosition'] = {
    {name='RestoreMainWindowPosition', count=21, confidence=1.00, sample='self:RestoreMainWindowPosition()'},
  },
  ['WaitForSoloPlugin'] = {
    {name='WaitForSoloPlugin', count=3, confidence=0.60, sample='_detalhes:WaitForSoloPlugin (self)'},
  },
  ['CancelWaitForPlugin'] = {
    {name='CancelWaitForPlugin', count=4, confidence=0.80, sample='_detalhes:CancelWaitForPlugin()'},
  },
  ['MostrarScrollBar'] = {
    {name='MostrarScrollBar', count=6, confidence=1.00, sample='self:MostrarScrollBar (true)'},
  },
  ['ReajustaGump'] = {
    {name='ReajustaGump', count=29, confidence=1.00, sample='self:ReajustaGump()'},
  },
  ['CriaNovaBarra'] = {
    {name='CriaNovaBarra', count=1, confidence=0.20, sample='local nova_barra = gump:CriaNovaBarra (self, i, 30) --cria nova barra'},
  },
  ['EnableSoloMode'] = {
    {name='EnableSoloMode', count=3, confidence=0.60, sample='function _detalhes.SoloTables:EnableSoloMode (instance, plugin_name, from_cooltip)'},
  },
  ['GetActiveIndex'] = {
    {name='GetActiveIndex', count=1, confidence=0.20, sample='function _detalhes.SoloTables:GetActiveIndex()'},
  },
  ['ChangeIcon'] = {
    {name='ChangeIcon', count=19, confidence=1.00, sample='_detalhes.SoloTables.instancia:ChangeIcon (_detalhes.SoloTables.Menu [_detalhes.SoloTables.Mode] [2])'},
  },
  ['GetId'] = {
    {name='GetId', count=42, confidence=1.00, sample='_detalhes.SoloTables.Plugins [_detalhes.SoloTables.Mode].instance_id = _detalhes.SoloTables.instancia:GetId()'},
  },
  ['CloseSoloDebuffs'] = {
    {name='CloseSoloDebuffs', count=1, confidence=0.20, sample='function _detalhes:CloseSoloDebuffs()'},
    {name='Details.CloseSoloDebuffs', count=1, confidence=0.20, sample='Details.CloseSoloDebuffs()'},
  },
  ['CatchBuffs'] = {
    {name='CatchBuffs', count=3, confidence=0.60, sample='function _detalhes.SoloTables:CatchBuffs()'},
  },
  ['Active'] = {
    {name='Active', count=2, confidence=0.40, sample='--BuffEntryTable.backgroundFrame:Active()'},
  },
  ['Desactive'] = {
    {name='Desactive', count=1, confidence=0.20, sample='--BuffEntryTable.backgroundFrame:Desactive()'},
  },
  ['InstanciaCheckForDisabledSolo'] = {
    {name='InstanciaCheckForDisabledSolo', count=1, confidence=0.20, sample='function _detalhes:InstanciaCheckForDisabledSolo(instance)'},
  },
  ['AtualizaSoloMode_AfertReset'] = {
    {name='AtualizaSoloMode_AfertReset', count=2, confidence=0.40, sample='function _detalhes:AtualizaSoloMode_AfertReset (instancia)'},
  },
  ['IsCataWow'] = {
    {name='IsCataWow', count=3, confidence=0.60, sample='local isCATA = detailsFramework.IsCataWow()'},
    {name='DetailsFramework.IsCataWow', count=5, confidence=1.00, sample='if (DetailsFramework.IsWotLKWow() or DetailsFramework.IsCataWow()) then'},
    {name='DF.IsCataWow', count=2, confidence=0.40, sample='function DF.IsCataWow()'},
  },
  ['IsPandaWow'] = {
    {name='IsPandaWow', count=1, confidence=0.20, sample='local isPANDA = detailsFramework.IsPandaWow()'},
    {name='DetailsFramework.IsPandaWow', count=4, confidence=0.80, sample='if (DetailsFramework.IsPandaWow()) then'},
    {name='DF.IsPandaWow', count=2, confidence=0.40, sample='function DF.IsPandaWow()'},
  },
  ['Stormstrike'] = {
    {name='Stormstrike', count=1, confidence=0.20, sample='[32175] = 17364, -- shaman Stormstrike (from Turkar on github)'},
  },
  ['GetStorage'] = {
    {name='Details.GetStorage', count=2, confidence=0.40, sample='local db = Details.GetStorage()'},
  },
  ['GetUnitGuildRank'] = {
    {name='GetUnitGuildRank', count=4, confidence=0.80, sample='local rankPosition = Details222.storage.GetUnitGuildRank(diffNumberToName[diff], encounterID, isDamage and "DAMAGER" or "HEALER", Details.playername, true)'},
  },
  ['ToK2'] = {
    {name='ToK2', count=46, confidence=1.00, sample='Details:Msg("|cFFFFBB00Your Best Score|r:", Details:ToK2 ((value) / combatTime) .. " [|cFFFFFF00Guild Rank: " .. rank .. "|r]") --localize-me'},
  },
  ['MonkStagger_damage'] = {
    {name='MonkStagger_damage', count=2, confidence=0.40, sample='return parser:MonkStagger_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)'},
  },
  ['SLT_damage'] = {
    {name='SLT_damage', count=2, confidence=0.40, sample='return parser:SLT_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)'},
  },
  ['AkaarisSoulOwner'] = {
    {name='Details222.Pets.AkaarisSoulOwner', count=2, confidence=0.40, sample='local ownerName, ownerGUID, ownerFlags = Details222.Pets.AkaarisSoulOwner(sourceSerial, sourceName)'},
  },
  ['LOTM_damage'] = {
    {name='LOTM_damage', count=2, confidence=0.40, sample='return parser:LOTM_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)'},
  },
  ['GetOrCreateActor'] = {
    {name='GetOrCreateActor', count=50, confidence=1.00, sample='sourceActor, ownerActor, sourceName = _current_damage_container:GetOrCreateActor(sourceSerial, sourceName, sourceFlags, true)'},
  },
  ['GetPetInfo'] = {
    {name='GetPetInfo', count=8, confidence=1.00, sample='local petData = petContainer.GetPetInfo(sourceSerial)'},
  },
  ['CreateActorAvoidanceTable'] = {
    {name='CreateActorAvoidanceTable', count=9, confidence=1.00, sample='targetActor.avoidance = Details:CreateActorAvoidanceTable()'},
  },
  ['CreateLastEventsTable'] = {
    {name='CreateLastEventsTable', count=13, confidence=1.00, sample='actorLatestEvents = _current_combat:CreateLastEventsTable(targetName)'},
  },
  ['GuessArenaEnemyUnitId'] = {
    {name='GuessArenaEnemyUnitId', count=5, confidence=1.00, sample='unitId = Details:GuessArenaEnemyUnitId(targetName)'},
  },
  ['GetOrChangeActivityStatus'] = {
    {name='GetOrChangeActivityStatus', count=12, confidence=1.00, sample='sourceActor:GetOrChangeActivityStatus(true)'},
  },
  ['CreateFFTable'] = {
    {name='CreateFFTable', count=7, confidence=1.00, sample='local friend = sourceActor.friendlyfire[targetName] or sourceActor:CreateFFTable(targetName)'},
  },
  ['CreateSpellContainer'] = {
    {name='CreateSpellContainer', count=22, confidence=1.00, sample='evokerActor.augmentedSpellsContainer = evokerActor.augmentedSpellsContainer or spellContainerClass:CreateSpellContainer(Details.container_type.CONTAINER_DAMAGE_CLASS)'},
  },
  ['GetOrCreateSpell'] = {
    {name='GetOrCreateSpell', count=41, confidence=1.00, sample='augmentedSpell = evokerActor.augmentedSpellsContainer:GetOrCreateSpell(extraSpellId, true, token)'},
  },
  ['BlinkIcon'] = {
    {name='BlinkIcon', count=6, confidence=1.00, sample='DetailsParserDebugFrame:BlinkIcon(extraSpellId, 1)'},
  },
  ['AddPet'] = {
    {name='AddPet', count=5, confidence=1.00, sample='petContainer.AddPet(petGuid:gsub("%-15439%-", "%-15438%-"), "Greater Fire Elemental", petFlags, sourceSerial, sourceName, sourceFlags, summonSpellId)'},
  },
  ['GetPetNameFromCustomSpells'] = {
    {name='Details222.Pets.GetPetNameFromCustomSpells', count=3, confidence=0.60, sample='local newPetName = Details222.Pets.GetPetNameFromCustomSpells(petName, summonSpellId, npcId)'},
  },
  ['Barrier'] = {
    {name='Barrier', count=25, confidence=1.00, sample='[142862] = true, -- Ancient Barrier (Malkorok)'},
  },
  ['Purgatory'] = {
    {name='Purgatory', count=2, confidence=0.40, sample='[114556] = true, -- Purgatory (DK)'},
  },
  ['Ox'] = {
    {name='Ox', count=1, confidence=0.20, sample='[115069] = true, -- Stance of the Sturdy Ox (Monk)'},
  },
  ['Redemption'] = {
    {name='Redemption', count=1, confidence=0.20, sample='[20711] = true, -- Spirit of Redemption (Priest)'},
  },
  ['SLT_healing'] = {
    {name='SLT_healing', count=2, confidence=0.40, sample='return parser:SLT_healing(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overHealing, absorbed, critical, bIsShield)'},
  },
  ['BuffIn'] = {
    {name='BuffIn', count=2, confidence=0.40, sample='Details222.SpecHelpers[1473].BuffIn(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellschool, auraType, amount)'},
  },
  ['FindBuffCastedByUnitName'] = {
    {name='FindBuffCastedByUnitName', count=8, confidence=1.00, sample='local auraName, texture, count, auraType, duration, expirationTime, sourceUnit, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossAura, isFromPlayerOrPlayerPet, nameplateShowAll, timeMod, v1, v2, v3, v4, v5 = Details:FindBuffCastedByUnitName(sourceName, spellId, sourceName)'},
  },
  ['CanOverride'] = {
    {name='CanOverride', count=1, confidence=0.20, sample='if (overrideTable.CanOverride(auraName, texture, count, auraType, duration, expirationTime, sourceUnit, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossAura, isFromPlayerOrPlayerPet, nameplateShowAll, timeMod, v1, v2, v3, v4, v5)) then'},
  },
  ['BuffRefresh'] = {
    {name='BuffRefresh', count=2, confidence=0.40, sample='Details222.SpecHelpers[1473].BuffRefresh(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellschool, tipo, amount)'},
  },
  ['BuffOut'] = {
    {name='BuffOut', count=2, confidence=0.40, sample='Details222.SpecHelpers[1473].BuffOut(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellSchool, tipo, amount)'},
  },
  ['GetOrderNumber'] = {
    {name='GetOrderNumber', count=21, confidence=1.00, sample='sourceActor.cc_done = Details:GetOrderNumber()'},
  },
  ['CreateBuffTargetObject'] = {
    {name='CreateBuffTargetObject', count=5, confidence=1.00, sample='este_alvo = Details.atributo_misc:CreateBuffTargetObject()'},
  },
  ['GetFullName'] = {
    {name='GetFullName', count=45, confidence=1.00, sample='local actorName = Details:GetFullName(unitID)'},
  },
  ['CreateAlternatePowerTable'] = {
    {name='CreateAlternatePowerTable', count=3, confidence=0.60, sample='power = _current_combat:CreateAlternatePowerTable(actorName)'},
  },
  ['RemovePet'] = {
    {name='RemovePet', count=5, confidence=1.00, sample='petContainer.RemovePet(targetSerial)'},
  },
  ['WA_OnPlayerDeath'] = {
    {name='WA_OnPlayerDeath', count=1, confidence=0.20, sample='--run a script in the aura which receives interesting data from the WA_OnPlayerDeath()'},
  },
  ['WipeSourceCache'] = {
    {name='WipeSourceCache', count=2, confidence=0.40, sample='function parser:WipeSourceCache()'},
  },
  ['CaptureIsAllEnabled'] = {
    {name='CaptureIsAllEnabled', count=1, confidence=0.20, sample='function Details:CaptureIsAllEnabled()'},
  },
  ['CaptureIsEnabled'] = {
    {name='CaptureIsEnabled', count=2, confidence=0.40, sample='function Details:CaptureIsEnabled(capture)'},
  },
  ['CaptureEnable'] = {
    {name='CaptureEnable', count=3, confidence=0.60, sample='Details:CaptureEnable(thisType)'},
  },
  ['CaptureDisable'] = {
    {name='CaptureDisable', count=3, confidence=0.60, sample='Details:CaptureDisable(thisType)'},
  },
  ['CaptureGet'] = {
    {name='CaptureGet', count=8, confidence=1.00, sample='function Details:CaptureGet(captureType)'},
  },
  ['CaptureReset'] = {
    {name='CaptureReset', count=2, confidence=0.40, sample='function Details:CaptureReset()'},
  },
  ['CancelAllCaptureSchedules'] = {
    {name='CancelAllCaptureSchedules', count=3, confidence=0.60, sample='Details:CancelAllCaptureSchedules()'},
  },
  ['CaptureSet'] = {
    {name='CaptureSet', count=44, confidence=1.00, sample='Details:CaptureSet(true, thisType, true)'},
  },
  ['CaptureTimeout'] = {
    {name='CaptureTimeout', count=1, confidence=0.20, sample='function Details:CaptureTimeout (table3)'},
  },
  ['RefreshFunctions'] = {
    {name='RefreshFunctions', count=1, confidence=0.20, sample='function parser:RefreshFunctions()'},
  },
  ['CallWipe'] = {
    {name='CallWipe', count=2, confidence=0.40, sample='function Details:CallWipe (from_slash)'},
  },
  ['ENCOUNTER_END'] = {
    {name='ENCOUNTER_END', count=2, confidence=0.40, sample='local successful_ended = Details.parser_functions:ENCOUNTER_END (eTable.id, eTable.name, eTable.diff, eTable.size, 0)'},
  },
  ['SendHomeRaidData'] = {
    {name='SendHomeRaidData', count=2, confidence=0.40, sample='Details:SendHomeRaidData ("WI")'},
  },
  ['FlagNewCombat_PVPState'] = {
    {name='FlagNewCombat_PVPState', count=2, confidence=0.40, sample='function Details:FlagNewCombat_PVPState()'},
  },
  ['GetZoneType'] = {
    {name='GetZoneType', count=15, confidence=1.00, sample='function Details:GetZoneType()'},
  },
  ['UNIT_FLAGS'] = {
    {name='UNIT_FLAGS', count=1, confidence=0.20, sample='function Details.parser_functions:UNIT_FLAGS(...)'},
  },
  ['SCENARIO_COMPLETED'] = {
    {name='SCENARIO_COMPLETED', count=1, confidence=0.20, sample='function Details.parser_functions:SCENARIO_COMPLETED(...)'},
  },
  ['Check_ZONE_CHANGED_NEW_AREA'] = {
    {name='Check_ZONE_CHANGED_NEW_AREA', count=1, confidence=0.20, sample='function Details:Check_ZONE_CHANGED_NEW_AREA()'},
  },
  ['SetDeathLogTemporaryLimit'] = {
    {name='SetDeathLogTemporaryLimit', count=4, confidence=0.80, sample='Details:SetDeathLogTemporaryLimit(nil) --reset the temp amount'},
  },
  ['IsResting'] = {
    {name='IsResting', count=2, confidence=0.40, sample='_in_resting_zone = IsResting()'},
  },
  ['AdjustAlphaByContext'] = {
    {name='AdjustAlphaByContext', count=9, confidence=1.00, sample='instancia:AdjustAlphaByContext(true)'},
  },
  ['ClearAugmentationCache'] = {
    {name='Details222.Cache.ClearAugmentationCache', count=3, confidence=0.60, sample='Details222.Cache.ClearAugmentationCache()'},
  },
  ['LeftArena'] = {
    {name='LeftArena', count=4, confidence=0.80, sample='Details:LeftArena()'},
  },
  ['StopBgUpdater'] = {
    {name='StopBgUpdater', count=2, confidence=0.40, sample='Details.pvp_parser_frame:StopBgUpdater()'},
  },
  ['ResetOverallData'] = {
    {name='ResetOverallData', count=8, confidence=1.00, sample='Details.tabela_historico:ResetOverallData()'},
  },
  ['SairDoCombate'] = {
    {name='SairDoCombate', count=16, confidence=1.00, sample='Details:SairDoCombate()'},
  },
  ['StartBgUpdater'] = {
    {name='StartBgUpdater', count=2, confidence=0.40, sample='Details.pvp_parser_frame:StartBgUpdater()'},
  },
  ['EnteredInArena'] = {
    {name='EnteredInArena', count=3, confidence=0.60, sample='Details:EnteredInArena()'},
  },
  ['CheckForAutoErase'] = {
    {name='CheckForAutoErase', count=2, confidence=0.40, sample='Details:CheckForAutoErase(zoneMapID)'},
  },
  ['IsZoneIdFromCurrentExpansion'] = {
    {name='IsZoneIdFromCurrentExpansion', count=8, confidence=1.00, sample='if (Details:IsZoneIdFromCurrentExpansion(zoneMapID)) then'},
  },
  ['ScheduleLoadStorage'] = {
    {name='Details.ScheduleLoadStorage', count=4, confidence=0.80, sample='Details.ScheduleLoadStorage()'},
  },
  ['DispatchAutoRunCode'] = {
    {name='Details222.AutoRunCode.DispatchAutoRunCode', count=13, confidence=1.00, sample='Details222.AutoRunCode.DispatchAutoRunCode("on_zonechanged")'},
  },
  ['CheckForPerformanceProfile'] = {
    {name='CheckForPerformanceProfile', count=2, confidence=0.40, sample='Details:CheckForPerformanceProfile()'},
  },
  ['ENCOUNTER_START'] = {
    {name='ENCOUNTER_START', count=1, confidence=0.20, sample='function Details.parser_functions:ENCOUNTER_START(...)'},
  },
  ['SendPlayerKeystoneInfoToParty'] = {
    {name='KeystoneInfoManager.SendPlayerKeystoneInfoToParty', count=2, confidence=0.40, sample='openRaidLib.KeystoneInfoManager.SendPlayerKeystoneInfoToParty()'},
  },
  ['GetBossEncounterDetailsFromEncounterId'] = {
    {name='GetBossEncounterDetailsFromEncounterId', count=8, confidence=1.00, sample='local encounterTable, bossIndex = Details:GetBossEncounterDetailsFromEncounterId(zoneMapID, encounterID)'},
  },
  ['CacheKeystoneForAllGroupMembers'] = {
    {name='Details222.CacheKeystoneForAllGroupMembers', count=2, confidence=0.40, sample='Details222.CacheKeystoneForAllGroupMembers()'},
  },
  ['GetCurrentEncounterInfo'] = {
    {name='GetCurrentEncounterInfo', count=2, confidence=0.40, sample='function Details:GetCurrentEncounterInfo()'},
  },
  ['GetBossEncounterTexture'] = {
    {name='GetBossEncounterTexture', count=2, confidence=0.40, sample='local bossIcon = Details:GetBossEncounterTexture(encounterName)'},
  },
  ['SetStartTime'] = {
    {name='SetStartTime', count=12, confidence=1.00, sample='Details.tabela_vigente:SetStartTime(Details.encounter_table ["start"])'},
  },
  ['SetEndTime'] = {
    {name='SetEndTime', count=12, confidence=1.00, sample='Details.tabela_vigente:SetEndTime(Details.encounter_table ["end"])'},
  },
  ['PetScan'] = {
    {name='PetScan', count=5, confidence=1.00, sample='C_Timer.After(1, function() petContainer.PetScan("ENCOUNTER_END") end)'},
    {name='Details222.PetContainer.PetScan', count=1, confidence=0.20, sample='Details222.PetContainer.PetScan("CombatStart")'},
  },
  ['GetAllUnitsGear'] = {
    {name='GetAllUnitsGear', count=3, confidence=0.60, sample='local allPlayersGear = openRaidLib and openRaidLib.GetAllUnitsGear()'},
    {name='GearManager.GetAllUnitsGear', count=4, confidence=0.80, sample='return openRaidLib.GearManager.GetAllUnitsGear()'},
  },
  ['UNIT_PET'] = {
    {name='UNIT_PET', count=3, confidence=0.60, sample='function Details.parser_functions:UNIT_PET(unitId)'},
  },
  ['GetDisplay'] = {
    {name='GetDisplay', count=41, confidence=1.00, sample='local mainDisplayGroup, subDisplay = instance:GetDisplay()'},
  },
  ['GetSegment'] = {
    {name='GetSegment', count=13, confidence=1.00, sample='local segment = instance:GetSegment()'},
  },
  ['GetCustomDisplayIDByName'] = {
    {name='Details222.GetCustomDisplayIDByName', count=6, confidence=1.00, sample='local dynamicOverallDataCustomID = Details222.GetCustomDisplayIDByName(Loc["STRING_CUSTOM_DYNAMICOVERAL"])'},
  },
  ['ExpansionHasEvoker'] = {
    {name='ExpansionHasEvoker', count=1, confidence=0.20, sample='if (detailsFramework.ExpansionHasEvoker()) then'},
    {name='DF.ExpansionHasEvoker', count=1, confidence=0.20, sample='function DF.ExpansionHasEvoker()'},
  },
  ['InstanceCall'] = {
    {name='InstanceCall', count=18, confidence=1.00, sample='Details:InstanceCall(autoSwapDynamicOverallData, true)'},
  },
  ['GetUnitGear'] = {
    {name='GetUnitGear', count=6, confidence=1.00, sample='local unitGearInfo = openRaidLib.GetUnitGear(unitId)'},
    {name='GearManager.GetUnitGear', count=4, confidence=0.80, sample='return openRaidLib.GearManager.GetUnitGear(unitName)'},
  },
  ['RunScheduledEventsAfterCombat'] = {
    {name='RunScheduledEventsAfterCombat', count=4, confidence=0.80, sample='function Details:RunScheduledEventsAfterCombat(OnRegenEnabled)'},
  },
  ['StoreEncounter'] = {
    {name='Details.Database.StoreEncounter', count=3, confidence=0.60, sample='Details:Msg("error occurred on Details.Database.StoreEncounter():", errortext)'},
  },
  ['StoreWipe'] = {
    {name='Details.Database.StoreWipe', count=3, confidence=0.60, sample='Details:Msg("error occurred on Details.Database.StoreWipe():", errortext)'},
  },
  ['CHALLENGE_MODE_END'] = {
    {name='CHALLENGE_MODE_END', count=1, confidence=0.20, sample='function Details.parser_functions:CHALLENGE_MODE_END(...) --doesn't exists'},
  },
  ['IsCancelled'] = {
    {name='IsCancelled', count=25, confidence=1.00, sample='if (DetailsMythicPlusFrame.ZoneLeftTimer and not DetailsMythicPlusFrame.ZoneLeftTimer:IsCancelled()) then'},
  },
  ['CHALLENGE_MODE_START'] = {
    {name='CHALLENGE_MODE_START', count=1, confidence=0.20, sample='function Details.parser_functions:CHALLENGE_MODE_START(...) --~challenge ~mythic+ ~m+'},
  },
  ['LogStep'] = {
    {name='Details222.MythicPlus.LogStep', count=25, confidence=1.00, sample='Details222.MythicPlus.LogStep("CHALLENGE_MODE_START, starting 10 seconds timer.")'},
  },
  ['GetKeystoneInfo'] = {
    {name='GetKeystoneInfo', count=5, confidence=1.00, sample='local unitKeystoneInfo = libOpenRaid.GetKeystoneInfo(unitId)'},
    {name='KeystoneInfoManager.GetKeystoneInfo', count=10, confidence=1.00, sample='local keystoneInfo = openRaidLib.KeystoneInfoManager.GetKeystoneInfo(unitName, true)'},
  },
  ['CHALLENGE_MODE_COMPLETED'] = {
    {name='CHALLENGE_MODE_COMPLETED', count=1, confidence=0.20, sample='function Details.parser_functions:CHALLENGE_MODE_COMPLETED(...) --~complete ~finish ~mythic ~m+'},
  },
  ['IntegerToTimer'] = {
    {name='IntegerToTimer', count=45, confidence=1.00, sample='Details:Msg("run elapsed time:", DetailsFramework:IntegerToTimer(completionTime / 1000))'},
  },
  ['PLAYER_TALENT_UPDATE'] = {
    {name='PLAYER_TALENT_UPDATE', count=1, confidence=0.20, sample='function Details.parser_functions:PLAYER_TALENT_UPDATE()'},
  },
  ['SendCharacterData'] = {
    {name='SendCharacterData', count=6, confidence=1.00, sample='Details:SendCharacterData()'},
  },
  ['RefreshPlayerSpecialization'] = {
    {name='RefreshPlayerSpecialization', count=2, confidence=0.40, sample='function Details:RefreshPlayerSpecialization()'},
  },
  ['PLAYER_SPECIALIZATION_CHANGED'] = {
    {name='PLAYER_SPECIALIZATION_CHANGED', count=1, confidence=0.20, sample='function Details.parser_functions:PLAYER_SPECIALIZATION_CHANGED()'},
  },
  ['UNIT_FACTION'] = {
    {name='UNIT_FACTION', count=1, confidence=0.20, sample='function Details.parser_functions:UNIT_FACTION(unit)'},
  },
  ['ROLE_CHANGED_INFORM'] = {
    {name='ROLE_CHANGED_INFORM', count=1, confidence=0.20, sample='function Details.parser_functions:ROLE_CHANGED_INFORM(...)'},
  },
  ['PLAYER_ROLES_ASSIGNED'] = {
    {name='PLAYER_ROLES_ASSIGNED', count=1, confidence=0.20, sample='function Details.parser_functions:PLAYER_ROLES_ASSIGNED(...)'},
  },
  ['InGroup'] = {
    {name='InGroup', count=2, confidence=0.40, sample='function Details:InGroup()'},
  },
  ['GROUP_ROSTER_UPDATE'] = {
    {name='GROUP_ROSTER_UPDATE', count=1, confidence=0.20, sample='function Details.parser_functions:GROUP_ROSTER_UPDATE(...)'},
  },
  ['START_TIMER'] = {
    {name='START_TIMER', count=1, confidence=0.20, sample='function Details.parser_functions:START_TIMER(...) --~timer'},
  },
  ['StartArenaSegment'] = {
    {name='StartArenaSegment', count=2, confidence=0.40, sample='Details:StartArenaSegment(...)'},
  },
  ['CreateBattlegroundSegment'] = {
    {name='CreateBattlegroundSegment', count=1, confidence=0.20, sample='function Details:CreateBattlegroundSegment()'},
  },
  ['CreatePanicWarning'] = {
    {name='CreatePanicWarning', count=3, confidence=0.60, sample='Details:CreatePanicWarning()'},
  },
  ['DefaultProfile'] = {
    {name='Details222.LoadSavedVariables.DefaultProfile', count=2, confidence=0.40, sample='Details222.LoadSavedVariables.DefaultProfile()'},
  },
  ['CharacterData'] = {
    {name='Details222.LoadSavedVariables.CharacterData', count=2, confidence=0.40, sample='Details222.LoadSavedVariables.CharacterData()'},
  },
  ['SharedData'] = {
    {name='Details222.LoadSavedVariables.SharedData', count=2, confidence=0.40, sample='Details222.LoadSavedVariables.SharedData()'},
  },
  ['LoadConfig'] = {
    {name='LoadConfig', count=2, confidence=0.40, sample='Details:LoadConfig()'},
  },
  ['UpdateParserGears'] = {
    {name='UpdateParserGears', count=19, confidence=1.00, sample='Details:UpdateParserGears()'},
  },
  ['StartAutoRun'] = {
    {name='Details222.AutoRunCode.StartAutoRun', count=2, confidence=0.40, sample='Details222.AutoRunCode.StartAutoRun()'},
  },
  ['IsLoaded'] = {
    {name='Details.IsLoaded', count=3, confidence=0.60, sample='function Details.IsLoaded()'},
  },
  ['ADDON_LOADED'] = {
    {name='ADDON_LOADED', count=1, confidence=0.20, sample='function Details.parser_functions:ADDON_LOADED(...)'},
  },
  ['TurnTheSpeakersOn'] = {
    {name='TurnTheSpeakersOn', count=1, confidence=0.20, sample='TurnTheSpeakersOn()'},
  },
  ['PET_BATTLE_OPENING_START'] = {
    {name='PET_BATTLE_OPENING_START', count=1, confidence=0.20, sample='function Details.parser_functions:PET_BATTLE_OPENING_START(...)'},
  },
  ['SetWindowAlphaForCombat'] = {
    {name='SetWindowAlphaForCombat', count=41, confidence=1.00, sample='instance:SetWindowAlphaForCombat(true, true, 0)'},
  },
  ['PET_BATTLE_CLOSE'] = {
    {name='PET_BATTLE_CLOSE', count=1, confidence=0.20, sample='function Details.parser_functions:PET_BATTLE_CLOSE(...)'},
  },
  ['UNIT_NAME_UPDATE'] = {
    {name='UNIT_NAME_UPDATE', count=1, confidence=0.20, sample='function Details.parser_functions:UNIT_NAME_UPDATE(unitId)'},
  },
  ['PLAYER_TARGET_CHANGED'] = {
    {name='PLAYER_TARGET_CHANGED', count=1, confidence=0.20, sample='function Details.parser_functions:PLAYER_TARGET_CHANGED(...)'},
  },
  ['GetBackupLogs'] = {
    {name='Details222.SaveVariables.GetBackupLogs', count=3, confidence=0.60, sample='function Details222.SaveVariables.GetBackupLogs()'},
  },
  ['GetDateForLogs'] = {
    {name='Details222.Date.GetDateForLogs', count=5, confidence=1.00, sample='local currentDate = Details222.Date.GetDateForLogs()'},
  },
  ['SavePlayTimeOnClass'] = {
    {name='Details.SavePlayTimeOnClass', count=2, confidence=0.40, sample='local savePlayTimeClass, savePlayTimeErrorText = pcall(function() Details.SavePlayTimeOnClass() end)'},
  },
  ['SetDontSavePosition'] = {
    {name='SetDontSavePosition', count=3, confidence=0.60, sample='instance.baseframe:SetDontSavePosition(true)'},
  },
  ['OnLogout'] = {
    {name='Details222.AutoRunCode.OnLogout', count=2, confidence=0.40, sample='Details222.AutoRunCode.OnLogout()'},
  },
  ['OnParserEvent'] = {
    {name='Details222.Parser.OnParserEvent', count=1, confidence=0.20, sample='function Details222.Parser.OnParserEvent()'},
    {name='OnParserEvent', count=1, confidence=0.20, sample='Details:OnParserEvent ('},
  },
  ['CombatLogGetCurrentEventInfo'] = {
    {name='CombatLogGetCurrentEventInfo', count=8, confidence=1.00, sample='local time, token, hidding, who_serial, who_name, who_flags, who_flags2, target_serial, target_name, target_flags, target_flags2, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 = CombatLogGetCurrentEventInfo()'},
  },
  ['OnParserEventPVP'] = {
    {name='Details222.Parser.OnParserEventPVP', count=1, confidence=0.20, sample='function Details222.Parser.OnParserEventPVP()'},
  },
  ['OnParserEventOutOfCombat'] = {
    {name='Details222.Parser.OnParserEventOutOfCombat', count=1, confidence=0.20, sample='function Details222.Parser.OnParserEventOutOfCombat()'},
  },
  ['OnParserEventDebug'] = {
    {name='Details.OnParserEventDebug', count=1, confidence=0.20, sample='function Details.OnParserEventDebug()																											    --buffs: spellschool, auraType, amount, arg1, arg2, arg3'},
  },
  ['UpdateParser'] = {
    {name='UpdateParser', count=2, confidence=0.40, sample='function Details:UpdateParser()'},
  },
  ['GetActorFromCache'] = {
    {name='GetActorFromCache', count=8, confidence=1.00, sample='function Details:GetActorFromCache(value)'},
  },
  ['PrintParserCacheIndexes'] = {
    {name='PrintParserCacheIndexes', count=3, confidence=0.60, sample='function Details:PrintParserCacheIndexes()'},
  },
  ['GetActorsOnDamageCache'] = {
    {name='GetActorsOnDamageCache', count=1, confidence=0.20, sample='function Details:GetActorsOnDamageCache()'},
  },
  ['GetActorsOnHealingCache'] = {
    {name='GetActorsOnHealingCache', count=1, confidence=0.20, sample='function Details:GetActorsOnHealingCache()'},
  },
  ['RevomeActorFromCache'] = {
    {name='RevomeActorFromCache', count=2, confidence=0.40, sample='function parser:RevomeActorFromCache(actor_serial, actor_name)'},
  },
  ['UptadeRaidMembersCache'] = {
    {name='UptadeRaidMembersCache', count=2, confidence=0.40, sample='function Details:UptadeRaidMembersCache()'},
  },
  ['GetSpecializationRole'] = {
    {name='GetSpecializationRole', count=2, confidence=0.40, sample='if (detailsFramework.GetSpecializationRole (spec) == "TANK") then'},
    {name='DetailsFramework.GetSpecializationRole', count=3, confidence=0.60, sample='role = spec and DetailsFramework.GetSpecializationRole (spec) or role'},
    {name='DF.GetSpecializationRole', count=2, confidence=0.40, sample='function DF.GetSpecializationRole(...)'},
  },
  ['GetCrowdControlSpells'] = {
    {name='GetCrowdControlSpells', count=4, confidence=0.80, sample='function Details:GetCrowdControlSpells()'},
  },
  ['IsATank'] = {
    {name='IsATank', count=2, confidence=0.40, sample='function Details:IsATank(unitGUID)'},
  },
  ['IsInCache'] = {
    {name='IsInCache', count=2, confidence=0.40, sample='function Details:IsInCache(unitGUID)'},
  },
  ['GetParserPlayerCache'] = {
    {name='GetParserPlayerCache', count=8, confidence=1.00, sample='function Details:GetParserPlayerCache()'},
  },
  ['DumpIgnoredNpcs'] = {
    {name='Details.DumpIgnoredNpcs', count=1, confidence=0.20, sample='function Details.DumpIgnoredNpcs()'},
  },
  ['IsInCombat'] = {
    {name='IsInCombat', count=2, confidence=0.40, sample='function Details:IsInCombat()'},
  },
  ['IsInEncounter'] = {
    {name='IsInEncounter', count=1, confidence=0.20, sample='function Details:IsInEncounter()'},
  },
  ['GetAllActors'] = {
    {name='GetAllActors', count=1, confidence=0.20, sample='function Details:GetAllActors(_combat, _actorname)'},
  },
  ['GetUnitID'] = {
    {name='GetUnitID', count=16, confidence=1.00, sample='local unitId = openRaidLib.GetUnitID(unitName)'},
  },
  ['ReadPvPData'] = {
    {name='ReadPvPData', count=2, confidence=0.40, sample='self:ReadPvPData()'},
  },
  ['BgScoreUpdate'] = {
    {name='BgScoreUpdate', count=1, confidence=0.20, sample='function Details:BgScoreUpdate()'},
  },
  ['RequestBattlefieldScoreData'] = {
    {name='RequestBattlefieldScoreData', count=1, confidence=0.20, sample='RequestBattlefieldScoreData()'},
  },
  ['GetNumBattlefieldScores'] = {
    {name='GetNumBattlefieldScores', count=3, confidence=0.60, sample='local players = GetNumBattlefieldScores()'},
  },
  ['UnitFullName'] = {
    {name='UnitFullName', count=2, confidence=0.40, sample='local _player, realmName = UnitFullName("player")'},
  },
  ['GetBattlefieldScore'] = {
    {name='GetBattlefieldScore', count=2, confidence=0.40, sample='name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class, classToken, damageDone, healingDone, bgRating, ratingChange, preMatchMMR, mmrChange, talentSpec = GetBattlefieldScore(i)'},
  },
  ['AnimarSplit'] = {
    {name='AnimarSplit', count=1, confidence=0.20, sample='function Details:AnimarSplit(barra, goal)'},
  },
  ['FazerAnimacaoSplit'] = {
    {name='FazerAnimacaoSplit', count=1, confidence=0.20, sample='function Details:FazerAnimacaoSplit(elapsed)'},
  },
  ['PerformAnimations'] = {
    {name='PerformAnimations', count=5, confidence=1.00, sample='function Details:PerformAnimations(amtLines)'},
  },
  ['AnimarBarra'] = {
    {name='AnimarBarra', count=5, confidence=1.00, sample='Details:AnimarBarra (row, row.animacao_fim)'},
  },
  ['RefreshAnimationFunctions'] = {
    {name='RefreshAnimationFunctions', count=3, confidence=0.60, sample='function Details:RefreshAnimationFunctions()'},
  },
  ['FazerAnimacao_Esquerda'] = {
    {name='FazerAnimacao_Esquerda', count=1, confidence=0.20, sample='function Details:FazerAnimacao_Esquerda (deltaTime)'},
  },
  ['FazerAnimacao_Direita'] = {
    {name='FazerAnimacao_Direita', count=1, confidence=0.20, sample='function Details:FazerAnimacao_Direita (deltaTime)'},
  },
  ['AtualizaPontos'] = {
    {name='AtualizaPontos', count=7, confidence=1.00, sample='function Details:AtualizaPontos()'},
  },
  ['GetPositionOnScreen'] = {
    {name='GetPositionOnScreen', count=8, confidence=1.00, sample='local _x, _y = self:GetPositionOnScreen()'},
  },
  ['GetRealSize'] = {
    {name='GetRealSize', count=2, confidence=0.40, sample='local _w, _h = self:GetRealSize()'},
  },
  ['RestoreLibWindow'] = {
    {name='RestoreLibWindow', count=2, confidence=0.40, sample='function Details:RestoreLibWindow()'},
  },
  ['SaveLibWindow'] = {
    {name='SaveLibWindow', count=2, confidence=0.40, sample='function Details:SaveLibWindow()'},
  },
  ['SaveMainWindowSize'] = {
    {name='SaveMainWindowSize', count=2, confidence=0.40, sample='function Details:SaveMainWindowSize()'},
  },
  ['RestoreMainWindowPositionNoResize'] = {
    {name='RestoreMainWindowPositionNoResize', count=6, confidence=1.00, sample='function Details:RestoreMainWindowPositionNoResize (pre_defined, x, y)'},
  },
  ['CreatePositionTable'] = {
    {name='CreatePositionTable', count=4, confidence=0.80, sample='function Details:CreatePositionTable()'},
  },
  ['RestorePositionFromPositionTable'] = {
    {name='RestorePositionFromPositionTable', count=4, confidence=0.80, sample='function Details:RestorePositionFromPositionTable (t)'},
  },
  ['BaseFrameSnap'] = {
    {name='BaseFrameSnap', count=7, confidence=1.00, sample='instancia:BaseFrameSnap()'},
  },
  ['StretchButtonAnchor'] = {
    {name='StretchButtonAnchor', count=6, confidence=1.00, sample='self:StretchButtonAnchor(2)'},
  },
  ['Freeze'] = {
    {name='Freeze', count=9, confidence=1.00, sample='Details:Freeze(self)'},
  },
  ['CreateNewLine'] = {
    {name='CreateNewLine', count=3, confidence=0.60, sample='gump:CreateNewLine(self, i) --cria nova barra'},
  },
  ['RefreshBarra'] = {
    {name='RefreshBarra', count=25, confidence=1.00, sample='tabela:RefreshBarra(esta_barra, self, true)'},
  },
  ['CooltipPreset'] = {
    {name='CooltipPreset', count=6, confidence=1.00, sample='function Details:CooltipPreset(preset)'},
  },
  ['NewPanel'] = {
    {name='NewPanel', count=21, confidence=1.00, sample='Details.yesNo = Details.gump:NewPanel(UIParent, _, "DetailsYesNoWindow", _, 500, 80)'},
  },
  ['NewLabel'] = {
    {name='NewLabel', count=138, confidence=1.00, sample='Details.gump:NewLabel(Details.yesNo, _, "$parentAsk", "ask", "")'},
  },
  ['InstallCustomTexture'] = {
    {name='InstallCustomTexture', count=16, confidence=1.00, sample='Details.yesNo ["no"]:InstallCustomTexture()'},
  },
  ['SetHook'] = {
    {name='SetHook', count=151, confidence=1.00, sample='Details.yesNo ["yes"]:SetHook("OnMouseUp", function() Details.yesNo:Hide() end)'},
  },
  ['Ask'] = {
    {name='Ask', count=3, confidence=0.60, sample='function Details:Ask (msg, func, ...)'},
  },
  ['SetClickFunction'] = {
    {name='SetClickFunction', count=26, confidence=1.00, sample='Details.yesNo ["yes"]:SetClickFunction(func, p1, p2)'},
  },
  ['CreateWaitForPlugin'] = {
    {name='CreateWaitForPlugin', count=5, confidence=1.00, sample='function Details:CreateWaitForPlugin()'},
  },
  ['SetFromAlpha'] = {
    {name='SetFromAlpha', count=27, confidence=1.00, sample='rotate:SetFromAlpha(0.8)'},
  },
  ['SetToAlpha'] = {
    {name='SetToAlpha', count=28, confidence=1.00, sample='rotate:SetToAlpha(1)'},
  },
  ['SetTarget'] = {
    {name='SetTarget', count=29, confidence=1.00, sample='rotate:SetTarget(WaitTexture)'},
  },
  ['WaitForPlugin'] = {
    {name='WaitForPlugin', count=5, confidence=1.00, sample='function self:WaitForPlugin()'},
  },
  ['ExecDelayedPlugin1'] = {
    {name='ExecDelayedPlugin1', count=1, confidence=0.20, sample='function self:ExecDelayedPlugin1()'},
  },
  ['EnableRaidMode'] = {
    {name='EnableRaidMode', count=9, confidence=1.00, sample='Details.RaidTables:EnableRaidMode (self)'},
  },
  ['ExecDelayedPlugin'] = {
    {name='ExecDelayedPlugin', count=1, confidence=0.20, sample='function Details:ExecDelayedPlugin(instancia)'},
  },
  ['OpenFeedbackWindow'] = {
    {name='OpenFeedbackWindow', count=1, confidence=0.20, sample='function Details:OpenFeedbackWindow()'},
    {name='Details.OpenFeedbackWindow', count=1, confidence=0.20, sample='Details.OpenFeedbackWindow()'},
  },
  ['NewImage'] = {
    {name='NewImage', count=58, confidence=1.00, sample='local wowi = gump:NewImage(panel, [[Interface\AddOns\Details\images\icons2]], 101, 34, "artwork", {0/512, 101/512, 163/512, 200/512})'},
  },
  ['CopyPaste'] = {
    {name='CopyPaste', count=9, confidence=1.00, sample='Details:CopyPaste ([[http://www.wowinterface.com/downloads/addcomment.php?action=addcomment&fileid=23056]])'},
  },
  ['CriarInstancia'] = {
    {name='CriarInstancia', count=8, confidence=1.00, sample='instance1 = Details:CriarInstancia(_, true)'},
    {name='Details.CriarInstancia', count=7, confidence=1.00, sample='Details.CriarInstancia (_, _, 1)'},
  },
  ['OpenUpdateWindow'] = {
    {name='OpenUpdateWindow', count=1, confidence=0.20, sample='function Details:OpenUpdateWindow()'},
  },
  ['NewTextEntry'] = {
    {name='NewTextEntry', count=19, confidence=1.00, sample='local editbox = Details.gump:NewTextEntry(updatewindow_frame, nil, "$parentTextEntry", "text", 387, 14)'},
  },
  ['UpdateDialogSetFocus'] = {
    {name='UpdateDialogSetFocus', count=1, confidence=0.20, sample='function Details:UpdateDialogSetFocus()'},
  },
  ['RegisterMinimap'] = {
    {name='RegisterMinimap', count=1, confidence=0.20, sample='function Details:RegisterMinimap()'},
  },
  ['ToggleWindows'] = {
    {name='ToggleWindows', count=4, confidence=0.80, sample='Details:ToggleWindows()'},
  },
  ['ResetAllCombatData'] = {
    {name='ResetAllCombatData', count=13, confidence=1.00, sample='Details.tabela_historico:ResetAllCombatData()'},
  },
  ['GetOpenedWindowsAmount'] = {
    {name='GetOpenedWindowsAmount', count=2, confidence=0.40, sample='local opened = Details:GetOpenedWindowsAmount()'},
  },
  ['ReabrirTodasInstancias'] = {
    {name='ReabrirTodasInstancias', count=5, confidence=1.00, sample='Details:ReabrirTodasInstancias()'},
  },
  ['ShutDownAllInstances'] = {
    {name='ShutDownAllInstances', count=4, confidence=0.80, sample='Details:ShutDownAllInstances()'},
  },
  ['AddMenu'] = {
    {name='AddMenu', count=65, confidence=1.00, sample='GameCooltip:AddMenu (1, Details.tabela_historico.ResetAllCombatData, true, nil, nil, Loc ["STRING_ERASE_DATA"], nil, true)'},
  },
  ['AddIcon'] = {
    {name='AddIcon', count=302, confidence=1.00, sample='GameCooltip:AddIcon ([[Interface\COMMON\VOICECHAT-MUTED]], 1, 1, 14, 14)'},
  },
  ['SetWallpaper'] = {
    {name='SetWallpaper', count=46, confidence=1.00, sample='GameCooltip:SetWallpaper (1, [[Interface\SPELLBOOK\Spellbook-Page-1]], {.6, 0.1, 0.64453125, 0}, {.8, .8, .8, 0.2}, true)'},
  },
  ['ShowCooltip'] = {
    {name='ShowCooltip', count=41, confidence=1.00, sample='GameCooltip:ShowCooltip()'},
  },
  ['IsRegistered'] = {
    {name='IsRegistered', count=4, confidence=0.80, sample='if (databroker and not LDBIcon:IsRegistered ("Details")) then'},
  },
  ['DoRegisterHotCorner'] = {
    {name='DoRegisterHotCorner', count=1, confidence=0.20, sample='function Details:DoRegisterHotCorner()'},
  },
  ['RegisterHotCornerButton'] = {
    {name='RegisterHotCornerButton', count=1, confidence=0.20, sample='_G.HotCorners:RegisterHotCornerButton ('},
  },
  ['EmbedPlugin'] = {
    {name='DetailsPluginContainerWindow.EmbedPlugin', count=10, confidence=1.00, sample='DetailsPluginContainerWindow.EmbedPlugin(DetailsAPI2Frame, DetailsAPI2Frame, true)'},
    {name='EmbedPlugin', count=1, confidence=0.20, sample='function pluginContainerFrame.EmbedPlugin(pluginObject, frame, bIsUtility, callback)'},
  },
  ['RefreshWindow'] = {
    {name='DetailsAPI2Frame.RefreshWindow', count=1, confidence=0.20, sample='function DetailsAPI2Frame.RefreshWindow()'},
    {name='RefreshWindow', count=33, confidence=1.00, sample='self:RefreshWindow(true)'},
    {name='DetailsAuraPanel.RefreshWindow', count=2, confidence=0.40, sample='_G.DetailsAuraPanel.RefreshWindow()'},
    {name='DetailsForgePanel.RefreshWindow', count=1, confidence=0.20, sample='function DetailsForgePanel.RefreshWindow()'},
    {name='DetailsCDTrackerWindow.RefreshWindow', count=1, confidence=0.20, sample='function DetailsCDTrackerWindow.RefreshWindow()'},
    {name='DetailsCustomPanel.RefreshWindow', count=1, confidence=0.20, sample='function DetailsCustomPanel.RefreshWindow()'},
    {name='DetailsMacrosPanel.RefreshWindow', count=1, confidence=0.20, sample='function DetailsMacrosPanel.RefreshWindow()'},
    {name='DetailsPlaterIntegrationPanel.RefreshWindow', count=1, confidence=0.20, sample='function DetailsPlaterIntegrationPanel.RefreshWindow()'},
    {name='DetailsRaidHistoryWindow.RefreshWindow', count=1, confidence=0.20, sample='function DetailsRaidHistoryWindow.RefreshWindow()'},
  },
  ['OpenAPI'] = {
    {name='Details.OpenAPI', count=3, confidence=0.60, sample='Details.OpenAPI()'},
  },
  ['CreateAPI2Frame'] = {
    {name='CreateAPI2Frame', count=2, confidence=0.40, sample='Details:CreateAPI2Frame()'},
  },
  ['CreateEventTrackerFrame'] = {
    {name='CreateEventTrackerFrame', count=2, confidence=0.40, sample='Details:CreateEventTrackerFrame(UIParent, "DetailsEventTracker")'},
  },
  ['UpdateEventTrackerFrame'] = {
    {name='UpdateEventTrackerFrame', count=15, confidence=1.00, sample='Details:UpdateEventTrackerFrame()'},
  },
  ['CreateCurrentDpsFrame'] = {
    {name='CreateCurrentDpsFrame', count=3, confidence=0.60, sample='Details:CreateCurrentDpsFrame(UIParent, "DetailsCurrentDpsMeter")'},
  },
  ['StartForMythicDungeon'] = {
    {name='StartForMythicDungeon', count=3, confidence=0.60, sample='_G.DetailsCurrentDpsMeter:StartForMythicDungeon()'},
  },
  ['StartForArenaMatch'] = {
    {name='StartForArenaMatch', count=6, confidence=1.00, sample='_G.DetailsCurrentDpsMeter:StartForArenaMatch()'},
  },
  ['FormatBackground'] = {
    {name='FormatBackground', count=1, confidence=0.20, sample='function Details:FormatBackground(frame) --deprecated I guess'},
  },
  ['ShowCopyValueFrame'] = {
    {name='Details.ShowCopyValueFrame', count=2, confidence=0.40, sample='function Details.ShowCopyValueFrame(textToShow)'},
  },
  ['UpdateGears'] = {
    {name='UpdateGears', count=2, confidence=0.40, sample='function Details:UpdateGears()'},
  },
  ['UpdateControl'] = {
    {name='UpdateControl', count=2, confidence=0.40, sample='Details:UpdateControl()'},
  },
  ['UpdateCombat'] = {
    {name='UpdateCombat', count=2, confidence=0.40, sample='Details:UpdateCombat()'},
  },
  ['TrackSpecsNow'] = {
    {name='TrackSpecsNow', count=2, confidence=0.40, sample='function Details:TrackSpecsNow(bTrackEverything)'},
  },
  ['SetSpecId'] = {
    {name='SetSpecId', count=44, confidence=1.00, sample='actor:SetSpecId(specSpellList[spellTable.id])'},
  },
  ['GetOverallCombat'] = {
    {name='GetOverallCombat', count=9, confidence=1.00, sample='local combatOverall = Details:GetOverallCombat()'},
  },
  ['SetWindowUpdateSpeed'] = {
    {name='SetWindowUpdateSpeed', count=11, confidence=1.00, sample='function Details:SetWindowUpdateSpeed(newInterval, bNoSave)'},
  },
  ['SetUseAnimations'] = {
    {name='SetUseAnimations', count=6, confidence=1.00, sample='function Details:SetUseAnimations(bEnableAnimations, bNoSave)'},
  },
  ['HavePerformanceProfileEnabled'] = {
    {name='HavePerformanceProfileEnabled', count=1, confidence=0.20, sample='function Details:HavePerformanceProfileEnabled()'},
  },
  ['GetPerformanceRaidType'] = {
    {name='GetPerformanceRaidType', count=2, confidence=0.40, sample='local performanceType = Details:GetPerformanceRaidType()'},
  },
  ['RegisterBackgroundTask'] = {
    {name='RegisterBackgroundTask', count=1, confidence=0.20, sample='function Details:RegisterBackgroundTask(name, func, priority, ...)'},
  },
  ['UnregisterBackgroundTask'] = {
    {name='UnregisterBackgroundTask', count=1, confidence=0.20, sample='function Details:UnregisterBackgroundTask(name)'},
  },
  ['DoBackgroundTasks'] = {
    {name='DoBackgroundTasks', count=1, confidence=0.20, sample='function Details:DoBackgroundTasks()'},
  },
  ['GetState'] = {
    {name='Details222.Parser.GetState', count=3, confidence=0.60, sample='if (Details222.Parser.GetState() == "STATE_RESTRICTED") then'},
  },
  ['HasQueuedInspec'] = {
    {name='HasQueuedInspec', count=2, confidence=0.40, sample='function ilvl_core:HasQueuedInspec(unitName)'},
  },
  ['IlvlFromNetwork'] = {
    {name='IlvlFromNetwork', count=2, confidence=0.40, sample='function Details:IlvlFromNetwork(unitName, realmName, coreVersion, unitGUID, itemLevel, talentsSelected, currentSpec)'},
  },
  ['CalcItemLevel'] = {
    {name='CalcItemLevel', count=3, confidence=0.60, sample='--/run _detalhes.ilevel:CalcItemLevel("player", UnitGUID("player"), true)'},
  },
  ['CanInspect'] = {
    {name='CanInspect', count=2, confidence=0.40, sample='if (not InCombatLockdown() and unitid and UnitPlayerControlled(unitid) and CheckInteractDistance(unitid, CONST_INSPECT_ACHIEVEMENT_DISTANCE) and CanInspect(unitid)) then'},
  },
  ['GetInspectSpecialization'] = {
    {name='GetInspectSpecialization', count=1, confidence=0.20, sample='spec = GetInspectSpecialization(unitid)'},
  },
  ['InspectTimeOut'] = {
    {name='InspectTimeOut', count=1, confidence=0.20, sample='function ilvl_core:InspectTimeOut(guid)'},
  },
  ['ReGetItemLevel'] = {
    {name='ReGetItemLevel', count=1, confidence=0.20, sample='function ilvl_core:ReGetItemLevel(t)'},
  },
  ['GetItemLevel'] = {
    {name='GetItemLevel', count=4, confidence=0.80, sample='return ilvl_core:GetItemLevel(unitid, guid, is_forced, try_number)'},
  },
  ['NotifyInspect'] = {
    {name='NotifyInspect', count=1, confidence=0.20, sample='--NotifyInspect(unitid)'},
  },
  ['QueryInspect'] = {
    {name='QueryInspect', count=2, confidence=0.40, sample='function ilvl_core:QueryInspect(unitName, callback, param1)'},
  },
  ['ClearQueryInspectQueue'] = {
    {name='ClearQueryInspectQueue', count=1, confidence=0.20, sample='function ilvl_core:ClearQueryInspectQueue()'},
  },
  ['EnterCombat'] = {
    {name='EnterCombat', count=3, confidence=0.60, sample='function ilvl_core:EnterCombat()'},
  },
  ['LeaveCombat'] = {
    {name='LeaveCombat', count=2, confidence=0.40, sample='function ilvl_core:LeaveCombat()'},
  },
  ['ZoneChanged'] = {
    {name='ZoneChanged', count=1, confidence=0.20, sample='function ilvl_core:ZoneChanged(zone_type)'},
  },
  ['IsTrackerEnabled'] = {
    {name='IsTrackerEnabled', count=2, confidence=0.40, sample='function Details.ilevel:IsTrackerEnabled()'},
  },
  ['TrackItemLevel'] = {
    {name='TrackItemLevel', count=2, confidence=0.40, sample='function Details.ilevel:TrackItemLevel(bool)'},
  },
  ['GetItemLevelFromGuid'] = {
    {name='GetItemLevelFromGuid', count=4, confidence=0.80, sample='function Details:GetItemLevelFromGuid(guid)'},
  },
  ['GetInOrder'] = {
    {name='GetInOrder', count=1, confidence=0.20, sample='function Details.ilevel:GetInOrder()'},
  },
  ['GetSpecFromSerial'] = {
    {name='GetSpecFromSerial', count=2, confidence=0.40, sample='function Details:GetSpecFromSerial(guid)'},
  },
  ['CompressData'] = {
    {name='CompressData', count=7, confidence=1.00, sample='function Details:CompressData(data, dataType)'},
  },
  ['DecompressData'] = {
    {name='DecompressData', count=5, confidence=1.00, sample='function Details:DecompressData(data, dataType)'},
  },
  ['Deserialize'] = {
    {name='Deserialize', count=13, confidence=1.00, sample='local okay, data = LibAceSerializer:Deserialize(dataSerialized)'},
  },
  ['GetOldSchoolTalentInformation'] = {
    {name='GetOldSchoolTalentInformation', count=1, confidence=0.20, sample='Details:GetOldSchoolTalentInformation()'},
    {name='Details.GetOldSchoolTalentInformation', count=1, confidence=0.20, sample='function Details.GetOldSchoolTalentInformation()'},
  },
  ['GetClassicSpecByTalentTexture'] = {
    {name='Details.GetClassicSpecByTalentTexture', count=2, confidence=0.40, sample='Details.playerClassicSpec.specs = Details.GetClassicSpecByTalentTexture(specTexture)'},
  },
  ['GetRoleFromSpec'] = {
    {name='GetRoleFromSpec', count=2, confidence=0.40, sample='local role = Details:GetRoleFromSpec(Details.playerClassicSpec.specs, UnitGUID("player"))'},
  },
  ['IsValidSpecId'] = {
    {name='Details.IsValidSpecId', count=1, confidence=0.20, sample='function Details.IsValidSpecId(specId)'},
    {name='IsValidSpecId', count=1, confidence=0.20, sample='function DF:IsValidSpecId(specId)'},
  },
  ['GetDragonflightTalentsAsHashTable'] = {
    {name='Details.GetDragonflightTalentsAsHashTable', count=1, confidence=0.20, sample='function Details.GetDragonflightTalentsAsHashTable()'},
  },
  ['GetActiveConfigID'] = {
    {name='C_ClassTalents.GetActiveConfigID', count=11, confidence=1.00, sample='local configId = C_ClassTalents.GetActiveConfigID()'},
  },
  ['GetConfigInfo'] = {
    {name='C_Traits.GetConfigInfo', count=9, confidence=1.00, sample='local configInfo = C_Traits.GetConfigInfo(configId)'},
  },
  ['GetTreeNodes'] = {
    {name='C_Traits.GetTreeNodes', count=7, confidence=1.00, sample='local treeNodes = C_Traits.GetTreeNodes(treeId)'},
  },
  ['GetNodeInfo'] = {
    {name='C_Traits.GetNodeInfo', count=7, confidence=1.00, sample='local traitNodeInfo = C_Traits.GetNodeInfo(configId, treeNodeID)'},
  },
  ['GetDefinitionInfo'] = {
    {name='C_Traits.GetDefinitionInfo', count=6, confidence=1.00, sample='local traitDefinitionInfo = C_Traits.GetDefinitionInfo(definitionId)'},
  },
  ['GenerateSpecSpellList'] = {
    {name='Details.GenerateSpecSpellList', count=3, confidence=0.60, sample='--called from inside the function Details.GenerateSpecSpellList()'},
  },
  ['GetNumSpellTabs'] = {
    {name='GetNumSpellTabs', count=8, confidence=1.00, sample='for i = 1, GetNumSpellTabs() do'},
  },
  ['GetSpellTabInfo'] = {
    {name='GetSpellTabInfo', count=18, confidence=1.00, sample='local tabName, tabTexture, offset, numSpells, isGuild, offspecId = GetSpellTabInfo(i)'},
  },
  ['GetSpellBookItemInfo'] = {
    {name='GetSpellBookItemInfo', count=16, confidence=1.00, sample='local spellType, spellId = GetSpellBookItemInfo(entryOffset, "player")'},
    {name='C_SpellBook.GetSpellBookItemInfo', count=3, confidence=0.60, sample='local GetSpellBookItemInfo = GetSpellBookItemInfo or function(...) local si = C_SpellBook.GetSpellBookItemInfo(...) if si then return SpellBookItemTypeMap[si.itemType] or "NONE", (si.itemType == Enum.SpellBookItemType.Flyout or si.itemType == Enum.SpellBookItemType.PetAction) and si.actionID or si.spellID or si.actionID, si end end'},
  },
  ['GetOverrideSpell'] = {
    {name='C_SpellBook.GetOverrideSpell', count=3, confidence=0.60, sample='spellId = C_SpellBook.GetOverrideSpell(spellId)'},
    {name='GetOverrideSpell', count=16, confidence=1.00, sample='spellId = GetOverrideSpell(spellId)'},
    {name='C_Spell.GetOverrideSpell', count=1, confidence=0.20, sample='spellId = C_Spell.GetOverrideSpell(spellId)'},
  },
  ['IsPassiveSpell'] = {
    {name='IsPassiveSpell', count=19, confidence=1.00, sample='local isPassive = IsPassiveSpell(entryOffset, "player")'},
  },
  ['GetNumSpecializationsForClassID'] = {
    {name='C_SpecializationInfo.GetNumSpecializationsForClassID', count=1, confidence=0.20, sample='local amountSpecs = C_SpecializationInfo.GetNumSpecializationsForClassID(classId)'},
  },
  ['SetSpecialization'] = {
    {name='SetSpecialization', count=4, confidence=0.80, sample='DetailsFramework.Schedules.NewTimer(0, function() SetSpecialization(1) end)'},
  },
  ['GenerateRacialSpellList'] = {
    {name='Details.GenerateRacialSpellList', count=4, confidence=0.80, sample='function Details.GenerateRacialSpellList()'},
  },
  ['GetSpellSubtext'] = {
    {name='GetSpellSubtext', count=1, confidence=0.20, sample='local subSpellName = spell:GetSpellSubtext()'},
  },
  ['GetSpellBaseCooldown'] = {
    {name='GetSpellBaseCooldown', count=4, confidence=0.80, sample='local cooldownTime = floor(GetSpellBaseCooldown(spellId) / 1000)'},
  },
  ['FillTableWithPlayerSpells'] = {
    {name='Details.FillTableWithPlayerSpells', count=2, confidence=0.40, sample='function Details.FillTableWithPlayerSpells(completeListOfSpells)'},
  },
  ['GetSpellBookSkillLineInfo'] = {
    {name='C_SpellBook.GetSpellBookSkillLineInfo', count=5, confidence=1.00, sample='local skillLine = C_SpellBook.GetSpellBookSkillLineInfo(tabLine)'},
  },
  ['HasPetSpells'] = {
    {name='HasPetSpells', count=4, confidence=0.80, sample='return HasPetSpells()'},
  },
  ['GetSpellBookItemName'] = {
    {name='GetSpellBookItemName', count=4, confidence=0.80, sample='local spellName, _, unmaskedSpellId = GetSpellBookItemName(i, spellBookPetEnum)'},
  },
  ['GetPlayTimeOnClass'] = {
    {name='Details.GetPlayTimeOnClass', count=3, confidence=0.60, sample='function Details.GetPlayTimeOnClass()'},
  },
  ['GetPlayTimeOnClassString'] = {
    {name='Details.GetPlayTimeOnClassString', count=3, confidence=0.60, sample='function Details.GetPlayTimeOnClassString()'},
  },
  ['UpdateAddOnMemoryUsage_Original'] = {
    {name='UpdateAddOnMemoryUsage_Original', count=1, confidence=0.20, sample='UpdateAddOnMemoryUsage_Original()'},
  },
  ['HandleRogueCombatSpecIconByGameVersion'] = {
    {name='HandleRogueCombatSpecIconByGameVersion', count=2, confidence=0.40, sample='function Details:HandleRogueCombatSpecIconByGameVersion()'},
  },
  ['CopyText'] = {
    {name='CopyText', count=1, confidence=0.20, sample='function CopyText(text) --[[GLOBAL]]'},
  },
  ['NewPluginToolbarButton'] = {
    {name='NewPluginToolbarButton', count=1, confidence=0.20, sample='function _detalhes.ToolBar:NewPluginToolbarButton (func, icon, pluginname, tooltip, w, h, framename, menu_function)'},
  },
  ['ShowToolbarIcon'] = {
    {name='ShowToolbarIcon', count=1, confidence=0.20, sample='function _detalhes:ShowToolbarIcon (Button, Effect)'},
  },
  ['ToolbarMenuButtons'] = {
    {name='ToolbarMenuButtons', count=6, confidence=1.00, sample='instance:ToolbarMenuButtons()'},
  },
  ['HideToolbarIcon'] = {
    {name='HideToolbarIcon', count=1, confidence=0.20, sample='function _detalhes:HideToolbarIcon (Button)'},
  },
  ['SetFontColor'] = {
    {name='SetFontColor', count=107, confidence=1.00, sample='_detalhes:SetFontColor(desc, "white")'},
  },
  ['DetailsToolbarButtonOnEnter'] = {
    {name='DetailsToolbarButtonOnEnter', count=1, confidence=0.20, sample='--[[global]] function DetailsToolbarButtonOnEnter (button)'},
  },
  ['OnEnterMainWindow'] = {
    {name='OnEnterMainWindow', count=17, confidence=1.00, sample='_detalhes.OnEnterMainWindow(_detalhes:GetInstance(lower_instance), button, 3)'},
    {name='Details.OnEnterMainWindow', count=2, confidence=0.40, sample='Details.OnEnterMainWindow(instance)'},
  },
  ['QuickDispatch'] = {
    {name='QuickDispatch', count=35, confidence=1.00, sample='_detalhes.gump:QuickDispatch(button.menu)'},
  },
  ['GetPlugin'] = {
    {name='GetPlugin', count=29, confidence=1.00, sample='local plugin_object = _detalhes:GetPlugin (button.__name)'},
  },
  ['GetPluginDescription'] = {
    {name='GetPluginDescription', count=3, confidence=0.60, sample='f.desc:SetText(plugin_object:GetPluginDescription())'},
  },
  ['SetFontFace'] = {
    {name='SetFontFace', count=44, confidence=1.00, sample='_detalhes:SetFontFace (f.desc, _detalhes.font_faces.menus)'},
  },
  ['Fetch'] = {
    {name='Fetch', count=43, confidence=1.00, sample='--SharedMedia:Fetch ("font", "Friz Quadrata TT")'},
  },
  ['DetailsToolbarButtonOnLeave'] = {
    {name='DetailsToolbarButtonOnLeave', count=1, confidence=0.20, sample='--[[global]] function DetailsToolbarButtonOnLeave (button)'},
  },
  ['OnLeaveMainWindow'] = {
    {name='OnLeaveMainWindow', count=15, confidence=1.00, sample='_detalhes.OnLeaveMainWindow(_detalhes:GetInstance(lower_instance), button, 3)'},
    {name='Details.OnLeaveMainWindow', count=1, confidence=0.20, sample='Details.OnLeaveMainWindow(frame.child.instance)'},
  },
  ['OnInstanceOpen'] = {
    {name='OnInstanceOpen', count=1, confidence=0.20, sample='function _detalhes.ToolBar:OnInstanceOpen()'},
  },
  ['OnInstanceClose'] = {
    {name='OnInstanceClose', count=1, confidence=0.20, sample='function _detalhes.ToolBar:OnInstanceClose()'},
  },
  ['IsAtiva'] = {
    {name='IsAtiva', count=12, confidence=1.00, sample='if (instancia.baseframe and instancia:IsAtiva()) then'},
  },
  ['IsTBCWow'] = {
    {name='DetailsFramework.IsTBCWow', count=3, confidence=0.60, sample='elseif (DetailsFramework.IsTBCWow()) then --burning crusade'},
    {name='DF.IsTBCWow', count=1, confidence=0.20, sample='function DF.IsTBCWow()'},
  },
  ['IsWarlordsWow'] = {
    {name='DetailsFramework.IsWarlordsWow', count=1, confidence=0.20, sample='elseif (DetailsFramework.IsWarlordsWow()) then'},
    {name='DF.IsWarlordsWow', count=1, confidence=0.20, sample='function DF.IsWarlordsWow()'},
  },
  ['IsLegionWow'] = {
    {name='DetailsFramework.IsLegionWow', count=1, confidence=0.20, sample='elseif (DetailsFramework.IsLegionWow()) then'},
    {name='DF.IsLegionWow', count=1, confidence=0.20, sample='function DF.IsLegionWow()'},
  },
  ['IsBFAWow'] = {
    {name='DetailsFramework.IsBFAWow', count=1, confidence=0.20, sample='elseif (DetailsFramework.IsBFAWow()) then'},
    {name='DF.IsBFAWow', count=1, confidence=0.20, sample='function DF.IsBFAWow()'},
  },
  ['IsShadowlandsWow'] = {
    {name='DetailsFramework.IsShadowlandsWow', count=2, confidence=0.40, sample='elseif (DetailsFramework.IsShadowlandsWow()) then'},
    {name='DF.IsShadowlandsWow', count=2, confidence=0.40, sample='function DF.IsShadowlandsWow()'},
  },
  ['GetDragonlightTalentString'] = {
    {name='GetDragonlightTalentString', count=3, confidence=0.60, sample='talentsAsString = detailsFramework:GetDragonlightTalentString()'},
  },
  ['ItemLevel_Received'] = {
    {name='ItemLevel_Received', count=1, confidence=0.20, sample='function Details.network.ItemLevel_Received(player, realm, coreVersion, serial, itemlevel, talents, spec)'},
  },
  ['HighFive_Request'] = {
    {name='HighFive_Request', count=1, confidence=0.20, sample='function Details.network.HighFive_Request()'},
  },
  ['HighFive_DataReceived'] = {
    {name='HighFive_DataReceived', count=1, confidence=0.20, sample='function Details.network.HighFive_DataReceived(player, realm, coreVersion, userVersion)'},
  },
  ['Update_VersionReceived'] = {
    {name='Update_VersionReceived', count=1, confidence=0.20, sample='function Details.network.Update_VersionReceived(player, realm, coreVersion, buildNumber)'},
  },
  ['Cloud_Request'] = {
    {name='Cloud_Request', count=1, confidence=0.20, sample='function Details.network.Cloud_Request(player, realm, coreVersion, ...)'},
  },
  ['Cloud_Found'] = {
    {name='Cloud_Found', count=1, confidence=0.20, sample='function Details.network.Cloud_Found(player, realm, coreVersion, ...)'},
  },
  ['Cloud_DataRequest'] = {
    {name='Cloud_DataRequest', count=1, confidence=0.20, sample='function Details.network.Cloud_DataRequest(player, realm, coreVersion, ...)'},
  },
  ['Cloud_DataReceived'] = {
    {name='Cloud_DataReceived', count=1, confidence=0.20, sample='function Details.network.Cloud_DataReceived(player, realm, coreVersion, ...)'},
  },
  ['Cloud_Equalize'] = {
    {name='Cloud_Equalize', count=1, confidence=0.20, sample='function Details.network.Cloud_Equalize(player, realm, coreVersion, data)'},
  },
  ['Wipe_Call'] = {
    {name='Wipe_Call', count=1, confidence=0.20, sample='function Details.network.Wipe_Call(player, realm, coreVersion, ...)'},
  },
  ['Cloud_SharedData'] = {
    {name='Cloud_SharedData', count=1, confidence=0.20, sample='function Details.network.Cloud_SharedData(player, realm, coreVersion, data)'},
  },
  ['TBCData'] = {
    {name='TBCData', count=1, confidence=0.20, sample='function Details.network.TBCData(player, realm, coreVersion, data)'},
  },
  ['Response'] = {
    {name='Response', count=2, confidence=0.40, sample='--"CIER" Coach Is Enabled Response (server > client)'},
  },
  ['Coach'] = {
    {name='Coach', count=1, confidence=0.20, sample='function Details.network.Coach(player, realm, coreVersion, msgType, data)'},
  },
  ['CoachIsEnabled_Answer'] = {
    {name='Details.Coach.Server.CoachIsEnabled_Answer', count=2, confidence=0.40, sample='Details.Coach.Server.CoachIsEnabled_Answer(sourcePlayer)'},
  },
  ['CoachIsEnabled_Response'] = {
    {name='Details.Coach.Client.CoachIsEnabled_Response', count=2, confidence=0.40, sample='Details.Coach.Client.CoachIsEnabled_Response(isEnabled, sourcePlayer)'},
  },
  ['CombatStarted'] = {
    {name='Details.Coach.Server.CombatStarted', count=2, confidence=0.40, sample='Details.Coach.Server.CombatStarted()'},
  },
  ['CombatEnded'] = {
    {name='Details.Coach.Server.CombatEnded', count=2, confidence=0.40, sample='Details.Coach.Server.CombatEnded()'},
  },
  ['EnableCoach'] = {
    {name='Details.Coach.Client.EnableCoach', count=3, confidence=0.60, sample='Details.Coach.Client.EnableCoach(sourcePlayer)'},
    {name='Details.Coach.Server.EnableCoach', count=3, confidence=0.60, sample='Details.Coach.Server.EnableCoach(true)'},
  },
  ['CoachEnd'] = {
    {name='Details.Coach.Client.CoachEnd', count=3, confidence=0.60, sample='Details.Coach.Client.CoachEnd()'},
  },
  ['Data'] = {
    {name='Data', count=1, confidence=0.20, sample='elseif (msgType == "CDT") then --Coach Data (a player in the raid sent to raid leader combat data)'},
  },
  ['DeployPackedCombatData'] = {
    {name='DeployPackedCombatData', count=7, confidence=1.00, sample='Details.packFunctions.DeployPackedCombatData(data)'},
  },
  ['AddPlayerDeath'] = {
    {name='Details.Coach.Server.AddPlayerDeath', count=2, confidence=0.40, sample='Details.Coach.Server.AddPlayerDeath(sourcePlayer, data)'},
  },
  ['GuildSync'] = {
    {name='GuildSync', count=1, confidence=0.20, sample='function Details.network.GuildSync(sourceName, realm, coreVersion, type, data)'},
  },
  ['GetIDsToGuildSync'] = {
    {name='GetIDsToGuildSync', count=2, confidence=0.40, sample='local IDs = Details222.storage.GetIDsToGuildSync()'},
  },
  ['CheckMissingIDsToGuildSync'] = {
    {name='CheckMissingIDsToGuildSync', count=2, confidence=0.40, sample='local missingIds = Details222.storage.CheckMissingIDsToGuildSync(data)'},
  },
  ['BuildEncounterDataToGuildSync'] = {
    {name='BuildEncounterDataToGuildSync', count=2, confidence=0.40, sample='local encounterData = Details222.storage.BuildEncounterDataToGuildSync(data)'},
  },
  ['AddGuildSyncData'] = {
    {name='AddGuildSyncData', count=2, confidence=0.40, sample='Details222.storage.AddGuildSyncData(data, player)'},
  },
  ['ReceivedEnemyPlayer'] = {
    {name='ReceivedEnemyPlayer', count=1, confidence=0.20, sample='function Details.network.ReceivedEnemyPlayer(player, realm, coreVersion, data)'},
  },
  ['CommReceived'] = {
    {name='CommReceived', count=1, confidence=0.20, sample='function Details:CommReceived(commPrefix, data, channel, source)'},
  },
  ['RegisterPluginComm'] = {
    {name='RegisterPluginComm', count=1, confidence=0.20, sample='function Details:RegisterPluginComm(prefix, func)'},
  },
  ['UnregisterPluginComm'] = {
    {name='UnregisterPluginComm', count=1, confidence=0.20, sample='function Details:UnregisterPluginComm(prefix)'},
  },
  ['GetChannelId'] = {
    {name='GetChannelId', count=1, confidence=0.20, sample='function Details:GetChannelId(channel)'},
  },
  ['CHAT_MSG_CHANNEL'] = {
    {name='CHAT_MSG_CHANNEL', count=1, confidence=0.20, sample='function Details.parser_functions:CHAT_MSG_CHANNEL(...)'},
  },
  ['SendPluginCommMessage'] = {
    {name='SendPluginCommMessage', count=1, confidence=0.20, sample='function Details:SendPluginCommMessage(prefix, channel, ...)'},
  },
  ['SendRaidDataAs'] = {
    {name='SendRaidDataAs', count=1, confidence=0.20, sample='function Details:SendRaidDataAs(type, player, realm, ...)'},
  },
  ['SendRaidOrPartyData'] = {
    {name='SendRaidOrPartyData', count=1, confidence=0.20, sample='function Details:SendRaidOrPartyData(type, ...)'},
  },
  ['SendGuildData'] = {
    {name='SendGuildData', count=3, confidence=0.60, sample='function Details:SendGuildData(type, ...)'},
  },
  ['SendCloudRequest'] = {
    {name='SendCloudRequest', count=1, confidence=0.20, sample='function Details:SendCloudRequest()'},
  },
  ['ScheduleSendCloudRequest'] = {
    {name='ScheduleSendCloudRequest', count=1, confidence=0.20, sample='function Details:ScheduleSendCloudRequest()'},
  },
  ['RequestCloudData'] = {
    {name='RequestCloudData', count=1, confidence=0.20, sample='function Details:RequestCloudData()'},
  },
  ['CheckForOneHourBuffs'] = {
    {name='AuraScan.CheckForOneHourBuffs', count=1, confidence=0.20, sample='function AuraScan.CheckForOneHourBuffs()'},
    {name='Details222.AuraScan.CheckForOneHourBuffs', count=1, confidence=0.20, sample='Details222.AuraScan.CheckForOneHourBuffs()'},
  },
  ['ListSpells'] = {
    {name='ListSpells', count=17, confidence=1.00, sample='for spellId, spellTable in buffUptimeContainer:ListSpells() do'},
  },
  ['UnregisterCallback'] = {
    {name='AuraScan.UnregisterCallback', count=1, confidence=0.20, sample='function AuraScan.UnregisterCallback(callback)'},
    {name='UnregisterCallback', count=7, confidence=1.00, sample='openRaidLib.UnregisterCallback(DetailsKeystoneInfoFrame, "KeystoneUpdate", "OnKeystoneUpdate")'},
    {name='DF.Language.UnregisterCallback', count=1, confidence=0.20, sample='function DF.Language.UnregisterCallback(addonId, callback)'},
  },
  ['GetOrCreateUnitAuraTable'] = {
    {name='AuraScan.GetOrCreateUnitAuraTable', count=9, confidence=1.00, sample='function AuraScan.GetOrCreateUnitAuraTable(unitGUID)'},
  },
  ['WipeAllUnitAuraTables'] = {
    {name='AuraScan.WipeAllUnitAuraTables', count=2, confidence=0.40, sample='function AuraScan.WipeAllUnitAuraTables()'},
  },
  ['WipeUnitAuraTable'] = {
    {name='AuraScan.WipeUnitAuraTable', count=2, confidence=0.40, sample='function AuraScan.WipeUnitAuraTable(unitGUID)'},
  },
  ['GetAura'] = {
    {name='AuraScan.GetAura', count=1, confidence=0.20, sample='function AuraScan.GetAura(unitGUID, spellId)'},
  },
  ['AddAura'] = {
    {name='AuraScan.AddAura', count=3, confidence=0.60, sample='function AuraScan.AddAura(spellId, bAddToTimeLine)'},
    {name='Details.AuraTracker.AddAura', count=1, confidence=0.20, sample='function Details.AuraTracker.AddAura(auraType, spellid)'},
  },
  ['IsAuraAdded'] = {
    {name='AuraScan.IsAuraAdded', count=3, confidence=0.60, sample='function AuraScan.IsAuraAdded(spellId)'},
  },
  ['RemoveAura'] = {
    {name='AuraScan.RemoveAura', count=2, confidence=0.40, sample='function AuraScan.RemoveAura(spellId)'},
  },
  ['RemoveAllAuras'] = {
    {name='AuraScan.RemoveAllAuras', count=1, confidence=0.20, sample='function AuraScan.RemoveAllAuras()'},
  },
  ['ForEachAura'] = {
    {name='AuraUtil.ForEachAura', count=7, confidence=1.00, sample='AuraUtil.ForEachAura(unitId, "HELPFUL", maxCount, fAddAura, bUsePackedAura)'},
  },
  ['SetCooltipForPlugins'] = {
    {name='SetCooltipForPlugins', count=1, confidence=0.20, sample='function Details:SetCooltipForPlugins()'},
  },
  ['Preset'] = {
    {name='Preset', count=28, confidence=1.00, sample='gameCooltip:Preset(2)'},
  },
  ['SetTooltipMinWidth'] = {
    {name='SetTooltipMinWidth', count=7, confidence=1.00, sample='Details:SetTooltipMinWidth()'},
  },
  ['GetPluginSavedTable'] = {
    {name='GetPluginSavedTable', count=7, confidence=1.00, sample='function Details:GetPluginSavedTable(pluginAbsoluteName)'},
  },
  ['UpdatePluginBarsConfig'] = {
    {name='UpdatePluginBarsConfig', count=1, confidence=0.20, sample='function Details:UpdatePluginBarsConfig()'},
  },
  ['SetBarGrowDirection'] = {
    {name='SetBarGrowDirection', count=7, confidence=1.00, sample='self:SetBarGrowDirection()'},
  },
  ['AttachToInstance'] = {
    {name='AttachToInstance', count=1, confidence=0.20, sample='function Details:AttachToInstance()'},
  },
  ['IsPluginEnabled'] = {
    {name='IsPluginEnabled', count=1, confidence=0.20, sample='function Details:IsPluginEnabled(pluginAbsoluteName)'},
  },
  ['SetPluginDescription'] = {
    {name='SetPluginDescription', count=1, confidence=0.20, sample='function Details:SetPluginDescription(desc)'},
  },
  ['DisablePlugin'] = {
    {name='DisablePlugin', count=1, confidence=0.20, sample='function Details:DisablePlugin(pluginAbsoluteName)'},
  },
  ['DelayOptionsRefresh'] = {
    {name='DelayOptionsRefresh', count=11, confidence=1.00, sample='Details:DelayOptionsRefresh()'},
  },
  ['CheckDefaultTable'] = {
    {name='CheckDefaultTable', count=3, confidence=0.60, sample='function Details:CheckDefaultTable(savedTable, defaultSavedTable)'},
  },
  ['InstallPlugin'] = {
    {name='InstallPlugin', count=12, confidence=1.00, sample='function Details:InstallPlugin(pluginType, pluginName, pluginIcon, pluginObject, pluginAbsoluteName, minVersion, authorName, version, defaultSavedTable)'},
  },
  ['NewError'] = {
    {name='NewError', count=8, confidence=1.00, sample='return Details:NewError("Details version is out of date.")'},
  },
  ['OpenOptionsForChild'] = {
    {name='OpenOptionsForChild', count=2, confidence=0.40, sample='Details.StatusBar:OpenOptionsForChild(self)'},
  },
  ['OnDetailsEvent'] = {
    {name='OnDetailsEvent', count=14, confidence=1.00, sample='print("function PluginObject:OnDetailsEvent(event, ...) end")'},
    {name='DetailsMythicPlusFrame.EventListener.OnDetailsEvent', count=1, confidence=0.20, sample='function DetailsMythicPlusFrame.EventListener.OnDetailsEvent(contextObject, event, ...)'},
  },
  ['NewPluginObject'] = {
    {name='NewPluginObject', count=11, confidence=1.00, sample='function Details:NewPluginObject(frameName, pluginFlag, pluginType)'},
  },
  ['CreatePluginOptionsFrame'] = {
    {name='CreatePluginOptionsFrame', count=1, confidence=0.20, sample='function Details:CreatePluginOptionsFrame(name, title, template,  pluginIcon, pluginIconCoords)'},
  },
  ['AddRoundedCornersToFrame'] = {
    {name='AddRoundedCornersToFrame', count=36, confidence=1.00, sample='detailsFramework:AddRoundedCornersToFrame(optionsFrame, Details.PlayerBreakdown.RoundedCornerPreset)'},
  },
  ['RegisterFrameToColor'] = {
    {name='RegisterFrameToColor', count=3, confidence=0.60, sample='Details:RegisterFrameToColor(optionsFrame)'},
  },
  ['CreateCloseButton'] = {
    {name='CreateCloseButton', count=10, confidence=1.00, sample='local closeButton = detailsFramework:CreateCloseButton(optionsFrame)'},
  },
  ['CreateTitleBar'] = {
    {name='CreateTitleBar', count=18, confidence=1.00, sample='detailsFramework:CreateTitleBar(optionsFrame, title)'},
  },
  ['CreateRightClickToCloseLabel'] = {
    {name='CreateRightClickToCloseLabel', count=3, confidence=0.60, sample='function Details:CreateRightClickToCloseLabel(parent)'},
  },
  ['CreateAtlasString'] = {
    {name='CreateAtlasString', count=5, confidence=1.00, sample='local mouseIcon = detailsFramework:CreateAtlasString(Details:GetTextureAtlas("right-mouse-click"), 12, 9)'},
  },
  ['RegisterConfig'] = {
    {name='LibWindow.RegisterConfig', count=24, confidence=1.00, sample='LibWindow.RegisterConfig(pluginContainerFrame, Details.plugin_window_pos)'},
    {name='RegisterConfig', count=4, confidence=0.80, sample='libWindow.RegisterConfig(anchorFrame, Details.ocd_tracker.frames["anchor_frame"])'},
  },
  ['RestorePosition'] = {
    {name='LibWindow.RestorePosition', count=24, confidence=1.00, sample='LibWindow.RestorePosition(pluginContainerFrame)'},
    {name='RestorePosition', count=4, confidence=0.80, sample='libWindow.RestorePosition(anchorFrame)'},
  },
  ['MakeDraggable'] = {
    {name='LibWindow.MakeDraggable', count=22, confidence=1.00, sample='LibWindow.MakeDraggable(pluginContainerFrame)'},
    {name='MakeDraggable', count=4, confidence=0.80, sample='libWindow.MakeDraggable(anchorFrame)'},
  },
  ['CreateScaleBar'] = {
    {name='CreateScaleBar', count=13, confidence=1.00, sample='local scaleBar = DetailsFramework:CreateScaleBar(pluginContainerFrame, Details.options_window, true)'},
  },
  ['BuildStatusbarAuthorInfo'] = {
    {name='BuildStatusbarAuthorInfo', count=3, confidence=0.60, sample='DetailsFramework:BuildStatusbarAuthorInfo(statusBar)'},
  },
  ['ClosePlugin'] = {
    {name='ClosePlugin', count=2, confidence=0.40, sample='pluginContainerFrame.ClosePlugin()'},
    {name='DetailsPluginContainerWindow.ClosePlugin', count=1, confidence=0.20, sample='DetailsPluginContainerWindow.ClosePlugin()'},
  },
  ['IsPluginShown'] = {
    {name='Details222.BreakdownWindow.IsPluginShown', count=2, confidence=0.40, sample='local bIsShowingAPlugin = Details222.BreakdownWindow.IsPluginShown()'},
  },
  ['GetShownPluginObject'] = {
    {name='GetShownPluginObject', count=2, confidence=0.40, sample='local pluginShownInBreakdownWindow = breakdownWindowFrame.GetShownPluginObject()'},
  },
  ['SetTemplate'] = {
    {name='SetTemplate', count=213, confidence=1.00, sample='button:SetTemplate(detailsFramework:GetTemplate("button", "DETAILS_PLUGINPANEL_BUTTONSELECTED_TEMPLATE"))'},
  },
  ['OnMenuClick'] = {
    {name='OnMenuClick', count=2, confidence=0.40, sample='function pluginContainerFrame.OnMenuClick(_, _, pluginAbsoluteName, callRefresh)'},
    {name='DetailsPluginContainerWindow.OnMenuClick', count=1, confidence=0.20, sample='DetailsPluginContainerWindow.OnMenuClick (nil, nil, "DETAILS_PLUGIN_DEATH_GRAPHICS", true)'},
  },
  ['RefreshFrame'] = {
    {name='RefreshFrame', count=4, confidence=0.80, sample='pluginContainerFrame.RefreshFrame(pluginObject.__var_Frame)'},
  },
  ['CreatePluginMenuButton'] = {
    {name='CreatePluginMenuButton', count=2, confidence=0.40, sample='function Details:CreatePluginMenuButton(pluginObject, bIsUtility, parent, onClickFunc, width, height)'},
  },
  ['ShowPluginOnBreakdown'] = {
    {name='ShowPluginOnBreakdown', count=5, confidence=1.00, sample='breakdownWindowFrame.ShowPluginOnBreakdown(pluginObject)'},
  },
  ['DisableRaidMode'] = {
    {name='DisableRaidMode', count=4, confidence=0.80, sample='function _detalhes.RaidTables:DisableRaidMode (instance)'},
  },
  ['SetInUse'] = {
    {name='SetInUse', count=6, confidence=1.00, sample='self:SetInUse (instance.current_raid_plugin, nil)'},
  },
  ['RaidPluginInstalled'] = {
    {name='RaidPluginInstalled', count=1, confidence=0.20, sample='function _detalhes:RaidPluginInstalled (plugin_name)'},
  },
  ['IsAvailable'] = {
    {name='IsAvailable', count=4, confidence=0.80, sample='if (self:IsAvailable (last_plugin_used, instance)) then'},
  },
  ['GetAvailablePlugins'] = {
    {name='GetAvailablePlugins', count=8, confidence=1.00, sample='local available = self:GetAvailablePlugins()'},
  },
  ['ExecFunc'] = {
    {name='ExecFunc', count=9, confidence=1.00, sample='GameCooltip:ExecFunc (instance.baseframe.cabecalho.atributo)'},
  },
  ['SendMsgToChannel'] = {
    {name='SendMsgToChannel', count=9, confidence=1.00, sample='function _detalhes:SendMsgToChannel (msg, channel, towho)'},
  },
  ['BNSendWhisper'] = {
    {name='BNSendWhisper', count=3, confidence=0.60, sample='BNSendWhisper (towho, msg)'},
  },
  ['BNGetNumFriends'] = {
    {name='BNGetNumFriends', count=3, confidence=0.60, sample='--local BnetFriends = BNGetNumFriends()'},
  },
  ['BNGetFriendInfo'] = {
    {name='BNGetFriendInfo', count=1, confidence=0.20, sample='--	local presenceID, presenceName, battleTag, isBattleTagPresence, toonName, toonID, client, isOnline, lastOnline, isAFK, isDND, messageText, noteText, isRIDFriend, broadcastTime, canSoR = BNGetFriendInfo (i)'},
  },
  ['GetChannelName'] = {
    {name='GetChannelName', count=2, confidence=0.40, sample='SendChatMessage (msg, channel, nil, GetChannelName (towho))'},
  },
  ['GetSpellLink'] = {
    {name='GetSpellLink', count=24, confidence=1.00, sample='spellname = GetSpellLink(extraSpellID)'},
  },
  ['GetUnitClass'] = {
    {name='GetUnitClass', count=10, confidence=1.00, sample='local class = Details:GetUnitClass(who_name)'},
  },
  ['EnableInterruptAnnouncer'] = {
    {name='EnableInterruptAnnouncer', count=2, confidence=0.40, sample='function _detalhes:EnableInterruptAnnouncer()'},
  },
  ['DisableInterruptAnnouncer'] = {
    {name='DisableInterruptAnnouncer', count=2, confidence=0.40, sample='function _detalhes:DisableInterruptAnnouncer()'},
  },
  ['UnInstallHook'] = {
    {name='UnInstallHook', count=4, confidence=0.80, sample='_detalhes:UnInstallHook (DETAILS_HOOK_INTERRUPT, _detalhes.interrupt_announcer)'},
  },
  ['EnableCooldownAnnouncer'] = {
    {name='EnableCooldownAnnouncer', count=2, confidence=0.40, sample='function _detalhes:EnableCooldownAnnouncer()'},
  },
  ['DisableCooldownAnnouncer'] = {
    {name='DisableCooldownAnnouncer', count=2, confidence=0.40, sample='function _detalhes:DisableCooldownAnnouncer()'},
  },
  ['EnableDeathAnnouncer'] = {
    {name='EnableDeathAnnouncer', count=2, confidence=0.40, sample='function _detalhes:EnableDeathAnnouncer()'},
  },
  ['DisableDeathAnnouncer'] = {
    {name='DisableDeathAnnouncer', count=2, confidence=0.40, sample='function _detalhes:DisableDeathAnnouncer()'},
  },
  ['SetOrGetPauseState'] = {
    {name='Details222.TimeMachine.SetOrGetPauseState', count=6, confidence=1.00, sample='Details222.TimeMachine.SetOrGetPauseState(actorObject, false)'},
  },
  ['Ticker'] = {
    {name='Details222.TimeMachine.Ticker', count=1, confidence=0.20, sample='function Details222.TimeMachine.Ticker()'},
  },
  ['AddActor'] = {
    {name='Details222.TimeMachine.AddActor', count=4, confidence=0.80, sample='Details222.TimeMachine.AddActor(actorObject)'},
  },
  ['Restart'] = {
    {name='Details222.TimeMachine.Restart', count=2, confidence=0.40, sample='function Details222.TimeMachine.Restart()'},
  },
  ['StopTime'] = {
    {name='Details222.TimeMachine.StopTime', count=3, confidence=0.60, sample='function Details222.TimeMachine.StopTime(actorObject)'},
  },
  ['LockDisplays'] = {
    {name='LockDisplays', count=3, confidence=0.60, sample='function Details.StatusBar:LockDisplays(instance, locked)'},
  },
  ['CreateStatusBarChildForInstance'] = {
    {name='CreateStatusBarChildForInstance', count=8, confidence=1.00, sample='function Details.StatusBar:CreateStatusBarChildForInstance(instance, pluginName)'},
  },
  ['CreateChildObject'] = {
    {name='CreateChildObject', count=11, confidence=1.00, sample='local newChild = PluginObject:CreateChildObject(instance)'},
  },
  ['SetCenterPlugin'] = {
    {name='SetCenterPlugin', count=4, confidence=0.80, sample='function Details.StatusBar:SetCenterPlugin(instance, childObject, fromStartup)'},
  },
  ['SetLeftPlugin'] = {
    {name='SetLeftPlugin', count=4, confidence=0.80, sample='function Details.StatusBar:SetLeftPlugin(instance, childObject, fromStartup)'},
  },
  ['SetRightPlugin'] = {
    {name='SetRightPlugin', count=4, confidence=0.80, sample='function Details.StatusBar:SetRightPlugin(instance, childObject, fromStartup)'},
  },
  ['ReloadAnchors'] = {
    {name='ReloadAnchors', count=6, confidence=1.00, sample='function Details.StatusBar:ReloadAnchors(instance)'},
  },
  ['ApplyOptions'] = {
    {name='ApplyOptions', count=84, confidence=1.00, sample='Details.StatusBar:ApplyOptions(childObject, "hidden", true)'},
  },
  ['UpdateOptions'] = {
    {name='UpdateOptions', count=3, confidence=0.60, sample='Details.StatusBar:UpdateOptions(instance)'},
  },
  ['SetPlugin'] = {
    {name='SetPlugin', count=10, confidence=1.00, sample='function Details.StatusBar:SetPlugin(instance, absoluteName, anchor)'},
  },
  ['ChoosePlugin'] = {
    {name='ChoosePlugin', count=5, confidence=1.00, sample='ChoosePlugin(nil, nil, -1, instance.StatusBar[anchor], anchor)'},
  },
  ['GetIndexFromAbsoluteName'] = {
    {name='GetIndexFromAbsoluteName', count=5, confidence=1.00, sample='local index = Details.StatusBar:GetIndexFromAbsoluteName(absoluteName)'},
  },
  ['AddFromTable'] = {
    {name='AddFromTable', count=5, confidence=1.00, sample='GameCooltip:AddFromTable(onEnterCooltipTexts)'},
  },
  ['SetLastSelected'] = {
    {name='SetLastSelected', count=18, confidence=1.00, sample='GameCooltip:SetLastSelected(1, currentIndex)'},
  },
  ['UpdateChilds'] = {
    {name='UpdateChilds', count=3, confidence=0.60, sample='function Details.StatusBar:UpdateChilds(instance)'},
  },
  ['CreateChildFrame'] = {
    {name='CreateChildFrame', count=11, confidence=1.00, sample='function Details.StatusBar:CreateChildFrame(instance, frameName, width, height)'},
  },
  ['GetInstanceId'] = {
    {name='GetInstanceId', count=15, confidence=1.00, sample='--local frame = _detalhes.gump:NewPanel(instance.baseframe.cabecalho.fechar, nil, name..instance:GetInstanceId(), nil, w or DEFAULT_CHILD_WIDTH, h or DEFAULT_CHILD_HEIGHT, false)'},
  },
  ['CreateChildTable'] = {
    {name='CreateChildTable', count=11, confidence=1.00, sample='function Details.StatusBar:CreateChildTable(instance, mainObject, frame)'},
  },
  ['PlayerEnterCombat'] = {
    {name='PlayerEnterCombat', count=3, confidence=0.60, sample='function PDps:PlayerEnterCombat()'},
  },
  ['PlayerLeaveCombat'] = {
    {name='PlayerLeaveCombat', count=3, confidence=0.60, sample='function PDps:PlayerLeaveCombat()'},
  },
  ['ChangeSegment'] = {
    {name='ChangeSegment', count=1, confidence=0.20, sample='function PDps:ChangeSegment(instance, segment)'},
  },
  ['PluginDpsUpdate'] = {
    {name='PluginDpsUpdate', count=3, confidence=0.60, sample='Details:PluginDpsUpdate(child)'},
  },
  ['DataReset'] = {
    {name='DataReset', count=2, confidence=0.40, sample='function PDps:DataReset()'},
  },
  ['ToK'] = {
    {name='ToK', count=53, confidence=1.00, sample='child.text:SetText(Details:ToK(dps))'},
  },
  ['CommaValue'] = {
    {name='CommaValue', count=23, confidence=1.00, sample='child.text:SetText(Details:CommaValue(dps))'},
  },
  ['NewCombat'] = {
    {name='NewCombat', count=1, confidence=0.20, sample='function PSegment:NewCombat()'},
  },
  ['Change'] = {
    {name='Change', count=8, confidence=1.00, sample='PSegment:Change()'},
  },
  ['OnSegmentChange'] = {
    {name='OnSegmentChange', count=1, confidence=0.20, sample='function PSegment:OnSegmentChange()'},
  },
  ['SchduleGetName'] = {
    {name='SchduleGetName', count=1, confidence=0.20, sample='function PSegment:SchduleGetName()'},
  },
  ['GetSegmentId'] = {
    {name='GetSegmentId', count=19, confidence=1.00, sample='if (child.instance:GetSegmentId() == DETAILS_SEGMENTID_OVERALL) then'},
  },
  ['ExtraOptions'] = {
    {name='ExtraOptions', count=4, confidence=0.80, sample='function PSegment:ExtraOptions()'},
  },
  ['NewDropDown'] = {
    {name='NewDropDown', count=27, confidence=1.00, sample='detailsFramework:NewDropDown(window, nil, "$parentSegmentTypeDropdown", "segmentTypeDropdown", 200, 20, function() return segmentTypes end, 1) --func, default'},
  },
  ['ExtraOptionsOnOpen'] = {
    {name='ExtraOptionsOnOpen', count=4, confidence=0.80, sample='function PSegment:ExtraOptionsOnOpen(child)'},
  },
  ['SetFixedParameter'] = {
    {name='SetFixedParameter', count=36, confidence=1.00, sample='_G.DetailsStatusBarOptions2SegmentTypeDropdown.MyObject:SetFixedParameter(child)'},
  },
  ['Frames'] = {
    {name='Frames', count=3, confidence=0.60, sample='--Create Plugin Frames(must have)'},
  },
  ['GetInstanceAttributeText'] = {
    {name='GetInstanceAttributeText', count=4, confidence=0.80, sample='local sName = child.instance:GetInstanceAttributeText()'},
  },
  ['ClockPluginTickOnSegment'] = {
    {name='ClockPluginTickOnSegment', count=3, confidence=0.60, sample='function Details:ClockPluginTickOnSegment()'},
  },
  ['ClockPluginTick'] = {
    {name='ClockPluginTick', count=3, confidence=0.60, sample='Details:ClockPluginTick(true)'},
  },
  ['ThreatPluginTick'] = {
    {name='ThreatPluginTick', count=2, confidence=0.40, sample='function Details:ThreatPluginTick()'},
  },
  ['UpdateFps'] = {
    {name='UpdateFps', count=2, confidence=0.40, sample='function PFps:UpdateFps()'},
  },
  ['UpdateLatency'] = {
    {name='UpdateLatency', count=2, confidence=0.40, sample='function PLatency:UpdateLatency()'},
  },
  ['GetNetStats'] = {
    {name='GetNetStats', count=1, confidence=0.20, sample='local _, _, _, lagWorld = GetNetStats()'},
  },
  ['UpdateDurability'] = {
    {name='UpdateDurability', count=3, confidence=0.60, sample='function PDurability:UpdateDurability()'},
  },
  ['GoldPluginTick'] = {
    {name='GoldPluginTick', count=2, confidence=0.40, sample='function PGold:GoldPluginTick()'},
  },
  ['UpdateGold'] = {
    {name='UpdateGold', count=3, confidence=0.60, sample='child:UpdateGold()'},
  },
  ['UpdateClock'] = {
    {name='UpdateClock', count=3, confidence=0.60, sample='function PTime:UpdateClock()'},
  },
  ['NewSlider'] = {
    {name='NewSlider', count=17, confidence=1.00, sample='detailsFramework:NewSlider(window, _, "$parentSliderFontSize", "fonsizeSlider", 170, 20, 7, 20, 1, 1)'},
  },
  ['SetThumbSize'] = {
    {name='SetThumbSize', count=7, confidence=1.00, sample='window.fonsizeSlider:SetThumbSize(50)'},
  },
  ['HashTable'] = {
    {name='HashTable', count=16, confidence=1.00, sample='local fontObjects = SharedMedia:HashTable("font")'},
  },
  ['CreateRightClickLabel'] = {
    {name='CreateRightClickLabel', count=2, confidence=0.40, sample='local rightClickLabel = window:CreateRightClickLabel("short")'},
  },
  ['HideWidgets'] = {
    {name='HideWidgets', count=2, confidence=0.40, sample='extraWindow:HideWidgets()'},
  },
  ['FindEnemy'] = {
    {name='FindEnemy', count=1, confidence=0.20, sample='function Details:FindEnemy()'},
  },
  ['GetBossNames'] = {
    {name='GetBossNames', count=3, confidence=0.60, sample='if (Details:GetBossNames(Details.zone_id)) then'},
  },
  ['GetInstanceEJID'] = {
    {name='GetInstanceEJID', count=5, confidence=1.00, sample='local encounterJournalId = Details:GetInstanceEJID(mapID, name, encounterid)'},
    {name='Ejc.GetInstanceEJID', count=1, confidence=0.20, sample='function Ejc.GetInstanceEJID(...)'},
  },
  ['GetEncounterInfo'] = {
    {name='GetEncounterInfo', count=8, confidence=1.00, sample='local encounterInfo = Details:GetEncounterInfo(name)'},
    {name='Ejc.GetEncounterInfo', count=1, confidence=0.20, sample='function Ejc.GetEncounterInfo(id)'},
    {name='DetailsFramework.Ejc.GetEncounterInfo', count=1, confidence=0.20, sample='value = encounterInfo.journalEncounterId, --use with DetailsFramework.Ejc.GetEncounterInfo(value)'},
  },
  ['CheckFor_SuppressedWindowsOnEncounterFound'] = {
    {name='CheckFor_SuppressedWindowsOnEncounterFound', count=2, confidence=0.40, sample='Details:CheckFor_SuppressedWindowsOnEncounterFound()'},
  },
  ['ReadBossFrames'] = {
    {name='ReadBossFrames', count=1, confidence=0.20, sample='function Details:ReadBossFrames()'},
  },
  ['GetBossIds'] = {
    {name='GetBossIds', count=3, confidence=0.60, sample='local bossIds = Details:GetBossIds(zoneMapID)'},
  },
  ['GetBossName'] = {
    {name='GetBossName', count=6, confidence=1.00, sample='Details:Msg("(debug) boss found:", Details:GetBossName(zoneMapID, bossIndex))'},
  },
  ['FindBoss'] = {
    {name='FindBoss', count=2, confidence=0.40, sample='function Details:FindBoss(noJournalSearch)'},
  },
  ['GetCurrentDungeonBossListFromEJ'] = {
    {name='GetCurrentDungeonBossListFromEJ', count=2, confidence=0.40, sample='local bossList = Details:GetCurrentDungeonBossListFromEJ()'},
  },
  ['GetTutorialCVar'] = {
    {name='GetTutorialCVar', count=10, confidence=1.00, sample='local hasSeenTutorial = Details:GetTutorialCVar("MIN_COMBAT_TIME")'},
  },
  ['SetTutorialCVar'] = {
    {name='SetTutorialCVar', count=11, confidence=1.00, sample='Details:SetTutorialCVar("MIN_COMBAT_TIME", true)'},
  },
  ['GetEncounterIDInOrder'] = {
    {name='GetEncounterIDInOrder', count=1, confidence=0.20, sample='function Details:GetEncounterIDInOrder()'},
  },
  ['EntrarEmCombate'] = {
    {name='EntrarEmCombate', count=2, confidence=0.40, sample='return Details:EntrarEmCombate(...)'},
  },
  ['LockActivityTime'] = {
    {name='LockActivityTime', count=3, confidence=0.60, sample='pastCombatObject:LockActivityTime()'},
  },
  ['SetCurrentCombat'] = {
    {name='SetCurrentCombat', count=5, confidence=1.00, sample='Details:SetCurrentCombat(newCombatObject)'},
  },
  ['SetDateToNow'] = {
    {name='SetDateToNow', count=4, confidence=0.80, sample='newCombatObject:SetDateToNow(bSetStartTime)'},
  },
  ['StartCombatTicker'] = {
    {name='StartCombatTicker', count=2, confidence=0.40, sample='Details:StartCombatTicker()'},
  },
  ['CatchRaidBuffUptime'] = {
    {name='CatchRaidBuffUptime', count=3, confidence=0.60, sample='Details:CatchRaidBuffUptime("BUFF_UPTIME_IN")'},
  },
  ['CatchRaidDebuffUptime'] = {
    {name='CatchRaidDebuffUptime', count=3, confidence=0.60, sample='Details:CatchRaidDebuffUptime("DEBUFF_UPTIME_IN")'},
  },
  ['GetAllInstances'] = {
    {name='GetAllInstances', count=36, confidence=1.00, sample='for index, instancia in ipairs(Details:GetAllInstances()) do'},
  },
  ['CheckSwitchOnCombatStart'] = {
    {name='CheckSwitchOnCombatStart', count=2, confidence=0.40, sample='instancia:CheckSwitchOnCombatStart(true)'},
  },
  ['CheckSwitchToCurrent'] = {
    {name='CheckSwitchToCurrent', count=2, confidence=0.40, sample='Details:CheckSwitchToCurrent()'},
  },
  ['CheckForTextTimeCounter'] = {
    {name='CheckForTextTimeCounter', count=3, confidence=0.60, sample='Details:CheckForTextTimeCounter(true)'},
  },
  ['StopTestBarUpdate'] = {
    {name='StopTestBarUpdate', count=6, confidence=1.00, sample='Details:StopTestBarUpdate()'},
  },
  ['ScheduleSyncPlayerActorData'] = {
    {name='ScheduleSyncPlayerActorData', count=1, confidence=0.20, sample='function Details:ScheduleSyncPlayerActorData()'},
  },
  ['CloseEnemyDebuffsUptime'] = {
    {name='CloseEnemyDebuffsUptime', count=2, confidence=0.40, sample='Details:CloseEnemyDebuffsUptime()'},
  },
  ['ClearSchedules'] = {
    {name='Details222.GuessSpecSchedules.ClearSchedules', count=3, confidence=0.60, sample='Details222.GuessSpecSchedules.ClearSchedules()'},
  },
  ['StopCombat'] = {
    {name='Details222.TimeCapture.StopCombat', count=2, confidence=0.40, sample='--Details222.TimeCapture.StopCombat() --it did not start'},
  },
  ['GetRaidBossFindFunction'] = {
    {name='GetRaidBossFindFunction', count=2, confidence=0.40, sample='local findboss = Details:GetRaidBossFindFunction(zoneMapID)'},
  },
  ['OnCombatPhaseChanged'] = {
    {name='OnCombatPhaseChanged', count=4, confidence=0.80, sample='Details:OnCombatPhaseChanged()'},
  },
  ['StopCombatTicker'] = {
    {name='StopCombatTicker', count=4, confidence=0.80, sample='Details:StopCombatTicker()'},
  },
  ['CutDeathEventsByTime'] = {
    {name='CutDeathEventsByTime', count=2, confidence=0.40, sample='currentCombat:CutDeathEventsByTime()'},
  },
  ['CloseShields'] = {
    {name='CloseShields', count=2, confidence=0.40, sample='Details:CloseShields(currentCombat)'},
  },
  ['EJ_GetInstanceForMap'] = {
    {name='DetailsFramework.EncounterJournal.EJ_GetInstanceForMap', count=3, confidence=0.60, sample='local ejid = DetailsFramework.EncounterJournal.EJ_GetInstanceForMap(mapID)'},
  },
  ['FlagActorsOnPvPCombat'] = {
    {name='FlagActorsOnPvPCombat', count=2, confidence=0.40, sample='Details:FlagActorsOnPvPCombat()'},
  },
  ['FindEnemyName'] = {
    {name='FindEnemyName', count=3, confidence=0.60, sample='local enemyName = currentCombat:FindEnemyName()'},
  },
  ['FlagActorsOnCommonFight'] = {
    {name='FlagActorsOnCommonFight', count=2, confidence=0.40, sample='Details:FlagActorsOnCommonFight()'},
  },
  ['FlagActorsOnBossFight'] = {
    {name='FlagActorsOnBossFight', count=2, confidence=0.40, sample='Details:FlagActorsOnBossFight()'},
  },
  ['CheckFor_TrashSuppressionOnEncounterEnd'] = {
    {name='CheckFor_TrashSuppressionOnEncounterEnd', count=2, confidence=0.40, sample='Details:CheckFor_TrashSuppressionOnEncounterEnd()'},
  },
  ['GetEncounterEqualize'] = {
    {name='GetEncounterEqualize', count=2, confidence=0.40, sample='if (Details:GetEncounterEqualize(currentCombat.is_boss.mapid, currentCombat.is_boss.index)) then'},
  },
  ['StoreTalents'] = {
    {name='StoreTalents', count=2, confidence=0.40, sample='currentCombat:StoreTalents()'},
  },
  ['RefreshSolo'] = {
    {name='RefreshSolo', count=1, confidence=0.20, sample='Details:RefreshSolo()'},
  },
  ['CheckSwitchOnCombatEnd'] = {
    {name='CheckSwitchOnCombatEnd', count=3, confidence=0.60, sample='instance:CheckSwitchOnCombatEnd()'},
  },
  ['StoreSpells'] = {
    {name='Details.StoreSpells', count=2, confidence=0.40, sample='Details.StoreSpells()'},
  },
  ['GetPlayersInArena'] = {
    {name='GetPlayersInArena', count=4, confidence=0.80, sample='function Details:GetPlayersInArena() --ARENA_OPPONENT_UPDATE'},
  },
  ['GetNumArenaOpponentSpecs'] = {
    {name='GetNumArenaOpponentSpecs', count=3, confidence=0.60, sample='local enemiesAmount = GetNumArenaOpponentSpecs and GetNumArenaOpponentSpecs() or 5'},
  },
  ['ArenaPlayerCreated'] = {
    {name='ArenaPlayerCreated', count=2, confidence=0.40, sample='function Details:ArenaPlayerCreated(actorObject)'},
  },
  ['NewPlayer'] = {
    {name='Details222.ArenaSummary.NewPlayer', count=2, confidence=0.40, sample='Details222.ArenaSummary.NewPlayer(actorObject, true, unitId)'},
    {name='ArenaSummary.NewPlayer', count=1, confidence=0.20, sample='function ArenaSummary.NewPlayer(actorObject, isFriendly, unitId)'},
  },
  ['CreateArenaSegment'] = {
    {name='CreateArenaSegment', count=1, confidence=0.20, sample='function Details:CreateArenaSegment()'},
  },
  ['TimeDataRegister'] = {
    {name='TimeDataRegister', count=7, confidence=1.00, sample='Details:TimeDataRegister("Your Team Damage", string_arena_myteam_damage, nil, "Details!", "v1.0", [[Interface\ICONS\Ability_DualWield]], true, true)'},
  },
  ['CanSortByRealTimeDps'] = {
    {name='Details.CurrentDps.CanSortByRealTimeDps', count=5, confidence=1.00, sample='local bOrderDpsByRealTime = Details.CurrentDps.CanSortByRealTimeDps()'},
  },
  ['OnArenaStart'] = {
    {name='Details222.ArenaSummary.OnArenaStart', count=1, confidence=0.20, sample='Details222.ArenaSummary.OnArenaStart()'},
    {name='ArenaSummary.OnArenaStart', count=1, confidence=0.20, sample='function ArenaSummary.OnArenaStart() --~start'},
  },
  ['IsMatchActive'] = {
    {name='C_PvP.IsMatchActive', count=4, confidence=0.80, sample='--C_PvP.IsMatchActive() is true even before the arena match starts'},
  },
  ['GetArenaStartTime'] = {
    {name='GetArenaStartTime', count=2, confidence=0.40, sample='function Details:GetArenaStartTime()'},
  },
  ['GetBattlegroundStartTime'] = {
    {name='GetBattlegroundStartTime', count=2, confidence=0.40, sample='function Details:GetBattlegroundStartTime()'},
  },
  ['TimeDataUnregister'] = {
    {name='TimeDataUnregister', count=6, confidence=1.00, sample='Details:TimeDataUnregister("Your Team Damage")'},
  },
  ['OnArenaEnd'] = {
    {name='Details222.ArenaSummary.OnArenaEnd', count=1, confidence=0.20, sample='Details222.ArenaSummary.OnArenaEnd()'},
    {name='ArenaSummary.OnArenaEnd', count=1, confidence=0.20, sample='function ArenaSummary.OnArenaEnd() --~end'},
  },
  ['UpdateWindow'] = {
    {name='UpdateWindow', count=3, confidence=0.60, sample='function Details:UpdateWindow(instance, segmentId)'},
  },
  ['TrocaTabela'] = {
    {name='TrocaTabela', count=29, confidence=1.00, sample='instance:TrocaTabela(instance, instance:GetSegment(), displayId, subDisplayId, true)'},
  },
  ['PostponeInstanceToCurrent'] = {
    {name='PostponeInstanceToCurrent', count=1, confidence=0.20, sample='function Details:PostponeInstanceToCurrent(instance)'},
  },
  ['TrocaSegmentoAtual'] = {
    {name='TrocaSegmentoAtual', count=3, confidence=0.60, sample='return Details:TrocaSegmentoAtual(instance)'},
  },
  ['SetTrashSuppression'] = {
    {name='SetTrashSuppression', count=2, confidence=0.40, sample='function Details:SetTrashSuppression(n)'},
  },
  ['CheckFor_EnabledTrashSuppression'] = {
    {name='CheckFor_EnabledTrashSuppression', count=2, confidence=0.40, sample='function Details:CheckFor_EnabledTrashSuppression()'},
  },
  ['SetTrashSuppressionAfterEncounter'] = {
    {name='SetTrashSuppressionAfterEncounter', count=1, confidence=0.20, sample='function Details:SetTrashSuppressionAfterEncounter()'},
  },
  ['AddTooltipReportLineText'] = {
    {name='AddTooltipReportLineText', count=5, confidence=1.00, sample='function Details:AddTooltipReportLineText()'},
  },
  ['AddStatusBar'] = {
    {name='AddStatusBar', count=66, confidence=1.00, sample='GameCooltip:AddStatusBar(100, 1, 0, 0, 0, 0.8)'},
  },
  ['AddTooltipHeaderStatusbar'] = {
    {name='AddTooltipHeaderStatusbar', count=66, confidence=1.00, sample='function Details:AddTooltipHeaderStatusbar(r, g, b, a)'},
  },
  ['AddTooltipSpellHeaderText'] = {
    {name='AddTooltipSpellHeaderText', count=56, confidence=1.00, sample='function Details:AddTooltipSpellHeaderText(headerText, headerColor, amount, iconTexture, L, R, T, B, separator, iconSize)'},
  },
  ['FormatCooltipForSpells'] = {
    {name='FormatCooltipForSpells', count=8, confidence=1.00, sample='function Details:FormatCooltipForSpells()'},
  },
  ['BuildInstanceBarTooltip'] = {
    {name='BuildInstanceBarTooltip', count=3, confidence=0.60, sample='function Details:BuildInstanceBarTooltip(frame)'},
  },
  ['SetHost'] = {
    {name='SetHost', count=11, confidence=1.00, sample='GameCooltip:SetHost(frame, myPoint, anchorPoint, x_Offset, y_Offset)'},
  },
  ['MontaTooltip'] = {
    {name='MontaTooltip', count=13, confidence=1.00, sample='function Details:MontaTooltip(frame, whichRowLine, keydown)'},
  },
  ['ToolTipDead'] = {
    {name='ToolTipDead', count=4, confidence=0.80, sample='return Details:ToolTipDead(self, object, thisLine, keydown) --inst�ncia, [morte], barra'},
  },
  ['ToolTipBySpell'] = {
    {name='ToolTipBySpell', count=2, confidence=0.40, sample='return Details:ToolTipBySpell(self, object, thisLine, keydown)'},
  },
  ['ToolTipFrags'] = {
    {name='ToolTipFrags', count=2, confidence=0.40, sample='return Details:ToolTipFrags(self, object, thisLine, keydown)'},
  },
  ['ToolTipVoidZones'] = {
    {name='ToolTipVoidZones', count=2, confidence=0.40, sample='return Details:ToolTipVoidZones(self, object, thisLine, keydown)'},
  },
  ['ToolTip'] = {
    {name='ToolTip', count=7, confidence=1.00, sample='Details:Msg("object:ToolTip() is invalid.", object.__destroyedBy)'},
  },
  ['GetNicknameTable'] = {
    {name='GetNicknameTable', count=13, confidence=1.00, sample='local avatar = NickTag:GetNicknameTable(object:Name(), true)'},
  },
  ['SetBannerImage'] = {
    {name='SetBannerImage', count=6, confidence=1.00, sample='GameCooltip:SetBannerImage(1, 1, avatar [2], 80, 40, avatarPoint, avatarTexCoord, nil) --overlay [2] avatar path'},
  },
  ['SetBannerText'] = {
    {name='SetBannerText', count=4, confidence=0.80, sample='GameCooltip:SetBannerText(1, 1, (not Details.ignore_nicktag and avatar[1]) or object.nome, textPoint, avatarTextColor, 14, SharedMedia:Fetch("font", Details.tooltip.fontface)) --text [1] nickname'},
  },
  ['AddRoundedCornerToTooltip'] = {
    {name='AddRoundedCornerToTooltip', count=11, confidence=1.00, sample='Details:AddRoundedCornerToTooltip()'},
  },
  ['ShowRoundedCorner'] = {
    {name='ShowRoundedCorner', count=4, confidence=0.80, sample='GameCooltip:ShowRoundedCorner()'},
  },
  ['UpdateTooltip'] = {
    {name='UpdateTooltip', count=6, confidence=1.00, sample='function Details.gump:UpdateTooltip(whichRowLine, esta_barra, instancia)'},
  },
  ['EndRefresh'] = {
    {name='EndRefresh', count=27, confidence=1.00, sample='function Details:EndRefresh(instancia, total, combatTable, showing)'},
  },
  ['HideBarsNotInUse'] = {
    {name='HideBarsNotInUse', count=9, confidence=1.00, sample='Details:HideBarsNotInUse(instancia, showing)'},
  },
  ['IsShowingOverallDataWarning'] = {
    {name='IsShowingOverallDataWarning', count=3, confidence=0.60, sample='if (not instance:IsShowingOverallDataWarning()) then'},
  },
  ['ShowOverallDataWarning'] = {
    {name='ShowOverallDataWarning', count=3, confidence=0.60, sample='instance:ShowOverallDataWarning (true)'},
  },
  ['RefreshAllMainWindows'] = {
    {name='RefreshAllMainWindows', count=3, confidence=0.60, sample='function Details:RefreshAllMainWindows(bForceRefresh) --getting deprecated soon'},
  },
  ['DumpPerf'] = {
    {name='DumpPerf', count=1, confidence=0.20, sample='function Details:DumpPerf()'},
  },
  ['ForceRefresh'] = {
    {name='ForceRefresh', count=2, confidence=0.40, sample='function Details:ForceRefresh() --getting deprecated soon'},
  },
  ['RefreshAllMainWindowsTemp'] = {
    {name='RefreshAllMainWindowsTemp', count=1, confidence=0.20, sample='function Details:RefreshAllMainWindowsTemp()'},
  },
  ['GetMode'] = {
    {name='GetMode', count=15, confidence=1.00, sample='if (thisInstance:GetMode() == DETAILS_MODE_GROUP or thisInstance:GetMode() == DETAILS_MODE_ALL) then'},
  },
  ['RefreshData'] = {
    {name='RefreshData', count=11, confidence=1.00, sample='thisInstance:RefreshData(bForceRefresh)'},
    {name='DetailsKeystoneInfoFrame.RefreshData', count=1, confidence=0.20, sample='DetailsKeystoneInfoFrame.RefreshData()'},
  },
  ['GetActorObjectFromBreakdownWindow'] = {
    {name='GetActorObjectFromBreakdownWindow', count=12, confidence=1.00, sample='local actorObject = Details:GetActorObjectFromBreakdownWindow()'},
  },
  ['MontaInfo'] = {
    {name='MontaInfo', count=7, confidence=1.00, sample='return actorObject:MontaInfo()'},
  },
  ['AutoEraseConfirm'] = {
    {name='AutoEraseConfirm', count=1, confidence=0.20, sample='function Details:AutoEraseConfirm()'},
  },
  ['Environnement'] = {
    {name='Environnement', count=6, confidence=1.00, sample='L["STRING_ENVIRONMENTAL_DROWNING"] = "Environnement (noyade)"'},
  },
  ['Recadrage'] = {
    {name='Recadrage', count=4, confidence=0.80, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Recadrage (|cFFC0C0C0bas|r) :"'},
  },
  ['TGA'] = {
    {name='TGA', count=5, confidence=1.00, sample='L["STRING_OPTIONS_WALLPAPER_LOAD_EXCLAMATION"] = "L'image doit : - Être au format Truevision TGA (extension .tga). - Être dans le dossier racine WOW/ Interface/ . - Être de 256 x 256 pixels. - Le jeu doit être fermé avant de copier le fichier."'},
  },
  ['Environment'] = {
    {name='Environment', count=12, confidence=1.00, sample='L["STRING_ENVIRONMENTAL_DROWNING"] = "Environment (Drowning)"'},
  },
  ['Default'] = {
    {name='Default', count=6, confidence=1.00, sample='L["STRING_OPTIONS_BAR_ICONFILE3"] = "Default (black white)"'},
  },
  ['Profile'] = {
    {name='Profile', count=3, confidence=0.60, sample='L["STRING_OPTIONS_IMPORT_PROFILE_PASTE"] = "Details! Import Profile (paste string)"'},
  },
  ['Crop'] = {
    {name='Crop', count=8, confidence=1.00, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Crop (|cFFC0C0C0bottom|r):"'},
  },
  ['Control'] = {
    {name='Control', count=5, confidence=1.00, sample='L["STRING_OPTIONS_WC_ANCHOR"] = "Quick Window Control (#%s):"'},
  },
  ['GUID'] = {
    {name='GUID', count=1, confidence=0.20, sample='L["STRING_FORGE_HEADER_GUID"] = "GUID (글로벌 유닛 ID)"'},
  },
  ['Entorno'] = {
    {name='Entorno', count=12, confidence=1.00, sample='L["STRING_ENVIRONMENTAL_DROWNING"] = "Entorno (Ahogamiento)"'},
  },
  ['Defecto'] = {
    {name='Defecto', count=6, confidence=1.00, sample='L["STRING_OPTIONS_BAR_ICONFILE3"] = "Defecto (negro y blanco)"'},
  },
  ['Cortar'] = {
    {name='Cortar', count=8, confidence=1.00, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Cortar (|cFFC0C0C0inferior|r):"'},
  },
  ['Standard'] = {
    {name='Standard', count=3, confidence=0.60, sample='L["STRING_OPTIONS_BAR_ICONFILE3"] = "Standard (schwarz/weiß)"'},
  },
  ['Charaktere'] = {
    {name='Charaktere', count=1, confidence=0.20, sample='L["STRING_OPTIONS_PROFILES_SELECT_DESC"] = "Lädt ein existierendes Profil. Wenn du dasselbe Profil für alle Charaktere (Option 'Bei allen Charakteren benutzen') verwendest, wird eine Ausnahme für diesen Charakter erstellt."'},
  },
  ['Chatfenster'] = {
    {name='Chatfenster', count=1, confidence=0.20, sample='L["STRING_OPTIONS_RT_FIRST_HIT_DESC"] = "Schreibt per Chatfenster (|cFFFFFF00nur für dich|r), wer den ersten Treffer ausführte - in der Regel der Kampfbeginner."'},
  },
  ['Chat'] = {
    {name='Chat', count=1, confidence=0.20, sample='L["STRING_OPTIONS_RT_INFOS_PREPOTION_DESC"] = "Aktiviert: Schreibt nach einer Begegnung in deinen Chat (|cFFFFFF00nur für dich|r), wer vor dem Pull einen Trank benutzte."'},
  },
  ['Segmente'] = {
    {name='Segmente', count=1, confidence=0.20, sample='L["STRING_OPTIONS_TRASH_SUPPRESSION_DESC"] = "Deaktiviert für |cFFFFFF00X|r Sekunden das automatische Umschalten auf Trash-Segmente (|cFFFFFF00nur nach erfolgreichem Bosskampf|r)."'},
  },
  ['Abschneiden'] = {
    {name='Abschneiden', count=4, confidence=0.80, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Abschneiden (|cFFC0C0C0unten|r):"'},
  },
  ['Dateiendung'] = {
    {name='Dateiendung', count=1, confidence=0.20, sample='- überprüfe die Dateiendung (*.tga) und die Farbtiefe (32bit/pixel).'},
  },
  ['Farbtiefe'] = {
    {name='Farbtiefe', count=1, confidence=0.20, sample='- überprüfe die Dateiendung (*.tga) und die Farbtiefe (32bit/pixel).'},
  },
  ['Fensterkontrolle'] = {
    {name='Fensterkontrolle', count=1, confidence=0.20, sample='L["STRING_OPTIONS_WC_ANCHOR"] = "Schnelle Fensterkontrolle (#%s):"'},
  },
  ['Ambiente'] = {
    {name='Ambiente', count=12, confidence=1.00, sample='L["STRING_ENVIRONMENTAL_DROWNING"] = "Ambiente (Afogar)"'},
  },
  ['Pele'] = {
    {name='Pele', count=2, confidence=0.40, sample='L["STRING_OPTIONS_INSTANCE_SKIN"] = "Pele (skin)"'},
  },
  ['Combate'] = {
    {name='Combate', count=1, confidence=0.20, sample='L["STRING_OPTIONS_MENU_ATTRIBUTE_ENCOUNTERTIMER"] = "Tempo de Combate (raid)"'},
  },
  ['I'] = {
    {name='I', count=2, confidence=0.40, sample='L["STRING_OPTIONS_PS_ABBREVIATE_TOK"] = "Centena I (caixa alta)"'},
  },
  ['II'] = {
    {name='II', count=1, confidence=0.20, sample='L["STRING_OPTIONS_PS_ABBREVIATE_TOK2"] = "Centena II (caixa alta)"'},
  },
  ['Trash'] = {
    {name='Trash', count=1, confidence=0.20, sample='L["STRING_OPTIONS_TRASH_SUPPRESSION_DESC"] = "Por |cFFFFFF00X|r segundos, suprimir a troca automática de segmento para mostrar segmentos de Trash (|cFFFFFF00apenas depois de derrotar um chefe de raide|r)."'},
  },
  ['Recorte'] = {
    {name='Recorte', count=4, confidence=0.80, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Recorte (|cFFC0C0C0baixo|r):"'},
  },
  ['Janela'] = {
    {name='Janela', count=1, confidence=0.20, sample='L["STRING_OPTIONS_WC_ANCHOR"] = "Controle Rápido da Janela (#%s):"'},
  },
  ['Atalho'] = {
    {name='Atalho', count=1, confidence=0.20, sample='L["STRING_SHORTCUT_RIGHTCLICK"] = "Menu de Atalho (botão direito para fechar)"'},
  },
  ['API'] = {
    {name='API', count=1, confidence=0.20, sample='L["STRING_SLASH_API_DESC"] = "abre o painel da API (em inglês) para construir plugins, displays customizados, auras, etc."'},
  },
  ['Predefinito'] = {
    {name='Predefinito', count=3, confidence=0.60, sample='L["STRING_OPTIONS_BAR_ICONFILE3"] = "Predefinito (nero bianco)"'},
  },
  ['Ritaglia'] = {
    {name='Ritaglia', count=4, confidence=0.80, sample='L["STRING_OPTIONS_WALLPAPER_CBOTTOM"] = "Ritaglia (|cFFC0C0C0sotto|r):"'},
  },
  ['Finestra'] = {
    {name='Finestra', count=1, confidence=0.20, sample='L["STRING_OPTIONS_WC_ANCHOR"] = "Controllo Rapido della Finestra (#%s):"'},
  },
  ['InstallSkin'] = {
    {name='InstallSkin', count=12, confidence=1.00, sample='function _detalhes:InstallSkin (skin_name, skin_table)'},
  },
  ['SetTooltipBackdrop'] = {
    {name='SetTooltipBackdrop', count=5, confidence=1.00, sample='_detalhes:SetTooltipBackdrop("Blizzard Tooltip", 16, {1, 1, 1, 1})'},
  },
  ['ToolbarMenuSetButtonsOptions'] = {
    {name='ToolbarMenuSetButtonsOptions', count=3, confidence=0.60, sample='instance:ToolbarMenuSetButtonsOptions (nil, true)'},
  },
  ['AttributeMenu'] = {
    {name='AttributeMenu', count=9, confidence=1.00, sample='instance:AttributeMenu (nil, nil, nil, nil, nil, nil, nil, true)'},
  },
  ['GetInstanceGroup'] = {
    {name='GetInstanceGroup', count=11, confidence=1.00, sample='for _, this_instance in ipairs(instance:GetInstanceGroup()) do'},
  },
  ['SendOptionsModifiedEvent'] = {
    {name='SendOptionsModifiedEvent', count=4, confidence=0.80, sample='_detalhes:SendOptionsModifiedEvent (DetailsOptionsWindow.instance)'},
  },
  ['AtivarInstancia'] = {
    {name='AtivarInstancia', count=16, confidence=1.00, sample='instance2:AtivarInstancia()'},
  },
  ['UngroupInstance'] = {
    {name='UngroupInstance', count=10, confidence=1.00, sample='instance1:UngroupInstance()'},
  },
  ['LockInstance'] = {
    {name='LockInstance', count=16, confidence=1.00, sample='instance1:LockInstance (true)'},
  },
  ['GetActorIcon'] = {
    {name='GetActorIcon', count=5, confidence=1.00, sample='function Details:GetActorIcon(actorObject)'},
  },
  ['Spec'] = {
    {name='Spec', count=3, confidence=0.60, sample='local spec = actorObject:Spec()'},
  },
  ['Class'] = {
    {name='Class', count=13, confidence=1.00, sample='local class = actorObject:Class() or "UNKNOW"'},
  },
  ['GetUnknownClassIcon'] = {
    {name='GetUnknownClassIcon', count=3, confidence=0.60, sample='function Details:GetUnknownClassIcon()'},
  },
  ['GetIconTexture'] = {
    {name='GetIconTexture', count=2, confidence=0.40, sample='function Details:GetIconTexture(iconType, bWithAlpha)'},
  },
  ['GetSpecFromActorName'] = {
    {name='GetSpecFromActorName', count=1, confidence=0.20, sample='function Details:GetSpecFromActorName(actorName)'},
  },
  ['GetSpecByGUID'] = {
    {name='GetSpecByGUID', count=2, confidence=0.40, sample='local spec = Details:GetSpecByGUID(GUID)'},
  },
  ['GetRoleIcon'] = {
    {name='GetRoleIcon', count=2, confidence=0.40, sample='function Details:GetRoleIcon(role)'},
  },
  ['GetSpecIcon'] = {
    {name='GetSpecIcon', count=16, confidence=1.00, sample='function Details:GetSpecIcon(spec, useAlpha)'},
  },
  ['GetPlayerIcon'] = {
    {name='GetPlayerIcon', count=1, confidence=0.20, sample='function Details:GetPlayerIcon(playerName, combatObject)'},
  },
  ['GuessClass'] = {
    {name='GuessClass', count=1, confidence=0.20, sample='function Details:GuessClass(payload)'},
  },
  ['GetSpellContainerNames'] = {
    {name='GetSpellContainerNames', count=3, confidence=0.60, sample='local spellContainerNames = actorObject:GetSpellContainerNames() --1x Details/functions/playerclass.lua:293: attempt to call method 'GetSpellContainerNames' (a nil value)'},
  },
  ['GetSpellContainer'] = {
    {name='GetSpellContainer', count=23, confidence=1.00, sample='local spellContainer = actorObject:GetSpellContainer(spellContainerNames[i])'},
  },
  ['GuessSpec'] = {
    {name='GuessSpec', count=1, confidence=0.20, sample='function Details:GuessSpec(payload)'},
  },
  ['ReGuessSpec'] = {
    {name='ReGuessSpec', count=1, confidence=0.20, sample='function Details:ReGuessSpec(t) --deprecated'},
  },
  ['GetSpellCastTable'] = {
    {name='GetSpellCastTable', count=3, confidence=0.60, sample='local spellCastTable = combatObject:GetSpellCastTable(actorObject.nome)'},
  },
  ['OnClickEncounterJournalLink'] = {
    {name='Details222.EJCache.OnClickEncounterJournalLink', count=1, confidence=0.20, sample='function Details222.EJCache.OnClickEncounterJournalLink(tag, journalTypeString, idString) --not in use'},
  },
  ['EJ_HandleLinkPath'] = {
    {name='EJ_HandleLinkPath', count=1, confidence=0.20, sample='local instanceId, encounterId, sectionId, tierIndex = EJ_HandleLinkPath(journalType, id)'},
  },
  ['GetSectionInfo'] = {
    {name='C_EncounterJournal.GetSectionInfo', count=6, confidence=1.00, sample='local sectionInfo = C_EncounterJournal.GetSectionInfo(sectionId)'},
  },
  ['GetDamageDoneToPlayersBySpell'] = {
    {name='Details222.DamageSpells.GetDamageDoneToPlayersBySpell', count=2, confidence=0.40, sample='local damageDoneTable = Details222.DamageSpells.GetDamageDoneToPlayersBySpell(spellId)'},
  },
  ['RemoveRealmName'] = {
    {name='RemoveRealmName', count=22, confidence=1.00, sample='local nameWithoutRealm = DF:RemoveRealmName(targetName)'},
  },
  ['MakeStringFromSpellId'] = {
    {name='MakeStringFromSpellId', count=2, confidence=0.40, sample='local abilityString = DF:MakeStringFromSpellId(spellId)'},
  },
  ['SetPetData'] = {
    {name='Details222.PetContainer.SetPetData', count=1, confidence=0.20, sample='Details222.PetContainer.SetPetData(currentCharacterData.saved_pet_cache)'},
    {name='SetPetData', count=1, confidence=0.20, sample='function petContainer.SetPetData(petData)'},
  },
  ['NickTagSetCache'] = {
    {name='NickTagSetCache', count=2, confidence=0.40, sample='Details:NickTagSetCache (_detalhes_database.nick_tag_cache)'},
  },
  ['CountDataOnLoad'] = {
    {name='CountDataOnLoad', count=2, confidence=0.40, sample='Details:CountDataOnLoad()'},
  },
  ['BuildTables'] = {
    {name='BuildTables', count=3, confidence=0.60, sample='Details.Buffs:BuildTables()'},
  },
  ['ClearSpellCache'] = {
    {name='ClearSpellCache', count=3, confidence=0.60, sample='Details:ClearSpellCache()'},
  },
  ['GetProfile'] = {
    {name='GetProfile', count=15, confidence=1.00, sample='if (profile_name and profile_name ~= "" and Details:GetProfile (profile_name)) then'},
    {name='WarcraftLogs.GetProfile', count=1, confidence=0.20, sample='playerProfile = WarcraftLogs.GetProfile(playerName, playerRealm, factionId)'},
    {name='RaiderIO.GetProfile', count=3, confidence=0.60, sample='rioProfile = RaiderIO.GetProfile(playerName, playerRealm, faction == "Horde" and 2 or 1)'},
    {name='SavedVars.GetProfile', count=4, confidence=0.80, sample='function detailsFramework.SavedVars.GetProfile(addonObject, bCreateIfNotFound, profileToCopyFrom)'},
  },
  ['GetCurrentProfileName'] = {
    {name='GetCurrentProfileName', count=15, confidence=1.00, sample='local current_profile_name = Details:GetCurrentProfileName()'},
    {name='SavedVars.GetCurrentProfileName', count=3, confidence=0.60, sample='function detailsFramework.SavedVars.GetCurrentProfileName(addonObject)'},
  },
  ['SaveProfileSpecial'] = {
    {name='SaveProfileSpecial', count=2, confidence=0.40, sample='Details:SaveProfileSpecial()'},
  },
  ['ApplyProfile'] = {
    {name='ApplyProfile', count=12, confidence=1.00, sample='Details:ApplyProfile(current_profile_name, true)'},
  },
  ['TimeDataUpdate'] = {
    {name='TimeDataUpdate', count=8, confidence=1.00, sample='function Details:TimeDataUpdate (index_or_name, name, func, matrix, author, version, icon, is_enabled)'},
  },
  ['TimeDataCleanUpTemporary'] = {
    {name='TimeDataCleanUpTemporary', count=1, confidence=0.20, sample='function Details:TimeDataCleanUpTemporary()'},
  },
  ['TimeDataCreateChartTables'] = {
    {name='TimeDataCreateChartTables', count=2, confidence=0.40, sample='function Details:TimeDataCreateChartTables()'},
  },
  ['SetEnvironment'] = {
    {name='SetEnvironment', count=12, confidence=1.00, sample='DetailsFramework:SetEnvironment(func)'},
  },
  ['TimeDataTick'] = {
    {name='TimeDataTick', count=2, confidence=0.40, sample='function Details:TimeDataTick()'},
  },
  ['SetDataBrokerText'] = {
    {name='SetDataBrokerText', count=2, confidence=0.40, sample='function Details:SetDataBrokerText (text)'},
  },
  ['StartCombatTimer'] = {
    {name='Details222.TimeCapture.StartCombatTimer', count=1, confidence=0.20, sample='function Details222.TimeCapture.StartCombatTimer(combatObject)'},
  },
  ['StopAllUnitTimers'] = {
    {name='Details222.TimeCapture.StopAllUnitTimers', count=2, confidence=0.40, sample='Details222.TimeCapture.StopAllUnitTimers()'},
  },
  ['GetChartDataFromSpell'] = {
    {name='Details222.TimeCapture.GetChartDataFromSpell', count=1, confidence=0.20, sample='function Details222.TimeCapture.GetChartDataFromSpell(spellTable)'},
  },
  ['GetDisplayClassByDisplayId'] = {
    {name='GetDisplayClassByDisplayId', count=2, confidence=0.40, sample='function Details:GetDisplayClassByDisplayId(displayId)'},
  },
  ['GetNameNoRealm'] = {
    {name='GetNameNoRealm', count=1, confidence=0.20, sample='function Details:GetNameNoRealm(actor)'},
  },
  ['RemoveOwnerName'] = {
    {name='RemoveOwnerName', count=5, confidence=1.00, sample='function Details:RemoveOwnerName(string)'},
  },
  ['GetCLName'] = {
    {name='GetCLName', count=1, confidence=0.20, sample='function Details:GetCLName(id)'},
  },
  ['GetUnitClassFull'] = {
    {name='GetUnitClassFull', count=3, confidence=0.60, sample='function Details:GetUnitClassFull(unitId)'},
  },
  ['GetUnitNameForAPI'] = {
    {name='GetUnitNameForAPI', count=2, confidence=0.40, sample='function Details:GetUnitNameForAPI(unitId)'},
  },
  ['IsValidActor'] = {
    {name='IsValidActor', count=2, confidence=0.40, sample='function Details:IsValidActor(actor)'},
  },
  ['GetActorClass'] = {
    {name='GetActorClass', count=2, confidence=0.40, sample='function Details:GetActorClass(actor)'},
  },
  ['GetGUID'] = {
    {name='GetGUID', count=3, confidence=0.60, sample='function Details:GetGUID(actor)'},
  },
  ['GetFlag'] = {
    {name='GetFlag', count=1, confidence=0.20, sample='function Details:GetFlag(actor)'},
  },
  ['GetSpells'] = {
    {name='GetSpells', count=1, confidence=0.20, sample='function Details:GetSpells()'},
  },
  ['GetActorSpells'] = {
    {name='GetActorSpells', count=8, confidence=1.00, sample='function Details:GetActorSpells()'},
  },
  ['GetPets'] = {
    {name='GetPets', count=6, confidence=1.00, sample='function Details:GetPets()'},
    {name='Details222.PetContainer.GetPets', count=1, confidence=0.20, sample='_detalhes_database.saved_pet_cache = Details222.PetContainer.GetPets()'},
  },
  ['Pets'] = {
    {name='Pets', count=8, confidence=1.00, sample='function Details:Pets()'},
  },
  ['AddColorString'] = {
    {name='AddColorString', count=3, confidence=0.60, sample='function Details:AddColorString(thisString, class)'},
  },
  ['AddRoleIcon'] = {
    {name='AddRoleIcon', count=8, confidence=1.00, sample='function Details:AddRoleIcon(thisString, role, size)'},
  },
  ['AddClassOrSpecIcon'] = {
    {name='AddClassOrSpecIcon', count=5, confidence=1.00, sample='function Details:AddClassOrSpecIcon(thisString, class, spec, iconSize, useAlphaIcons)'},
  },
  ['GetParseColor'] = {
    {name='Details222.WarcraftLogs.GetParseColor', count=3, confidence=0.60, sample='function Details222.WarcraftLogs.GetParseColor(percent)'},
  },
  ['GetPlayerProfile'] = {
    {name='Details222.WarcraftLogs.GetPlayerProfile', count=1, confidence=0.20, sample='function Details222.WarcraftLogs.GetPlayerProfile(actorObject)'},
  },
  ['GetClassPercentileFromBossProfile'] = {
    {name='Details222.WarcraftLogs.GetClassPercentileFromBossProfile', count=2, confidence=0.40, sample='function Details222.WarcraftLogs.GetClassPercentileFromBossProfile(bossProfile)'},
  },
  ['GetEncounterProfile'] = {
    {name='Details222.WarcraftLogs.GetEncounterProfile', count=2, confidence=0.40, sample='function Details222.WarcraftLogs.GetEncounterProfile(cleuBossId, difficultyId)'},
    {name='WarcraftLogs.GetEncounterProfile', count=1, confidence=0.20, sample='return WarcraftLogs.GetEncounterProfile(cleuBossId, difficultyId) or {} --wrapped'},
  },
  ['GetClassPercentileForEncounterID'] = {
    {name='Details222.WarcraftLogs.GetClassPercentileForEncounterID', count=2, confidence=0.40, sample='function Details222.WarcraftLogs.GetClassPercentileForEncounterID(cleuBossId, difficultyId, classId)'},
  },
  ['GetSpecPercentileFromClassPercentile'] = {
    {name='Details222.WarcraftLogs.GetSpecPercentileFromClassPercentile', count=1, confidence=0.20, sample='function Details222.WarcraftLogs.GetSpecPercentileFromClassPercentile(classPercentile, specId)'},
  },
  ['GetDamageParsePercent'] = {
    {name='Details222.WarcraftLogs.GetDamageParsePercent', count=3, confidence=0.60, sample='function Details222.WarcraftLogs.GetDamageParsePercent(encounterId, difficultyId, specId, amount)'},
  },
  ['MapRangeClamped'] = {
    {name='MapRangeClamped', count=8, confidence=1.00, sample='local percentScalar = detailsFramework:MapRangeClamped(minDamage, maxDamage, 0, 100, amount)'},
    {name='DF.Math.MapRangeClamped', count=5, confidence=1.00, sample='return DF.Math.MapRangeClamped(0, 1, minValue, maxValue, math.random())'},
    {name='Math.MapRangeClamped', count=1, confidence=0.20, sample='scaleSlider:SetValue(detailsFramework.Math.MapRangeClamped(minValue, maxValue, 0, 1, scale))'},
  },
  ['GetPercent'] = {
    {name='Details222.ParsePercent.GetPercent', count=2, confidence=0.40, sample='function Details222.ParsePercent.GetPercent(attribute, difficultyId, encounterId, specId, amount)'},
  },
  ['GetSpellInfoClassic'] = {
    {name='GetSpellInfoClassic', count=1, confidence=0.20, sample='spellInfo = {GetSpellInfoClassic(key)}'},
  },
  ['CreateTextureMarkup'] = {
    {name='CreateTextureMarkup', count=1, confidence=0.20, sample='result = "" .. CreateTextureMarkup(itemIcon, iconSize, iconSize, iconSize, iconSize, unpack(coords)) .. " " .. itemName .. ""'},
  },
  ['IsTWWWow'] = {
    {name='DetailsFramework.IsTWWWow', count=1, confidence=0.20, sample='elseif (DetailsFramework.IsTWWWow()) then'},
    {name='DF.IsTWWWow', count=1, confidence=0.20, sample='function DF.IsTWWWow()'},
  },
  ['Anvil'] = {
    {name='Anvil', count=1, confidence=0.20, sample='customItemList[401306] = {itemId = 202617} --trinket: Elementium Pocket Anvil (use)'},
  },
  ['Flare'] = {
    {name='Flare', count=1, confidence=0.20, sample='customItemList[384290] = {itemId = 193672, isPassive = true} --trinket: Frenzying Signoll Flare (dot)'},
  },
  ['Scale'] = {
    {name='Scale', count=2, confidence=0.40, sample='customItemList[381760] = {itemId = 193786, isPassive = true} --trinket: Mutated Magmammoth Scale (melee)'},
  },
  ['Essence'] = {
    {name='Essence', count=2, confidence=0.40, sample='customItemList[426431] = {itemId = 210494, isPassive = true} --enchant: Incandescent Essence (ranged dps)'},
  },
  ['Dreamcarver'] = {
    {name='Dreamcarver', count=1, confidence=0.20, sample='customItemList[425127] = {itemId = 207783, isPassive = true} --weapon: Cruel Dreamcarver (heal)'},
  },
  ['Embersoul'] = {
    {name='Embersoul', count=1, confidence=0.20, sample='customItemList[423611] = {itemId = 207167, isPassive = true, nameExtra = "*proc*"} --trinket: Ashes of the Embersoul (extra proc)'},
  },
  ['Ancient'] = {
    {name='Ancient', count=1, confidence=0.20, sample='customItemList[422441] = {itemId = 207169, isPassive = true} --trinket: Branch of the Tormented Ancient (buff)'},
  },
  ['Sandglass'] = {
    {name='Sandglass', count=1, confidence=0.20, sample='customItemList[417452] = {itemId = 207566, isPassive = true} --trinket: Accelerating Sandglass (buff)'},
  },
  ['Branch'] = {
    {name='Branch', count=2, confidence=0.40, sample='customItemList[429262] = {itemId = 109999, isPassive = true} --trinket: Witherbark's Branch (buff)'},
  },
  ['Tomorrows'] = {
    {name='Tomorrows', count=1, confidence=0.20, sample='customItemList[418527] = {itemId = 207581, isPassive = true} --trinket: Mirror of Fractured Tomorrows (buff)'},
  },
  ['GetDefaultCustomSpellsList'] = {
    {name='GetDefaultCustomSpellsList', count=1, confidence=0.20, sample='function Details:GetDefaultCustomSpellsList()'},
  },
  ['UserCustomSpellUpdate'] = {
    {name='UserCustomSpellUpdate', count=3, confidence=0.60, sample='function Details:UserCustomSpellUpdate(index, spellName, spellIcon) --called from the options panel > rename spells'},
  },
  ['UserCustomSpellReset'] = {
    {name='UserCustomSpellReset', count=2, confidence=0.40, sample='function Details:UserCustomSpellReset(index)'},
  },
  ['UserCustomSpellAdd'] = {
    {name='UserCustomSpellAdd', count=4, confidence=0.80, sample='Details:UserCustomSpellAdd(spellId, spellTable.name or spellName or "Unknown", spellTable.icon or spellIcon or [[Interface\InventoryItems\WoWUnknownItem01]])'},
  },
  ['UserCustomSpellRemove'] = {
    {name='UserCustomSpellRemove', count=2, confidence=0.40, sample='function Details:UserCustomSpellRemove(index)'},
  },
  ['GetCustomSpellInfo'] = {
    {name='Details.GetCustomSpellInfo', count=2, confidence=0.40, sample='function Details.GetCustomSpellInfo(spellId)'},
  },
  ['GetItemSpellInfo'] = {
    {name='Details.GetItemSpellInfo', count=3, confidence=0.60, sample='function Details.GetItemSpellInfo(spellId)'},
  },
  ['SetAsDotSpell'] = {
    {name='SetAsDotSpell', count=2, confidence=0.40, sample='function Details:SetAsDotSpell(spellId)'},
  },
  ['AskRLForCoachStatus'] = {
    {name='Details.Coach.AskRLForCoachStatus', count=4, confidence=0.80, sample='function Details.Coach.AskRLForCoachStatus()'},
  },
  ['SendRLCombatStartNotify'] = {
    {name='Details.Coach.SendRLCombatStartNotify', count=3, confidence=0.60, sample='function Details.Coach.SendRLCombatStartNotify(coachName)'},
  },
  ['SendRLCombatEndNotify'] = {
    {name='Details.Coach.SendRLCombatEndNotify', count=2, confidence=0.40, sample='function Details.Coach.SendRLCombatEndNotify(coachName)'},
  },
  ['SendRaidCoachEndNotify'] = {
    {name='Details.Coach.SendRaidCoachEndNotify', count=2, confidence=0.40, sample='function Details.Coach.SendRaidCoachEndNotify()'},
  },
  ['SendRaidCoachStartNotify'] = {
    {name='Details.Coach.SendRaidCoachStartNotify', count=2, confidence=0.40, sample='function Details.Coach.SendRaidCoachStartNotify()'},
  },
  ['SendDeathToRL'] = {
    {name='Details.Coach.SendDeathToRL', count=2, confidence=0.40, sample='function Details.Coach.SendDeathToRL(deathTable)'},
  },
  ['SendDataToRL'] = {
    {name='Details.Coach.Client.SendDataToRL', count=1, confidence=0.20, sample='function Details.Coach.Client.SendDataToRL()'},
  },
  ['GetAllData'] = {
    {name='GetAllData', count=3, confidence=0.60, sample='--local data = Details.packFunctions.GetAllData()'},
  },
  ['OnEnterGroup'] = {
    {name='OnEnterGroup', count=1, confidence=0.20, sample='function eventListener.OnEnterGroup() --client'},
  },
  ['OnLeaveGroup'] = {
    {name='OnLeaveGroup', count=1, confidence=0.20, sample='function eventListener.OnLeaveGroup()'},
  },
  ['OnEnterCombat'] = {
    {name='OnEnterCombat', count=1, confidence=0.20, sample='function eventListener.OnEnterCombat()'},
  },
  ['UnitIsGroupAssistant'] = {
    {name='UnitIsGroupAssistant', count=2, confidence=0.40, sample='if (UnitIsGroupAssistant("player")) then'},
  },
  ['OnLeaveCombat'] = {
    {name='OnLeaveCombat', count=1, confidence=0.20, sample='function eventListener.OnLeaveCombat()'},
    {name='UnitInfoManager.OnLeaveCombat', count=1, confidence=0.20, sample='function UnitInfoManager.OnLeaveCombat()'},
    {name='GearManager.OnLeaveCombat', count=1, confidence=0.20, sample='function openRaidLib.GearManager.OnLeaveCombat()'},
  },
  ['GetLeaderName'] = {
    {name='Details.Coach.Client.GetLeaderName', count=2, confidence=0.40, sample='local raidLeaderName = Details.Coach.Client.GetLeaderName()'},
  },
  ['OnZoneChanged'] = {
    {name='OnZoneChanged', count=1, confidence=0.20, sample='function eventListener.OnZoneChanged()'},
  },
  ['SendMyDeath'] = {
    {name='Details.Coach.Client.SendMyDeath', count=1, confidence=0.20, sample='function Details.Coach.Client.SendMyDeath(_, _, _, _, _, _, playerGUID, _, playerFlag, deathTable)'},
  },
  ['WelcomePanel'] = {
    {name='Details.Coach.WelcomePanel', count=2, confidence=0.40, sample='function Details.Coach.WelcomePanel()'},
  },
  ['CreateImage'] = {
    {name='CreateImage', count=32, confidence=1.00, sample='local detailsLogo = DetailsFramework:CreateImage(welcomePanel, [[Interface\AddOns\Details\images\logotipo]])'},
  },
  ['GetGuildInfo'] = {
    {name='GetGuildInfo', count=17, confidence=1.00, sample='local guildName = GetGuildInfo("player")'},
  },
  ['GetRaidRosterInfo'] = {
    {name='GetRaidRosterInfo', count=6, confidence=1.00, sample='local name, rank = GetRaidRosterInfo(i)'},
  },
  ['GetPortraitTextureForNpcID'] = {
    {name='GetPortraitTextureForNpcID', count=1, confidence=0.20, sample='--@texture: the texture from GetPortraitTextureForNpcID()'},
    {name='Details222.Textures.GetPortraitTextureForNpcID', count=4, confidence=0.80, sample='if (npcId and not Details222.Textures.GetPortraitTextureForNpcID(npcId)) then'},
  },
  ['FormatPortraitAsTexture'] = {
    {name='Details222.Textures.FormatPortraitAsTexture', count=2, confidence=0.40, sample='function Details222.Textures.FormatPortraitAsTexture(texture, fromTexture)'},
  },
  ['SavePortraitTextureForUnitID'] = {
    {name='Details222.Textures.SavePortraitTextureForUnitID', count=5, confidence=1.00, sample='function Details222.Textures.SavePortraitTextureForUnitID(unitId)'},
  },
  ['TestBarsUpdate'] = {
    {name='TestBarsUpdate', count=1, confidence=0.20, sample='function Details:TestBarsUpdate()'},
  },
  ['StartTestBarUpdate'] = {
    {name='StartTestBarUpdate', count=3, confidence=0.60, sample='function Details:StartTestBarUpdate()'},
  },
  ['CreateTestBars'] = {
    {name='CreateTestBars', count=8, confidence=1.00, sample='function Details:CreateTestBars (alphabet, isArena)'},
    {name='Details.CreateTestBars', count=1, confidence=0.20, sample='Details.CreateTestBars()'},
  },
  ['PegarCombatente'] = {
    {name='PegarCombatente', count=38, confidence=1.00, sample='local robot = current_combat[1]:PegarCombatente ("0x0000-0000-0000", who[1], 0x114, true)'},
  },
  ['PegaHabilidade'] = {
    {name='PegaHabilidade', count=45, confidence=1.00, sample='robot.spells:PegaHabilidade (56488, true, "SPELL_DAMAGE")'},
  },
  ['InstanceReset'] = {
    {name='InstanceReset', count=22, confidence=1.00, sample='instance:InstanceReset()'},
  },
  ['UnitAuraBySpellName'] = {
    {name='UnitAuraBySpellName', count=1, confidence=0.20, sample='if UnitAuraBySpellName(unitId, spellName) then'},
  },
  ['ExpansionHasAugEvoker'] = {
    {name='ExpansionHasAugEvoker', count=1, confidence=0.20, sample='if (not detailsFramework.ExpansionHasAugEvoker()) then'},
    {name='DF.ExpansionHasAugEvoker', count=1, confidence=0.20, sample='function DF.ExpansionHasAugEvoker()'},
  },
  ['FindUnitIDByUnitSerial'] = {
    {name='FindUnitIDByUnitSerial', count=2, confidence=0.40, sample='local unitIDAffected = Details:FindUnitIDByUnitSerial(targetSerial)'},
  },
  ['FindDebuffDuration'] = {
    {name='FindDebuffDuration', count=3, confidence=0.60, sample='local duration, expirationTime = Details:FindDebuffDuration(unitIDAffected, spellId, Details:Ambiguate(sourceName))'},
  },
  ['RecompileAutoRunCode'] = {
    {name='Details222.AutoRunCode.RecompileAutoRunCode', count=3, confidence=0.60, sample='function Details222.AutoRunCode.RecompileAutoRunCode()'},
  },
  ['IsInMythicPlus'] = {
    {name='IsInMythicPlus', count=2, confidence=0.40, sample='function Details:IsInMythicPlus()'},
  },
  ['FindAura'] = {
    {name='AuraUtil.FindAura', count=4, confidence=0.80, sample='local name, texture, count, debuffType, duration, expirationTime = AuraUtil.FindAura(predicateFunc, unitId, "HARMFUL", spellId, casterName)'},
  },
  ['FindDebuffDurationByUnitName'] = {
    {name='FindDebuffDurationByUnitName', count=1, confidence=0.20, sample='function Details:FindDebuffDurationByUnitName(targetString, spellId, casterString)'},
  },
  ['FindBuffDuration'] = {
    {name='FindBuffDuration', count=2, confidence=0.40, sample='function Details:FindBuffDuration(unitId, spellId, casterName) --not called anywhere else except the function below'},
    {name='AuraTracker.FindBuffDuration', count=2, confidence=0.40, sample='function openRaidLib.AuraTracker.FindBuffDuration(unitId, casterName, spellId)'},
  },
  ['FindBuffDurationByUnitName'] = {
    {name='FindBuffDurationByUnitName', count=1, confidence=0.20, sample='function Details:FindBuffDurationByUnitName(targetString, spellId, casterString)'},
    {name='AuraTracker.FindBuffDurationByUnitName', count=2, confidence=0.40, sample='function openRaidLib.AuraTracker.FindBuffDurationByUnitName(targetString, casterString, spellId)'},
  },
  ['FindBuffCastedBy'] = {
    {name='FindBuffCastedBy', count=2, confidence=0.40, sample='function Details:FindBuffCastedBy(unitId, buffSpellId, casterName) --not called anywhere else except the function below'},
  },
  ['GetRaidLeader'] = {
    {name='GetRaidLeader', count=1, confidence=0.20, sample='function Details:GetRaidLeader()'},
  },
  ['UnpackDeathTable'] = {
    {name='UnpackDeathTable', count=3, confidence=0.60, sample='function Details:UnpackDeathTable(deathTable)'},
  },
  ['UnpackDeathEvent'] = {
    {name='UnpackDeathEvent', count=2, confidence=0.40, sample='function Details:UnpackDeathEvent(deathEvent)'},
  },
  ['LowerizeKeys'] = {
    {name='LowerizeKeys', count=1, confidence=0.20, sample='function Details:LowerizeKeys (_table)'},
  },
  ['UseEastAsianNumericalSystem'] = {
    {name='UseEastAsianNumericalSystem', count=2, confidence=0.40, sample='function Details:UseEastAsianNumericalSystem()'},
  },
  ['SetNumericalSystemOverride'] = {
    {name='SetNumericalSystemOverride', count=2, confidence=0.40, sample='--usage: _detalhes:SetNumericalSystemOverride (language)  language can be:  "kr", "cn", "tw"'},
  },
  ['ToK0'] = {
    {name='ToK0', count=2, confidence=0.40, sample='function Details:ToK0 (numero)'},
  },
  ['ToKMin'] = {
    {name='ToKMin', count=5, confidence=1.00, sample='function Details:ToKMin (numero)'},
  },
  ['ToK2Min'] = {
    {name='ToK2Min', count=22, confidence=1.00, sample='function Details:ToK2Min (numero)'},
  },
  ['ToK0Min'] = {
    {name='ToK0Min', count=2, confidence=0.40, sample='function Details:ToK0Min (numero)'},
  },
  ['ToKReport'] = {
    {name='ToKReport', count=7, confidence=1.00, sample='function Details:ToKReport (numero)'},
  },
  ['NoToK'] = {
    {name='NoToK', count=2, confidence=0.40, sample='function Details:NoToK (numero)'},
  },
  ['UseWestNumericalSystem'] = {
    {name='UseWestNumericalSystem', count=3, confidence=0.60, sample='function Details:UseWestNumericalSystem()'},
  },
  ['SelectNumericalSystem'] = {
    {name='SelectNumericalSystem', count=6, confidence=1.00, sample='Details:SelectNumericalSystem()'},
  },
  ['GetNumericalSystem'] = {
    {name='GetNumericalSystem', count=1, confidence=0.20, sample='function Details:GetNumericalSystem()'},
  },
  ['UpdateToKFunctions'] = {
    {name='UpdateToKFunctions', count=3, confidence=0.60, sample='Details:UpdateToKFunctions()'},
  },
  ['GetFontSize'] = {
    {name='GetFontSize', count=2, confidence=0.40, sample='function Details:GetFontSize (fontString)'},
  },
  ['GetFontFace'] = {
    {name='GetFontFace', count=2, confidence=0.40, sample='function Details:GetFontFace (fontString)'},
  },
  ['SetFontOutline'] = {
    {name='SetFontOutline', count=39, confidence=1.00, sample='function Details:SetFontOutline (fontString, outline)'},
  },
  ['UseOutline'] = {
    {name='UseOutline', count=1, confidence=0.20, sample='function Details:UseOutline (outline)'},
  },
  ['RefreshBars'] = {
    {name='RefreshBars', count=9, confidence=1.00, sample='instance:RefreshBars()'},
  },
  ['HealthTick'] = {
    {name='HealthTick', count=2, confidence=0.40, sample='function Details:HealthTick()'},
  },
  ['PlayerHealthTick'] = {
    {name='PlayerHealthTick', count=2, confidence=0.40, sample='function Details:PlayerHealthTick()'},
  },
  ['FindGUIDFromName'] = {
    {name='FindGUIDFromName', count=1, confidence=0.20, sample='function Details:FindGUIDFromName (name) --deprecated? couldn't find any usage at november 2023'},
  },
  ['GradientEffect'] = {
    {name='GradientEffect', count=11, confidence=1.00, sample='gump:GradientEffect ( barra.textura, "texture", red, green, blue, alpha, grayscale, grayscale, grayscale, alpha, 1)'},
  },
  ['SetEndDelay'] = {
    {name='SetEndDelay', count=24, confidence=1.00, sample='fadeIn:SetEndDelay (flashInHoldTime or 0)'},
  },
  ['CreateFlashAnimation'] = {
    {name='CreateFlashAnimation', count=11, confidence=1.00, sample='function gump:CreateFlashAnimation (frame, onFinishFunc, onLoopFunc)'},
  },
  ['SetOrder'] = {
    {name='SetOrder', count=35, confidence=1.00, sample='FlashAnimation.fadeOut:SetOrder (1)'},
  },
  ['AddCustomIconSet'] = {
    {name='AddCustomIconSet', count=4, confidence=0.80, sample='function Details:AddCustomIconSet(path, dropdownLabel, isSpecIcons, dropdownIcon, dropdownIconTexCoords, dropdownIconSize, dropdownIconColor)'},
  },
  ['IsDragonflight'] = {
    {name='DetailsFramework.IsDragonflight', count=2, confidence=0.40, sample='elseif (DetailsFramework.IsDragonflight()) then'},
    {name='DF.IsDragonflight', count=4, confidence=0.80, sample='local isDragonflight = DF.IsDragonflight()'},
    {name='IsDragonflight', count=3, confidence=0.60, sample='--if (IsDragonflight()) then'},
  },
  ['Typhoon'] = {
    {name='Typhoon', count=5, confidence=1.00, sample='[50516]			= 	102, -- Typhoon (rank 1)'},
  },
  ['Starfall'] = {
    {name='Starfall', count=4, confidence=0.80, sample='[48505] 		=	102, -- Starfall (rank 1)'},
  },
  ['Bear'] = {
    {name='Bear', count=5, confidence=1.00, sample='[33878] 		= 	104, -- Mangle Bear (rank 1)'},
  },
  ['Growth'] = {
    {name='Growth', count=4, confidence=0.80, sample='[48438]			=	105, -- Wild Growth (rank 1)'},
  },
  ['Sting'] = {
    {name='Sting', count=6, confidence=1.00, sample='[19386]			=	255, -- Wyvern Sting (rank 1)'},
  },
  ['Arrow'] = {
    {name='Arrow', count=6, confidence=1.00, sample='[3674]			= 	255, -- Black Arrow (rank 1)'},
  },
  ['Shot'] = {
    {name='Shot', count=26, confidence=1.00, sample='[53301]			=	255, -- Explosive Shot (rank 1)'},
  },
  ['Barrage'] = {
    {name='Barrage', count=5, confidence=1.00, sample='[44425]			=	62, -- Arcane Barrage (rank 1)'},
  },
  ['Breath'] = {
    {name='Breath', count=6, confidence=1.00, sample='[31661]			=	63, -- Dragon's Breath (rank 1)'},
  },
  ['Shield'] = {
    {name='Shield', count=20, confidence=1.00, sample='[20925]			=	66, -- Holy Shield (rank 1)'},
  },
  ['Penance'] = {
    {name='Penance', count=4, confidence=0.80, sample='[47540]			=	256, -- Penance (rank 1)'},
  },
  ['Lightwell'] = {
    {name='Lightwell', count=6, confidence=1.00, sample='[724]			=	257, -- Lightwell (rank 1)'},
  },
  ['Healing'] = {
    {name='Healing', count=8, confidence=1.00, sample='[34861]			=	257, -- Circle of Healing (rank 1)'},
  },
  ['Touch'] = {
    {name='Touch', count=5, confidence=1.00, sample='[34914]			=	258, -- Vampiric Touch (rank 1)'},
  },
  ['Mutilate'] = {
    {name='Mutilate', count=6, confidence=1.00, sample='[1329]			=	259, -- Mutilate (rank 1)'},
  },
  ['Tables'] = {
    {name='Tables', count=3, confidence=0.60, sample='[52914]			=	259, -- Turn the Tables (rank 1)'},
  },
  ['Rogue'] = {
    {name='Rogue', count=2, confidence=0.40, sample='-- Combat Rogue (Outlaw Rogue):'},
  },
  ['Wrath'] = {
    {name='Wrath', count=6, confidence=1.00, sample='[30706]			=	262, -- Totem of Wrath (rank 1)'},
  },
  ['Thunderstorm'] = {
    {name='Thunderstorm', count=4, confidence=0.80, sample='[51490]			=	262, -- Thunderstorm (rank 1)'},
  },
  ['Riptide'] = {
    {name='Riptide', count=4, confidence=0.80, sample='[61295]			=	264, -- Riptide (rank 1)'},
  },
  ['Pact'] = {
    {name='Pact', count=23, confidence=1.00, sample='[18220]			=	265, -- Dark Pact (rank 1)'},
  },
  ['Haunt'] = {
    {name='Haunt', count=4, confidence=0.80, sample='[48181]			=	265, -- Haunt (rank 1)'},
  },
  ['Decimation'] = {
    {name='Decimation', count=2, confidence=0.40, sample='[63165]			=	266, -- Decimation (rank 1)'},
  },
  ['Shadowfury'] = {
    {name='Shadowfury', count=5, confidence=1.00, sample='[30283]			=	267, -- Shadowfury (rank 1)'},
  },
  ['Trauma'] = {
    {name='Trauma', count=2, confidence=0.40, sample='[46856]			=	71, -- Trauma (rank 1)'},
  },
  ['Devastate'] = {
    {name='Devastate', count=5, confidence=1.00, sample='[20243]			=	73, -- Devastate (rank 1)'},
  },
  ['Might'] = {
    {name='Might', count=4, confidence=0.80, sample='[53137]			=	250, -- Abomination's Might (rank 1)'},
  },
  ['Blast'] = {
    {name='Blast', count=4, confidence=0.80, sample='[49184]			=	251, -- Howling Blast (rank 1)'},
  },
  ['Desolation'] = {
    {name='Desolation', count=5, confidence=1.00, sample='[63583]			=	252, -- Desolation (rank 1)'},
  },
  ['Plague'] = {
    {name='Plague', count=3, confidence=0.60, sample='[51726]			=	252, -- Ebon Plague (rank 1)'},
  },
  ['Strength'] = {
    {name='Strength', count=9, confidence=1.00, sample='[53365]	=	"DEATHKNIGHT", --Unholy Strength (heal)'},
  },
  ['Shell'] = {
    {name='Shell', count=9, confidence=1.00, sample='[48707]	=	"DEATHKNIGHT", -- Anti-Magic Shell (heal)'},
  },
  ['Rejuvenation'] = {
    {name='Rejuvenation', count=1, confidence=0.20, sample='[155777]	=	"DRUID", -- "Rejuvenation (Germination)"'},
  },
  ['Flay'] = {
    {name='Flay', count=2, confidence=0.40, sample='[129197]	=	"PRIEST", -- Mind Flay (Insanity)'},
  },
  ['Recuperate'] = {
    {name='Recuperate', count=2, confidence=0.40, sample='[73651]	=	"ROGUE", --Recuperate (heal)'},
  },
  ['Aegis'] = {
    {name='Aegis', count=1, confidence=0.20, sample='[47753]	=	true,  --Divine Aegis (discipline)'},
  },
  ['Will'] = {
    {name='Will', count=1, confidence=0.20, sample='[152118]	=	true,  --Clarity of Will (talent)'},
  },
  ['Cocoon'] = {
    {name='Cocoon', count=1, confidence=0.20, sample='[116849]	=	true, --Life Cocoon (mistweaver)'},
  },
  ['Guard'] = {
    {name='Guard', count=2, confidence=0.40, sample='[115295]	=	true, --Guard (brewmaster)'},
  },
  ['Leech'] = {
    {name='Leech', count=2, confidence=0.40, sample='[108366]	=	true, --Soul Leech (talent)'},
  },
  ['Ward'] = {
    {name='Ward', count=1, confidence=0.20, sample='[1463]	=	true, --Incanter's Ward (talent)'},
  },
  ['Winter'] = {
    {name='Winter', count=1, confidence=0.20, sample='[57330]	=	true, -- Horn of Winter (buff)'},
  },
  ['Advance'] = {
    {name='Advance', count=1, confidence=0.20, sample='[96268]	=	true, -- Death's Advance (walk faster)'},
  },
  ['Swiftness'] = {
    {name='Swiftness', count=1, confidence=0.20, sample='[132158]	=	 true, -- Nature's Swiftness (misc)'},
  },
  ['Wild'] = {
    {name='Wild', count=11, confidence=1.00, sample='[1126]	=	 true, -- Mark of the Wild (buff)'},
  },
  ['Roll'] = {
    {name='Roll', count=1, confidence=0.20, sample='[109132]	=	true, -- Roll (neutral)'},
  },
  ['Speed'] = {
    {name='Speed', count=1, confidence=0.20, sample='[108212]	=	true, -- Burst of Speed (misc)'},
  },
  ['Elements'] = {
    {name='Elements', count=1, confidence=0.20, sample='[73680]	=	true, -- Unleash Elements (misc)'},
  },
  ['Frenzy'] = {
    {name='Frenzy', count=1, confidence=0.20, sample='--[49016]	=	true, -- Unholy Frenzy (attack cd)'},
  },
  ['Gargoyle'] = {
    {name='Gargoyle', count=7, confidence=1.00, sample='[49206]	=	true, -- Summon Gargoyle (attack cd)'},
  },
  ['Weapon'] = {
    {name='Weapon', count=1, confidence=0.20, sample='[49028]	=	true, -- Dancing Rune Weapon (attack cd)'},
  },
  ['Transformation'] = {
    {name='Transformation', count=1, confidence=0.20, sample='[63560]	=	true, -- Dark Transformation (pet)'},
  },
  ['Berserk'] = {
    {name='Berserk', count=1, confidence=0.20, sample='[106951]	=	 true, -- Berserk (attack cd)'},
  },
  ['Vigil'] = {
    {name='Vigil', count=1, confidence=0.20, sample='[124974]	=	 true, -- Nature's Vigil (attack cd)'},
  },
  ['Crows'] = {
    {name='Crows', count=1, confidence=0.20, sample='[131894]	=	true,-- A Murder of Crows (attack cd)'},
  },
  ['Stampede'] = {
    {name='Stampede', count=7, confidence=1.00, sample='[121818]	=	true,-- Stampede (attack cd)'},
  },
  ['Brew'] = {
    {name='Brew', count=1, confidence=0.20, sample='[116740]	=	true, -- Tigereye Brew (attack cd?)'},
  },
  ['Rush'] = {
    {name='Rush', count=4, confidence=0.80, sample='[13750]	=	true, -- Adrenaline Rush (attack cd)'},
  },
  ['Misery'] = {
    {name='Misery', count=7, confidence=1.00, sample='[113860]	=	true, -- Dark Soul: Misery (attack cd)'},
  },
  ['Recklessness'] = {
    {name='Recklessness', count=1, confidence=0.20, sample='[1719]	=	true, -- Recklessness (attack cd)'},
  },
  ['Conversion'] = {
    {name='Conversion', count=1, confidence=0.20, sample='[119975]	=	true, -- Conversion (heal)'},
  },
  ['Swiftmend'] = {
    {name='Swiftmend', count=1, confidence=0.20, sample='[18562]	=	 true, --Swiftmend (heal)'},
  },
  ['Lifebloom'] = {
    {name='Lifebloom', count=1, confidence=0.20, sample='[33763]	=	 true, -- Lifebloom (heal)'},
  },
  ['Exhilaration'] = {
    {name='Exhilaration', count=1, confidence=0.20, sample='[109304]	=	true,-- Exhilaration (heal)'},
  },
  ['Mist'] = {
    {name='Mist', count=1, confidence=0.20, sample='[124682]	=	true, -- Enveloping Mist (helpful)'},
  },
  ['Glory'] = {
    {name='Glory', count=7, confidence=1.00, sample='[85673]	=	true,-- Word of Glory (heal)'},
  },
  ['Feint'] = {
    {name='Feint', count=1, confidence=0.20, sample='[1966]	=	true, -- Feint (helpful)'},
  },
  ['Regeneration'] = {
    {name='Regeneration', count=1, confidence=0.20, sample='[108359]	=	true, -- Dark Regeneration (helpful)'},
  },
  ['GetSpellSchool'] = {
    {name='GetSpellSchool', count=1, confidence=0.20, sample='function Details:GetSpellSchool(spellID)'},
  },
  ['GetSpellSchoolName'] = {
    {name='GetSpellSchoolName', count=1, confidence=0.20, sample='function Details:GetSpellSchoolName(school)'},
  },
  ['GetSpellSchoolFormatedName'] = {
    {name='GetSpellSchoolFormatedName', count=5, confidence=1.00, sample='function Details:GetSpellSchoolFormatedName(school)'},
  },
  ['GetSpellSchoolColor'] = {
    {name='GetSpellSchoolColor', count=6, confidence=1.00, sample='function Details:GetSpellSchoolColor(school)'},
  },
  ['GetCooldownList'] = {
    {name='GetCooldownList', count=2, confidence=0.40, sample='function Details:GetCooldownList(class)'},
  },
  ['PackCombatData'] = {
    {name='PackCombatData', count=4, confidence=0.80, sample='local packedData = Details.packFunctions.PackCombatData(combat, 0x1B)'},
  },
  ['GetAllDataDebug'] = {
    {name='GetAllDataDebug', count=1, confidence=0.20, sample='function Details.packFunctions.GetAllDataDebug()'},
  },
  ['PackDamage'] = {
    {name='PackDamage', count=6, confidence=1.00, sample='Details.packFunctions.PackDamage(combatObject)'},
  },
  ['PackHeal'] = {
    {name='PackHeal', count=6, confidence=1.00, sample='Details.packFunctions.PackHeal(combatObject)'},
  },
  ['PackUtility'] = {
    {name='PackUtility', count=6, confidence=1.00, sample='Details.packFunctions.PackUtility(combatObject)'},
  },
  ['WowAddonChannel'] = {
    {name='WowAddonChannel', count=1, confidence=0.20, sample='--print("encoded for WowAddonChannel (debug):", format("%.2f", #dataEncoded/1024), "KBytes")'},
  },
  ['GenerateSerialNumber'] = {
    {name='GenerateSerialNumber', count=4, confidence=0.80, sample='function Details.packFunctions.GenerateSerialNumber()'},
  },
  ['C12345'] = {
    {name='C12345', count=1, confidence=0.20, sample='creature: C12345 (numbers are the npcId)'},
  },
  ['AddActorInformation'] = {
    {name='AddActorInformation', count=4, confidence=0.80, sample='function Details.packFunctions.AddActorInformation(actor)'},
  },
  ['RetriveActorInformation'] = {
    {name='RetriveActorInformation', count=4, confidence=0.80, sample='function Details.packFunctions.RetriveActorInformation(combatData, index)'},
  },
  ['CountTableEntriesValid'] = {
    {name='CountTableEntriesValid', count=11, confidence=1.00, sample='local targetsSize = Details.packFunctions.CountTableEntriesValid(spellTargets) * 2'},
  },
  ['UnPackDamage'] = {
    {name='UnPackDamage', count=6, confidence=1.00, sample='function Details.packFunctions.UnPackDamage(currentCombat, combatData, tablePosition)'},
  },
  ['UnpackTable'] = {
    {name='UnpackTable', count=20, confidence=1.00, sample='local targetTable = Details.packFunctions.UnpackTable(combatData, spellIndex+3, true)'},
  },
  ['UnPackHeal'] = {
    {name='UnPackHeal', count=6, confidence=1.00, sample='function Details.packFunctions.UnPackHeal(currentCombat, combatData, tablePosition)'},
  },
  ['UnPackUtility'] = {
    {name='UnPackUtility', count=5, confidence=1.00, sample='function Details.packFunctions.UnPackUtility(currentCombat, combatData, tablePosition)'},
  },
  ['UnPackUtiliyu'] = {
    {name='UnPackUtiliyu', count=1, confidence=0.20, sample='print("UnPackUtiliyu(): break | Utility loop has been stopped", "index:", i, "tablePosition:", tablePosition, "value:", combatData[tablePosition])'},
  },
  ['NovoContainer'] = {
    {name='NovoContainer', count=43, confidence=1.00, sample='actorObject.cooldowns_defensive_spells = Details.container_habilidades:NovoContainer(Details.container_type.CONTAINER_MISC_CLASS)'},
  },
  ['CountTableEntries'] = {
    {name='CountTableEntries', count=1, confidence=0.20, sample='function Details.packFunctions.CountTableEntries(hasTable)'},
  },
  ['QuickDispatchEvent'] = {
    {name='QuickDispatchEvent', count=2, confidence=0.40, sample='function Details:QuickDispatchEvent(func, event, ...)'},
  },
  ['QuickDispatchEventWithContext'] = {
    {name='QuickDispatchEventWithContext', count=7, confidence=1.00, sample='function Details:QuickDispatchEventWithContext(context, func, event, ...)'},
  },
  ['IsRegistred'] = {
    {name='IsRegistred', count=1, confidence=0.20, sample='function _detalhes.Buffs:IsRegistred (buff)'},
  },
  ['NewBuff'] = {
    {name='NewBuff', count=2, confidence=0.40, sample='function _detalhes.Buffs:NewBuff (BuffName, BuffId)'},
  },
  ['BuildBuffTable'] = {
    {name='BuildBuffTable', count=2, confidence=0.40, sample='_detalhes.Buffs.BuffsTable [BuffName] = _detalhes.Buffs:BuildBuffTable (BuffName, BuffId)'},
  },
  ['RemoveBuff'] = {
    {name='RemoveBuff', count=1, confidence=0.20, sample='function _detalhes.Buffs:RemoveBuff (BuffName)'},
  },
  ['GetBuffList'] = {
    {name='GetBuffList', count=1, confidence=0.20, sample='function _detalhes.Buffs:GetBuffList()'},
  },
  ['GetBuffListIds'] = {
    {name='GetBuffListIds', count=2, confidence=0.40, sample='function _detalhes.Buffs:GetBuffListIds()'},
  },
  ['UpdateBuff'] = {
    {name='UpdateBuff', count=1, confidence=0.20, sample='function _detalhes.Buffs:UpdateBuff (method)'},
  },
  ['SaveBuffs'] = {
    {name='SaveBuffs', count=1, confidence=0.20, sample='function _detalhes.Buffs:SaveBuffs()'},
  },
  ['CheckIfCanEnableImmersion'] = {
    {name='CheckIfCanEnableImmersion', count=3, confidence=0.60, sample='function immersionFrame.CheckIfCanEnableImmersion()'},
  },
  ['IsNpcInteresting'] = {
    {name='Details.Immersion.IsNpcInteresting', count=2, confidence=0.40, sample='function Details.Immersion.IsNpcInteresting(aID)'},
  },
  ['OpenEncounterBreakdown'] = {
    {name='OpenEncounterBreakdown', count=1, confidence=0.20, sample='function detailsOnDeathMenu.OpenEncounterBreakdown()'},
  },
  ['OpenPlayerEndurance'] = {
    {name='OpenPlayerEndurance', count=1, confidence=0.20, sample='function detailsOnDeathMenu.OpenPlayerEndurance()'},
  },
  ['OpenPlayerSpells'] = {
    {name='OpenPlayerSpells', count=1, confidence=0.20, sample='function detailsOnDeathMenu.OpenPlayerSpells()'},
  },
  ['CoolTipInject'] = {
    {name='CoolTipInject', count=7, confidence=1.00, sample='GameCooltip2:CoolTipInject (detailsOnDeathMenu.breakdownButton)'},
  },
  ['CanShowPanel'] = {
    {name='CanShowPanel', count=2, confidence=0.40, sample='function detailsOnDeathMenu.CanShowPanel()'},
  },
  ['StaticPopup_Visible'] = {
    {name='StaticPopup_Visible', count=1, confidence=0.20, sample='if (StaticPopup_Visible ("DEATH")) then'},
  },
  ['ShowPanel'] = {
    {name='ShowPanel', count=1, confidence=0.20, sample='function detailsOnDeathMenu.ShowPanel()'},
  },
  ['InstallRowAnimation'] = {
    {name='InstallRowAnimation', count=2, confidence=0.40, sample='function _detalhes:InstallRowAnimation (name, desc, func, options)'},
  },
  ['SelectRowAnimation'] = {
    {name='SelectRowAnimation', count=2, confidence=0.40, sample='function _detalhes:SelectRowAnimation (name)'},
  },
  ['GetRowAnimationList'] = {
    {name='GetRowAnimationList', count=1, confidence=0.20, sample='function _detalhes:GetRowAnimationList()'},
  },
  ['PLAYEDCLASS'] = {
    {name='SlashCmdList.PLAYEDCLASS', count=1, confidence=0.20, sample='function SlashCmdList.PLAYEDCLASS(msg, editbox)'},
  },
  ['DUMPTABLE'] = {
    {name='SlashCmdList.DUMPTABLE', count=1, confidence=0.20, sample='function SlashCmdList.DUMPTABLE(msg, editbox)'},
  },
  ['DETAILS'] = {
    {name='SlashCmdList.DETAILS', count=1, confidence=0.20, sample='function SlashCmdList.DETAILS (msg, editbox)'},
  },
  ['OpenRaidHistoryWindow'] = {
    {name='OpenRaidHistoryWindow', count=7, confidence=1.00, sample='Details:OpenRaidHistoryWindow()'},
  },
  ['ToggleWindow'] = {
    {name='ToggleWindow', count=2, confidence=0.40, sample='Details:ToggleWindow (instance)'},
  },
  ['SplitTextInLines'] = {
    {name='SplitTextInLines', count=4, confidence=0.80, sample='local callStackTable = detailsFramework:SplitTextInLines(callStack)'},
  },
  ['EnableInstance'] = {
    {name='EnableInstance', count=3, confidence=0.60, sample='instanceObject:EnableInstance()'},
  },
  ['WipeConfig'] = {
    {name='WipeConfig', count=2, confidence=0.40, sample='Details:WipeConfig()'},
  },
  ['OpenForge'] = {
    {name='Details.OpenForge', count=2, confidence=0.40, sample='Details.OpenForge()'},
    {name='OpenForge', count=3, confidence=0.60, sample='Details:OpenForge()'},
  },
  ['SelectModule'] = {
    {name='DetailsForgePanel.SelectModule', count=2, confidence=0.40, sample='DetailsForgePanel.SelectModule (_, _, 4)'},
  },
  ['CreateAnimationHub'] = {
    {name='CreateAnimationHub', count=43, confidence=1.00, sample='local A = detailsFramework:CreateAnimationHub (texture)'},
  },
  ['LoadAddOn'] = {
    {name='LoadAddOn', count=3, confidence=0.60, sample='local loaded, reason = LoadAddOn ("Details_DataStorage")'},
    {name='C_AddOns.LoadAddOn', count=9, confidence=1.00, sample='local loaded, reason = C_AddOns.LoadAddOn(CONST_ADDONNAME_DATASTORAGE)'},
  },
  ['DebugPets'] = {
    {name='Details.DebugPets', count=2, confidence=0.40, sample='Details.DebugPets()'},
  },
  ['DebugMyPets'] = {
    {name='Details.DebugMyPets', count=2, confidence=0.40, sample='Details.DebugMyPets()'},
  },
  ['ImageEditor'] = {
    {name='ImageEditor', count=12, confidence=1.00, sample='Details.gump:ImageEditor (callback, "Interface\\TALENTFRAME\\bg-paladin-holy", nil, {1, 1, 1, 1}) -- {0.25, 0.25, 0.25, 0.25}'},
  },
  ['FCF_GetChatWindowInfo'] = {
    {name='FCF_GetChatWindowInfo', count=3, confidence=0.60, sample='local name, fontSize, r, g, b, a, shown, locked = FCF_GetChatWindowInfo (1);'},
  },
  ['GetBackdropBorderColor'] = {
    {name='GetBackdropBorderColor', count=9, confidence=1.00, sample='print("bordercolor",f:GetBackdropBorderColor())'},
  },
  ['RefreshUserList'] = {
    {name='Details.RefreshUserList', count=10, confidence=1.00, sample='Details.RefreshUserList()'},
  },
  ['CreateListPanel'] = {
    {name='CreateListPanel', count=3, confidence=0.60, sample='f = Details:CreateListPanel()'},
  },
  ['SetMythicPlusDebugState'] = {
    {name='Details222.Debug.SetMythicPlusDebugState', count=3, confidence=0.60, sample='Details222.Debug.SetMythicPlusDebugState() --passing nothing will toggle the debug state'},
  },
  ['SetMythicPlusLootDebugState'] = {
    {name='Details222.Debug.SetMythicPlusLootDebugState', count=3, confidence=0.60, sample='Details222.Debug.SetMythicPlusLootDebugState() --passing nothing will toggle the debug state'},
  },
  ['ShowDebugOptionsPanel'] = {
    {name='Details.ShowDebugOptionsPanel', count=2, confidence=0.40, sample='Details.ShowDebugOptionsPanel()'},
  },
  ['LoggingCombat'] = {
    {name='LoggingCombat', count=2, confidence=0.40, sample='LoggingCombat (false)'},
  },
  ['GetBossModule'] = {
    {name='GetBossModule', count=2, confidence=0.40, sample='local mod = BigWigs:GetBossModule("Imperator Mar'gok")'},
  },
  ['Message'] = {
    {name='Message', count=1, confidence=0.20, sample='mod:Message("stages", "Neutral", "Long", "Phase 2", false)'},
  },
  ['BigWigs_Message'] = {
    {name='BigWigs_Message', count=1, confidence=0.20, sample='function addon:BigWigs_Message(event, module, key, text)'},
  },
  ['CreateTextEntry'] = {
    {name='CreateTextEntry', count=75, confidence=1.00, sample='Details.gump:CreateTextEntry(UIParent, function()end, 200, 20, nil, "DetailsPosBox")'},
  },
  ['GetCoinText'] = {
    {name='GetCoinText', count=1, confidence=0.20, sample='print(GetCoinText(c))'},
  },
  ['CreateBar'] = {
    {name='CreateBar', count=9, confidence=1.00, sample='bar = Details.gump:CreateBar (UIParent, nil, 600, 200, 100, nil, "DetailsTestBar")'},
  },
  ['SetTimer'] = {
    {name='SetTimer', count=8, confidence=1.00, sample='bar:SetTimer (start, fim)'},
  },
  ['CancelTimerBar'] = {
    {name='CancelTimerBar', count=2, confidence=0.40, sample='--C_Timer.After(5, function() bar:CancelTimerBar() end)'},
  },
  ['ScrollDamage'] = {
    {name='ScrollDamage', count=3, confidence=0.60, sample='Details:ScrollDamage()'},
  },
  ['EJ_SelectInstance'] = {
    {name='EncounterJournal.EJ_SelectInstance', count=1, confidence=0.20, sample='detailsFramework.EncounterJournal.EJ_SelectInstance (1031)'},
    {name='DetailsFramework.EncounterJournal.EJ_SelectInstance', count=6, confidence=1.00, sample='DetailsFramework.EncounterJournal.EJ_SelectInstance (EJID) --11ms per call'},
    {name='EJ_SelectInstance', count=4, confidence=0.80, sample='EJ_SelectInstance(raidInstanceID)'},
  },
  ['DumpTable'] = {
    {name='DumpTable', count=2, confidence=0.40, sample='Details:DumpTable (result)'},
  },
  ['OpenSurveyPanel'] = {
    {name='Details.Survey.OpenSurveyPanel', count=2, confidence=0.40, sample='Details.Survey.OpenSurveyPanel()'},
  },
  ['UpdateUserPanel'] = {
    {name='UpdateUserPanel', count=2, confidence=0.40, sample='Details:UpdateUserPanel (newList)'},
  },
  ['CreateHeader'] = {
    {name='CreateHeader', count=21, confidence=1.00, sample='DetailsUserPanel.Header = detailsFramework:CreateHeader(DetailsUserPanel, headerTable, headerOptions)'},
  },
  ['AddFrameToHeaderAlignment'] = {
    {name='AddFrameToHeaderAlignment', count=112, confidence=1.00, sample='line:AddFrameToHeaderAlignment (userNameText)'},
  },
  ['AlignWithHeader'] = {
    {name='AlignWithHeader', count=20, confidence=1.00, sample='line:AlignWithHeader (DetailsUserPanel.Header, "left")'},
  },
  ['CreateScrollBox'] = {
    {name='CreateScrollBox', count=33, confidence=1.00, sample='local usersScroll = detailsFramework:CreateScrollBox (DetailsUserPanel, "$parentUsersScroll", scrollRefresh, DetailsUserPanel.Data, scroll_width, scroll_height, scroll_lines, scroll_line_height)'},
  },
  ['ReskinSlider'] = {
    {name='ReskinSlider', count=49, confidence=1.00, sample='detailsFramework:ReskinSlider(usersScroll)'},
  },
  ['CreateLine'] = {
    {name='CreateLine', count=38, confidence=1.00, sample='usersScroll:CreateLine (scroll_createline)'},
  },
  ['NewScrollBar'] = {
    {name='NewScrollBar', count=4, confidence=0.80, sample='Details.gump:NewScrollBar (container_barras_window, container_barras, -10, -17)'},
  },
  ['Altura'] = {
    {name='Altura', count=4, confidence=0.80, sample='container_barras_window.slider:Altura(550)'},
  },
  ['ReplaceKeystoneCommand'] = {
    {name='ReplaceKeystoneCommand', count=1, confidence=0.20, sample='function Details:ReplaceKeystoneCommand(addonObject, memberName, ...)'},
  },
  ['SetMask'] = {
    {name='SetMask', count=11, confidence=1.00, sample='detailsFramework:SetMask(teleportButton.Icon, [[Interface\AddOns\Details\images\masks\portal_mask.tga]])'},
  },
  ['CreateCastBar'] = {
    {name='CreateCastBar', count=4, confidence=0.80, sample='teleportButton.CastBar = detailsFramework:CreateCastBar(teleportButton, "DetailsMythicPlusKeysCastBar" .. i, {DontUpdateAlpha=true,FillOnInterrupt=false, NoFadeEffects=true})'},
  },
  ['Keystones'] = {
    {name='Keystones', count=1, confidence=0.20, sample='local detailsKeystoneInfoFrame = detailsFramework:CreateSimplePanel(UIParent, CONST_WINDOW_WIDTH, CONST_WINDOW_HEIGHT, "M+ Keystones (/key, /keys, /keystone)", "DetailsKeystoneInfoFrame")'},
  },
  ['IntegerToCooldownTime'] = {
    {name='IntegerToCooldownTime', count=3, confidence=0.60, sample='cooldownBlocker.cooldownText:SetText(detailsFramework:IntegerToCooldownTime((start + duration) - GetTime()) .. "\n remaining")'},
  },
  ['IsSpellInSpellBook'] = {
    {name='C_SpellBook.IsSpellInSpellBook', count=3, confidence=0.60, sample='if (C_SpellBook.IsSpellInSpellBook(spellId)) then'},
  },
  ['KEYSTONE'] = {
    {name='SlashCmdList.KEYSTONE', count=1, confidence=0.20, sample='function SlashCmdList.KEYSTONE(msg, editbox)'},
  },
  ['ChatEdit_SendText'] = {
    {name='ChatEdit_SendText', count=2, confidence=0.40, sample='--DEFAULT_CHAT_FRAME.editBox:SetText("/bwkey") ChatEdit_SendText(DEFAULT_CHAT_FRAME.editBox, 0)'},
  },
  ['CreateSwitch'] = {
    {name='CreateSwitch', count=20, confidence=1.00, sample='local dndCheckbox = detailsFramework:CreateSwitch(f, function(_, _, checked) Details.slashk_dnd = checked; LIB_OPEN_RAID_MYTHIC_PLUS_DND = checked end, Details.slashk_dnd)'},
  },
  ['SetAsCheckBox'] = {
    {name='SetAsCheckBox', count=40, confidence=1.00, sample='dndCheckbox:SetAsCheckBox()'},
  },
  ['GetAllCheckboxes'] = {
    {name='GetAllCheckboxes', count=11, confidence=1.00, sample='local radioCheckboxes = radioGroup:GetAllCheckboxes()'},
  },
  ['CreateRadioGroup'] = {
    {name='CreateRadioGroup', count=4, confidence=0.80, sample='local selectAddonRadioGroup = detailsFramework:CreateRadioGroup(selectAddonFrame, mainTabSelectorRadioOptions, "$parentSelector", radioGroupSettings, radioGroupLayout)'},
  },
  ['CreateStatusBar'] = {
    {name='CreateStatusBar', count=9, confidence=1.00, sample='local statusBar = detailsFramework:CreateStatusBar(f)'},
  },
  ['GuildRoster'] = {
    {name='C_GuildInfo.GuildRoster', count=2, confidence=0.40, sample='C_GuildInfo.GuildRoster()'},
  },
  ['RequestKeystoneDataFromGuild'] = {
    {name='RequestKeystoneDataFromGuild', count=2, confidence=0.40, sample='openRaidLib.RequestKeystoneDataFromGuild()'},
  },
  ['FriendsFrameAddFriendButton_OnClick'] = {
    {name='FriendsFrameAddFriendButton_OnClick', count=1, confidence=0.20, sample='FriendsFrameAddFriendButton_OnClick()'},
  },
  ['GetFriendInfo'] = {
    {name='C_FriendList.GetFriendInfo', count=2, confidence=0.40, sample='local info = C_FriendList.GetFriendInfo(dfButton.playerName)'},
  },
  ['FormatDateByLocale'] = {
    {name='FormatDateByLocale', count=3, confidence=0.60, sample='local timeWhen = detailsFramework.string.FormatDateByLocale(dfButton.recentPlayerTable[2], false)'},
  },
  ['Acronym'] = {
    {name='Acronym', count=3, confidence=0.60, sample='local shortName = detailsFramework.string.Acronym(zoneName)'},
  },
  ['SetFriendNotes'] = {
    {name='C_FriendList.SetFriendNotes', count=1, confidence=0.20, sample='C_FriendList.SetFriendNotes(dfButton.playerName, "Added from Details! /keys.\n" .. timeWhen .. " Key: " .. finalText)'},
  },
  ['UnpackRecentPlayerTable'] = {
    {name='UnpackRecentPlayerTable', count=3, confidence=0.60, sample='local activityType, timeWhen, playerName, classId, specId, mapId, playedTogetherAmount, param1, param2, param3, param4 = Details:UnpackRecentPlayerTable(recentPlayerTable)'},
  },
  ['AddClassColorToText'] = {
    {name='AddClassColorToText', count=8, confidence=1.00, sample='dfButton.playerName:SetText(detailsFramework:AddClassColorToText(detailsFramework:RemoveRealmName(playerName), detailsFramework.ClassIndexToFileName[classId]))'},
  },
  ['GetRoleIconAndCoords'] = {
    {name='GetRoleIconAndCoords', count=5, confidence=1.00, sample='local texture L, R, T, B = detailsFramework:GetRoleIconAndCoords(role)'},
  },
  ['CreateTextureInfo'] = {
    {name='CreateTextureInfo', count=3, confidence=0.60, sample='local textureInfo = detailsFramework:CreateTextureInfo(texture, 18, 18, 0, 1, 0, 1, 256, 128)'},
  },
  ['AddTextureToText'] = {
    {name='AddTextureToText', count=3, confidence=0.60, sample='finalText = detailsFramework:AddTextureToText(finalText, textureInfo, bAddSpace, bAddAfterText)'},
  },
  ['CreateGridScrollBox'] = {
    {name='CreateGridScrollBox', count=4, confidence=0.80, sample='local gridScrollBox = detailsFramework:CreateGridScrollBox(recentPlayersFrame, "DetailsMythicPlusRecentPlayersGrid", refreshRecentFriends, tbdData, createRecentPlayerButton, gridScrollBoxOptions)'},
  },
  ['GetNumGuildMembers'] = {
    {name='GetNumGuildMembers', count=2, confidence=0.40, sample='--for i = 1, GetNumGuildMembers() do'},
  },
  ['TruncateText'] = {
    {name='TruncateText', count=12, confidence=1.00, sample='detailsFramework:TruncateText(line.dungeonNameText, 150)'},
  },
  ['GetRunIdLikesGivenByPlayerSelf'] = {
    {name='DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf', count=3, confidence=0.60, sample='local likesGiven = DetailsMythicPlus and DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf and DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf(unitName) or {}'},
  },
  ['GetSimpleDescription'] = {
    {name='DetailsMythicPlus.GetSimpleDescription', count=1, confidence=0.20, sample='label = DetailsMythicPlus.GetSimpleDescription(runId),'},
  },
  ['IsOpen'] = {
    {name='IsOpen', count=3, confidence=0.60, sample='if (not line.selectRunDropdown:IsOpen()) then'},
  },
  ['SetFunction'] = {
    {name='SetFunction', count=9, confidence=1.00, sample='line.selectRunDropdown:SetFunction(refreshRunDropdown)'},
  },
  ['GetHeaderColumnByName'] = {
    {name='GetHeaderColumnByName', count=5, confidence=1.00, sample='local likesGivenHeader = f.Header:GetHeaderColumnByName("likesGiven")'},
  },
  ['AdjustPointsOffset'] = {
    {name='AdjustPointsOffset', count=2, confidence=0.40, sample='scrollFrame.ScrollBar:AdjustPointsOffset(-23, -1)'},
  },
  ['CreateDropDown'] = {
    {name='CreateDropDown', count=20, confidence=1.00, sample='local selectRunDropdown = detailsFramework:CreateDropDown(line, refreshDropdown, 1, 100, 20, "selectRunDropdown", nil, detailsFramework:GetTemplate("dropdown", "OPTIONS_DROPDOWN_TEMPLATE"))'},
  },
  ['GetRecentPlayers'] = {
    {name='GetRecentPlayers', count=4, confidence=0.80, sample='local recentPlayers = Details:GetRecentPlayers()'},
  },
  ['GetAllKeystonesInfo'] = {
    {name='GetAllKeystonesInfo', count=3, confidence=0.60, sample='local keystoneData = openRaidLib.GetAllKeystonesInfo()'},
    {name='KeystoneInfoManager.GetAllKeystonesInfo', count=2, confidence=0.40, sample='return openRaidLib.KeystoneInfoManager.GetAllKeystonesInfo()'},
  },
  ['GetLines'] = {
    {name='GetLines', count=16, confidence=1.00, sample='local lines = scrollFrame:GetLines()'},
  },
  ['GetGuildRosterInfo'] = {
    {name='GetGuildRosterInfo', count=2, confidence=0.40, sample='--create a string to use into the gsub call when removing the realm name from the player name, by default all player names returned from GetGuildRosterInfo() has PlayerName-RealmName format'},
  },
  ['GetSelectedColumn'] = {
    {name='GetSelectedColumn', count=10, confidence=1.00, sample='local columnIndex, order = f.Header:GetSelectedColumn()'},
  },
  ['OnKeystoneUpdate'] = {
    {name='OnKeystoneUpdate', count=1, confidence=0.20, sample='function f.OnKeystoneUpdate(unitId, keystoneInfo, allKeystonesInfo)'},
  },
  ['WipeKeystoneData'] = {
    {name='WipeKeystoneData', count=2, confidence=0.40, sample='--openRaidLib.WipeKeystoneData()'},
  },
  ['RequestKeystoneDataFromRaid'] = {
    {name='RequestKeystoneDataFromRaid', count=3, confidence=0.60, sample='openRaidLib.RequestKeystoneDataFromRaid()'},
  },
  ['RequestKeystoneDataFromParty'] = {
    {name='RequestKeystoneDataFromParty', count=2, confidence=0.40, sample='openRaidLib.RequestKeystoneDataFromParty()'},
  },
  ['ReplaceNoteCommand'] = {
    {name='ReplaceNoteCommand', count=2, confidence=0.40, sample='function Details:ReplaceNoteCommand(addonObject, memberName, noteCommandToReplace, ...)'},
  },
  ['Notes'] = {
    {name='Notes', count=7, confidence=1.00, sample='local mainFrame = detailsFramework:CreateSimplePanel(UIParent, 600, 400, "Notes (/note) Options", "DetailsNoteOptionsFrame")'},
  },
  ['RefreshFrameSettings'] = {
    {name='DetailsNoteScreenFrame.RefreshFrameSettings', count=12, confidence=1.00, sample='DetailsNoteScreenFrame.RefreshFrameSettings()'},
    {name='RefreshFrameSettings', count=2, confidence=0.40, sample='function screenFrame.RefreshFrameSettings()'},
  },
  ['RefreshNoteTextSettings'] = {
    {name='DetailsNoteScreenFrame.RefreshNoteTextSettings', count=1, confidence=0.20, sample='DetailsNoteScreenFrame.RefreshNoteTextSettings()'},
    {name='RefreshNoteTextSettings', count=2, confidence=0.40, sample='function screenFrame.RefreshNoteTextSettings()'},
  },
  ['GetDefaultBackdropColor'] = {
    {name='GetDefaultBackdropColor', count=12, confidence=1.00, sample='local red, green, blue = detailsFramework:GetDefaultBackdropColor()'},
  },
  ['BuildMenu'] = {
    {name='BuildMenu', count=31, confidence=1.00, sample='detailsFramework:BuildMenu(mainFrame, options, 3, -57, 580, false, options_text_template, options_dropdown_template, options_switch_template, true, options_slider_template, options_button_template)'},
  },
  ['OpenNoteScreenPanel'] = {
    {name='OpenNoteScreenPanel', count=3, confidence=0.60, sample='noteEditor.OpenNoteScreenPanel(UnitName("player"), testText, invalidCommId, bIsSimulateOnClient)'},
  },
  ['NewSpecialLuaEditorEntry'] = {
    {name='NewSpecialLuaEditorEntry', count=15, confidence=1.00, sample='local editboxNotes = detailsFramework:NewSpecialLuaEditorEntry(mainFrame, CONST_WINDOW_WIDTH - 10, CONST_WINDOW_HEIGHT - 30, "editboxNotes", "$parentAPIEditbox", true)'},
  },
  ['SetPlayerNote'] = {
    {name='SetPlayerNote', count=5, confidence=1.00, sample='openRaidLib.SetPlayerNote(noteText)'},
  },
  ['SendPlayerNote'] = {
    {name='SendPlayerNote', count=3, confidence=0.60, sample='openRaidLib.SendPlayerNote()'},
  },
  ['PrepareUnitRoleTables'] = {
    {name='PrepareUnitRoleTables', count=2, confidence=0.40, sample='function noteEditor.PrepareUnitRoleTables(unitIds)'},
  },
  ['FindAndColorUnitNames'] = {
    {name='FindAndColorUnitNames', count=2, confidence=0.40, sample='function noteEditor.FindAndColorUnitNames(text)'},
  },
  ['ParseNoteText'] = {
    {name='ParseNoteText', count=3, confidence=0.60, sample='function noteEditor.ParseNoteText(text, bNoColoring)'},
  },
  ['HasAnyNoteSaved'] = {
    {name='HasAnyNoteSaved', count=1, confidence=0.20, sample='function mainFrame.HasAnyNoteSaved()'},
  },
  ['GenerateNewNoteName'] = {
    {name='GenerateNewNoteName', count=3, confidence=0.60, sample='function mainFrame.GenerateNewNoteName()'},
  },
  ['SaveNote'] = {
    {name='SaveNote', count=5, confidence=1.00, sample='function mainFrame.SaveNote(noteIndex)'},
  },
  ['SetNoteName'] = {
    {name='SetNoteName', count=2, confidence=0.40, sample='function mainFrame.SetNoteName(noteIndex, newName)'},
  },
  ['SelectNote'] = {
    {name='SelectNote', count=3, confidence=0.60, sample='function mainFrame.SelectNote(noteIndex)'},
  },
  ['CreateEmptyNote'] = {
    {name='CreateEmptyNote', count=2, confidence=0.40, sample='function mainFrame.CreateEmptyNote()'},
  },
  ['EraseNote'] = {
    {name='EraseNote', count=2, confidence=0.40, sample='function mainFrame.EraseNote(noteIndex)'},
  },
  ['CreateHighlightTexture'] = {
    {name='CreateHighlightTexture', count=12, confidence=1.00, sample='detailsFramework:CreateHighlightTexture(newButton)'},
  },
  ['CreatePool'] = {
    {name='CreatePool', count=4, confidence=0.80, sample='local playerSelectionPool = detailsFramework:CreatePool(createNewPlayerSelectionButton)'},
  },
  ['RefreshPickPlayer'] = {
    {name='RefreshPickPlayer', count=4, confidence=0.80, sample='function mainFrame.RefreshPickPlayer()'},
  },
  ['SetTextTruncated'] = {
    {name='SetTextTruncated', count=3, confidence=0.60, sample='selectPlayerButton:SetTextTruncated(unitName, columnWidth - 30)'},
  },
  ['ShowErrorMsg'] = {
    {name='ShowErrorMsg', count=3, confidence=0.60, sample='mainFrame.ShowErrorMsg(msg)'},
  },
  ['OpenNoteOptionsPanel'] = {
    {name='OpenNoteOptionsPanel', count=2, confidence=0.40, sample='noteEditor.OpenNoteOptionsPanel()'},
  },
  ['CreateFrameShake'] = {
    {name='CreateFrameShake', count=6, confidence=1.00, sample='local shake = detailsFramework:CreateFrameShake(errorMsg, 0.4, 6, 20, false, true, 0, 1, 0, 0.3)'},
  },
  ['PlayFrameShake'] = {
    {name='PlayFrameShake', count=5, confidence=1.00, sample='mainFrame.ErrorMsg:PlayFrameShake(shake)'},
  },
  ['SetNote'] = {
    {name='SetNote', count=2, confidence=0.40, sample='function screenFrame.SetNote(sender, text)'},
  },
  ['AddRoleIconToText'] = {
    {name='AddRoleIconToText', count=2, confidence=0.40, sample='sender = detailsFramework:AddRoleIconToText(sender, unitRole, size)'},
  },
  ['RegisterForMouse'] = {
    {name='RegisterForMouse', count=3, confidence=0.60, sample='rightClickFrame:RegisterForMouse("RightButtonDown")'},
  },
  ['SetPassThroughButtons'] = {
    {name='SetPassThroughButtons', count=3, confidence=0.60, sample='rightClickFrame:SetPassThroughButtons("LeftButton")'},
  },
  ['InvertInRange'] = {
    {name='Math.InvertInRange', count=2, confidence=0.40, sample='screenFrame:SetColor(screenRed, screenGreen, screenBlue, detailsFramework.Math.InvertInRange(0, 1, config["transparency"]))'},
    {name='InvertInRange', count=8, confidence=1.00, sample='---@field InvertInRange fun(minValue: number, maxValue: number, value: number) : number invert the value in a range, example: InvertInRange(0, 1, 0.75) return 0.25, InvertInRange(0, 100, 75) return 25, InvertInRange(-1, 1, 0.5) return -0.5, InvertInRange(-3, 1, -0.75) return -2.25'},
    {name='DF.Math.InvertInRange', count=1, confidence=0.20, sample='function DF.Math.InvertInRange(minValue, maxValue, value)'},
  },
  ['CreateReportInfoFromType'] = {
    {name='CreateReportInfoFromType', count=1, confidence=0.20, sample='local reportInfo = ReportInfo:CreateReportInfoFromType(reportType)'},
  },
  ['SetReportTarget'] = {
    {name='SetReportTarget', count=1, confidence=0.20, sample='reportInfo:SetReportTarget(currentSenderName)'},
  },
  ['SetMajorType'] = {
    {name='SetMajorType', count=1, confidence=0.20, sample='ReportFrame:SetMajorType(Enum.ReportMajorCategory.InappropriateCommunication)'},
  },
  ['InitiateReport'] = {
    {name='InitiateReport', count=1, confidence=0.20, sample='ReportFrame:InitiateReport(reportInfo, currentSenderName, playerLocation, bIsBnetReport, bSendReportWithoutDialog)'},
  },
  ['MajorTypeSelected'] = {
    {name='MajorTypeSelected', count=1, confidence=0.20, sample='ReportFrame:MajorTypeSelected(reportType, Enum.ReportMajorCategory.InappropriateCommunication)'},
  },
  ['SetOffset'] = {
    {name='SetOffset', count=10, confidence=1.00, sample='screenFrame.FlashTexture.FadeInAnimation.transInAnim:SetOffset(0, -screenFrameHeight/2)'},
  },
  ['NOTE'] = {
    {name='SlashCmdList.NOTE', count=1, confidence=0.20, sample='function SlashCmdList.NOTE(msg, editbox)'},
  },
  ['OpenNoteEditor'] = {
    {name='OpenNoteEditor', count=4, confidence=0.80, sample='noteEditor.OpenNoteEditor()'},
  },
  ['NOTES'] = {
    {name='SlashCmdList.NOTES', count=1, confidence=0.20, sample='function SlashCmdList.NOTES(msg, editbox)'},
  },
  ['NOTEPAD'] = {
    {name='SlashCmdList.NOTEPAD', count=1, confidence=0.20, sample='function SlashCmdList.NOTEPAD(msg, editbox)'},
  },
  ['ShowBestInShowFrame'] = {
    {name='Details.Commentator.ShowBestInShowFrame', count=2, confidence=0.40, sample='--atm the moment using "/run Details.Commentator.ShowBestInShowFrame(secondsToHide, height)"'},
  },
  ['GetBestInShowFrame'] = {
    {name='Details.Commentator.GetBestInShowFrame', count=1, confidence=0.20, sample='function Details.Commentator.GetBestInShowFrame()'},
  },
  ['GetTimeSample'] = {
    {name='Details222.CurrentDPS.GetTimeSample', count=3, confidence=0.60, sample='function Details222.CurrentDPS.GetTimeSample()'},
  },
  ['GetCurrentDps'] = {
    {name='Details.CurrentDps.GetCurrentDps', count=3, confidence=0.60, sample='function Details.CurrentDps.GetCurrentDps(serial)'},
  },
  ['StartCurrentDpsTracker'] = {
    {name='Details.CurrentDps.StartCurrentDpsTracker', count=2, confidence=0.40, sample='function Details.CurrentDps.StartCurrentDpsTracker()'},
  },
  ['StopCurrentDpsTracker'] = {
    {name='Details.CurrentDps.StopCurrentDpsTracker', count=2, confidence=0.40, sample='function Details.CurrentDps.StopCurrentDpsTracker()'},
  },
  ['RegisterDragonFlightEditMode'] = {
    {name='Details.RegisterDragonFlightEditMode', count=1, confidence=0.20, sample='function Details.RegisterDragonFlightEditMode()'},
  },
  ['BossModsLink'] = {
    {name='BossModsLink', count=1, confidence=0.20, sample='function Details:BossModsLink()'},
  },
  ['BigWigs_SetStage'] = {
    {name='BigWigs_SetStage', count=1, confidence=0.20, sample='function Details:BigWigs_SetStage (event, module, phase)'},
  },
  ['CreateCallbackListeners'] = {
    {name='CreateCallbackListeners', count=2, confidence=0.40, sample='Details:CreateCallbackListeners()'},
  },
  ['RegisterBigWigsCallBack'] = {
    {name='RegisterBigWigsCallBack', count=1, confidence=0.20, sample='function Details:RegisterBigWigsCallBack()'},
  },
  ['BigWigs_StartBar'] = {
    {name='BigWigs_StartBar', count=1, confidence=0.20, sample='function Details:BigWigs_StartBar(event, module, spellid, bar_text, time, icon, ...)'},
  },
  ['GetAttributeName'] = {
    {name='GetAttributeName', count=1, confidence=0.20, sample='function _detalhes:GetAttributeName (attribute)'},
  },
  ['GetSubAttributeName'] = {
    {name='GetSubAttributeName', count=7, confidence=1.00, sample='function _detalhes:GetSubAttributeName (attribute, subAttribute, customName)'},
  },
  ['GetInternalSubAttributeName'] = {
    {name='GetInternalSubAttributeName', count=2, confidence=0.40, sample='function _detalhes:GetInternalSubAttributeName (attribute, subAttribute)'},
  },
  ['AddDamageToGUID'] = {
    {name='AddDamageToGUID', count=3, confidence=0.60, sample='function plater_integration_frame.AddDamageToGUID (sourceGUID, targetGUID, time, amount)'},
  },
  ['CreateProfile'] = {
    {name='CreateProfile', count=5, confidence=1.00, sample='function Details:CreateProfile(profileName)'},
  },
  ['GetProfileList'] = {
    {name='GetProfileList', count=6, confidence=1.00, sample='function Details:GetProfileList()'},
  },
  ['EraseProfile'] = {
    {name='EraseProfile', count=3, confidence=0.60, sample='function Details:EraseProfile(profileName)'},
  },
  ['SetProfileCProp'] = {
    {name='SetProfileCProp', count=2, confidence=0.40, sample='function Details:SetProfileCProp (name, cprop, value)'},
  },
  ['ExportSkin'] = {
    {name='ExportSkin', count=4, confidence=0.80, sample='local exported = instance:ExportSkin()'},
  },
  ['GetPosition'] = {
    {name='GetPosition', count=4, confidence=0.80, sample='exported.__pos = Details.CopyTable(instance:GetPosition())'},
  },
  ['SaveProfile'] = {
    {name='SaveProfile', count=3, confidence=0.60, sample='Details:SaveProfile()'},
    {name='SavedVars.SaveProfile', count=2, confidence=0.40, sample='detailsFramework.SavedVars.SaveProfile(addonObject)'},
  },
  ['SaveLocalInstanceConfig'] = {
    {name='SaveLocalInstanceConfig', count=4, confidence=0.80, sample='Details:SaveLocalInstanceConfig()'},
  },
  ['IsStarted'] = {
    {name='IsStarted', count=5, confidence=1.00, sample='if (instance:IsStarted()) then'},
  },
  ['ResetInstanceConfig'] = {
    {name='ResetInstanceConfig', count=5, confidence=1.00, sample='instance1:ResetInstanceConfig()'},
  },
  ['LoadLocalInstanceConfig'] = {
    {name='LoadLocalInstanceConfig', count=4, confidence=0.80, sample='instance1:LoadLocalInstanceConfig()'},
  },
  ['CreateDisabledInstance'] = {
    {name='CreateDisabledInstance', count=2, confidence=0.40, sample='instance = Details:CreateDisabledInstance (index, skin)'},
  },
  ['LoadInstanceConfig'] = {
    {name='LoadInstanceConfig', count=3, confidence=0.60, sample='instance:LoadInstanceConfig()'},
  },
  ['X'] = {
    {name='X', count=1, confidence=0.20, sample='--tinsert(Details.resize_debug, #Details.resize_debug+1, "libwindow X (427): " .. (instance.libwindow.x or 0))'},
  },
  ['SaveState_CurrentMythicDungeonRun'] = {
    {name='SaveState_CurrentMythicDungeonRun', count=2, confidence=0.40, sample='function Details:SaveState_CurrentMythicDungeonRun(runID, zoneName, zoneID, startAt, segmentID, level, ejID, latestBossAt)'},
  },
  ['UpdateState_CurrentMythicDungeonRun'] = {
    {name='UpdateState_CurrentMythicDungeonRun', count=3, confidence=0.60, sample='function Details:UpdateState_CurrentMythicDungeonRun(stillOngoing, segmentID, latestBossAt)'},
  },
  ['ExportCurrentProfile'] = {
    {name='ExportCurrentProfile', count=2, confidence=0.40, sample='function Details:ExportCurrentProfile()'},
  },
  ['ImportProfile'] = {
    {name='ImportProfile', count=3, confidence=0.60, sample='function Details:ImportProfile (profileString, newProfileName, bImportAutoRunCode, bIsFromImportPrompt, overwriteExisting)'},
  },
  ['ShowImportProfileConfirmation'] = {
    {name='Details.ShowImportProfileConfirmation', count=2, confidence=0.40, sample='function Details.ShowImportProfileConfirmation(message, callback)'},
  },
  ['SegmentInfo'] = {
    {name='Details.SegmentInfo', count=2, confidence=0.40, sample='Details.SegmentInfo (segment)'},
  },
  ['SegmentElapsedTime'] = {
    {name='Details.SegmentElapsedTime', count=2, confidence=0.40, sample='Details.SegmentElapsedTime (segment)'},
  },
  ['SegmentDamagingUnits'] = {
    {name='Details.SegmentDamagingUnits', count=2, confidence=0.40, sample='Details.SegmentDamagingUnits (segment)'},
  },
  ['SegmentHealingUnits'] = {
    {name='Details.SegmentHealingUnits', count=2, confidence=0.40, sample='Details.SegmentHealingUnits (segment)'},
  },
  ['SegmentTotalDamage'] = {
    {name='Details.SegmentTotalDamage', count=2, confidence=0.40, sample='Details.SegmentTotalDamage (segment)'},
  },
  ['SegmentTotalHealing'] = {
    {name='Details.SegmentTotalHealing', count=2, confidence=0.40, sample='Details.SegmentTotalHealing (segment)'},
  },
  ['SegmentPhases'] = {
    {name='Details.SegmentPhases', count=2, confidence=0.40, sample='Details.SegmentPhases (segment)'},
    {name='SegmentPhases', count=1, confidence=0.20, sample='desc = "The phase number of an encounter. Some encounters has transition phases considered 'phase 1.5'. You may query SegmentPhases() to know which phases the encounter has.",'},
  },
  ['UnitDamageByPhase'] = {
    {name='UnitDamageByPhase', count=1, confidence=0.20, sample='desc = "A table containing numbers representing phases of the encounter, these numbers can used with UnitDamageByPhase().",'},
    {name='Details.UnitDamageByPhase', count=2, confidence=0.40, sample='Details.UnitDamageByPhase (unitId, phaseNumber, segment)'},
  },
  ['UnitInfo'] = {
    {name='Details.UnitInfo', count=2, confidence=0.40, sample='Details.UnitInfo (unitId, segment)'},
  },
  ['UnitTexture'] = {
    {name='Details.UnitTexture', count=2, confidence=0.40, sample='Details.UnitTexture (unitId, segment)'},
  },
  ['UnitDamageInfo'] = {
    {name='Details.UnitDamageInfo', count=2, confidence=0.40, sample='Details.UnitDamageInfo (unitId, segment)'},
  },
  ['UnitDamageBySpell'] = {
    {name='Details.UnitDamageBySpell', count=2, confidence=0.40, sample='Details.UnitDamageBySpell (unitId, spellId, segment)'},
  },
  ['UnitDamageSpellInfo'] = {
    {name='Details.UnitDamageSpellInfo', count=2, confidence=0.40, sample='Details.UnitDamageSpellInfo (unitId, spellId, segment)'},
  },
  ['GetSpellCastAmount'] = {
    {name='GetSpellCastAmount', count=14, confidence=1.00, sample='spellInfo.casted = combatObject:GetSpellCastAmount(unitName, spellName)'},
  },
  ['UnitDamageSpellOnUnit'] = {
    {name='Details.UnitDamageSpellOnUnit', count=2, confidence=0.40, sample='Details.UnitDamageSpellOnUnit (unitId, spellId, segment)'},
  },
  ['UnitDamageTaken'] = {
    {name='Details.UnitDamageTaken', count=2, confidence=0.40, sample='Details.UnitDamageTaken (unitId, segment)'},
  },
  ['UnitDamageOnUnit'] = {
    {name='Details.UnitDamageOnUnit', count=3, confidence=0.60, sample='Details.UnitDamageOnUnit (unitId, targetUnitId, segment)'},
  },
  ['UnitDamageTakenFromSpell'] = {
    {name='Details.UnitDamageTakenFromSpell', count=2, confidence=0.40, sample='Details.UnitDamageTakenFromSpell (unitId, spellId, segment)'},
  },
  ['UnitDamagingSpells'] = {
    {name='Details.UnitDamagingSpells', count=2, confidence=0.40, sample='Details.UnitDamagingSpells (unitId, segment)'},
  },
  ['UnitDamagingTargets'] = {
    {name='Details.UnitDamagingTargets', count=2, confidence=0.40, sample='Details.UnitDamagingTargets (unitId, segment)'},
  },
  ['UnitDamagingPets'] = {
    {name='Details.UnitDamagingPets', count=2, confidence=0.40, sample='Details.UnitDamagingPets (unitId, segment)'},
  },
  ['UnitHealing'] = {
    {name='Details.UnitHealing', count=3, confidence=0.60, sample='Details.UnitHealing (unitId, segment)'},
  },
  ['UnitHealingInfo'] = {
    {name='Details.UnitHealingInfo', count=2, confidence=0.40, sample='Details.UnitHealingInfo (unitId, segment)'},
  },
  ['UnitHealingBySpell'] = {
    {name='Details.UnitHealingBySpell', count=2, confidence=0.40, sample='Details.UnitHealingBySpell (unitId, spellId, segment)'},
  },
  ['UnitHealingSpellInfo'] = {
    {name='Details.UnitHealingSpellInfo', count=2, confidence=0.40, sample='Details.UnitHealingSpellInfo (unitId, spellId, segment)'},
  },
  ['UnitHealingSpellOnUnit'] = {
    {name='Details.UnitHealingSpellOnUnit', count=2, confidence=0.40, sample='Details.UnitHealingSpellOnUnit (unitId, spellId, segment)'},
  },
  ['UnitHealingTaken'] = {
    {name='Details.UnitHealingTaken', count=2, confidence=0.40, sample='Details.UnitHealingTaken (unitId, segment)'},
  },
  ['UnitHealingOnUnit'] = {
    {name='Details.UnitHealingOnUnit', count=3, confidence=0.60, sample='Details.UnitHealingOnUnit (unitId, targetUnitId, segment)'},
  },
  ['UnitHealingTakenFromSpell'] = {
    {name='Details.UnitHealingTakenFromSpell', count=2, confidence=0.40, sample='Details.UnitHealingTakenFromSpell (unitId, spellId, segment)'},
  },
  ['UnitHealingSpells'] = {
    {name='Details.UnitHealingSpells', count=2, confidence=0.40, sample='Details.UnitHealingSpells (unitId, segment)'},
  },
  ['UnitHealingTargets'] = {
    {name='Details.UnitHealingTargets', count=2, confidence=0.40, sample='Details.UnitHealingTargets (unitId, segment)'},
  },
  ['UnitHealingPets'] = {
    {name='Details.UnitHealingPets', count=2, confidence=0.40, sample='Details.UnitHealingPets (unitId, segment)'},
  },
  ['GetRaidInfoFromEncounterID'] = {
    {name='GetRaidInfoFromEncounterID', count=1, confidence=0.20, sample='function Details:GetRaidInfoFromEncounterID (encounterID, encounterEJID)'},
  },
  ['GetInstanceTrashInfo'] = {
    {name='GetInstanceTrashInfo', count=1, confidence=0.20, sample='function Details:GetInstanceTrashInfo (mapid)'},
  },
  ['GetInstanceIdFromEncounterId'] = {
    {name='GetInstanceIdFromEncounterId', count=2, confidence=0.40, sample='function Details:GetInstanceIdFromEncounterId (encounterId)'},
  },
  ['GetEncounterIdFromBossIndex'] = {
    {name='GetEncounterIdFromBossIndex', count=3, confidence=0.60, sample='function Details:GetEncounterIdFromBossIndex (mapid, index)'},
  },
  ['GetEncounterStartInfo'] = {
    {name='GetEncounterStartInfo', count=1, confidence=0.20, sample='function Details:GetEncounterStartInfo (mapid, encounterid)'},
  },
  ['GetBossDetails'] = {
    {name='GetBossDetails', count=2, confidence=0.40, sample='function Details:GetBossDetails (mapid, bossindex)'},
  },
  ['GetEncounterActors'] = {
    {name='GetEncounterActors', count=1, confidence=0.20, sample='function Details:GetEncounterActors (mapid, bossindex)'},
  },
  ['GetEncounterSpells'] = {
    {name='GetEncounterSpells', count=2, confidence=0.40, sample='function Details:GetEncounterSpells (mapid, bossindex)'},
    {name='Ejc.GetEncounterSpells', count=1, confidence=0.20, sample='function Ejc.GetEncounterSpells(journalInstanceId, journalEncounterId, difficulty)'},
  },
  ['InstanceIsRaid'] = {
    {name='InstanceIsRaid', count=3, confidence=0.60, sample='function Details:InstanceIsRaid (mapid)'},
  },
  ['InstanceisRaid'] = {
    {name='InstanceisRaid', count=3, confidence=0.60, sample='return Details:InstanceisRaid (mapid)'},
  },
  ['GetBossEncounterDetails'] = {
    {name='GetBossEncounterDetails', count=1, confidence=0.20, sample='function Details:GetBossEncounterDetails (mapid, bossindex)'},
  },
  ['GetEncounterInfoFromEncounterName'] = {
    {name='GetEncounterInfoFromEncounterName', count=3, confidence=0.60, sample='function Details:GetEncounterInfoFromEncounterName (EJID, encountername)'},
  },
  ['EJ_GetEncounterInfoByIndex'] = {
    {name='DetailsFramework.EncounterJournal.EJ_GetEncounterInfoByIndex', count=4, confidence=0.80, sample='local name = DetailsFramework.EncounterJournal.EJ_GetEncounterInfoByIndex (i, EJID)'},
    {name='EJ_GetEncounterInfoByIndex', count=3, confidence=0.60, sample='local name, description, journalEncounterID, rootSectionID, link, journalInstanceID, dungeonEncounterID, UiMapID = EJ_GetEncounterInfoByIndex(i, raidInstanceID)'},
  },
  ['GetRaidBackground'] = {
    {name='GetRaidBackground', count=2, confidence=0.40, sample='function Details:GetRaidBackground (mapid)'},
  },
  ['GetRaidIcon'] = {
    {name='GetRaidIcon', count=8, confidence=1.00, sample='function Details:GetRaidIcon (mapid, ejID, instanceType)'},
  },
  ['GetBossIndex'] = {
    {name='GetBossIndex', count=1, confidence=0.20, sample='function Details:GetBossIndex (mapid, encounterCLID, encounterEJID, encounterName)'},
  },
  ['GetBossIcon'] = {
    {name='GetBossIcon', count=5, confidence=1.00, sample='function Details:GetBossIcon (mapid, bossindex)'},
  },
  ['GetBossPortrait'] = {
    {name='GetBossPortrait', count=5, confidence=1.00, sample='function Details:GetBossPortrait(mapid, bossindex, encounterName, ejID)'},
  },
  ['EJ_GetCreatureInfo'] = {
    {name='DetailsFramework.EncounterJournal.EJ_GetCreatureInfo', count=3, confidence=0.60, sample='local id, name, description, displayInfo, iconImage = DetailsFramework.EncounterJournal.EJ_GetCreatureInfo (1, encounterID)'},
    {name='EJ_GetCreatureInfo', count=3, confidence=0.60, sample='local id, creatureName, creatureDescription, displayInfo, iconImage = EJ_GetCreatureInfo(1, journalEncounterID)'},
  },
  ['GetEncounterActorsName'] = {
    {name='GetEncounterActorsName', count=3, confidence=0.60, sample='function Details:GetEncounterActorsName (EJ_EncounterID)'},
  },
  ['EJ_GetSectionInfo'] = {
    {name='DetailsFramework.EncounterJournal.EJ_GetSectionInfo', count=3, confidence=0.60, sample='local title, description, depth, abilityIcon, displayInfo, siblingID, nextSectionID, filteredByDifficulty, link, startsOpen, flag1, flag2, flag3, flag4 = DetailsFramework.EncounterJournal.EJ_GetSectionInfo (curSectionID)'},
  },
  ['IsRaidRegistered'] = {
    {name='IsRaidRegistered', count=1, confidence=0.20, sample='function Details:IsRaidRegistered(mapId)'},
  },
  ['GetExpansionBossList'] = {
    {name='GetExpansionBossList', count=2, confidence=0.40, sample='function Details:GetExpansionBossList() --~bosslist - load on demand from gears-gsync and statistics-valid boss for exp'},
  },
  ['EJ_GetInstanceByIndex'] = {
    {name='EJ_GetInstanceByIndex', count=3, confidence=0.60, sample='local raidInstanceID, instanceName, description, bgImage, buttonImage1, loreImage, buttonImage2, dungeonAreaMapID = EJ_GetInstanceByIndex(instanceIndex, true)'},
  },
  ['EncounterJournal_DisplayInstance'] = {
    {name='EncounterJournal_DisplayInstance', count=1, confidence=0.20, sample='--EncounterJournal_DisplayInstance(raidInstanceID)'},
  },
  ['EncounterJournal_ResetDisplay'] = {
    {name='EncounterJournal_ResetDisplay', count=1, confidence=0.20, sample='EncounterJournal_ResetDisplay(nil, "none")'},
  },
  ['GetInstanceData'] = {
    {name='Details222.EJCache.GetInstanceData', count=2, confidence=0.40, sample='function Details222.EJCache.GetInstanceData(...)'},
  },
  ['GetInstanceDataByName'] = {
    {name='Details222.EJCache.GetInstanceDataByName', count=2, confidence=0.40, sample='local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)'},
  },
  ['GetInstanceDataByInstanceId'] = {
    {name='Details222.EJCache.GetInstanceDataByInstanceId', count=2, confidence=0.40, sample='local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)'},
  },
  ['GetInstanceDataByMapId'] = {
    {name='Details222.EJCache.GetInstanceDataByMapId', count=2, confidence=0.40, sample='local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)'},
  },
  ['GetEncounterDataFromInstanceData'] = {
    {name='Details222.EJCache.GetEncounterDataFromInstanceData', count=2, confidence=0.40, sample='function Details222.EJCache.GetEncounterDataFromInstanceData(instanceData, ...)'},
  },
  ['GetRaidDataByName'] = {
    {name='Details222.EJCache.GetRaidDataByName', count=1, confidence=0.20, sample='function Details222.EJCache.GetRaidDataByName(instanceName)'},
  },
  ['GetRaidDataByInstanceId'] = {
    {name='Details222.EJCache.GetRaidDataByInstanceId', count=1, confidence=0.20, sample='function Details222.EJCache.GetRaidDataByInstanceId(instanceId)'},
  },
  ['GetRaidDataByMapId'] = {
    {name='Details222.EJCache.GetRaidDataByMapId', count=1, confidence=0.20, sample='function Details222.EJCache.GetRaidDataByMapId(instanceId)'},
  },
  ['GetDungeonDataByName'] = {
    {name='Details222.EJCache.GetDungeonDataByName', count=1, confidence=0.20, sample='function Details222.EJCache.GetDungeonDataByName(instanceName)'},
  },
  ['GetDungeonDataByInstanceId'] = {
    {name='Details222.EJCache.GetDungeonDataByInstanceId', count=1, confidence=0.20, sample='function Details222.EJCache.GetDungeonDataByInstanceId(instanceId)'},
  },
  ['GetDungeonDataByMapId'] = {
    {name='Details222.EJCache.GetDungeonDataByMapId', count=1, confidence=0.20, sample='function Details222.EJCache.GetDungeonDataByMapId(instanceId)'},
  },
  ['InstallEncounter'] = {
    {name='InstallEncounter', count=4, confidence=0.80, sample='function Details:InstallEncounter(InstanceTable)'},
  },
  ['CreateEncounterJournalDump'] = {
    {name='Details222.EJCache.CreateEncounterJournalDump', count=3, confidence=0.60, sample='Details222.EJCache.CreateEncounterJournalDump()'},
    {name='Ejc.CreateEncounterJournalDump', count=7, confidence=1.00, sample='Ejc.CreateEncounterJournalDump()'},
  },
  ['DumpInstanceInfo'] = {
    {name='DumpInstanceInfo', count=1, confidence=0.20, sample='function Details:DumpInstanceInfo()'},
  },
  ['IsCurrentContent'] = {
    {name='Details222.EJCache.IsCurrentContent', count=6, confidence=1.00, sample='function Details222.EJCache.IsCurrentContent(id)'},
    {name='Ejc.IsCurrentContent', count=1, confidence=0.20, sample='function Ejc.IsCurrentContent(id)'},
    {name='DF.Ejc.IsCurrentContent', count=1, confidence=0.20, sample='if (not DF.Ejc.IsCurrentContent(default)) then'},
  },
  ['EJ_GetNumTiers'] = {
    {name='EJ_GetNumTiers', count=2, confidence=0.40, sample='local tierAmount = EJ_GetNumTiers() --return 11 for dragonisles, is returning 11 for wow11 as well'},
  },
  ['EJ_GetCurrentTier'] = {
    {name='EJ_GetCurrentTier', count=2, confidence=0.40, sample='local currentTierId = tierAmount --EJ_GetCurrentTier(), for some unknown reason, this function is returning 3 on retail'},
  },
  ['EJ_SelectTier'] = {
    {name='EJ_SelectTier', count=4, confidence=0.80, sample='EJ_SelectTier(currentTierId) --print("tier selected:", currentTierId - 1, "raids") --debug: was (currentTierId - 1), but was selecting wow10 content'},
  },
  ['IsDragonflightWow'] = {
    {name='DetailsFramework.IsDragonflightWow', count=1, confidence=0.20, sample='if not DetailsFramework.IsDragonflightWow() then return end --In Cata, EJ_SelectInstance will fail due to instance not existing. This file only contains dragonflight raids anyways. Best keep it on DF only.'},
    {name='DF.IsDragonflightWow', count=2, confidence=0.40, sample='function DF.IsDragonflightWow()'},
  },
  ['CreateStorageDB'] = {
    {name='CreateStorageDB', count=3, confidence=0.60, sample='storageDatabase = Details:CreateStorageDB()'},
  },
  ['OpenRaidStorage'] = {
    {name='OpenRaidStorage', count=13, confidence=1.00, sample='function Details222.storage.OpenRaidStorage()'},
  },
  ['IsAddOnLoaded'] = {
    {name='C_AddOns.IsAddOnLoaded', count=10, confidence=1.00, sample='if (not C_AddOns.IsAddOnLoaded(CONST_ADDONNAME_DATASTORAGE)) then'},
  },
  ['HaveDataForEncounter'] = {
    {name='HaveDataForEncounter', count=2, confidence=0.40, sample='function Details222.storage.HaveDataForEncounter(difficulty, encounterId, guildName)'},
  },
  ['GetBestFromGuild'] = {
    {name='GetBestFromGuild', count=3, confidence=0.60, sample='function Details222.storage.GetBestFromGuild(difficulty, encounterId, role, dps, guildName)'},
  },
  ['DBGuildSync'] = {
    {name='DBGuildSync', count=3, confidence=0.60, sample='function Details222.storage.DBGuildSync()'},
  },
  ['IsBossIdFromCurrentExpansion'] = {
    {name='IsBossIdFromCurrentExpansion', count=1, confidence=0.20, sample='function Details:IsBossIdFromCurrentExpansion(bossId)'},
  },
  ['UpdateDropdowns'] = {
    {name='UpdateDropdowns', count=5, confidence=1.00, sample='_G.DetailsRaidHistoryWindow:UpdateDropdowns()'},
  },
  ['ListEncounters'] = {
    {name='ListEncounters', count=1, confidence=0.20, sample='function Details222.storage.ListEncounters(difficulty)'},
  },
  ['GetEncounterData'] = {
    {name='GetEncounterData', count=1, confidence=0.20, sample='function Details222.storage.GetEncounterData(difficulty, dungeonEncounterID, guildName)'},
  },
  ['OpenStorage'] = {
    {name='Details.OpenStorage', count=4, confidence=0.80, sample='function Details.OpenStorage()'},
  },
  ['LoadDB'] = {
    {name='Details.Database.LoadDB', count=4, confidence=0.80, sample='function Details.Database.LoadDB()'},
  },
  ['GetBossKillsDB'] = {
    {name='Details.Database.GetBossKillsDB', count=3, confidence=0.60, sample='function Details.Database.GetBossKillsDB(savedData)'},
  },
  ['OpenBreakdownWindow'] = {
    {name='OpenBreakdownWindow', count=16, confidence=1.00, sample='Details:OpenBreakdownWindow(instance, Details:GetPlayer(false, 1))'},
  },
  ['SaveConfig'] = {
    {name='SaveConfig', count=1, confidence=0.20, sample='function Details:SaveConfig()'},
  },
  ['ReleaseEmbed'] = {
    {name='ReleaseEmbed', count=4, confidence=0.80, sample='Details.chat_embed:ReleaseEmbed()'},
  },
  ['SetTabSettings'] = {
    {name='SetTabSettings', count=6, confidence=1.00, sample='function Details.chat_embed:SetTabSettings(tab_name, bNewStateEnabled, is_single)'},
  },
  ['GetTab'] = {
    {name='GetTab', count=4, confidence=0.80, sample='local ChatFrame = Details.chat_embed:GetTab(current_name)'},
  },
  ['FCF_SetWindowName'] = {
    {name='FCF_SetWindowName', count=5, confidence=1.00, sample='FCF_SetWindowName(ChatFrame, tab_name, false)'},
  },
  ['DoEmbed'] = {
    {name='DoEmbed', count=6, confidence=1.00, sample='Details.chat_embed:DoEmbed()'},
  },
  ['DelayedChatEmbed'] = {
    {name='DelayedChatEmbed', count=1, confidence=0.20, sample='function Details.chat_embed:DelayedChatEmbed()'},
  },
  ['FCF_OpenNewWindow'] = {
    {name='FCF_OpenNewWindow', count=2, confidence=0.40, sample='FCF_OpenNewWindow(tabname)'},
  },
  ['ChatFrame_RemoveMessageGroup'] = {
    {name='ChatFrame_RemoveMessageGroup', count=1, confidence=0.20, sample='ChatFrame_RemoveMessageGroup(chatFrame, t)'},
  },
  ['SetChatWindowName'] = {
    {name='SetChatWindowName', count=1, confidence=0.20, sample='--API SetChatWindowName(frame:GetID(), name); -- set when doNotSave is false'},
  },
  ['SortGroupHeal'] = {
    {name='SortGroupHeal', count=2, confidence=0.40, sample='function _detalhes.SortGroupHeal (container, keyName2)'},
  },
  ['SortKeyGroupHeal'] = {
    {name='SortKeyGroupHeal', count=1, confidence=0.20, sample='function _detalhes.SortKeyGroupHeal (table1, table2)'},
  },
  ['SortKeySimpleHeal'] = {
    {name='SortKeySimpleHeal', count=1, confidence=0.20, sample='function _detalhes.SortKeySimpleHeal (table1, table2)'},
  },
  ['ContainerSortHeal'] = {
    {name='ContainerSortHeal', count=4, confidence=0.80, sample='function _detalhes:ContainerSortHeal (container, amount, keyName2)'},
  },
  ['ContainerRefreshHps'] = {
    {name='ContainerRefreshHps', count=4, confidence=0.80, sample='function healingClass:ContainerRefreshHps (container, combat_time)'},
  },
  ['ReportSingleDamagePreventedLine'] = {
    {name='ReportSingleDamagePreventedLine', count=1, confidence=0.20, sample='function healingClass:ReportSingleDamagePreventedLine (actor, instancia)'},
  },
  ['GetNumLines'] = {
    {name='GetNumLines', count=2, confidence=0.40, sample='for i = 2, GameCooltip:GetNumLines()-2 do'},
  },
  ['T'] = {
    {name='T', count=1, confidence=0.20, sample='texto_left = texto_left:gsub(("|T(.*)|t "), "")'},
  },
  ['Reportar'] = {
    {name='Reportar', count=13, confidence=1.00, sample='return _detalhes:Reportar (reportar, {_no_current = true, _no_inverse = true, _custom = true})'},
  },
  ['RefreshScrollBar'] = {
    {name='RefreshScrollBar', count=13, confidence=1.00, sample='instancia:RefreshScrollBar (amount)'},
  },
  ['GetBarBracket'] = {
    {name='GetBarBracket', count=10, confidence=1.00, sample='local bars_brackets = instancia:GetBarBracket()'},
  },
  ['GetBarSeparator'] = {
    {name='GetBarSeparator', count=8, confidence=1.00, sample='local bars_separator = instancia:GetBarSeparator()'},
  },
  ['SetInLineTexts'] = {
    {name='SetInLineTexts', count=28, confidence=1.00, sample='instancia:SetInLineTexts(row1, "", _detalhes:ToK2 (total), _detalhes:ToK (total / combat_time))'},
  },
  ['RefreshLine'] = {
    {name='RefreshLine', count=43, confidence=1.00, sample='conteudo[i]:RefreshLine(instancia, barras_container, whichRowLine, i, total, sub_atributo, forcar, keyName, combat_time, percentage_type, use_animations, bars_show_data, bars_brackets, bars_separator)'},
  },
  ['AutoAlignInLineFontStrings'] = {
    {name='AutoAlignInLineFontStrings', count=4, confidence=0.80, sample='instancia:AutoAlignInLineFontStrings()'},
  },
  ['SelectedToKFunction'] = {
    {name='SelectedToKFunction', count=24, confidence=1.00, sample='local formated_heal = SelectedToKFunction (_, healing_total)'},
  },
  ['RefreshBarra2'] = {
    {name='RefreshBarra2', count=8, confidence=1.00, sample='return self:RefreshBarra2 (thisLine, instancia, tabela_anterior, forcar, esta_porcentagem, whichRowLine, barras_container, use_animations)'},
  },
  ['SetClassIcon'] = {
    {name='SetClassIcon', count=10, confidence=1.00, sample='self:SetClassIcon (thisLine.icone_classe, instancia, class)'},
    {name='Details.SetClassIcon', count=1, confidence=0.20, sample='Details.SetClassIcon(targetActorObject, targetBar.Icon, spellsTab.GetInstance(), targetActorObject:Class())'},
  },
  ['GetTexCoord'] = {
    {name='GetTexCoord', count=12, confidence=1.00, sample='thisLine.iconHighlight:SetTexCoord(classIcon:GetTexCoord())'},
  },
  ['SetBarLeftText'] = {
    {name='SetBarLeftText', count=8, confidence=1.00, sample='self:SetBarLeftText (thisLine, instancia, enemy, arena_enemy, arena_ally, UsingCustomLeftText)'},
  },
  ['TooltipForCustom'] = {
    {name='TooltipForCustom', count=3, confidence=0.60, sample='return self:TooltipForCustom (barra)'},
  },
  ['ToolTip_HealingDone'] = {
    {name='ToolTip_HealingDone', count=4, confidence=0.80, sample='return self:ToolTip_HealingDone (instancia, numero, barra, keydown)'},
  },
  ['ToolTip_HealingTaken'] = {
    {name='ToolTip_HealingTaken', count=2, confidence=0.40, sample='return self:ToolTip_HealingTaken (instancia, numero, barra, keydown)'},
  },
  ['ToolTip_HealingDenied'] = {
    {name='ToolTip_HealingDenied', count=2, confidence=0.40, sample='return self:ToolTip_HealingDenied (instancia, numero, barra, keydown)'},
  },
  ['FormatTooltipNumber'] = {
    {name='FormatTooltipNumber', count=34, confidence=1.00, sample='GameCooltip:AddLine(spellName .. ": ", FormatTooltipNumber (_, spellTotal) .. " (" .. _cstr ("%.1f", spellTotal / totalDenied) .."%)")'},
  },
  ['Vardex'] = {
    {name='Vardex', count=6, confidence=1.00, sample='--translate cyrillic alphabet to western alphabet by Vardex (https://github.com/Vardex May 22, 2019)'},
  },
  ['Transliterate'] = {
    {name='Transliterate', count=7, confidence=1.00, sample='onyName = Translit:Transliterate(onyName, "!")'},
  },
  ['GetShowingCombat'] = {
    {name='GetShowingCombat', count=17, confidence=1.00, sample='local segment = instancia:GetShowingCombat()'},
  },
  ['GetPhases'] = {
    {name='GetPhases', count=4, confidence=0.80, sample='local phasesInfo = segment:GetPhases()'},
  },
  ['MontaInfoHealingDone'] = {
    {name='MontaInfoHealingDone', count=5, confidence=1.00, sample='self:MontaInfoHealingDone()'},
  },
  ['GetSpellScrollFrame'] = {
    {name='DetailsSpellBreakdownTab.GetSpellScrollFrame', count=3, confidence=0.60, sample='local spellsHeader = DetailsSpellBreakdownTab.GetSpellScrollFrame().Header'},
    {name='GetSpellScrollFrame', count=10, confidence=1.00, sample='function spellsTab.GetSpellScrollFrame()'},
  },
  ['GetTargetScrollFrame'] = {
    {name='DetailsSpellBreakdownTab.GetTargetScrollFrame', count=2, confidence=0.40, sample='local targetsHeader = DetailsSpellBreakdownTab.GetTargetScrollFrame().Header'},
    {name='GetTargetScrollFrame', count=9, confidence=1.00, sample='function spellsTab.GetTargetScrollFrame()'},
  },
  ['MontaInfoHealTaken'] = {
    {name='MontaInfoHealTaken', count=2, confidence=0.40, sample='self:MontaInfoHealTaken()'},
  },
  ['GetTargets'] = {
    {name='GetTargets', count=5, confidence=1.00, sample='local targets = sourceActorObject:GetTargets()'},
  },
  ['SendGenericData'] = {
    {name='Details222.BreakdownWindow.SendGenericData', count=4, confidence=0.80, sample='Details222.BreakdownWindow.SendGenericData(resultTable, actorObject, combatObject, instance)'},
  },
  ['JI_AtualizaContainerBarras'] = {
    {name='JI_AtualizaContainerBarras', count=8, confidence=1.00, sample='gump:JI_AtualizaContainerBarras (amt)'},
  },
  ['CriaNovaBarraInfo1'] = {
    {name='CriaNovaBarraInfo1', count=8, confidence=1.00, sample='barra = gump:CriaNovaBarraInfo1 (instancia, index)'},
  },
  ['FocusLock'] = {
    {name='FocusLock', count=5, confidence=1.00, sample='self:FocusLock(barra, tabela[1])'},
  },
  ['UpdadeInfoBar'] = {
    {name='UpdadeInfoBar', count=9, confidence=1.00, sample='--hes:UpdadeInfoBar(row, index, spellid, name, value, max, percent, icon, detalhes)'},
  },
  ['MontaInfoOverHealing'] = {
    {name='MontaInfoOverHealing', count=1, confidence=0.20, sample='function healingClass:MontaInfoOverHealing() --this should be deprecated now'},
  },
  ['MontaDetalhes'] = {
    {name='MontaDetalhes', count=10, confidence=1.00, sample='self:MontaDetalhes (self.detalhes, barra)'},
  },
  ['JI_AtualizaContainerAlvos'] = {
    {name='JI_AtualizaContainerAlvos', count=7, confidence=1.00, sample='gump:JI_AtualizaContainerAlvos (amt_alvos)'},
  },
  ['CriaNovaBarraInfo2'] = {
    {name='CriaNovaBarraInfo2', count=7, confidence=1.00, sample='barra = gump:CriaNovaBarraInfo2 (instancia, index)'},
  },
  ['IsSpellExpanded'] = {
    {name='Details222.BreakdownWindow.IsSpellExpanded', count=7, confidence=1.00, sample='bIsExpanded = Details222.BreakdownWindow.IsSpellExpanded(spellId),'},
  },
  ['SumSpellTables'] = {
    {name='Details.SpellTableMixin.SumSpellTables', count=2, confidence=0.40, sample='Details.SpellTableMixin.SumSpellTables(bkSpellData.spellTables, bkSpellData)'},
  },
  ['SendSpellData'] = {
    {name='Details222.BreakdownWindow.SendSpellData', count=3, confidence=0.60, sample='Details222.BreakdownWindow.SendSpellData(actorSpellsSorted, actorObject, combatObject, instance)'},
  },
  ['SendTargetData'] = {
    {name='Details222.BreakdownWindow.SendTargetData', count=3, confidence=0.60, sample='Details222.BreakdownWindow.SendTargetData(targetList, actorObject, combatObject, instance)'},
  },
  ['SetStatusbarText'] = {
    {name='SetStatusbarText', count=8, confidence=1.00, sample='breakdownWindowFrame:SetStatusbarText()'},
  },
  ['MontaTooltipAlvos'] = {
    {name='MontaTooltipAlvos', count=7, confidence=1.00, sample='function healingClass:MontaTooltipAlvos (thisLine, index, instancia)'},
  },
  ['MontaDetalhesHealingDone'] = {
    {name='MontaDetalhesHealingDone', count=2, confidence=0.40, sample='return self:MontaDetalhesHealingDone (spellid, barra)'},
  },
  ['MontaDetalhesHealingTaken'] = {
    {name='MontaDetalhesHealingTaken', count=2, confidence=0.40, sample='healingClass:MontaDetalhesHealingTaken (spellid, barra)'},
  },
  ['CriaNovaBarraInfo3'] = {
    {name='CriaNovaBarraInfo3', count=6, confidence=1.00, sample='barra = gump:CriaNovaBarraInfo3 (instancia, index)'},
  },
  ['SetaDetalheInfoTexto'] = {
    {name='SetaDetalheInfoTexto', count=2, confidence=0.40, sample='gump:SetaDetalheInfoTexto( index, 100,'},
  },
  ['HidaDetalheInfo'] = {
    {name='HidaDetalheInfo', count=1, confidence=0.20, sample='gump:HidaDetalheInfo (index+1)'},
  },
  ['GetRawSpellTable'] = {
    {name='GetRawSpellTable', count=4, confidence=0.80, sample='for spellId, spellTable in pairs(actorObject.spells._ActorTable) do --same as overallSpellsContainer:GetRawSpellTable()'},
  },
  ['UpdateDamageDoneBracket'] = {
    {name='UpdateDamageDoneBracket', count=2, confidence=0.40, sample='function atributo_custom:UpdateDamageDoneBracket()'},
  },
  ['SortOrder'] = {
    {name='SortOrder', count=8, confidence=1.00, sample='local function SortOrder (main_table, func, ...)'},
  },
  ['GetCustomObject'] = {
    {name='GetCustomObject', count=8, confidence=1.00, sample='if (instance:GetCustomObject():IsSpellTarget()) then'},
  },
  ['IsSpellTarget'] = {
    {name='IsSpellTarget', count=5, confidence=1.00, sample='if (instance:GetCustomObject():IsSpellTarget()) then'},
  },
  ['ToolTip_DamageDone'] = {
    {name='ToolTip_DamageDone', count=3, confidence=0.60, sample='actor:ToolTip_DamageDone (instance)'},
  },
  ['GetSpellTableFuncCreator'] = {
    {name='GetSpellTableFuncCreator', count=3, confidence=0.60, sample='function spellContainerClass:GetSpellTableFuncCreator(containerType)'},
  },
  ['HasTwoOrMoreSpells'] = {
    {name='HasTwoOrMoreSpells', count=2, confidence=0.40, sample='function spellContainerClass:HasTwoOrMoreSpells()'},
  },
  ['CreateActorLastEventTable'] = {
    {name='CreateActorLastEventTable', count=1, confidence=0.20, sample='function Details:CreateActorLastEventTable() --[[exported]]'},
  },
  ['SortGroup'] = {
    {name='Details.SortGroup', count=1, confidence=0.20, sample='function Details.SortGroup(container, keyName2) --[[exported]]'},
  },
  ['SortKeyGroup'] = {
    {name='Details.SortKeyGroup', count=1, confidence=0.20, sample='function Details.SortKeyGroup(table1, table2) --[[exported]]'},
  },
  ['SortKeySimple'] = {
    {name='Details.SortKeySimple', count=1, confidence=0.20, sample='function Details.SortKeySimple(table1, table2) --[[exported]]'},
  },
  ['SortByRealTimeDps'] = {
    {name='Details.SortByRealTimeDps', count=1, confidence=0.20, sample='function Details.SortByRealTimeDps(actor1, actor2)'},
  },
  ['ContainerSort'] = {
    {name='ContainerSort', count=2, confidence=0.40, sample='function Details:ContainerSort(container, amount, keyName2) --[[exported]]'},
  },
  ['IsFriendlyNpc'] = {
    {name='IsFriendlyNpc', count=1, confidence=0.20, sample='function Details:IsFriendlyNpc() --[[exported]]'},
  },
  ['GetTimeInCombat'] = {
    {name='GetTimeInCombat', count=2, confidence=0.40, sample='function Details:GetTimeInCombat(petOwner) --[[exported]]'},
  },
  ['ContainerSortEnemies'] = {
    {name='ContainerSortEnemies', count=2, confidence=0.40, sample='function Details:ContainerSortEnemies(container, amount, keyName2) --[[exported]]'},
  },
  ['Sort1'] = {
    {name='Details.Sort1', count=1, confidence=0.20, sample='function Details.Sort1(table1, table2) --[[exported]]'},
  },
  ['Sort2'] = {
    {name='Details.Sort2', count=1, confidence=0.20, sample='function Details.Sort2(table1, table2) --[[exported]]'},
  },
  ['Sort3'] = {
    {name='Details.Sort3', count=1, confidence=0.20, sample='function Details.Sort3(table1, table2) --[[exported]]'},
  },
  ['Sort4'] = {
    {name='Details.Sort4', count=1, confidence=0.20, sample='function Details.Sort4(table1, table2) --[[exported]]'},
  },
  ['Sort4Reverse'] = {
    {name='Details.Sort4Reverse', count=1, confidence=0.20, sample='function Details.Sort4Reverse(table1, table2) --[[exported]]'},
  },
  ['GameTooltipSetSpellByID'] = {
    {name='GameTooltipSetSpellByID', count=12, confidence=1.00, sample='function Details:GameTooltipSetSpellByID(spellId) --[[exported]]'},
  },
  ['RefreshDpsRealTime'] = {
    {name='RefreshDpsRealTime', count=2, confidence=0.40, sample='function damageClass:RefreshDpsRealTime(tableWithActors)'},
  },
  ['ContainerRefreshDps'] = {
    {name='ContainerRefreshDps', count=4, confidence=0.80, sample='function damageClass:ContainerRefreshDps(tableWithActors, combatTime)'},
  },
  ['RefreshBarraBySpell'] = {
    {name='RefreshBarraBySpell', count=1, confidence=0.20, sample='local function RefreshBarraBySpell(tabela, barra, instancia)'},
  },
  ['AtualizarBySpell'] = {
    {name='AtualizarBySpell', count=3, confidence=0.60, sample='damageClass:AtualizarBySpell(tabela, tabela.minha_barra, barra.colocacao, instancia)'},
  },
  ['ShowDTBSInWindow'] = {
    {name='ShowDTBSInWindow', count=2, confidence=0.40, sample='local function ShowDTBSInWindow(spell, instance) --for hold shift key and click, show players which took damage from this spell'},
  },
  ['ReportSingleDTBSLine'] = {
    {name='ReportSingleDTBSLine', count=1, confidence=0.20, sample='function damageClass:ReportSingleDTBSLine(spell, instance, ShiftKeyDown, ControlKeyDown)'},
  },
  ['OpenAuraPanel'] = {
    {name='OpenAuraPanel', count=9, confidence=1.00, sample='return Details:OpenAuraPanel(spell[1], spellname, spellicon)'},
  },
  ['FormatReportLines'] = {
    {name='FormatReportLines', count=11, confidence=1.00, sample='Details:FormatReportLines(report_table, bs_tooltip_table, DTBS_format_name, DTBS_format_amount)'},
  },
  ['RefreshBarraFrags'] = {
    {name='RefreshBarraFrags', count=1, confidence=0.20, sample='local function RefreshBarraFrags(tabela, barra, instancia)'},
  },
  ['AtualizarFrags'] = {
    {name='AtualizarFrags', count=3, confidence=0.60, sample='damageClass:AtualizarFrags(tabela, tabela.minha_barra, barra.colocacao, instancia)'},
  },
  ['ShowVoidZonesInWindow'] = {
    {name='ShowVoidZonesInWindow', count=2, confidence=0.40, sample='local function ShowVoidZonesInWindow(actor, instance)'},
  },
  ['ReportSingleVoidZoneLine'] = {
    {name='ReportSingleVoidZoneLine', count=1, confidence=0.20, sample='function damageClass:ReportSingleVoidZoneLine(actor, instance, ShiftKeyDown, ControlKeyDown)'},
  },
  ['RefreshBarraVoidZone'] = {
    {name='RefreshBarraVoidZone', count=1, confidence=0.20, sample='local function RefreshBarraVoidZone(tabela, barra, instancia)'},
  },
  ['AtualizarVoidZone'] = {
    {name='AtualizarVoidZone', count=3, confidence=0.60, sample='tabela:AtualizarVoidZone(tabela.minha_barra, barra.colocacao, instancia)'},
  },
  ['GetNumLinesShown'] = {
    {name='GetNumLinesShown', count=5, confidence=1.00, sample='for lineId = 1, self:GetNumLinesShown() do'},
  },
  ['TruncateTextSafe'] = {
    {name='TruncateTextSafe', count=2, confidence=0.40, sample='DetailsFramework:TruncateTextSafe(playerNameFontString, self.cached_bar_width - totalWidth) --this avoid truncated strings with ...'},
  },
  ['GetRunTime'] = {
    {name='GetRunTime', count=2, confidence=0.40, sample='combatTime = currentCombat:GetRunTime()'},
  },
  ['RefreshLineValue'] = {
    {name='RefreshLineValue', count=2, confidence=0.40, sample='return self:RefreshLineValue(thisLine, instanceObject, previousData, bForceRefresh, percentNumber, bUseAnimations, total, instanceObject.top)'},
  },
  ['ShowExtraStatusbar'] = {
    {name='ShowExtraStatusbar', count=4, confidence=0.80, sample='function Details:ShowExtraStatusbar(thisLine, amount, extraAmount, totalAmount, topAmount, instanceObject, onEnterFunc, onLeaveFunc)'},
  },
  ['GenerateActorInfo'] = {
    {name='GenerateActorInfo', count=3, confidence=0.60, sample='--[[GLOBAL]] DETAILS_FAILED_ACTOR = Details:GenerateActorInfo(self, sResult, bIncludeStackTrace) --avoid the game gc and details gc from destroying the actor info'},
  },
  ['PredictedAugSpellsOnEnter'] = {
    {name='PredictedAugSpellsOnEnter', count=1, confidence=0.20, sample='function damageClass.PredictedAugSpellsOnEnter(self)'},
  },
  ['AddClassIconToText'] = {
    {name='AddClassIconToText', count=7, confidence=1.00, sample='targetName = detailsFramework:AddClassIconToText(targetName, targetName, targetClass)'},
  },
  ['GetSpellTexture'] = {
    {name='GetSpellTexture', count=4, confidence=0.80, sample='local spellIcon = GetSpellTexture(372571)'},
    {name='C_Spell.GetSpellTexture', count=1, confidence=0.20, sample='local GetSpellTexture = GetSpellTexture or function(...) return C_Spell.GetSpellTexture(...) end'},
  },
  ['PredictedAugSpellsOnLeave'] = {
    {name='PredictedAugSpellsOnLeave', count=1, confidence=0.20, sample='function damageClass.PredictedAugSpellsOnLeave(self)'},
  },
  ['ToolTip_DamageTaken'] = {
    {name='ToolTip_DamageTaken', count=2, confidence=0.40, sample='return self:ToolTip_DamageTaken(instance, numero, barra, keydown)'},
  },
  ['ToolTip_Enemies'] = {
    {name='ToolTip_Enemies', count=2, confidence=0.40, sample='return self:ToolTip_Enemies(instance, numero, barra, keydown)'},
  },
  ['ToolTip_FriendlyFire'] = {
    {name='ToolTip_FriendlyFire', count=2, confidence=0.40, sample='return self:ToolTip_FriendlyFire(instance, numero, barra, keydown)'},
  },
  ['ReportEnemyDamageTaken'] = {
    {name='ReportEnemyDamageTaken', count=2, confidence=0.40, sample='function damageClass:ReportEnemyDamageTaken(actor, instance, ShiftKeyDown, ControlKeyDown, fromFrags)'},
  },
  ['ReportSingleFragsLine'] = {
    {name='ReportSingleFragsLine', count=1, confidence=0.20, sample='function damageClass:ReportSingleFragsLine(frag, instance, ShiftKeyDown, ControlKeyDown)'},
  },
  ['GetSkinTexture'] = {
    {name='GetSkinTexture', count=5, confidence=1.00, sample='GameCooltip:AddIcon(instanceObject:GetSkinTexture(), 1, 1, 14, 14, 0.005859375 + half, 0.025390625 - half, 0.3623046875, 0.3818359375)'},
  },
  ['MontaInfoDamageDone'] = {
    {name='MontaInfoDamageDone', count=2, confidence=0.40, sample='return self:MontaInfoDamageDone() --has new code for the new destails window | left scroll and 6 blocks implemented'},
  },
  ['MontaInfoDamageTaken'] = {
    {name='MontaInfoDamageTaken', count=2, confidence=0.40, sample='return self:MontaInfoDamageTaken() --has new code for the new destails window | left and right scrolls implemented'},
  },
  ['MontaInfoFriendlyFire'] = {
    {name='MontaInfoFriendlyFire', count=2, confidence=0.40, sample='return self:MontaInfoFriendlyFire() --has new code for the new destails window | left scroll implemeneted(need to implemente the right scroll yet)'},
  },
  ['MontaDetalhesDamageDone'] = {
    {name='MontaDetalhesDamageDone', count=2, confidence=0.40, sample='return self:MontaDetalhesDamageDone(spellid, barra, instancia) --deprecated'},
  },
  ['MontaDetalhesDamageTaken'] = {
    {name='MontaDetalhesDamageTaken', count=2, confidence=0.40, sample='return self:MontaDetalhesDamageTaken(spellid, barra, instancia)'},
  },
  ['MontaDetalhesFriendlyFire'] = {
    {name='MontaDetalhesFriendlyFire', count=2, confidence=0.40, sample='return self:MontaDetalhesFriendlyFire(spellid, barra, instancia)'},
  },
  ['MontaDetalhesEnemy'] = {
    {name='MontaDetalhesEnemy', count=2, confidence=0.40, sample='return self:MontaDetalhesEnemy(spellid, barra, instancia)'},
  },
  ['BuildFriendlySpellListFromAgressor'] = {
    {name='BuildFriendlySpellListFromAgressor', count=2, confidence=0.40, sample='function damageClass.BuildFriendlySpellListFromAgressor(friendlyFireAggressorActor, targetName)'},
  },
  ['GetCombatFromBreakdownWindow'] = {
    {name='GetCombatFromBreakdownWindow', count=9, confidence=1.00, sample='local combatObject = Details:GetCombatFromBreakdownWindow()'},
  },
  ['BuildDamageTakenSpellListFromAgressor'] = {
    {name='BuildDamageTakenSpellListFromAgressor', count=2, confidence=0.40, sample='function damageClass:BuildDamageTakenSpellListFromAgressor(aggressorActor)'},
  },
  ['BuildDamageTakenSpellList'] = {
    {name='BuildDamageTakenSpellList', count=2, confidence=0.40, sample='function damageClass:BuildDamageTakenSpellList()'},
  },
  ['CreateSpellTable'] = {
    {name='Details222.DamageSpells.CreateSpellTable', count=2, confidence=0.40, sample='local newSpellTable = Details222.DamageSpells.CreateSpellTable(spellId)'},
    {name='Details.CreateSpellTable', count=1, confidence=0.20, sample='function Details.CreateSpellTable(spellId, cleuToken)'},
  },
  ['MontaTooltipDamageTaken'] = {
    {name='MontaTooltipDamageTaken', count=2, confidence=0.40, sample='if (not thisLine.minha_tabela:MontaTooltipDamageTaken(thisLine, index)) then'},
  },
  ['BuildSpellDetails'] = {
    {name='BuildSpellDetails', count=2, confidence=0.40, sample='function damageClass:BuildSpellDetails(spellBar, spellBlockContainer, blockIndex, summaryBlock, spellId, combatTime, actorName, spellTable, trinketData, combatObject)'},
  },
  ['GetTrinketProcsForPlayer'] = {
    {name='GetTrinketProcsForPlayer', count=2, confidence=0.40, sample='local trinketProcs = combatObject:GetTrinketProcsForPlayer(actorName)'},
  },
  ['GetBlock'] = {
    {name='GetBlock', count=11, confidence=1.00, sample='local empowerBlock = spellBlockContainer:GetBlock(blockIndex)'},
  },
  ['GetCritPercent'] = {
    {name='Details.SpellTableMixin.GetCritPercent', count=2, confidence=0.40, sample='local percent = Details.SpellTableMixin.GetCritPercent(spellTable)'},
  },
  ['GetCritAverage'] = {
    {name='Details.SpellTableMixin.GetCritAverage', count=1, confidence=0.20, sample='local critAverage = Details.SpellTableMixin.GetCritAverage(spellTable)'},
  },
  ['BuildPlayerDetailsSpellChart'] = {
    {name='BuildPlayerDetailsSpellChart', count=1, confidence=0.20, sample='function Details:BuildPlayerDetailsSpellChart()'},
  },
  ['ShowChart'] = {
    {name='ShowChart', count=5, confidence=1.00, sample='function playerDetailSmallChart.ShowChart(parent, combatObject, cleuData, playerName, targetName, spellId, ...)'},
    {name='DetailsMythicDungeonChartHandler.ShowChart', count=3, confidence=0.60, sample='-- /run _G.DetailsMythicDungeonChartHandler.ShowChart(); DetailsMythicDungeonChartFrame.ShowChartFrame()'},
  },
  ['ClearCacheTables'] = {
    {name='ClearCacheTables', count=2, confidence=0.40, sample='function damageClass:ClearCacheTables()'},
  },
  ['SumDamageActors'] = {
    {name='Details.SumDamageActors', count=1, confidence=0.20, sample='function Details.SumDamageActors(actor1, actor2, actorContainer) --not called anywhere, can be deprecated'},
  },
  ['SortIfHaveKey'] = {
    {name='Details.SortIfHaveKey', count=1, confidence=0.20, sample='function Details.SortIfHaveKey(table1, table2)'},
  },
  ['SortGroupIfHaveKey'] = {
    {name='Details.SortGroupIfHaveKey', count=1, confidence=0.20, sample='function Details.SortGroupIfHaveKey(table1, table2)'},
  },
  ['SortGroupMisc'] = {
    {name='Details.SortGroupMisc', count=1, confidence=0.20, sample='function Details.SortGroupMisc(container, keyName2)'},
  },
  ['SortKeyGroupMisc'] = {
    {name='Details.SortKeyGroupMisc', count=1, confidence=0.20, sample='function Details.SortKeyGroupMisc(table1, table2)'},
  },
  ['SortKeySimpleMisc'] = {
    {name='Details.SortKeySimpleMisc', count=1, confidence=0.20, sample='function Details.SortKeySimpleMisc(table1, table2)'},
  },
  ['ContainerSortMisc'] = {
    {name='ContainerSortMisc', count=1, confidence=0.20, sample='function Details:ContainerSortMisc(container, amount, keyName2)'},
  },
  ['ShowDeathTooltip'] = {
    {name='Details.ShowDeathTooltip', count=1, confidence=0.20, sample='function Details.ShowDeathTooltip(instance, lineFrame, combatObject, deathTable) --~death'},
  },
  ['ShowDeathTooltipFunction'] = {
    {name='Details.ShowDeathTooltipFunction', count=1, confidence=0.20, sample='local builtTooltip = Details.ShowDeathTooltipFunction(instance, barFrame, instance:GetShowingCombat(), deathTable)'},
  },
  ['RefreshBarraMorte'] = {
    {name='RefreshBarraMorte', count=1, confidence=0.20, sample='local function RefreshBarraMorte(morte, barra, instancia)'},
  },
  ['UpdateDeathRow'] = {
    {name='UpdateDeathRow', count=4, confidence=0.80, sample='atributo_misc:UpdateDeathRow(morte, morte.minha_barra, barra.colocacao, instancia)'},
  },
  ['SendReportLines'] = {
    {name='SendReportLines', count=3, confidence=0.60, sample='Details:SendReportLines(t)'},
  },
  ['ReportSingleDeadLine'] = {
    {name='ReportSingleDeadLine', count=1, confidence=0.20, sample='function atributo_misc:ReportSingleDeadLine(morte, instancia)'},
  },
  ['SendReportWindow'] = {
    {name='SendReportWindow', count=3, confidence=0.60, sample='Details:SendReportWindow(ReportSingleDeathFunc, nil, nil, true)'},
  },
  ['ReportSingleCooldownLine'] = {
    {name='ReportSingleCooldownLine', count=1, confidence=0.20, sample='function atributo_misc:ReportSingleCooldownLine(misc_actor, instancia)'},
  },
  ['ReportSingleBuffUptimeLine'] = {
    {name='ReportSingleBuffUptimeLine', count=1, confidence=0.20, sample='function atributo_misc:ReportSingleBuffUptimeLine(misc_actor, instance)'},
  },
  ['ReportSingleDebuffUptimeLine'] = {
    {name='ReportSingleDebuffUptimeLine', count=1, confidence=0.20, sample='function atributo_misc:ReportSingleDebuffUptimeLine(misc_actor, instance)'},
  },
  ['ToolTipInterrupt'] = {
    {name='ToolTipInterrupt', count=2, confidence=0.40, sample='return self:ToolTipInterrupt(instance, numero, barFrame, keydown)'},
  },
  ['ToolTipCC'] = {
    {name='ToolTipCC', count=2, confidence=0.40, sample='return self:ToolTipCC(instance, numero, barFrame, keydown)'},
  },
  ['ToolTipRess'] = {
    {name='ToolTipRess', count=2, confidence=0.40, sample='return self:ToolTipRess(instance, numero, barFrame, keydown)'},
  },
  ['ToolTipDispell'] = {
    {name='ToolTipDispell', count=2, confidence=0.40, sample='return self:ToolTipDispell(instance, numero, barFrame, keydown)'},
  },
  ['ToolTipDefensiveCooldowns'] = {
    {name='ToolTipDefensiveCooldowns', count=2, confidence=0.40, sample='return self:ToolTipDefensiveCooldowns(instance, numero, barFrame, keydown)'},
  },
  ['ToolTipBuffUptime'] = {
    {name='ToolTipBuffUptime', count=2, confidence=0.40, sample='return self:ToolTipBuffUptime(instance, barFrame)'},
  },
  ['ToolTipDebuffUptime'] = {
    {name='ToolTipDebuffUptime', count=2, confidence=0.40, sample='return self:ToolTipDebuffUptime(instance, numero, barFrame, keydown)'},
  },
  ['MontaInfoInterrupt'] = {
    {name='MontaInfoInterrupt', count=2, confidence=0.40, sample='return self:MontaInfoInterrupt()'},
  },
  ['MontaDetalhesInterrupt'] = {
    {name='MontaDetalhesInterrupt', count=2, confidence=0.40, sample='return self:MontaDetalhesInterrupt(spellid, barra)'},
  },
  ['IgnorePet'] = {
    {name='IgnorePet', count=2, confidence=0.40, sample='function petContainer.IgnorePet(petGuid)'},
  },
  ['RemovePetFrom_UNITPET'] = {
    {name='RemovePetFrom_UNITPET', count=2, confidence=0.40, sample='petContainer.RemovePetFrom_UNITPET(petGuid)'},
  },
  ['IsPetInCache'] = {
    {name='IsPetInCache', count=7, confidence=1.00, sample='function petContainer.IsPetInCache(petGuid)'},
  },
  ['AddPetByTable'] = {
    {name='AddPetByTable', count=6, confidence=1.00, sample='function petContainer.AddPetByTable(petData)'},
  },
  ['GetPetOwner'] = {
    {name='Details222.Pets.GetPetOwner', count=2, confidence=0.40, sample='local ownerName, ownerGuid, ownerFlags = Details222.Pets.GetPetOwner(petGuid, petName)'},
  },
  ['SavePetFrom_UNITPET'] = {
    {name='SavePetFrom_UNITPET', count=2, confidence=0.40, sample='function petContainer.SavePetFrom_UNITPET(unitGuid, petGuid)'},
  },
  ['IsPetFrom_UNITPET'] = {
    {name='IsPetFrom_UNITPET', count=2, confidence=0.40, sample='function petContainer.IsPetFrom_UNITPET(unitGuid)'},
  },
  ['GetUnitPetFrom_UNITPET'] = {
    {name='GetUnitPetFrom_UNITPET', count=2, confidence=0.40, sample='function petContainer.GetUnitPetFrom_UNITPET(unitGuid)'},
  },
  ['UpdatePets'] = {
    {name='UpdatePets', count=1, confidence=0.20, sample='function Details:UpdatePets()'},
  },
  ['AddMiss'] = {
    {name='AddMiss', count=1, confidence=0.20, sample='function classDamageSpellTable:AddMiss(serial, targetName, targetFlags, sourceName, missType)'},
  },
  ['RestartInstances'] = {
    {name='RestartInstances', count=1, confidence=0.20, sample='function Details:RestartInstances()'},
  },
  ['ReativarInstancias'] = {
    {name='ReativarInstancias', count=2, confidence=0.40, sample='return Details:ReativarInstancias()'},
  },
  ['RestauraJanela'] = {
    {name='RestauraJanela', count=5, confidence=1.00, sample='instancia:RestauraJanela(index, nil, true)'},
  },
  ['InstanciaCallFunctionOffline'] = {
    {name='InstanciaCallFunctionOffline', count=2, confidence=0.40, sample='function Details:InstanciaCallFunctionOffline(func, ...)'},
  },
  ['InstanceGroupCall'] = {
    {name='InstanceGroupCall', count=11, confidence=1.00, sample='function Details:InstanceGroupCall(instance, funcName, ...)'},
  },
  ['InstanceGroupEditSetting'] = {
    {name='InstanceGroupEditSetting', count=2, confidence=0.40, sample='function Details:InstanceGroupEditSetting(instance, keyName, value)'},
  },
  ['InstanceGroupEditSettingOnTable'] = {
    {name='InstanceGroupEditSettingOnTable', count=3, confidence=0.60, sample='function Details:InstanceGroupEditSettingOnTable(instance, table1Key, table2Key, table3Key, value)'},
  },
  ['SetSegmentId'] = {
    {name='SetSegmentId', count=2, confidence=0.40, sample='instance:SetSegmentId(DETAILS_SEGMENTID_CURRENT)'},
  },
  ['RefreshCombat'] = {
    {name='RefreshCombat', count=7, confidence=1.00, sample='instance:RefreshCombat()'},
  },
  ['SetSegment'] = {
    {name='SetSegment', count=7, confidence=1.00, sample='instance:SetSegment(DETAILS_SEGMENTID_CURRENT, bForceChange)'},
  },
  ['IsBreakdownWindowOpen'] = {
    {name='IsBreakdownWindowOpen', count=2, confidence=0.40, sample='if (Details:IsBreakdownWindowOpen()) then'},
  },
  ['CheckIntegrity'] = {
    {name='CheckIntegrity', count=1, confidence=0.20, sample='instance:CheckIntegrity()'},
  },
  ['OnModeChanged'] = {
    {name='Details222.Instances.OnModeChanged', count=2, confidence=0.40, sample='Details222.Instances.OnModeChanged(instance)'},
  },
  ['UnFreeze'] = {
    {name='UnFreeze', count=6, confidence=1.00, sample='instance:UnFreeze()'},
  },
  ['ValidateAttribute'] = {
    {name='Details222.Instances.ValidateAttribute', count=3, confidence=0.60, sample='if (Details222.Instances.ValidateAttribute(attributeId, subAttributeId)) then'},
  },
  ['CloseBreakdownWindow'] = {
    {name='CloseBreakdownWindow', count=16, confidence=1.00, sample='Details:CloseBreakdownWindow()'},
  },
  ['DumpActorInfo'] = {
    {name='DumpActorInfo', count=2, confidence=0.40, sample='Details:DumpActorInfo(actor)'},
  },
  ['GetSoloMode'] = {
    {name='GetSoloMode', count=1, confidence=0.20, sample='function Details:GetSoloMode()'},
  },
  ['GetRaidMode'] = {
    {name='GetRaidMode', count=1, confidence=0.20, sample='function Details:GetRaidMode()'},
  },
  ['IsSoloMode'] = {
    {name='IsSoloMode', count=4, confidence=0.80, sample='function Details:IsSoloMode(offline)'},
  },
  ['IsRaidMode'] = {
    {name='IsRaidMode', count=2, confidence=0.40, sample='function Details:IsRaidMode()'},
  },
  ['IsGroupMode'] = {
    {name='IsGroupMode', count=3, confidence=0.60, sample='function Details:IsGroupMode()'},
  },
  ['IsNormalMode'] = {
    {name='IsNormalMode', count=1, confidence=0.20, sample='function Details:IsNormalMode()'},
  },
  ['ResetAttribute'] = {
    {name='ResetAttribute', count=7, confidence=1.00, sample='function Details:ResetAttribute()'},
  },
  ['IsShowing'] = {
    {name='IsShowing', count=1, confidence=0.20, sample='function Details:IsShowing(segmentId, displayId, subDisplayId)'},
  },
  ['GetMaxInstancesAmount'] = {
    {name='GetMaxInstancesAmount', count=3, confidence=0.60, sample='function Details:GetMaxInstancesAmount()'},
  },
  ['SetMaxInstancesAmount'] = {
    {name='SetMaxInstancesAmount', count=1, confidence=0.20, sample='function Details:SetMaxInstancesAmount (amount)'},
  },
  ['GetFreeInstancesAmount'] = {
    {name='GetFreeInstancesAmount', count=1, confidence=0.20, sample='function Details:GetFreeInstancesAmount()'},
  },
  ['GetNumRows'] = {
    {name='GetNumRows', count=3, confidence=0.60, sample='function Details:GetNumRows()'},
  },
  ['GetRow'] = {
    {name='GetRow', count=4, confidence=0.80, sample='function Details:GetRow (index)'},
  },
  ['GetAllLines'] = {
    {name='GetAllLines', count=5, confidence=1.00, sample='function Details:GetAllLines()'},
  },
  ['GetTop5Actors'] = {
    {name='GetTop5Actors', count=1, confidence=0.20, sample='function Details:GetTop5Actors(displayId)'},
  },
  ['GetActorBySubDisplayAndRank'] = {
    {name='GetActorBySubDisplayAndRank', count=2, confidence=0.40, sample='function Details:GetActorBySubDisplayAndRank(displayId, subDisplayId, rankIndex)'},
  },
  ['GetActorByRank'] = {
    {name='GetActorByRank', count=1, confidence=0.20, sample='function Details:GetActorByRank(displayId, rankIndex)'},
  },
  ['DesativarInstancia'] = {
    {name='DesativarInstancia', count=5, confidence=1.00, sample='return self:DesativarInstancia(all)'},
  },
  ['Shutdown'] = {
    {name='Shutdown', count=3, confidence=0.60, sample='function Details:Shutdown(all)'},
  },
  ['GetNumWindows'] = {
    {name='GetNumWindows', count=1, confidence=0.20, sample='function Details:GetNumWindows()'},
  },
  ['CloseMe'] = {
    {name='CloseMe', count=10, confidence=1.00, sample='Details.switch:CloseMe()'},
  },
  ['Desagrupar'] = {
    {name='Desagrupar', count=5, confidence=1.00, sample='self:Desagrupar (-1)'},
  },
  ['InstanciaFadeBarras'] = {
    {name='InstanciaFadeBarras', count=1, confidence=0.20, sample='function Details:InstanciaFadeBarras (instancia, segmento)'},
  },
  ['CheckCoupleWindows'] = {
    {name='CheckCoupleWindows', count=2, confidence=0.40, sample='function Details:CheckCoupleWindows (instance1, instance2)'},
  },
  ['VPL'] = {
    {name='Details.VPL', count=1, confidence=0.20, sample='local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)'},
    {name='VPL', count=4, confidence=0.80, sample='local function VPL(instance, esta_instancia)'},
  },
  ['VPB'] = {
    {name='Details.VPB', count=1, confidence=0.20, sample='local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)'},
    {name='VPB', count=4, confidence=0.80, sample='local function VPB(instance, esta_instancia)'},
  },
  ['VPR'] = {
    {name='Details.VPR', count=1, confidence=0.20, sample='local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)'},
    {name='VPR', count=4, confidence=0.80, sample='local function VPR(instance, esta_instancia)'},
  },
  ['VPT'] = {
    {name='Details.VPT', count=1, confidence=0.20, sample='local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)'},
    {name='VPT', count=4, confidence=0.80, sample='local function VPT(instance, esta_instancia)'},
  },
  ['MakeInstanceGroup'] = {
    {name='MakeInstanceGroup', count=4, confidence=0.80, sample='instance2:MakeInstanceGroup ({false, false, 1, false})'},
  },
  ['ReopenAllWindows'] = {
    {name='ReopenAllWindows', count=1, confidence=0.20, sample='function Details:ReopenAllWindows(...)'},
  },
  ['TravasInstancias'] = {
    {name='TravasInstancias', count=1, confidence=0.20, sample='function Details:TravasInstancias()'},
  },
  ['DestravarInstancias'] = {
    {name='DestravarInstancias', count=1, confidence=0.20, sample='function Details:DestravarInstancias()'},
  },
  ['SetMenuAlpha'] = {
    {name='SetMenuAlpha', count=6, confidence=1.00, sample='self:SetMenuAlpha()'},
  },
  ['ToolbarSide'] = {
    {name='ToolbarSide', count=7, confidence=1.00, sample='self:ToolbarSide()'},
  },
  ['ApagarInstancia'] = {
    {name='ApagarInstancia', count=1, confidence=0.20, sample='function Details:ApagarInstancia (ID)'},
  },
  ['QuantasInstancias'] = {
    {name='QuantasInstancias', count=1, confidence=0.20, sample='function Details:QuantasInstancias()'},
  },
  ['DeleteInstance'] = {
    {name='DeleteInstance', count=2, confidence=0.40, sample='function Details:DeleteInstance (id)'},
  },
  ['CreateNewInstance'] = {
    {name='CreateNewInstance', count=3, confidence=0.60, sample='local new_instance = Details:CreateNewInstance (next_id)'},
  },
  ['EstaAgrupada'] = {
    {name='EstaAgrupada', count=5, confidence=1.00, sample='function Details:EstaAgrupada(esta_instancia, lado) --lado //// 1 = encostou na esquerda // 2 = escostou emaixo // 3 = encostou na direita // 4 = encostou em cima'},
  },
  ['SetWindowScale'] = {
    {name='SetWindowScale', count=4, confidence=0.80, sample='instance:SetWindowScale (scale)'},
  },
  ['ShowMe'] = {
    {name='ShowMe', count=29, confidence=1.00, sample='Details.popup:ShowMe(instancia.break_snap_button, "tooltip", "Interface\\Buttons\\LockButton-Unlocked-Up", Loc ["STRING_UNLOCK"], 150, Details.temp_table1)'},
  },
  ['UIFrameFlash'] = {
    {name='UIFrameFlash', count=1, confidence=0.20, sample='--UIFrameFlash (instancia.break_snap_button, .5, .5, 5, false, 0, 0)'},
  },
  ['SnapTextures'] = {
    {name='SnapTextures', count=3, confidence=0.60, sample='function Details:SnapTextures (remove)'},
  },
  ['CriaJanelaPrincipal'] = {
    {name='CriaJanelaPrincipal', count=3, confidence=0.60, sample='local _baseframe, _bgframe, _bgframe_display, _scrollframe = gump:CriaJanelaPrincipal(instanceId, newInstance, true)'},
  },
  ['ShowSideBars'] = {
    {name='ShowSideBars', count=5, confidence=1.00, sample='newInstance:ShowSideBars()'},
  },
  ['RestoreWindow'] = {
    {name='RestoreWindow', count=2, confidence=0.40, sample='function Details:RestoreWindow(index, temp, loadOnly)'},
  },
  ['InstanceColor'] = {
    {name='InstanceColor', count=10, confidence=1.00, sample='self:InstanceColor (self.color)'},
  },
  ['SwitchTo'] = {
    {name='SwitchTo', count=9, confidence=1.00, sample='function Details:SwitchTo (switch_table, nosave)'},
  },
  ['GetRaidPluginName'] = {
    {name='GetRaidPluginName', count=2, confidence=0.40, sample='self.auto_switch_to_old = {self.modo, self.atributo, self.sub_atributo, self.segmento, self:GetRaidPluginName(), Details.SoloTables.Mode}'},
  },
  ['CheckSegmentForSwitchOnCombatStart'] = {
    {name='CheckSegmentForSwitchOnCombatStart', count=1, confidence=0.20, sample='function Details:CheckSegmentForSwitchOnCombatStart()'},
  },
  ['ApplySavedSkin'] = {
    {name='ApplySavedSkin', count=1, confidence=0.20, sample='function Details:ApplySavedSkin (style)'},
  },
  ['UpdateCombatObjectInUse'] = {
    {name='UpdateCombatObjectInUse', count=4, confidence=0.80, sample='self:UpdateCombatObjectInUse(self)'},
  },
  ['InstanceRefreshRows'] = {
    {name='InstanceRefreshRows', count=14, confidence=1.00, sample='self:InstanceRefreshRows(instance)'},
  },
  ['SetBackgroundColor'] = {
    {name='SetBackgroundColor', count=5, confidence=1.00, sample='function Details:SetBackgroundColor(...)'},
  },
  ['SetBackgroundAlpha'] = {
    {name='SetBackgroundAlpha', count=3, confidence=0.60, sample='function Details:SetBackgroundAlpha (alpha)'},
  },
  ['PostponeSwitchToCurrent'] = {
    {name='PostponeSwitchToCurrent', count=1, confidence=0.20, sample='function Details:PostponeSwitchToCurrent(instance)'},
  },
  ['InstanceMsg'] = {
    {name='InstanceMsg', count=3, confidence=0.60, sample='instancia:InstanceMsg(Loc ["STRING_FREEZE"], [[Interface\CHARACTERFRAME\Disconnect-Icon]], "silver")'},
  },
  ['AtualizaSegmentos_AfterCombat'] = {
    {name='AtualizaSegmentos_AfterCombat', count=1, confidence=0.20, sample='function Details:AtualizaSegmentos_AfterCombat(instancia)'},
  },
  ['MontaRaidOption'] = {
    {name='MontaRaidOption', count=2, confidence=0.40, sample='function Details:MontaRaidOption (instancia)'},
  },
  ['MontaSoloOption'] = {
    {name='MontaSoloOption', count=2, confidence=0.40, sample='function Details:MontaSoloOption (instancia)'},
  },
  ['MontaAtributosOption'] = {
    {name='MontaAtributosOption', count=4, confidence=0.80, sample='function Details:MontaAtributosOption (instancia, func)'},
  },
  ['GetDpsHps'] = {
    {name='GetDpsHps', count=2, confidence=0.40, sample='local function GetDpsHps (_thisActor, key)'},
  },
  ['GetChecked'] = {
    {name='GetChecked', count=5, confidence=1.00, sample='local is_current = _G ["Details_Report_CB_1"]:GetChecked()'},
  },
  ['UnpackMythicDungeonInfo'] = {
    {name='UnpackMythicDungeonInfo', count=7, confidence=1.00, sample='local isMythicOverallSegment, segmentID, mythicLevel, EJID, mapID, zoneName, encounterID, encounterName, startedAt, endedAt, runID = Details:UnpackMythicDungeonInfo (mythicDungeonInfo)'},
  },
  ['AddHistoryLine'] = {
    {name='AddHistoryLine', count=2, confidence=0.40, sample='editbox:AddHistoryLine (texto)'},
  },
  ['DelayUpdateReportWindowRecentlyReported'] = {
    {name='DelayUpdateReportWindowRecentlyReported', count=2, confidence=0.40, sample='Details:DelayUpdateReportWindowRecentlyReported()'},
  },
  ['SendReportTextWindow'] = {
    {name='SendReportTextWindow', count=2, confidence=0.40, sample='Details:SendReportTextWindow (linhas)'},
  },
  ['ResetSegmentOverallData'] = {
    {name='ResetSegmentOverallData', count=1, confidence=0.20, sample='function Details:ResetSegmentOverallData()'},
  },
  ['RemoveSegment'] = {
    {name='RemoveSegment', count=4, confidence=0.80, sample='function Details:RemoveSegment(segmentIndex)'},
  },
  ['RemoveSegmentByCombatObject'] = {
    {name='RemoveSegmentByCombatObject', count=4, confidence=0.80, sample='function Details:RemoveSegmentByCombatObject(combatObject)'},
  },
  ['AddToOverallData'] = {
    {name='AddToOverallData', count=6, confidence=1.00, sample='function segmentClass:AddToOverallData(combatObject)'},
  },
  ['CanAddCombatToOverall'] = {
    {name='CanAddCombatToOverall', count=3, confidence=0.60, sample='function Details:CanAddCombatToOverall(combatObject)'},
  },
  ['GetInstanceType'] = {
    {name='GetInstanceType', count=6, confidence=1.00, sample='if (combatObject.is_boss and combatObject:GetInstanceType() == "raid" and not combatObject.is_pvp) then'},
  },
  ['GetWipeCounter'] = {
    {name='GetWipeCounter', count=1, confidence=0.20, sample='function Details:GetWipeCounter(guildName, encounterId, difficultyId)'},
  },
  ['GetBossHealth'] = {
    {name='GetBossHealth', count=5, confidence=1.00, sample='table.sort(allWipeSegmentsInThisBoss, function(a, b) return a:GetBossHealth() < b:GetBossHealth() end)'},
  },
  ['CheckFreeze'] = {
    {name='CheckFreeze', count=1, confidence=0.20, sample='function Details:CheckFreeze(instanceObject, segmentId, combatObject)'},
  },
  ['SetOverallResetOptions'] = {
    {name='SetOverallResetOptions', count=5, confidence=1.00, sample='function Details:SetOverallResetOptions(resetOnNewBoss, resetOnNewChallenge, resetOnLogoff, resetOnNewPVP)'},
  },
  ['ResetDataByCombatType'] = {
    {name='ResetDataByCombatType', count=4, confidence=0.80, sample='function segmentClass:ResetDataByCombatType(combatType)'},
  },
  ['ResetInstanceConfigKeepingValues'] = {
    {name='ResetInstanceConfigKeepingValues', count=2, confidence=0.40, sample='function _detalhes:ResetInstanceConfigKeepingValues (maintainsnap)'},
  },
  ['EraseTimeData'] = {
    {name='EraseTimeData', count=1, confidence=0.20, sample='function classCombat:EraseTimeData(name)'},
  },
  ['GetEncounterCleuID'] = {
    {name='GetEncounterCleuID', count=2, confidence=0.40, sample='function classCombat:GetEncounterCleuID()'},
  },
  ['GetPlayerDeaths'] = {
    {name='GetPlayerDeaths', count=2, confidence=0.40, sample='function classCombat:GetPlayerDeaths(deadPlayerName)'},
  },
  ['GetEncounterName'] = {
    {name='GetEncounterName', count=3, confidence=0.60, sample='function classCombat:GetEncounterName()'},
  },
  ['GetBossImage'] = {
    {name='GetBossImage', count=2, confidence=0.40, sample='function classCombat:GetBossImage()'},
  },
  ['GetCCCastAmount'] = {
    {name='GetCCCastAmount', count=2, confidence=0.40, sample='local amountOfCCCastsByThisActor = self:GetCCCastAmount(actorName)'},
  },
  ['GetDamageTakenBySpells'] = {
    {name='GetDamageTakenBySpells', count=1, confidence=0.20, sample='function classCombat:GetDamageTakenBySpells(actorName)'},
  },
  ['GetInterruptCastAmount'] = {
    {name='GetInterruptCastAmount', count=2, confidence=0.40, sample='function classCombat:GetInterruptCastAmount(actorName)'},
  },
  ['GetSpellUptime'] = {
    {name='GetSpellUptime', count=3, confidence=0.60, sample='function classCombat:GetSpellUptime(actorName, spellId, auraType)'},
  },
  ['GetSegmentSlotId'] = {
    {name='GetSegmentSlotId', count=5, confidence=1.00, sample='function classCombat:GetSegmentSlotId()'},
  },
  ['GetCombatIcon'] = {
    {name='GetCombatIcon', count=13, confidence=1.00, sample='function classCombat:GetCombatIcon()'},
  },
  ['GetFormattedCombatTime'] = {
    {name='GetFormattedCombatTime', count=3, confidence=0.60, sample='local formattedTime = self:GetFormattedCombatTime()'},
  },
  ['GetTryNumber'] = {
    {name='GetTryNumber', count=3, confidence=0.60, sample='local tryNumber = self:GetTryNumber()'},
  },
  ['GetCombatTypeName'] = {
    {name='GetCombatTypeName', count=1, confidence=0.20, sample='function classCombat:GetCombatTypeName()'},
  },
  ['GetRunTimeNoDefault'] = {
    {name='GetRunTimeNoDefault', count=2, confidence=0.40, sample='function classCombat:GetRunTimeNoDefault()'},
  },
  ['GetBossHealthString'] = {
    {name='GetBossHealthString', count=2, confidence=0.40, sample='function classCombat:GetBossHealthString()'},
  },
  ['GetCurrentPhase'] = {
    {name='GetCurrentPhase', count=2, confidence=0.40, sample='function classCombat:GetCurrentPhase()'},
  },
  ['CopyDeathsFrom'] = {
    {name='CopyDeathsFrom', count=5, confidence=1.00, sample='function classCombat.CopyDeathsFrom(combat1, combat2, bMythicPlus)'},
  },
  ['DeleteActor'] = {
    {name='DeleteActor', count=1, confidence=0.20, sample='function classCombat:DeleteActor(attribute, actorName, removeDamageTaken, cannotRemap)'},
  },
  ['CreateNewCombatTable'] = {
    {name='CreateNewCombatTable', count=1, confidence=0.20, sample='function classCombat:CreateNewCombatTable()'},
  },
  ['GetNumDeclensionSets'] = {
    {name='GetNumDeclensionSets', count=1, confidence=0.20, sample='for declensionSet = 1, GetNumDeclensionSets(playerName, gender) do'},
  },
  ['DeclineName'] = {
    {name='DeclineName', count=1, confidence=0.20, sample='local genitive = DeclineName(playerName, gender, declensionSet)'},
  },
  ['FuncaoDeCriacao'] = {
    {name='FuncaoDeCriacao', count=3, confidence=0.60, sample='funcao_de_criacao = actorContainer:FuncaoDeCriacao(containerType),'},
  },
  ['GetPlayerMythicPlusRatingSummary'] = {
    {name='C_PlayerInfo.GetPlayerMythicPlusRatingSummary', count=6, confidence=1.00, sample='local dungeonPlayerInfo = C_PlayerInfo.GetPlayerMythicPlusRatingSummary(actorName) or {}'},
  },
  ['GetBattlefieldArenaFaction'] = {
    {name='GetBattlefieldArenaFaction', count=2, confidence=0.40, sample='--local my_team_color = GetBattlefieldArenaFaction and GetBattlefieldArenaFaction() or 0'},
  },
  ['GetArenaOpponentSpec'] = {
    {name='GetArenaOpponentSpec', count=1, confidence=0.20, sample='local spec = GetArenaOpponentSpec and GetArenaOpponentSpec(i)'},
  },
  ['AddUnique'] = {
    {name='AddUnique', count=4, confidence=0.80, sample='AddUnique(petOwnerObject.pets, actorName)'},
  },
  ['AddToNpcIdCache'] = {
    {name='AddToNpcIdCache', count=1, confidence=0.20, sample='function Details:AddToNpcIdCache(actor) --not called anywhere'},
  },
  ['SortGroupResource'] = {
    {name='SortGroupResource', count=1, confidence=0.20, sample='function _detalhes.SortGroupResource (container, keyName2)'},
  },
  ['SortKeyGroupResources'] = {
    {name='SortKeyGroupResources', count=1, confidence=0.20, sample='function _detalhes.SortKeyGroupResources (table1, table2)'},
  },
  ['SortKeySimpleResources'] = {
    {name='SortKeySimpleResources', count=1, confidence=0.20, sample='function _detalhes.SortKeySimpleResources (table1, table2)'},
  },
  ['ContainerSortResources'] = {
    {name='ContainerSortResources', count=2, confidence=0.40, sample='function _detalhes:ContainerSortResources (container, amount, keyName2)'},
  },
  ['RefreshBarraResources'] = {
    {name='RefreshBarraResources', count=1, confidence=0.20, sample='local function RefreshBarraResources (tabela, barra, instancia)'},
  },
  ['AtualizarResources'] = {
    {name='AtualizarResources', count=3, confidence=0.60, sample='tabela:AtualizarResources (tabela.minha_barra, barra.colocacao, instancia)'},
  },
  ['KeyNames'] = {
    {name='KeyNames', count=1, confidence=0.20, sample='function atributo_energy:KeyNames (sub_atributo)'},
  },
  ['ToolTipRegenRecebido'] = {
    {name='ToolTipRegenRecebido', count=2, confidence=0.40, sample='return self:ToolTipRegenRecebido (instancia, numero, barra, keydown)'},
  },
  ['MontaInfoRegenRecebido'] = {
    {name='MontaInfoRegenRecebido', count=2, confidence=0.40, sample='return self:MontaInfoRegenRecebido()'},
  },
  ['MontaDetalhesRegenRecebido'] = {
    {name='MontaDetalhesRegenRecebido', count=2, confidence=0.40, sample='return self:MontaDetalhesRegenRecebido (spellid, barra)'},
  },
  ['GetCustomClass'] = {
    {name='GetCustomClass', count=1, confidence=0.20, sample='function Details:GetCustomClass()'},
  },
  ['DoesCustomDisplayExists'] = {
    {name='DoesCustomDisplayExists', count=2, confidence=0.40, sample='function Details:DoesCustomDisplayExists(customDisplayName)'},
  },
  ['CreateCustomDisplayObject'] = {
    {name='CreateCustomDisplayObject', count=4, confidence=0.80, sample='function Details:CreateCustomDisplayObject(name, icon, searchScript, tooltipScript, totalScript, percentScript)'},
  },
  ['GetNumCustomDisplays'] = {
    {name='GetNumCustomDisplays', count=2, confidence=0.40, sample='function Details:GetNumCustomDisplays()'},
  },
  ['GetCustomDisplay'] = {
    {name='GetCustomDisplay', count=1, confidence=0.20, sample='function Details:GetCustomDisplay(index)'},
  },
  ['GetCombatContainerIndex'] = {
    {name='GetCombatContainerIndex', count=3, confidence=0.60, sample='function classCustom:GetCombatContainerIndex (attribute)'},
  },
  ['GetInstanceCustomActorContainer'] = {
    {name='GetInstanceCustomActorContainer', count=2, confidence=0.40, sample='local instance_container = classCustom:GetInstanceCustomActorContainer (instanceObject)'},
  },
  ['IsScripted'] = {
    {name='IsScripted', count=4, confidence=0.80, sample='if (customObject:IsScripted()) then'},
  },
  ['ResetCustomActorContainer'] = {
    {name='ResetCustomActorContainer', count=3, confidence=0.60, sample='instance_container:ResetCustomActorContainer()'},
  },
  ['BuildActorList'] = {
    {name='BuildActorList', count=2, confidence=0.40, sample='total, top, amount = classCustom:BuildActorList (func, customObject.source, customObject.target, customObject.spellid, combatObject, combat_container, container_index, instance_container, instanceObject, customObject)'},
  },
  ['Sort'] = {
    {name='Sort', count=3, confidence=0.60, sample='instance_container:Sort()'},
  },
  ['UpdateBar'] = {
    {name='UpdateBar', count=5, confidence=1.00, sample='instance_container._ActorTable[i]:UpdateBar (barContainer, whichRowLine, percentageType, i, total, top, instance, force, percent_script, total_script, combat, bars_show_data, bars_brackets, bars_separator)'},
  },
  ['CreateCustomActorContainer'] = {
    {name='CreateCustomActorContainer', count=2, confidence=0.40, sample='function classCustom:CreateCustomActorContainer()'},
  },
  ['UpdateClass'] = {
    {name='UpdateClass', count=1, confidence=0.20, sample='function classCustom:UpdateClass(actors)'},
  },
  ['GetAuthor'] = {
    {name='GetAuthor', count=2, confidence=0.40, sample='function classCustom:GetAuthor()'},
  },
  ['GetDesc'] = {
    {name='GetDesc', count=2, confidence=0.40, sample='function classCustom:GetDesc()'},
  },
  ['GetSource'] = {
    {name='GetSource', count=2, confidence=0.40, sample='function classCustom:GetSource()'},
  },
  ['GetTarget'] = {
    {name='GetTarget', count=2, confidence=0.40, sample='function classCustom:GetTarget()'},
  },
  ['GetSpellId'] = {
    {name='GetSpellId', count=2, confidence=0.40, sample='function classCustom:GetSpellId()'},
  },
  ['GetScriptToolip'] = {
    {name='GetScriptToolip', count=2, confidence=0.40, sample='function classCustom:GetScriptToolip()'},
  },
  ['GetScriptTotal'] = {
    {name='GetScriptTotal', count=2, confidence=0.40, sample='function classCustom:GetScriptTotal()'},
  },
  ['GetScriptPercent'] = {
    {name='GetScriptPercent', count=2, confidence=0.40, sample='function classCustom:GetScriptPercent()'},
  },
  ['SetAuthor'] = {
    {name='SetAuthor', count=1, confidence=0.20, sample='function classCustom:SetAuthor (author)'},
  },
  ['SetDesc'] = {
    {name='SetDesc', count=1, confidence=0.20, sample='function classCustom:SetDesc (desc)'},
  },
  ['SetSource'] = {
    {name='SetSource', count=1, confidence=0.20, sample='function classCustom:SetSource (source)'},
  },
  ['SetSpellId'] = {
    {name='SetSpellId', count=1, confidence=0.20, sample='function classCustom:SetSpellId (spellid)'},
  },
  ['SetScriptToolip'] = {
    {name='SetScriptToolip', count=1, confidence=0.20, sample='function classCustom:SetScriptToolip (code)'},
  },
  ['RemoveCustom'] = {
    {name='RemoveCustom', count=3, confidence=0.60, sample='function classCustom:RemoveCustom (index)'},
  },
  ['OnRemoveCustom'] = {
    {name='OnRemoveCustom', count=3, confidence=0.60, sample='Details.switch:OnRemoveCustom (index)'},
  },
  ['RemoveCustomObject'] = {
    {name='RemoveCustomObject', count=2, confidence=0.40, sample='function Details:RemoveCustomObject (object_name)'},
  },
  ['ResetCustomFunctionsCache'] = {
    {name='ResetCustomFunctionsCache', count=5, confidence=1.00, sample='function Details:ResetCustomFunctionsCache()'},
  },
  ['UpdateHealingDoneBracket'] = {
    {name='UpdateHealingDoneBracket', count=2, confidence=0.40, sample='classCustom:UpdateHealingDoneBracket()'},
  },
  ['InstallCustomObject'] = {
    {name='InstallCustomObject', count=2, confidence=0.40, sample='function Details:InstallCustomObject (object)'},
  },
  ['Nh'] = {
    {name='Nh', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['N3'] = {
    {name='N3', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['QPGXwp84IXUt9cgVyX3DVB5Ihd'] = {
    {name='QPGXwp84IXUt9cgVyX3DVB5Ihd', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs'] = {
    {name='BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['GBMidlVgmGrt3cffPOTaX1l'] = {
    {name='GBMidlVgmGrt3cffPOTaX1l', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq'] = {
    {name='Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th'] = {
    {name='SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th', count=1, confidence=0.20, sample='import_string = "1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d",'},
  },
  ['Ranking'] = {
    {name='Ranking', count=1, confidence=0.20, sample='--PVPMatchResults.content.earningsContainer.progressContainer .honor{.button{.Ring .Icon .CircleMask} .text .legacyButton} .conquest{.button{.Ring .Icon .CircleMask} .text .legacyButton} .rating{.button{.Icon .RankingShadow .Ranking(fontstring)} .text}'},
  },
  ['OpenWindow'] = {
    {name='ArenaSummary.OpenWindow', count=2, confidence=0.40, sample='return ArenaSummary.OpenWindow()'},
  },
  ['CreateWindow'] = {
    {name='ArenaSummary.CreateWindow', count=2, confidence=0.40, sample='ArenaSummary.window = ArenaSummary.CreateWindow()'},
  },
  ['RefreshScroll'] = {
    {name='RefreshScroll', count=10, confidence=1.00, sample='ArenaSummary.window.ArenaPlayersScroll:RefreshScroll()'},
    {name='Details.AuraTracker.RefreshScroll', count=1, confidence=0.20, sample='function Details.AuraTracker.RefreshScroll(self, data, offset, totalLines)'},
  },
  ['GetDampeningPercent'] = {
    {name='C_Commentator.GetDampeningPercent', count=1, confidence=0.20, sample='Details222.ArenaSummary.arenaData.dampening = C_Commentator.GetDampeningPercent()'},
  },
  ['NewLooper'] = {
    {name='NewLooper', count=1, confidence=0.20, sample='--signature: NewLooper(time: number, callback: function, loopAmount: number, loopEndCallback: function?, checkPointCallback: function?, ...: any): timer'},
    {name='Schedules.NewLooper', count=4, confidence=0.80, sample='ArenaSummary.LoopTicker = detailsFramework.Schedules.NewLooper(time, arenaTicker, loopAmount, loopEndCallback)'},
  },
  ['GetPlayerDamageSpells'] = {
    {name='ArenaSummary.GetPlayerDamageSpells', count=2, confidence=0.40, sample='function ArenaSummary.GetPlayerDamageSpells(actorObject)'},
  },
  ['GetPlayerHealingSpells'] = {
    {name='ArenaSummary.GetPlayerHealingSpells', count=2, confidence=0.40, sample='function ArenaSummary.GetPlayerHealingSpells(actorObject)'},
  },
  ['GetTeamInfo'] = {
    {name='C_PvP.GetTeamInfo', count=3, confidence=0.60, sample='C_PvP.GetTeamInfo and C_PvP.GetTeamInfo(0) or {},'},
  },
  ['IsArenaSkirmish'] = {
    {name='IsArenaSkirmish', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.isArenaSkirmish = IsArenaSkirmish()'},
  },
  ['IsRatedSoloShuffle'] = {
    {name='C_PvP.IsRatedSoloShuffle', count=3, confidence=0.60, sample='Details222.ArenaSummary.arenaData.isRatedSoloShuffle = C_PvP.IsRatedSoloShuffle and C_PvP.IsRatedSoloShuffle() or false'},
  },
  ['IsMatchFactional'] = {
    {name='C_PvP.IsMatchFactional', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.isFactionalMatch = C_PvP.IsMatchFactional and C_PvP.IsMatchFactional() or false'},
  },
  ['IsBrawlSoloShuffle'] = {
    {name='C_PvP.IsBrawlSoloShuffle', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.isBrawlSoloShuffle = C_PvP.IsBrawlSoloShuffle and C_PvP.IsBrawlSoloShuffle() or false'},
  },
  ['IsBrawlSoloRBG'] = {
    {name='C_PvP.IsBrawlSoloRBG', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.isBrawlSoloRBG = C_PvP.IsBrawlSoloRBG and C_PvP.IsBrawlSoloRBG() or false'},
  },
  ['IsSoloShuffle'] = {
    {name='C_PvP.IsSoloShuffle', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.isSoloShuffle = C_PvP.IsSoloShuffle and C_PvP.IsSoloShuffle() or false'},
  },
  ['GetScoreInfoByPlayerGuid'] = {
    {name='C_PvP.GetScoreInfoByPlayerGuid', count=4, confidence=0.80, sample='Details222.ArenaSummary.arenaData.playerScoreInfo = C_PvP.GetScoreInfoByPlayerGuid and C_PvP.GetScoreInfoByPlayerGuid(UnitGUID("player")) or 0'},
  },
  ['DoesMatchOutcomeAffectRating'] = {
    {name='C_PvP.DoesMatchOutcomeAffectRating', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.doesMatchOutcomeAffectRating = C_PvP.DoesMatchOutcomeAffectRating and C_PvP.DoesMatchOutcomeAffectRating() or false'},
  },
  ['GetMatchPVPStatColumns'] = {
    {name='C_PvP.GetMatchPVPStatColumns', count=2, confidence=0.40, sample='Details222.ArenaSummary.arenaData.statColumns = C_PvP.GetMatchPVPStatColumns and C_PvP.GetMatchPVPStatColumns() or {}'},
  },
  ['GetPVPActiveMatchPersonalRatedInfo'] = {
    {name='C_PvP.GetPVPActiveMatchPersonalRatedInfo', count=1, confidence=0.20, sample='local personalRatedInfo = C_PvP.GetPVPActiveMatchPersonalRatedInfo and C_PvP.GetPVPActiveMatchPersonalRatedInfo()'},
  },
  ['GetPostMatchItemRewards'] = {
    {name='C_PvP.GetPostMatchItemRewards', count=1, confidence=0.20, sample='for k, item in pairs(C_PvP.GetPostMatchItemRewards()) do'},
  },
  ['GetPostMatchCurrencyRewards'] = {
    {name='C_PvP.GetPostMatchCurrencyRewards', count=1, confidence=0.20, sample='for k, currency in pairs(C_PvP.GetPostMatchCurrencyRewards()) do'},
  },
  ['GetCCSpellIdBySpellName'] = {
    {name='GetCCSpellIdBySpellName', count=2, confidence=0.40, sample='local spellId = spellInfo and spellInfo.spellID or openRaidLib.GetCCSpellIdBySpellName(spellName)'},
  },
  ['GetCustomVictoryStatID'] = {
    {name='C_PvP.GetCustomVictoryStatID', count=1, confidence=0.20, sample='local victoryStatID = C_PvP.GetCustomVictoryStatID and C_PvP.GetCustomVictoryStatID() or 0'},
  },
  ['GetActiveMatchWinner'] = {
    {name='C_PvP.GetActiveMatchWinner', count=1, confidence=0.20, sample='local winner = C_PvP.GetActiveMatchWinner and C_PvP.GetActiveMatchWinner()'},
  },
  ['GetScoreInfo'] = {
    {name='C_PvP.GetScoreInfo', count=1, confidence=0.20, sample='scoresTable[index] = C_PvP.GetScoreInfo and C_PvP.GetScoreInfo(index) or {}'},
  },
  ['GetPlayerGuid'] = {
    {name='GetPlayerGuid', count=1, confidence=0.20, sample='playerScoreInfo = C_PvP.GetScoreInfoByPlayerGuid and C_PvP.GetScoreInfoByPlayerGuid(GetPlayerGuid()) or {},'},
  },
  ['CompressArena'] = {
    {name='ArenaSummary.CompressArena', count=2, confidence=0.40, sample='local thisArenaDataCompressed = ArenaSummary.CompressArena(thisArenaData)'},
  },
  ['GetClassTCoordsAndTexture'] = {
    {name='GetClassTCoordsAndTexture', count=4, confidence=0.80, sample='iconLeft, iconRight, iconTop, iconBottom, iconTexture = detailsFramework:GetClassTCoordsAndTexture(playerData.class)'},
  },
  ['GetPlayerInfoFromCurrentSelectedArenaData'] = {
    {name='ArenaSummary.GetPlayerInfoFromCurrentSelectedArenaData', count=3, confidence=0.60, sample='local enemyPlayerInfo = ArenaSummary.GetPlayerInfoFromCurrentSelectedArenaData(enemyName)'},
  },
  ['SetFontSettings'] = {
    {name='ArenaSummary.SetFontSettings', count=1, confidence=0.20, sample='function ArenaSummary.SetFontSettings()'},
  },
  ['GetObject'] = {
    {name='GetObject', count=8, confidence=1.00, sample='local button = self:GetObject()'},
  },
  ['SetPropagateMouseMotion'] = {
    {name='SetPropagateMouseMotion', count=1, confidence=0.20, sample='button:SetPropagateMouseMotion(true)'},
  },
  ['SetSelectedArenaIndex'] = {
    {name='ArenaSummary.SetSelectedArenaIndex', count=1, confidence=0.20, sample='function ArenaSummary.SetSelectedArenaIndex(index)'},
  },
  ['GetSelectedArenaIndex'] = {
    {name='ArenaSummary.GetSelectedArenaIndex', count=1, confidence=0.20, sample='function ArenaSummary.GetSelectedArenaIndex()'},
  },
  ['UncompressArena'] = {
    {name='ArenaSummary.UncompressArena', count=2, confidence=0.40, sample='local arenaData = ArenaSummary.UncompressArena(index)'},
  },
  ['RequeueSkirmish'] = {
    {name='RequeueSkirmish', count=1, confidence=0.20, sample='RequeueSkirmish()'},
  },
  ['IsInLFDBattlefield'] = {
    {name='IsInLFDBattlefield', count=1, confidence=0.20, sample='if (IsInLFDBattlefield()) then'},
  },
  ['ConfirmOrLeaveLFGParty'] = {
    {name='ConfirmOrLeaveLFGParty', count=1, confidence=0.20, sample='ConfirmOrLeaveLFGParty()'},
  },
  ['ConfirmOrLeaveBattlefield'] = {
    {name='ConfirmOrLeaveBattlefield', count=1, confidence=0.20, sample='ConfirmOrLeaveBattlefield()'},
  },
  ['UncompressedArena'] = {
    {name='UncompressedArena', count=1, confidence=0.20, sample='assert(type(headerIndex) == "number", "UncompressedArena(headerIndex): headerIndex must be a number.")'},
  },
  ['UncompressedRun'] = {
    {name='UncompressedRun', count=3, confidence=0.60, sample='print("UncompressedRun(headerIndex): C_EncodingUtil.DecodeBase64 failed")'},
  },
  ['OpenEventTrackerOptions'] = {
    {name='OpenEventTrackerOptions', count=2, confidence=0.40, sample='function Details:OpenEventTrackerOptions(bFromOptionsPanel)'},
  },
  ['BuildDropDownFontList'] = {
    {name='BuildDropDownFontList', count=4, confidence=0.80, sample='values = function() return DF:BuildDropDownFontList (on_select_text_font) end,'},
  },
  ['IsNonRetailWowWithRetailAPI'] = {
    {name='DetailsFramework.IsNonRetailWowWithRetailAPI', count=2, confidence=0.40, sample='if (not DetailsFramework.IsDragonflightAndBeyond() and not DetailsFramework.IsNonRetailWowWithRetailAPI()) then'},
    {name='DF.IsNonRetailWowWithRetailAPI', count=2, confidence=0.40, sample='function DF.IsNonRetailWowWithRetailAPI()'},
    {name='IsNonRetailWowWithRetailAPI', count=1, confidence=0.20, sample='if (detailsFramework.IsDragonflight() or detailsFramework.IsNonRetailWowWithRetailAPI() or detailsFramework.IsWarWow()) then'},
  },
  ['CreateResizeGrips'] = {
    {name='CreateResizeGrips', count=6, confidence=1.00, sample='local leftResize, rightResize = DF:CreateResizeGrips(screenFrame)'},
  },
  ['UpdateWorldTrackerLines'] = {
    {name='UpdateWorldTrackerLines', count=4, confidence=0.80, sample='Details:UpdateWorldTrackerLines (line)'},
  },
  ['DetectLanguageId'] = {
    {name='DF.Language.DetectLanguageId', count=5, confidence=1.00, sample='local languageId = DF.Language.DetectLanguageId(sourceNameNoRealm)'},
  },
  ['GetFontForLanguageID'] = {
    {name='DF.Language.GetFontForLanguageID', count=9, confidence=1.00, sample='local fontPath = DF.Language.GetFontForLanguageID(languageId)'},
  },
  ['GetFrames'] = {
    {name='GetFrames', count=2, confidence=0.40, sample='for index, line in ipairs(scrollframe:GetFrames()) do'},
  },
  ['SetFramesHeight'] = {
    {name='SetFramesHeight', count=1, confidence=0.20, sample='scrollframe:SetFramesHeight (Details.event_tracker.line_height)'},
  },
  ['GetNumFramesShown'] = {
    {name='GetNumFramesShown', count=2, confidence=0.40, sample='local amountOfLines = scrollframe:GetNumFramesShown()'},
  },
  ['InstallModule'] = {
    {name='InstallModule', count=9, confidence=1.00, sample='function f:InstallModule (module)'},
  },
  ['NewFillPanel'] = {
    {name='NewFillPanel', count=6, confidence=1.00, sample='fillpanel = fw:NewFillPanel (f, module.header, module.fill_name, nil, 740, 481, module.fill_gettotal, module.fill_fillrows, false)'},
  },
  ['CreateProFile'] = {
    {name='CreateProFile', count=2, confidence=0.40, sample='--proFile:CreateProFile()'},
  },
  ['DumpInline'] = {
    {name='DumpInline', count=1, confidence=0.20, sample='function Details:DumpInline(t)'},
  },
  ['DumpString'] = {
    {name='DumpString', count=1, confidence=0.20, sample='function Details:DumpString (text)'},
  },
  ['ShowImportWindow'] = {
    {name='ShowImportWindow', count=6, confidence=1.00, sample='Details:ShowImportWindow (text)'},
  },
  ['IsCooldownIgnored'] = {
    {name='Details222.CooldownTracking.IsCooldownIgnored', count=3, confidence=0.60, sample='function Details222.CooldownTracking.IsCooldownIgnored(spellId)'},
  },
  ['GetAllCooldownFrames'] = {
    {name='Details222.CooldownTracking.GetAllCooldownFrames', count=7, confidence=1.00, sample='function Details222.CooldownTracking.GetAllCooldownFrames()'},
  },
  ['GetCooldownFrame'] = {
    {name='Details222.CooldownTracking.GetCooldownFrame', count=2, confidence=0.40, sample='function Details222.CooldownTracking.GetCooldownFrame(filterName)'},
  },
  ['HideAllBars'] = {
    {name='Details222.CooldownTracking.HideAllBars', count=1, confidence=0.20, sample='function Details222.CooldownTracking.HideAllBars(filterName)'},
  },
  ['HideAllLines'] = {
    {name='Details222.CooldownTracking.HideAllLines', count=2, confidence=0.40, sample='function Details222.CooldownTracking.HideAllLines(cooldownFrame)'},
  },
  ['GetOrCreateNewCooldownLine'] = {
    {name='Details222.CooldownTracking.GetOrCreateNewCooldownLine', count=2, confidence=0.40, sample='function Details222.CooldownTracking.GetOrCreateNewCooldownLine(cooldownFrame, lineId)'},
  },
  ['CreateTimeBar'] = {
    {name='CreateTimeBar', count=3, confidence=0.60, sample='cooldownLine = DF:CreateTimeBar(cooldownFrame, [[Interface\AddOns\Details\images\bar_serenity]], Details.ocd_tracker.width-2, Details.ocd_tracker.height-2, 100, nil, cooldownFrame:GetName() .. "CDFrame" .. lineId)'},
  },
  ['EnableTracker'] = {
    {name='Details222.CooldownTracking.EnableTracker', count=3, confidence=0.60, sample='function Details222.CooldownTracking.EnableTracker()'},
  },
  ['RefreshAllCooldownFrames'] = {
    {name='Details222.CooldownTracking.RefreshAllCooldownFrames', count=26, confidence=1.00, sample='Details222.CooldownTracking.RefreshAllCooldownFrames()'},
  },
  ['DisableTracker'] = {
    {name='Details222.CooldownTracking.DisableTracker', count=3, confidence=0.60, sample='function Details222.CooldownTracking.DisableTracker()'},
  },
  ['OnReceiveUnitFullCooldownList'] = {
    {name='Details222.CooldownTracking.OnReceiveUnitFullCooldownList', count=1, confidence=0.20, sample='function Details222.CooldownTracking.OnReceiveUnitFullCooldownList(unitId, unitCooldows, allUnitsCooldowns)'},
  },
  ['OnReceiveSingleCooldownUpdate'] = {
    {name='Details222.CooldownTracking.OnReceiveSingleCooldownUpdate', count=1, confidence=0.20, sample='function Details222.CooldownTracking.OnReceiveSingleCooldownUpdate(unitId, spellId, cooldownInfo, unitCooldows, allUnitsCooldowns)'},
  },
  ['GetSpellFilters'] = {
    {name='CooldownManager.GetSpellFilters', count=3, confidence=0.60, sample='local spellFilters = openRaidLib.CooldownManager.GetSpellFilters(spellId)'},
    {name='GetSpellFilters', count=2, confidence=0.40, sample='function openRaidLib.GetSpellFilters(spellId, defaultFilterOnly, customFiltersOnly)'},
  },
  ['GetCooldownStatusFromCooldownInfo'] = {
    {name='GetCooldownStatusFromCooldownInfo', count=4, confidence=0.80, sample='isReady, normalizedPercent, timeLeft, charges, minValue, maxValue, currentValue = openRaidLib.GetCooldownStatusFromCooldownInfo(cooldownInfo)'},
  },
  ['OnCooldownListWipe'] = {
    {name='Details222.CooldownTracking.OnCooldownListWipe', count=1, confidence=0.20, sample='function Details222.CooldownTracking.OnCooldownListWipe(allUnitsCooldowns)'},
  },
  ['OnCooldownAdded'] = {
    {name='Details222.CooldownTracking.OnCooldownAdded', count=1, confidence=0.20, sample='function Details222.CooldownTracking.OnCooldownAdded(unitId, spellId, cooldownInfo, unitCooldows, allUnitsCooldowns)'},
  },
  ['OnCooldownRemoved'] = {
    {name='Details222.CooldownTracking.OnCooldownRemoved', count=1, confidence=0.20, sample='function Details222.CooldownTracking.OnCooldownRemoved(unitId, spellId, unitCooldows, allUnitsCooldowns)'},
  },
  ['CreateCooldownFrame'] = {
    {name='Details222.CooldownTracking.CreateCooldownFrame', count=2, confidence=0.40, sample='function Details222.CooldownTracking.CreateCooldownFrame(filterName)'},
  },
  ['SetupCooldownLine'] = {
    {name='Details222.CooldownTracking.SetupCooldownLine', count=2, confidence=0.40, sample='function Details222.CooldownTracking.SetupCooldownLine(cooldownLine)'},
  },
  ['SetLeftText'] = {
    {name='SetLeftText', count=4, confidence=0.80, sample='cooldownLine:SetLeftText(DF:RemoveRealmName(cooldownLine.unitName))'},
  },
  ['ProcessUnitCooldowns'] = {
    {name='Details222.CooldownTracking.ProcessUnitCooldowns', count=5, confidence=1.00, sample='function Details222.CooldownTracking.ProcessUnitCooldowns(cooldownFrame, unitId, unitCooldowns, cooldownsOrganized)'},
  },
  ['RefreshSingleCooldownFrame'] = {
    {name='Details222.CooldownTracking.RefreshSingleCooldownFrame', count=2, confidence=0.40, sample='function Details222.CooldownTracking.RefreshSingleCooldownFrame(cooldownFrame)'},
  },
  ['GetUnitCooldowns'] = {
    {name='GetUnitCooldowns', count=20, confidence=1.00, sample='local unitCooldowns = openRaidLib.GetUnitCooldowns(unitId, filterName)'},
  },
  ['OpenCDTrackerWindow'] = {
    {name='Details222.CooldownTracking.OpenCDTrackerWindow', count=2, confidence=0.40, sample='Details222.CooldownTracking.OpenCDTrackerWindow()'},
  },
  ['ClearAllCDsAnchorFrames'] = {
    {name='ClearAllCDsAnchorFrames', count=2, confidence=0.40, sample='function cooldownSelectionFrame.ClearAllCDsAnchorFrames()'},
  },
  ['BuildMenuVolatile'] = {
    {name='BuildMenuVolatile', count=9, confidence=1.00, sample='--use DetailsFramework:BuildMenuVolatile() to build the each list'},
  },
  ['CloseCustomDisplayWindow'] = {
    {name='CloseCustomDisplayWindow', count=5, confidence=1.00, sample='function _detalhes:CloseCustomDisplayWindow()'},
  },
  ['CancelFunc'] = {
    {name='CancelFunc', count=4, confidence=0.80, sample='DetailsCustomPanel:CancelFunc()'},
  },
  ['RemoveDisplay'] = {
    {name='RemoveDisplay', count=2, confidence=0.40, sample='function DetailsCustomPanel:RemoveDisplay (custom_object, index)'},
  },
  ['StartEdit'] = {
    {name='StartEdit', count=3, confidence=0.60, sample='function DetailsCustomPanel:StartEdit (custom_object, import)'},
  },
  ['SetAcceptButtonText'] = {
    {name='SetAcceptButtonText', count=12, confidence=1.00, sample='DetailsCustomPanel:SetAcceptButtonText (Loc ["STRING_CUSTOM_IMPORT_BUTTON"])'},
  },
  ['CreateNewCustom'] = {
    {name='CreateNewCustom', count=3, confidence=0.60, sample='function DetailsCustomPanel:CreateNewCustom()'},
  },
  ['AcceptFunc'] = {
    {name='AcceptFunc', count=1, confidence=0.20, sample='function DetailsCustomPanel:AcceptFunc()'},
    {name='DetailsCustomPanel.AcceptFunc', count=1, confidence=0.20, sample='DetailsCustomPanel.AcceptFunc()'},
  },
  ['StartEditCode'] = {
    {name='DetailsCustomPanel.StartEditCode', count=1, confidence=0.20, sample='function DetailsCustomPanel.StartEditCode (_, _, code)'},
  },
  ['CreateMenuButton'] = {
    {name='CreateMenuButton', count=11, confidence=1.00, sample='function customWindow:CreateMenuButton (label, icon, clickfunc, param1, param2, tooltip, name, coords)'},
  },
  ['IconPick'] = {
    {name='IconPick', count=7, confidence=1.00, sample='gump:IconPick (pickicon_callback, true)'},
  },
  ['BuildEncounterMenu'] = {
    {name='BuildEncounterMenu', count=3, confidence=0.60, sample='BuildEncounterMenu()'},
  },
  ['NewSpellEntry'] = {
    {name='NewSpellEntry', count=3, confidence=0.60, sample='local spellid_entry = gump:NewSpellEntry (box1, function()end, 178, 20, nil, nil, "spellidentry", "$parentSpellIdEntry")'},
  },
  ['CreateOrOpenNewsWindow'] = {
    {name='CreateOrOpenNewsWindow', count=2, confidence=0.40, sample='local newsFrame = Details:CreateOrOpenNewsWindow()'},
  },
  ['SetStartDelay'] = {
    {name='SetStartDelay', count=24, confidence=1.00, sample='fadeInAnim2:SetStartDelay(1.3)'},
  },
  ['Text'] = {
    {name='Text', count=6, confidence=1.00, sample='newsFrame:Text (Loc ["STRING_VERSION_LOG"])'},
  },
  ['Title'] = {
    {name='Title', count=1, confidence=0.20, sample='function frame:Title (title)'},
  },
  ['OpenClassColorsConfig'] = {
    {name='OpenClassColorsConfig', count=2, confidence=0.40, sample='function Details:OpenClassColorsConfig()'},
  },
  ['ColorPick'] = {
    {name='ColorPick', count=5, confidence=1.00, sample='DF:ColorPick (self, r, g, b, 1, callback)'},
  },
  ['GetDefaultColorList'] = {
    {name='GetDefaultColorList', count=3, confidence=0.60, sample='for colorName, colorTable in pairs(DF:GetDefaultColorList()) do'},
  },
  ['CreateWeakAura'] = {
    {name='CreateWeakAura', count=2, confidence=0.40, sample='function _detalhes:CreateWeakAura (aura_type, spellid, use_spellid, spellname, name, icon_texture, target, stacksize, sound, chat, icon_text, icon_glow, encounter_id, group, icon_size, other_values, in_combat, cooldown_animation)'},
  },
  ['OptionsFrame'] = {
    {name='WeakAuras.OptionsFrame', count=1, confidence=0.20, sample='local options_frame = WeakAuras.OptionsFrame and WeakAuras.OptionsFrame()'},
  },
  ['ToggleOptions'] = {
    {name='WeakAuras.ToggleOptions', count=1, confidence=0.20, sample='WeakAuras.ToggleOptions()'},
  },
  ['NewDisplayButton'] = {
    {name='WeakAuras.NewDisplayButton', count=1, confidence=0.20, sample='WeakAuras.NewDisplayButton (new_aura)'},
  },
  ['SetTriggerState'] = {
    {name='SetTriggerState', count=1, confidence=0.20, sample='SetTriggerState (triggerID)'},
    {name='DetailsAuraPanel.SetTriggerState', count=2, confidence=0.40, sample='DetailsAuraPanel.SetTriggerState (DetailsAuraPanel.TriggerList [triggertype].value) --passed by index not by the trigger ID'},
  },
  ['OnSelectAuraType'] = {
    {name='DetailsAuraPanel.OnSelectAuraType', count=3, confidence=0.60, sample='DetailsAuraPanel.OnSelectAuraType (nil, nil, 2, true)'},
  },
  ['CriaJanelaReport'] = {
    {name='CriaJanelaReport', count=7, confidence=1.00, sample='gump:CriaJanelaReport()'},
  },
  ['GetNumSubgroupMembers'] = {
    {name='GetNumSubgroupMembers', count=4, confidence=0.80, sample='elseif (GetNumSubgroupMembers() > 0) then'},
  },
  ['ReportFromLatest'] = {
    {name='Details.ReportFromLatest', count=2, confidence=0.40, sample='function Details.ReportFromLatest(_, _, index)'},
  },
  ['Flash'] = {
    {name='Flash', count=11, confidence=1.00, sample='Details.janela_report:Flash(0.2, 0.2, 0.4, true, 0, 0, "NONE")'},
  },
  ['GetReportIconAndColor'] = {
    {name='Details.GetReportIconAndColor', count=4, confidence=0.80, sample='function Details.GetReportIconAndColor(reportWhere)'},
  },
  ['GetChannelList'] = {
    {name='GetChannelList', count=1, confidence=0.20, sample='local channels = {GetChannelList()} --coloca o resultado em uma tabela .. {id1, canal1, id2, canal2}'},
  },
  ['GetFriendAccountInfo'] = {
    {name='C_BattleNet.GetFriendAccountInfo', count=2, confidence=0.40, sample='local accountInfo = C_BattleNet.GetFriendAccountInfo(i)'},
  },
  ['CheckValid'] = {
    {name='CheckValid', count=2, confidence=0.40, sample='function selectOutputChannel:CheckValid()'},
  },
  ['UpdateRecentlyReported'] = {
    {name='UpdateRecentlyReported', count=1, confidence=0.20, sample='function Details:UpdateRecentlyReported()'},
  },
  ['RefreshRecentlyReported'] = {
    {name='RefreshRecentlyReported', count=3, confidence=0.60, sample='DetailsReportWindow:RefreshRecentlyReported()'},
  },
  ['CheckLastReportsIntegrity'] = {
    {name='CheckLastReportsIntegrity', count=3, confidence=0.60, sample='function Details:CheckLastReportsIntegrity()'},
  },
  ['InstallRPSkin'] = {
    {name='InstallRPSkin', count=2, confidence=0.40, sample='Details:InstallRPSkin("defaultSkin", defaultSkin)'},
  },
  ['ApplyRPSkin'] = {
    {name='ApplyRPSkin', count=2, confidence=0.40, sample='Details:ApplyRPSkin()'},
  },
  ['UpdateFontStrings'] = {
    {name='UpdateFontStrings', count=5, confidence=1.00, sample='function allDisplaysFrame:UpdateFontStrings()'},
  },
  ['ApplyFontSettings'] = {
    {name='Details222.BreakdownWindow.ApplyFontSettings', count=7, confidence=1.00, sample='Details222.BreakdownWindow.ApplyFontSettings(button.text)'},
  },
  ['ShowAllSwitch'] = {
    {name='ShowAllSwitch', count=2, confidence=0.40, sample='function Details:ShowAllSwitch()'},
  },
  ['StatusBarAlert'] = {
    {name='StatusBarAlert', count=2, confidence=0.40, sample='Details.switch.current_instancia:StatusBarAlert(nil)'},
  },
  ['NewDetailsButton'] = {
    {name='NewDetailsButton', count=6, confidence=1.00, sample='bookmarkFrame.close = gump:NewDetailsButton(bookmarkFrame, bookmarkFrame, _, function() end, nil, nil, 1, 1, "", "", "", "", {rightFunc = {func = Details.switch.CloseMe, param1 = nil, param2 = nil}}, "DetailsSwitchPanelClose")'},
  },
  ['HideAllBookmarks'] = {
    {name='HideAllBookmarks', count=2, confidence=0.40, sample='function Details.switch:HideAllBookmarks()'},
  },
  ['CreateSegmentBlock'] = {
    {name='CreateSegmentBlock', count=4, confidence=0.80, sample='function Details.switch:CreateSegmentBlock()'},
  },
  ['GetSegmentBlock'] = {
    {name='GetSegmentBlock', count=5, confidence=1.00, sample='function Details.switch:GetSegmentBlock (index)'},
  },
  ['ClearSegmentBlocks'] = {
    {name='ClearSegmentBlocks', count=4, confidence=0.80, sample='function Details.switch:ClearSegmentBlocks()'},
  },
  ['HideMe'] = {
    {name='HideMe', count=2, confidence=0.40, sample='block:HideMe()'},
  },
  ['ResizeSegmentBlocks'] = {
    {name='ResizeSegmentBlocks', count=2, confidence=0.40, sample='function Details.switch:ResizeSegmentBlocks()'},
  },
  ['GetSegmentInfo'] = {
    {name='GetSegmentInfo', count=2, confidence=0.40, sample='local enemy, color, raid_type, killed, is_trash, portrait, background, background_coords = Details:GetSegmentInfo(segmentIndex)'},
  },
  ['OnSwitchShow'] = {
    {name='OnSwitchShow', count=1, confidence=0.20, sample='local interrupt = custom_object.OnSwitchShow (instancia)'},
  },
  ['Config'] = {
    {name='Config', count=1, confidence=0.20, sample='function Details.switch:Config(_, _, atributo, sub_atributo)'},
  },
  ['DetailsChangeDisplayFromBookmark'] = {
    {name='DetailsChangeDisplayFromBookmark', count=1, confidence=0.20, sample='--[[global]] function DetailsChangeDisplayFromBookmark(number, instance)'},
  },
  ['FastSwitch'] = {
    {name='FastSwitch', count=7, confidence=1.00, sample='Details:FastSwitch(nil, bookmark, number)'},
  },
  ['InitSwitch'] = {
    {name='InitSwitch', count=1, confidence=0.20, sample='function Details.switch:InitSwitch()'},
  },
  ['FauxScrollFrame_GetOffset'] = {
    {name='FauxScrollFrame_GetOffset', count=6, confidence=1.00, sample='local offset = FauxScrollFrame_GetOffset(DetailsSwitchPanelScroll)'},
  },
  ['NewSwitchButton'] = {
    {name='NewSwitchButton', count=3, confidence=0.60, sample='button = Details.switch:NewSwitchButton (Details.switch.frame, i, x, y, jump)'},
  },
  ['FauxScrollFrame_Update'] = {
    {name='FauxScrollFrame_Update', count=6, confidence=1.00, sample='FauxScrollFrame_Update(DetailsSwitchPanelScroll, ceil (40 / Details.switch.vertical_amt) , Details.switch.horizontal_amt, 20)'},
  },
  ['FauxScrollFrame_OnVerticalScroll'] = {
    {name='FauxScrollFrame_OnVerticalScroll', count=6, confidence=1.00, sample='scroll:SetScript("OnVerticalScroll", function(self, offset) FauxScrollFrame_OnVerticalScroll (self, offset, 20, Details.switch.Update) end) --altura'},
  },
  ['IsTooltip'] = {
    {name='IsTooltip', count=3, confidence=0.60, sample='if (gameCooltip:IsTooltip()) then'},
  },
  ['IsMenu'] = {
    {name='IsMenu', count=2, confidence=0.40, sample='if (gameCooltip:IsMenu()) then'},
  },
  ['HandleAuraBuff'] = {
    {name='HandleAuraBuff', count=1, confidence=0.20, sample='local function HandleAuraBuff(aura)'},
  },
  ['HandleAuraDebuff'] = {
    {name='HandleAuraDebuff', count=1, confidence=0.20, sample='local function HandleAuraDebuff(aura)'},
  },
  ['RefreshScrollData'] = {
    {name='Details.AuraTracker.RefreshScrollData', count=5, confidence=1.00, sample='Details.AuraTracker.RefreshScrollData()'},
  },
  ['OnShowAuraTrackerFrame'] = {
    {name='Details.AuraTracker.OnShowAuraTrackerFrame', count=2, confidence=0.40, sample='function Details.AuraTracker.OnShowAuraTrackerFrame(auraTrackerFrame)'},
  },
  ['RegisterUnitEvent'] = {
    {name='RegisterUnitEvent', count=8, confidence=1.00, sample='auraTrackerFrame.EventFrame:RegisterUnitEvent("UNIT_AURA", "player")'},
  },
  ['OnHideAuraTrackerFrame'] = {
    {name='Details.AuraTracker.OnHideAuraTrackerFrame', count=2, confidence=0.40, sample='function Details.AuraTracker.OnHideAuraTrackerFrame(auraTrackerFrame)'},
  },
  ['CreatePanel'] = {
    {name='Details.AuraTracker.CreatePanel', count=2, confidence=0.40, sample='function Details.AuraTracker.CreatePanel()'},
    {name='CreatePanel', count=1, confidence=0.20, sample='function detailsFramework:CreatePanel (parent, w, h, backdrop, backdropcolor, bordercolor, member, name)'},
  },
  ['Payload'] = {
    {name='Payload', count=1, confidence=0.20, sample='{text = "Payload (Points)", width = 296},'},
  },
  ['OnUnitAuraEvent'] = {
    {name='Details.AuraTracker.OnUnitAuraEvent', count=1, confidence=0.20, sample='function Details.AuraTracker.OnUnitAuraEvent(self, event, unit, unitAuraUpdateInfo)'},
  },
  ['CreateScrollLine'] = {
    {name='Details.AuraTracker.CreateScrollLine', count=1, confidence=0.20, sample='function Details.AuraTracker.CreateScrollLine(self, lineId)'},
  },
  ['SetColorStripe'] = {
    {name='SetColorStripe', count=2, confidence=0.40, sample='DetailsFramework.BackdropUtil:SetColorStripe(line, lineId)'},
  },
  ['GetColumnWidth'] = {
    {name='GetColumnWidth', count=13, confidence=1.00, sample='local auraNameTextField = DetailsFramework:CreateTextEntry(line, function()end, header:GetColumnWidth(2), scrollLineHeight, _, _, _, dropdownTemplate)'},
  },
  ['SetAutoSelectTextOnFocus'] = {
    {name='SetAutoSelectTextOnFocus', count=6, confidence=1.00, sample='auraNameTextField:SetAutoSelectTextOnFocus(true)'},
  },
  ['OpenDetailsDeathRecap'] = {
    {name='Details.OpenDetailsDeathRecap', count=4, confidence=0.80, sample='Details.OpenDetailsDeathRecap(segment, RecapID)'},
  },
  ['BuildDeathTableFromRecap'] = {
    {name='Details.BuildDeathTableFromRecap', count=2, confidence=0.40, sample='function Details.BuildDeathTableFromRecap(recapID)'},
  },
  ['DeathRecap_GetEvents'] = {
    {name='DeathRecap_GetEvents', count=2, confidence=0.40, sample='local events = DeathRecap_GetEvents(recapID)'},
  },
  ['DeathRecapFrame_GetEventInfo'] = {
    {name='DeathRecapFrame_GetEventInfo', count=2, confidence=0.40, sample='local spellId, spellName, texture = DeathRecapFrame_GetEventInfo( evtData )'},
  },
  ['GetDeathRecapFromChat'] = {
    {name='Details.GetDeathRecapFromChat', count=3, confidence=0.60, sample='function Details.GetDeathRecapFromChat()'},
  },
  ['GetNumMessages'] = {
    {name='GetNumMessages', count=1, confidence=0.20, sample='local numLines = chat1:GetNumMessages()'},
  },
  ['GetMessageInfo'] = {
    {name='GetMessageInfo', count=1, confidence=0.20, sample='local text = chat1:GetMessageInfo(i)'},
  },
  ['OpenDetailsDeathRecapAtSegment'] = {
    {name='OpenDetailsDeathRecapAtSegment', count=1, confidence=0.20, sample='OpenDetailsDeathRecapAtSegment(i)'},
  },
  ['Recap'] = {
    {name='Recap', count=1, confidence=0.20, sample='local msgText = "|cFFAAAAFFDeath Recap(Blizzard):"'},
  },
  ['GetTargetCharacterForRealm'] = {
    {name='Details.Survey.GetTargetCharacterForRealm', count=4, confidence=0.80, sample='function Details.Survey.GetTargetCharacterForRealm()'},
  },
  ['GetCategorySpellListForClass'] = {
    {name='Details.Survey.GetCategorySpellListForClass', count=3, confidence=0.60, sample='function Details.Survey.GetCategorySpellListForClass()'},
  },
  ['ExportSpellCatogeryData'] = {
    {name='Details.Survey.ExportSpellCatogeryData', count=2, confidence=0.40, sample='function Details.Survey.ExportSpellCatogeryData()'},
  },
  ['ExportSingleSpellCatogeryData'] = {
    {name='Details.Survey.ExportSingleSpellCatogeryData', count=2, confidence=0.40, sample='function Details.Survey.ExportSingleSpellCatogeryData(line)'},
  },
  ['SendSpellCatogeryDataToTargetCharacter'] = {
    {name='Details.Survey.SendSpellCatogeryDataToTargetCharacter', count=4, confidence=0.80, sample='function Details.Survey.SendSpellCatogeryDataToTargetCharacter()'},
  },
  ['DoAttemptToAskSurvey'] = {
    {name='Details.Survey.DoAttemptToAskSurvey', count=1, confidence=0.20, sample='function Details.Survey.DoAttemptToAskSurvey()'},
  },
  ['AskForOpeningSpellCategoryScreen'] = {
    {name='Details.Survey.AskForOpeningSpellCategoryScreen', count=2, confidence=0.40, sample='Details.Survey.AskForOpeningSpellCategoryScreen()'},
  },
  ['OpenSpellCategoryScreen'] = {
    {name='Details.Survey.OpenSpellCategoryScreen', count=3, confidence=0.60, sample='return Details.Survey.OpenSpellCategoryScreen()'},
  },
  ['InitializeSpellCategoryFeedback'] = {
    {name='Details.Survey.InitializeSpellCategoryFeedback', count=1, confidence=0.20, sample='function Details.Survey.InitializeSpellCategoryFeedback()'},
  },
  ['ChatFrame_AddMessageEventFilter'] = {
    {name='ChatFrame_AddMessageEventFilter', count=2, confidence=0.40, sample='ChatFrame_AddMessageEventFilter("CHAT_MSG_CHANNEL", myChatFilter)'},
  },
  ['ShowPromptPanel'] = {
    {name='ShowPromptPanel', count=2, confidence=0.40, sample='DF:ShowPromptPanel("Fill the Spell Survey to Help Cooldown Tracker Addons?", function() Details.Survey.OpenSpellCategoryScreen() end, function() Details:Msg("FINE! won't ask again for another week...") end)'},
  },
  ['SetOptions'] = {
    {name='SetOptions', count=4, confidence=0.80, sample='radioGroup:SetOptions(radioGroupOptions)'},
  },
  ['SetNumeric'] = {
    {name='SetNumeric', count=2, confidence=0.40, sample='durationEntry:SetNumeric(true)'},
  },
  ['SetCurrentInstanceAndRefresh'] = {
    {name='Details222.OptionsPanel.SetCurrentInstanceAndRefresh', count=17, confidence=1.00, sample='Details222.OptionsPanel.SetCurrentInstanceAndRefresh(instanceObject)'},
  },
  ['SetAsSearchBox'] = {
    {name='SetAsSearchBox', count=3, confidence=0.60, sample='searchBox:SetAsSearchBox()'},
  },
  ['GetBestFontForLanguage'] = {
    {name='GetBestFontForLanguage', count=13, confidence=1.00, sample='options[#options+1] = {type = "label", get = function() return optionData.header end, text_template = {color = "silver", size = 14, font = detailsFramework:GetBestFontForLanguage()}}'},
  },
  ['SelectOptionsSection'] = {
    {name='Details222.OptionsPanel.SelectOptionsSection', count=4, confidence=0.80, sample='function Details222.OptionsPanel.SelectOptionsSection(sectionId)'},
  },
  ['SetCurrentInstance'] = {
    {name='Details222.OptionsPanel.SetCurrentInstance', count=2, confidence=0.40, sample='Details222.OptionsPanel.SetCurrentInstance(instance)'},
  },
  ['GetOptionsSection'] = {
    {name='Details222.OptionsPanel.GetOptionsSection', count=2, confidence=0.40, sample='function Details222.OptionsPanel.GetOptionsSection(sectionId)'},
  },
  ['OpenOptionsPanel'] = {
    {name='OpenOptionsPanel', count=1, confidence=0.20, sample='function Details:OpenOptionsPanel(instance, bNoReopen, section) --alias'},
    {name='StreamerPlugin.OpenOptionsPanel', count=1, confidence=0.20, sample='StreamerPlugin.OpenOptionsPanel(true)'},
    {name='Plater.OpenOptionsPanel', count=1, confidence=0.20, sample='--/run Plater.OpenOptionsPanel()PlaterOptionsPanelContainer:SelectIndex(Plater, 14)'},
  },
  ['UpdateAutoHideSettings'] = {
    {name='Details222.OptionsPanel.UpdateAutoHideSettings', count=3, confidence=0.60, sample='Details222.OptionsPanel.UpdateAutoHideSettings(instance)'},
  },
  ['RefreshInstances'] = {
    {name='Details222.OptionsPanel.RefreshInstances', count=3, confidence=0.60, sample='function Details222.OptionsPanel.RefreshInstances(instance)'},
  },
  ['GetCurrentInstanceInOptionsPanel'] = {
    {name='Details222.OptionsPanel.GetCurrentInstanceInOptionsPanel', count=1, confidence=0.20, sample='function Details222.OptionsPanel.GetCurrentInstanceInOptionsPanel()'},
  },
  ['GetAsianNumberSymbols'] = {
    {name='GetAsianNumberSymbols', count=3, confidence=0.60, sample='local asian1K, asian10K, asian1B = DF:GetAsianNumberSymbols()'},
  },
  ['GetClientRegion'] = {
    {name='GetClientRegion', count=3, confidence=0.60, sample='local clientRegion = DF:GetClientRegion()'},
  },
  ['Performance'] = {
    {name='Performance', count=1, confidence=0.20, sample='name = "Keep Best Performance (boss wipes)",'},
  },
  ['OpenBookmarkConfig'] = {
    {name='OpenBookmarkConfig', count=2, confidence=0.40, sample='Details:OpenBookmarkConfig()'},
  },
  ['SetNickname'] = {
    {name='SetNickname', count=5, confidence=1.00, sample='local accepted, errortext = Details:SetNickname(text)'},
  },
  ['ResetPlayerPersona'] = {
    {name='ResetPlayerPersona', count=3, confidence=0.60, sample='Details:ResetPlayerPersona()'},
  },
  ['OptionPanelOnChangeSkin'] = {
    {name='OptionPanelOnChangeSkin', count=2, confidence=0.40, sample='function Details:OptionPanelOnChangeSkin(skinName)'},
  },
  ['Embed_Details'] = {
    {name='Embed_Details', count=1, confidence=0.20, sample='AS:Embed_Details()'},
  },
  ['LoadSkinFromOptionsPanel'] = {
    {name='LoadSkinFromOptionsPanel', count=2, confidence=0.40, sample='function Details:LoadSkinFromOptionsPanel(skinObject)'},
  },
  ['Skin'] = {
    {name='Skin', count=1, confidence=0.20, sample='end, "Details! Import Skin (paste string)") --localize-me'},
  },
  ['SetTitleBarSettings'] = {
    {name='SetTitleBarSettings', count=2, confidence=0.40, sample='--SetTitleBarSettings(shown, height, texture, color)'},
  },
  ['GetWidgetById'] = {
    {name='GetWidgetById', count=7, confidence=1.00, sample='local windowDropdown = self.MyObject.container:GetWidgetById('deleteWindow')'},
  },
  ['NewSwitch'] = {
    {name='NewSwitch', count=22, confidence=1.00, sample='DF:NewSwitch (bframe, _, "$parentToolbarSlider"..i, "toolbarPluginsSlider"..i, 60, 20, _, _, plugin_stable.enabled, nil, nil, nil, nil, options_switch_template)'},
  },
  ['ShowTextPromptPanel'] = {
    {name='ShowTextPromptPanel', count=2, confidence=0.40, sample='DF:ShowTextPromptPanel(Loc["STRING_OPTIONS_IMPORT_PROFILE_NAME"] .. ":", function(newProfileName)'},
  },
  ['MoveAnchor'] = {
    {name='MoveAnchor', count=3, confidence=0.60, sample='_G.DetailsTooltipAnchor:MoveAnchor()'},
  },
  ['OpenBrokerTextEditor'] = {
    {name='OpenBrokerTextEditor', count=2, confidence=0.40, sample='Details:OpenBrokerTextEditor()'},
  },
  ['UpdateWallpaperInfo'] = {
    {name='UpdateWallpaperInfo', count=7, confidence=1.00, sample='sectionFrame:UpdateWallpaperInfo()'},
  },
  ['CreateSlider'] = {
    {name='CreateSlider', count=5, confidence=1.00, sample='local alphaSlider = DetailsFramework:CreateSlider(line, 138, 20, 0, 100, 1, 100, false, nil, nil, nil, options_slider_template)'},
  },
  ['OpenCurrentRealDPSOptions'] = {
    {name='OpenCurrentRealDPSOptions', count=2, confidence=0.40, sample='Details:OpenCurrentRealDPSOptions(true)'},
  },
  ['Log'] = {
    {name='Log', count=6, confidence=1.00, sample='name = "Invert Death Log (Raid)",'},
  },
  ['MoveBarrasTo'] = {
    {name='MoveBarrasTo', count=3, confidence=0.60, sample='function Details:MoveBarrasTo(destino)'},
  },
  ['RefreshAttributeTextSize'] = {
    {name='RefreshAttributeTextSize', count=7, confidence=1.00, sample='instancia:RefreshAttributeTextSize()'},
  },
  ['InstanciasHorizontais'] = {
    {name='InstanciasHorizontais', count=3, confidence=0.60, sample='local _, ClampLeft, ClampRight = instancia:InstanciasHorizontais()'},
  },
  ['InstanciasVerticais'] = {
    {name='InstanciasVerticais', count=3, confidence=0.60, sample='local _, ClampBottom, ClampTop = instancia:InstanciasVerticais()'},
  },
  ['BGFrame_scripts'] = {
    {name='BGFrame_scripts', count=7, confidence=1.00, sample='local function BGFrame_scripts(BG, baseframe, instancia)'},
  },
  ['RegisterForDetailsMove'] = {
    {name='RegisterForDetailsMove', count=1, confidence=0.20, sample='function gump:RegisterForDetailsMove(frame, instancia)'},
  },
  ['BFrame_scripts'] = {
    {name='BFrame_scripts', count=2, confidence=0.40, sample='local function BFrame_scripts (baseframe, instancia)'},
  },
  ['RefreshLockedState'] = {
    {name='RefreshLockedState', count=3, confidence=0.60, sample='function Details:RefreshLockedState()'},
  },
  ['HandleTextsOnMouseClick'] = {
    {name='HandleTextsOnMouseClick', count=3, confidence=0.60, sample='self._instance:HandleTextsOnMouseClick (self, "down")'},
  },
  ['ReportSingleLine'] = {
    {name='ReportSingleLine', count=2, confidence=0.40, sample='return Details:ReportSingleLine(instanceObject, self)'},
  },
  ['CancelAnim'] = {
    {name='CancelAnim', count=1, confidence=0.20, sample='function icon_frame_events:CancelAnim(anim)'},
  },
  ['HideBarQuestionIcon'] = {
    {name='HideBarQuestionIcon', count=2, confidence=0.40, sample='function Details:HideBarQuestionIcon(frame)'},
  },
  ['StretchButtonAlwaysOnTop'] = {
    {name='StretchButtonAlwaysOnTop', count=4, confidence=0.80, sample='thisInstance:StretchButtonAlwaysOnTop()'},
  },
  ['DetailsKeyBindScrollUp'] = {
    {name='DetailsKeyBindScrollUp', count=1, confidence=0.20, sample='function DetailsKeyBindScrollUp() --[[GLOBAL]]'},
  },
  ['DetailsKeyBindScrollDown'] = {
    {name='DetailsKeyBindScrollDown', count=1, confidence=0.20, sample='function DetailsKeyBindScrollDown() --[[GLOBAL]]'},
  },
  ['HaveInstanceAlert'] = {
    {name='HaveInstanceAlert', count=1, confidence=0.20, sample='function Details:HaveInstanceAlert()'},
  },
  ['InstanceAlertTime'] = {
    {name='InstanceAlertTime', count=1, confidence=0.20, sample='function Details:InstanceAlertTime(instance)'},
  },
  ['DoFlash'] = {
    {name='DoFlash', count=2, confidence=0.40, sample='self.alert:DoFlash()'},
  },
  ['CreateAlertFrame'] = {
    {name='CreateAlertFrame', count=2, confidence=0.40, sample='local function CreateAlertFrame(baseframe, instancia)'},
  },
  ['CreateGlowOverlay'] = {
    {name='CreateGlowOverlay', count=2, confidence=0.40, sample='local glowAnimation = gump:CreateGlowOverlay(tooltipAnchor, "yellow", "white")'},
  },
  ['CreateFullBorder'] = {
    {name='CreateFullBorder', count=6, confidence=1.00, sample='local baseframeBorder = DetailsFramework:CreateFullBorder(baseframe:GetName() .. "BaseBorder", baseframe)'},
  },
  ['SetBorderSizes'] = {
    {name='SetBorderSizes', count=6, confidence=1.00, sample='baseframeBorder:SetBorderSizes(1, 1, 1, 1)'},
  },
  ['UpdateSizes'] = {
    {name='UpdateSizes', count=6, confidence=1.00, sample='baseframeBorder:UpdateSizes()'},
  },
  ['SetFrameAlpha'] = {
    {name='SetFrameAlpha', count=7, confidence=1.00, sample='function rowframe:SetFrameAlpha(value)'},
  },
  ['CriaCabecalho'] = {
    {name='CriaCabecalho', count=2, confidence=0.40, sample='gump:CriaCabecalho(baseframe, instancia)'},
  },
  ['CriaRodape'] = {
    {name='CriaRodape', count=2, confidence=0.40, sample='gump:CriaRodape(baseframe, instancia)'},
  },
  ['SetBarFollowPlayer'] = {
    {name='SetBarFollowPlayer', count=1, confidence=0.20, sample='function Details:SetBarFollowPlayer(follow)'},
  },
  ['SetBarOrientationDirection'] = {
    {name='SetBarOrientationDirection', count=1, confidence=0.20, sample='function Details:SetBarOrientationDirection(orientation)'},
  },
  ['Gump'] = {
    {name='Gump', count=1, confidence=0.20, sample='--width also set on windows.lua > Reajusta Gump ()'},
  },
  ['NewRow'] = {
    {name='NewRow', count=1, confidence=0.20, sample='function gump:NewRow(instancia, index)'},
  },
  ['SetNonSpaceWrap'] = {
    {name='SetNonSpaceWrap', count=8, confidence=1.00, sample='newLine.lineText1:SetNonSpaceWrap (true)'},
  },
  ['SetBarTextSettings'] = {
    {name='SetBarTextSettings', count=15, confidence=1.00, sample='function Details:SetBarTextSettings(size, font, fixedcolor, leftcolorbyclass, rightcolorbyclass, leftoutline, rightoutline, customrighttextenabled, customrighttext, percentage_type, showposition, customlefttextenabled, customlefttext, smalloutline_left, smalloutlinecolor_left, smalloutline_right, smalloutlinecolor_right, translittext, yoffset, leftoffset)'},
  },
  ['SetBarBackdropSettings'] = {
    {name='SetBarBackdropSettings', count=2, confidence=0.40, sample='function Details:SetBarBackdropSettings(enabled, size, color, use_class_colors)'},
  },
  ['RefreshTitleBar'] = {
    {name='RefreshTitleBar', count=2, confidence=0.40, sample='function Details:RefreshTitleBar()'},
  },
  ['SetBarModel'] = {
    {name='SetBarModel', count=1, confidence=0.20, sample='function Details:SetBarModel(upper_enabled, upper_model, upper_alpha, lower_enabled, lower_model, lower_alpha)'},
  },
  ['SetBarSpecIconSettings'] = {
    {name='SetBarSpecIconSettings', count=3, confidence=0.60, sample='function Details:SetBarSpecIconSettings(enabled, iconfile, fulltrack)'},
  },
  ['SetBarArenaRoleIconSettings'] = {
    {name='SetBarArenaRoleIconSettings', count=1, confidence=0.20, sample='function Details:SetBarArenaRoleIconSettings(show_icon, icon_size_offset)'},
  },
  ['SetBarFactionIconSettings'] = {
    {name='SetBarFactionIconSettings', count=1, confidence=0.20, sample='function Details:SetBarFactionIconSettings(show_faction_icon, faction_icon_size_offset)'},
  },
  ['SetBarSettings'] = {
    {name='SetBarSettings', count=4, confidence=0.80, sample='function Details:SetBarSettings(height, texture, colorclass, fixedcolor, backgroundtexture, backgroundcolorclass, backgroundfixedcolor, alpha, iconfile, barstart, spacement, texture_custom, icon_size_offset)'},
  },
  ['SetBarRightTextSettings'] = {
    {name='SetBarRightTextSettings', count=8, confidence=1.00, sample='function Details:SetBarRightTextSettings(total, persecond, percent, bracket, separator)'},
  },
  ['CheckPsUpdate'] = {
    {name='CheckPsUpdate', count=2, confidence=0.40, sample='function Details:CheckPsUpdate()'},
  },
  ['FastPSUpdate'] = {
    {name='FastPSUpdate', count=3, confidence=0.60, sample='--	/run _detalhes:GetInstance(1):FastPSUpdate (true)'},
  },
  ['AdjustInLineTextPadding'] = {
    {name='AdjustInLineTextPadding', count=1, confidence=0.20, sample='function Details:AdjustInLineTextPadding()'},
  },
  ['CreateMaskTexture'] = {
    {name='CreateMaskTexture', count=9, confidence=1.00, sample='row.icone_classe.maskTexture = row:CreateMaskTexture("$parentClassIconMask", "overlay")'},
  },
  ['SetShadowColor'] = {
    {name='SetShadowColor', count=19, confidence=1.00, sample='row.lineText1:SetShadowColor(color[1], color[2], color[3], color[4])'},
  },
  ['SetReverseFill'] = {
    {name='SetReverseFill', count=4, confidence=0.80, sample='row.statusbar:SetReverseFill(true)'},
  },
  ['UpdateClickThrough'] = {
    {name='UpdateClickThrough', count=6, confidence=1.00, sample='self:UpdateClickThrough()'},
  },
  ['SetBarOverlaySettings'] = {
    {name='SetBarOverlaySettings', count=1, confidence=0.20, sample='function Details:SetBarOverlaySettings(overlayTexture, overlayColor)'},
  },
  ['SetInstanceWallpaperLevel'] = {
    {name='SetInstanceWallpaperLevel', count=2, confidence=0.40, sample='function Details:SetInstanceWallpaperLevel(wallpaperLevel)'},
  },
  ['GetTextures'] = {
    {name='GetTextures', count=1, confidence=0.20, sample='function Details:GetTextures()'},
  },
  ['SetWindowAlphaForInteract'] = {
    {name='SetWindowAlphaForInteract', count=7, confidence=1.00, sample='function Details:SetWindowAlphaForInteract(alpha)'},
  },
  ['InstanceAlpha'] = {
    {name='InstanceAlpha', count=6, confidence=1.00, sample='self:InstanceAlpha(alpha)'},
  },
  ['SetIconAlpha'] = {
    {name='SetIconAlpha', count=5, confidence=1.00, sample='self:SetIconAlpha(alpha, nil, true)'},
  },
  ['InstanceButtonsColors'] = {
    {name='InstanceButtonsColors', count=6, confidence=1.00, sample='function Details:InstanceButtonsColors(red, green, blue, alpha, noSave, onlyLeft, onlyRight)'},
  },
  ['IsLowerInstance'] = {
    {name='IsLowerInstance', count=4, confidence=0.80, sample='if (self:IsLowerInstance()) then'},
  },
  ['StatusBarColor'] = {
    {name='StatusBarColor', count=5, confidence=1.00, sample='self:StatusBarColor(red, green, blue, alpha)'},
  },
  ['WaitForSkin'] = {
    {name='WaitForSkin', count=3, confidence=0.60, sample='local tempSkin = self:WaitForSkin()'},
  },
  ['StatusBarAlertTime'] = {
    {name='StatusBarAlertTime', count=1, confidence=0.20, sample='function Details:StatusBarAlertTime(instance)'},
  },
  ['GetMenuAnchorPoint'] = {
    {name='GetMenuAnchorPoint', count=2, confidence=0.40, sample='function Details:GetMenuAnchorPoint()'},
  },
  ['ToolbarMenuButtonsSize'] = {
    {name='ToolbarMenuButtonsSize', count=1, confidence=0.20, sample='function Details:ToolbarMenuButtonsSize(size)'},
  },
  ['ToolbarMenuSetButtons'] = {
    {name='ToolbarMenuSetButtons', count=3, confidence=0.60, sample='return self:ToolbarMenuSetButtons()'},
  },
  ['FormatCooltipBackdrop'] = {
    {name='FormatCooltipBackdrop', count=1, confidence=0.20, sample='function Details:FormatCooltipBackdrop()'},
  },
  ['SetMenuOwner'] = {
    {name='SetMenuOwner', count=7, confidence=1.00, sample='Details:SetMenuOwner (self, instance)'},
  },
  ['SetUserCustomSkinFile'] = {
    {name='SetUserCustomSkinFile', count=3, confidence=0.60, sample='function Details:SetUserCustomSkinFile (file)'},
  },
  ['RefreshMicroDisplays'] = {
    {name='RefreshMicroDisplays', count=2, confidence=0.40, sample='function Details:RefreshMicroDisplays()'},
  },
  ['HideSideBars'] = {
    {name='HideSideBars', count=2, confidence=0.40, sample='self:HideSideBars()'},
  },
  ['MicroDisplaysSide'] = {
    {name='MicroDisplaysSide', count=2, confidence=0.40, sample='self:MicroDisplaysSide()'},
  },
  ['MicroDisplaysLock'] = {
    {name='MicroDisplaysLock', count=2, confidence=0.40, sample='self:MicroDisplaysLock()'},
  },
  ['ShowStatusBar'] = {
    {name='ShowStatusBar', count=2, confidence=0.40, sample='self:ShowStatusBar()'},
  },
  ['HideStatusBar'] = {
    {name='HideStatusBar', count=2, confidence=0.40, sample='self:HideStatusBar()'},
  },
  ['SetBackdropTexture'] = {
    {name='SetBackdropTexture', count=2, confidence=0.40, sample='self:SetBackdropTexture()'},
  },
  ['LeftMenuAnchorSide'] = {
    {name='LeftMenuAnchorSide', count=3, confidence=0.60, sample='self:LeftMenuAnchorSide()'},
  },
  ['UpdateFullBorder'] = {
    {name='UpdateFullBorder', count=2, confidence=0.40, sample='self:UpdateFullBorder()'},
  },
  ['UpdateRowAreaBorder'] = {
    {name='UpdateRowAreaBorder', count=2, confidence=0.40, sample='self:UpdateRowAreaBorder()'},
  },
  ['EnableRoundedCorners'] = {
    {name='EnableRoundedCorners', count=3, confidence=0.60, sample='fullWindowFrame:EnableRoundedCorners()'},
  },
  ['DisableRoundedCorners'] = {
    {name='DisableRoundedCorners', count=4, confidence=0.80, sample='fullWindowFrame:DisableRoundedCorners()'},
  },
  ['UpdateClickThroughSettings'] = {
    {name='UpdateClickThroughSettings', count=1, confidence=0.20, sample='function Details:UpdateClickThroughSettings (inCombat, window, bars, toolbaricons)'},
  },
  ['DelayedCheckCombatAlpha'] = {
    {name='DelayedCheckCombatAlpha', count=1, confidence=0.20, sample='function Details:DelayedCheckCombatAlpha (instance, alpha)'},
  },
  ['DelayedCheckOutOfCombatAlpha'] = {
    {name='DelayedCheckOutOfCombatAlpha', count=1, confidence=0.20, sample='function Details:DelayedCheckOutOfCombatAlpha (instance, alpha)'},
  },
  ['DelayedCheckOutOfCombatAndGroupAlpha'] = {
    {name='DelayedCheckOutOfCombatAndGroupAlpha', count=1, confidence=0.20, sample='function Details:DelayedCheckOutOfCombatAndGroupAlpha (instance, alpha)'},
  },
  ['MenuAnchor'] = {
    {name='MenuAnchor', count=2, confidence=0.40, sample='return self:MenuAnchor()'},
  },
  ['GetTitleBarText'] = {
    {name='GetTitleBarText', count=3, confidence=0.60, sample='local currentText = instance:GetTitleBarText()'},
  },
  ['SetTitleBarText'] = {
    {name='SetTitleBarText', count=5, confidence=1.00, sample='instance:SetTitleBarText(currentText)'},
  },
  ['TitleTextTickTimer'] = {
    {name='TitleTextTickTimer', count=1, confidence=0.20, sample='function Details:TitleTextTickTimer(instance)'},
  },
  ['IsEncounterInProgress'] = {
    {name='IsEncounterInProgress', count=1, confidence=0.20, sample='if (IsEncounterInProgress()) then'},
  },
  ['RefreshTitleBarText'] = {
    {name='RefreshTitleBarText', count=3, confidence=0.60, sample='function Details:RefreshTitleBarText()'},
  },
  ['GetInstanceCurrentAlpha'] = {
    {name='GetInstanceCurrentAlpha', count=1, confidence=0.20, sample='function Details:GetInstanceCurrentAlpha()'},
  },
  ['IsInteracting'] = {
    {name='IsInteracting', count=2, confidence=0.40, sample='if (self:IsInteracting()) then'},
  },
  ['GetInstanceIconsCurrentAlpha'] = {
    {name='GetInstanceIconsCurrentAlpha', count=1, confidence=0.20, sample='function Details:GetInstanceIconsCurrentAlpha()'},
  },
  ['IsGroupedWith'] = {
    {name='IsGroupedWith', count=1, confidence=0.20, sample='function Details:IsGroupedWith(instance)'},
  },
  ['HideMainIcon'] = {
    {name='HideMainIcon', count=2, confidence=0.40, sample='self:HideMainIcon() --attribute menu reseting value'},
  },
  ['Create1PxPanel'] = {
    {name='Create1PxPanel', count=2, confidence=0.40, sample='local panel = gump:Create1PxPanel(UIParent, 600, 100, "|cFFFFFFFFDetails!, the window hit the ground, bang bang...|r", nil, nil, nil, nil)'},
  },
  ['GetTextHighlight'] = {
    {name='GetTextHighlight', count=4, confidence=0.80, sample='local function GetTextHighlight ( self )'},
  },
  ['StripCodeGsub'] = {
    {name='StripCodeGsub', count=2, confidence=0.40, sample='local function StripCodeGsub ( Escapes, Code, End )'},
  },
  ['StripCode'] = {
    {name='StripCode', count=6, confidence=1.00, sample='local function StripCode ( Pattern, Text, OldCursor )'},
  },
  ['StripColors'] = {
    {name='StripColors', count=4, confidence=0.80, sample='function StripColors ( Text, Cursor )'},
  },
  ['ColorSelection'] = {
    {name='ColorSelection', count=4, confidence=0.80, sample='local function ColorSelection ( self, ColorCode )'},
  },
  ['NewColorPickButton'] = {
    {name='NewColorPickButton', count=5, confidence=1.00, sample='local color_button = DF:NewColorPickButton (panel, "$parentButton5", nil, color_func)'},
  },
  ['UpdateTheRealCurrentDPSFrame'] = {
    {name='UpdateTheRealCurrentDPSFrame', count=17, confidence=1.00, sample='Details:UpdateTheRealCurrentDPSFrame(testUsing)'},
  },
  ['CreateSplitBar'] = {
    {name='CreateSplitBar', count=3, confidence=0.60, sample='barFrame.splitBar = DF:CreateSplitBar(barFrame, 400, 20)'},
  },
  ['SetBackgroundTexture'] = {
    {name='SetBackgroundTexture', count=2, confidence=0.40, sample='barFrame.splitBar:SetBackgroundTexture([[Interface/AddOns/Details/images/bar_textures/chess]])'},
  },
  ['SwapArenaTeamColors'] = {
    {name='SwapArenaTeamColors', count=2, confidence=0.40, sample='function f.SwapArenaTeamColors()'},
  },
  ['EnableAnimations'] = {
    {name='EnableAnimations', count=2, confidence=0.40, sample='barFrame.splitBar:EnableAnimations()'},
  },
  ['SetValueWithAnimation'] = {
    {name='SetValueWithAnimation', count=3, confidence=0.60, sample='DetailsArenaDpsBars.splitBar:SetValueWithAnimation(percentValue)'},
  },
  ['GetLeftColor'] = {
    {name='GetLeftColor', count=2, confidence=0.40, sample='local cR, cG, cB, cA = dpsBarFrame:GetLeftColor()'},
  },
  ['LerpLinearColor'] = {
    {name='LerpLinearColor', count=3, confidence=0.60, sample='local alphaTeam1Value = DF:LerpLinearColor(deltaTime, 1, cA, 0, 0, team1Alpha, 0, 0)'},
    {name='DF.Math.LerpLinearColor', count=2, confidence=0.40, sample='function DF.Math.LerpLinearColor(deltaTime, interpSpeed, r1, g1, b1, r2, g2, b2)'},
    {name='Math.LerpLinearColor', count=1, confidence=0.20, sample='local r, g, b = detailsFramework.Math.LerpLinearColor(percent, 1, r1, g1, b1, r2, g2, b2)'},
  },
  ['SetLeftColor'] = {
    {name='SetLeftColor', count=4, confidence=0.80, sample='dpsBarFrame:SetLeftColor(r, g, b, alphaTeam1Value)'},
  },
  ['GetRightColor'] = {
    {name='GetRightColor', count=2, confidence=0.40, sample='local cR, cG, cB, cA = dpsBarFrame:GetRightColor()'},
  },
  ['SetRightColor'] = {
    {name='SetRightColor', count=4, confidence=0.80, sample='dpsBarFrame:SetRightColor(r, g, b, alphaTeam2Value)'},
  },
  ['ArenaStarted'] = {
    {name='ArenaStarted', count=1, confidence=0.20, sample='function eventListener:ArenaStarted()'},
  },
  ['MythicDungeonStarted'] = {
    {name='MythicDungeonStarted', count=2, confidence=0.40, sample='function eventListener:MythicDungeonStarted()'},
    {name='DetailsMythicPlusFrame.MythicDungeonStarted', count=2, confidence=0.40, sample='function DetailsMythicPlusFrame.MythicDungeonStarted()'},
  },
  ['ArenaEnded'] = {
    {name='ArenaEnded', count=1, confidence=0.20, sample='function eventListener:ArenaEnded()'},
  },
  ['MythicDungeonEnded'] = {
    {name='MythicDungeonEnded', count=1, confidence=0.20, sample='function eventListener:MythicDungeonEnded()'},
  },
  ['ResetBuffer'] = {
    {name='ResetBuffer', count=1, confidence=0.20, sample='function eventListener:ResetBuffer()'},
  },
  ['DetailsTestSplitBar'] = {
    {name='DetailsTestSplitBar', count=1, confidence=0.20, sample='function DetailsTestSplitBar()'},
  },
  ['WelcomeSetLoc'] = {
    {name='WelcomeSetLoc', count=2, confidence=0.40, sample='function _detalhes:WelcomeSetLoc()'},
  },
  ['CalcCpuPower'] = {
    {name='CalcCpuPower', count=1, confidence=0.20, sample='function _detalhes:CalcCpuPower()'},
  },
  ['StopPlayStretchAlert'] = {
    {name='StopPlayStretchAlert', count=4, confidence=0.80, sample='function _detalhes:StopPlayStretchAlert()'},
  },
  ['FreeTutorialFrame3'] = {
    {name='FreeTutorialFrame3', count=1, confidence=0.20, sample='function _detalhes:FreeTutorialFrame3()'},
  },
  ['NewLabel2'] = {
    {name='NewLabel2', count=1, confidence=0.20, sample='function gump:NewLabel2 (parent, container, member, text, font, size, color)'},
  },
  ['ChangeOptions'] = {
    {name='ChangeOptions', count=1, confidence=0.20, sample='function new_button:ChangeOptions (_table)'},
  },
  ['IsMovable'] = {
    {name='IsMovable', count=11, confidence=1.00, sample='if (container:IsMovable() and not container.isLocked) then'},
  },
  ['MouseOnEnterHook'] = {
    {name='MouseOnEnterHook', count=1, confidence=0.20, sample='new_button.MouseOnEnterHook (new_button)'},
  },
  ['MouseOnLeaveHook'] = {
    {name='MouseOnLeaveHook', count=1, confidence=0.20, sample='new_button.MouseOnLeaveHook (new_button)'},
  },
  ['NewTextBox'] = {
    {name='NewTextBox', count=1, confidence=0.20, sample='function gump:NewTextBox (parent, container, member, func, param1, param2, w, h, options)'},
  },
  ['SetPointAndSpace'] = {
    {name='SetPointAndSpace', count=2, confidence=0.40, sample='function editbox:SetPointAndSpace (MyAnchor, SnapTo, HisAnchor, x, y, Width)'},
  },
  ['SetLabelText'] = {
    {name='SetLabelText', count=2, confidence=0.40, sample='function editbox:SetLabelText (text)'},
  },
  ['EnterHook'] = {
    {name='EnterHook', count=1, confidence=0.20, sample='editbox.EnterHook()'},
  },
  ['PressEnter'] = {
    {name='PressEnter', count=4, confidence=0.80, sample='function editbox:PressEnter(byScript)'},
  },
  ['EnterPress'] = {
    {name='EnterPress', count=2, confidence=0.40, sample='EnterPress (byScript)'},
  },
  ['OnEscapeHook'] = {
    {name='OnEscapeHook', count=1, confidence=0.20, sample='editbox.OnEscapeHook()'},
  },
  ['OnEnterHook'] = {
    {name='OnEnterHook', count=1, confidence=0.20, sample='editbox:OnEnterHook()'},
  },
  ['OnLeaveHook'] = {
    {name='OnLeaveHook', count=1, confidence=0.20, sample='editbox:OnLeaveHook()'},
  },
  ['OnFocusGainedHook'] = {
    {name='OnFocusGainedHook', count=1, confidence=0.20, sample='editbox.OnFocusGainedHook()'},
  },
  ['OnFocusLostHook'] = {
    {name='OnFocusLostHook', count=1, confidence=0.20, sample='editbox.OnFocusLostHook()'},
  },
  ['InputHook'] = {
    {name='InputHook', count=1, confidence=0.20, sample='editbox:InputHook (text)'},
  },
  ['TextChangeedHook'] = {
    {name='TextChangeedHook', count=1, confidence=0.20, sample='editbox:TextChangeedHook (userChanged)'},
  },
  ['Blink'] = {
    {name='Blink', count=2, confidence=0.40, sample='function editbox:Blink()'},
  },
  ['NewScrollBar2'] = {
    {name='NewScrollBar2', count=1, confidence=0.20, sample='function gump:NewScrollBar2 (master, slave, x, y)'},
  },
  ['GetMythicPlusDebugState'] = {
    {name='Details222.Debug.GetMythicPlusDebugState', count=3, confidence=0.60, sample='local debugState = Details222.Debug.GetMythicPlusDebugState()'},
  },
  ['ShowCleuDebugWindow'] = {
    {name='ShowCleuDebugWindow', count=3, confidence=0.60, sample='Details:ShowCleuDebugWindow(function(token, who_serial, who_name, who_flags, target_serial, target_name, target_flags, A1, A2, A3)'},
  },
  ['GetActorInfoFromLineIndex'] = {
    {name='GetActorInfoFromLineIndex', count=2, confidence=0.40, sample='--/run Details:GetWindow(1):GetActorInfoFromLineIndex(3)'},
  },
  ['OpenRunCodeWindow'] = {
    {name='Details222.AutoRunCode.OpenRunCodeWindow', count=2, confidence=0.40, sample='Details222.AutoRunCode.OpenRunCodeWindow()'},
  },
  ['CodeEditorSetText'] = {
    {name='Details222.AutoRunCode.CodeEditorSetText', count=4, confidence=0.80, sample='function Details222.AutoRunCode.CodeEditorSetText(codeKey)'},
  },
  ['OpenMacrosWindow'] = {
    {name='Details.OpenMacrosWindow', count=2, confidence=0.40, sample='Details.OpenMacrosWindow()'},
  },
  ['UpdateLine'] = {
    {name='UpdateLine', count=3, confidence=0.60, sample='line:UpdateLine (index, macro.Name, macro.Desc, macro.MacroText)'},
  },
  ['PlayGlow'] = {
    {name='PlayGlow', count=1, confidence=0.20, sample='function _detalhes:PlayGlow (frame)'},
  },
  ['DetailsTutorialAlertFrame_OnFinishSlideIn'] = {
    {name='DetailsTutorialAlertFrame_OnFinishSlideIn', count=1, confidence=0.20, sample='local function DetailsTutorialAlertFrame_OnFinishSlideIn (frame)'},
  },
  ['DetailsTutorialAlertFrame_OnUpdate'] = {
    {name='DetailsTutorialAlertFrame_OnUpdate', count=1, confidence=0.20, sample='local function DetailsTutorialAlertFrame_OnUpdate (frame, timestep)'},
  },
  ['UpdateScrollChildRect'] = {
    {name='UpdateScrollChildRect', count=1, confidence=0.20, sample='frame:UpdateScrollChildRect();'},
  },
  ['DetailsTutorialAlertFrame_SlideInFrame'] = {
    {name='DetailsTutorialAlertFrame_SlideInFrame', count=1, confidence=0.20, sample='function DetailsTutorialAlertFrame_SlideInFrame (frame, animType)'},
  },
  ['PlayBestDamageOnGuild'] = {
    {name='PlayBestDamageOnGuild', count=1, confidence=0.20, sample='function _detalhes.PlayBestDamageOnGuild (damage)'},
  },
  ['SetScaleFrom'] = {
    {name='SetScaleFrom', count=2, confidence=0.40, sample='Portrait.scale:SetScaleFrom (0, 0)'},
  },
  ['SetScaleTo'] = {
    {name='SetScaleTo', count=2, confidence=0.40, sample='Portrait.scale:SetScaleTo (1, 1)'},
  },
  ['SetFromScale'] = {
    {name='SetFromScale', count=2, confidence=0.40, sample='Portrait.scale:SetFromScale (0, 0)'},
  },
  ['SetToScale'] = {
    {name='SetToScale', count=2, confidence=0.40, sample='Portrait.scale:SetToScale (1, 1)'},
  },
  ['SetOrigin'] = {
    {name='SetOrigin', count=8, confidence=1.00, sample='Portrait.scale:SetOrigin ("center", 0, 0)'},
  },
  ['OpenPlaterIntegrationWindow'] = {
    {name='Details.OpenPlaterIntegrationWindow', count=2, confidence=0.40, sample='Details.OpenPlaterIntegrationWindow()'},
  },
  ['UpdateAllPlates'] = {
    {name='Plater.UpdateAllPlates', count=16, confidence=1.00, sample='Plater.UpdateAllPlates()'},
  },
  ['RefreshDBUpvalues'] = {
    {name='Plater.RefreshDBUpvalues', count=3, confidence=0.60, sample='Plater.RefreshDBUpvalues()'},
  },
  ['Dps'] = {
    {name='Dps', count=2, confidence=0.40, sample='name = "Show Real Time Dps (From You)",'},
  },
  ['GetAllSettings'] = {
    {name='Details.AllInOneWindow.GetAllSettings', count=5, confidence=1.00, sample='return #Details.AllInOneWindow.GetAllSettings()'},
  },
  ['GetAllFrames'] = {
    {name='Details.AllInOneWindow.GetAllFrames', count=2, confidence=0.40, sample='return #Details.AllInOneWindow.GetAllFrames()'},
  },
  ['GetNumFrames'] = {
    {name='Details.AllInOneWindow.GetNumFrames', count=1, confidence=0.20, sample='local numFramesCreated = Details.AllInOneWindow.GetNumFrames()'},
  },
  ['GetFrameByID'] = {
    {name='Details.AllInOneWindow.GetFrameByID', count=1, confidence=0.20, sample='local window = Details.AllInOneWindow.GetFrameByID(id)'},
  },
  ['GetSettingsID'] = {
    {name='GetSettingsID', count=3, confidence=0.60, sample='if (window:GetSettingsID() == settingId) then'},
  },
  ['GetSettings'] = {
    {name='GetSettings', count=7, confidence=1.00, sample='return window:GetSettings()'},
  },
  ['GetFrameBySettingID'] = {
    {name='Details.AllInOneWindow.GetFrameBySettingID', count=1, confidence=0.20, sample='local window = Details.AllInOneWindow.GetFrameBySettingID(settingId)'},
  },
  ['GetNumSettings'] = {
    {name='Details.AllInOneWindow.GetNumSettings', count=2, confidence=0.40, sample='local numSettings = Details.AllInOneWindow.GetNumSettings()'},
  },
  ['GetSettingsByID'] = {
    {name='Details.AllInOneWindow.GetSettingsByID', count=4, confidence=0.80, sample='local windowSetting = Details.AllInOneWindow.GetSettingsByID(settingId)'},
  },
  ['GetNumButtons'] = {
    {name='GetNumButtons', count=1, confidence=0.20, sample='for i = 1, supportFrame:GetNumButtons() do'},
  },
  ['GetButtonByIndex'] = {
    {name='GetButtonByIndex', count=1, confidence=0.20, sample='local button = supportFrame:GetButtonByIndex(i)'},
  },
  ['GetSettingName'] = {
    {name='GetSettingName', count=2, confidence=0.40, sample='if (settings[button:GetSettingName()]) then'},
  },
  ['SetRegularButtonTexture'] = {
    {name='SetRegularButtonTexture', count=1, confidence=0.20, sample='df:SetRegularButtonTexture(button, settings.texture_file, textureCoords[button:GetSettingName()])'},
  },
  ['SetRegularButtonVertexColor'] = {
    {name='SetRegularButtonVertexColor', count=1, confidence=0.20, sample='df:SetRegularButtonVertexColor(button, settings.color)'},
  },
  ['CreateMenuSupportFrame'] = {
    {name='CreateMenuSupportFrame', count=1, confidence=0.20, sample='titleBar:CreateMenuSupportFrame()'},
  },
  ['CreateCombatTimeString'] = {
    {name='CreateCombatTimeString', count=1, confidence=0.20, sample='titleBar:CreateCombatTimeString()'},
  },
  ['SetCombatTimeText'] = {
    {name='SetCombatTimeText', count=1, confidence=0.20, sample='titleBar:SetCombatTimeText("02:36") --debug'},
  },
  ['SetTitleBarHeight'] = {
    {name='SetTitleBarHeight', count=1, confidence=0.20, sample='assert(type(height) == "number", "Invalid height, usage: TitleBar:SetTitleBarHeight(height)")'},
  },
  ['SetSetting'] = {
    {name='SetSetting', count=1, confidence=0.20, sample='titleBar:SetSetting(height, "titlebar", "height")'},
  },
  ['ParseColor'] = {
    {name='ParseColor', count=2, confidence=0.40, sample='local r, g, b, a = df:ParseColor(color)'},
  },
  ['GetCombatTimeString'] = {
    {name='GetCombatTimeString', count=1, confidence=0.20, sample='local combatTimeString = titleBar:GetCombatTimeString()'},
  },
  ['GetHeader'] = {
    {name='GetHeader', count=1, confidence=0.20, sample='local header = titleBar:GetHeader()'},
  },
  ['GetMenuSupportFrame'] = {
    {name='GetMenuSupportFrame', count=1, confidence=0.20, sample='local menuSupportFrame = titleBar:GetMenuSupportFrame()'},
  },
  ['GetTitleBar'] = {
    {name='GetTitleBar', count=1, confidence=0.20, sample='local titleBar = window:GetTitleBar()'},
  },
  ['AddFrame'] = {
    {name='Details.AllInOneWindow.AddFrame', count=1, confidence=0.20, sample='local frameId = Details.AllInOneWindow.AddFrame(newFrame)'},
  },
  ['CreateNew'] = {
    {name='Details.AllInOneWindow.CreateNew', count=1, confidence=0.20, sample='function Details.AllInOneWindow.CreateNew()'},
  },
  ['AddSetting'] = {
    {name='Details.AllInOneWindow.AddSetting', count=1, confidence=0.20, sample='local settingId = Details.AllInOneWindow.AddSetting(newSettings)'},
  },
  ['ReloadAll'] = {
    {name='Details.AllInOneWindow.ReloadAll', count=2, confidence=0.40, sample='Details.AllInOneWindow.ReloadAll()'},
  },
  ['SetSettingID'] = {
    {name='SetSettingID', count=1, confidence=0.20, sample='windowFrame:SetSettingID(settingId)'},
  },
  ['CreateTooltipFrame'] = {
    {name='DetailsPrivite.WindowTooltip.CreateTooltipFrame', count=1, confidence=0.20, sample='function DetailsPrivite.WindowTooltip.CreateTooltipFrame()'},
  },
  ['OpenDpsBenchmark'] = {
    {name='Details.OpenDpsBenchmark', count=1, confidence=0.20, sample='function Details.OpenDpsBenchmark()'},
  },
  ['CreateCombatObject'] = {
    {name='CreateCombatObject', count=1, confidence=0.20, sample='function f.CreateCombatObject()'},
  },
  ['StartNewBenchmark'] = {
    {name='StartNewBenchmark', count=2, confidence=0.40, sample='function f.StartNewBenchmark()'},
  },
  ['StopCurrentBenchmark'] = {
    {name='StopCurrentBenchmark', count=2, confidence=0.40, sample='function f.StopCurrentBenchmark()'},
  },
  ['UpdateOnTick'] = {
    {name='UpdateOnTick', count=1, confidence=0.20, sample='function f.UpdateOnTick (self, deltaTime)'},
  },
  ['StartUpdateOnTick'] = {
    {name='StartUpdateOnTick', count=1, confidence=0.20, sample='function f.StartUpdateOnTick()'},
  },
  ['OpenDB'] = {
    {name='OpenDB', count=3, confidence=0.60, sample='function statisticsFrame.OpenDB()'},
  },
  ['OnCommReceived'] = {
    {name='OnCommReceived', count=1, confidence=0.20, sample='function eventListener:OnCommReceived(event, length, prefix, playerName, realmName, detailsVersion, guildSyncID, data)'},
  },
  ['OnCommSent'] = {
    {name='OnCommSent', count=1, confidence=0.20, sample='function eventListener:OnCommSent(event, length, prefix, playerName, realmName, detailsVersion, guildSyncID, missingIDs, arg8, arg9)'},
  },
  ['BuildReport'] = {
    {name='BuildReport', count=1, confidence=0.20, sample='function statisticsFrame.BuildReport()'},
  },
  ['SetBackgroundImage'] = {
    {name='SetBackgroundImage', count=2, confidence=0.40, sample='function statisticsFrame:SetBackgroundImage(encounterId)'},
  },
  ['BuildPlayerTable'] = {
    {name='BuildPlayerTable', count=4, confidence=0.80, sample='statisticsFrame:BuildPlayerTable(player)'},
  },
  ['UpdateBossDropdown'] = {
    {name='UpdateBossDropdown', count=2, confidence=0.40, sample='function statisticsFrame.UpdateBossDropdown()'},
  },
  ['CreateGFrame'] = {
    {name='CreateGFrame', count=2, confidence=0.40, sample='statisticsFrame.gframe = DF:CreateGFrame(statisticsFrame, 650, 400, 35, onenter, onleave, "gframe", "$parentGF")'},
  },
  ['UpdateLines'] = {
    {name='UpdateLines', count=1, confidence=0.20, sample='statisticsFrame.gframe:UpdateLines(data)'},
  },
  ['BuildGuildRankTable'] = {
    {name='BuildGuildRankTable', count=2, confidence=0.40, sample='function statisticsFrame:BuildGuildRankTable(encounterKillsTable, selectedGuildName, role)'},
  },
  ['SetFillFunction'] = {
    {name='SetFillFunction', count=2, confidence=0.40, sample='fillpanel:SetFillFunction(function(index) return sortTable [index] end)'},
  },
  ['SetTotalFunction'] = {
    {name='SetTotalFunction', count=2, confidence=0.40, sample='fillpanel:SetTotalFunction(function() return #sortTable end)'},
  },
  ['UpdateRows'] = {
    {name='UpdateRows', count=2, confidence=0.40, sample='fillpanel:UpdateRows(header)'},
  },
  ['BuildRaidTable'] = {
    {name='BuildRaidTable', count=3, confidence=0.60, sample='function statisticsFrame:BuildRaidTable(encounterKillsTable, selectedGuildName, role)'},
  },
  ['Mikk'] = {
    {name='Mikk', count=1, confidence=0.20, sample='Author(s): Mikk (dpsgnome@mail.com)'},
  },
  ['EnableMouseWheelScaling'] = {
    {name='EnableMouseWheelScaling', count=1, confidence=0.20, sample='function lib.EnableMouseWheelScaling(frame)'},
  },
  ['EnableMouseOnAlt'] = {
    {name='EnableMouseOnAlt', count=1, confidence=0.20, sample='function lib.EnableMouseOnAlt(frame)'},
  },
  ['DataObjectIterator'] = {
    {name='DataObjectIterator', count=1, confidence=0.20, sample='function lib:DataObjectIterator()'},
  },
  ['GetDataObjectByName'] = {
    {name='GetDataObjectByName', count=1, confidence=0.20, sample='function lib:GetDataObjectByName(dataobjectname)'},
  },
  ['GetNameByDataObject'] = {
    {name='GetNameByDataObject', count=1, confidence=0.20, sample='function lib:GetNameByDataObject(dataobject)'},
  },
  ['Elkano'] = {
    {name='Elkano', count=1, confidence=0.20, sample='Author: Elkano (elkano@gmx.de)'},
  },
  ['Otravi'] = {
    {name='Otravi', count=1, confidence=0.20, sample='Inspired By: SurfaceLib by Haste/Otravi (troeks@gmail.com)'},
  },
  ['FontForge'] = {
    {name='FontForge', count=1, confidence=0.20, sample='Fonts were checked using langcover.pl from DejaVu fonts (http://sourceforge.net/projects/dejavu/) and FontForge (http://fontforge.org/)'},
  },
  ['Medium'] = {
    {name='Medium', count=3, confidence=0.60, sample='ARKai_C.ttf			AR ZhongkaiGBK Medium (Combat)	X		-		X		X		X'},
  },
  ['List'] = {
    {name='List', count=1, confidence=0.20, sample='function lib:List(mediatype)'},
  },
  ['GetGlobal'] = {
    {name='GetGlobal', count=1, confidence=0.20, sample='function lib:GetGlobal(mediatype)'},
  },
  ['SetGlobal'] = {
    {name='SetGlobal', count=1, confidence=0.20, sample='function lib:SetGlobal(mediatype, key)'},
  },
  ['GetDefault'] = {
    {name='GetDefault', count=1, confidence=0.20, sample='function lib:GetDefault(mediatype)'},
  },
  ['SetDefault'] = {
    {name='SetDefault', count=1, confidence=0.20, sample='function lib:SetDefault(mediatype, key)'},
  },
  ['SerializeStringHelper'] = {
    {name='SerializeStringHelper', count=1, confidence=0.20, sample='local function SerializeStringHelper(ch)	-- Used by SerializeValue for strings'},
  },
  ['SerializeValue'] = {
    {name='SerializeValue', count=4, confidence=0.80, sample='local function SerializeValue(v, res, nres)'},
  },
  ['DeserializeStringHelper'] = {
    {name='DeserializeStringHelper', count=1, confidence=0.20, sample='local function DeserializeStringHelper(escape)'},
  },
  ['DeserializeNumberHelper'] = {
    {name='DeserializeNumberHelper', count=2, confidence=0.40, sample='local function DeserializeNumberHelper(number)'},
  },
  ['Main'] = {
    {name='Main', count=1, confidence=0.20, sample='--   Main (top-level) mode: Deserialize a list of values and return them all'},
  },
  ['Recursive'] = {
    {name='Recursive', count=1, confidence=0.20, sample='--   Recursive (table) mode: Deserialize only a single value (_may_ of course be another table with lots of subvalues in it)'},
  },
  ['DeserializeValue'] = {
    {name='DeserializeValue', count=4, confidence=0.80, sample='local function DeserializeValue(iter,single,ctl,data)'},
  },
  ['DeprecatedMessage'] = {
    {name='DeprecatedMessage', count=3, confidence=0.60, sample='openRaidLib.DeprecatedMessage("|cFFEEEEEE" .. deprecatedCall .. "|r is deprecated|cFFEEEEEE, please use " .. newCall .. "\nFrom a weakaura named: " .. auraName .. "")'},
  },
  ['RequestAllPlayersInfo'] = {
    {name='RequestAllPlayersInfo', count=2, confidence=0.40, sample='function openRaidLib.RequestAllPlayersInfo()'},
  },
  ['RequestAllData'] = {
    {name='RequestAllData', count=3, confidence=0.60, sample='showDeprecatedMessage("openRaidLib.RequestAllPlayersInfo()", "openRaidLib.RequestAllData()")'},
  },
  ['GetPlayerInfo'] = {
    {name='GetPlayerInfo', count=2, confidence=0.40, sample='function openRaidLib.playerInfoManager.GetPlayerInfo()'},
  },
  ['GetAllPlayersInfo'] = {
    {name='GetAllPlayersInfo', count=2, confidence=0.40, sample='function openRaidLib.playerInfoManager.GetAllPlayersInfo()'},
  },
  ['GetAllUnitsInfo'] = {
    {name='GetAllUnitsInfo', count=2, confidence=0.40, sample='showDeprecatedMessage("openRaidLib.playerInfoManager.GetAllPlayersInfo()", "openRaidLib.GetAllUnitsInfo()")'},
    {name='UnitInfoManager.GetAllUnitsInfo', count=5, confidence=1.00, sample='return openRaidLib.UnitInfoManager.GetAllUnitsInfo()'},
  },
  ['GetAllPlayersGear'] = {
    {name='GetAllPlayersGear', count=2, confidence=0.40, sample='function openRaidLib.gearManager.GetAllPlayersGear()'},
  },
  ['GetPlayerGear'] = {
    {name='GetPlayerGear', count=2, confidence=0.40, sample='function openRaidLib.gearManager.GetPlayerGear()'},
  },
  ['GetAllPlayersCooldown'] = {
    {name='GetAllPlayersCooldown', count=2, confidence=0.40, sample='function openRaidLib.cooldownManager.GetAllPlayersCooldown()'},
  },
  ['GetAllUnitsCooldown'] = {
    {name='GetAllUnitsCooldown', count=3, confidence=0.60, sample='showDeprecatedMessage("openRaidLib.cooldownManager.GetAllPlayersCooldown()", "openRaidLib.GetAllUnitsCooldown()")'},
  },
  ['GetPlayerCooldowns'] = {
    {name='GetPlayerCooldowns', count=2, confidence=0.40, sample='function openRaidLib.cooldownManager.GetPlayerCooldowns()'},
  },
  ['GetHeroTalentId'] = {
    {name='GetHeroTalentId', count=4, confidence=0.80, sample='function openRaidLib.GetHeroTalentId()'},
  },
  ['IsTWWExpansion'] = {
    {name='IsTWWExpansion', count=3, confidence=0.60, sample='if (IsTWWExpansion()) then'},
  },
  ['GetTalentVersion'] = {
    {name='GetTalentVersion', count=3, confidence=0.60, sample='function openRaidLib.GetTalentVersion()'},
  },
  ['GetBorrowedTalentVersion'] = {
    {name='GetBorrowedTalentVersion', count=1, confidence=0.20, sample='function openRaidLib.GetBorrowedTalentVersion()'},
  },
  ['IsShadowlands'] = {
    {name='IsShadowlands', count=1, confidence=0.20, sample='if (IsShadowlands()) then'},
  },
  ['MakeExportDataStream'] = {
    {name='ExportUtil.MakeExportDataStream', count=2, confidence=0.40, sample='local exportStream = ExportUtil.MakeExportDataStream()'},
  },
  ['GetCurrentSpecID'] = {
    {name='PlayerUtil.GetCurrentSpecID', count=2, confidence=0.40, sample='local currentSpecID = PlayerUtil.GetCurrentSpecID()'},
  },
  ['GetTreeInfo'] = {
    {name='C_Traits.GetTreeInfo', count=2, confidence=0.40, sample='local treeInfo = C_Traits.GetTreeInfo(configId, configInfo.treeIDs[1])'},
    {name='GetTreeInfo', count=1, confidence=0.20, sample='local treeInfo = talentsFrame:GetTreeInfo()'},
  },
  ['GetTreeHash'] = {
    {name='C_Traits.GetTreeHash', count=2, confidence=0.40, sample='local treeHash = C_Traits.GetTreeHash(treeInfo.ID)'},
  },
  ['GetLoadoutSerializationVersion'] = {
    {name='C_Traits.GetLoadoutSerializationVersion', count=3, confidence=0.60, sample='local serializationVersion = C_Traits.GetLoadoutSerializationVersion()'},
  },
  ['GenerateImportString'] = {
    {name='C_Traits.GenerateImportString', count=2, confidence=0.40, sample='return C_Traits.GenerateImportString(activeConfigID)'},
  },
  ['MakeImportDataStream'] = {
    {name='ExportUtil.MakeImportDataStream', count=1, confidence=0.20, sample='local importStream = ExportUtil.MakeImportDataStream(talentString)'},
  },
  ['ReadLoadoutHeader'] = {
    {name='ReadLoadoutHeader', count=1, confidence=0.20, sample='local headerValid, serializationVersion, specID, treeHash = talentsFrame:ReadLoadoutHeader(importStream)'},
  },
  ['GetConfigID'] = {
    {name='GetConfigID', count=1, confidence=0.20, sample='local configID = talentsFrame:GetConfigID()'},
  },
  ['ReadLoadoutContent'] = {
    {name='ReadLoadoutContent', count=1, confidence=0.20, sample='local loadoutContent = talentsFrame:ReadLoadoutContent(importStream, treeInfo.ID)'},
  },
  ['ConvertToImportLoadoutEntryInfo'] = {
    {name='ConvertToImportLoadoutEntryInfo', count=1, confidence=0.20, sample='local loadoutEntryInfo = talentsFrame:ConvertToImportLoadoutEntryInfo(configID, treeInfo.ID, loadoutContent)'},
  },
  ['GetDragonFlightTalentsAsString'] = {
    {name='GetDragonFlightTalentsAsString', count=3, confidence=0.60, sample='function openRaidLib.GetDragonFlightTalentsAsString()'},
  },
  ['ParseTalentString'] = {
    {name='ParseTalentString', count=2, confidence=0.40, sample='function openRaidLib.ParseTalentString(talentString)'},
  },
  ['HT'] = {
    {name='HT', count=1, confidence=0.20, sample='local heroTalentId = talentString:match("@HT(%d+)")'},
  },
  ['GetPlayerTalentsAsPairsTable'] = {
    {name='UnitInfoManager.GetPlayerTalentsAsPairsTable', count=2, confidence=0.40, sample='function openRaidLib.UnitInfoManager.GetPlayerTalentsAsPairsTable()'},
  },
  ['GetPlayerTalents'] = {
    {name='UnitInfoManager.GetPlayerTalents', count=1, confidence=0.20, sample='function openRaidLib.UnitInfoManager.GetPlayerTalents()'},
  },
  ['GetPlayerPvPTalents'] = {
    {name='UnitInfoManager.GetPlayerPvPTalents', count=3, confidence=0.60, sample='function openRaidLib.UnitInfoManager.GetPlayerPvPTalents()'},
  },
  ['GetAllSelectedPvpTalentIDs'] = {
    {name='C_SpecializationInfo.GetAllSelectedPvpTalentIDs', count=2, confidence=0.40, sample='local talentList = C_SpecializationInfo.GetAllSelectedPvpTalentIDs()'},
  },
  ['GetPvpTalentInfoByID'] = {
    {name='GetPvpTalentInfoByID', count=4, confidence=0.80, sample='local doesExists = GetPvpTalentInfoByID(talentId)'},
  },
  ['GetPlayerSpecId'] = {
    {name='GetPlayerSpecId', count=3, confidence=0.60, sample='function openRaidLib.GetPlayerSpecId()'},
  },
  ['GetPlayerConduits'] = {
    {name='UnitInfoManager.GetPlayerConduits', count=1, confidence=0.20, sample='function openRaidLib.UnitInfoManager.GetPlayerConduits()'},
  },
  ['GetActiveSoulbindID'] = {
    {name='C_Soulbinds.GetActiveSoulbindID', count=1, confidence=0.20, sample='local soulbindID = C_Soulbinds.GetActiveSoulbindID()'},
  },
  ['GetSoulbindData'] = {
    {name='C_Soulbinds.GetSoulbindData', count=1, confidence=0.20, sample='local soulbindData = C_Soulbinds.GetSoulbindData(soulbindID)'},
  },
  ['GetConduitSpellID'] = {
    {name='C_Soulbinds.GetConduitSpellID', count=1, confidence=0.20, sample='spellId = C_Soulbinds.GetConduitSpellID(nodeInfo.conduitID, nodeInfo.conduitRank)'},
  },
  ['C_Soulbinds_GetConduitCollectionData'] = {
    {name='C_Soulbinds_GetConduitCollectionData', count=1, confidence=0.20, sample='local collectionData = C_Soulbinds_GetConduitCollectionData(conduitId)'},
  },
  ['GetPlayerItemLevel'] = {
    {name='GearManager.GetPlayerItemLevel', count=2, confidence=0.40, sample='function openRaidLib.GearManager.GetPlayerItemLevel()'},
  },
  ['GetPlayerGearDurability'] = {
    {name='GearManager.GetPlayerGearDurability', count=3, confidence=0.60, sample='function openRaidLib.GearManager.GetPlayerGearDurability()'},
  },
  ['GetInventoryItemDurability'] = {
    {name='GetInventoryItemDurability', count=1, confidence=0.20, sample='local durability, maxDurability = GetInventoryItemDurability(i)'},
  },
  ['GetPlayerWeaponEnchant'] = {
    {name='GearManager.GetPlayerWeaponEnchant', count=2, confidence=0.40, sample='function openRaidLib.GearManager.GetPlayerWeaponEnchant()'},
  },
  ['GetWeaponEnchantInfo'] = {
    {name='GetWeaponEnchantInfo', count=4, confidence=0.80, sample='local _, _, _, mainHandEnchantId, _, _, _, offHandEnchantId = GetWeaponEnchantInfo()'},
  },
  ['GetPlayerGemsAndEnchantInfo'] = {
    {name='GearManager.GetPlayerGemsAndEnchantInfo', count=2, confidence=0.40, sample='function openRaidLib.GearManager.GetPlayerGemsAndEnchantInfo()'},
  },
  ['BuildPlayerEquipmentList'] = {
    {name='GearManager.BuildPlayerEquipmentList', count=2, confidence=0.40, sample='function openRaidLib.GearManager.BuildPlayerEquipmentList()'},
  },
  ['ExtractLink'] = {
    {name='LinkUtil.ExtractLink', count=2, confidence=0.40, sample='--local linkOptions = {LinkUtil.ExtractLink(itemLink)} [1] 'item' [2] itemlink string [3] item name'},
  },
  ['GetPlayerCooldownStatus'] = {
    {name='CooldownManager.GetPlayerCooldownStatus', count=9, confidence=1.00, sample='local timeLeft, charges, startTimeOffset, duration, auraDuration = openRaidLib.CooldownManager.GetPlayerCooldownStatus(cooldownSpellId)'},
    {name='GetPlayerCooldownStatus', count=1, confidence=0.20, sample='return openRaidLib.DiagnosticError("CooldownManager|GetPlayerCooldownStatus()|cooldownInfo not found|", spellId)'},
  },
  ['GetSpellBookItemType'] = {
    {name='C_SpellBook.GetSpellBookItemType', count=2, confidence=0.40, sample='local itemType, actionID, spellID = C_SpellBook.GetSpellBookItemType(i, spellBookPetEnum)'},
  },
  ['SendAllPlayerCooldowns'] = {
    {name='SendAllPlayerCooldowns', count=1, confidence=0.20, sample='--called only from SendAllPlayerCooldowns()'},
    {name='CooldownManager.SendAllPlayerCooldowns', count=3, confidence=0.60, sample='openRaidLib.CooldownManager.SendAllPlayerCooldowns()'},
  },
  ['GetPlayerCooldownList'] = {
    {name='CooldownManager.GetPlayerCooldownList', count=4, confidence=0.80, sample='function openRaidLib.CooldownManager.GetPlayerCooldownList()'},
  },
  ['DiagnosticError'] = {
    {name='DiagnosticError', count=21, confidence=1.00, sample='openRaidLib.DiagnosticError("CooldownManager|GetPlayerCooldownList|LIB_OPEN_RAID_PLAYERCOOLDOWNS is nil")'},
  },
  ['GetSpellBuffDuration'] = {
    {name='CooldownManager.GetSpellBuffDuration', count=2, confidence=0.40, sample='function openRaidLib.CooldownManager.GetSpellBuffDuration(spellId, unitId)'},
  },
  ['ScanCallback'] = {
    {name='AuraTracker.ScanCallback', count=1, confidence=0.20, sample='function openRaidLib.AuraTracker.ScanCallback(auraInfo)'},
  },
  ['ScanUnitAuras'] = {
    {name='AuraTracker.ScanUnitAuras', count=2, confidence=0.40, sample='function openRaidLib.AuraTracker.ScanUnitAuras(unitId)'},
  },
  ['StartScanUnitAuras'] = {
    {name='AuraTracker.StartScanUnitAuras', count=2, confidence=0.40, sample='function openRaidLib.AuraTracker.StartScanUnitAuras(unitId) --this function isn't getting called (was called from Entering World event)'},
  },
  ['AuraRemoved'] = {
    {name='AuraRemoved', count=1, confidence=0.20, sample='function debugModule.AuraRemoved(event, unitId, spellId)'},
  },
  ['GetPlayerSpellList'] = {
    {name='Util.GetPlayerSpellList', count=1, confidence=0.20, sample='function openRaidLib.Util.GetPlayerSpellList()'},
  },
  ['Silence'] = {
    {name='Silence', count=13, confidence=1.00, sample='[15487] = {class = "PRIEST", specs = {258}, cooldown = 45, silence = 4, talent = false, cooldownWithTalent = 30, cooldownTalentId = 23137, type = 6, charges = 1}, --Silence (shadow) Last Word Talent to reduce cooldown in 15 seconds'},
  },
  ['Rebuke'] = {
    {name='Rebuke', count=14, confidence=1.00, sample='[96231] = {class = "PALADIN", specs = {66, 70}, cooldown = 15, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Rebuke (protection and retribution)'},
  },
  ['Bash'] = {
    {name='Bash', count=13, confidence=1.00, sample='[106839] = {class = "DRUID", specs = {103, 104}, cooldown = 15, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Skull Bash (feral, guardian)'},
  },
  ['Beam'] = {
    {name='Beam', count=13, confidence=1.00, sample='[78675] = {class = "DRUID", specs = {102}, cooldown = 60, silence = 8, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Solar Beam (balance)'},
  },
  ['Muzzle'] = {
    {name='Muzzle', count=13, confidence=1.00, sample='[187707] = {class = "HUNTER", specs = {255}, cooldown = 15, silence = 3, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Muzzle (survival)'},
  },
  ['Lock'] = {
    {name='Lock', count=14, confidence=1.00, sample='[19647] = {class = "WARLOCK", specs = {265, 266, 267}, cooldown = 24, silence = 6, talent = false, cooldownWithTalent = false, cooldownTalentId = false, pet = 417, type = 6, charges = 1}, --Spell Lock (pet felhunter ability)'},
  },
  ['Toss'] = {
    {name='Toss', count=20, confidence=1.00, sample='[89766] = {class = "WARLOCK", specs = {266}, cooldown = 30, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, pet = 17252, type = 6, charges = 1}, --Axe Toss (pet felguard ability)'},
  },
  ['Avenger'] = {
    {name='Avenger', count=7, confidence=1.00, sample='[105809] = 	{cooldown = 90, 	duration = 20, 		specs = {65,66,70}, 	talent =22164, charges = 1, class = "PALADIN", type = 2}, --Holy Avenger (talent)'},
  },
  ['Spellwarding'] = {
    {name='Spellwarding', count=6, confidence=1.00, sample='[204018] = 	{cooldown = 180, 	duration = 10, 		specs = {66}, 			talent =22435, charges = 1, class = "PALADIN", type = 3}, --Blessing of Spellwarding (talent)'},
  },
  ['Bladestorm'] = {
    {name='Bladestorm', count=6, confidence=1.00, sample='[46924] = 	{cooldown = 60, 	duration = 4, 		specs = {72},		 	talent =22400, charges = 1, class = "WARRIOR", type = 1}, --Bladestorm (talent)'},
  },
  ['Felguard'] = {
    {name='Felguard', count=6, confidence=1.00, sample='[111898] = 	{cooldown = 120, 	duration = 15, 		specs = {266}, 			talent =21717, charges = 1, class = "WARLOCK", type = 1}, --Grimoire: Felguard (talent)'},
  },
  ['Instability'] = {
    {name='Instability', count=6, confidence=1.00, sample='[113858] = 	{cooldown = 120, 	duration = 20, 		specs = {267}, 			talent =23092, charges = 1, class = "WARLOCK", type = 1}, --Dark Soul: Instability (talent)'},
  },
  ['Guidance'] = {
    {name='Guidance', count=6, confidence=1.00, sample='[108281] = 	{cooldown = 120, 	duration = 10, 		specs = {262,263}, 		talent =22172, charges = 1, class = "SHAMAN", type = 4}, --Ancestral Guidance (talent)'},
  },
  ['Ascendance'] = {
    {name='Ascendance', count=18, confidence=1.00, sample='[114050] = 	{cooldown = 180, 	duration = 15, 		specs = {262}, 			talent =21675, charges = 1, class = "SHAMAN", type = 1}, --Ascendance (talent)'},
  },
  ['Harm'] = {
    {name='Harm', count=8, confidence=1.00, sample='[122278] = 	{cooldown = 120, 	duration = 10, 		specs = {268,269,270}, 	talent =20175, charges = 1, class = "MONK", type = 2}, --Dampen Harm (talent)'},
  },
  ['Magic'] = {
    {name='Magic', count=11, confidence=1.00, sample='[122783] = 	{cooldown = 90, 	duration = 6, 		specs = {269,270}, 		talent =20173, charges = 1, class = "MONK", type = 2}, --Diffuse Magic (talent)'},
  },
  ['Camouflage'] = {
    {name='Camouflage', count=8, confidence=1.00, sample='[199483] = 	{cooldown = 60, 	duration = 60, 		specs = {253,254,255}, 	talent =23100, charges = 1, class = "HUNTER", type = 2}, --Camouflage (talent)'},
  },
  ['Elune'] = {
    {name='Elune', count=6, confidence=1.00, sample='[102560] = 	{cooldown = 180, 	duration = 30, 		specs = {102}, 				talent =21702, charges = 1, class = "DRUID", type = 1}, --Incarnation: Chosen of Elune (talent)'},
  },
  ['Renewal'] = {
    {name='Renewal', count=9, confidence=1.00, sample='[108238] = 	{cooldown = 90, 	duration = false, 	specs = {102,103,104,105}, 	talent =18570, charges = 1, class = "DRUID", type = 2}, --Renewal (talent)'},
  },
  ['Instincts'] = {
    {name='Instincts', count=5, confidence=1.00, sample='[61336] = 	{cooldown = 120, 	duration = 6, 		specs = {103,104}, 			talent =false, charges = 2, class = "DRUID", type = 2}, --Survival Instincts (2min feral 4min guardian, same spellid)'},
  },
  ['Ursoc'] = {
    {name='Ursoc', count=6, confidence=1.00, sample='[102558] = 	{cooldown = 180, 	duration = 30, 		specs = {104}, 				talent =22388, charges = 1, class = "DRUID", type = 2}, --Incarnation: Guardian of Ursoc (talent)'},
  },
  ['Life'] = {
    {name='Life', count=6, confidence=1.00, sample='[33891] = 	{cooldown = 180, 	duration = 30, 		specs = {105}, 				talent =22421, charges = 1, class = "DRUID", type = 2}, --Incarnation: Tree of Life (talent)'},
  },
  ['Overgrowth'] = {
    {name='Overgrowth', count=6, confidence=1.00, sample='[203651] = 	{cooldown = 60, 	duration = false, 	specs = {105}, 				talent =22422, charges = 1, class = "DRUID", type = 3}, --Overgrowth (talent)'},
  },
  ['Flourish'] = {
    {name='Flourish', count=6, confidence=1.00, sample='[197721] = 	{cooldown = 90, 	duration = 8, 		specs = {105}, 				talent =22404, charges = 1, class = "DRUID", type = 4}, --Flourish (talent)'},
  },
  ['Assault'] = {
    {name='Assault', count=6, confidence=1.00, sample='[207289] = 	{cooldown = 78, 	duration = 12, 		specs = {252}, 			talent =22538, charges = 1, class = "DEATHKNIGHT", type = 1}, --Unholy Assault (talent)'},
  },
  ['Sindragosa'] = {
    {name='Sindragosa', count=6, confidence=1.00, sample='[152279] = 	{cooldown = 120, 	duration = 5, 		specs = {251}, 			talent =22537, charges = 1, class = "DEATHKNIGHT", type = 1}, --Breath of Sindragosa (talent)'},
  },
  ['Tombstone'] = {
    {name='Tombstone', count=6, confidence=1.00, sample='[219809] = 	{cooldown = 60, 	duration = 8, 		specs = {250}, 			talent =23454, charges = 1, class = "DEATHKNIGHT", type = 2}, --Tombstone (talent)'},
  },
  ['Sleet'] = {
    {name='Sleet', count=6, confidence=1.00, sample='[207167] = 	{cooldown = 60, 	duration = 5, 		specs = {251}, 			talent =22519, charges = 1, class = "DEATHKNIGHT", type = 5}, --Blinding Sleet (talent)'},
  },
  ['Asphyxiate'] = {
    {name='Asphyxiate', count=8, confidence=1.00, sample='[108194] = 	{cooldown = 45, 	duration = 4, 		specs = {251,252}, 		talent =22520, charges = 1, class = "DEATHKNIGHT", type = 5}, --Asphyxiate (talent)'},
  },
  ['Netherwalk'] = {
    {name='Netherwalk', count=6, confidence=1.00, sample='[196555] = 	{cooldown = 120, 	duration = 5, 		specs = {577}, 			talent =21865, charges = 1, class = "DEMONHUNTER", type = 2}, --Netherwalk (talent)'},
  },
  ['Eruption'] = {
    {name='Eruption', count=6, confidence=1.00, sample='[211881] = 	{cooldown = 30, 	duration = 4, 		specs = {577}, 			talent =22767, charges = 1, class = "DEMONHUNTER", type = 5}, --Fel Eruption (talent)'},
  },
  ['Extraction'] = {
    {name='Extraction', count=6, confidence=1.00, sample='[320341] = 	{cooldown = 90, 	duration = false, 	specs = {581}, 			talent =21902, charges = 1, class = "DEMONHUNTER", type = 1}, --Bulk Extraction (talent)'},
  },
  ['Chains'] = {
    {name='Chains', count=6, confidence=1.00, sample='[202138] = 	{cooldown = 90, 	duration = 6, 		specs = {581}, 			talent =22511, charges = 1, class = "DEMONHUNTER", type = 5}, --Sigil of Chains (talent)'},
  },
  ['Mindbender'] = {
    {name='Mindbender', count=10, confidence=1.00, sample='[200174] = 	{cooldown = 60, 	duration = 15, 		specs = {258}, 			talent =21719, charges = 1, class = "PRIEST", type = 1},  --Mindbender (talent)'},
  },
  ['Apotheosis'] = {
    {name='Apotheosis', count=5, confidence=1.00, sample='[200183] = 	{cooldown = 120, 	duration = 20, 		specs = {257}, 			talent =21644, charges = 1, class = "PRIEST", type = 2},  --Apotheosis (talent)'},
  },
  ['Salvation'] = {
    {name='Salvation', count=6, confidence=1.00, sample='[265202] = 	{cooldown = 720, 	duration = false, 	specs = {257}, 			talent =23145, charges = 1, class = "PRIEST", type = 4},  --Holy Word: Salvation (talent)'},
  },
  ['Madness'] = {
    {name='Madness', count=5, confidence=1.00, sample='[193223] = 	{cooldown = 240, 	duration = 60, 		specs = {258}, 			talent =21979, charges = 1, class = "PRIEST", type = 1},  --Surrender to Madness (talent)'},
  },
  ['Spree'] = {
    {name='Spree', count=6, confidence=1.00, sample='[51690] = 	{cooldown = 120, 	duration = 2, 		specs = {260}, 			talent =23175, charges = 1, class = "ROGUE", type = 1},  --Killing Spree (talent)'},
  },
  ['Manner'] = {
    {name='Manner', count=2, confidence=0.40, sample='[90337] = {cooldown = 60,	class = "HUNTER"}, --Bad Manner (Monkey Stun)'},
  },
  ['Fireball'] = {
    {name='Fireball', count=6, confidence=1.00, sample='[88082] = {name = GetSpellInfo(88082) .. " (" .. L["STRING_MIRROR_IMAGE"] .. ")"}, --Mirror Image's Fireball (mage)'},
  },
  ['Tricks'] = {
    {name='Tricks', count=2, confidence=0.40, sample='[312411] = {cooldown = 90,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[35] = true}, race = "Vulpera",	class = "",	type = 9}, --Bag of Tricks (Vulpera)'},
  },
  ['Call'] = {
    {name='Call', count=2, confidence=0.40, sample='[274738] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[36] = true}, race = "MagharOrc",	class = "",	type = 9}, --Ancestral Call (MagharOrc)'},
  },
  ['Loa'] = {
    {name='Loa', count=2, confidence=0.40, sample='--[292752] = {cooldown = 432000,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[31] = true}, race = "ZandalariTroll",	class = "",	type = 9}, --Embrace of the Loa (ZandalariTroll)'},
  },
  ['Swoop'] = {
    {name='Swoop', count=2, confidence=0.40, sample='--[281954] = {cooldown = 900,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[31] = true}, race = "ZandalariTroll",	class = "",	type = 9}, --Pterrordax Swoop (ZandalariTroll)'},
  },
  ['Pulse'] = {
    {name='Pulse', count=2, confidence=0.40, sample='[260364] = {cooldown = 180,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[27] = true}, race = "Nightborne",	class = "",	type = 9}, --Arcane Pulse (Nightborne)'},
  },
  ['Cantrips'] = {
    {name='Cantrips', count=2, confidence=0.40, sample='--[255661] = {cooldown = 600,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[27] = true}, race = "Nightborne",	class = "",	type = 9}, --Cantrips (Nightborne)'},
  },
  ['Hobgoblin'] = {
    {name='Hobgoblin', count=2, confidence=0.40, sample='--[69046] = {cooldown = 1800,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[9] = true}, race = "Goblin",	class = "",	type = 9}, --Pack Hobgoblin (Goblin)'},
  },
  ['Jump'] = {
    {name='Jump', count=2, confidence=0.40, sample='[69070] = {cooldown = 90,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[9] = true}, race = "Goblin",	class = "",	type = 9}, --Rocket Jump (Goblin)'},
  },
  ['Stomp'] = {
    {name='Stomp', count=3, confidence=0.60, sample='[20549] = {cooldown = 90,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[6] = true}, race = "Tauren",	class = "",	type = 9}, --War Stomp (Tauren)'},
  },
  ['Cannibalize'] = {
    {name='Cannibalize', count=2, confidence=0.40, sample='--[20577] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[5] = true}, race = "Scourge",	class = "",	type = 9}, --Cannibalize (Scourge)'},
  },
  ['Forsaken'] = {
    {name='Forsaken', count=2, confidence=0.40, sample='[7744] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[5] = true}, race = "Scourge",	class = "",	type = 9}, --Will of the Forsaken (Scourge)'},
  },
  ['Originator'] = {
    {name='Originator', count=2, confidence=0.40, sample='[312924] = {cooldown = 180,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[37] = true}, race = "Mechagnome",	class = "",	type = 9}, --Hyper Organic Light Originator (Mechagnome)'},
  },
  ['Pinkie'] = {
    {name='Pinkie', count=2, confidence=0.40, sample='--[312890] = {cooldown = 0,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[37] = true}, race = "Mechagnome",	class = "",	type = 9}, --Skeleton Pinkie (Mechagnome)'},
  },
  ['Haymaker'] = {
    {name='Haymaker', count=2, confidence=0.40, sample='[287712] = {cooldown = 150,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[32] = true}, race = "KulTiran",	class = "",	type = 9}, --Haymaker (KulTiran)'},
  },
  ['Fireblood'] = {
    {name='Fireblood', count=2, confidence=0.40, sample='[265221] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[34] = true}, race = "DarkIronDwarf",	class = "",	type = 9}, --Fireblood (DarkIronDwarf)'},
  },
  ['Machine'] = {
    {name='Machine', count=2, confidence=0.40, sample='--[265225] = {cooldown = 1800,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[34] = true}, race = "DarkIronDwarf",	class = "",	type = 9}, --Mole Machine (DarkIronDwarf)'},
  },
  ['Judgment'] = {
    {name='Judgment', count=2, confidence=0.40, sample='[255647] = {cooldown = 150,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[30] = true}, race = "LightforgedDraenei",	class = "",	type = 9}, --Light's Judgment (LightforgedDraenei)'},
  },
  ['Glide'] = {
    {name='Glide', count=2, confidence=0.40, sample='--[358733] = {cooldown = 1,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[52] = true, [70] = true}, race = "Dracthyr",	class = "",	type = 9}, --Glide (Dracthyr)'},
  },
  ['Swipe'] = {
    {name='Swipe', count=2, confidence=0.40, sample='[368970] = {cooldown = 90,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[52] = true, [70] = true}, race = "Dracthyr",	class = "",	type = 9}, --Tail Swipe (Dracthyr)'},
  },
  ['Buffet'] = {
    {name='Buffet', count=2, confidence=0.40, sample='[357214] = {cooldown = 90,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[52] = true, [70] = true}, race = "Dracthyr",	class = "",	type = 9}, --Wing Buffet (Dracthyr)'},
  },
  ['Palm'] = {
    {name='Palm', count=3, confidence=0.60, sample='[107079] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[25] = true, [24] = true, [26] = true}, race = "Pandaren",	class = "",	type = 9}, --Quaking Palm (Pandaren)'},
  },
  ['Darkflight'] = {
    {name='Darkflight', count=2, confidence=0.40, sample='[68992] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[22] = true}, race = "Worgen",	class = "",	type = 9}, --Darkflight (Worgen)'},
  },
  ['Forms'] = {
    {name='Forms', count=2, confidence=0.40, sample='--[68996] = {cooldown = 1,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[22] = true}, race = "Worgen",	class = "",	type = 9}, --Two Forms (Worgen)'},
  },
  ['Berserking'] = {
    {name='Berserking', count=2, confidence=0.40, sample='[26297] = {cooldown = 180,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[8] = true}, race = "Troll",	class = "",	type = 9}, --Berserking (Troll)'},
  },
  ['Artist'] = {
    {name='Artist', count=2, confidence=0.40, sample='[20589] = {cooldown = 60,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[7] = true}, race = "Gnome",	class = "",	type = 9}, --Escape Artist (Gnome)'},
  },
  ['Torrent'] = {
    {name='Torrent', count=2, confidence=0.40, sample='[232633] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[10] = true}, race = "BloodElf",	class = "",	type = 9}, --Arcane Torrent (BloodElf)'},
  },
  ['Survive'] = {
    {name='Survive', count=2, confidence=0.40, sample='[59752] = {cooldown = 180,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[1] = true}, race = "Human",	class = "",	type = 9}, --Will to Survive (Human)'},
  },
  ['Stoneform'] = {
    {name='Stoneform', count=2, confidence=0.40, sample='[20594] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[3] = true}, race = "Dwarf",	class = "",	type = 9}, --Stoneform (Dwarf)'},
  },
  ['Shadowmeld'] = {
    {name='Shadowmeld', count=2, confidence=0.40, sample='[58984] = {cooldown = 120,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[4] = true}, race = "NightElf",	class = "",	type = 9}, --Shadowmeld (NightElf)'},
  },
  ['Naaru'] = {
    {name='Naaru', count=2, confidence=0.40, sample='[59542] = {cooldown = 180,	duration = 0,	specs = {},			talent = false,	charges = 1, raceid = {[11] = true}, race = "Draenei",	class = "",	type = 9}, --Gift of the Naaru (Draenei)'},
  },
  ['Quell'] = {
    {name='Quell', count=3, confidence=0.60, sample='[351338] =	{duration = 0, class = "EVOKER",	specs = {1467, 1468}, cooldown = 40,	silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false,	charges = 1, type = 6}, --Quell (Evoker)'},
  },
  ['Intercession'] = {
    {name='Intercession', count=2, confidence=0.40, sample='--[391054] = {cooldown = 10 min cooldown,	duration = 0,	specs = {},			talent = false,	charges = 1,	class = "PALADIN",	type = 5}, --Intercession (battle ress)'},
  },
  ['Seduction'] = {
    {name='Seduction', count=3, confidence=0.60, sample='[261589] = {cooldown = 30,	duration = 30,	specs = {265, 266, 267},	talent = false,	charges = 1,	class = "WARLOCK",	type = 8}, --Seduction (Sacrifice)'},
  },
  ['Stormkeeper'] = {
    {name='Stormkeeper', count=4, confidence=0.80, sample='[383009] = {cooldown = 60,   duration = 0,   specs = {264}, 		   	talent = false, charges = 1,    class = "SHAMAN",   type = 1}, --Stormkeeper (resto)'},
  },
  ['Detox'] = {
    {name='Detox', count=4, confidence=0.80, sample='[115450] = {cooldown = 8,	duration = 0,	specs = {270},				talent = false,	charges = 1,	class = "MONK",	type = 7}, --Detox (healer)'},
  },
  ['Arbiter'] = {
    {name='Arbiter', count=2, confidence=0.40, sample='[207349] = {cooldown = 180,	duration = 30,	specs = {252},				talent = false,	charges = 1,	class = "DEATHKNIGHT",	type = 1}, --Summon Dark Arbiter (replaces Gargoyle)'},
  },
  ['Invisibility'] = {
    {name='Invisibility', count=2, confidence=0.40, sample='[414664] = {cooldown = 300,	duration = 12,	specs = {63, 64, 62},		talent = false,	charges = 1,	class = "MAGE",	type = 5}, --Mass Invisibility (only out of combat)'},
  },
  ['ShowDiagnosticErrors'] = {
    {name='ShowDiagnosticErrors', count=1, confidence=0.20, sample='function openRaidLib.ShowDiagnosticErrors(value)'},
  },
  ['SetCooldownCheckInterval'] = {
    {name='SetCooldownCheckInterval', count=1, confidence=0.20, sample='function openRaidLib.SetCooldownCheckInterval(value)'},
  },
  ['RegisterCVar'] = {
    {name='C_CVar.RegisterCVar', count=2, confidence=0.40, sample='C_CVar.RegisterCVar(CONST_CVAR_TEMPCACHE)'},
  },
  ['PrintTempCacheDebug'] = {
    {name='PrintTempCacheDebug', count=1, confidence=0.20, sample='function openRaidLib.PrintTempCacheDebug()'},
  },
  ['SaveDebugText'] = {
    {name='SaveDebugText', count=2, confidence=0.40, sample='function tempCache.SaveDebugText()'},
  },
  ['AddDebugText'] = {
    {name='AddDebugText', count=19, confidence=1.00, sample='function tempCache.AddDebugText(text)'},
  },
  ['SaveCacheOnCVar'] = {
    {name='SaveCacheOnCVar', count=2, confidence=0.40, sample='function tempCache.SaveCacheOnCVar(data)'},
  },
  ['RestoreData'] = {
    {name='RestoreData', count=2, confidence=0.40, sample='function tempCache.RestoreData()'},
  },
  ['SaveData'] = {
    {name='SaveData', count=10, confidence=1.00, sample='function tempCache.SaveData()'},
  },
  ['OnReceiveSafeComm'] = {
    {name='OnReceiveSafeComm', count=1, confidence=0.20, sample='function openRaidLib.commHandler.OnReceiveSafeComm(self, event, prefix, text, channel, sender, target, zoneChannelID, localID, name, instanceID)'},
  },
  ['OnReceiveComm'] = {
    {name='OnReceiveComm', count=5, confidence=1.00, sample='openRaidLib.commHandler.OnReceiveComm(event, CONST_COMM_PREFIX, data, channel, sender, target, zoneChannelID, localID, name, instanceID, true)'},
  },
  ['IsCommAllowed'] = {
    {name='IsCommAllowed', count=2, confidence=0.40, sample='if (not openRaidLib.IsCommAllowed()) then'},
  },
  ['RegisterORComm'] = {
    {name='RegisterORComm', count=18, confidence=1.00, sample='function openRaidLib.commHandler.RegisterORComm(prefix, func)'},
  },
  ['SendCommData'] = {
    {name='SendCommData', count=22, confidence=1.00, sample='function openRaidLib.commHandler.SendCommData(data, flags, bIsSafe)'},
  },
  ['CancelUniqueTimer'] = {
    {name='Schedules.CancelUniqueTimer', count=5, confidence=1.00, sample='openRaidLib.Schedules.CancelUniqueTimer(namespace, scheduleName)'},
  },
  ['NewUniqueTimer'] = {
    {name='Schedules.NewUniqueTimer', count=34, confidence=1.00, sample='function openRaidLib.Schedules.NewUniqueTimer(time, callback, namespace, scheduleName, ...)'},
  },
  ['IsUniqueTimerOnCooldown'] = {
    {name='Schedules.IsUniqueTimerOnCooldown', count=2, confidence=0.40, sample='if (openRaidLib.Schedules.IsUniqueTimerOnCooldown(namespace, scheduleName)) then'},
  },
  ['CancelAllUniqueTimers'] = {
    {name='Schedules.CancelAllUniqueTimers', count=2, confidence=0.40, sample='function openRaidLib.Schedules.CancelAllUniqueTimers()'},
  },
  ['TriggerCallback'] = {
    {name='TriggerCallback', count=36, confidence=1.00, sample='function openRaidLib.publicCallback.TriggerCallback(event, ...)'},
  },
  ['UpdateUnitIDCache'] = {
    {name='UpdateUnitIDCache', count=4, confidence=0.80, sample='openRaidLib.UpdateUnitIDCache()'},
  },
  ['OnEnterWorldRegisterEvents'] = {
    {name='OnEnterWorldRegisterEvents', count=2, confidence=0.40, sample='openRaidLib.OnEnterWorldRegisterEvents()'},
  },
  ['UnitSpecFound'] = {
    {name='UnitSpecFound', count=1, confidence=0.20, sample='function detailsEventListener:UnitSpecFound(event, unitId, specId, unitGuid)'},
  },
  ['UnitTalentsFound'] = {
    {name='UnitTalentsFound', count=1, confidence=0.20, sample='function detailsEventListener:UnitTalentsFound(event, unitId, talentTable, unitGuid)'},
  },
  ['UpdatePlayerAliveStatus'] = {
    {name='UpdatePlayerAliveStatus', count=5, confidence=1.00, sample='openRaidLib.mainControl.UpdatePlayerAliveStatus()'},
  },
  ['SendFullData'] = {
    {name='SendFullData', count=3, confidence=0.60, sample='function openRaidLib.mainControl.SendFullData()'},
  },
  ['SendAllPlayerInfo'] = {
    {name='UnitInfoManager.SendAllPlayerInfo', count=2, confidence=0.40, sample='openRaidLib.UnitInfoManager.SendAllPlayerInfo()'},
  },
  ['SendAllGearInfo'] = {
    {name='GearManager.SendAllGearInfo', count=3, confidence=0.60, sample='openRaidLib.GearManager.SendAllGearInfo()'},
  },
  ['GetPlayerFullInfo'] = {
    {name='UnitInfoManager.GetPlayerFullInfo', count=4, confidence=0.80, sample='local playerFullInfo = openRaidLib.UnitInfoManager.GetPlayerFullInfo()'},
  },
  ['AddUnitInfo'] = {
    {name='UnitInfoManager.AddUnitInfo', count=4, confidence=0.80, sample='openRaidLib.UnitInfoManager.AddUnitInfo(unitName, unpack(playerFullInfo)) --unpack: specId, talentsString, pvpTalentsTableUnpacked'},
  },
  ['GetPlayerFullGearInfo'] = {
    {name='GearManager.GetPlayerFullGearInfo', count=4, confidence=0.80, sample='local playerGearInfo = openRaidLib.GearManager.GetPlayerFullGearInfo()'},
  },
  ['AddUnitGearList'] = {
    {name='GearManager.AddUnitGearList', count=5, confidence=1.00, sample='openRaidLib.GearManager.AddUnitGearList(unitName, unpack(playerGearInfo))'},
    {name='AddUnitGearList', count=1, confidence=0.20, sample='--called from AddUnitGearList() on LibOpenRaid file'},
  },
  ['UpdatePlayerCooldownsLocally'] = {
    {name='CooldownManager.UpdatePlayerCooldownsLocally', count=6, confidence=1.00, sample='openRaidLib.CooldownManager.UpdatePlayerCooldownsLocally()'},
  },
  ['UpdatePlayer'] = {
    {name='UpdatePlayer', count=1, confidence=0.20, sample='function openRaidLib.UpdatePlayer()'},
  },
  ['UpdatePlayerData'] = {
    {name='UpdatePlayerData', count=1, confidence=0.20, sample='return openRaidLib.mainControl.UpdatePlayerData()'},
  },
  ['TCopy'] = {
    {name='TCopy', count=8, confidence=1.00, sample='openRaidLib.TCopy(newUnitInfo, unitTablePrototype)'},
  },
  ['EraseData'] = {
    {name='UnitInfoManager.EraseData', count=2, confidence=0.40, sample='function UnitInfoManager.EraseData()'},
    {name='GearManager.EraseData', count=2, confidence=0.40, sample='function openRaidLib.GearManager.EraseData()'},
    {name='OpenNotesManager.EraseData', count=2, confidence=0.40, sample='function openRaidLib.OpenNotesManager.EraseData()'},
    {name='CooldownManager.EraseData', count=2, confidence=0.40, sample='openRaidLib.CooldownManager.EraseData()'},
  },
  ['SetUnitInfo'] = {
    {name='UnitInfoManager.SetUnitInfo', count=4, confidence=0.80, sample='function UnitInfoManager.SetUnitInfo(unitName, unitInfo, specId, talentsString, pvpTalentsTableUnpacked)'},
  },
  ['UpdateUnitInfo'] = {
    {name='UnitInfoManager.UpdateUnitInfo', count=1, confidence=0.20, sample='function UnitInfoManager.UpdateUnitInfo(playerName, specId, talentsString, pvpTalentsTableUnpacked)'},
  },
  ['OnReceiveUnitFullInfo'] = {
    {name='UnitInfoManager.OnReceiveUnitFullInfo', count=1, confidence=0.20, sample='function UnitInfoManager.OnReceiveUnitFullInfo(data, unitName)'},
  },
  ['PackTable'] = {
    {name='PackTable', count=6, confidence=1.00, sample='dataToSend = dataToSend .. openRaidLib.PackTable(playerInfo[3]) .. ",!1" --player talents pvp'},
  },
  ['OnPlayerTalentChanged'] = {
    {name='UnitInfoManager.OnPlayerTalentChanged', count=1, confidence=0.20, sample='function UnitInfoManager.OnPlayerTalentChanged()'},
    {name='CooldownManager.OnPlayerTalentChanged', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnPlayerTalentChanged()'},
  },
  ['OnPlayerLeaveGroup'] = {
    {name='UnitInfoManager.OnPlayerLeaveGroup', count=1, confidence=0.20, sample='function UnitInfoManager.OnPlayerLeaveGroup()'},
    {name='GearManager.OnPlayerLeaveGroup', count=1, confidence=0.20, sample='function openRaidLib.GearManager.OnPlayerLeaveGroup()'},
    {name='CooldownManager.OnPlayerLeaveGroup', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnPlayerLeaveGroup()'},
  },
  ['SendPlayerInfoAfterCombat'] = {
    {name='UnitInfoManager.SendPlayerInfoAfterCombat', count=1, confidence=0.20, sample='function UnitInfoManager.SendPlayerInfoAfterCombat()'},
  },
  ['OnPlayerRess'] = {
    {name='GearManager.OnPlayerRess', count=1, confidence=0.20, sample='function openRaidLib.GearManager.OnPlayerRess()'},
    {name='CooldownManager.OnPlayerRess', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnPlayerRess()'},
  },
  ['SendGearInfoAfterCombat'] = {
    {name='GearManager.SendGearInfoAfterCombat', count=1, confidence=0.20, sample='function openRaidLib.GearManager.SendGearInfoAfterCombat()'},
  },
  ['SendDurability'] = {
    {name='GearManager.SendDurability', count=1, confidence=0.20, sample='function openRaidLib.GearManager.SendDurability()'},
  },
  ['OnReceiveGearDurability'] = {
    {name='GearManager.OnReceiveGearDurability', count=1, confidence=0.20, sample='function openRaidLib.GearManager.OnReceiveGearDurability(data, unitName)'},
  },
  ['UpdateUnitGearDurability'] = {
    {name='GearManager.UpdateUnitGearDurability', count=2, confidence=0.40, sample='openRaidLib.GearManager.UpdateUnitGearDurability(unitName, durability)'},
  },
  ['BuildEquipmentItemLinks'] = {
    {name='GearManager.BuildEquipmentItemLinks', count=2, confidence=0.40, sample='openRaidLib.GearManager.BuildEquipmentItemLinks(equippedGearList)'},
  },
  ['OnReceiveGearFullInfo'] = {
    {name='GearManager.OnReceiveGearFullInfo', count=1, confidence=0.20, sample='function openRaidLib.GearManager.OnReceiveGearFullInfo(data, unitName)'},
  },
  ['PackTableAndSubTables'] = {
    {name='PackTableAndSubTables', count=3, confidence=0.60, sample='dataToSend = dataToSend .. openRaidLib.PackTableAndSubTables(playerGearInfo[6]) .. "," --full equipped equipment'},
  },
  ['GetPlayersInTheGroup'] = {
    {name='GetPlayersInTheGroup', count=3, confidence=0.60, sample='local groupMembers = openRaidLib.GetPlayersInTheGroup()'},
  },
  ['GetAllUnitsNotes'] = {
    {name='GetAllUnitsNotes', count=1, confidence=0.20, sample='function openRaidLib.GetAllUnitsNotes()'},
    {name='OpenNotesManager.GetAllUnitsNotes', count=3, confidence=0.60, sample='return openRaidLib.OpenNotesManager.GetAllUnitsNotes()'},
  },
  ['GetUnitNote'] = {
    {name='GetUnitNote', count=1, confidence=0.20, sample='function openRaidLib.GetUnitNote(unitId)'},
    {name='OpenNotesManager.GetUnitNote', count=7, confidence=1.00, sample='local noteInfo = openRaidLib.OpenNotesManager.GetUnitNote(unitName)'},
  },
  ['SetUnitNote'] = {
    {name='OpenNotesManager.SetUnitNote', count=3, confidence=0.60, sample='openRaidLib.OpenNotesManager.SetUnitNote(UnitName("player"), note, "")'},
  },
  ['SendNote'] = {
    {name='OpenNotesManager.SendNote', count=2, confidence=0.40, sample='openRaidLib.OpenNotesManager.SendNote()'},
    {name='SendNote', count=3, confidence=0.60, sample='assert(type(playerNote.note) == "string", "OpenRaid: SendNote() invalid note.")'},
  },
  ['EraseDataKeepPlayer'] = {
    {name='OpenNotesManager.EraseDataKeepPlayer', count=1, confidence=0.20, sample='function openRaidLib.OpenNotesManager.EraseDataKeepPlayer()'},
  },
  ['OnPlayerEnterWorld'] = {
    {name='OpenNotesManager.OnPlayerEnterWorld', count=1, confidence=0.20, sample='function openRaidLib.OpenNotesManager.OnPlayerEnterWorld()'},
    {name='KeystoneInfoManager.OnPlayerEnterWorld', count=1, confidence=0.20, sample='function openRaidLib.KeystoneInfoManager.OnPlayerEnterWorld()'},
    {name='RatingInfoManager.OnPlayerEnterWorld', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.OnPlayerEnterWorld()'},
  },
  ['OnReceiveNoteData'] = {
    {name='OpenNotesManager.OnReceiveNoteData', count=1, confidence=0.20, sample='function openRaidLib.OpenNotesManager.OnReceiveNoteData(data, unitName)'},
  },
  ['OnReceiveNoteRequest'] = {
    {name='OpenNotesManager.OnReceiveNoteRequest', count=1, confidence=0.20, sample='function openRaidLib.OpenNotesManager.OnReceiveNoteRequest()'},
  },
  ['SendPlayerCooldownUpdate'] = {
    {name='CooldownManager.SendPlayerCooldownUpdate', count=6, confidence=1.00, sample='openRaidLib.CooldownManager.SendPlayerCooldownUpdate(spellId, 0, charges, 0, 0, 0)'},
  },
  ['CooldownSpellUpdate'] = {
    {name='CooldownManager.CooldownSpellUpdate', count=10, confidence=1.00, sample='openRaidLib.CooldownManager.CooldownSpellUpdate(playerName, spellId, timeLeft, charges, startTimeOffset, duration, auraDuration) --need 7 values'},
  },
  ['GetUnitCooldownInfo'] = {
    {name='GetUnitCooldownInfo', count=2, confidence=0.40, sample='local cooldownInfo = openRaidLib.GetUnitCooldownInfo(playerName, spellId)'},
  },
  ['CleanupCooldownTickers'] = {
    {name='CooldownManager.CleanupCooldownTickers', count=2, confidence=0.40, sample='function openRaidLib.CooldownManager.CleanupCooldownTickers()'},
  },
  ['FilterCooldowns'] = {
    {name='FilterCooldowns', count=2, confidence=0.40, sample='local filterCooldowns = openRaidLib.FilterCooldowns(unitName, allCooldowns, filter)'},
  },
  ['DoesSpellPassFilters'] = {
    {name='DoesSpellPassFilters', count=1, confidence=0.20, sample='function openRaidLib.DoesSpellPassFilters(spellId, filter)'},
    {name='CooldownManager.DoesSpellPassFilters', count=2, confidence=0.40, sample='return openRaidLib.CooldownManager.DoesSpellPassFilters(spellId, filter)'},
  },
  ['GetCooldownTimeFromUnitSpellID'] = {
    {name='GetCooldownTimeFromUnitSpellID', count=1, confidence=0.20, sample='function openRaidLib.GetCooldownTimeFromUnitSpellID(unitId, spellId)'},
  },
  ['GetCooldownInfoValues'] = {
    {name='CooldownManager.GetCooldownInfoValues', count=7, confidence=1.00, sample='return openRaidLib.CooldownManager.GetCooldownInfoValues(cooldownInfo)'},
  },
  ['GetCooldownTimeFromCooldownInfo'] = {
    {name='GetCooldownTimeFromCooldownInfo', count=1, confidence=0.20, sample='function openRaidLib.GetCooldownTimeFromCooldownInfo(cooldownInfo)'},
  },
  ['GetRangePercent'] = {
    {name='GetRangePercent', count=7, confidence=1.00, sample='local percent = openRaidLib.GetRangePercent(minValue, maxValue, currentValue)'},
    {name='DF.Math.GetRangePercent', count=4, confidence=0.80, sample='return DF.Math.GetRangeValue(minValue, maxValue, 1 - DF.Math.GetRangePercent(minValue, maxValue, value))'},
  },
  ['GetCooldownStatusFromUnitSpellID'] = {
    {name='GetCooldownStatusFromUnitSpellID', count=1, confidence=0.20, sample='function openRaidLib.GetCooldownStatusFromUnitSpellID(unitId, spellId)'},
  },
  ['OnPlayerCast'] = {
    {name='CooldownManager.OnPlayerCast', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnPlayerCast(event, spellId, isPlayerPet) --~cast'},
  },
  ['CheckCooldownsAfterEncounterEnd'] = {
    {name='CooldownManager.CheckCooldownsAfterEncounterEnd', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.CheckCooldownsAfterEncounterEnd()'},
  },
  ['OnEncounterEnd'] = {
    {name='CooldownManager.OnEncounterEnd', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnEncounterEnd()'},
  },
  ['OnEncounterStart'] = {
    {name='CooldownManager.OnEncounterStart', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnEncounterStart()'},
  },
  ['OnMythicPlusStart'] = {
    {name='CooldownManager.OnMythicPlusStart', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnMythicPlusStart()'},
  },
  ['OnPlayerPetChanged'] = {
    {name='CooldownManager.OnPlayerPetChanged', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnPlayerPetChanged()'},
  },
  ['CheckCooldownChanges'] = {
    {name='CooldownManager.CheckCooldownChanges', count=2, confidence=0.40, sample='openRaidLib.CooldownManager.CheckCooldownChanges()'},
  },
  ['OnAuraRemoved'] = {
    {name='CooldownManager.OnAuraRemoved', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnAuraRemoved(event, unitId, spellId)'},
  },
  ['CheckForSpellsAdeedOrRemoved'] = {
    {name='CheckForSpellsAdeedOrRemoved', count=1, confidence=0.20, sample='--important: CheckForSpellsAdeedOrRemoved() already change the cooldowns on the player locally'},
    {name='CooldownManager.CheckForSpellsAdeedOrRemoved', count=2, confidence=0.40, sample='local spellsAdded, spellsRemoved = openRaidLib.CooldownManager.CheckForSpellsAdeedOrRemoved()'},
  },
  ['OnReceiveUnitCooldownChanges'] = {
    {name='CooldownManager.OnReceiveUnitCooldownChanges', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnReceiveUnitCooldownChanges(data, unitName)'},
  },
  ['AddUnitCooldownsList'] = {
    {name='CooldownManager.AddUnitCooldownsList', count=3, confidence=0.60, sample='openRaidLib.CooldownManager.AddUnitCooldownsList(playerName, playerCooldownHash)'},
  },
  ['OnReceiveUnitCooldowns'] = {
    {name='CooldownManager.OnReceiveUnitCooldowns', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnReceiveUnitCooldowns(data, unitName)'},
  },
  ['RequestCooldownInfo'] = {
    {name='CooldownManager.RequestCooldownInfo', count=2, confidence=0.40, sample='function openRaidLib.CooldownManager.RequestCooldownInfo(spellId)'},
    {name='RequestCooldownInfo', count=1, confidence=0.20, sample='function openRaidLib.RequestCooldownInfo(spellId) --api alias'},
  },
  ['OnReceiveRequestForCooldownInfoUpdate'] = {
    {name='CooldownManager.OnReceiveRequestForCooldownInfoUpdate', count=1, confidence=0.20, sample='function openRaidLib.CooldownManager.OnReceiveRequestForCooldownInfoUpdate(data, unitName)'},
  },
  ['GetOwnedKeystoneMapID'] = {
    {name='C_MythicPlus.GetOwnedKeystoneMapID', count=3, confidence=0.60, sample='--ATM we are obligated to do this due to C_MythicPlus.GetOwnedKeystoneMapID() return the same mapID for the two Tazavesh dungeons'},
  },
  ['GetOwnedKeystoneLevel'] = {
    {name='C_MythicPlus.GetOwnedKeystoneLevel', count=2, confidence=0.40, sample='local level = C_MythicPlus.GetOwnedKeystoneLevel()'},
  },
  ['UpdatePlayerKeystoneInfo'] = {
    {name='KeystoneInfoManager.UpdatePlayerKeystoneInfo', count=8, confidence=1.00, sample='openRaidLib.KeystoneInfoManager.UpdatePlayerKeystoneInfo(keystoneInfo)'},
  },
  ['OnReceiveRequestData'] = {
    {name='KeystoneInfoManager.OnReceiveRequestData', count=4, confidence=0.80, sample='openRaidLib.KeystoneInfoManager.OnReceiveRequestData()'},
    {name='RatingInfoManager.OnReceiveRequestData', count=3, confidence=0.60, sample='function openRaidLib.RatingInfoManager.OnReceiveRequestData()'},
  },
  ['GetOwnedKeystoneChallengeMapID'] = {
    {name='C_MythicPlus.GetOwnedKeystoneChallengeMapID', count=1, confidence=0.20, sample='keystoneInfo.challengeMapID = C_MythicPlus.GetOwnedKeystoneChallengeMapID() or 0'},
  },
  ['SendPlayerKeystoneInfoToGuild'] = {
    {name='KeystoneInfoManager.SendPlayerKeystoneInfoToGuild', count=1, confidence=0.20, sample='function openRaidLib.KeystoneInfoManager.SendPlayerKeystoneInfoToGuild()'},
  },
  ['OnReceiveKeystoneData'] = {
    {name='KeystoneInfoManager.OnReceiveKeystoneData', count=1, confidence=0.20, sample='function openRaidLib.KeystoneInfoManager.OnReceiveKeystoneData(data, unitName)'},
  },
  ['OnPlayerEnterGroup'] = {
    {name='KeystoneInfoManager.OnPlayerEnterGroup', count=1, confidence=0.20, sample='function openRaidLib.KeystoneInfoManager.OnPlayerEnterGroup()'},
    {name='RatingInfoManager.OnPlayerEnterGroup', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.OnPlayerEnterGroup()'},
  },
  ['OnMythicDungeonFinished'] = {
    {name='KeystoneInfoManager.OnMythicDungeonFinished', count=1, confidence=0.20, sample='function openRaidLib.KeystoneInfoManager.OnMythicDungeonFinished()'},
    {name='RatingInfoManager.OnMythicDungeonFinished', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.OnMythicDungeonFinished()'},
    {name='Details222.MythicPlus.OnMythicDungeonFinished', count=1, confidence=0.20, sample='function Details222.MythicPlus.OnMythicDungeonFinished(encounterID, encounterName)end'},
  },
  ['GetAllRatingInfo'] = {
    {name='GetAllRatingInfo', count=1, confidence=0.20, sample='function openRaidLib.GetAllRatingInfo()'},
    {name='RatingInfoManager.GetAllRatingInfo', count=2, confidence=0.40, sample='return openRaidLib.RatingInfoManager.GetAllRatingInfo()'},
  },
  ['GetRatingInfo'] = {
    {name='GetRatingInfo', count=1, confidence=0.20, sample='function openRaidLib.GetRatingInfo(unitId)'},
    {name='RatingInfoManager.GetRatingInfo', count=9, confidence=1.00, sample='return openRaidLib.RatingInfoManager.GetRatingInfo(unitName)'},
  },
  ['RequestRatingDataFromGuild'] = {
    {name='RequestRatingDataFromGuild', count=1, confidence=0.20, sample='function openRaidLib.RequestRatingDataFromGuild()'},
  },
  ['RequestRatingDataFromParty'] = {
    {name='RequestRatingDataFromParty', count=1, confidence=0.20, sample='function openRaidLib.RequestRatingDataFromParty()'},
  },
  ['RequestRatingDataFromRaid'] = {
    {name='RequestRatingDataFromRaid', count=2, confidence=0.40, sample='function openRaidLib.RequestRatingDataFromRaid()'},
  },
  ['WipeRatingData'] = {
    {name='WipeRatingData', count=1, confidence=0.20, sample='function openRaidLib.WipeRatingData()'},
  },
  ['UpdatePlayerRatingInfo'] = {
    {name='RatingInfoManager.UpdatePlayerRatingInfo', count=7, confidence=1.00, sample='openRaidLib.RatingInfoManager.UpdatePlayerRatingInfo(ratingInfo)'},
  },
  ['SendPlayerRatingInfoToParty'] = {
    {name='RatingInfoManager.SendPlayerRatingInfoToParty', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.SendPlayerRatingInfoToParty()'},
  },
  ['SendPlayerRatingInfoToGuild'] = {
    {name='RatingInfoManager.SendPlayerRatingInfoToGuild', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.SendPlayerRatingInfoToGuild()'},
  },
  ['OnReceiveRatingData'] = {
    {name='RatingInfoManager.OnReceiveRatingData', count=1, confidence=0.20, sample='function openRaidLib.RatingInfoManager.OnReceiveRatingData(data, unitName)'},
  },
  ['Doublet'] = {
    {name='Doublet', count=2, confidence=0.40, sample='[173126] = true, --Straddling Jewel Doublet (green, +12 speed)'},
  },
  ['Cluster'] = {
    {name='Cluster', count=4, confidence=0.80, sample='[173130] = true, --Masterful Jewel Cluster (blue, master)'},
  },
  ['Agate'] = {
    {name='Agate', count=1, confidence=0.20, sample='[169220] = true, --Straddling Sage Agate (blue, movement speed)'},
  },
  ['Injector'] = {
    {name='Injector', count=1, confidence=0.20, sample='[452767] = true, --Heartseeking Health Injector (engineering tinker)'},
  },
  ['Serum'] = {
    {name='Serum', count=1, confidence=0.20, sample='[431422] = true, --Slumbering Soul Serum (10s meditation)'},
  },
  ['GetAllRegisteredCooldowns'] = {
    {name='CooldownManager.GetAllRegisteredCooldowns', count=4, confidence=0.80, sample='function openRaidLib.CooldownManager.GetAllRegisteredCooldowns()'},
  },
  ['GetCooldownInfo'] = {
    {name='CooldownManager.GetCooldownInfo', count=3, confidence=0.60, sample='function openRaidLib.CooldownManager.GetCooldownInfo(spellId)'},
    {name='GetCooldownInfo', count=1, confidence=0.20, sample='function DF:GetCooldownInfo (spellId)'},
  },
  ['AddCooldownFilter'] = {
    {name='AddCooldownFilter', count=1, confidence=0.20, sample='function openRaidLib.AddCooldownFilter(filterName, spells)'},
  },
  ['AddFilter'] = {
    {name='AddFilter', count=2, confidence=0.40, sample='openRaidLib.DiagnosticError("Usage: openRaidLib.AddFilter(string: filterName, table: spells)", debugstack())'},
  },
  ['GetFlaskInfoBySpellId'] = {
    {name='GetFlaskInfoBySpellId', count=2, confidence=0.40, sample='function openRaidLib.GetFlaskInfoBySpellId(spellId)'},
  },
  ['GetFlaskTierFromAura'] = {
    {name='GetFlaskTierFromAura', count=1, confidence=0.20, sample='function openRaidLib.GetFlaskTierFromAura(auraInfo)'},
  },
  ['GetFoodInfoBySpellId'] = {
    {name='GetFoodInfoBySpellId', count=2, confidence=0.40, sample='function openRaidLib.GetFoodInfoBySpellId(spellId)'},
  },
  ['GetFoodTierFromAura'] = {
    {name='GetFoodTierFromAura', count=1, confidence=0.20, sample='function openRaidLib.GetFoodTierFromAura(auraInfo)'},
  },
  ['CreateCanvasScrollBox'] = {
    {name='CreateCanvasScrollBox', count=4, confidence=0.80, sample='--signature: CreateCanvasScrollBox(parentFrame, displayFrame, frameName)'},
  },
  ['SetParameters'] = {
    {name='SetParameters', count=3, confidence=0.60, sample='--parameter1 and parameter2 are set with self:SetParameters(param1, param2)'},
  },
  ['SetEnterFunction'] = {
    {name='SetEnterFunction', count=1, confidence=0.20, sample='function TextEntryMetaFunctions:SetEnterFunction(func, param1, param2)'},
  },
  ['SelectAll'] = {
    {name='SelectAll', count=2, confidence=0.40, sample='function TextEntryMetaFunctions:SelectAll()'},
  },
  ['SetNext'] = {
    {name='SetNext', count=1, confidence=0.20, sample='function TextEntryMetaFunctions:SetNext(nextbox)'},
  },
  ['SetCommitFunction'] = {
    {name='SetCommitFunction', count=2, confidence=0.40, sample='function TextEntryMetaFunctions:SetCommitFunction(func)'},
  },
  ['IgnoreNextCallback'] = {
    {name='IgnoreNextCallback', count=1, confidence=0.20, sample='function TextEntryMetaFunctions:IgnoreNextCallback()'},
  },
  ['RunHooksForWidget'] = {
    {name='RunHooksForWidget', count=73, confidence=1.00, sample='local kill = object:RunHooksForWidget("OnEnter", textentry, object)'},
  },
  ['RunNextTick'] = {
    {name='Schedules.RunNextTick', count=3, confidence=0.60, sample='detailsFramework.Schedules.RunNextTick(function() object.ignoreNextCallback = nil end)'},
  },
  ['OnEnterPressed'] = {
    {name='OnEnterPressed', count=2, confidence=0.40, sample='OnEnterPressed(textentry, false)'},
  },
  ['ParseTemplate'] = {
    {name='ParseTemplate', count=8, confidence=1.00, sample='template = detailsFramework:ParseTemplate(self.type, template) --"textentry"'},
  },
  ['GetParentName'] = {
    {name='GetParentName', count=10, confidence=1.00, sample='local parentName = detailsFramework:GetParentName(parent)'},
  },
  ['CreateSearchBox'] = {
    {name='CreateSearchBox', count=2, confidence=0.40, sample='function detailsFramework:CreateSearchBox(parent, callback)'},
  },
  ['GetLastWord'] = {
    {name='GetLastWord', count=4, confidence=0.80, sample='capsule:GetLastWord()'},
  },
  ['IsMultiLine'] = {
    {name='IsMultiLine', count=1, confidence=0.20, sample='if (editboxWidget:IsMultiLine()) then'},
  },
  ['OptimizeAutoCompleteTable'] = {
    {name='OptimizeAutoCompleteTable', count=1, confidence=0.20, sample='OptimizeAutoCompleteTable (capsule, wordList)'},
  },
  ['SetAsAutoComplete'] = {
    {name='SetAsAutoComplete', count=8, confidence=1.00, sample='function TextEntryMetaFunctions:SetAsAutoComplete(poolName, poolTable, shouldOptimize)'},
  },
  ['GetAuraByName'] = {
    {name='GetAuraByName', count=1, confidence=0.20, sample='function DF:GetAuraByName(unit, spellName, isDebuff)'},
  },
  ['GetSpellCaches'] = {
    {name='GetSpellCaches', count=2, confidence=0.40, sample='function DF:GetSpellCaches()'},
  },
  ['UnloadSpellCache'] = {
    {name='UnloadSpellCache', count=1, confidence=0.20, sample='function DF:UnloadSpellCache()'},
  },
  ['LoadSpellCache'] = {
    {name='LoadSpellCache', count=7, confidence=1.00, sample='function DF:LoadSpellCache(hashMap, indexTable, allSpellsSameName)'},
  },
  ['LazyExecute'] = {
    {name='Schedules.LazyExecute', count=3, confidence=0.60, sample='detailsFramework.Schedules.LazyExecute(lazyLoadAllSpells, payload, iterations)'},
    {name='LazyExecute', count=3, confidence=0.60, sample='schedules.LazyExecute(lazyLOESSUpdate, payload, 999, onEndLazyExecution)'},
    {name='DetailsFramework.Schedules.LazyExecute', count=1, confidence=0.20, sample='assert(type(callback) == "function", "DetailsFramework.Schedules.LazyExecute() param #1 'callback' must be a function.")'},
  },
  ['CreateAuraConfigPanel'] = {
    {name='CreateAuraConfigPanel', count=1, confidence=0.20, sample='function DF:CreateAuraConfigPanel(parent, name, db, changeCallback, options, texts)'},
  },
  ['CreateAuraScrollBox'] = {
    {name='CreateAuraScrollBox', count=5, confidence=1.00, sample='local debuffTrackedAuraScrollBox = detailsFramework:CreateAuraScrollBox(auraPanel_Auto, "$parentDebuffTracked", newAuraPanel.db.aura_tracker.debuff_tracked, onAuraRemoveCallback, options)'},
  },
  ['GetTitleFontString'] = {
    {name='GetTitleFontString', count=5, confidence=1.00, sample='buffTrackedAuraScrollBox:GetTitleFontString():SetText(newAuraPanel.LocTexts.BUFFS_TRACKED)'},
  },
  ['GetData'] = {
    {name='GetData', count=10, confidence=1.00, sample='local data = self:GetParent():GetParent():GetData()'},
  },
  ['GetAllPlayerSpells'] = {
    {name='GetAllPlayerSpells', count=2, confidence=0.40, sample='function DF:GetAllPlayerSpells(include_lower_case)'},
  },
  ['SetAutoCompleteWithSpells'] = {
    {name='SetAutoCompleteWithSpells', count=1, confidence=0.20, sample='function DF:SetAutoCompleteWithSpells(textentry)'},
  },
  ['CoreDispatch'] = {
    {name='CoreDispatch', count=14, confidence=1.00, sample='detailsFramework:CoreDispatch((frameWidget:GetName() or "Button") .. ":__call()", self.func, frameWidget, "LeftButton", self.param1, self.param2)'},
  },
  ['SetButtonTexture'] = {
    {name='SetButtonTexture', count=6, confidence=1.00, sample='return detailsFramework:SetButtonTexture(object, value, 0, 1, 0, 1)'},
  },
  ['ParseTexture'] = {
    {name='ParseTexture', count=5, confidence=1.00, sample='texture, width, height, left, right, top, bottom, red, green, blue, alpha = detailsFramework:ParseTexture(texture, width, height, left, right, top, bottom, red, green, blue, alpha)'},
  },
  ['IsHtmlColor'] = {
    {name='IsHtmlColor', count=6, confidence=1.00, sample='elseif (detailsFramework:IsHtmlColor(texture)) then'},
  },
  ['SetIconFilterMode'] = {
    {name='SetIconFilterMode', count=1, confidence=0.20, sample='function ButtonMetaFunctions:SetIconFilterMode(filterMode)'},
  },
  ['Exec'] = {
    {name='Exec', count=2, confidence=0.40, sample='function ButtonMetaFunctions:Exec()'},
  },
  ['RightClick'] = {
    {name='RightClick', count=2, confidence=0.40, sample='function ButtonMetaFunctions:RightClick()'},
  },
  ['SetTextWithLocTableWithDefault'] = {
    {name='Language.SetTextWithLocTableWithDefault', count=1, confidence=0.20, sample='detailsFramework.Language.SetTextWithLocTableWithDefault(buttonObject.button.text, locTable, text)'},
    {name='SetTextWithLocTableWithDefault', count=2, confidence=0.40, sample='SetTextWithLocTableWithDefault(object, locTable, defaultText)'},
    {name='DF.Language.SetTextWithLocTableWithDefault', count=1, confidence=0.20, sample='function DF.Language.SetTextWithLocTableWithDefault(object, locTable, defaultText)'},
  },
  ['CreateColorPickButton'] = {
    {name='CreateColorPickButton', count=2, confidence=0.40, sample='function detailsFramework:CreateColorPickButton(parent, name, member, callback, alpha, buttonTemplate)'},
  },
  ['SetButtonVertexColor'] = {
    {name='SetButtonVertexColor', count=1, confidence=0.20, sample='function detailsFramework:SetButtonVertexColor(button, red, green, blue, alpha)'},
  },
  ['CreateTabButton'] = {
    {name='CreateTabButton', count=2, confidence=0.40, sample='function detailsFramework:CreateTabButton(parent, frameName)'},
  },
  ['SetShowCloseButton'] = {
    {name='SetShowCloseButton', count=1, confidence=0.20, sample='frame.TabButtons[2]:SetShowCloseButton(true)'},
  },
  ['GetAllEncountersFromInstance'] = {
    {name='Ejc.GetAllEncountersFromInstance', count=2, confidence=0.40, sample='function Ejc.GetAllEncountersFromInstance(id)'},
    {name='DF.Ejc.GetAllEncountersFromInstance', count=1, confidence=0.20, sample='local allEncounters = DF.Ejc.GetAllEncountersFromInstance(instanceId)'},
  },
  ['GetAllRaidInstances'] = {
    {name='Ejc.GetAllRaidInstances', count=1, confidence=0.20, sample='function Ejc.GetAllRaidInstances()'},
    {name='DF.Ejc.GetAllRaidInstances', count=2, confidence=0.40, sample='local allInstances = DF.Ejc.GetAllRaidInstances()'},
  },
  ['GetAllDungeonInstances'] = {
    {name='Ejc.GetAllDungeonInstances', count=1, confidence=0.20, sample='function Ejc.GetAllDungeonInstances()'},
  },
  ['EJ_SetDifficulty'] = {
    {name='EJ_SetDifficulty', count=1, confidence=0.20, sample='EJ_SetDifficulty(difficulty or 16)'},
  },
  ['EJ_SelectEncounter'] = {
    {name='EJ_SelectEncounter', count=1, confidence=0.20, sample='EJ_SelectEncounter(journalEncounterId)'},
  },
  ['MsgWarning'] = {
    {name='MsgWarning', count=3, confidence=0.60, sample='function DF:MsgWarning(msg, ...)'},
  },
  ['IsDragonflightOrBelow'] = {
    {name='DF.IsDragonflightOrBelow', count=1, confidence=0.20, sample='function DF.IsDragonflightOrBelow()'},
  },
  ['GetRoleByClassicTalentTree'] = {
    {name='GetRoleByClassicTalentTree', count=2, confidence=0.40, sample='function DF:GetRoleByClassicTalentTree()'},
  },
  ['ConvertRole'] = {
    {name='ConvertRole', count=1, confidence=0.20, sample='function DF:ConvertRole(value, valueType)'},
  },
  ['PrintVersion'] = {
    {name='PrintVersion', count=1, confidence=0.20, sample='function DF:PrintVersion()'},
  },
  ['GetFrameworkFolder'] = {
    {name='GetFrameworkFolder', count=1, confidence=0.20, sample='function DF:GetFrameworkFolder()'},
  },
  ['SetFrameworkDebugState'] = {
    {name='SetFrameworkDebugState', count=1, confidence=0.20, sample='function DF:SetFrameworkDebugState(state)'},
  },
  ['FadeFrame'] = {
    {name='FadeFrame', count=40, confidence=1.00, sample='function DF:FadeFrame(frame, t)'},
  },
  ['RandomBool'] = {
    {name='RandomBool', count=1, confidence=0.20, sample='function DF:RandomBool(odds)'},
  },
  ['SetTexCoordFromAtlasInfo'] = {
    {name='SetTexCoordFromAtlasInfo', count=1, confidence=0.20, sample='function DF:SetTexCoordFromAtlasInfo(texture, atlasInfo)'},
  },
  ['GetParentKeyPath'] = {
    {name='GetParentKeyPath', count=1, confidence=0.20, sample='function DF:GetParentKeyPath(object)'},
  },
  ['GetParentKey'] = {
    {name='GetParentKey', count=3, confidence=0.60, sample='local parentKey = object:GetParentKey()'},
  },
  ['GetParentNamePath'] = {
    {name='GetParentNamePath', count=1, confidence=0.20, sample='function DF:GetParentNamePath(object)'},
  },
  ['FormatNumber'] = {
    {name='DF.FormatNumber', count=2, confidence=0.40, sample='function DF.FormatNumber(number)'},
    {name='FormatNumber', count=3, confidence=0.60, sample='self ["dpsamt" .. math.abs(i-9)]:SetText(detailsFramework.FormatNumber (piece*i))'},
  },
  ['GroupIterator'] = {
    {name='GroupIterator', count=1, confidence=0.20, sample='function DF:GroupIterator(callback, ...)'},
  },
  ['GetSizeFromPercent'] = {
    {name='GetSizeFromPercent', count=1, confidence=0.20, sample='function DF:GetSizeFromPercent(uiObject, percent)'},
  },
  ['CleanUpName'] = {
    {name='CleanUpName', count=3, confidence=0.60, sample='function DF:CleanUpName(name)'},
  },
  ['RemoveRealName'] = {
    {name='RemoveRealName', count=5, confidence=1.00, sample='function DF:RemoveRealName(name)'},
  },
  ['SetFontDefault'] = {
    {name='SetFontDefault', count=3, confidence=0.60, sample='DF:SetFontDefault(fontString)'},
  },
  ['SetFontShadow'] = {
    {name='SetFontShadow', count=1, confidence=0.20, sample='function DF:SetFontShadow(fontString, r, g, b, a, x, y)'},
  },
  ['GetShadowOffset'] = {
    {name='GetShadowOffset', count=3, confidence=0.60, sample='local offSetX, offSetY = fontString:GetShadowOffset()'},
  },
  ['SetShadowOffset'] = {
    {name='SetShadowOffset', count=5, confidence=1.00, sample='fontString:SetShadowOffset(x, y)'},
  },
  ['SetFontRotation'] = {
    {name='SetFontRotation', count=3, confidence=0.60, sample='function DF:SetFontRotation(fontString, degrees) --deprecated, use fontString:SetRotation(degrees) | retail use fontString:SetRotation(math.rad(degrees))'},
  },
  ['SetSmoothProgress'] = {
    {name='SetSmoothProgress', count=2, confidence=0.40, sample='fontString.__rotationAnimation.rotator:SetSmoothProgress(1)'},
  },
  ['Pause'] = {
    {name='Pause', count=2, confidence=0.40, sample='fontString.__rotationAnimation:Pause()'},
  },
  ['AddColorToText'] = {
    {name='AddColorToText', count=1, confidence=0.20, sample='function DF:AddColorToText(text, color) --wrap text with a color'},
  },
  ['FormatColor'] = {
    {name='FormatColor', count=9, confidence=1.00, sample='local hexColor = DF:FormatColor("hex", r, g, b)'},
  },
  ['GetClassColorByClassId'] = {
    {name='GetClassColorByClassId', count=1, confidence=0.20, sample='function DF:GetClassColorByClassId(classId)'},
  },
  ['AddClassIconToString'] = {
    {name='AddClassIconToString', count=1, confidence=0.20, sample='function DF:AddClassIconToString(text, engClass, size)'},
  },
  ['AddSpecIconToString'] = {
    {name='AddSpecIconToString', count=1, confidence=0.20, sample='function DF:AddSpecIconToString(text, specId, size)'},
  },
  ['CreateAtlas'] = {
    {name='CreateAtlas', count=4, confidence=0.80, sample='---create a table with information about a texture (deprecated, use: DetailsFramework:CreateAtlas())'},
  },
  ['CleanTruncateUTF8String'] = {
    {name='CleanTruncateUTF8String', count=5, confidence=1.00, sample='text = DF:CleanTruncateUTF8String(text)'},
  },
  ['TruncateTextSafeBinarySearch'] = {
    {name='TruncateTextSafeBinarySearch', count=1, confidence=0.20, sample='function DF:TruncateTextSafeBinarySearch(fontString, maxWidth)'},
  },
  ['GetUnboundedStringWidth'] = {
    {name='GetUnboundedStringWidth', count=5, confidence=1.00, sample='if fontString:GetUnboundedStringWidth() > maxWidth then'},
  },
  ['TruncateTextBinarySearch'] = {
    {name='TruncateTextBinarySearch', count=1, confidence=0.20, sample='function DF:TruncateTextBinarySearch(fontString, maxWidth)'},
  },
  ['TruncateNumber'] = {
    {name='TruncateNumber', count=5, confidence=1.00, sample='function DF:TruncateNumber(number, fractionDigits)'},
  },
  ['SortOrder1'] = {
    {name='DF.SortOrder1', count=1, confidence=0.20, sample='function DF.SortOrder1(t1, t2)'},
  },
  ['SortOrder2'] = {
    {name='DF.SortOrder2', count=1, confidence=0.20, sample='function DF.SortOrder2(t1, t2)'},
  },
  ['SortOrder3'] = {
    {name='DF.SortOrder3', count=1, confidence=0.20, sample='function DF.SortOrder3(t1, t2)'},
  },
  ['SortOrder1R'] = {
    {name='DF.SortOrder1R', count=1, confidence=0.20, sample='function DF.SortOrder1R(t1, t2)'},
  },
  ['SortOrder2R'] = {
    {name='DF.SortOrder2R', count=1, confidence=0.20, sample='function DF.SortOrder2R(t1, t2)'},
  },
  ['SortOrder3R'] = {
    {name='DF.SortOrder3R', count=1, confidence=0.20, sample='function DF.SortOrder3R(t1, t2)'},
  },
  ['GetSpellBookSpells'] = {
    {name='GetSpellBookSpells', count=1, confidence=0.20, sample='function DF:GetSpellBookSpells()'},
  },
  ['GetFlyoutInfo'] = {
    {name='GetFlyoutInfo', count=2, confidence=0.40, sample='local _, _, numSlots, isKnown = GetFlyoutInfo(spellId)'},
  },
  ['GetFlyoutSlotInfo'] = {
    {name='GetFlyoutSlotInfo', count=2, confidence=0.40, sample='local spellID, overrideSpellID, isKnown = GetFlyoutSlotInfo(spellId, k)'},
  },
  ['GetAllTalents'] = {
    {name='GetAllTalents', count=3, confidence=0.60, sample='function DF:GetAllTalents()'},
  },
  ['GetAvailableSpells'] = {
    {name='GetAvailableSpells', count=2, confidence=0.40, sample='function DF:GetAvailableSpells()'},
  },
  ['CreatePunchAnimation'] = {
    {name='CreatePunchAnimation', count=1, confidence=0.20, sample='function DF:CreatePunchAnimation(frame, scale)'},
  },
  ['CheckPoints'] = {
    {name='CheckPoints', count=8, confidence=1.00, sample='function DF:CheckPoints(point1, point2, point3, point4, point5, object)'},
  },
  ['ConvertAnchorPointToInside'] = {
    {name='ConvertAnchorPointToInside', count=1, confidence=0.20, sample='function DF:ConvertAnchorPointToInside(anchorPoint)'},
  },
  ['ConvertAnchorOffsets'] = {
    {name='ConvertAnchorOffsets', count=1, confidence=0.20, sample='function DF:ConvertAnchorOffsets(widget, referenceWidget, anchorTable, newAnchorSide)'},
  },
  ['GetNinePoints'] = {
    {name='DF.Math.GetNinePoints', count=3, confidence=0.60, sample='local ninePoints = DF.Math.GetNinePoints(widget)'},
    {name='Math.GetNinePoints', count=2, confidence=0.40, sample='local ninePoints = detailsFramework.Math.GetNinePoints(object)'},
  },
  ['CreateColorTable'] = {
    {name='CreateColorTable', count=11, confidence=1.00, sample='function DF:CreateColorTable(r, g, b, a)'},
  },
  ['GetColorBrightness'] = {
    {name='GetColorBrightness', count=1, confidence=0.20, sample='function DF:GetColorBrightness(r, g, b)'},
  },
  ['GetColorHue'] = {
    {name='GetColorHue', count=1, confidence=0.20, sample='function DF:GetColorHue(r, g, b)'},
  },
  ['GetColor'] = {
    {name='GetColor', count=7, confidence=1.00, sample='return colorTable:GetColor()'},
  },
  ['ShowTutorialAlertFrame'] = {
    {name='ShowTutorialAlertFrame', count=1, confidence=0.20, sample='function DF:ShowTutorialAlertFrame(maintext, desctext, clickfunc)'},
  },
  ['MicroButtonAlert_SetText'] = {
    {name='MicroButtonAlert_SetText', count=1, confidence=0.20, sample='MicroButtonAlert_SetText (TutorialAlertFrame, alert.label)'},
  },
  ['CreateOptionsFrame'] = {
    {name='CreateOptionsFrame', count=1, confidence=0.20, sample='function DF:CreateOptionsFrame(name, title, template) --deprecated?'},
  },
  ['GetBestFontPathForLanguage'] = {
    {name='GetBestFontPathForLanguage', count=1, confidence=0.20, sample='function DF:GetBestFontPathForLanguage(languageId)'},
  },
  ['IsLatinLanguage'] = {
    {name='IsLatinLanguage', count=3, confidence=0.60, sample='function DF:IsLatinLanguage(languageId)'},
  },
  ['AddMemberForWidget'] = {
    {name='AddMemberForWidget', count=1, confidence=0.20, sample='function DF:AddMemberForWidget(widgetName, memberType, memberName, func)'},
  },
  ['OpenInterfaceProfile'] = {
    {name='OpenInterfaceProfile', count=1, confidence=0.20, sample='function DF:OpenInterfaceProfile()'},
  },
  ['GetCategoryList'] = {
    {name='GetCategoryList', count=1, confidence=0.20, sample='local category = SettingsPanel:GetCategoryList():GetCategory(self.OptionsFrame1.name)'},
  },
  ['SelectCategory'] = {
    {name='SelectCategory', count=2, confidence=0.40, sample='SettingsPanel:SelectCategory(category)'},
  },
  ['HasSubcategories'] = {
    {name='HasSubcategories', count=1, confidence=0.20, sample='if self.OptionsFrame2 and category:HasSubcategories() then'},
  },
  ['GetSubcategories'] = {
    {name='GetSubcategories', count=1, confidence=0.20, sample='for _, subcategory in pairs(category:GetSubcategories()) do'},
  },
  ['InterfaceOptionsFrame_OpenToCategory'] = {
    {name='InterfaceOptionsFrame_OpenToCategory', count=6, confidence=1.00, sample='InterfaceOptionsFrame_OpenToCategory (self.OptionsFrame1)'},
  },
  ['CreateControlPoint'] = {
    {name='CreateControlPoint', count=1, confidence=0.20, sample='local newControlPoint = anim:CreateControlPoint()'},
  },
  ['SetCurveType'] = {
    {name='SetCurveType', count=1, confidence=0.20, sample='anim:SetCurveType(arg4 or "SMOOTH")'},
  },
  ['GetControlPoints'] = {
    {name='GetControlPoints', count=1, confidence=0.20, sample='newControlPoint:SetOrder(#anim:GetControlPoints())'},
  },
  ['SetStartColor'] = {
    {name='SetStartColor', count=1, confidence=0.20, sample='anim:SetStartColor(CreateColor(r1, g1, b1, a1))'},
  },
  ['CreateColor'] = {
    {name='CreateColor', count=2, confidence=0.40, sample='anim:SetStartColor(CreateColor(r1, g1, b1, a1))'},
  },
  ['SetEndColor'] = {
    {name='SetEndColor', count=1, confidence=0.20, sample='anim:SetEndColor(CreateColor(r2, g2, b2, a2))'},
  },
  ['CreateFadeAnimation'] = {
    {name='CreateFadeAnimation', count=1, confidence=0.20, sample='function DF:CreateFadeAnimation(UIObject, fadeInTime, fadeOutTime, fadeInAlpha, fadeOutAlpha)'},
  },
  ['IsObjectType'] = {
    {name='IsObjectType', count=2, confidence=0.40, sample='if (UIObject:IsObjectType("FontString") or UIObject:IsObjectType("Texture")) then'},
  },
  ['RegisterFrame'] = {
    {name='FrameshakeUpdateFrame.RegisterFrame', count=1, confidence=0.20, sample='FrameshakeUpdateFrame.RegisterFrame (parent)'},
  },
  ['GetAnimations'] = {
    {name='GetAnimations', count=2, confidence=0.40, sample='local anim1 = self.ProcLoop:GetAnimations()'},
  },
  ['CreateAnts'] = {
    {name='CreateAnts', count=2, confidence=0.40, sample='function DF:CreateAnts(parent, antTable, leftOffset, rightOffset, topOffset, bottomOffset)'},
  },
  ['AnimateTexCoords'] = {
    {name='AnimateTexCoords', count=1, confidence=0.20, sample='AnimateTexCoords(texture, self.AntTable.TextureWidth, self.AntTable.TextureHeight, self.AntTable.TexturePartsWidth, self.AntTable.TexturePartsHeight, self.AntTable.AmountParts, deltaTime, self.AntTable.Throttle or 0.025)'},
  },
  ['SetBorderAlpha'] = {
    {name='SetBorderAlpha', count=1, confidence=0.20, sample='---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)'},
  },
  ['SetBorderColor'] = {
    {name='SetBorderColor', count=2, confidence=0.40, sample='---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)'},
  },
  ['SetLayerVisibility'] = {
    {name='SetLayerVisibility', count=1, confidence=0.20, sample='---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)'},
  },
  ['CreateBorder'] = {
    {name='CreateBorder', count=6, confidence=1.00, sample='function DF:CreateBorder(parent, alpha1, alpha2, alpha3)'},
  },
  ['SetIgnoreParentScale'] = {
    {name='SetIgnoreParentScale', count=1, confidence=0.20, sample='border:SetIgnoreParentScale(true)'},
  },
  ['CreateBorderSolid'] = {
    {name='CreateBorderSolid', count=1, confidence=0.20, sample='function DF:CreateBorderSolid (parent, size)'},
  },
  ['CreateBorderWithSpread'] = {
    {name='CreateBorderWithSpread', count=1, confidence=0.20, sample='function DF:CreateBorderWithSpread(parent, alpha1, alpha2, alpha3, size, spread)'},
  },
  ['GetCurrentClassName'] = {
    {name='GetCurrentClassName', count=1, confidence=0.20, sample='function DF:GetCurrentClassName()'},
  },
  ['GetCurrentSpecName'] = {
    {name='GetCurrentSpecName', count=1, confidence=0.20, sample='function DF:GetCurrentSpecName()'},
  },
  ['GetCurrentSpec'] = {
    {name='GetCurrentSpec', count=2, confidence=0.40, sample='function DF:GetCurrentSpec()'},
  },
  ['GetCurrentSpecId'] = {
    {name='GetCurrentSpecId', count=1, confidence=0.20, sample='function DF:GetCurrentSpecId()'},
  },
  ['GetClassSpecIDs'] = {
    {name='GetClassSpecIDs', count=4, confidence=0.80, sample='function DF:GetClassSpecIDs(engClass)'},
  },
  ['GetClassSpecIds'] = {
    {name='GetClassSpecIds', count=1, confidence=0.20, sample='function DF:GetClassSpecIds(engClass) --naming conventions'},
  },
  ['ClassTalentFrame_LoadUI'] = {
    {name='ClassTalentFrame_LoadUI', count=1, confidence=0.20, sample='ClassTalentFrame_LoadUI()'},
  },
  ['WriteLoadoutHeader'] = {
    {name='WriteLoadoutHeader', count=1, confidence=0.20, sample='DF.TalentExporter:WriteLoadoutHeader(exportStream, serializationVersion, currentSpecID, treeHash)'},
  },
  ['WriteLoadoutContent'] = {
    {name='WriteLoadoutContent', count=1, confidence=0.20, sample='DF.TalentExporter:WriteLoadoutContent(exportStream, configId, treeInfo.ID)'},
  },
  ['GetExportString'] = {
    {name='GetExportString', count=1, confidence=0.20, sample='return exportStream:GetExportString()'},
  },
  ['Framework'] = {
    {name='Framework', count=1, confidence=0.20, sample='--local errortext = "D!Framework (" .. context .. ") error: " .. result1 .. "\n====================\n" .. stack .. "\n====================\n"'},
  },
  ['GetClassIdByFileName'] = {
    {name='GetClassIdByFileName', count=1, confidence=0.20, sample='function DF:GetClassIdByFileName(fileName)'},
  },
  ['GetClassList'] = {
    {name='GetClassList', count=3, confidence=0.60, sample='function DF:GetClassList()'},
  },
  ['GetArmorIconByArmorSlot'] = {
    {name='GetArmorIconByArmorSlot', count=1, confidence=0.20, sample='function DF:GetArmorIconByArmorSlot(equipSlotId)'},
  },
  ['GetCharacterRaceList'] = {
    {name='GetCharacterRaceList', count=2, confidence=0.40, sample='function DF:GetCharacterRaceList()'},
  },
  ['GetRaceInfo'] = {
    {name='C_CreatureInfo.GetRaceInfo', count=1, confidence=0.20, sample='local raceInfo = C_CreatureInfo.GetRaceInfo(i)'},
  },
  ['GetRaceInfoByID'] = {
    {name='C_AlliedRaces.GetRaceInfoByID', count=1, confidence=0.20, sample='local alliedRaceInfo = C_AlliedRaces.GetRaceInfoByID(i)'},
  },
  ['GetCharacterTalents'] = {
    {name='GetCharacterTalents', count=6, confidence=1.00, sample='function DF:GetCharacterTalents(bOnlySelected, bOnlySelectedHash)'},
  },
  ['GetCharacterPvPTalents'] = {
    {name='GetCharacterPvPTalents', count=6, confidence=1.00, sample='function DF:GetCharacterPvPTalents(onlySelected, onlySelectedHash)'},
  },
  ['GetPvpTalentSlotInfo'] = {
    {name='C_SpecializationInfo.GetPvpTalentSlotInfo', count=1, confidence=0.20, sample='local slotInfo = C_SpecializationInfo.GetPvpTalentSlotInfo (i)'},
  },
  ['GetGroupTypes'] = {
    {name='GetGroupTypes', count=2, confidence=0.40, sample='function DF:GetGroupTypes()'},
  },
  ['GetRoleTypes'] = {
    {name='GetRoleTypes', count=2, confidence=0.40, sample='function DF:GetRoleTypes()'},
  },
  ['GetRoleTCoordsAndTexture'] = {
    {name='GetRoleTCoordsAndTexture', count=1, confidence=0.20, sample='function DF:GetRoleTCoordsAndTexture(roleID)'},
  },
  ['GetPlayerRole'] = {
    {name='GetPlayerRole', count=1, confidence=0.20, sample='function DF:GetPlayerRole()'},
  },
  ['GetCLEncounterIDs'] = {
    {name='GetCLEncounterIDs', count=2, confidence=0.40, sample='function DF:GetCLEncounterIDs()'},
  },
  ['IsSpecFromClass'] = {
    {name='IsSpecFromClass', count=1, confidence=0.20, sample='function DF:IsSpecFromClass(class, specId)'},
  },
  ['GetClassSpecs'] = {
    {name='GetClassSpecs', count=1, confidence=0.20, sample='function DF:GetClassSpecs(class)'},
  },
  ['GetSpecListFromClass'] = {
    {name='GetSpecListFromClass', count=1, confidence=0.20, sample='function DF:GetSpecListFromClass(class)'},
  },
  ['GetSpellsForRangeCheck'] = {
    {name='GetSpellsForRangeCheck', count=1, confidence=0.20, sample='function DF:GetSpellsForRangeCheck()'},
  },
  ['GetRangeCheckSpellForSpec'] = {
    {name='GetRangeCheckSpellForSpec', count=1, confidence=0.20, sample='function DF:GetRangeCheckSpellForSpec(specId)'},
  },
  ['CatchString'] = {
    {name='DF.CatchString', count=1, confidence=0.20, sample='function DF.CatchString(...)'},
  },
  ['GetBattlegroundSize'] = {
    {name='GetBattlegroundSize', count=1, confidence=0.20, sample='function DF:GetBattlegroundSize(instanceInfoMapId)'},
  },
  ['GetExecuteRange'] = {
    {name='DF.GetExecuteRange', count=1, confidence=0.20, sample='function DF.GetExecuteRange(unitId)'},
  },
  ['GetWorldDeltaSeconds'] = {
    {name='GetWorldDeltaSeconds', count=2, confidence=0.40, sample='function GetWorldDeltaSeconds()'},
  },
  ['RegisterScriptComm'] = {
    {name='RegisterScriptComm', count=2, confidence=0.40, sample='--DetailsFramework:RegisterScriptComm (ID, function(sourcePlayerName, ...) end)'},
  },
  ['SendScriptComm'] = {
    {name='SendScriptComm', count=2, confidence=0.40, sample='--DetailsFramework:SendScriptComm (ID, ...)'},
  },
  ['OnReceiveScriptComm'] = {
    {name='DF.OnReceiveScriptComm', count=1, confidence=0.20, sample='function DF.OnReceiveScriptComm (...)'},
  },
  ['MakeFunctionSecure'] = {
    {name='MakeFunctionSecure', count=2, confidence=0.40, sample='DF:MakeFunctionSecure(func)'},
  },
  ['IsUnitTapDenied'] = {
    {name='IsUnitTapDenied', count=1, confidence=0.20, sample='function DF:IsUnitTapDenied (unitId)'},
  },
  ['UnitIsTapDenied'] = {
    {name='UnitIsTapDenied', count=2, confidence=0.40, sample='return unitId and not UnitPlayerControlled(unitId) and UnitIsTapDenied(unitId)'},
  },
  ['SetOnReset'] = {
    {name='SetOnReset', count=2, confidence=0.40, sample='---@field SetCallbackOnReleaseAll fun(self:df_pool, func:fun(object:table)) --alias for :SetOnReset()'},
  },
  ['SetOnAcquire'] = {
    {name='SetOnAcquire', count=1, confidence=0.20, sample='---@field SetCallbackOnGet fun(self:df_pool, func:fun(object:table)) --alias for :SetOnAcquire()'},
  },
  ['PoolConstructor'] = {
    {name='PoolConstructor', count=1, confidence=0.20, sample='newPool:PoolConstructor(func, ...)'},
  },
  ['CreateObjectPool'] = {
    {name='CreateObjectPool', count=1, confidence=0.20, sample='function DF:CreateObjectPool(func, ...)'},
  },
  ['RegisterEncounterPhaseChange'] = {
    {name='RegisterEncounterPhaseChange', count=2, confidence=0.40, sample='function DF:RegisterEncounterPhaseChange(func, ...)'},
  },
  ['UnregisterEncounterPhaseChange'] = {
    {name='UnregisterEncounterPhaseChange', count=1, confidence=0.20, sample='function DF:UnregisterEncounterPhaseChange(func)'},
  },
  ['RegisterEncounterTimeBar'] = {
    {name='RegisterEncounterTimeBar', count=2, confidence=0.40, sample='function DF:RegisterEncounterTimeBar(func, ...)'},
  },
  ['Swirls'] = {
    {name='Swirls', count=1, confidence=0.20, sample='table: 0000019DA5382410 BigWigs_StartBar table: 0000019EF3E5B910 443274 Swirls (30) 7.5 538040 false nil'},
  },
  ['UnregisterEncounterTimeBar'] = {
    {name='UnregisterEncounterTimeBar', count=1, confidence=0.20, sample='function DF:UnregisterEncounterTimeBar(func)'},
  },
  ['Concoction'] = {
    {name='Concoction', count=1, confidence=0.20, sample='--table: 0000019DA5382410 BigWigs_StartBar table: 0000019EF3E5B910 441362 Volatile Concoction (14) 20 136227 false nil'},
  },
  ['DebugVisibility'] = {
    {name='DebugVisibility', count=2, confidence=0.40, sample='function DF:DebugVisibility(UIObject)'},
  },
  ['DebugTexture'] = {
    {name='DebugTexture', count=1, confidence=0.20, sample='function DF:DebugTexture(texture, left, right, top, bottom)'},
  },
  ['CreateScrollBar'] = {
    {name='CreateScrollBar', count=1, confidence=0.20, sample='function detailsFramework:CreateScrollBar(master, scrollContainer, x, y)'},
  },
  ['GetShadowColor'] = {
    {name='GetShadowColor', count=3, confidence=0.60, sample='setter = function(widget, value) widget:SetShadowColor(widget:GetShadowColor(), select(2, widget:GetShadowColor()), select(3, widget:GetShadowColor()), value and 0.5 or 0) end'},
  },
  ['GetEditingObject'] = {
    {name='GetEditingObject', count=6, confidence=1.00, sample='local object = self:GetEditingObject()'},
  },
  ['GetAllRegisteredObjects'] = {
    {name='GetAllRegisteredObjects', count=8, confidence=1.00, sample='local registeredObjects = self:GetAllRegisteredObjects()'},
  },
  ['GetOverTheTopFrame'] = {
    {name='GetOverTheTopFrame', count=2, confidence=0.40, sample='local overTheTopFrame = self:GetOverTheTopFrame()'},
  },
  ['GetAnchorFrame'] = {
    {name='GetAnchorFrame', count=3, confidence=0.60, sample='local anchorFrame = self:GetAnchorFrame(i)'},
  },
  ['SetNotInUse'] = {
    {name='SetNotInUse', count=2, confidence=0.40, sample='self:SetNotInUse(anchorFrame)'},
  },
  ['DisableAllAnchors'] = {
    {name='DisableAllAnchors', count=3, confidence=0.60, sample='editorFrame.AnchorFrames:DisableAllAnchors()'},
  },
  ['GetEditingRegisteredObject'] = {
    {name='GetEditingRegisteredObject', count=2, confidence=0.40, sample='local registeredObject = editorFrame:GetEditingRegisteredObject()'},
  },
  ['SetNotInUseForAllAnchors'] = {
    {name='SetNotInUseForAllAnchors', count=1, confidence=0.20, sample='editorFrame.AnchorFrames:SetNotInUseForAllAnchors()'},
  },
  ['PrepareObjectForEditing'] = {
    {name='PrepareObjectForEditing', count=2, confidence=0.40, sample='editorFrame:PrepareObjectForEditing()'},
  },
  ['CreateNineAnchors'] = {
    {name='CreateNineAnchors', count=1, confidence=0.20, sample='editorFrame.AnchorFrames:CreateNineAnchors()'},
  },
  ['OnTickNotMoving'] = {
    {name='OnTickNotMoving', count=1, confidence=0.20, sample='thisMoverFrame.OnTickNotMoving(thisMoverFrame, 0)'},
  },
  ['GetClosestPoint'] = {
    {name='GetClosestPoint', count=2, confidence=0.40, sample='local closestPoint = editorFrame.currentObjectNinePoints:GetClosestPoint(CreateVector2D(startX, startY))'},
    {name='DF.Math.GetClosestPoint', count=1, confidence=0.20, sample='function DF.Math.GetClosestPoint(ninePoints, coordinate)'},
  },
  ['GetObjectById'] = {
    {name='GetObjectById', count=1, confidence=0.20, sample='local objectRegistered = self:GetObjectById(id)'},
  },
  ['EditObjectById'] = {
    {name='EditObjectById', count=2, confidence=0.40, sample='assert(type(objectRegistered) == "table", "EditObjectById() object not found.")'},
  },
  ['EditObject'] = {
    {name='EditObject', count=5, confidence=1.00, sample='self:EditObject(objectRegistered)'},
  },
  ['RefreshMe'] = {
    {name='RefreshMe', count=23, confidence=1.00, sample='self.objectSelector:RefreshMe()'},
  },
  ['GetObjectByIndex'] = {
    {name='GetObjectByIndex', count=2, confidence=0.40, sample='local objectRegistered = self:GetObjectByIndex(index)'},
  },
  ['GetProfileTableFromObject'] = {
    {name='GetProfileTableFromObject', count=2, confidence=0.40, sample='local profileTable = self:GetProfileTableFromObject(registeredObject)'},
  },
  ['GetEditingProfile'] = {
    {name='GetEditingProfile', count=2, confidence=0.40, sample='local profileTable, profileMap = self:GetEditingProfile()'},
  },
  ['GetEditingOptions'] = {
    {name='GetEditingOptions', count=2, confidence=0.40, sample='local editingOptions = self:GetEditingOptions()'},
  },
  ['GetExtraOptions'] = {
    {name='GetExtraOptions', count=1, confidence=0.20, sample='local extraOptions = self:GetExtraOptions()'},
  },
  ['GetOnEditCallback'] = {
    {name='GetOnEditCallback', count=5, confidence=1.00, sample='if (self:GetOnEditCallback()) then'},
  },
  ['StopObjectMovement'] = {
    {name='StopObjectMovement', count=2, confidence=0.40, sample='self:StopObjectMovement()'},
  },
  ['StartObjectMovement'] = {
    {name='StartObjectMovement', count=2, confidence=0.40, sample='self:StartObjectMovement(anchorSettings)'},
  },
  ['SetupAnchorsForObject'] = {
    {name='SetupAnchorsForObject', count=1, confidence=0.20, sample='self.AnchorFrames:SetupAnchorsForObject(anchorSettings)'},
  },
  ['GetOptionsFrame'] = {
    {name='GetOptionsFrame', count=2, confidence=0.40, sample='local optionsFrame = self:GetOptionsFrame()'},
  },
  ['GetCanvasScrollBox'] = {
    {name='GetCanvasScrollBox', count=1, confidence=0.20, sample='local canvasScrollBox = self:GetCanvasScrollBox()'},
  },
  ['UpdateGuideLinesAnchors'] = {
    {name='UpdateGuideLinesAnchors', count=1, confidence=0.20, sample='--self:UpdateGuideLinesAnchors()'},
  },
  ['GetMoverFrames'] = {
    {name='GetMoverFrames', count=3, confidence=0.60, sample='local moverFrames = self:GetMoverFrames()'},
  },
  ['SetValueNoCallback'] = {
    {name='SetValueNoCallback', count=3, confidence=0.60, sample='anchorXSlider:SetValueNoCallback(anchorSettings.x)'},
  },
  ['UpdateProfileTableOnAllRegisteredObjects'] = {
    {name='UpdateProfileTableOnAllRegisteredObjects', count=1, confidence=0.20, sample='assert(type(profileTable) == "table", "UpdateProfileTableOnAllRegisteredObjects() expects a table on #1 parameter.")'},
  },
  ['GetObjectSelector'] = {
    {name='GetObjectSelector', count=3, confidence=0.60, sample='local objectSelector = self:GetObjectSelector()'},
  },
  ['RegisterObjectToEdit'] = {
    {name='RegisterObjectToEdit', count=6, confidence=1.00, sample='assert(type(object) == "table", "RegisterObjectToEdit() expects an UIObject on #1 parameter.")'},
  },
  ['GetEditingObjectIndex'] = {
    {name='GetEditingObjectIndex', count=1, confidence=0.20, sample='local objectIndex = self:GetEditingObjectIndex()'},
  },
  ['EditObjectByIndex'] = {
    {name='EditObjectByIndex', count=1, confidence=0.20, sample='self:EditObjectByIndex(objectIndex)'},
  },
  ['CreateEditor'] = {
    {name='CreateEditor', count=1, confidence=0.20, sample='function detailsFramework:CreateEditor(parent, name, options)'},
  },
  ['BuildOptionsTable'] = {
    {name='BuildOptionsTable', count=22, confidence=1.00, sample='editorFrame:BuildOptionsTable(editorDefaultOptions, options)'},
    {name='OptionsFunctions.BuildOptionsTable', count=2, confidence=0.40, sample='detailsFramework.OptionsFunctions.BuildOptionsTable (optionsTable, default_datascroll_options, options)'},
  },
  ['CreateObjectSelectionList'] = {
    {name='CreateObjectSelectionList', count=1, confidence=0.20, sample='local objectSelector = editorFrame:CreateObjectSelectionList(scrollWidth, scrollHeight, scrollLinesAmount, scrollLineHeight)'},
  },
  ['CreateAnchorFrames'] = {
    {name='CreateAnchorFrames', count=1, confidence=0.20, sample='editorFrame:CreateAnchorFrames()'},
  },
  ['CreateMoverFrames'] = {
    {name='CreateMoverFrames', count=1, confidence=0.20, sample='editorFrame.moverFrames = editorFrame:CreateMoverFrames()'},
  },
  ['CreateMoverGuideLines'] = {
    {name='CreateMoverGuideLines', count=1, confidence=0.20, sample='editorFrame:CreateMoverGuideLines()'},
  },
  ['IsLocTable'] = {
    {name='Language.IsLocTable', count=3, confidence=0.60, sample='if (detailsFramework.Language.IsLocTable(tooltip)) then'},
    {name='IsLocTable', count=1, confidence=0.20, sample='["IsLocTable"] = "IsLocTable(locTable)",'},
    {name='DF.Language.IsLocTable', count=7, confidence=1.00, sample='function DF.Language.IsLocTable(locTable)'},
  },
  ['RegisterTableKeyWithLocTable'] = {
    {name='Language.RegisterTableKeyWithLocTable', count=1, confidence=0.20, sample='detailsFramework.Language.RegisterTableKeyWithLocTable(self, "have_tooltip", locTable)'},
    {name='RegisterTableKeyWithLocTable', count=2, confidence=0.40, sample='RegisterTableKeyWithLocTable(table, key, locTable[, silence])'},
    {name='DF.Language.RegisterTableKeyWithLocTable', count=1, confidence=0.20, sample='function DF.Language.RegisterTableKeyWithLocTable(table, key, locTable, silence)'},
  },
  ['IsOwner'] = {
    {name='IsOwner', count=2, confidence=0.40, sample='if (GameCooltip:IsOwner(getFrame(self))) then'},
  },
  ['GetDrawLayer'] = {
    {name='GetDrawLayer', count=3, confidence=0.60, sample='local drawLayer = object:GetDrawLayer()'},
  },
  ['ResetDataIndex'] = {
    {name='ResetDataIndex', count=3, confidence=0.60, sample='self:ResetDataIndex()'},
  },
  ['GetDataNextValue'] = {
    {name='GetDataNextValue', count=2, confidence=0.40, sample='---reset the data index, making GetDataNextValue() return the first value again'},
  },
  ['ResetMinMaxValues'] = {
    {name='ResetMinMaxValues', count=3, confidence=0.60, sample='self:ResetMinMaxValues()'},
  },
  ['IsDesaturated'] = {
    {name='IsDesaturated', count=1, confidence=0.20, sample='return self.barTexture:IsDesaturated()'},
  },
  ['GetStatusBarColor'] = {
    {name='GetStatusBarColor', count=1, confidence=0.20, sample='return self:GetStatusBarColor()'},
  },
  ['HasTextureMask'] = {
    {name='HasTextureMask', count=7, confidence=1.00, sample='if (not self:HasTextureMask()) then'},
  },
  ['CreateTextureMask'] = {
    {name='CreateTextureMask', count=4, confidence=0.80, sample='detailsFramework:Msg("Object doesn't not have a texture mask, create one using object:CreateTextureMask()", debugstack())'},
  },
  ['GetSpellBookItemTexture'] = {
    {name='C_SpellBook.GetSpellBookItemTexture', count=1, confidence=0.20, sample='local GetSpellBookItemTexture = GetSpellBookItemTexture or function(...) return C_SpellBook.GetSpellBookItemTexture(...) end'},
    {name='GetSpellBookItemTexture', count=1, confidence=0.20, sample='MACRO_ICON_FILENAMES [index] = si and si.iconID or GetSpellBookItemTexture(j, SPELLBOOK_BANK_PLAYER) or 0'},
  },
  ['AlignRows'] = {
    {name='AlignRows', count=3, confidence=0.60, sample='self:AlignRows()'},
  },
  ['CreateRowText'] = {
    {name='CreateRowText', count=1, confidence=0.20, sample='self:CreateRowText (line)'},
  },
  ['CreateRowEntry'] = {
    {name='CreateRowEntry', count=1, confidence=0.20, sample='self:CreateRowEntry (line)'},
  },
  ['CreateCheckbox'] = {
    {name='CreateCheckbox', count=2, confidence=0.40, sample='self:CreateCheckbox (line)'},
  },
  ['CreateRowButton'] = {
    {name='CreateRowButton', count=1, confidence=0.20, sample='self:CreateRowButton (line)'},
  },
  ['CreateRowIcon'] = {
    {name='CreateRowIcon', count=1, confidence=0.20, sample='self:CreateRowIcon (line)'},
  },
  ['CreateRowTexture'] = {
    {name='CreateRowTexture', count=1, confidence=0.20, sample='self:CreateRowTexture (line)'},
  },
  ['AddRow'] = {
    {name='AddRow', count=2, confidence=0.40, sample='self:AddRow (t)'},
  },
  ['UpdateRowAmount'] = {
    {name='UpdateRowAmount', count=3, confidence=0.60, sample='panel:UpdateRowAmount()'},
  },
  ['CreateFillPanel'] = {
    {name='CreateFillPanel', count=1, confidence=0.20, sample='function detailsFramework:CreateFillPanel(parent, rows, w, h, total_lines, fill_row, autowidth, options, member, name)'},
  },
  ['RefreshIcons'] = {
    {name='IconPickFrameScroll.RefreshIcons', count=3, confidence=0.60, sample='detailsFramework.IconPickFrameScroll.RefreshIcons()'},
    {name='RefreshIcons', count=1, confidence=0.20, sample='function scroll.RefreshIcons()'},
  },
  ['FauxScrollFrame_SetOffset'] = {
    {name='FauxScrollFrame_SetOffset', count=1, confidence=0.20, sample='FauxScrollFrame_SetOffset (detailsFramework.IconPickFrame, 1)'},
  },
  ['GetLooseMacroItemIcons'] = {
    {name='GetLooseMacroItemIcons', count=1, confidence=0.20, sample='GetLooseMacroItemIcons(MACRO_ICON_FILENAMES)'},
  },
  ['GetLooseMacroIcons'] = {
    {name='GetLooseMacroIcons', count=1, confidence=0.20, sample='GetLooseMacroIcons(MACRO_ICON_FILENAMES)'},
  },
  ['GetMacroIcons'] = {
    {name='GetMacroIcons', count=1, confidence=0.20, sample='GetMacroIcons(MACRO_ICON_FILENAMES)'},
  },
  ['GetMacroItemIcons'] = {
    {name='GetMacroItemIcons', count=1, confidence=0.20, sample='GetMacroItemIcons(MACRO_ICON_FILENAMES)'},
  },
  ['ShowPanicWarning'] = {
    {name='ShowPanicWarning', count=1, confidence=0.20, sample='function detailsFramework:ShowPanicWarning (text)'},
  },
  ['SavePositionOnScreen'] = {
    {name='SavePositionOnScreen', count=4, confidence=0.80, sample='detailsFramework:SavePositionOnScreen (self)'},
  },
  ['TextToFloor'] = {
    {name='TextToFloor', count=1, confidence=0.20, sample='local newScale = detailsFramework.TextToFloor(text)'},
  },
  ['SetBorderCornerColor'] = {
    {name='SetBorderCornerColor', count=17, confidence=1.00, sample='simplePanel.TitleBar:SetBorderCornerColor(0, 0, 0, 0)'},
  },
  ['OnUnlock'] = {
    {name='OnUnlock', count=1, confidence=0.20, sample='self:OnUnlock()'},
  },
  ['OnLock'] = {
    {name='OnLock', count=1, confidence=0.20, sample='self:OnLock()'},
  },
  ['Panel1PxOnToggleLock'] = {
    {name='Panel1PxOnToggleLock', count=2, confidence=0.40, sample='Panel1PxOnToggleLock (f)'},
  },
  ['Panel1PxOnClickLock'] = {
    {name='Panel1PxOnClickLock', count=2, confidence=0.40, sample='Panel1PxOnClickLock (self.Lock)'},
  },
  ['RestoreFramePosition'] = {
    {name='RestoreFramePosition', count=2, confidence=0.40, sample='detailsFramework:RestoreFramePosition (self)'},
  },
  ['Panel1PxReadConfig'] = {
    {name='Panel1PxReadConfig', count=1, confidence=0.20, sample='Panel1PxReadConfig(newFrame)'},
  },
  ['SetTextIfLocTableOrDefault'] = {
    {name='Language.SetTextIfLocTableOrDefault', count=1, confidence=0.20, sample='detailsFramework.Language.SetTextIfLocTableOrDefault(titleString, title or "")'},
    {name='SetTextIfLocTableOrDefault', count=2, confidence=0.40, sample='SetTextIfLocTableOrDefault(object, locTable)'},
    {name='DF.Language.SetTextIfLocTableOrDefault', count=1, confidence=0.20, sample='function DF.Language.SetTextIfLocTableOrDefault(object, locTable)'},
  },
  ['HidePromptPanel'] = {
    {name='HidePromptPanel', count=2, confidence=0.40, sample='function detailsFramework:HidePromptPanel(promptName)'},
  },
  ['SetTime'] = {
    {name='SetTime', count=3, confidence=0.60, sample='f:SetTime (max_time)'},
  },
  ['AddOverlay'] = {
    {name='AddOverlay', count=2, confidence=0.40, sample='f:AddOverlay(box.index)'},
  },
  ['AddLabel'] = {
    {name='AddLabel', count=2, confidence=0.40, sample='self:AddLabel (color or line_default_color, name, "overlay", #self.OData)'},
  },
  ['CreateChartPanel'] = {
    {name='CreateChartPanel', count=1, confidence=0.20, sample='function detailsFramework:CreateChartPanel(parent, width, height, name)'},
  },
  ['FindHighestParent'] = {
    {name='FindHighestParent', count=3, confidence=0.60, sample='function detailsFramework:FindHighestParent(self)'},
  },
  ['CreateRightClickToClose'] = {
    {name='CreateRightClickToClose', count=1, confidence=0.20, sample='function detailsFramework:CreateRightClickToClose(parent, xOffset, yOffset, color, fontSize)'},
  },
  ['ResetWidgets'] = {
    {name='ResetWidgets', count=1, confidence=0.20, sample='self:ResetWidgets()'},
  },
  ['GetOrCreateWidget'] = {
    {name='GetOrCreateWidget', count=1, confidence=0.20, sample='local widget = self:GetOrCreateWidget()'},
  },
  ['CreateSimpleListBox'] = {
    {name='CreateSimpleListBox', count=1, confidence=0.20, sample='function detailsFramework:CreateSimpleListBox(parent, name, title, emptyText, listTable, onClick, options)'},
  },
  ['CreateBossScrollSelectorForInstance'] = {
    {name='CreateBossScrollSelectorForInstance', count=1, confidence=0.20, sample='function detailsFramework:CreateBossScrollSelectorForInstance(instanceId, parent, name, options, callback, ...)'},
  },
  ['OnSwitch'] = {
    {name='OnSwitch', count=3, confidence=0.60, sample='self:GetParent():GetObject():OnSwitch(self:GetParent():GetObject()._param, not self:GetParent():GetObject():GetValue()) --as the parent of self is a Switch object from DetailsFramework, it need to run :GetObject() to get the capsule object'},
  },
  ['SetCheckedTexture'] = {
    {name='SetCheckedTexture', count=2, confidence=0.40, sample='checkbox:SetCheckedTexture(self.options.checked_texture, self.options.checked_texture_offset_x, self.options.checked_texture_offset_y)'},
  },
  ['DeselectAll'] = {
    {name='DeselectAll', count=1, confidence=0.20, sample='radioGroup:DeselectAll()'},
  },
  ['GetCapsule'] = {
    {name='GetCapsule', count=3, confidence=0.60, sample='checkbox = checkbox.GetCapsule and checkbox:GetCapsule() or checkbox'},
  },
  ['SetSwitchFunction'] = {
    {name='SetSwitchFunction', count=1, confidence=0.20, sample='checkbox:SetSwitchFunction(setFunc)'},
  },
  ['ResetAllCheckboxes'] = {
    {name='ResetAllCheckboxes', count=1, confidence=0.20, sample='self:ResetAllCheckboxes()'},
  },
  ['GetCheckbox'] = {
    {name='GetCheckbox', count=1, confidence=0.20, sample='local checkbox = self:GetCheckbox(optionId)'},
  },
  ['RefreshCheckbox'] = {
    {name='RefreshCheckbox', count=1, confidence=0.20, sample='self:RefreshCheckbox(checkbox, optionsTable, optionId)'},
  },
  ['ArrangeFrames'] = {
    {name='ArrangeFrames', count=1, confidence=0.20, sample='self:ArrangeFrames(false, self.AnchorOptions)'},
  },
  ['GetSwitchFunction'] = {
    {name='GetSwitchFunction', count=1, confidence=0.20, sample='local callbackFunc = thisCheckbox:GetSwitchFunction()'},
  },
  ['RadioOnClick'] = {
    {name='RadioGroupCoreFunctions.RadioOnClick', count=1, confidence=0.20, sample='detailsFramework.RadioGroupCoreFunctions.RadioOnClick(thisCheckbox, thisCheckbox:GetFixedParameter(), true)'},
  },
  ['GetFixedParameter'] = {
    {name='GetFixedParameter', count=6, confidence=1.00, sample='detailsFramework.RadioGroupCoreFunctions.RadioOnClick(thisCheckbox, thisCheckbox:GetFixedParameter(), true)'},
  },
  ['CreateCheckboxGroup'] = {
    {name='CreateCheckboxGroup', count=10, confidence=1.00, sample='function detailsFramework:CreateCheckboxGroup(parent, radioOptions, name, options, anchorOptions)'},
  },
  ['CreateRadionGroup'] = {
    {name='CreateRadionGroup', count=1, confidence=0.20, sample='function detailsFramework:CreateRadionGroup(parent, radioOptions, name, options, anchorOptions) --alias for miss spelled old function'},
  },
  ['UpdateLineHook'] = {
    {name='UpdateLineHook', count=1, confidence=0.20, sample='detailsFramework:CoreDispatch((line:GetName() or "ScrollBoxDataScrollUpdateLineHook") .. ":UpdateLineHook()", line:GetParent().OnUpdateLineHook, line, lineIndex, data)'},
  },
  ['CreateDataScrollFrame'] = {
    {name='CreateDataScrollFrame', count=2, confidence=0.40, sample='function detailsFramework:CreateDataScrollFrame (parent, name, options)'},
  },
  ['GetNumNews'] = {
    {name='GetNumNews', count=1, confidence=0.20, sample='function detailsFramework:GetNumNews (newsTable, lastNewsTime)'},
  },
  ['CreateNewsFrame'] = {
    {name='CreateNewsFrame', count=1, confidence=0.20, sample='function detailsFramework:CreateNewsFrame (parent, name, options, newsTable, db)'},
  },
  ['CreateBorderFrame'] = {
    {name='CreateBorderFrame', count=3, confidence=0.60, sample='DF:CreateBorderFrame (parent, name)'},
  },
  ['ShowErrorMessage'] = {
    {name='ShowErrorMessage', count=1, confidence=0.20, sample='function detailsFramework:ShowErrorMessage (errorMessage, titleText)'},
  },
  ['SetPointOffsets'] = {
    {name='SetPointOffsets', count=2, confidence=0.40, sample='DF:SetPointOffsets(frame, xOffset, yOffset)'},
  },
  ['CreateListBox'] = {
    {name='CreateListBox', count=3, confidence=0.60, sample='function detailsFramework:CreateListBox(parent, name, data, options, headerTable, headerOptions)'},
  },
  ['ShowData'] = {
    {name='ShowData', count=1, confidence=0.20, sample='function detailsFramework:ShowData(data)'},
  },
  ['ResetColumnHeaderBackdrop'] = {
    {name='ResetColumnHeaderBackdrop', count=2, confidence=0.40, sample='headerFrame:ResetColumnHeaderBackdrop(previousColumnHeader)'},
  },
  ['SetBackdropColorForSelectedColumnHeader'] = {
    {name='SetBackdropColorForSelectedColumnHeader', count=2, confidence=0.40, sample='headerFrame:SetBackdropColorForSelectedColumnHeader(columnHeader)'},
  },
  ['UpdateSortArrow'] = {
    {name='UpdateSortArrow', count=4, confidence=0.80, sample='headerFrame:UpdateSortArrow(columnHeader)'},
  },
  ['GetNextHeader'] = {
    {name='GetNextHeader', count=1, confidence=0.20, sample='local columnHeader = self:GetNextHeader()'},
  },
  ['UpdateColumnHeader'] = {
    {name='UpdateColumnHeader', count=1, confidence=0.20, sample='self:UpdateColumnHeader(columnHeader, i)'},
  },
  ['ClearColumnHeader'] = {
    {name='ClearColumnHeader', count=1, confidence=0.20, sample='self:ClearColumnHeader(columnHeader)'},
  },
  ['SetOnColumnResizeScript'] = {
    {name='SetOnColumnResizeScript', count=1, confidence=0.20, sample='reziser_shown = false, --make sure to set the callback function with: header:SetOnColumnResizeScript(callbackFunction)'},
  },
  ['SetHeaderTable'] = {
    {name='SetHeaderTable', count=8, confidence=1.00, sample='newHeader:SetHeaderTable(headerTable)'},
  },
  ['SetRightText'] = {
    {name='SetRightText', count=3, confidence=0.60, sample='function BarMetaFunctions:SetRightText (text)'},
  },
  ['ShowDiv'] = {
    {name='ShowDiv', count=1, confidence=0.20, sample='function BarMetaFunctions:ShowDiv (bool)'},
  },
  ['SetContainer'] = {
    {name='SetContainer', count=1, confidence=0.20, sample='function BarMetaFunctions:SetContainer (container)'},
  },
  ['OnTimerEnd'] = {
    {name='OnTimerEnd', count=3, confidence=0.60, sample='function BarMetaFunctions:OnTimerEnd()'},
  },
  ['StartTimeBarAnimation'] = {
    {name='StartTimeBarAnimation', count=2, confidence=0.40, sample='DF:StartTimeBarAnimation(self)'},
  },
  ['DetailsFrameworkNormalBar_OnCreate'] = {
    {name='DetailsFrameworkNormalBar_OnCreate', count=2, confidence=0.40, sample='function DetailsFrameworkNormalBar_OnCreate (self)'},
  },
  ['NewBar'] = {
    {name='NewBar', count=2, confidence=0.40, sample='return DF:NewBar (parent, parent, name, member, w, h, value, texture)'},
  },
  ['GetPointDistance'] = {
    {name='DF.Math.GetPointDistance', count=4, confidence=0.80, sample='local closestDistance = DF.Math.GetPointDistance(ninePoints[1].x, ninePoints[1].y, coordinate.x, coordinate.y)'},
  },
  ['GetSortFractionFromString'] = {
    {name='DF.Math.GetSortFractionFromString', count=1, confidence=0.20, sample='function DF.Math.GetSortFractionFromString(str)'},
  },
  ['GetVectorLength'] = {
    {name='DF.Math.GetVectorLength', count=1, confidence=0.20, sample='function DF.Math.GetVectorLength(vectorX, vectorY, vectorZ)'},
    {name='GetVectorLength', count=3, confidence=0.60, sample='function DF:GetVectorLength(vectorX, vectorY, vectorZ)'},
  },
  ['RandomFraction'] = {
    {name='RandomFraction', count=1, confidence=0.20, sample='---return a random fraction between two values, example: RandomFraction(.2, .3) returns a number between .2 and .3, 0.25, 0.28, 0.21, etc'},
    {name='DF.Math.RandomFraction', count=2, confidence=0.40, sample='function DF.Math.RandomFraction(minValue, maxValue)'},
  },
  ['GetRangeValue'] = {
    {name='DF.Math.GetRangeValue', count=4, confidence=0.80, sample='return DF.Math.GetRangeValue(minValue, maxValue, 1 - DF.Math.GetRangePercent(minValue, maxValue, value))'},
    {name='GetRangeValue', count=3, confidence=0.60, sample='return DF:GetRangeValue(outputX, outputY, Clamp(DF:GetRangePercent(inputX, inputY, value), 0, 1))'},
    {name='Math.GetRangeValue', count=1, confidence=0.20, sample='scaleSlider:SetValue(detailsFramework.Math.GetRangeValue(frameCanvas.options.scale_min, frameCanvas.options.scale_max, 0.5))'},
  },
  ['GetUnitDistance'] = {
    {name='DF.Math.GetUnitDistance', count=2, confidence=0.40, sample='function DF.Math.GetUnitDistance(unitId1, unitId2)'},
  },
  ['FindLookAtRotation'] = {
    {name='DF.Math.FindLookAtRotation', count=2, confidence=0.40, sample='function DF.Math.FindLookAtRotation(x1, y1, x2, y2)'},
    {name='FindLookAtRotation', count=1, confidence=0.20, sample='function DF:FindLookAtRotation(x1, y1, x2, y2)'},
  },
  ['MapRangeColor'] = {
    {name='MapRangeColor', count=1, confidence=0.20, sample='---*Example: MapRangeColor(0, 1, 0, 255, 0.5, 0.5, 0.5) returns 127.5, 127.5, 127.5'},
    {name='DF.Math.MapRangeColor', count=1, confidence=0.20, sample='function DF.Math.MapRangeColor(inputX, inputY, outputX, outputY, red, green, blue)'},
  },
  ['MultiplyBy'] = {
    {name='DF.Math.MultiplyBy', count=1, confidence=0.20, sample='function DF.Math.MultiplyBy(value, ...)'},
  },
  ['MapRangeUnclamped'] = {
    {name='DF.Math.MapRangeUnclamped', count=1, confidence=0.20, sample='function DF.Math.MapRangeUnclamped(inputX, inputY, outputX, outputY, value)'},
    {name='MapRangeUnclamped', count=1, confidence=0.20, sample='function DF:MapRangeUnclamped(inputX, inputY, outputX, outputY, value)'},
  },
  ['GetColorRangeValue'] = {
    {name='DF.Math.GetColorRangeValue', count=2, confidence=0.40, sample='function DF.Math.GetColorRangeValue(r1, g1, b1, r2, g2, b2, value)'},
    {name='GetColorRangeValue', count=1, confidence=0.20, sample='function DF:GetColorRangeValue(r1, g1, b1, r2, g2, b2, value)'},
  },
  ['LerpNorm'] = {
    {name='DF.Math.LerpNorm', count=4, confidence=0.80, sample='local newR = DF.Math.LerpNorm(r1, r2, value)'},
    {name='LerpNorm', count=1, confidence=0.20, sample='function DF:LerpNorm(minValue, maxValue, value)'},
  },
  ['GetDotProduct'] = {
    {name='DF.Math.GetDotProduct', count=1, confidence=0.20, sample='function DF.Math.GetDotProduct(value1, value2)'},
    {name='GetDotProduct', count=1, confidence=0.20, sample='function DF:GetDotProduct(value1, value2)'},
  },
  ['GetBezierPoint'] = {
    {name='DF.Math.GetBezierPoint', count=2, confidence=0.40, sample='function DF.Math.GetBezierPoint(value, point1, point2, point3)'},
    {name='GetBezierPoint', count=1, confidence=0.20, sample='function DF:GetBezierPoint(value, point1, point2, point3)'},
  },
  ['IsNearlyZero'] = {
    {name='DF.Math.IsNearlyZero', count=1, confidence=0.20, sample='function DF.Math.IsNearlyZero(value, tolerance)'},
    {name='IsNearlyZero', count=1, confidence=0.20, sample='function DF:IsNearlyZero(value, tolerance)'},
  },
  ['IsWithin'] = {
    {name='DF.Math.IsWithin', count=1, confidence=0.20, sample='function DF.Math.IsWithin(minValue, maxValue, value, isInclusive)'},
    {name='IsWithin', count=1, confidence=0.20, sample='function DF:IsWithin(minValue, maxValue, value, isInclusive)'},
  },
  ['GetDistance_Unit'] = {
    {name='GetDistance_Unit', count=1, confidence=0.20, sample='function DF:GetDistance_Unit(unit1, unit2)'},
  },
  ['GetDistance_Point'] = {
    {name='GetDistance_Point', count=1, confidence=0.20, sample='function DF:GetDistance_Point(x1, y1, x2, y2)'},
  },
  ['GetObjectCoordinates'] = {
    {name='GetObjectCoordinates', count=3, confidence=0.60, sample='function DF:GetObjectCoordinates(object)'},
  },
  ['ScaleBack'] = {
    {name='ScaleBack', count=1, confidence=0.20, sample='function DF:ScaleBack()'},
  },
  ['GetSavedVariables'] = {
    {name='SavedVars.GetSavedVariables', count=7, confidence=1.00, sample='local savedVariables = detailsFramework.SavedVars.GetSavedVariables(addonObject)'},
  },
  ['CreateNewAddOn'] = {
    {name='CreateNewAddOn', count=7, confidence=1.00, sample='---@param addonObject df_addon the addon object created by detailsFramework:CreateNewAddOn()'},
  },
  ['RefreshProfilePanel'] = {
    {name='SavedVars.RefreshProfilePanel', count=4, confidence=0.80, sample='function detailsFramework.SavedVars.RefreshProfilePanel(profilePanel)'},
  },
  ['RefreshSelectProfileDropdown'] = {
    {name='RefreshSelectProfileDropdown', count=1, confidence=0.20, sample='profilePanel:RefreshSelectProfileDropdown()'},
  },
  ['CreateProfilePanel'] = {
    {name='SavedVars.CreateProfilePanel', count=1, confidence=0.20, sample='function detailsFramework.SavedVars.CreateProfilePanel(addonObject, frameName, parentFrame, options)'},
  },
  ['OnClickCreateNewProfile'] = {
    {name='OnClickCreateNewProfile', count=1, confidence=0.20, sample='local createProfileButton = detailsFramework:CreateButton(frame, function() frame.OnClickCreateNewProfile(frame) end, 100, 32, "Create", false, false, false, "ProfileCreateButton", "$parentCreateProfileButton", buttonTemplate, labelTemplate)'},
  },
  ['IsItemSoulbound'] = {
    {name='Items.IsItemSoulbound', count=1, confidence=0.20, sample='function detailsFramework.Items.IsItemSoulbound(containerIndex, slotIndex)'},
  },
  ['CreateIcon'] = {
    {name='CreateIcon', count=2, confidence=0.40, sample='iconFrame = self:CreateIcon("$parentIcon" .. self.NextIcon)'},
  },
  ['AddSpecificIcon'] = {
    {name='AddSpecificIcon', count=1, confidence=0.20, sample='self:AddSpecificIcon(iconTemplateTable.id, iconTemplateTable.id, nil, iconTemplateTable.startTime, iconTemplateTable.duration, nil, nil, iconTemplateTable.count, nil, nil, nil, nil, nil, nil, iconTemplateTable)'},
  },
  ['SetAuraWithIconTemplate'] = {
    {name='SetAuraWithIconTemplate', count=1, confidence=0.20, sample='local iconFrame = self:SetAuraWithIconTemplate(auraInfo, iconTemplateTable)'},
  },
  ['SetStacks'] = {
    {name='SetStacks', count=2, confidence=0.40, sample='self:SetStacks(iconFrame, true, count)'},
  },
  ['SetReverse'] = {
    {name='SetReverse', count=2, confidence=0.40, sample='iconFrame.Cooldown:SetReverse(options.cooldown_reverse)'},
  },
  ['SetEdgeTexture'] = {
    {name='SetEdgeTexture', count=2, confidence=0.40, sample='iconFrame.Cooldown:SetEdgeTexture(options.cooldown_edge_texture) --the yellow edge that follows the cooldown animation'},
  },
  ['SetHideCountdownNumbers'] = {
    {name='SetHideCountdownNumbers', count=3, confidence=0.60, sample='iconFrame.Cooldown:SetHideCountdownNumbers(options.surpress_blizzard_cd_timer)'},
  },
  ['SetSwipeTexture'] = {
    {name='SetSwipeTexture', count=1, confidence=0.20, sample='iconFrame.Cooldown:SetSwipeTexture([[Interface\Masks\SquareMask]], 0, 0, 0, 0.3)'},
  },
  ['SetSwipeColor'] = {
    {name='SetSwipeColor', count=3, confidence=0.60, sample='--iconFrame.Cooldown:SetSwipeColor(1, 1, 1, 1)'},
  },
  ['SetDrawEdge'] = {
    {name='SetDrawEdge', count=1, confidence=0.20, sample='--iconFrame.Cooldown:SetDrawEdge(true) --the same shit as above'},
  },
  ['SetDrawBling'] = {
    {name='SetDrawBling', count=1, confidence=0.20, sample='--iconFrame.Cooldown:SetDrawBling(true) --edge of the animation, a thin horizontal texture'},
  },
  ['SetEdgeScale'] = {
    {name='SetEdgeScale', count=1, confidence=0.20, sample='--iconFrame.Cooldown:SetEdgeScale(4) --edge of the animation, a thin horizontal texture'},
  },
  ['OnIconTick'] = {
    {name='OnIconTick', count=1, confidence=0.20, sample='self.OnIconTick(iconFrame)'},
  },
  ['RemoveSpecificIcon'] = {
    {name='RemoveSpecificIcon', count=1, confidence=0.20, sample='iconFrame:GetParent():RemoveSpecificIcon(iconFrame.identifierKey)'},
  },
  ['FormatCooldownTime'] = {
    {name='FormatCooldownTime', count=3, confidence=0.60, sample='iconFrame.CountdownText:SetText(iconFrame.parentIconRow.FormatCooldownTime((iconFrame.duration - (now - iconFrame.startTime)) / (iconFrame.modRate or 1)))'},
  },
  ['AlignAuraIcons'] = {
    {name='AlignAuraIcons', count=4, confidence=0.80, sample='self:AlignAuraIcons()'},
  },
  ['GetIconGrowDirection'] = {
    {name='GetIconGrowDirection', count=1, confidence=0.20, sample='local growDirection = self:GetIconGrowDirection()'},
  },
  ['CreateIconRowGeneric'] = {
    {name='CreateIconRowGeneric', count=1, confidence=0.20, sample='function detailsFramework:CreateIconRowGeneric(parent, name, options)'},
  },
  ['SetSplit'] = {
    {name='SetSplit', count=1, confidence=0.20, sample='function SplitBarMetaFunctions:SetSplit (value)'},
  },
  ['SetLeftIcon'] = {
    {name='SetLeftIcon', count=1, confidence=0.20, sample='function SplitBarMetaFunctions:SetLeftIcon (texture, ...)'},
  },
  ['SetRightIcon'] = {
    {name='SetRightIcon', count=1, confidence=0.20, sample='function SplitBarMetaFunctions:SetRightIcon (texture, ...)'},
  },
  ['DisableAnimations'] = {
    {name='DisableAnimations', count=1, confidence=0.20, sample='function SplitBarMetaFunctions:DisableAnimations()'},
  },
  ['DetailsFrameworkSplitlBar_OnCreate'] = {
    {name='DetailsFrameworkSplitlBar_OnCreate', count=2, confidence=0.40, sample='function DetailsFrameworkSplitlBar_OnCreate (self)'},
  },
  ['NewSplitBar'] = {
    {name='NewSplitBar', count=2, confidence=0.40, sample='return DF:NewSplitBar(parent, nil, name, member, width, height)'},
  },
  ['BringNamedLocalFunctionToTop'] = {
    {name='BringNamedLocalFunctionToTop', count=1, confidence=0.20, sample='function detailsFramework:BringNamedLocalFunctionToTop(codeBlock)'},
  },
  ['PackTest'] = {
    {name='PackTest', count=1, confidence=0.20, sample='function PackTest()'},
  },
  ['PackSubTest'] = {
    {name='PackSubTest', count=1, confidence=0.20, sample='function PackSubTest()'},
  },
  ['PackSubMergeTest'] = {
    {name='PackSubMergeTest', count=1, confidence=0.20, sample='function PackSubMergeTest()'},
  },
  ['PackHashTest'] = {
    {name='PackHashTest', count=1, confidence=0.20, sample='function PackHashTest()'},
  },
  ['PackHashSubTableTest'] = {
    {name='PackHashSubTableTest', count=1, confidence=0.20, sample='function PackHashSubTableTest()'},
  },
  ['UnpackTest'] = {
    {name='UnpackTest', count=1, confidence=0.20, sample='function UnpackTest()'},
  },
  ['UnpackSecondTest'] = {
    {name='UnpackSecondTest', count=1, confidence=0.20, sample='function UnpackSecondTest()'},
  },
  ['UnpackSubTest'] = {
    {name='UnpackSubTest', count=1, confidence=0.20, sample='function UnpackSubTest()'},
  },
  ['UnpackHashSubTableTest'] = {
    {name='UnpackHashSubTableTest', count=1, confidence=0.20, sample='function UnpackHashSubTableTest()'},
  },
  ['CreateRoundedPanel'] = {
    {name='CreateRoundedPanel', count=8, confidence=1.00, sample='local frame = _G[name] or detailsFramework:CreateRoundedPanel(parent, name, optionsTable)'},
  },
  ['Coil'] = {
    {name='Coil', count=3, confidence=0.60, sample='[6789] = 5, --Mortal Coil (talent)'},
  },
  ['Crane'] = {
    {name='Crane', count=2, confidence=0.40, sample='[198664] = 4, --Invoke Chi-Ji, the Red Crane (talent)'},
  },
  ['Wish'] = {
    {name='Wish', count=1, confidence=0.20, sample='DF.CooldownsBySpec[71][12292] = 1 --Death Wish (BCC)'},
  },
  ['Flurry'] = {
    {name='Flurry', count=1, confidence=0.20, sample='DF.CooldownsBySpec[260][13877] = 1 --Blade Flurry (talent) (BBC)'},
  },
  ['Combustion'] = {
    {name='Combustion', count=1, confidence=0.20, sample='DF.CooldownsBySpec[63][28682] = 1 --Combustion (talent) (BCC)'},
  },
  ['Roar'] = {
    {name='Roar', count=1, confidence=0.20, sample='[77764] = {cooldown = 120, duration = 8, talent = false, charges = 1, class = "DRUID", type = 4}, --Stampeding Roar (utility)'},
  },
  ['Shockwave'] = {
    {name='Shockwave', count=1, confidence=0.20, sample='[132168] = "WARRIOR", --Shockwave (debuff spellid)'},
  },
  ['Polymorph'] = {
    {name='Polymorph', count=1, confidence=0.20, sample='[61305] = "MAGE", --Polymorph (black cat)'},
  },
  ['Chastise'] = {
    {name='Chastise', count=2, confidence=0.40, sample='[200196] = "PRIEST", --Holy Word: Chastise (debuff spellid)'},
  },
  ['Horror'] = {
    {name='Horror', count=1, confidence=0.20, sample='[64044] = "PRIEST", --Psychic Horror (talent)'},
  },
  ['Blind'] = {
    {name='Blind', count=1, confidence=0.20, sample='[427773] = "ROGUE", --Blind (AoE)'},
  },
  ['Repentance'] = {
    {name='Repentance', count=1, confidence=0.20, sample='[20066] = "PALADIN", --Repentance (talent)'},
  },
  ['Zero'] = {
    {name='Zero', count=1, confidence=0.20, sample='[334693] = "DEAHTKNIGHT", --Absolute Zero (legendary)'},
  },
  ['Dazed'] = {
    {name='Dazed', count=1, confidence=0.20, sample='[50259] = "DRUID", --Dazed (from Wild Charge)'},
  },
  ['Cyclone'] = {
    {name='Cyclone', count=2, confidence=0.40, sample='[209753] = "DRUID", --Cyclone (from pvp talent)'},
  },
  ['Ice'] = {
    {name='Ice', count=1, confidence=0.20, sample='[3355] = "HUNTER", --Freezing Trap / Diamond Ice (from pvp talent)'},
  },
  ['Ji'] = {
    {name='Ji', count=1, confidence=0.20, sample='[198909] = "MONK", --Song of Chi-Ji (talent)'},
  },
  ['Hex'] = {
    {name='Hex', count=8, confidence=1.00, sample='[210873] = "SHAMAN", --Hex (Compy)'},
  },
  ['Earthgrab'] = {
    {name='Earthgrab', count=1, confidence=0.20, sample='[64695] = "SHAMAN", --Earthgrab (talent)'},
  },
  ['Sundering'] = {
    {name='Sundering', count=1, confidence=0.20, sample='[197214] = "SHAMAN", --Sundering (talent)'},
  },
  ['Chaos'] = {
    {name='Chaos', count=1, confidence=0.20, sample='[331866] = "COVENANT|VENTHYR", --Agent of Chaos (Nadia soulbind)'},
  },
  ['FindClassForCooldown'] = {
    {name='FindClassForCooldown', count=1, confidence=0.20, sample='function DF:FindClassForCooldown (spellId)'},
  },
  ['GetSpellsForEncounterFromJournal'] = {
    {name='GetSpellsForEncounterFromJournal', count=1, confidence=0.20, sample='function DF:GetSpellsForEncounterFromJournal (instanceEJID, encounterEJID)'},
  },
  ['IsSpellInRange'] = {
    {name='IsSpellInRange', count=1, confidence=0.20, sample='-- 185245 spellID for Torment, it is always failing to check range with IsSpellInRange()'},
  },
  ['Moonfire'] = {
    {name='Moonfire', count=3, confidence=0.60, sample='[102] = 8921, -- druid balance - Moonfire (45 yards)'},
  },
  ['Knife'] = {
    {name='Knife', count=1, confidence=0.20, sample='[259] = 185565, --rogue assassination - Poisoned Knife (30 yards)'},
  },
  ['UpdateLoadConditionsTable'] = {
    {name='UpdateLoadConditionsTable', count=3, confidence=0.60, sample='conditions = detailsFramework:UpdateLoadConditionsTable({}),'},
  },
  ['OnUserPressedKeybind'] = {
    {name='OnUserPressedKeybind', count=2, confidence=0.40, sample='---only called from OnUserPressedKeybind() when the a keybindTable is not found for the action'},
  },
  ['UpdateScroll'] = {
    {name='UpdateScroll', count=11, confidence=1.00, sample='--EnemyGridOptionsPanelFrameKeybindScroill:UpdateScroll() --!need to defined the scroll frame'},
  },
  ['SetClearButtonsEnabled'] = {
    {name='SetClearButtonsEnabled', count=2, confidence=0.40, sample='self:SetClearButtonsEnabled(not value)'},
  },
  ['SetEditButtonsEnabled'] = {
    {name='SetEditButtonsEnabled', count=2, confidence=0.40, sample='self:SetEditButtonsEnabled(not value)'},
  },
  ['GetKeybindTypeAndActionFromIdentifier'] = {
    {name='GetKeybindTypeAndActionFromIdentifier', count=2, confidence=0.40, sample='local keybindType, actionId = keyBindFrame:GetKeybindTypeAndActionFromIdentifier(actionIdentifier)'},
  },
  ['FindKeybindTable'] = {
    {name='FindKeybindTable', count=3, confidence=0.60, sample='local _, index = keyBindFrame:FindKeybindTable(keybindType, actionId, actionIdentifier)'},
  },
  ['GetKeybindData'] = {
    {name='GetKeybindData', count=5, confidence=1.00, sample='local keybindData = keyBindFrame:GetKeybindData()'},
  },
  ['CallKeybindChangeCallback'] = {
    {name='CallKeybindChangeCallback', count=8, confidence=1.00, sample='keyBindFrame:CallKeybindChangeCallback("removed", nil, nil, index)'},
  },
  ['IsEditingKeybindSettings'] = {
    {name='IsEditingKeybindSettings', count=8, confidence=1.00, sample='local bIsEditingKeybind = keyBindFrame:IsEditingKeybindSettings()'},
  },
  ['StopEditingKeybindSettings'] = {
    {name='StopEditingKeybindSettings', count=6, confidence=1.00, sample='keyBindFrame:StopEditingKeybindSettings()'},
  },
  ['GetKeybindScroll'] = {
    {name='GetKeybindScroll', count=11, confidence=1.00, sample='local keybindScroll = keyBindFrame:GetKeybindScroll()'},
  },
  ['IsKeybindActionMacro'] = {
    {name='IsKeybindActionMacro', count=5, confidence=1.00, sample='if (not self:IsKeybindActionMacro(keybindTable.action)) then'},
  },
  ['OnKeyDown'] = {
    {name='OnKeyDown', count=1, confidence=0.20, sample='OnUserPressedKeybind = function(self, keyPressed) --called from OnUserClickedToChooseKeybind and from OnKeyDown() script'},
  },
  ['GetKeybindListener'] = {
    {name='GetKeybindListener', count=3, confidence=0.60, sample='local keybindListener = self:GetKeybindListener()'},
  },
  ['SetListeningState'] = {
    {name='SetListeningState', count=4, confidence=0.80, sample='self:SetListeningState(false)'},
  },
  ['GetPressedModifiers'] = {
    {name='GetPressedModifiers', count=1, confidence=0.20, sample='local modifiers = self:GetPressedModifiers()'},
  },
  ['GetListeningState'] = {
    {name='GetListeningState', count=4, confidence=0.80, sample='local bIsListening, actionIdentifier, button, keybindScrollData = self:GetListeningState()'},
  },
  ['SaveKeybindToKeybindData'] = {
    {name='SaveKeybindToKeybindData', count=2, confidence=0.40, sample='self:SaveKeybindToKeybindData(keybindTable, pressedKeybind, bKeybindJustCreated)'},
  },
  ['SetAsSeparator'] = {
    {name='SetAsSeparator', count=2, confidence=0.40, sample='line:SetAsSeparator(true, iconTexture)'},
  },
  ['GetEditPanel'] = {
    {name='GetEditPanel', count=9, confidence=1.00, sample='local editPanel = keyBindFrame:GetEditPanel()'},
  },
  ['PassLoadFilters'] = {
    {name='PassLoadFilters', count=3, confidence=0.60, sample='local bCanLoad, reason = detailsFramework:PassLoadFilters(loadCondition)'},
  },
  ['Macro'] = {
    {name='Macro', count=1, confidence=0.20, sample='local newMacroName = "New @Macro (" .. math.random(10000, 99999) .. ")"'},
  },
  ['StartEditingKeybindSettings'] = {
    {name='StartEditingKeybindSettings', count=1, confidence=0.20, sample='self:StartEditingKeybindSettings("LeftButton", actionIdentifier, keybindTable)'},
  },
  ['GetKeybindCallback'] = {
    {name='GetKeybindCallback', count=1, confidence=0.20, sample='local callbackFunc = self:GetKeybindCallback()'},
  },
  ['OnKeybindNameChange'] = {
    {name='OnKeybindNameChange', count=2, confidence=0.40, sample='--self:OnKeybindNameChange(text)'},
  },
  ['OnKeybindIconChange'] = {
    {name='OnKeybindIconChange', count=2, confidence=0.40, sample='--self:OnKeybindIconChange(texture)'},
  },
  ['OnKeybindMacroChange'] = {
    {name='OnKeybindMacroChange', count=1, confidence=0.20, sample='self:OnKeybindMacroChange(keybindMacroText)'},
  },
  ['OpenLoadConditionsPanel'] = {
    {name='OpenLoadConditionsPanel', count=2, confidence=0.40, sample='detailsFramework:OpenLoadConditionsPanel(conditionsSettings, onLoadConditionsChange, {title = "Keybind Load Conditions", name = editFrame.keybindTable.name})'},
  },
  ['CreateKeybindFrame'] = {
    {name='CreateKeybindFrame', count=1, confidence=0.20, sample='function detailsFramework:CreateKeybindFrame(parent, name, options, setKeybindCallback, keybindData)'},
  },
  ['IsListening'] = {
    {name='IsListening', count=1, confidence=0.20, sample='if (keyBindFrame:IsListening()) then'},
  },
  ['CreateKeybindScroll'] = {
    {name='CreateKeybindScroll', count=1, confidence=0.20, sample='keyBindFrame:CreateKeybindScroll()'},
  },
  ['CreateKeybindListener'] = {
    {name='CreateKeybindListener', count=1, confidence=0.20, sample='keyBindFrame:CreateKeybindListener()'},
  },
  ['CreateEditPanel'] = {
    {name='CreateEditPanel', count=1, confidence=0.20, sample='keyBindFrame:CreateEditPanel()'},
  },
  ['SetKeybindData'] = {
    {name='SetKeybindData', count=1, confidence=0.20, sample='keyBindFrame:SetKeybindData(keybindData or {})'},
  },
  ['SetKeybindCallback'] = {
    {name='SetKeybindCallback', count=1, confidence=0.20, sample='keyBindFrame:SetKeybindCallback(setKeybindCallback)'},
  },
  ['GetFunction'] = {
    {name='GetFunction', count=2, confidence=0.40, sample='return object:GetFunction()'},
  },
  ['SetMenuSize'] = {
    {name='SetMenuSize', count=3, confidence=0.60, sample='object:SetMenuSize(value, nil)'},
  },
  ['IsText'] = {
    {name='IsText', count=3, confidence=0.60, sample='function DropDownMetaFunctions:IsText()'},
  },
  ['GetMenuSize'] = {
    {name='GetMenuSize', count=1, confidence=0.20, sample='function DropDownMetaFunctions:GetMenuSize()'},
  },
  ['GetTextEntry'] = {
    {name='GetTextEntry', count=2, confidence=0.40, sample='self:GetTextEntry():Enable()'},
  },
  ['GetMenuFrames'] = {
    {name='GetMenuFrames', count=1, confidence=0.20, sample='function DropDownMetaFunctions:GetMenuFrames() --not tested'},
  },
  ['GetFrameForOption'] = {
    {name='GetFrameForOption', count=1, confidence=0.20, sample='function DropDownMetaFunctions:GetFrameForOption(optionsTable, value) --not tested'},
  },
  ['NoOption'] = {
    {name='NoOption', count=6, confidence=1.00, sample='self:NoOption(true)'},
  },
  ['NoOptionSelected'] = {
    {name='NoOptionSelected', count=6, confidence=1.00, sample='self:NoOptionSelected()'},
  },
  ['SelectDelayed'] = {
    {name='SelectDelayed', count=1, confidence=0.20, sample='function DropDownMetaFunctions:SelectDelayed(optionName, byOptionNumber, bOnlyShown, runCallback)'},
  },
  ['Selected'] = {
    {name='Selected', count=6, confidence=1.00, sample='self:Selected(optionTableSelected)'},
  },
  ['SetEmptyTextAndIcon'] = {
    {name='SetEmptyTextAndIcon', count=1, confidence=0.20, sample='function DropDownMetaFunctions:SetEmptyTextAndIcon(text, icon)'},
  },
  ['UseSimpleHeader'] = {
    {name='UseSimpleHeader', count=1, confidence=0.20, sample='function DropDownMetaFunctions:UseSimpleHeader(value)'},
  },
  ['GetLanguageIdForAddonId'] = {
    {name='DF.Language.GetLanguageIdForAddonId', count=2, confidence=0.40, sample='local thisLanguageId = languageId or DF.Language.GetLanguageIdForAddonId(addonId)'},
    {name='GetLanguageIdForAddonId', count=1, confidence=0.20, sample='error("GetLanguageIdForAddonId() param #1 'addonId' must be a string or a table, got: " .. type(addonId) .. ".")'},
  },
  ['DetailsFrameworkDropDownOptionClick'] = {
    {name='DetailsFrameworkDropDownOptionClick', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOptionClick(button)'},
  },
  ['DetailsFrameworkDropDownOptionsFrameOnHide'] = {
    {name='DetailsFrameworkDropDownOptionsFrameOnHide', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOptionsFrameOnHide(self)'},
  },
  ['DetailsFrameworkDropDownOptionOnEnter'] = {
    {name='DetailsFrameworkDropDownOptionOnEnter', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOptionOnEnter(self)'},
  },
  ['DetailsFrameworkDropDownOptionOnLeave'] = {
    {name='DetailsFrameworkDropDownOptionOnLeave', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOptionOnLeave(frame)'},
  },
  ['DetailsFrameworkDropDownOnMouseDown'] = {
    {name='DetailsFrameworkDropDownOnMouseDown', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnMouseDown(button, buttontype)'},
  },
  ['OnMouseDownHook'] = {
    {name='OnMouseDownHook', count=1, confidence=0.20, sample='local interrupt = object.OnMouseDownHook(button, buttontype, optionsTable, scrollFrame, scrollChild, selectedTexture)'},
  },
  ['CreateDropdownButton'] = {
    {name='CreateDropdownButton', count=2, confidence=0.40, sample='thisOptionFrame = DF:CreateDropdownButton(parent, name)'},
  },
  ['HideScroll'] = {
    {name='HideScroll', count=3, confidence=0.60, sample='object:HideScroll()'},
  },
  ['DetailsFrameworkDropDownOnEnter'] = {
    {name='DetailsFrameworkDropDownOnEnter', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnEnter(self)'},
  },
  ['DetailsFrameworkDropDownOnLeave'] = {
    {name='DetailsFrameworkDropDownOnLeave', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnLeave(self)'},
  },
  ['DetailsFrameworkDropDownOnSizeChanged'] = {
    {name='DetailsFrameworkDropDownOnSizeChanged', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnSizeChanged(self)'},
  },
  ['DetailsFrameworkDropDownOnShow'] = {
    {name='DetailsFrameworkDropDownOnShow', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnShow(self)'},
  },
  ['DetailsFrameworkDropDownOnHide'] = {
    {name='DetailsFrameworkDropDownOnHide', count=1, confidence=0.20, sample='function DetailsFrameworkDropDownOnHide(self)'},
  },
  ['RefreshDropIcon'] = {
    {name='RefreshDropIcon', count=2, confidence=0.40, sample='self:RefreshDropIcon()'},
  },
  ['CreateFontListGenerator'] = {
    {name='CreateFontListGenerator', count=3, confidence=0.60, sample='function DF:CreateFontListGenerator(callback, bIncludeDefault)'},
  },
  ['CreateColorListGenerator'] = {
    {name='CreateColorListGenerator', count=3, confidence=0.60, sample='function DF:CreateColorListGenerator(callback)'},
  },
  ['CreateOutlineListGenerator'] = {
    {name='CreateOutlineListGenerator', count=3, confidence=0.60, sample='function DF:CreateOutlineListGenerator(callback)'},
  },
  ['CreateAnchorPointListGenerator'] = {
    {name='CreateAnchorPointListGenerator', count=3, confidence=0.60, sample='function DF:CreateAnchorPointListGenerator(callback)'},
  },
  ['CreateRaidInstanceListGenerator'] = {
    {name='CreateRaidInstanceListGenerator', count=2, confidence=0.40, sample='function DF:CreateRaidInstanceListGenerator(callback)'},
  },
  ['CreateBossListGenerator'] = {
    {name='CreateBossListGenerator', count=3, confidence=0.60, sample='function DF:CreateBossListGenerator(callback, instanceId)'},
  },
  ['CreateAudioListGenerator'] = {
    {name='CreateAudioListGenerator', count=3, confidence=0.60, sample='function DF:CreateAudioListGenerator(callback)'},
  },
  ['CreateFontDropDown'] = {
    {name='CreateFontDropDown', count=2, confidence=0.40, sample='function DF:CreateFontDropDown(parent, callback, default, width, height, member, name, template, bIncludeDefault)'},
  },
  ['CreateColorDropDown'] = {
    {name='CreateColorDropDown', count=2, confidence=0.40, sample='function DF:CreateColorDropDown(parent, callback, default, width, height, member, name, template)'},
  },
  ['CreateOutlineDropDown'] = {
    {name='CreateOutlineDropDown', count=2, confidence=0.40, sample='function DF:CreateOutlineDropDown(parent, callback, default, width, height, member, name, template)'},
  },
  ['CreateAnchorPointDropDown'] = {
    {name='CreateAnchorPointDropDown', count=2, confidence=0.40, sample='function DF:CreateAnchorPointDropDown(parent, callback, default, width, height, member, name, template)'},
  },
  ['CreateAudioDropDown'] = {
    {name='CreateAudioDropDown', count=2, confidence=0.40, sample='function DF:CreateAudioDropDown(parent, callback, default, width, height, member, name, template)'},
  },
  ['CreateRaidInstanceSelectorDroDown'] = {
    {name='CreateRaidInstanceSelectorDroDown', count=1, confidence=0.20, sample='function DF:CreateRaidInstanceSelectorDroDown(parent, callback, default, width, height, member, name, template)'},
  },
  ['CreateBossSelectorDroDown'] = {
    {name='CreateBossSelectorDroDown', count=1, confidence=0.20, sample='function DF:CreateBossSelectorDroDown(parent, callback, instanceId, default, width, height, member, name, template)'},
  },
  ['SetLeftMargin'] = {
    {name='SetLeftMargin', count=1, confidence=0.20, sample='self:SetLeftMargin(iconWidth + 2)'},
  },
  ['SetRightMargin'] = {
    {name='SetRightMargin', count=3, confidence=0.60, sample='self:SetRightMargin(arrow:GetWidth() + 2)'},
  },
  ['CreateDropDownWithText'] = {
    {name='CreateDropDownWithText', count=1, confidence=0.20, sample='function DF:CreateDropDownWithText(parent, func, default, width, height, member, name, template)'},
  },
  ['SetTextOriginal'] = {
    {name='SetTextOriginal', count=2, confidence=0.40, sample='label:SetTextOriginal("")'},
  },
  ['CreateNewDropdownFrame'] = {
    {name='CreateNewDropdownFrame', count=2, confidence=0.40, sample='dropDownObject.dropdown = DF:CreateNewDropdownFrame(parent, name)'},
  },
  ['CreateAddOn'] = {
    {name='CreateAddOn', count=1, confidence=0.20, sample='function detailsFramework:CreateAddOn(name, global_saved, global_table, options_table, broker)'},
  },
  ['SetXAxisData'] = {
    {name='SetXAxisData', count=5, confidence=1.00, sample='---| "value" a fixed table with values is passed by the SetXAxisData() function'},
  },
  ['AddData'] = {
    {name='AddData', count=12, confidence=1.00, sample='---@field Plot fun(self: df_chart, yPointScale: number|nil, bUpdateLabels: boolean|nil, lineId:number?)  draw the graphic using lines and following the data set by SetData() or AddData() in multi chart'},
  },
  ['SetAxesColor'] = {
    {name='SetAxesColor', count=1, confidence=0.20, sample='self:SetAxesColor(red, green, blue, alpha)'},
  },
  ['SetAxesThickness'] = {
    {name='SetAxesThickness', count=1, confidence=0.20, sample='self:SetAxesThickness(thickness)'},
  },
  ['SetXAxisDataType'] = {
    {name='SetXAxisDataType', count=5, confidence=1.00, sample='assert(type(dataType) == "string", "string expected on :SetXAxisDataType(string)")'},
  },
  ['CreateBackdropIndicator'] = {
    {name='CreateBackdropIndicator', count=1, confidence=0.20, sample='self.backdropIndicators[nextIndicator] = self:CreateBackdropIndicator(nextIndicator)'},
  },
  ['GetBackdropIndicator'] = {
    {name='GetBackdropIndicator', count=1, confidence=0.20, sample='local backdropIndicator = self:GetBackdropIndicator()'},
  },
  ['Plot'] = {
    {name='Plot', count=11, confidence=1.00, sample='---when Plot() is called, this function will be called to show the backdrop indicators'},
  },
  ['GetDataSize'] = {
    {name='GetDataSize', count=4, confidence=0.80, sample='local dataSize = self.xAxisDataNumber or self.GetDataSize and self:GetDataSize() or 0'},
  },
  ['CalcYAxisPointForValue'] = {
    {name='CalcYAxisPointForValue', count=2, confidence=0.40, sample='currentYPoint = self:CalcYAxisPointForValue(value, plotFrameHeightScaled)'},
  },
  ['ResetBackdropIndicators'] = {
    {name='ResetBackdropIndicators', count=2, confidence=0.40, sample='self:ResetBackdropIndicators()'},
  },
  ['SetLineThickness'] = {
    {name='SetLineThickness', count=5, confidence=1.00, sample='assert(type(value) == "number", "number expected on :SetLineThickness(number)")'},
  },
  ['SetLineWidth'] = {
    {name='SetLineWidth', count=3, confidence=0.60, sample='--self:SetLineWidth(nil) to erase the fixed value'},
  },
  ['UpdateFrameSizeCache'] = {
    {name='UpdateFrameSizeCache', count=3, confidence=0.60, sample='self:UpdateFrameSizeCache()'},
  },
  ['GetDataFirstValue'] = {
    {name='GetDataFirstValue', count=1, confidence=0.20, sample='local firstValue = self:GetDataFirstValue()'},
  },
  ['GetLineWidth'] = {
    {name='GetLineWidth', count=1, confidence=0.20, sample='local eachLineWidth = self:GetLineWidth()'},
  },
  ['GetFillState'] = {
    {name='GetFillState', count=2, confidence=0.40, sample='local bFillChart, fillLineThickness = self:GetFillState()'},
  },
  ['ShowBackdropIndicators'] = {
    {name='ShowBackdropIndicators', count=2, confidence=0.40, sample='self:ShowBackdropIndicators()'},
  },
  ['SetDataRaw'] = {
    {name='SetDataRaw', count=3, confidence=0.60, sample='chartFrame:SetDataRaw(payload.result)'},
  },
  ['GetDataMinMaxValues'] = {
    {name='GetDataMinMaxValues', count=3, confidence=0.60, sample='local minValue, maxValue = chartFrame:GetDataMinMaxValues()'},
  },
  ['SetBackgroundProcessState'] = {
    {name='SetBackgroundProcessState', count=4, confidence=0.80, sample='mainFrame:SetBackgroundProcessState(false)'},
  },
  ['DataConstructor'] = {
    {name='DataConstructor', count=1, confidence=0.20, sample='chartFrame:DataConstructor()'},
  },
  ['ValueConstructor'] = {
    {name='ValueConstructor', count=2, confidence=0.40, sample='chartFrame:ValueConstructor()'},
  },
  ['ChartFrameConstructor'] = {
    {name='ChartFrameConstructor', count=1, confidence=0.20, sample='chartFrame:ChartFrameConstructor()'},
  },
  ['AddDataChangeCallback'] = {
    {name='AddDataChangeCallback', count=1, confidence=0.20, sample='chartFrame:AddDataChangeCallback(onSetDataCallback)'},
  },
  ['GetChart'] = {
    {name='GetChart', count=1, confidence=0.20, sample='local chartFrame = self:GetChart()'},
  },
  ['GetCharts'] = {
    {name='GetCharts', count=4, confidence=0.80, sample='local charts = self:GetCharts()'},
  },
  ['HideCharts'] = {
    {name='HideCharts', count=1, confidence=0.20, sample='self:HideCharts()'},
  },
  ['GetAmountCharts'] = {
    {name='GetAmountCharts', count=4, confidence=0.80, sample='for i = 1, self:GetAmountCharts() do'},
  },
  ['HasBackgroundProcess'] = {
    {name='HasBackgroundProcess', count=2, confidence=0.40, sample='if (not self:HasBackgroundProcess()) then'},
  },
  ['WaitForBackgroundProcess'] = {
    {name='WaitForBackgroundProcess', count=1, confidence=0.20, sample='multiChartFrame:WaitForBackgroundProcess()'},
  },
  ['SetMaxValueIfBigger'] = {
    {name='SetMaxValueIfBigger', count=1, confidence=0.20, sample='multiChartFrame:SetMaxValueIfBigger(chartFrame:GetMaxValue())'},
  },
  ['SetMinValueIfLower'] = {
    {name='SetMinValueIfLower', count=1, confidence=0.20, sample='multiChartFrame:SetMinValueIfLower(chartFrame:GetMinValue())'},
  },
  ['GetMinValue'] = {
    {name='GetMinValue', count=1, confidence=0.20, sample='multiChartFrame:SetMinValueIfLower(chartFrame:GetMinValue())'},
  },
  ['SetMaxDataSize'] = {
    {name='SetMaxDataSize', count=1, confidence=0.20, sample='multiChartFrame:SetMaxDataSize(dataAmount)'},
  },
  ['SetFillChart'] = {
    {name='SetFillChart', count=2, confidence=0.40, sample='chartFrame:SetFillChart(true, fillLineThickness)'},
  },
  ['GetMaxDataSize'] = {
    {name='GetMaxDataSize', count=1, confidence=0.20, sample='local maxDataSize = multiChartFrame:GetMaxDataSize() --it's not clearing when a new boss is selected'},
  },
  ['UpdateChartNamesIndicator'] = {
    {name='UpdateChartNamesIndicator', count=1, confidence=0.20, sample='multiChartFrame:UpdateChartNamesIndicator()'},
  },
  ['CreateGraphicMultiLineFrame'] = {
    {name='CreateGraphicMultiLineFrame', count=6, confidence=1.00, sample='function detailsFramework:CreateGraphicMultiLineFrame(parent, name)'},
  },
  ['MultiChartFrameConstructor'] = {
    {name='MultiChartFrameConstructor', count=1, confidence=0.20, sample='chartFrame:MultiChartFrameConstructor()'},
  },
  ['UpdateFaux'] = {
    {name='UpdateFaux', count=1, confidence=0.20, sample='self:UpdateFaux(#self.data, self.LineAmount, self.LineHeight)'},
  },
  ['GetOffsetFaux'] = {
    {name='GetOffsetFaux', count=1, confidence=0.20, sample='offset = self:GetOffsetFaux()'},
  },
  ['OnVerticalScrollFaux'] = {
    {name='OnVerticalScrollFaux', count=1, confidence=0.20, sample='self:OnVerticalScrollFaux(offset, self.LineHeight, self.Refresh)'},
  },
  ['OnSetData'] = {
    {name='OnSetData', count=1, confidence=0.20, sample='detailsFramework:CoreDispatch((self:GetName() or "ScrollBox") .. ":OnSetData()", self.OnSetData, self, self.data)'},
  },
  ['GetNumFramesCreated'] = {
    {name='GetNumFramesCreated', count=1, confidence=0.20, sample='local totalFramesCreated = self:GetNumFramesCreated()'},
  },
  ['SetNumFramesShown'] = {
    {name='SetNumFramesShown', count=9, confidence=1.00, sample='self:SetNumFramesShown(amountOfFramesToShow)'},
  },
  ['GetChildFramesFaux'] = {
    {name='GetChildFramesFaux', count=2, confidence=0.40, sample='local scrollbar = self:GetChildFramesFaux()'},
  },
  ['SetStepsPerPage'] = {
    {name='SetStepsPerPage', count=1, confidence=0.20, sample='scrollBar:SetStepsPerPage(numToDisplay-1);'},
  },
  ['CreateMenuWithGridScrollBox'] = {
    {name='CreateMenuWithGridScrollBox', count=1, confidence=0.20, sample='function detailsFramework:CreateMenuWithGridScrollBox(parent, name, refreshMeFunc, refreshButtonFunc, clickFunc, onCreateButton, gridScrollBoxOptions)'},
  },
  ['TransformAuraData'] = {
    {name='TransformAuraData', count=4, confidence=0.80, sample='scrollBox:TransformAuraData()'},
  },
  ['SetScrollSpeed'] = {
    {name='SetScrollSpeed', count=1, confidence=0.20, sample='assert(type(speed) == "number", "CanvasScrollBox:SetScrollSpeed(speed): speed must be a number.")'},
  },
  ['GetScrollSpeed'] = {
    {name='GetScrollSpeed', count=1, confidence=0.20, sample='local scrollStep = self:GetScrollSpeed()'},
  },
  ['GetLanguageTable'] = {
    {name='GetLanguageTable', count=2, confidence=0.40, sample='GetLanguageTable(addonId[, languageId])'},
    {name='DetailsFramework.Language.GetLanguageTable', count=3, confidence=0.60, sample='local languageTable = DetailsFramework.Language.GetLanguageTable("Details")'},
    {name='DF.Language.GetLanguageTable', count=3, confidence=0.60, sample='set the language used by default when retriving a languageTable with DF.Language.GetLanguageTable() and not passing the second argument (languageId) within the call'},
  },
  ['SetCurrentLanguage'] = {
    {name='DetailsFramework.Language.SetCurrentLanguage', count=3, confidence=0.60, sample='the default languageId can also be changed by calling DetailsFramework.Language.SetCurrentLanguage() as seen below'},
    {name='SetCurrentLanguage', count=2, confidence=0.40, sample='SetCurrentLanguage(addonId, languageId)'},
    {name='DF.Language.SetCurrentLanguage', count=3, confidence=0.60, sample='--this can be changed later with DF.Language.SetCurrentLanguage(addonId, languageId)'},
  },
  ['ShowOptionsHelp'] = {
    {name='ShowOptionsHelp', count=1, confidence=0.20, sample='ShowOptionsHelp()'},
    {name='DF.Language.ShowOptionsHelp', count=1, confidence=0.20, sample='function DF.Language.ShowOptionsHelp()'},
  },
  ['CreateLanguageSelector'] = {
    {name='CreateLanguageSelector', count=2, confidence=0.40, sample='CreateLanguageSelector(addonId, parent, callback, selectedLanguage)'},
    {name='DF.Language.CreateLanguageSelector', count=1, confidence=0.20, sample='function DF.Language.CreateLanguageSelector(addonId, parent, callback, selectedLanguage)'},
  },
  ['SetFontForLanguageId'] = {
    {name='SetFontForLanguageId', count=3, confidence=0.60, sample='SetFontForLanguageId(addonId, languageId, fontPath)'},
    {name='DF.Language.SetFontForLanguageId', count=1, confidence=0.20, sample='function DF.Language.SetFontForLanguageId(addonId, languageId, fontPath)'},
  },
  ['SetFontByAlphabetOrRegion'] = {
    {name='SetFontByAlphabetOrRegion', count=3, confidence=0.60, sample='SetFontByAlphabetOrRegion(addonId, latin_FontPath, cyrillic_FontPath, china_FontPath, korean_FontPath, taiwan_FontPath)'},
    {name='DF.Language.SetFontByAlphabetOrRegion', count=1, confidence=0.20, sample='function DF.Language.SetFontByAlphabetOrRegion(addonId, latin, cyrillic, china, korean, taiwan)'},
  },
  ['RegisterObject'] = {
    {name='RegisterObject', count=3, confidence=0.60, sample='RegisterObject(addonId, object, phraseId[, silent[, ...]])'},
    {name='DetailsFramework.Language.RegisterObject', count=3, confidence=0.60, sample='the Object need to be already registered with DetailsFramework.Language.RegisterObject()'},
    {name='DF.Language.RegisterObject', count=2, confidence=0.40, sample='function DF.Language.RegisterObject(addonId, object, phraseId, silent, ...)'},
  },
  ['UpdateObjectArguments'] = {
    {name='UpdateObjectArguments', count=3, confidence=0.60, sample='UpdateObjectArguments(addonId, object, ...)'},
    {name='DF.Language.UpdateObjectArguments', count=1, confidence=0.20, sample='function DF.Language.UpdateObjectArguments(addonId, object, ...)'},
  },
  ['RegisterTableKey'] = {
    {name='RegisterTableKey', count=3, confidence=0.60, sample='RegisterTableKey(addonId, table, key, phraseId[, silent[, ...]])'},
    {name='DF.Language.RegisterTableKey', count=2, confidence=0.40, sample='function DF.Language.RegisterTableKey(addonId, table, key, phraseId, silent, ...) --~RegisterTableKey'},
    {name='DetailsFramework.Language.RegisterTableKey', count=1, confidence=0.20, sample='DetailsFramework.Language.RegisterTableKey(addonId, table, key, phraseId, ...)'},
  },
  ['UpdateTableKeyArguments'] = {
    {name='UpdateTableKeyArguments', count=2, confidence=0.40, sample='UpdateTableKeyArguments(addonId, table, key, ...)'},
    {name='DF.Language.UpdateTableKeyArguments', count=1, confidence=0.20, sample='function DF.Language.UpdateTableKeyArguments(addonId, table, key, ...)'},
  },
  ['RegisterObjectWithDefault'] = {
    {name='RegisterObjectWithDefault', count=2, confidence=0.40, sample='RegisterObjectWithDefault(addonId, object, phraseId, defaultText[, ...])'},
    {name='DF.Language.RegisterObjectWithDefault', count=1, confidence=0.20, sample='function DF.Language.RegisterObjectWithDefault(addonId, object, phraseId, defaultText, ...)'},
    {name='DetailsFramework.Language.RegisterObjectWithDefault', count=8, confidence=1.00, sample='DetailsFramework.Language.RegisterObjectWithDefault(languageAddonId, label.widget, namePhraseId, formatOptionNameWithColon(widgetTable.name, useColon))'},
  },
  ['RegisterTableKeyWithDefault'] = {
    {name='RegisterTableKeyWithDefault', count=2, confidence=0.40, sample='RegisterTableKeyWithDefault(addonId, table, key, phraseId, defaultText[, ...])'},
    {name='DF.Language.RegisterTableKeyWithDefault', count=1, confidence=0.20, sample='function DF.Language.RegisterTableKeyWithDefault(addonId, table, key, phraseId, defaultText, ...) --~RegisterTableKeyWithDefault'},
    {name='DetailsFramework.Language.RegisterTableKeyWithDefault', count=6, confidence=1.00, sample='DetailsFramework.Language.RegisterTableKeyWithDefault(languageAddonId, dropdown, "have_tooltip", descPhraseId, widgetTable.desc)'},
  },
  ['CreateLocTable'] = {
    {name='CreateLocTable', count=4, confidence=0.80, sample='CreateLocTable(addonId, phraseId[, shouldRegister = true[, ...]])'},
    {name='DF.Language.CreateLocTable', count=1, confidence=0.20, sample='function DF.Language.CreateLocTable(addonId, phraseId, shouldRegister, silent, ...)'},
  },
  ['SetTextWithLocTable'] = {
    {name='SetTextWithLocTable', count=2, confidence=0.40, sample='SetTextWithLocTable(object, locTable)'},
    {name='DF.Language.SetTextWithLocTable', count=3, confidence=0.60, sample='function DF.Language.SetTextWithLocTable(object, locTable)'},
    {name='Language.SetTextWithLocTable', count=1, confidence=0.20, sample='detailsFramework.Language.SetTextWithLocTable(labelObject.widget, locTable)'},
  },
  ['RegisterObjectWithLocTable'] = {
    {name='RegisterObjectWithLocTable', count=2, confidence=0.40, sample='RegisterObjectWithLocTable(object, locTable[, silence])'},
    {name='DF.Language.RegisterObjectWithLocTable', count=2, confidence=0.40, sample='function DF.Language.RegisterObjectWithLocTable(object, locTable, silence)'},
    {name='Language.RegisterObjectWithLocTable', count=1, confidence=0.20, sample='detailsFramework.Language.RegisterObjectWithLocTable(object.widget or object, locTable)'},
  },
  ['RegisterLanguage'] = {
    {name='DetailsFramework.Language.RegisterLanguage', count=1, confidence=0.20, sample='--new non-native game languages registered with DetailsFramework.Language.RegisterLanguage() will be added to this table'},
    {name='RegisterLanguage', count=1, confidence=0.20, sample='["RegisterLanguage"] = "RegisterLanguage(addonID, languageID[, gameLanguageOnly])",'},
    {name='DF.Language.RegisterLanguage', count=1, confidence=0.20, sample='function DF.Language.RegisterLanguage(addonId, languageId, bNotSupportedWoWLanguage, languageName, languageFont)  --~RegisterLanguage'},
  },
  ['English'] = {
    {name='English', count=1, confidence=0.20, sample='enUS = {text = "English (US)", font = "Fonts\\FRIZQT__.TTF"},'},
  },
  ['UnpackLocTable'] = {
    {name='UnpackLocTable', count=1, confidence=0.20, sample='["UnpackLocTable"] = "UnpackLocTable(locTable)",'},
    {name='DF.Language.UnpackLocTable', count=4, confidence=0.80, sample='function DF.Language.UnpackLocTable(locTable)'},
  },
  ['CanRegisterLocTable'] = {
    {name='CanRegisterLocTable', count=1, confidence=0.20, sample='["CanRegisterLocTable"] = "CanRegisterLocTable(locTable)",'},
    {name='DF.Language.CanRegisterLocTable', count=2, confidence=0.40, sample='function DF.Language.CanRegisterLocTable(locTable)'},
  },
  ['DoesPhraseIDExistsInDefaultLanguage'] = {
    {name='DF.Language.DoesPhraseIDExistsInDefaultLanguage', count=1, confidence=0.20, sample='function DF.Language.DoesPhraseIDExistsInDefaultLanguage(addonId, key)  --~DoesPhraseIDExistsInDefaultLanguage'},
    {name='DoesPhraseIDExistsInDefaultLanguage', count=1, confidence=0.20, sample='error("DoesPhraseIDExistsInDefaultLanguage() param #1 'addonId' must be a string or a table, got: " .. type(addonId) .. ".")'},
    {name='Language.DoesPhraseIDExistsInDefaultLanguage', count=3, confidence=0.60, sample='local hasValue = detailsFramework.Language.DoesPhraseIDExistsInDefaultLanguage(languageAddonId, embedPhraseId or keyName)'},
  },
  ['SetAddonID'] = {
    {name='SetAddonID', count=1, confidence=0.20, sample='languageSelector:SetAddonID(addonId)'},
  },
  ['GetMousePosition'] = {
    {name='GetMousePosition', count=1, confidence=0.20, sample='---@field GetCursorPosition fun(self:table) : number, number return the mouse position scaled by UIScale, use :SetPoint("bottomleft", UIParent, "bottomleft", DetailsFramework:GetMousePosition()) to anchor a frame to where the mouse is'},
  },
  ['CreateErrorLabel'] = {
    {name='CreateErrorLabel', count=1, confidence=0.20, sample='function detailsFramework:CreateErrorLabel(parent, text, size, color, layer, name)'},
  },
  ['AddHelp'] = {
    {name='AddHelp', count=1, confidence=0.20, sample='function HelpMetaFunctions:AddHelp (width, height, x, y, buttonX, buttonY, text, anchor)'},
  },
  ['ShowHelp'] = {
    {name='ShowHelp', count=2, confidence=0.40, sample='function HelpMetaFunctions:ShowHelp()'},
  },
  ['HelpPlate_IsShowing'] = {
    {name='HelpPlate_IsShowing', count=1, confidence=0.20, sample='if (not HelpPlate_IsShowing (self.helpTable)) then'},
  },
  ['HelpPlate_Show'] = {
    {name='HelpPlate_Show', count=1, confidence=0.20, sample='HelpPlate_Show (self.helpTable, self.frame, self.button, true)'},
  },
  ['HelpPlate_Hide'] = {
    {name='HelpPlate_Hide', count=1, confidence=0.20, sample='HelpPlate_Hide (true)'},
  },
  ['NewHelp'] = {
    {name='NewHelp', count=1, confidence=0.20, sample='function DF:NewHelp (parent, width, height, x, y, buttonWidth, buttonHeight, name)'},
  },
  ['CreateCoolTip'] = {
    {name='CreateCoolTip', count=2, confidence=0.40, sample='function DF:CreateCoolTip()'},
  },
  ['PrintDebug'] = {
    {name='PrintDebug', count=23, confidence=1.00, sample='function gameCooltip:PrintDebug(...)'},
  },
  ['SetDebug'] = {
    {name='SetDebug', count=1, confidence=0.20, sample='function gameCooltip:SetDebug(bDebugState)'},
  },
  ['ParseMenuType'] = {
    {name='ParseMenuType', count=12, confidence=1.00, sample='function gameCooltip:ParseMenuType(menuType)'},
  },
  ['HideRoundedCorner'] = {
    {name='HideRoundedCorner', count=2, confidence=0.40, sample='function GameCooltip:HideRoundedCorner()'},
  },
  ['SetTitleAnchor'] = {
    {name='SetTitleAnchor', count=1, confidence=0.20, sample='function gameCooltip:SetTitleAnchor(frameId, anchorPoint, ...)'},
  },
  ['GameCooltipButtonMouseDown'] = {
    {name='GameCooltipButtonMouseDown', count=1, confidence=0.20, sample='function GameCooltipButtonMouseDown(button)'},
  },
  ['GameCooltipButtonMouseUp'] = {
    {name='GameCooltipButtonMouseUp', count=1, confidence=0.20, sample='function GameCooltipButtonMouseUp(button)'},
  },
  ['CreateMainFrameButton'] = {
    {name='CreateMainFrameButton', count=3, confidence=0.60, sample='function gameCooltip:CreateMainFrameButton(i)'},
  },
  ['CreateButtonOnSecondFrame'] = {
    {name='CreateButtonOnSecondFrame', count=3, confidence=0.60, sample='function gameCooltip:CreateButtonOnSecondFrame(i)'},
  },
  ['HideSelectedTexture'] = {
    {name='HideSelectedTexture', count=7, confidence=1.00, sample='function gameCooltip:HideSelectedTexture(frame)'},
  },
  ['ShowSelectedTexture'] = {
    {name='ShowSelectedTexture', count=6, confidence=1.00, sample='function gameCooltip:ShowSelectedTexture(frame)'},
  },
  ['SetSelectedAnchor'] = {
    {name='SetSelectedAnchor', count=8, confidence=1.00, sample='function gameCooltip:SetSelectedAnchor(frame, button)'},
  },
  ['TextAndIcon'] = {
    {name='TextAndIcon', count=5, confidence=1.00, sample='function gameCooltip:TextAndIcon(index, frame, menuButton, leftTextSettings, rightTextSettings, leftIconSettings, rightIconSettings, isSecondFrame)'},
  },
  ['LeftTextSpace'] = {
    {name='LeftTextSpace', count=2, confidence=0.40, sample='gameCooltip:LeftTextSpace(menuButton)'},
  },
  ['RefreshSpark'] = {
    {name='RefreshSpark', count=3, confidence=0.60, sample='function gameCooltip:RefreshSpark(menuButton)'},
  },
  ['StatusBar'] = {
    {name='StatusBar', count=5, confidence=1.00, sample='function gameCooltip:StatusBar(menuButton, statusBarSettings)'},
  },
  ['SetupMainButton'] = {
    {name='SetupMainButton', count=2, confidence=0.40, sample='function gameCooltip:SetupMainButton(menuButton, index)'},
  },
  ['SetupButtonOnSecondFrame'] = {
    {name='SetupButtonOnSecondFrame', count=2, confidence=0.40, sample='function gameCooltip:SetupButtonOnSecondFrame(menuButton, index, mainMenuIndex)'},
  },
  ['SetupWallpaper'] = {
    {name='SetupWallpaper', count=5, confidence=1.00, sample='function gameCooltip:SetupWallpaper(wallpaperTable, wallpaper)'},
  },
  ['CreateDivBar'] = {
    {name='CreateDivBar', count=3, confidence=0.60, sample='gameCooltip:CreateDivBar(menuButton)'},
  },
  ['CheckOverlap'] = {
    {name='CheckOverlap', count=2, confidence=0.40, sample='gameCooltip:CheckOverlap()'},
  },
  ['HideSub'] = {
    {name='HideSub', count=1, confidence=0.20, sample='function gameCooltip:HideSub()'},
  },
  ['BuildTooltipSecondFrame'] = {
    {name='BuildTooltipSecondFrame', count=2, confidence=0.40, sample='function gameCooltip:BuildTooltipSecondFrame()'},
  },
  ['IsSpellPassive'] = {
    {name='C_Spell.IsSpellPassive', count=1, confidence=0.20, sample='local bIsPassive = C_Spell.IsSpellPassive(spellId, SPELLBOOK_BANK_PLAYER)'},
  },
  ['GetSpellPowerCost'] = {
    {name='C_Spell.GetSpellPowerCost', count=1, confidence=0.20, sample='local tResourceCost = C_Spell.GetSpellPowerCost(spellId)'},
  },
  ['BuildTooltip'] = {
    {name='BuildTooltip', count=2, confidence=0.40, sample='function gameCooltip:BuildTooltip() --~refresh'},
  },
  ['SetMyPoint'] = {
    {name='SetMyPoint', count=9, confidence=1.00, sample='gameCooltip:SetMyPoint()'},
  },
  ['BuildCooltip'] = {
    {name='BuildCooltip', count=2, confidence=0.40, sample='function gameCooltip:BuildCooltip(host)'},
  },
  ['ClearAllOptions'] = {
    {name='ClearAllOptions', count=3, confidence=0.60, sample='function gameCooltip:ClearAllOptions()'},
  },
  ['SetNpcModel'] = {
    {name='SetNpcModel', count=1, confidence=0.20, sample='function gameCooltip:SetNpcModel(menuType, npcId)'},
  },
  ['IsTexture'] = {
    {name='IsTexture', count=2, confidence=0.40, sample='if (not detailsFramework:IsTexture(iconTexture, bCheckTextureObject)) then'},
  },
  ['AddPopUpFrame'] = {
    {name='AddPopUpFrame', count=1, confidence=0.20, sample='function gameCooltip:AddPopUpFrame(onShowFunc, onHideFunc, param1, param2)'},
  },
  ['AddSpecial'] = {
    {name='AddSpecial', count=1, confidence=0.20, sample='function gameCooltip:AddSpecial(widgetType, index, subIndex, ...)'},
  },
  ['OnLeaveFunc'] = {
    {name='CoolTip.OnLeaveFunc', count=1, confidence=0.20, sample='self.CoolTip.OnLeaveFunc(self)'},
  },
  ['OldOnLeaveScript'] = {
    {name='OldOnLeaveScript', count=1, confidence=0.20, sample='self:OldOnLeaveScript()'},
  },
  ['OnEnterFunc'] = {
    {name='CoolTip.OnEnterFunc', count=1, confidence=0.20, sample='self.CoolTip.OnEnterFunc(self)'},
  },
  ['OldOnEnterScript'] = {
    {name='OldOnEnterScript', count=1, confidence=0.20, sample='self:OldOnEnterScript()'},
  },
  ['QuickTooltip'] = {
    {name='QuickTooltip', count=2, confidence=0.40, sample='function gameCooltip:QuickTooltip(host, ...)'},
  },
  ['InjectQuickTooltip'] = {
    {name='InjectQuickTooltip', count=1, confidence=0.20, sample='function gameCooltip:InjectQuickTooltip(host, ...)'},
  },
  ['SetRoundness'] = {
    {name='SetRoundness', count=12, confidence=1.00, sample='titleBar:SetRoundness(5)'},
  },
  ['CalculateBorderEdgeSize'] = {
    {name='CalculateBorderEdgeSize', count=13, confidence=1.00, sample='local horizontalEdgesNewSize = self:CalculateBorderEdgeSize("horizontal")'},
  },
  ['RoundedCornerConstructor'] = {
    {name='RoundedCornerConstructor', count=4, confidence=0.80, sample='newRoundedPanel:RoundedCornerConstructor()'},
  },
  ['LineIndicatorGetTarget'] = {
    {name='LineIndicatorGetTarget', count=3, confidence=0.60, sample='local targetFrame = self:LineIndicatorGetTarget()'},
  },
  ['GetHorizontalScrolledWidth'] = {
    {name='GetHorizontalScrolledWidth', count=1, confidence=0.20, sample='horizontalScrolled = self:GetHorizontalScrolledWidth() or 0'},
  },
  ['LineIndicatorRefresh'] = {
    {name='LineIndicatorRefresh', count=11, confidence=1.00, sample='self:LineIndicatorRefresh()'},
  },
  ['LineIndicatorGetLine'] = {
    {name='LineIndicatorGetLine', count=2, confidence=0.40, sample='assert(self.lineIndicators, "LineIndicatorGetLine(): LineIndicatorConstructor() not called.")'},
  },
  ['LineIndicatorConstructor'] = {
    {name='LineIndicatorConstructor', count=2, confidence=0.40, sample='assert(self.lineIndicators, "LineIndicatorGetLine(): LineIndicatorConstructor() not called.")'},
  },
  ['LineIndicatorSetElapsedTime'] = {
    {name='LineIndicatorSetElapsedTime', count=2, confidence=0.40, sample='assert(self.lineIndicatorTotalTime > 0, "LineIndicatorSetElapsedTime(self, totalTime) must be called before SetLineIndicatorPosition() with valueType TIME.")'},
  },
  ['SetLineIndicatorPosition'] = {
    {name='SetLineIndicatorPosition', count=1, confidence=0.20, sample='assert(self.lineIndicatorTotalTime > 0, "LineIndicatorSetElapsedTime(self, totalTime) must be called before SetLineIndicatorPosition() with valueType TIME.")'},
  },
  ['LineIndicatorAddLine'] = {
    {name='LineIndicatorAddLine', count=1, confidence=0.20, sample='local line = self:LineIndicatorAddLine(data.value, data.valueType)'},
  },
  ['SetLineIndicatorValueType'] = {
    {name='SetLineIndicatorValueType', count=1, confidence=0.20, sample='assert(valueType == "PERCENT" or valueType == "TIME" or valueType == "PIXELS", "SetLineIndicatorValueType(valueType): valueType must be PERCENT, TIME or PIXELS.")'},
  },
  ['LineIndicatorSetLinePosition'] = {
    {name='LineIndicatorSetLinePosition', count=1, confidence=0.20, sample='self:LineIndicatorSetLinePosition(line, value, valueType or self.lineIndicatorValueType)'},
  },
  ['LineIndicatorRemoveData'] = {
    {name='LineIndicatorRemoveData', count=1, confidence=0.20, sample='assert(type(dataId) == "number" or type(dataId) == "table", "LineIndicatorRemoveData(dataId): dataId must be the data index or a data table.")'},
  },
  ['LineIndicatorSetAllLinesHeight'] = {
    {name='LineIndicatorSetAllLinesHeight', count=1, confidence=0.20, sample='assert(type(height) == "number", "LineIndicatorSetAllLinesHeight(height): height must be a number.")'},
  },
  ['LineIndicatorSetAllLinesWidth'] = {
    {name='LineIndicatorSetAllLinesWidth', count=1, confidence=0.20, sample='assert(type(width) == "number", "LineIndicatorSetAllLinesWidth(width): width must be a number.")'},
  },
  ['LineIndicatorSetLineWidth'] = {
    {name='LineIndicatorSetLineWidth', count=1, confidence=0.20, sample='assert(type(dataId) == "number" or type(dataId) == "table", "LineIndicatorSetLineWidth(dataId): dataId must be the data index or a data table.")'},
  },
  ['LineIndicatorSetLineColor'] = {
    {name='LineIndicatorSetLineColor', count=1, confidence=0.20, sample='assert(type(dataId) == "number" or type(dataId) == "table", "LineIndicatorSetLineColor(dataId): dataId must be the data index or a data table.")'},
  },
  ['LineIndicatorSetLineAlpha'] = {
    {name='LineIndicatorSetLineAlpha', count=1, confidence=0.20, sample='assert(type(dataId) == "number" or type(dataId) == "table", "LineIndicatorSetLineAlpha(dataId): dataId must be the data index or a data table.")'},
  },
  ['GetDesaturated'] = {
    {name='GetDesaturated', count=1, confidence=0.20, sample='return object.image:GetDesaturated()'},
  },
  ['SetGradient'] = {
    {name='SetGradient', count=4, confidence=0.80, sample='object.image:SetGradient(value.gradient, fromColor, toColor)'},
  },
  ['TableIsAtlas'] = {
    {name='TableIsAtlas', count=2, confidence=0.40, sample='function detailsFramework:TableIsAtlas(atlasTale)'},
  },
  ['G_CreateFrame'] = {
    {name='G_CreateFrame', count=2, confidence=0.40, sample='local frame = G_CreateFrame(frameType , name, parent, template, id)'},
  },
  ['FormatCooldownTimeDecimal'] = {
    {name='FormatCooldownTimeDecimal', count=2, confidence=0.40, sample='local formattedTime = (iconFrame.timeRemaining > 0) and (self.options.decimal_timer and iconFrame.parentIconRow.FormatCooldownTimeDecimal(iconFrame.timeRemaining) or iconFrame.parentIconRow.FormatCooldownTime(iconFrame.timeRemaining)) or ""'},
  },
  ['CreateIconRow'] = {
    {name='CreateIconRow', count=1, confidence=0.20, sample='function detailsFramework:CreateIconRow(parent, name, options)'},
  },
  ['SetIconSize'] = {
    {name='SetIconSize', count=1, confidence=0.20, sample='function TimeBarMetaFunctions:SetIconSize(width, height)'},
  },
  ['SetThrottle'] = {
    {name='SetThrottle', count=1, confidence=0.20, sample='function TimeBarMetaFunctions:SetThrottle(seconds)'},
  },
  ['SetDirection'] = {
    {name='SetDirection', count=2, confidence=0.40, sample='function TimeBarMetaFunctions:SetDirection(direction)'},
  },
  ['HasTimer'] = {
    {name='HasTimer', count=1, confidence=0.20, sample='function TimeBarMetaFunctions:HasTimer()'},
  },
  ['StopTimer'] = {
    {name='StopTimer', count=3, confidence=0.60, sample='function TimeBarMetaFunctions:StopTimer()'},
  },
  ['ShowTimer'] = {
    {name='ShowTimer', count=2, confidence=0.40, sample='function TimeBarMetaFunctions:ShowTimer(bShowTimer)'},
  },
  ['ShowSpark'] = {
    {name='ShowSpark', count=2, confidence=0.40, sample='function TimeBarMetaFunctions:ShowSpark(state, alpha, color)'},
  },
  ['SetTitleBarColor'] = {
    {name='SetTitleBarColor', count=1, confidence=0.20, sample='frame:SetTitleBarColor(.2, .2, .2, .5)'},
  },
  ['SetValueOriginal'] = {
    {name='SetValueOriginal', count=1, confidence=0.20, sample='thisWidget.SetValueOriginal(thisWidget, value)'},
  },
  ['GetScrollChild'] = {
    {name='GetScrollChild', count=1, confidence=0.20, sample='parent = parent:GetScrollChild()'},
  },
  ['ClearOptionsPanel'] = {
    {name='ClearOptionsPanel', count=2, confidence=0.40, sample='function detailsFramework:ClearOptionsPanel(frame)'},
  },
  ['SetAsOptionsPanel'] = {
    {name='SetAsOptionsPanel', count=3, confidence=0.60, sample='function detailsFramework:SetAsOptionsPanel(frame)'},
  },
  ['ClearHooks'] = {
    {name='ClearHooks', count=6, confidence=1.00, sample='widgetObject:ClearHooks()'},
  },
  ['RefreshUnsafeOptionsWidgets'] = {
    {name='RefreshUnsafeOptionsWidgets', count=6, confidence=1.00, sample='detailsFramework.RefreshUnsafeOptionsWidgets()'},
  },
  ['BuildMenu22'] = {
    {name='BuildMenu22', count=1, confidence=0.20, sample='detailsFramework:BuildMenu22(parent, menuOptions, xOffset, yOffset, height, useColon, textTemplate, dropdownTemplate, switchTemplate, switchIsCheckbox, sliderTemplate, buttonTemplate, valueChangeHook)'},
  },
  ['CreateInCombatTexture'] = {
    {name='CreateInCombatTexture', count=1, confidence=0.20, sample='function detailsFramework:CreateInCombatTexture(frame)'},
  },
  ['GetBlockUnderMouse'] = {
    {name='GetBlockUnderMouse', count=1, confidence=0.20, sample='local blockUnderMouse = timeline:GetBlockUnderMouse()'},
  },
  ['SetPropagateMouseClicks'] = {
    {name='SetPropagateMouseClicks', count=1, confidence=0.20, sample='self:SetPropagateMouseClicks(true)'},
  },
  ['CreateBlock'] = {
    {name='CreateBlock', count=1, confidence=0.20, sample='block = self:CreateBlock(index)'},
  },
  ['CreateBlockLength'] = {
    {name='TimeLine_LineMixin.CreateBlockLength', count=1, confidence=0.20, sample='detailsFramework.TimeLine_LineMixin.CreateBlockLength(block)'},
  },
  ['UpdateOnClickCallback'] = {
    {name='UpdateOnClickCallback', count=2, confidence=0.40, sample='self:UpdateOnClickCallback()'},
  },
  ['RefreshTimeLine'] = {
    {name='RefreshTimeLine', count=4, confidence=0.80, sample='self:RefreshTimeLine()'},
  },
  ['RefreshResize'] = {
    {name='RefreshResize', count=2, confidence=0.40, sample='self:RefreshResize()'},
  },
  ['GetAllBlocks'] = {
    {name='GetAllBlocks', count=3, confidence=0.60, sample='local allBlocksInTheLine = thisLine:GetAllBlocks()'},
  },
  ['GetBodyWidthUnderMouse'] = {
    {name='GetBodyWidthUnderMouse', count=1, confidence=0.20, sample='local bodyWidthUnderMouse = self:GetBodyWidthUnderMouse()'},
  },
  ['GetTimeUnderMouse'] = {
    {name='GetTimeUnderMouse', count=3, confidence=0.60, sample='time = self:GetTimeUnderMouse()'},
  },
  ['GetEffectivePixelPerSecond'] = {
    {name='GetEffectivePixelPerSecond', count=1, confidence=0.20, sample='local pixelsPerSecond = self:GetEffectivePixelPerSecond()'},
  },
  ['RefreshPerPixelButtons'] = {
    {name='RefreshPerPixelButtons', count=2, confidence=0.40, sample='self:RefreshPerPixelButtons()'},
  },
  ['ResetAllLines'] = {
    {name='ResetAllLines', count=1, confidence=0.20, sample='self:ResetAllLines()'},
  },
  ['SetBlocksFromData'] = {
    {name='SetBlocksFromData', count=1, confidence=0.20, sample='line:SetBlocksFromData() --the function to update runs within the line object'},
  },
  ['LineIndicatorSetXOffset'] = {
    {name='LineIndicatorSetXOffset', count=1, confidence=0.20, sample='self:LineIndicatorSetXOffset(effectiveHeaderWidth)'},
  },
  ['LineIndicatorSetValueType'] = {
    {name='LineIndicatorSetValueType', count=2, confidence=0.40, sample='self:LineIndicatorSetValueType("TIME")'},
  },
  ['LineIndicatorSetScale'] = {
    {name='LineIndicatorSetScale', count=1, confidence=0.20, sample='self:LineIndicatorSetScale(self.currentScale)'},
  },
  ['LineIndicatorSetPixelsPerSecond'] = {
    {name='LineIndicatorSetPixelsPerSecond', count=1, confidence=0.20, sample='self:LineIndicatorSetPixelsPerSecond(self.options.pixels_per_second)'},
  },
  ['CreateTimeLineFrame'] = {
    {name='CreateTimeLineFrame', count=2, confidence=0.40, sample='function detailsFramework:CreateTimeLineFrame(parent, name, timelineOptions, elapsedtimeOptions)'},
  },
  ['LineIndicatorSetTarget'] = {
    {name='LineIndicatorSetTarget', count=1, confidence=0.20, sample='frameCanvas:LineIndicatorSetTarget(frameBody)'},
  },
  ['CreateElapsedTimeFrame'] = {
    {name='CreateElapsedTimeFrame', count=2, confidence=0.40, sample='frameCanvas.elapsedTimeFrame = detailsFramework:CreateElapsedTimeFrame(frameBody, frameCanvas:GetName() and (frameCanvas:GetName() .. "ElapsedTimeFrame"), elapsedtimeOptions)'},
  },
  ['SetHorizontalScroll'] = {
    {name='SetHorizontalScroll', count=1, confidence=0.20, sample='frameCanvas:SetHorizontalScroll(stepValue)'},
  },
  ['CreateDetachedHeader'] = {
    {name='CreateDetachedHeader', count=1, confidence=0.20, sample='headerFrame, headerBody = timelineHeader.CreateDetachedHeader(frameCanvas)'},
  },
  ['OnInit'] = {
    {name='OnInit', count=1, confidence=0.20, sample='function myNewAddonObject.OnInit(self, profile) --fired from detailsFramework at PLAYER_LOGIN'},
  },
  ['GetPixelToUIUnitFactor'] = {
    {name='DFPixelUtil.GetPixelToUIUnitFactor', count=2, confidence=0.40, sample='function DFPixelUtil.GetPixelToUIUnitFactor()'},
  },
  ['GetPhysicalScreenSize'] = {
    {name='GetPhysicalScreenSize', count=1, confidence=0.20, sample='local physicalWidth, physicalHeight = GetPhysicalScreenSize();'},
  },
  ['GetNearestPixelSize'] = {
    {name='DFPixelUtil.GetNearestPixelSize', count=6, confidence=1.00, sample='function DFPixelUtil.GetNearestPixelSize(uiUnitSize, layoutScale, minPixels)'},
  },
  ['SetStatusBarValue'] = {
    {name='DFPixelUtil.SetStatusBarValue', count=1, confidence=0.20, sample='function DFPixelUtil.SetStatusBarValue(statusBar, value)'},
    {name='PixelUtil.SetStatusBarValue', count=2, confidence=0.40, sample='PixelUtil.SetStatusBarValue(self, health)'},
  },
  ['GetLabel'] = {
    {name='GetLabel', count=1, confidence=0.20, sample='local label = self:GetLabel(i)'},
  },
  ['CreateHealthBar'] = {
    {name='CreateHealthBar', count=3, confidence=0.60, sample='DF:CreateHealthBar (parent, name, settingsOverride)'},
  },
  ['OnHealthMaxChange'] = {
    {name='OnHealthMaxChange', count=1, confidence=0.20, sample='self.OnHealthMaxChange(self, self.displayedUnit)'},
  },
  ['OnHealthChange'] = {
    {name='OnHealthChange', count=1, confidence=0.20, sample='self.OnHealthChange(self, self.displayedUnit)'},
  },
  ['UnitGetIncomingHeals'] = {
    {name='UnitGetIncomingHeals', count=1, confidence=0.20, sample='local unitHealIncoming = UnitGetIncomingHeals and self.displayedUnit and UnitGetIncomingHeals(self.displayedUnit) or 0'},
  },
  ['UnitGetTotalHealAbsorbs'] = {
    {name='UnitGetTotalHealAbsorbs', count=1, confidence=0.20, sample='local unitHealAbsorb = UnitGetTotalHealAbsorbs and self.displayedUnit and UnitGetTotalHealAbsorbs(self.displayedUnit) or 0'},
  },
  ['UnitGetTotalAbsorbs'] = {
    {name='UnitGetTotalAbsorbs', count=1, confidence=0.20, sample='local unitDamageAbsorb = self.displayedUnit and UnitGetTotalAbsorbs (self.displayedUnit) or 0'},
  },
  ['UpdateMaxHealth'] = {
    {name='UpdateMaxHealth', count=5, confidence=1.00, sample='self:UpdateMaxHealth()'},
  },
  ['UpdateHealth'] = {
    {name='UpdateHealth', count=7, confidence=1.00, sample='self:UpdateHealth()'},
  },
  ['UpdateHealPrediction'] = {
    {name='UpdateHealPrediction', count=7, confidence=1.00, sample='self:UpdateHealPrediction()'},
  },
  ['CreatePowerBar'] = {
    {name='CreatePowerBar', count=3, confidence=0.60, sample='DF:CreatePowerBar (parent, name, settingsOverride)'},
  },
  ['UpdatePowerBar'] = {
    {name='UpdatePowerBar', count=5, confidence=1.00, sample='self:UpdatePowerBar()'},
  },
  ['UpdatePowerInfo'] = {
    {name='UpdatePowerInfo', count=1, confidence=0.20, sample='self:UpdatePowerInfo()'},
  },
  ['UpdateMaxPower'] = {
    {name='UpdateMaxPower', count=2, confidence=0.40, sample='self:UpdateMaxPower()'},
  },
  ['UpdatePower'] = {
    {name='UpdatePower', count=4, confidence=0.80, sample='self:UpdatePower()'},
  },
  ['UpdatePowerColor'] = {
    {name='UpdatePowerColor', count=1, confidence=0.20, sample='self:UpdatePowerColor()'},
  },
  ['UnitPowerBarID'] = {
    {name='UnitPowerBarID', count=1, confidence=0.20, sample='local barID = UnitPowerBarID(self.displayedUnit)'},
  },
  ['GetUnitPowerBarInfoByID'] = {
    {name='GetUnitPowerBarInfoByID', count=1, confidence=0.20, sample='local barInfo = GetUnitPowerBarInfoByID(barID)'},
  },
  ['GetUnitPowerBarStringsByID'] = {
    {name='GetUnitPowerBarStringsByID', count=1, confidence=0.20, sample='--local name, tooltip, cost = GetUnitPowerBarStringsByID(barID);'},
  },
  ['GetCastColor'] = {
    {name='GetCastColor', count=2, confidence=0.40, sample='local castColor = self:GetCastColor()'},
  },
  ['UNIT_SPELLCAST_STOP'] = {
    {name='UNIT_SPELLCAST_STOP', count=1, confidence=0.20, sample='self.UNIT_SPELLCAST_STOP(self, self.unit, self.unit, self.castID, self.spellID)'},
  },
  ['UNIT_SPELLCAST_CHANNEL_STOP'] = {
    {name='UNIT_SPELLCAST_CHANNEL_STOP', count=2, confidence=0.40, sample='self.UNIT_SPELLCAST_CHANNEL_STOP(self, self.unit, self.unit, self.castID, self.spellID)'},
  },
  ['CancelScheduleToHide'] = {
    {name='CancelScheduleToHide', count=2, confidence=0.40, sample='self:CancelScheduleToHide()'},
  },
  ['Animation_FadeOut'] = {
    {name='Animation_FadeOut', count=3, confidence=0.60, sample='timerObject.castBar:Animation_FadeOut()'},
  },
  ['HasScheduledHide'] = {
    {name='HasScheduledHide', count=3, confidence=0.60, sample='if (self:HasScheduledHide()) then'},
  },
  ['UnitCastingInfo'] = {
    {name='CastInfo.UnitCastingInfo', count=4, confidence=0.80, sample='local name, text, texture, startTime = CastInfo.UnitCastingInfo(self.unit)'},
    {name='UnitCastingInfo', count=1, confidence=0.20, sample='return LibCC:UnitCastingInfo (unit)'},
  },
  ['UpdateCastingInfo'] = {
    {name='UpdateCastingInfo', count=3, confidence=0.60, sample='self:UpdateCastingInfo(self.unit)'},
  },
  ['UnitChannelInfo'] = {
    {name='CastInfo.UnitChannelInfo', count=4, confidence=0.80, sample='local name, text, texture, endTime = CastInfo.UnitChannelInfo(self.unit)'},
    {name='UnitChannelInfo', count=1, confidence=0.20, sample='return LibCC:UnitChannelInfo (unit)'},
  },
  ['UpdateChannelInfo'] = {
    {name='UpdateChannelInfo', count=3, confidence=0.60, sample='self:UpdateChannelInfo(self.unit)'},
  },
  ['CheckCastIsDone'] = {
    {name='CheckCastIsDone', count=2, confidence=0.40, sample='if (self:CheckCastIsDone()) then'},
  },
  ['CreateOrUpdateEmpoweredPips'] = {
    {name='CreateOrUpdateEmpoweredPips', count=3, confidence=0.60, sample='self:CreateOrUpdateEmpoweredPips()'},
  },
  ['OnTick_Casting'] = {
    {name='OnTick_Casting', count=1, confidence=0.20, sample='if (not self:OnTick_Casting(deltaTime)) then'},
  },
  ['OnTick_LazyTick'] = {
    {name='OnTick_LazyTick', count=2, confidence=0.40, sample='self:OnTick_LazyTick()'},
  },
  ['OnTick_Channeling'] = {
    {name='OnTick_Channeling', count=1, confidence=0.20, sample='if (not self:OnTick_Channeling(deltaTime)) then'},
  },
  ['ScheduleToHide'] = {
    {name='ScheduleToHide', count=6, confidence=1.00, sample='self:ScheduleToHide(false)'},
  },
  ['Animation_StopAllAnimations'] = {
    {name='Animation_StopAllAnimations', count=2, confidence=0.40, sample='self:Animation_StopAllAnimations()'},
  },
  ['UpdateCastColor'] = {
    {name='UpdateCastColor', count=7, confidence=1.00, sample='self:UpdateCastColor()'},
  },
  ['Animation_FadeIn'] = {
    {name='Animation_FadeIn', count=2, confidence=0.40, sample='self:Animation_FadeIn()'},
  },
  ['UpdateInterruptState'] = {
    {name='UpdateInterruptState', count=4, confidence=0.80, sample='self:UpdateInterruptState()'},
  },
  ['GetUnitEmpowerHoldAtMaxTime'] = {
    {name='GetUnitEmpowerHoldAtMaxTime', count=1, confidence=0.20, sample='self.holdAtMaxTime = GetUnitEmpowerHoldAtMaxTime(self.unit)'},
  },
  ['GetUnitEmpowerStageDuration'] = {
    {name='GetUnitEmpowerStageDuration', count=1, confidence=0.20, sample='finish = lastStageEndTime + GetUnitEmpowerStageDuration(unit, i - 1) / 1000,'},
  },
  ['Animation_Flash'] = {
    {name='Animation_Flash', count=2, confidence=0.40, sample='self:Animation_Flash()'},
  },
  ['UNIT_SPELLCAST_CHANNEL_START'] = {
    {name='UNIT_SPELLCAST_CHANNEL_START', count=1, confidence=0.20, sample='self:UNIT_SPELLCAST_CHANNEL_START(unit, ...)'},
  },
  ['UNIT_SPELLCAST_CHANNEL_UPDATE'] = {
    {name='UNIT_SPELLCAST_CHANNEL_UPDATE', count=1, confidence=0.20, sample='self:UNIT_SPELLCAST_CHANNEL_UPDATE(unit, ...)'},
  },
  ['CreateUnitFrame'] = {
    {name='CreateUnitFrame', count=2, confidence=0.40, sample='DF:CreateUnitFrame(parent, name, settingsOverride)'},
  },
  ['UpdateUnitFrame'] = {
    {name='UpdateUnitFrame', count=6, confidence=1.00, sample='self:UpdateUnitFrame()'},
  },
  ['UnitHasVehicleUI'] = {
    {name='UnitHasVehicleUI', count=1, confidence=0.20, sample='local unitPossessVehicle = (IS_WOW_PROJECT_MAINLINE) and UnitHasVehicleUI(self.unit)	or false'},
  },
  ['UpdateAllWidgets'] = {
    {name='UpdateAllWidgets', count=4, confidence=0.80, sample='self:UpdateAllWidgets()'},
  },
  ['SetHealthBarColor'] = {
    {name='SetHealthBarColor', count=10, confidence=1.00, sample='self:SetHealthBarColor(r, g, b)'},
  },
  ['UpdateName'] = {
    {name='UpdateName', count=3, confidence=0.60, sample='self:UpdateName()'},
  },
  ['UpdateTargetOverlay'] = {
    {name='UpdateTargetOverlay', count=2, confidence=0.40, sample='self:UpdateTargetOverlay()'},
  },
  ['UpdateHealthColor'] = {
    {name='UpdateHealthColor', count=2, confidence=0.40, sample='self:UpdateHealthColor()'},
  },
  ['CheckVehiclePossession'] = {
    {name='CheckVehiclePossession', count=1, confidence=0.20, sample='local unitInVehicle = self:CheckVehiclePossession()'},
  },
  ['LoadLCC'] = {
    {name='LoadLCC', count=2, confidence=0.40, sample='function detailsFramework:LoadLCC(LibCC)'},
  },
  ['GetNamePlateForUnit'] = {
    {name='C_NamePlate.GetNamePlateForUnit', count=1, confidence=0.20, sample='local plateFrame = C_NamePlate.GetNamePlateForUnit (unitId)'},
  },
  ['CreateLoadFilterParser'] = {
    {name='CreateLoadFilterParser', count=1, confidence=0.20, sample='function detailsFramework:CreateLoadFilterParser(callback)'},
  },
  ['SelectIndex'] = {
    {name='SelectIndex', count=1, confidence=0.20, sample='--/run Plater.OpenOptionsPanel()PlaterOptionsPanelContainer:SelectIndex(Plater, 14)'},
  },
  ['SetFadeState'] = {
    {name='SetFadeState', count=1, confidence=0.20, sample='radioGroup:SetFadeState(subConfigTable.Enabled)'},
  },
  ['OnRadioStateChanged'] = {
    {name='OnRadioStateChanged', count=4, confidence=0.80, sample='loadConditionsFrame.OnRadioStateChanged(self:GetParent(), loadConditionsFrame.OptionsTable [DBKey])'},
  },
  ['RunCallback'] = {
    {name='RunCallback', count=3, confidence=0.60, sample='loadConditionsFrame.RunCallback()'},
    {name='DF.AdjustmentSliderFunctions.RunCallback', count=5, confidence=1.00, sample='DF.AdjustmentSliderFunctions.RunCallback(adjustmentSlider, -1 * scaleResultBy, 0, true)'},
  },
  ['CanShowTalentWarning'] = {
    {name='CanShowTalentWarning', count=3, confidence=0.60, sample='--loadConditionsFrame.CanShowTalentWarning()'},
  },
  ['CanShowPvPTalentWarning'] = {
    {name='CanShowPvPTalentWarning', count=3, confidence=0.60, sample='--loadConditionsFrame.CanShowPvPTalentWarning()'},
  },
  ['SelectTabByIndex'] = {
    {name='SelectTabByIndex', count=7, confidence=1.00, sample='tabContainer:SelectTabByIndex(tabIndex)'},
  },
  ['SelectTabByName'] = {
    {name='SelectTabByName', count=3, confidence=0.60, sample='error("df_tabcontainer:SelectTabByName(name): param #2 'name' not found within 'tabContainer.AllFramesByName'.")'},
  },
  ['CreateTabContainer'] = {
    {name='CreateTabContainer', count=2, confidence=0.40, sample='function detailsFramework:CreateTabContainer(parent, title, frameName, tabList, optionsTable, hookList, languageInfo)'},
  },
  ['CreateUnderlineGlow'] = {
    {name='CreateUnderlineGlow', count=1, confidence=0.20, sample='tabContainer.CreateUnderlineGlow(tabButton)'},
  },
  ['GetTabFrameByIndex'] = {
    {name='GetTabFrameByIndex', count=1, confidence=0.20, sample='local generalSettingsTabFrame = tabContainer:GetTabFrameByIndex(tabIndex) --using a tabIndex'},
  },
  ['GetTabFrameByName'] = {
    {name='GetTabFrameByName', count=2, confidence=0.40, sample='local advancedSettingsTabFrame = tabContainer:GetTabFrameByName("Advanced Settings") --using the tab text'},
  },
  ['SetTabFramesBackdrop'] = {
    {name='SetTabFramesBackdrop', count=1, confidence=0.20, sample='tabContainer:SetTabFramesBackdrop(backdropTable, backdropColor, backdropBorderColor)'},
  },
  ['HideResizer'] = {
    {name='HideResizer', count=3, confidence=0.60, sample='frameContainer:HideResizer()'},
  },
  ['ShowResizer'] = {
    {name='ShowResizer', count=2, confidence=0.40, sample='frameContainer:ShowResizer()'},
  },
  ['SendSettingChangedCallback'] = {
    {name='SendSettingChangedCallback', count=5, confidence=1.00, sample='frameContainer:SendSettingChangedCallback("is_locked", isLocked)'},
  },
  ['CheckResizeLockedState'] = {
    {name='CheckResizeLockedState', count=2, confidence=0.40, sample='frameContainer:CheckResizeLockedState()'},
  },
  ['CheckMovableLockedState'] = {
    {name='CheckMovableLockedState', count=2, confidence=0.40, sample='frameContainer:CheckMovableLockedState()'},
  },
  ['RefreshChildrenState'] = {
    {name='RefreshChildrenState', count=2, confidence=0.40, sample='frameContainer:RefreshChildrenState()'},
  },
  ['CreateFrameContainer'] = {
    {name='CreateFrameContainer', count=8, confidence=1.00, sample='function DF:CreateFrameContainer(parent, options, frameName)'},
  },
  ['CreateResizers'] = {
    {name='CreateResizers', count=1, confidence=0.20, sample='frameContainer:CreateResizers()'},
  },
  ['CreateMover'] = {
    {name='CreateMover', count=1, confidence=0.20, sample='frameContainer:CreateMover()'},
  },
  ['CreateFrameContainerTest'] = {
    {name='CreateFrameContainerTest', count=4, confidence=0.80, sample='function DF:CreateFrameContainerTest(parent, options, frameName)'},
  },
  ['RegisterChildForDrag'] = {
    {name='RegisterChildForDrag', count=7, confidence=1.00, sample='container:RegisterChildForDrag(frame)'},
  },
  ['SetResizeLocked'] = {
    {name='SetResizeLocked', count=3, confidence=0.60, sample='--container:SetResizeLocked(true)'},
  },
  ['ClearSelectionBoxPoints'] = {
    {name='ClearSelectionBoxPoints', count=2, confidence=0.40, sample='function dragFrame.ClearSelectionBoxPoints()'},
  },
  ['RefreshImageEditor'] = {
    {name='RefreshImageEditor', count=1, confidence=0.20, sample='function DF:RefreshImageEditor()'},
  },
  ['CreateImageEditorFrame'] = {
    {name='CreateImageEditorFrame', count=1, confidence=0.20, sample='CreateImageEditorFrame()'},
  },
  ['AfterCombat'] = {
    {name='Schedules.AfterCombat', count=1, confidence=0.20, sample='function detailsFramework.Schedules.AfterCombat(callback, id, ...)'},
  },
  ['CancelAfterCombat'] = {
    {name='Schedules.CancelAfterCombat', count=1, confidence=0.20, sample='function detailsFramework.Schedules.CancelAfterCombat(id)'},
  },
  ['CancelAllAfterCombat'] = {
    {name='Schedules.CancelAllAfterCombat', count=1, confidence=0.20, sample='function detailsFramework.Schedules.CancelAllAfterCombat()'},
  },
  ['IsAfterCombatScheduled'] = {
    {name='Schedules.IsAfterCombatScheduled', count=1, confidence=0.20, sample='function detailsFramework.Schedules.IsAfterCombatScheduled(id)'},
  },
  ['AfterById'] = {
    {name='Schedules.AfterById', count=1, confidence=0.20, sample='function detailsFramework.Schedules.AfterById(time, callback, id, ...)'},
  },
  ['AfterByIdNoCancel'] = {
    {name='Schedules.AfterByIdNoCancel', count=1, confidence=0.20, sample='function detailsFramework.Schedules.AfterByIdNoCancel(time, callback, id, ...)'},
  },
  ['CreateAxesLines'] = {
    {name='CreateAxesLines', count=2, confidence=0.40, sample='ChartFrameTest:CreateAxesLines(xOffset, yOffset, whichSide, thickness, amountYLabels, amountXLabels, r, g, b, a)'},
  },
  ['SetValueChangedFunction'] = {
    {name='SetValueChangedFunction', count=1, confidence=0.20, sample='function DFSliderMetaFunctions:SetValueChangedFunction(newFunction)'},
  },
  ['PrepareToHide'] = {
    {name='PrepareToHide', count=4, confidence=0.80, sample='DetailsFrameworkSliderButtons1:PrepareToHide()'},
  },
  ['TypeValue'] = {
    {name='TypeValue', count=2, confidence=0.40, sample='function DFSliderMetaFunctions:TypeValue()'},
  },
  ['OnValueChanged'] = {
    {name='OnValueChanged', count=1, confidence=0.20, sample='object.OnValueChanged(slider, object.FixedValue, amt)'},
  },
  ['SwitchOnClick'] = {
    {name='SwitchOnClick', count=1, confidence=0.20, sample='SwitchOnClick (self.widget, nil, bForceValue, value)'},
  },
  ['DumpPayload'] = {
    {name='DumpPayload', count=1, confidence=0.20, sample='local result, errorText = pcall(adjustmentSlider.callback, adjustmentSlider, valueX, valueY, isLiteral, adjustmentSlider:DumpPayload())'},
  },
  ['GetScaleFactor'] = {
    {name='GetScaleFactor', count=2, confidence=0.40, sample='local scaleResultBy = adjustmentSlider:GetScaleFactor()'},
  },
  ['GetLength'] = {
    {name='GetLength', count=1, confidence=0.20, sample='local length = DF:MapRangeClamped(-100, 100, -1, 1, mouseDirection:GetLength())'},
  },
  ['Normalize'] = {
    {name='Normalize', count=1, confidence=0.20, sample='mouseDirection:Normalize()'},
  },
  ['ScaleBy'] = {
    {name='ScaleBy', count=1, confidence=0.20, sample='mouseDirection:ScaleBy(speed * length)'},
  },
  ['DisableOnEnterScripts'] = {
    {name='DisableOnEnterScripts', count=2, confidence=0.40, sample='DF:DisableOnEnterScripts()'},
  },
  ['EnableOnEnterScripts'] = {
    {name='EnableOnEnterScripts', count=2, confidence=0.40, sample='DF:EnableOnEnterScripts()'},
  },
  ['CreateAdjustmentSlider'] = {
    {name='CreateAdjustmentSlider', count=2, confidence=0.40, sample='function DF:CreateAdjustmentSlider(parent, callback, options, name, ...)'},
  },
  ['SetPayload'] = {
    {name='SetPayload', count=1, confidence=0.20, sample='ASFrame:SetPayload(...)'},
  },
  ['CreateOnEnterIgnoreZone'] = {
    {name='CreateOnEnterIgnoreZone', count=3, confidence=0.60, sample='local ignoreOnEnterZone = DF:CreateOnEnterIgnoreZone()'},
  },
  ['UnregisterComm'] = {
    {name='UnregisterComm', count=1, confidence=0.20, sample='_G.NickTag:UnregisterComm ("NickTag")'},
  },
  ['Moonlight'] = {
    {name='Moonlight', count=1, confidence=0.20, sample='{[[Interface\PetBattles\Weather-Moonlight]], "Moonlight (reverse)", {0.94359375, 0.02765625, 1, 0}},'},
  },
  ['CheckName'] = {
    {name='CheckName', count=3, confidence=0.60, sample='local allowNickName = NickTag:CheckName (receivedPersona [CONST_INDEX_NICKNAME])'},
  },
  ['SyncSiblings'] = {
    {name='SyncSiblings', count=3, confidence=0.60, sample='NickTag:SyncSiblings()'},
  },
  ['SendPersona'] = {
    {name='SendPersona', count=3, confidence=0.60, sample='NickTag:SendPersona()'},
  },
  ['ResetCache'] = {
    {name='ResetCache', count=2, confidence=0.40, sample='function NickTag:ResetCache()'},
  },
  ['IncRevision'] = {
    {name='IncRevision', count=4, confidence=0.80, sample='NickTag:IncRevision()'},
  },
  ['SetNicknameAvatar'] = {
    {name='SetNicknameAvatar', count=1, confidence=0.20, sample='function NickTag:SetNicknameAvatar (texture, l, r, t, b)'},
  },
  ['SetAvatar'] = {
    {name='SetAvatar', count=2, confidence=0.40, sample='assert (texture and l and r and t and b, "NickTag 'SetNicknameAvatar' bad format. Usage NickTag:SetAvatar (texturepath [, L, R, T, B] or texturepath [, {L, R, T, B}])")'},
  },
  ['SetNicknameBackground'] = {
    {name='SetNicknameBackground', count=1, confidence=0.20, sample='function NickTag:SetNicknameBackground (path, texcoord, color, silent)'},
  },
  ['GetNicknameAvatar'] = {
    {name='GetNicknameAvatar', count=1, confidence=0.20, sample='function NickTag:GetNicknameAvatar (playerName, default, silent)'},
  },
  ['GetNicknameBackground'] = {
    {name='GetNicknameBackground', count=1, confidence=0.20, sample='function NickTag:GetNicknameBackground (playerName, default_path, default_texcoord, default_color, silent)'},
  },
  ['GetSerial'] = {
    {name='GetSerial', count=1, confidence=0.20, sample='function NickTag:GetSerial (serial, silent)'},
  },
  ['SetBackground'] = {
    {name='SetBackground', count=1, confidence=0.20, sample='function avatar_pick_frame:SetBackground (n)'},
  },
  ['IconCallback'] = {
    {name='IconCallback', count=1, confidence=0.20, sample='function lib:IconCallback(event, name, key, value)'},
  },
  ['UpdateCoord'] = {
    {name='UpdateCoord', count=6, confidence=1.00, sample='lib.objects[name].icon:UpdateCoord()'},
  },
  ['OnTooltipShow'] = {
    {name='OnTooltipShow', count=1, confidence=0.20, sample='obj.OnTooltipShow(lib.tooltip)'},
  },
  ['SetToFinalAlpha'] = {
    {name='SetToFinalAlpha', count=2, confidence=0.40, sample='button.fadeOut:SetToFinalAlpha(true)'},
  },
  ['Unlock'] = {
    {name='Unlock', count=1, confidence=0.20, sample='function lib:Unlock(name)'},
  },
  ['GetMinimapButton'] = {
    {name='GetMinimapButton', count=1, confidence=0.20, sample='function lib:GetMinimapButton(name)'},
  },
  ['OnMinimapEnter'] = {
    {name='OnMinimapEnter', count=1, confidence=0.20, sample='local function OnMinimapEnter()'},
  },
  ['OnMinimapLeave'] = {
    {name='OnMinimapLeave', count=1, confidence=0.20, sample='local function OnMinimapLeave()'},
  },
  ['ShowOnEnter'] = {
    {name='ShowOnEnter', count=1, confidence=0.20, sample='function lib:ShowOnEnter(name, value)'},
  },
  ['GetButtonList'] = {
    {name='GetButtonList', count=1, confidence=0.20, sample='function lib:GetButtonList()'},
  },
  ['SetButtonRadius'] = {
    {name='SetButtonRadius', count=2, confidence=0.40, sample='function lib:SetButtonRadius(radius)'},
  },
  ['SetButtonToPosition'] = {
    {name='SetButtonToPosition', count=1, confidence=0.20, sample='function lib:SetButtonToPosition(button, position)'},
  },
  ['OnEndMythicDungeon'] = {
    {name='OnEndMythicDungeon', count=5, confidence=1.00, sample='mythicDungeonCharts:OnEndMythicDungeon()'},
  },
  ['OnBossDefeated'] = {
    {name='OnBossDefeated', count=1, confidence=0.20, sample='function mythicDungeonCharts:OnBossDefeated()'},
    {name='Details222.MythicPlus.OnBossDefeated', count=2, confidence=0.40, sample='Details222.MythicPlus.OnBossDefeated(encounterID, encounterName) --data capture'},
  },
  ['OnStartMythicDungeon'] = {
    {name='OnStartMythicDungeon', count=3, confidence=0.60, sample='function mythicDungeonCharts:OnStartMythicDungeon()'},
  },
  ['ShowChartFrame'] = {
    {name='DetailsMythicDungeonChartFrame.ShowChartFrame', count=2, confidence=0.40, sample='-- /run _G.DetailsMythicDungeonChartHandler.ShowChart(); DetailsMythicDungeonChartFrame.ShowChartFrame()'},
    {name='ShowChartFrame', count=2, confidence=0.40, sample='function dungeonChartFrame.ShowChartFrame()'},
  },
  ['ShowEndOfMythicPlusPanel'] = {
    {name='ShowEndOfMythicPlusPanel', count=2, confidence=0.40, sample='-- /run mythicDungeonFrames.ShowEndOfMythicPlusPanel()'},
    {name='DetailsMythicDungeonChartHandler.ShowEndOfMythicPlusPanel', count=2, confidence=0.40, sample='-- /run _G.DetailsMythicDungeonChartHandler.ShowEndOfMythicPlusPanel()'},
    {name='MythicDungeonFrames.ShowEndOfMythicPlusPanel', count=3, confidence=0.60, sample='--/run _G.MythicDungeonFrames.ShowEndOfMythicPlusPanel()'},
  },
  ['BossDefeated'] = {
    {name='DetailsMythicPlusFrame.BossDefeated', count=3, confidence=0.60, sample='function DetailsMythicPlusFrame.BossDefeated(this_is_end_end, encounterID, encounterName, difficultyID, raidSize, endStatus) --hold your breath and count to ten'},
    {name='BossDefeated', count=2, confidence=0.40, sample='print("Details!", "BossDefeated() > boss defeated | SegmentID:", Details.MythicPlus.SegmentID, " | mapID:", Details.MythicPlus.DungeonID)'},
  },
  ['MythicDungeonFinished'] = {
    {name='DetailsMythicPlusFrame.MythicDungeonFinished', count=2, confidence=0.40, sample='function DetailsMythicPlusFrame.MythicDungeonFinished(bFromZoneLeft)'},
    {name='MythicDungeonFinished', count=9, confidence=1.00, sample='print("Details!", "MythicDungeonFinished() > the dungeon was a Mythic+ and just ended.")'},
  },
  ['MergeTrashAfterLastBoss'] = {
    {name='Details222.MythicPlus.MergeTrashAfterLastBoss', count=2, confidence=0.40, sample='Details222.MythicPlus.MergeTrashAfterLastBoss()'},
  },
  ['MergeSegmentsOnEnd'] = {
    {name='DetailsMythicPlusFrame.MergeSegmentsOnEnd', count=2, confidence=0.40, sample='DetailsMythicPlusFrame.MergeSegmentsOnEnd()'},
    {name='MergeSegmentsOnEnd', count=5, confidence=1.00, sample='print("Details!", "MergeSegmentsOnEnd() > starting to merge mythic segments.", "InCombatLockdown():", InCombatLockdown())'},
  },
  ['OnChallengeModeStart'] = {
    {name='DetailsMythicPlusFrame.OnChallengeModeStart', count=1, confidence=0.20, sample='function DetailsMythicPlusFrame.OnChallengeModeStart()'},
    {name='OnChallengeModeStart', count=1, confidence=0.20, sample='Details222.MythicPlus.LogStep("OnChallengeModeStart()")'},
  },
  ['SaveMythicPlusStats'] = {
    {name='DetailsMythicPlusFrame.SaveMythicPlusStats', count=2, confidence=0.40, sample='DetailsMythicPlusFrame.SaveMythicPlusStats(...)'},
  },
  ['GetLatestRunId'] = {
    {name='DetailsMythicPlus.GetLatestRunId', count=1, confidence=0.20, sample='runId = DetailsMythicPlus.GetLatestRunId() or 0'},
  },
  ['MergeTrashCleanup'] = {
    {name='DetailsMythicPlusFrame.MergeTrashCleanup', count=2, confidence=0.40, sample='DetailsMythicPlusFrame.MergeTrashCleanup()'},
    {name='MergeTrashCleanup', count=2, confidence=0.40, sample='print("Details!", "MergeTrashCleanup() > running", DetailsMythicPlusFrame.TrashMergeScheduled and #DetailsMythicPlusFrame.TrashMergeScheduled)'},
  },
  ['MergeRemainingTrashAfterAllBossesDone'] = {
    {name='DetailsMythicPlusFrame.MergeRemainingTrashAfterAllBossesDone', count=2, confidence=0.40, sample='function DetailsMythicPlusFrame.MergeRemainingTrashAfterAllBossesDone()'},
    {name='MergeRemainingTrashAfterAllBossesDone', count=7, confidence=1.00, sample='print("Details!", "MergeRemainingTrashAfterAllBossesDone() > running, #segments: ", #DetailsMythicPlusFrame.TrashMergeScheduled2, "trash overall table:", DetailsMythicPlusFrame.TrashMergeScheduled2_OverallCombat)'},
  },
  ['Swapper'] = {
    {name='Swapper', count=1, confidence=0.20, sample='print("|cFFFFFF00Details Swapper (dev):|r", ...)'},
  },
  ['SwapperGetEncounterData'] = {
    {name='SwapperGetEncounterData', count=5, confidence=1.00, sample='---@field SwapperFreezeDamage fun(self:details) get damage done by players and store in Details:SwapperGetEncounterData()'},
  },
  ['GetDamageWindow'] = {
    {name='GetDamageWindow', count=2, confidence=0.40, sample='function Details:GetDamageWindow()'},
  },
  ['SwapperFreezeDamage'] = {
    {name='SwapperFreezeDamage', count=2, confidence=0.40, sample='function Details:SwapperFreezeDamage()'},
  },
  ['SwapperFreezeDamageOnTarget'] = {
    {name='SwapperFreezeDamageOnTarget', count=2, confidence=0.40, sample='function Details:SwapperFreezeDamageOnTarget(targetName)'},
  },
  ['SwapperRestoreWindow'] = {
    {name='SwapperRestoreWindow', count=3, confidence=0.60, sample='function Details:SwapperRestoreWindow()'},
  },
  ['SwapperGetWindow'] = {
    {name='SwapperGetWindow', count=3, confidence=0.60, sample='local swappedWindow = Details:SwapperGetWindow()'},
  },
  ['SwapperSetCustomDisplay'] = {
    {name='SwapperSetCustomDisplay', count=2, confidence=0.40, sample='function Details:SwapperSetCustomDisplay(instanceObject, customDisplayName, customDisplayIcon, customDisplaySearchCode)'},
  },
  ['GetNumWindowsCreated'] = {
    {name='GetNumWindowsCreated', count=2, confidence=0.40, sample='function AllInOneWindow:GetNumWindowsCreated()'},
  },
  ['RefreshWindowFrame'] = {
    {name='RefreshWindowFrame', count=2, confidence=0.40, sample='AllInOneWindow:RefreshWindowFrame(headerFrame:GetParent())'},
  },
  ['CreateWindowFrame'] = {
    {name='CreateWindowFrame', count=1, confidence=0.20, sample='function AllInOneWindow:CreateWindowFrame()'},
  },
  ['SetColumnSettingChangedCallback'] = {
    {name='SetColumnSettingChangedCallback', count=6, confidence=1.00, sample='header:SetColumnSettingChangedCallback(onHeaderColumnOptionChanged)'},
  },
  ['CreateLineForWindow'] = {
    {name='CreateLineForWindow', count=1, confidence=0.20, sample='function AllInOneWindow:CreateLineForWindow(window)'},
  },
  ['RefreshLineForWindow'] = {
    {name='RefreshLineForWindow', count=1, confidence=0.20, sample='function AllInOneWindow:RefreshLineForWindow(window, line)'},
  },
  ['RegisterPluginButton'] = {
    {name='RegisterPluginButton', count=1, confidence=0.20, sample='function breakdownWindowFrame.RegisterPluginButton(newPluginButton, newPluginObject, newPluginAbsoluteName)'},
  },
  ['OnShowPluginFrame'] = {
    {name='Details222.BreakdownWindow.OnShowPluginFrame', count=2, confidence=0.40, sample='Details222.BreakdownWindow.OnShowPluginFrame(pluginObject)'},
  },
  ['HidePluginFrame'] = {
    {name='Details222.BreakdownWindow.HidePluginFrame', count=2, confidence=0.40, sample='function Details222.BreakdownWindow.HidePluginFrame()'},
  },
  ['ApplyTextureSettings'] = {
    {name='Details222.BreakdownWindow.ApplyTextureSettings', count=3, confidence=0.60, sample='function Details222.BreakdownWindow.ApplyTextureSettings(statusBar)'},
  },
  ['GetBreakdownTabsInUse'] = {
    {name='GetBreakdownTabsInUse', count=4, confidence=0.80, sample='function Details:GetBreakdownTabsInUse()'},
  },
  ['GetBreakdownTabByName'] = {
    {name='GetBreakdownTabByName', count=2, confidence=0.40, sample='function Details:GetBreakdownTabByName(tabName, tablePool)'},
  },
  ['GetActiveWindowFromBreakdownWindow'] = {
    {name='GetActiveWindowFromBreakdownWindow', count=9, confidence=1.00, sample='function Details:GetActiveWindowFromBreakdownWindow()'},
  },
  ['GetDisplayTypeFromBreakdownWindow'] = {
    {name='GetDisplayTypeFromBreakdownWindow', count=6, confidence=1.00, sample='function Details:GetDisplayTypeFromBreakdownWindow()'},
  },
  ['GetBreakdownWindow'] = {
    {name='GetBreakdownWindow', count=1, confidence=0.20, sample='function Details:GetBreakdownWindow()'},
  },
  ['RefreshWindowColor'] = {
    {name='RefreshWindowColor', count=2, confidence=0.40, sample='function Details:RefreshWindowColor()'},
  },
  ['SetWindowColor'] = {
    {name='SetWindowColor', count=4, confidence=0.80, sample='Details:SetWindowColor(unpack(colorTable))'},
  },
  ['OpenSpecificBreakdownWindow'] = {
    {name='OpenSpecificBreakdownWindow', count=2, confidence=0.40, sample='function Details:OpenSpecificBreakdownWindow(combatObject, actorName, mainAttribute, subAttribute)'},
  },
  ['CreatePlayerListFrame'] = {
    {name='Details.PlayerBreakdown.CreatePlayerListFrame', count=2, confidence=0.40, sample='Details.PlayerBreakdown.CreatePlayerListFrame()'},
    {name='CreatePlayerListFrame', count=2, confidence=0.40, sample='function breakdownWindowPlayerList.CreatePlayerListFrame()'},
  },
  ['CreateDumpDataFrame'] = {
    {name='Details.PlayerBreakdown.CreateDumpDataFrame', count=2, confidence=0.40, sample='Details.PlayerBreakdown.CreateDumpDataFrame()'},
  },
  ['CreateRightSideBar'] = {
    {name='CreateRightSideBar', count=2, confidence=0.40, sample='--breakdownWindow:CreateRightSideBar()'},
  },
  ['UpdateBreakdownPlayerList'] = {
    {name='UpdateBreakdownPlayerList', count=8, confidence=1.00, sample='Details:UpdateBreakdownPlayerList()'},
  },
  ['InitializeAurasTab'] = {
    {name='InitializeAurasTab', count=2, confidence=0.40, sample='Details:InitializeAurasTab()'},
  },
  ['InitializeCompareTab'] = {
    {name='InitializeCompareTab', count=2, confidence=0.40, sample='Details:InitializeCompareTab()'},
  },
  ['ShowTabs'] = {
    {name='ShowTabs', count=2, confidence=0.40, sample='breakdownWindowFrame:ShowTabs()'},
  },
  ['DoClick'] = {
    {name='DoClick', count=2, confidence=0.40, sample='tabButton:DoClick()'},
  },
  ['OnShowFunc'] = {
    {name='OnShowFunc', count=1, confidence=0.20, sample='tabButton:OnShowFunc()'},
  },
  ['SetSpellAsExpanded'] = {
    {name='Details222.BreakdownWindow.SetSpellAsExpanded', count=2, confidence=0.40, sample='function Details222.BreakdownWindow.SetSpellAsExpanded(key, bIsExpanded)'},
  },
  ['OnReceiveSpellData'] = {
    {name='OnReceiveSpellData', count=3, confidence=0.60, sample='tabButton.OnReceiveSpellData(data, actorObject, combatObject, instance)'},
  },
  ['OnReceiveTargetData'] = {
    {name='OnReceiveTargetData', count=2, confidence=0.40, sample='tabButton.OnReceiveTargetData(targetList, actorObject, combatObject, instance)'},
  },
  ['OnReceiveGenericData'] = {
    {name='OnReceiveGenericData', count=2, confidence=0.40, sample='tabButton.OnReceiveGenericData(resultTable, actorObject, combatObject, instance)'},
  },
  ['CreatePlayerDetailsTab'] = {
    {name='CreatePlayerDetailsTab', count=5, confidence=1.00, sample='function Details:CreatePlayerDetailsTab(tabName, locName, conditionFunc, fillFunc, tabOnClickFunc, onCreateFunc, iconSettings, replace, bIsDefaultTab) --~tab'},
  },
  ['SetShownReportOverlay'] = {
    {name='SetShownReportOverlay', count=5, confidence=1.00, sample='function spellsTab.SetShownReportOverlay(bIsShown)'},
  },
  ['GetSpellBlockFrame'] = {
    {name='GetSpellBlockFrame', count=5, confidence=1.00, sample='function spellsTab.GetSpellBlockFrame()'},
    {name='DetailsSpellBreakdownTab.GetSpellBlockFrame', count=2, confidence=0.40, sample='DetailsSpellBreakdownTab.GetSpellBlockFrame():UpdateBlocks()'},
  },
  ['GetPhaseScrollFrame'] = {
    {name='GetPhaseScrollFrame', count=7, confidence=1.00, sample='function spellsTab.GetPhaseScrollFrame()'},
  },
  ['GetGenericScrollFrame'] = {
    {name='GetGenericScrollFrame', count=7, confidence=1.00, sample='function spellsTab.GetGenericScrollFrame()'},
  },
  ['GetSpellScrollContainer'] = {
    {name='GetSpellScrollContainer', count=8, confidence=1.00, sample='function spellsTab.GetSpellScrollContainer()'},
    {name='DetailsSpellBreakdownTab.GetSpellScrollContainer', count=1, confidence=0.20, sample='local container = DetailsSpellBreakdownTab.GetSpellScrollContainer()'},
  },
  ['GetSpellBlockContainer'] = {
    {name='GetSpellBlockContainer', count=4, confidence=0.80, sample='function spellsTab.GetSpellBlockContainer()'},
  },
  ['GetTargetScrollContainer'] = {
    {name='GetTargetScrollContainer', count=5, confidence=1.00, sample='function spellsTab.GetTargetScrollContainer()'},
    {name='DetailsSpellBreakdownTab.GetTargetScrollContainer', count=1, confidence=0.20, sample='local container = DetailsSpellBreakdownTab.GetTargetScrollContainer()'},
  },
  ['GetPhaseScrollContainer'] = {
    {name='GetPhaseScrollContainer', count=3, confidence=0.60, sample='function spellsTab.GetPhaseScrollContainer()'},
  },
  ['GetGenericScrollContainer'] = {
    {name='GetGenericScrollContainer', count=5, confidence=1.00, sample='function spellsTab.GetGenericScrollContainer()'},
  },
  ['GetScrollFrameByContainerType'] = {
    {name='GetScrollFrameByContainerType', count=2, confidence=0.40, sample='function spellsTab.GetScrollFrameByContainerType(containerType)'},
  },
  ['OnProfileChange'] = {
    {name='OnProfileChange', count=3, confidence=0.60, sample='function spellsTab.OnProfileChange()'},
  },
  ['UpdateHeadersSettings'] = {
    {name='UpdateHeadersSettings', count=14, confidence=1.00, sample='spellsTab.UpdateHeadersSettings("spells")'},
    {name='DetailsSpellBreakdownTab.UpdateHeadersSettings', count=9, confidence=1.00, sample='DetailsSpellBreakdownTab.UpdateHeadersSettings("spells")'},
  },
  ['GetHeaderSettings'] = {
    {name='GetHeaderSettings', count=4, confidence=0.80, sample='function spellsTab.GetHeaderSettings(containerType)'},
  },
  ['OnHeaderColumnOptionChanged'] = {
    {name='OnHeaderColumnOptionChanged', count=1, confidence=0.20, sample='function spellsTab.OnHeaderColumnOptionChanged(headerFrame, optionName, columnName, value)'},
  },
  ['OnAnyColumnHeaderClickCallback'] = {
    {name='OnAnyColumnHeaderClickCallback', count=1, confidence=0.20, sample='function spellsTab.OnAnyColumnHeaderClickCallback()'},
  },
  ['BuildHeaderTable'] = {
    {name='BuildHeaderTable', count=6, confidence=1.00, sample='spellsTab.spellsHeaderData = spellsTab.BuildHeaderTable(containerType)'},
  },
  ['SelectSpellBar'] = {
    {name='SelectSpellBar', count=2, confidence=0.40, sample='function spellsTab.SelectSpellBar(spellBar)'},
  },
  ['HasSelectedSpellBar'] = {
    {name='HasSelectedSpellBar', count=4, confidence=0.80, sample='if (spellsTab.HasSelectedSpellBar()) then --unselect and stop the function if the bar selected is the same as the one being selected'},
  },
  ['GetSelectedSpellBar'] = {
    {name='GetSelectedSpellBar', count=7, confidence=1.00, sample='if (spellsTab.GetSelectedSpellBar() == spellBar) then'},
  },
  ['UnSelectSpellBar'] = {
    {name='UnSelectSpellBar', count=6, confidence=1.00, sample='spellsTab.UnSelectSpellBar()'},
  },
  ['OnShownTab'] = {
    {name='OnShownTab', count=2, confidence=0.40, sample='function spellsTab.OnShownTab()'},
  },
  ['ClearBlocks'] = {
    {name='ClearBlocks', count=3, confidence=0.60, sample='spellsTab.GetSpellBlockFrame():ClearBlocks()'},
  },
  ['OnCreateTabCallback'] = {
    {name='OnCreateTabCallback', count=1, confidence=0.20, sample='function spellsTab.OnCreateTabCallback(tabButton, tabFrame) --~init'},
  },
  ['CreateSpellScrollContainer'] = {
    {name='CreateSpellScrollContainer', count=2, confidence=0.40, sample='spellsTab.CreateSpellScrollContainer(tabFrame) --finished'},
  },
  ['CreateSpellBlockContainer'] = {
    {name='CreateSpellBlockContainer', count=2, confidence=0.40, sample='spellsTab.CreateSpellBlockContainer(tabFrame)'},
  },
  ['CreateTargetContainer'] = {
    {name='CreateTargetContainer', count=2, confidence=0.40, sample='spellsTab.CreateTargetContainer(tabFrame)'},
  },
  ['CreatePhasesContainer'] = {
    {name='CreatePhasesContainer', count=2, confidence=0.40, sample='spellsTab.CreatePhasesContainer(tabFrame)'},
  },
  ['CreateGenericContainers'] = {
    {name='CreateGenericContainers', count=2, confidence=0.40, sample='spellsTab.CreateGenericContainers(tabFrame)'},
  },
  ['CreateReportButtons'] = {
    {name='CreateReportButtons', count=2, confidence=0.40, sample='--spellsTab.CreateReportButtons(tabFrame)'},
  },
  ['GetReportData'] = {
    {name='GetReportData', count=4, confidence=0.80, sample='local reportData = scrollFrame:GetReportData()'},
  },
  ['UpdateBarSettings'] = {
    {name='UpdateBarSettings', count=4, confidence=0.80, sample='function spellsTab.UpdateBarSettings(bar)'},
  },
  ['CreatePhaseBar'] = {
    {name='CreatePhaseBar', count=1, confidence=0.20, sample='function spellsTab.CreatePhaseBar(self, index) --~create ~createphase ~phasebar'},
  },
  ['ResetFramesToHeaderAlignment'] = {
    {name='ResetFramesToHeaderAlignment', count=4, confidence=0.80, sample='phaseBar:ResetFramesToHeaderAlignment()'},
  },
  ['SetSettingChangedCallback'] = {
    {name='SetSettingChangedCallback', count=9, confidence=1.00, sample='container:SetSettingChangedCallback(settingChangedCallbackFunction)'},
  },
  ['BuildPlayerList'] = {
    {name='BuildPlayerList', count=2, confidence=0.40, sample='function breakdownWindowPlayerList.BuildPlayerList()'},
  },
  ['RefreshScrolls'] = {
    {name='Details222.BreakdownWindow.RefreshScrolls', count=1, confidence=0.20, sample='function Details222.BreakdownWindow.RefreshScrolls()'},
  },
  ['GetCastAverage'] = {
    {name='Details.SpellTableMixin.GetCastAverage', count=1, confidence=0.20, sample='return Details.SpellTableMixin.GetCastAverage(spellData, amountOfCasts)'},
  },
  ['BuildSpellTargetFromBreakdownSpellData'] = {
    {name='BuildSpellTargetFromBreakdownSpellData', count=1, confidence=0.20, sample='targets = actorObject:BuildSpellTargetFromBreakdownSpellData(bkSpellData)'},
  },
  ['BuildSpellTargetFromSpellTable'] = {
    {name='BuildSpellTargetFromSpellTable', count=1, confidence=0.20, sample='targets = actorObject:BuildSpellTargetFromSpellTable(spellTable)'},
  },
  ['GetBlocksInUse'] = {
    {name='GetBlocksInUse', count=1, confidence=0.20, sample='local blocksInUse = spellBlockContainer:GetBlocksInUse()'},
  },
  ['GetBlocksAmount'] = {
    {name='GetBlocksAmount', count=3, confidence=0.60, sample='local maxBlocks = spellBlockContainer:GetBlocksAmount()'},
  },
  ['ShowEmptyBlock'] = {
    {name='ShowEmptyBlock', count=2, confidence=0.40, sample='spellBlockContainer:ShowEmptyBlock(i)'},
  },
  ['CreateSpellBlock'] = {
    {name='CreateSpellBlock', count=2, confidence=0.40, sample='function spellsTab.CreateSpellBlock(spellBlockContainer, index) --~breakdownspellblock ~create ~spellblocks'},
  },
  ['UpdateBlocks'] = {
    {name='UpdateBlocks', count=4, confidence=0.80, sample='spellsTab.GetSpellBlockFrame():UpdateBlocks()'},
  },
  ['UpdateShownSpellBlock'] = {
    {name='UpdateShownSpellBlock', count=1, confidence=0.20, sample='function spellsTab.UpdateShownSpellBlock()'},
    {name='DetailsSpellBreakdownTab.UpdateShownSpellBlock', count=1, confidence=0.20, sample='DetailsSpellBreakdownTab.UpdateShownSpellBlock()'},
  },
  ['CreateSpellBar'] = {
    {name='CreateSpellBar', count=1, confidence=0.20, sample='function spellsTab.CreateSpellBar(self, index) --~spellbar ~spellline ~spell ~create ~createline ~createspell ~createspellbar'},
  },
  ['CreateTargetBar'] = {
    {name='CreateTargetBar', count=1, confidence=0.20, sample='function spellsTab.CreateTargetBar(self, index) --~create ~target ~createtarget ~targetbar'},
  },
  ['OpenSpellBreakdownOptions'] = {
    {name='Details.OpenSpellBreakdownOptions', count=1, confidence=0.20, sample='function Details.OpenSpellBreakdownOptions()'},
  },
  ['CreateCloseMinimizeButtons'] = {
    {name='CreateCloseMinimizeButtons', count=2, confidence=0.40, sample='mythicDungeonCharts.CreateCloseMinimizeButtons(dungeonChartFrame)'},
  },
  ['CreateBossWidgets'] = {
    {name='CreateBossWidgets', count=2, confidence=0.40, sample='mythicDungeonCharts.CreateBossWidgets(dungeonChartFrame)'},
  },
  ['ShrinkData'] = {
    {name='ShrinkData', count=1, confidence=0.20, sample='local reducedData = chartFrame:ShrinkData(chartData, shrinkBy)'},
  },
  ['RefreshBossTimeline'] = {
    {name='RefreshBossTimeline', count=2, confidence=0.40, sample='mythicDungeonCharts.RefreshBossTimeline(dungeonChartFrame, mythicDungeonCharts.ChartTable.ElapsedTime)'},
  },
  ['ShowSummary'] = {
    {name='ShowSummary', count=2, confidence=0.40, sample='function mPlus.ShowSummary()'},
  },
  ['UpdateUnitLoot'] = {
    {name='UpdateUnitLoot', count=3, confidence=0.60, sample='function lootFrame.UpdateUnitLoot(playerBanner)'},
  },
  ['StopTextDotAnimation'] = {
    {name='StopTextDotAnimation', count=4, confidence=0.80, sample='playerBanner:StopTextDotAnimation()'},
  },
  ['GetLootSquare'] = {
    {name='GetLootSquare', count=2, confidence=0.40, sample='local lootSquare = playerBanner:GetLootSquare() --internally controls the loot square index'},
  },
  ['IsItemBindToAccountUntilEquip'] = {
    {name='C_Item.IsItemBindToAccountUntilEquip', count=1, confidence=0.20, sample='local bIsAccountBound = C_Item.IsItemBindToAccountUntilEquip(itemLink)'},
  },
  ['GameTooltip_ShowCompareItem'] = {
    {name='GameTooltip_ShowCompareItem', count=1, confidence=0.20, sample='GameTooltip_ShowCompareItem()'},
  },
  ['GameTooltip_HideShoppingTooltips'] = {
    {name='GameTooltip_HideShoppingTooltips', count=1, confidence=0.20, sample='GameTooltip_HideShoppingTooltips(GameTooltip)'},
  },
  ['CreatePlayerPortrait'] = {
    {name='CreatePlayerPortrait', count=2, confidence=0.40, sample='function Details:CreatePlayerPortrait(parent, name)'},
  },
  ['CreateRandomBounceSettings'] = {
    {name='CreateRandomBounceSettings', count=2, confidence=0.40, sample='function playerBanner.BackgroundBannerTexture:CreateRandomBounceSettings()'},
  },
  ['PlayAnimations'] = {
    {name='PlayAnimations', count=1, confidence=0.20, sample='function levelUpTextFrame.PlayAnimations(newLevel)'},
    {name='LevelUpTextFrame.PlayAnimations', count=1, confidence=0.20, sample='unitBanner.LevelUpTextFrame.PlayAnimations(unitKeystoneInfo.level)'},
  },
  ['StartTextDotAnimation'] = {
    {name='StartTextDotAnimation', count=2, confidence=0.40, sample='function playerBanner:StartTextDotAnimation()'},
  },
  ['ClearLootSquares'] = {
    {name='ClearLootSquares', count=2, confidence=0.40, sample='function playerBanner:ClearLootSquares()'},
  },
  ['SetFrameShakeSettings'] = {
    {name='SetFrameShakeSettings', count=1, confidence=0.20, sample='playerBanner.BackgroundBannerTexture:SetFrameShakeSettings(playerBanner.BackgroundBannerTexture.BounceFrameShake, playerBanner.BackgroundBannerTexture:CreateRandomBounceSettings())'},
  },
  ['GetMicroIconForRole'] = {
    {name='GetMicroIconForRole', count=1, confidence=0.20, sample='playerBanner.RoleIcon:SetAtlas(GetMicroIconForRole(role), TextureKitConstants.IgnoreAtlasSize)'},
  },
}