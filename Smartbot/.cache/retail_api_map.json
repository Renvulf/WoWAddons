{
  "symbols": {
    "ErrorLogger_GetErrors": [
      {
        "name": "ErrorLogger_GetErrors",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ErrorLogger_GetErrors()",
        "retail": true
      }
    ],
    "GetDB": [
      {
        "name": "GetDB",
        "count": 1,
        "confidence": 0.2,
        "sample": "local db = BugGrabber:GetDB()",
        "retail": true
      }
    ],
    "GenerateAndShow": [
      {
        "name": "GenerateAndShow",
        "count": 4,
        "confidence": 0.8,
        "sample": "OnAccept = function(self) ZGV.BugReport:GenerateAndShow() end,",
        "retail": true
      }
    ],
    "GetAddOnMetadata": [
      {
        "name": "GetAddOnMetadata",
        "count": 4,
        "confidence": 0.8,
        "sample": "local buggrabber = GetAddOnMetadata(\"BugGrabber\", \"Version\")",
        "retail": true
      },
      {
        "name": "C_AddOns.GetAddOnMetadata",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.version = C_AddOns.GetAddOnMetadata(name,\"version\") .. \".\" .. ZGV.revision",
        "retail": true
      }
    ],
    "LibStub": [
      {
        "name": "LibStub",
        "count": 312,
        "confidence": 1.0,
        "sample": "local lib, minor = LibStub(major, true)",
        "retail": true
      }
    ],
    "StaticPopup_Show": [
      {
        "name": "StaticPopup_Show",
        "count": 4,
        "confidence": 0.8,
        "sample": "StaticPopup_Show(\"ZYGORGUIDESVIEWER_ERROR\")",
        "retail": true
      }
    ],
    "PruneDumps": [
      {
        "name": "PruneDumps",
        "count": 2,
        "confidence": 0.4,
        "sample": "BugReport:PruneDumps()",
        "retail": true
      }
    ],
    "SetDumpFunc": [
      {
        "name": "SetDumpFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "Spoo:SetDumpFunc(function (index,data)",
        "retail": true
      }
    ],
    "ShowDump": [
      {
        "name": "ShowDump",
        "count": 27,
        "confidence": 1.0,
        "sample": "ZGV:ShowDump(index..\" = \"..ZGV:Serialize(data))",
        "retail": true
      }
    ],
    "Serialize": [
      {
        "name": "Serialize",
        "count": 32,
        "confidence": 1.0,
        "sample": "ZGV:ShowDump(index..\" = \"..ZGV:Serialize(data))",
        "retail": true
      }
    ],
    "SkinData": [
      {
        "name": "SkinData",
        "count": 549,
        "confidence": 1.0,
        "sample": "local function SkinData(property)",
        "retail": true
      },
      {
        "name": "ZGV.UI.SkinData",
        "count": 37,
        "confidence": 1.0,
        "sample": "return ZGV.UI.SkinData(property)",
        "retail": true
      },
      {
        "name": "UI.SkinData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UI.SkinData(property,...)",
        "retail": true
      }
    ],
    "CreateDumpFrameBasic": [
      {
        "name": "CreateDumpFrameBasic",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateDumpFrameBasic()",
        "retail": true
      }
    ],
    "CHAIN": [
      {
        "name": "CHAIN",
        "count": 831,
        "confidence": 1.0,
        "sample": "local frame = CHAIN(ui:Create(\"Frame\",UIParent,name))",
        "retail": true
      }
    ],
    "Create": [
      {
        "name": "Create",
        "count": 238,
        "confidence": 1.0,
        "sample": "local frame = CHAIN(ui:Create(\"Frame\",UIParent,name))",
        "retail": true
      },
      {
        "name": "ItemBase.Create",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- Each item has to use ItemBase.Create(widgetType) to",
        "retail": true
      }
    ],
    "SetSize": [
      {
        "name": "SetSize",
        "count": 1066,
        "confidence": 1.0,
        "sample": ":SetSize(900,570)",
        "retail": true
      },
      {
        "name": "PixelUtil.SetSize",
        "count": 34,
        "confidence": 1.0,
        "sample": "PixelUtil.SetSize(buttonObject.button, width or 100, height or 20)",
        "retail": true
      },
      {
        "name": "DFPixelUtil.SetSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DFPixelUtil.SetSize(region, width, height, minWidthPixels, minHeightPixels)",
        "retail": true
      }
    ],
    "SetPoint": [
      {
        "name": "SetPoint",
        "count": 4484,
        "confidence": 1.0,
        "sample": ":SetPoint(\"CENTER\", UIParent, \"CENTER\")",
        "retail": true
      },
      {
        "name": "ItemBase.SetPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetPoint(self, ...)",
        "retail": true
      },
      {
        "name": "PixelUtil.SetPoint",
        "count": 179,
        "confidence": 1.0,
        "sample": "PixelUtil.SetPoint(titleBarTools, \"topleft\", optionsLeftSideBarMenu, \"topleft\", 2, -3)",
        "retail": true
      },
      {
        "name": "DFPixelUtil.SetPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DFPixelUtil.SetPoint(region, point, relativeTo, relativePoint, offsetX, offsetY, minOffsetXPixels, minOffsetYPixels)",
        "retail": true
      }
    ],
    "SetFrameStrata": [
      {
        "name": "SetFrameStrata",
        "count": 224,
        "confidence": 1.0,
        "sample": ":SetFrameStrata(\"FULLSCREEN\")",
        "retail": true
      }
    ],
    "Hide": [
      {
        "name": "Hide",
        "count": 2224,
        "confidence": 1.0,
        "sample": ":Hide()",
        "retail": true
      },
      {
        "name": "ItemBase.Hide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.Hide(self)",
        "retail": true
      }
    ],
    "CanDrag": [
      {
        "name": "CanDrag",
        "count": 30,
        "confidence": 1.0,
        "sample": "if ZGV.DEV then frame:CanDrag(true) end",
        "retail": true
      }
    ],
    "SetBackdrop": [
      {
        "name": "SetBackdrop",
        "count": 370,
        "confidence": 1.0,
        "sample": ":SetBackdrop(SkinData(\"BugEditBackdrop\"))",
        "retail": true
      }
    ],
    "SetBackdropColor": [
      {
        "name": "SetBackdropColor",
        "count": 503,
        "confidence": 1.0,
        "sample": ":SetBackdropColor(unpack(SkinData(\"BugEditBackdropColor\")))",
        "retail": true
      }
    ],
    "MySetPoint": [
      {
        "name": "MySetPoint",
        "count": 6,
        "confidence": 1.0,
        "sample": ":MySetPoint(\"BOTTOMRIGHT\", frame, \"BOTTOMRIGHT\", -1, 38)",
        "retail": true
      }
    ],
    "HookScript": [
      {
        "name": "HookScript",
        "count": 97,
        "confidence": 1.0,
        "sample": ":HookScript(\"OnShow\",function(me) me.child:SetFocus(true) end)",
        "retail": true
      }
    ],
    "SetFocus": [
      {
        "name": "SetFocus",
        "count": 70,
        "confidence": 1.0,
        "sample": ":HookScript(\"OnShow\",function(me) me.child:SetFocus(true) end)",
        "retail": true
      }
    ],
    "SetScript": [
      {
        "name": "SetScript",
        "count": 1812,
        "confidence": 1.0,
        "sample": "scroll.child:SetScript(\"OnEscapePressed\", function() frame.save=nil frame:Hide() end)",
        "retail": true
      }
    ],
    "CreateFrame": [
      {
        "name": "CreateFrame",
        "count": 955,
        "confidence": 1.0,
        "sample": "local close = CHAIN(CreateFrame(\"Button\", nil, frame))",
        "retail": true
      },
      {
        "name": "Details.AllInOneWindow.CreateFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.AllInOneWindow.CreateFrame(settingId)",
        "retail": true
      }
    ],
    "AssignToButton": [
      {
        "name": "AssignToButton",
        "count": 76,
        "confidence": 1.0,
        "sample": "ZGV.ButtonSets.TitleButtons.CLOSE:AssignToButton(close)",
        "retail": true
      }
    ],
    "CreateFontString": [
      {
        "name": "CreateFontString",
        "count": 566,
        "confidence": 1.0,
        "sample": "local title = CHAIN(frame:CreateFontString(nil,\"OVERLAY\"))",
        "retail": true
      }
    ],
    "SetFont": [
      {
        "name": "SetFont",
        "count": 357,
        "confidence": 1.0,
        "sample": ":SetFont(FONTBOLD,14,\"\")",
        "retail": true
      }
    ],
    "SetJustifyH": [
      {
        "name": "SetJustifyH",
        "count": 289,
        "confidence": 1.0,
        "sample": ":SetJustifyH(\"CENTER\")",
        "retail": true
      }
    ],
    "SetJustifyV": [
      {
        "name": "SetJustifyV",
        "count": 63,
        "confidence": 1.0,
        "sample": ":SetJustifyV(\"TOP\")",
        "retail": true
      }
    ],
    "SetText": [
      {
        "name": "SetText",
        "count": 2137,
        "confidence": 1.0,
        "sample": ":SetText(\"OK\")",
        "retail": true
      },
      {
        "name": "ItemBase.SetText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetText(self, text)",
        "retail": true
      }
    ],
    "SaveDump": [
      {
        "name": "SaveDump",
        "count": 7,
        "confidence": 1.0,
        "sample": "--\t\t:SetScript(\"OnClick\",function(self) if frame.save and frame.timestamp then ZGV:SaveDump(frame.editBox:GetText(),frame.timestamp) frame.save=nil frame.timestamp=nil end  frame:Hide()  end)",
        "retail": true
      }
    ],
    "GetText": [
      {
        "name": "GetText",
        "count": 366,
        "confidence": 1.0,
        "sample": "--\t\t:SetScript(\"OnClick\",function(self) if frame.save and frame.timestamp then ZGV:SaveDump(frame.editBox:GetText(),frame.timestamp) frame.save=nil frame.timestamp=nil end  frame:Hide()  end)",
        "retail": true
      },
      {
        "name": "ItemBase.GetText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.GetText(self)",
        "retail": true
      },
      {
        "name": "DF.Language.GetText",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.label:SetText(DF.Language.GetText(addonId, phraseId))",
        "retail": true
      }
    ],
    "IsShown": [
      {
        "name": "IsShown",
        "count": 291,
        "confidence": 1.0,
        "sample": "if ZygorGuidesViewer_DumpFrameReport and ZygorGuidesViewer_DumpFrameReport:IsShown() then",
        "retail": true
      }
    ],
    "SetPushedBackdropColor": [
      {
        "name": "SetPushedBackdropColor",
        "count": 13,
        "confidence": 1.0,
        "sample": ":SetPushedBackdropColor(unpack(SkinData(\"Accent\")))",
        "retail": true
      }
    ],
    "SetWidth": [
      {
        "name": "SetWidth",
        "count": 742,
        "confidence": 1.0,
        "sample": ":SetWidth(125)",
        "retail": true
      },
      {
        "name": "PixelUtil.SetWidth",
        "count": 30,
        "confidence": 1.0,
        "sample": "PixelUtil.SetWidth(self.button, template.width)",
        "retail": true
      },
      {
        "name": "DFPixelUtil.SetWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DFPixelUtil.SetWidth(region, width, minPixels)",
        "retail": true
      }
    ],
    "Show": [
      {
        "name": "Show",
        "count": 1549,
        "confidence": 1.0,
        "sample": "oldreports.frame:Show()",
        "retail": true
      },
      {
        "name": "ItemBase.Show",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.Show(self)",
        "retail": true
      }
    ],
    "AddItem": [
      {
        "name": "AddItem",
        "count": 25,
        "confidence": 1.0,
        "sample": "oldreports:AddItem(date(\"%m/%d/%y %H:%M:%S\",time),nil,function(self)",
        "retail": true
      }
    ],
    "CreateDumpFrameReport": [
      {
        "name": "CreateDumpFrameReport",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateDumpFrameReport()",
        "retail": true
      }
    ],
    "SetBackdropBorderColor": [
      {
        "name": "SetBackdropBorderColor",
        "count": 306,
        "confidence": 1.0,
        "sample": "frame:SetBackdropBorderColor(0,0,0,1)",
        "retail": true
      }
    ],
    "SetWordWrap": [
      {
        "name": "SetWordWrap",
        "count": 47,
        "confidence": 1.0,
        "sample": ":SetWordWrap(true)",
        "retail": true
      }
    ],
    "SetHideWhenUseless": [
      {
        "name": "SetHideWhenUseless",
        "count": 7,
        "confidence": 1.0,
        "sample": "--:SetHideWhenUseless(1)",
        "retail": true
      }
    ],
    "SetHideWhenUnless": [
      {
        "name": "SetHideWhenUnless",
        "count": 1,
        "confidence": 0.2,
        "sample": "--:SetHideWhenUnless(1)",
        "retail": true
      }
    ],
    "SetMultiLine": [
      {
        "name": "SetMultiLine",
        "count": 11,
        "confidence": 1.0,
        "sample": ":SetMultiLine(true)",
        "retail": true
      }
    ],
    "SetMaxLetters": [
      {
        "name": "SetMaxLetters",
        "count": 13,
        "confidence": 1.0,
        "sample": "--:SetMaxLetters(999999)",
        "retail": true
      }
    ],
    "EnableMouse": [
      {
        "name": "EnableMouse",
        "count": 301,
        "confidence": 1.0,
        "sample": ":EnableMouse(true)",
        "retail": true
      }
    ],
    "SetAutoFocus": [
      {
        "name": "SetAutoFocus",
        "count": 23,
        "confidence": 1.0,
        "sample": ":SetAutoFocus(false)",
        "retail": true
      }
    ],
    "SetHeight": [
      {
        "name": "SetHeight",
        "count": 741,
        "confidence": 1.0,
        "sample": ":SetHeight(270)",
        "retail": true
      },
      {
        "name": "PixelUtil.SetHeight",
        "count": 32,
        "confidence": 1.0,
        "sample": "PixelUtil.SetHeight(self.button, template.height)",
        "retail": true
      },
      {
        "name": "DFPixelUtil.SetHeight",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DFPixelUtil.SetHeight(region, height, minPixels)",
        "retail": true
      }
    ],
    "RegisterForClicks": [
      {
        "name": "RegisterForClicks",
        "count": 67,
        "confidence": 1.0,
        "sample": ":RegisterForClicks(\"LeftButton\")",
        "retail": true
      }
    ],
    "SetAllPoints": [
      {
        "name": "SetAllPoints",
        "count": 253,
        "confidence": 1.0,
        "sample": "frame.edit3Box:SetAllPoints(frame.editFrame3)",
        "retail": true
      }
    ],
    "ClearAllPoints": [
      {
        "name": "ClearAllPoints",
        "count": 572,
        "confidence": 1.0,
        "sample": "frame.viewbut:ClearAllPoints()",
        "retail": true
      }
    ],
    "AddMessageHandler": [
      {
        "name": "AddMessageHandler",
        "count": 45,
        "confidence": 1.0,
        "sample": "ZGV:AddMessageHandler(\"SKIN_UPDATED\",{BugReport,\"ApplySkin\"})",
        "retail": true
      }
    ],
    "ApplySkin": [
      {
        "name": "ApplySkin",
        "count": 99,
        "confidence": 1.0,
        "sample": "BugReport:ApplySkin()",
        "retail": true
      },
      {
        "name": "ItemBase.ApplySkin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.ApplySkin(self)",
        "retail": true
      }
    ],
    "GetReport_Flavor": [
      {
        "name": "GetReport_Flavor",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BugReport:GetReport_Flavor()",
        "retail": true
      }
    ],
    "GetReport_Player_Basic": [
      {
        "name": "GetReport_Player_Basic",
        "count": 4,
        "confidence": 0.8,
        "sample": "function BugReport:GetReport_Player_Basic()",
        "retail": true
      }
    ],
    "GetSpecializationInfo": [
      {
        "name": "GetSpecializationInfo",
        "count": 27,
        "confidence": 1.0,
        "sample": "spec = (select(2,GetSpecializationInfo(GetSpecialization() or 0)))",
        "retail": true
      },
      {
        "name": "C_SpecializationInfo.GetSpecializationInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "out = out .. \"\\n spec \" .. ItemScore.playerspecName  .. \" system \" .. (select(2,C_SpecializationInfo.GetSpecializationInfo(ItemScore.playerspec)))",
        "retail": true
      },
      {
        "name": "DetailsFramework.GetSpecializationInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local specId = DetailsFramework.GetSpecializationInfo(playerSpec)",
        "retail": true
      },
      {
        "name": "DF.GetSpecializationInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF.GetSpecializationInfo(...)",
        "retail": true
      }
    ],
    "GetSpecialization": [
      {
        "name": "GetSpecialization",
        "count": 29,
        "confidence": 1.0,
        "sample": "spec = (select(2,GetSpecializationInfo(GetSpecialization() or 0)))",
        "retail": true
      },
      {
        "name": "DetailsFramework.GetSpecialization",
        "count": 6,
        "confidence": 1.0,
        "sample": "local playerSpec = DetailsFramework.GetSpecialization()",
        "retail": true
      },
      {
        "name": "DF.GetSpecialization",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DF.GetSpecialization()",
        "retail": true
      }
    ],
    "UnitRace": [
      {
        "name": "UnitRace",
        "count": 18,
        "confidence": 1.0,
        "sample": "select(2,UnitRace(\"player\")),",
        "retail": true
      }
    ],
    "UnitClass": [
      {
        "name": "UnitClass",
        "count": 109,
        "confidence": 1.0,
        "sample": "select(2,UnitClass(\"player\")),",
        "retail": true
      }
    ],
    "GetPlayerPreciseLevel": [
      {
        "name": "GetPlayerPreciseLevel",
        "count": 28,
        "confidence": 1.0,
        "sample": "ZGV:GetPlayerPreciseLevel(),",
        "retail": true
      }
    ],
    "UnitFactionGroup": [
      {
        "name": "UnitFactionGroup",
        "count": 527,
        "confidence": 1.0,
        "sample": "UnitFactionGroup(\"player\"),",
        "retail": true
      }
    ],
    "GetReport_Player_Location": [
      {
        "name": "GetReport_Player_Location",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BugReport:GetReport_Player_Location()",
        "retail": true
      }
    ],
    "GetBestMapForUnit": [
      {
        "name": "C_Map.GetBestMapForUnit",
        "count": 29,
        "confidence": 1.0,
        "sample": "local mapid = C_Map.GetBestMapForUnit(\"player\") or -1",
        "retail": true
      }
    ],
    "GetPlayerMapPosition": [
      {
        "name": "C_Map.GetPlayerMapPosition",
        "count": 4,
        "confidence": 0.8,
        "sample": "local coords = C_Map.GetPlayerMapPosition(mapid,\"player\")",
        "retail": true
      },
      {
        "name": "GetPlayerMapPosition",
        "count": 4,
        "confidence": 0.8,
        "sample": "local x,y = GetPlayerMapPosition(\"player\")",
        "retail": true
      }
    ],
    "GetMapNameByID": [
      {
        "name": "ZGV.GetMapNameByID",
        "count": 52,
        "confidence": 1.0,
        "sample": "ZGV.GetMapNameByID(mapid) or \"?\",mapid, (x or 0)*100,(y or 0)*100,",
        "retail": true
      },
      {
        "name": "ZGV.ZGV.GetMapNameByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "if zone then s = s .. (\"(zone %s only)\\n\"):format(ZGV.ZGV.GetMapNameByID(zone)) end",
        "retail": true
      }
    ],
    "GetZoneText": [
      {
        "name": "GetZoneText",
        "count": 7,
        "confidence": 1.0,
        "sample": "GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())",
        "retail": true
      }
    ],
    "GetRealZoneText": [
      {
        "name": "GetRealZoneText",
        "count": 7,
        "confidence": 1.0,
        "sample": "GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())",
        "retail": true
      }
    ],
    "GetSubZoneText": [
      {
        "name": "GetSubZoneText",
        "count": 8,
        "confidence": 1.0,
        "sample": "GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())",
        "retail": true
      }
    ],
    "GetMinimapZoneText": [
      {
        "name": "GetMinimapZoneText",
        "count": 14,
        "confidence": 1.0,
        "sample": "GetZoneText(),GetRealZoneText(),GetSubZoneText(),GetMinimapZoneText())",
        "retail": true
      }
    ],
    "GetReport_Travel": [
      {
        "name": "GetReport_Travel",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BugReport:GetReport_Travel()",
        "retail": true
      }
    ],
    "GetReport": [
      {
        "name": "GetReport",
        "count": 2,
        "confidence": 0.4,
        "sample": "function BugReport:GetReport(maint,flags)",
        "retail": true
      }
    ],
    "GetLocale": [
      {
        "name": "GetLocale",
        "count": 180,
        "confidence": 1.0,
        "sample": "if GetLocale()~=\"enUS\" then",
        "retail": true
      }
    ],
    "UnitName": [
      {
        "name": "UnitName",
        "count": 155,
        "confidence": 1.0,
        "sample": "s = s .. (\"Target: %s ##%s\\n\"):format(UnitName(\"target\"),ZGV.GetTargetId())",
        "retail": true
      }
    ],
    "GetTargetId": [
      {
        "name": "ZGV.GetTargetId",
        "count": 8,
        "confidence": 1.0,
        "sample": "s = s .. (\"Target: %s ##%s\\n\"):format(UnitName(\"target\"),ZGV.GetTargetId())",
        "retail": true
      },
      {
        "name": "GetTargetId",
        "count": 1,
        "confidence": 0.2,
        "sample": "local targetid = self.GetTargetId()",
        "retail": true
      }
    ],
    "GetProfessions": [
      {
        "name": "GetProfessions",
        "count": 6,
        "confidence": 1.0,
        "sample": "local profTable = {GetProfessions()}",
        "retail": true
      }
    ],
    "GetProfessionInfo": [
      {
        "name": "GetProfessionInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local name,_,level,maxlevel=GetProfessionInfo(prof)",
        "retail": true
      }
    ],
    "GetNumAddOns": [
      {
        "name": "C_AddOns.GetNumAddOns",
        "count": 1,
        "confidence": 0.2,
        "sample": "local numAddons  = C_AddOns.GetNumAddOns()",
        "retail": true
      }
    ],
    "GetAddOnInfo": [
      {
        "name": "C_AddOns.GetAddOnInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local name,_,_,enabled = C_AddOns.GetAddOnInfo(i)",
        "retail": true
      },
      {
        "name": "GetAddOnInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local displayname = select(2,GetAddOnInfo(addonName)):gsub(\"ffff0000\",\"fffe6100\")",
        "retail": true
      }
    ],
    "IsComplete": [
      {
        "name": "IsComplete",
        "count": 60,
        "confidence": 1.0,
        "sample": "local complete,possible,progress = step:IsComplete()",
        "retail": true
      },
      {
        "name": "C_QuestLog.IsComplete",
        "count": 1,
        "confidence": 0.2,
        "sample": "quest.complete = C_QuestLog.IsComplete(info.questID)",
        "retail": true
      }
    ],
    "IsAuxiliary": [
      {
        "name": "IsAuxiliary",
        "count": 8,
        "confidence": 1.0,
        "sample": "s = s .. (\"  (%s, %s, %s)\\n\"):format(complete and \"COMPLETE\" or \"incomplete\", possible and \"POSSIBLE\" or \"impossible\", step:IsAuxiliary() and \"AUX\" or \"not aux\")",
        "retail": true
      }
    ],
    "GetItemInfo": [
      {
        "name": "GetItemInfo",
        "count": 95,
        "confidence": 1.0,
        "sample": "local a={ZGV:GetItemInfo(goal.itemid)}",
        "retail": true
      },
      {
        "name": "C_Item.GetItemInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "return C_Item.GetItemInfo(id)",
        "retail": true
      }
    ],
    "GetSpellInfo": [
      {
        "name": "GetSpellInfo",
        "count": 373,
        "confidence": 1.0,
        "sample": "local spellData = GetSpellInfo(goal.castspellid)",
        "retail": true
      },
      {
        "name": "C_Spell.GetSpellInfo",
        "count": 44,
        "confidence": 1.0,
        "sample": "local spellData = C_Spell.GetSpellInfo(spellID)",
        "retail": true
      },
      {
        "name": "Details222.GetSpellInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local spellInfo = {Details222.GetSpellInfo(spellId)}",
        "retail": true
      },
      {
        "name": "Details.GetSpellInfo",
        "count": 24,
        "confidence": 1.0,
        "sample": "local spellName, _, spellIcon = Details.GetSpellInfo(spellId)",
        "retail": true
      }
    ],
    "GetQuestData": [
      {
        "name": "GetQuestData",
        "count": 11,
        "confidence": 1.0,
        "sample": "local questdata,inlog = ZGV.Localizers:GetQuestData(goal.questid)",
        "retail": true
      }
    ],
    "GetStatus": [
      {
        "name": "GetStatus",
        "count": 39,
        "confidence": 1.0,
        "sample": "s = s .. \"    Status: \"..goal:GetStatus()",
        "retail": true
      }
    ],
    "IsCompleteable": [
      {
        "name": "IsCompleteable",
        "count": 12,
        "confidence": 1.0,
        "sample": "if goal:IsCompleteable() then",
        "retail": true
      }
    ],
    "GetNumSkillLines": [
      {
        "name": "GetNumSkillLines",
        "count": 3,
        "confidence": 0.6,
        "sample": "for i=1, GetNumSkillLines() do",
        "retail": true
      }
    ],
    "GetSkillLineInfo": [
      {
        "name": "GetSkillLineInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local skillName, _, _, skillRank, numTempPoints, skillModifier, skillMaxRank, isAbandonable, stepCost, rankCost, minLevel, skillCostType = GetSkillLineInfo(i);",
        "retail": true
      }
    ],
    "GetClassicExpansionLevel": [
      {
        "name": "GetClassicExpansionLevel",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ItemScore.GearFinder.CurrentExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()) or (GetServerExpansionLevel and GetServerExpansionLevel()) or 1",
        "retail": true
      }
    ],
    "GetServerExpansionLevel": [
      {
        "name": "GetServerExpansionLevel",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.ItemScore.GearFinder.CurrentExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()) or (GetServerExpansionLevel and GetServerExpansionLevel()) or 1",
        "retail": true
      }
    ],
    "IsValidDungeon": [
      {
        "name": "IsValidDungeon",
        "count": 3,
        "confidence": 0.6,
        "sample": "local valid, future, ident, maxscale, mythic, comment = ZGV.ItemScore.GearFinder:IsValidDungeon(dungeondata.dungeonmap or dungeondata.dungeon, dungeondata.instanceId)",
        "retail": true
      }
    ],
    "GetContainerNumSlots": [
      {
        "name": "C_Container.GetContainerNumSlots",
        "count": 14,
        "confidence": 1.0,
        "sample": "for slot=1,C_Container.GetContainerNumSlots(bag) do",
        "retail": true
      },
      {
        "name": "GetContainerNumSlots",
        "count": 4,
        "confidence": 0.8,
        "sample": "for bagslot=1, GetContainerNumSlots(bag) do",
        "retail": true
      }
    ],
    "GetContainerItemLink": [
      {
        "name": "C_Container.GetContainerItemLink",
        "count": 10,
        "confidence": 1.0,
        "sample": "local link = C_Container.GetContainerItemLink(bag,slot)",
        "retail": true
      },
      {
        "name": "GetContainerItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local itemLink = GetContainerItemLink(backpackId, slotId)",
        "retail": true
      }
    ],
    "GetContainerItemInfo": [
      {
        "name": "C_Container.GetContainerItemInfo",
        "count": 10,
        "confidence": 1.0,
        "sample": "local item = C_Container.GetContainerItemInfo(bag,slot)",
        "retail": true
      },
      {
        "name": "GetContainerItemInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "i = {GetContainerItemInfo (b, s)}",
        "retail": true
      },
      {
        "name": "Items.GetContainerItemInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework.Items.GetContainerItemInfo(containerIndex, slotIndex)",
        "retail": true
      }
    ],
    "GetAuraDataByIndex": [
      {
        "name": "GetAuraDataByIndex",
        "count": 5,
        "confidence": 1.0,
        "sample": "local buff = GetAuraDataByIndex(\"player\",i,\"HELPFUL\")",
        "retail": true
      },
      {
        "name": "C_UnitAuras.GetAuraDataByIndex",
        "count": 11,
        "confidence": 1.0,
        "sample": "local data = C_UnitAuras.GetAuraDataByIndex(\"target\",i)",
        "retail": true
      }
    ],
    "GetPetActionInfo": [
      {
        "name": "GetPetActionInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "local name,texid = GetPetActionInfo(i)",
        "retail": true
      }
    ],
    "TableKeys": [
      {
        "name": "ZGV.TableKeys",
        "count": 7,
        "confidence": 1.0,
        "sample": "s = s .. table.concat(ZGV.TableKeys(ZGV.db.char.taxis),\" , \")",
        "retail": true
      }
    ],
    "DumpVal": [
      {
        "name": "DumpVal",
        "count": 3,
        "confidence": 0.6,
        "sample": "--s = s .. ZGV:DumpVal(ZGV.quests,0,4,true)",
        "retail": true
      }
    ],
    "Print": [
      {
        "name": "Print",
        "count": 185,
        "confidence": 1.0,
        "sample": "--ZGV:Print(s)",
        "retail": true
      }
    ],
    "Dump": [
      {
        "name": "Dump",
        "count": 18,
        "confidence": 1.0,
        "sample": "s = s .. ZGV.Log:Dump(100)",
        "retail": true
      }
    ],
    "ScheduleTimer": [
      {
        "name": "ScheduleTimer",
        "count": 195,
        "confidence": 1.0,
        "sample": "ZGV:ScheduleTimer(function() Screenshot() end, 0.5)",
        "retail": true
      },
      {
        "name": "AceTimer.ScheduleTimer",
        "count": 4,
        "confidence": 0.8,
        "sample": "newTimer = AceTimer.ScheduleTimer(timer.object, timer.callback, timer.when - GetTime(), timer.arg)",
        "retail": true
      }
    ],
    "Screenshot": [
      {
        "name": "Screenshot",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:ScheduleTimer(function() Screenshot() end, 0.5)",
        "retail": true
      }
    ],
    "ShowReportDialog": [
      {
        "name": "ShowReportDialog",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV:ScheduleTimer(function() self:ShowReportDialog(report) end, 0.6)",
        "retail": true
      }
    ],
    "FormatDumpForUpload": [
      {
        "name": "FormatDumpForUpload",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.db.global.bugreports[timestamp]=self:FormatDumpForUpload(text,header,addonmodule,severity,geardump)",
        "retail": true
      }
    ],
    "Debug": [
      {
        "name": "Debug",
        "count": 863,
        "confidence": 1.0,
        "sample": "ZGV:Debug(\"Guide rating saved for upload.\")",
        "retail": true
      }
    ],
    "GetUniqueId": [
      {
        "name": "GetUniqueId",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BugReport:GetUniqueId()",
        "retail": true
      }
    ],
    "UnitGUID": [
      {
        "name": "UnitGUID",
        "count": 141,
        "confidence": 1.0,
        "sample": "local guid = UnitGUID(\"player\"):gsub(\"Player%-\",\"\")",
        "retail": true
      }
    ],
    "GetTime": [
      {
        "name": "GetTime",
        "count": 355,
        "confidence": 1.0,
        "sample": "local time = (\"%.03f\"):format(GetTime())",
        "retail": true
      }
    ],
    "SimpleDump": [
      {
        "name": "SimpleDump",
        "count": 1,
        "confidence": 0.2,
        "sample": "function BugReport:SimpleDump(tab)",
        "retail": true
      }
    ],
    "GetDumpBody": [
      {
        "name": "GetDumpBody",
        "count": 2,
        "confidence": 0.4,
        "sample": "function BugReport:GetDumpBody(report)",
        "retail": true
      }
    ],
    "HideUIPanel": [
      {
        "name": "HideUIPanel",
        "count": 6,
        "confidence": 1.0,
        "sample": "HideUIPanel(InterfaceOptionsFrame)",
        "retail": true
      }
    ],
    "SetFrameLevel": [
      {
        "name": "SetFrameLevel",
        "count": 293,
        "confidence": 1.0,
        "sample": "f:SetFrameLevel(999)",
        "retail": true
      }
    ],
    "HighlightText": [
      {
        "name": "HighlightText",
        "count": 57,
        "confidence": 1.0,
        "sample": "f.editBox:HighlightText(0)",
        "retail": true
      }
    ],
    "ShowUIPanel": [
      {
        "name": "ShowUIPanel",
        "count": 6,
        "confidence": 1.0,
        "sample": "ShowUIPanel(f)",
        "retail": true
      }
    ],
    "DelayedShowReportDialog": [
      {
        "name": "DelayedShowReportDialog",
        "count": 1,
        "confidence": 0.2,
        "sample": "function BugReport:DelayedShowReportDialog(report)",
        "retail": true
      }
    ],
    "UpdateLayout": [
      {
        "name": "UpdateLayout",
        "count": 5,
        "confidence": 1.0,
        "sample": "StepFeedback.Frame:UpdateLayout()",
        "retail": true
      }
    ],
    "SetNormalBackdropColor": [
      {
        "name": "SetNormalBackdropColor",
        "count": 26,
        "confidence": 1.0,
        "sample": ":SetNormalBackdropColor(unpack(SkinData(\"ButtonColor1\")))",
        "retail": true
      }
    ],
    "GetFrameLevel": [
      {
        "name": "GetFrameLevel",
        "count": 218,
        "confidence": 1.0,
        "sample": "frame.addonmodule= CHAIN(ui:Create(\"DropDown\",frame.addoncontainer,2,frame:GetFrameLevel()+2))",
        "retail": true
      }
    ],
    "SetCurrentSelectedByValue": [
      {
        "name": "SetCurrentSelectedByValue",
        "count": 19,
        "confidence": 1.0,
        "sample": "frame.addonmodule:SetCurrentSelectedByValue(\"default\")",
        "retail": true
      }
    ],
    "SetTextColor": [
      {
        "name": "SetTextColor",
        "count": 433,
        "confidence": 1.0,
        "sample": "frame.editBox:SetTextColor(1,1,1,0.7)",
        "retail": true
      }
    ],
    "GetParent": [
      {
        "name": "GetParent",
        "count": 360,
        "confidence": 1.0,
        "sample": "if self:GetParent().old_timestamp then ZGV.db.global.bugreports[self:GetParent().old_timestamp]=nil end",
        "retail": true
      }
    ],
    "Save": [
      {
        "name": "Save",
        "count": 7,
        "confidence": 1.0,
        "sample": "StepFeedback:Save(self:GetParent().editBox:GetText())",
        "retail": true
      }
    ],
    "GetCurrentSelectedItemValue": [
      {
        "name": "GetCurrentSelectedItemValue",
        "count": 8,
        "confidence": 1.0,
        "sample": "if self:GetParent().editBox:GetText() ~= L[\"bugreport_step_message_addon\"] and frame.addonmodule:GetCurrentSelectedItemValue() ~= \"default\" and frame.severity:GetCurrentSelectedItemValue() ~= \"default\" or ZGV.DEV then",
        "retail": true
      }
    ],
    "GetGearReport": [
      {
        "name": "GetGearReport",
        "count": 3,
        "confidence": 0.6,
        "sample": "geardump = ZGV.ItemScore.Upgrades:GetGearReport(StepFeedback.itemlink)",
        "retail": true
      }
    ],
    "SetBadUpgrade": [
      {
        "name": "SetBadUpgrade",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ItemScore.Upgrades:SetBadUpgrade(StepFeedback.itemString,StepFeedback.slot)\t-- Send it to BadUpgrades because they don't want it suggested again.",
        "retail": true
      }
    ],
    "GetHeight": [
      {
        "name": "GetHeight",
        "count": 388,
        "confidence": 1.0,
        "sample": "local height = frame.editBox:GetHeight() + frame.buttonsubmit:GetHeight()",
        "retail": true
      }
    ],
    "Clear": [
      {
        "name": "Clear",
        "count": 13,
        "confidence": 1.0,
        "sample": "function StepFeedback:Clear(ftype, component, itemlink)",
        "retail": true
      }
    ],
    "FindStepReportForCurrentStep": [
      {
        "name": "FindStepReportForCurrentStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "local timestamp,report = self:FindStepReportForCurrentStep(itemlink)",
        "retail": true
      }
    ],
    "GetGuideStepSignature": [
      {
        "name": "GetGuideStepSignature",
        "count": 4,
        "confidence": 0.8,
        "sample": "function StepFeedback:GetGuideStepSignature()",
        "retail": true
      }
    ],
    "GetStepReportHeader": [
      {
        "name": "GetStepReportHeader",
        "count": 4,
        "confidence": 0.8,
        "sample": "function StepFeedback:GetStepReportHeader()",
        "retail": true
      }
    ],
    "GetDebugDump": [
      {
        "name": "GetDebugDump",
        "count": 5,
        "confidence": 1.0,
        "sample": "\"bug_report_steptxt=\"..(ZGV.CurrentStep and ZGV.CurrentStep:GetDebugDump():gsub(\"\\n\",\";;\") or \"\")..\"\\n\"..",
        "retail": true
      }
    ],
    "ExplainStep": [
      {
        "name": "ExplainStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"bug_report_chain=\"..ZGV.QuestDB:ExplainStep()..\"\\n\"",
        "retail": true
      }
    ],
    "ShowTooltip": [
      {
        "name": "ShowTooltip",
        "count": 14,
        "confidence": 1.0,
        "sample": "function StepFeedback:ShowTooltip(text)",
        "retail": true
      },
      {
        "name": "TA.ShowTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnEnter\", function() TA.ShowTooltip(TA.SpecIcon) end)",
        "retail": true
      }
    ],
    "ChainCall": [
      {
        "name": "ZGV.ChainCall",
        "count": 49,
        "confidence": 1.0,
        "sample": "ZGV.ChainCall(GameTooltip)",
        "retail": true
      }
    ],
    "SetOwner": [
      {
        "name": "SetOwner",
        "count": 169,
        "confidence": 1.0,
        "sample": ":SetOwner(ZGV.Frame, \"ANCHOR_TOP\")",
        "retail": true
      }
    ],
    "AddLine": [
      {
        "name": "AddLine",
        "count": 553,
        "confidence": 1.0,
        "sample": ":AddLine(L['bugreport_step_tooltip2'])",
        "retail": true
      }
    ],
    "GetGuideByTitle": [
      {
        "name": "GetGuideByTitle",
        "count": 49,
        "confidence": 1.0,
        "sample": "local nextguide = ZGV:GetGuideByTitle(nextg)",
        "retail": true
      }
    ],
    "Error": [
      {
        "name": "Error",
        "count": 37,
        "confidence": 1.0,
        "sample": "if not nextguide then return ZGV:Error(\"Cannot find next guide (\"..where..\"): \"..nextg) end",
        "retail": true
      }
    ],
    "NextRatingGuide": [
      {
        "name": "NextRatingGuide",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GuideRating:NextRatingGuide(source)",
        "retail": true
      }
    ],
    "CreateAltFrame": [
      {
        "name": "CreateAltFrame",
        "count": 6,
        "confidence": 1.0,
        "sample": "GuideRating:CreateAltFrame()",
        "retail": true
      }
    ],
    "SetGuide": [
      {
        "name": "SetGuide",
        "count": 32,
        "confidence": 1.0,
        "sample": "ZGV:SetGuide(nextGuide, nil, nil, nil, ZGV.CurrentGuide)",
        "retail": true
      }
    ],
    "SetAlpha": [
      {
        "name": "SetAlpha",
        "count": 632,
        "confidence": 1.0,
        "sample": "frame.face1:SetAlpha(1)",
        "retail": true
      }
    ],
    "CreateTexture": [
      {
        "name": "CreateTexture",
        "count": 710,
        "confidence": 1.0,
        "sample": "local feedbackboxbackdrop = frame:CreateTexture(nil, \"ARTWORK\")",
        "retail": true
      }
    ],
    "SetColorTexture": [
      {
        "name": "SetColorTexture",
        "count": 251,
        "confidence": 1.0,
        "sample": "feedbackboxbackdrop:SetColorTexture(0,0,0,1)",
        "retail": true
      }
    ],
    "ShowGuideRating": [
      {
        "name": "ShowGuideRating",
        "count": 11,
        "confidence": 1.0,
        "sample": "GuideRating:ShowGuideRating()",
        "retail": true
      }
    ],
    "CreateCancelledFrame": [
      {
        "name": "CreateCancelledFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideRating:CreateCancelledFrame()",
        "retail": true
      }
    ],
    "ClearFocus": [
      {
        "name": "ClearFocus",
        "count": 128,
        "confidence": 1.0,
        "sample": "frame.scroll.child:ClearFocus()",
        "retail": true
      }
    ],
    "Toggle": [
      {
        "name": "Toggle",
        "count": 13,
        "confidence": 1.0,
        "sample": "me:Toggle(not me.curToggle)",
        "retail": true
      }
    ],
    "RefreshOptions": [
      {
        "name": "RefreshOptions",
        "count": 24,
        "confidence": 1.0,
        "sample": "ZGV:RefreshOptions()",
        "retail": true
      }
    ],
    "SetParent": [
      {
        "name": "SetParent",
        "count": 159,
        "confidence": 1.0,
        "sample": ":SetParent(ZGV.Frame.Border)",
        "retail": true
      }
    ],
    "Position": [
      {
        "name": "Position",
        "count": 7,
        "confidence": 1.0,
        "sample": "GuideRating:Position()",
        "retail": true
      }
    ],
    "HideRatingWidgets": [
      {
        "name": "HideRatingWidgets",
        "count": 5,
        "confidence": 1.0,
        "sample": "function GuideRating:HideRatingWidgets()",
        "retail": true
      }
    ],
    "ResizeFrame": [
      {
        "name": "ResizeFrame",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV:ResizeFrame(\"ratingframe\")",
        "retail": true
      }
    ],
    "UpdateText": [
      {
        "name": "UpdateText",
        "count": 14,
        "confidence": 1.0,
        "sample": "GuideRating:UpdateText()",
        "retail": true
      }
    ],
    "ClearRateState": [
      {
        "name": "ClearRateState",
        "count": 4,
        "confidence": 0.8,
        "sample": "GuideRating:ClearRateState()",
        "retail": true
      }
    ],
    "Popup": [
      {
        "name": "Popup",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideRating:Popup()",
        "retail": true
      }
    ],
    "NewPopup": [
      {
        "name": "NewPopup",
        "count": 22,
        "confidence": 1.0,
        "sample": "dialog = ZGV.PopupHandler:NewPopup(\"GuideScore\",\"default\")",
        "retail": true
      }
    ],
    "IsVisible": [
      {
        "name": "IsVisible",
        "count": 223,
        "confidence": 1.0,
        "sample": "local offsets = (self.logo:IsVisible() and (self.logo:GetHeight()+15) or 5) + 30 --Logo and top + more room",
        "retail": true
      }
    ],
    "InitializeViewerPosition": [
      {
        "name": "InitializeViewerPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "CV:InitializeViewerPosition()",
        "retail": true
      }
    ],
    "SetMaster": [
      {
        "name": "SetMaster",
        "count": 2,
        "confidence": 0.4,
        "sample": "CV:SetMaster() --Needed to move the master frame off the viewer at startup if needed",
        "retail": true
      }
    ],
    "ScheduleRepeatingTimer": [
      {
        "name": "ScheduleRepeatingTimer",
        "count": 54,
        "confidence": 1.0,
        "sample": "--self:ScheduleRepeatingTimer(\"TryToDisplayCreature\", 1)",
        "retail": true
      },
      {
        "name": "ZGV.ScheduleRepeatingTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "--ZGV.ScheduleRepeatingTimer(self,\"FixMapLevel\", 1.0)",
        "retail": true
      },
      {
        "name": "AceTimer.ScheduleRepeatingTimer",
        "count": 4,
        "confidence": 0.8,
        "sample": "newTimer = AceTimer.ScheduleRepeatingTimer(timer.object, timer.callback, timer.delay, timer.arg)",
        "retail": true
      }
    ],
    "SetToplevel": [
      {
        "name": "SetToplevel",
        "count": 31,
        "confidence": 1.0,
        "sample": ":SetToplevel(true)",
        "retail": true
      }
    ],
    "SetMovable": [
      {
        "name": "SetMovable",
        "count": 87,
        "confidence": 1.0,
        "sample": ":SetMovable(true)",
        "retail": true
      }
    ],
    "SetResizable": [
      {
        "name": "SetResizable",
        "count": 26,
        "confidence": 1.0,
        "sample": ":SetResizable(true)",
        "retail": true
      }
    ],
    "SetClampedToScreen": [
      {
        "name": "SetClampedToScreen",
        "count": 25,
        "confidence": 1.0,
        "sample": ":SetClampedToScreen(true)",
        "retail": true
      }
    ],
    "SetScale": [
      {
        "name": "SetScale",
        "count": 68,
        "confidence": 1.0,
        "sample": ":SetScale(itemsScale)",
        "retail": true
      }
    ],
    "CreateFrameWithBG": [
      {
        "name": "ZGV.CreateFrameWithBG",
        "count": 39,
        "confidence": 1.0,
        "sample": "local NoModelFrame = CHAIN(ZGV.CreateFrameWithBG(\"Frame\", \"NoModelFrame\", ZygorGuidesViewer_CreatureViewer))",
        "retail": true
      },
      {
        "name": "AceGUI.CreateFrameWithBG",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceGUI.CreateFrameWithBG(type,name,parent,templates)",
        "retail": true
      }
    ],
    "SetTexture": [
      {
        "name": "SetTexture",
        "count": 1008,
        "confidence": 1.0,
        "sample": ":SetTexture(ZGV.Skins.default.preferredstyle.CVNoModelTexture)",
        "retail": true
      }
    ],
    "SetDesaturated": [
      {
        "name": "SetDesaturated",
        "count": 156,
        "confidence": 1.0,
        "sample": ":SetDesaturated(true)",
        "retail": true
      }
    ],
    "TryToDisplayCreature": [
      {
        "name": "TryToDisplayCreature",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ZGV:TryToDisplayCreature(force)",
        "retail": true
      }
    ],
    "GetTranslatedNPC": [
      {
        "name": "GetTranslatedNPC",
        "count": 27,
        "confidence": 1.0,
        "sample": "name = goal.modelname or (creatureid and self.Localizers:GetTranslatedNPC(creatureid)) or goal.target or goal.npc",
        "retail": true
      }
    ],
    "GetStickiesAt": [
      {
        "name": "GetStickiesAt",
        "count": 11,
        "confidence": 1.0,
        "sample": "local activeStickies = ZGV:GetStickiesAt(self.CurrentStep.num)",
        "retail": true
      }
    ],
    "ShowModels": [
      {
        "name": "ShowModels",
        "count": 5,
        "confidence": 1.0,
        "sample": "CV:ShowModels(models)",
        "retail": true
      }
    ],
    "GetWidth": [
      {
        "name": "GetWidth",
        "count": 444,
        "confidence": 1.0,
        "sample": "local heightAdjust = ZygorGuidesViewer_CreatureViewer:GetHeight() - ZygorGuidesViewer_CreatureViewer:GetWidth()",
        "retail": true
      }
    ],
    "Model_OnUpdate_Rotate": [
      {
        "name": "Model_OnUpdate_Rotate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Model_OnUpdate_Rotate(self,elapsed)",
        "retail": true
      }
    ],
    "SetFacing": [
      {
        "name": "SetFacing",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetFacing(self.model.curfacing)",
        "retail": true
      }
    ],
    "Model_Cycle_OnPlay": [
      {
        "name": "Model_Cycle_OnPlay",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Model_Cycle_OnPlay(self)",
        "retail": true
      }
    ],
    "Model_Cycle_OnUpdate": [
      {
        "name": "Model_Cycle_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Model_Cycle_OnUpdate(self)",
        "retail": true
      }
    ],
    "GetSmoothProgress": [
      {
        "name": "GetSmoothProgress",
        "count": 3,
        "confidence": 0.6,
        "sample": "local prog = self:GetSmoothProgress()*0.999 + 0.001",
        "retail": true
      }
    ],
    "SetPosition": [
      {
        "name": "SetPosition",
        "count": 6,
        "confidence": 1.0,
        "sample": "vm:SetPosition(vm.model.cx or 0,(vm.model.cy or 0) - progdir * 0.4,(vm.model.cz or 0)-0.1)",
        "retail": true
      }
    ],
    "SetModelScale": [
      {
        "name": "SetModelScale",
        "count": 3,
        "confidence": 0.6,
        "sample": "vm:SetModelScale((vm.model.scale or 1)*(0.9+prog*0.1))-- * (vm.model and vm.model.scale or 1))",
        "retail": true
      }
    ],
    "SetCamera": [
      {
        "name": "SetCamera",
        "count": 3,
        "confidence": 0.6,
        "sample": "if vm.model.cam then vm:SetCamera(vm.model.cam) end",
        "retail": true
      }
    ],
    "Model_Cycle_OnFinish": [
      {
        "name": "Model_Cycle_OnFinish",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Model_Cycle_OnFinish(self)",
        "retail": true
      }
    ],
    "Slideshow_Timer": [
      {
        "name": "Slideshow_Timer",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Slideshow_Timer()",
        "retail": true
      }
    ],
    "CycleCreature": [
      {
        "name": "CycleCreature",
        "count": 6,
        "confidence": 1.0,
        "sample": "CV:CycleCreature(1)",
        "retail": true
      }
    ],
    "SetAnchor": [
      {
        "name": "SetAnchor",
        "count": 17,
        "confidence": 1.0,
        "sample": "local function SetAnchor()",
        "retail": true
      }
    ],
    "GetCenter": [
      {
        "name": "GetCenter",
        "count": 34,
        "confidence": 1.0,
        "sample": "local viewX,viewY=viewer:GetCenter()",
        "retail": true
      }
    ],
    "AnchorEnter": [
      {
        "name": "AnchorEnter",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function AnchorEnter()",
        "retail": true
      }
    ],
    "ClearLines": [
      {
        "name": "ClearLines",
        "count": 17,
        "confidence": 1.0,
        "sample": "GameTooltip:ClearLines()",
        "retail": true
      }
    ],
    "ToggleAnchor": [
      {
        "name": "ToggleAnchor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ToggleAnchor(self,button)",
        "retail": true
      }
    ],
    "AlignFrame": [
      {
        "name": "AlignFrame",
        "count": 24,
        "confidence": 1.0,
        "sample": "CV:AlignFrame()",
        "retail": true
      }
    ],
    "AnchorExit": [
      {
        "name": "AnchorExit",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function AnchorExit()",
        "retail": true
      }
    ],
    "GetRight": [
      {
        "name": "GetRight",
        "count": 15,
        "confidence": 1.0,
        "sample": "local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()",
        "retail": true
      }
    ],
    "GetLeft": [
      {
        "name": "GetLeft",
        "count": 33,
        "confidence": 1.0,
        "sample": "local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()",
        "retail": true
      }
    ],
    "GetTop": [
      {
        "name": "GetTop",
        "count": 41,
        "confidence": 1.0,
        "sample": "local dx,dy=viewer:GetRight()-main:GetLeft(),viewer:GetTop()-main:GetTop()",
        "retail": true
      }
    ],
    "Frame_OnUpdate": [
      {
        "name": "CV.Frame_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CV.Frame_OnUpdate(frame,elapsed)",
        "retail": true
      },
      {
        "name": "ActionBar.Frame_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionBar.Frame_OnUpdate(self)",
        "retail": true
      }
    ],
    "Stop": [
      {
        "name": "Stop",
        "count": 85,
        "confidence": 1.0,
        "sample": "CV.Frame.model.cycle:Stop()",
        "retail": true
      },
      {
        "name": "AuraScan.Stop",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AuraScan.Stop()",
        "retail": true
      },
      {
        "name": "Details222.TimeCapture.Stop",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.TimeCapture.Stop(unitName)",
        "retail": true
      }
    ],
    "Play": [
      {
        "name": "Play",
        "count": 101,
        "confidence": 1.0,
        "sample": "CV.Frame.model.cycle:Play()",
        "retail": true
      }
    ],
    "Update": [
      {
        "name": "Update",
        "count": 145,
        "confidence": 1.0,
        "sample": "CV:Update()",
        "retail": true
      }
    ],
    "IsMouseOver": [
      {
        "name": "IsMouseOver",
        "count": 31,
        "confidence": 1.0,
        "sample": "if frame:IsMouseOver() then",
        "retail": true
      }
    ],
    "UIFrameFadeIn": [
      {
        "name": "UIFrameFadeIn",
        "count": 2,
        "confidence": 0.4,
        "sample": "for f,fr in pairs(faded_controls) do UIFrameFadeIn(fr,0.1,fr:GetAlpha(), 1) end",
        "retail": true
      },
      {
        "name": "ZGV.UIFrameFade.UIFrameFadeIn",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.UIFrameFade.UIFrameFadeIn(NC.SpecialNotif, FADEIN_TIME)",
        "retail": true
      }
    ],
    "GetAlpha": [
      {
        "name": "GetAlpha",
        "count": 42,
        "confidence": 1.0,
        "sample": "for f,fr in pairs(faded_controls) do UIFrameFadeIn(fr,0.1,fr:GetAlpha(), 1) end",
        "retail": true
      }
    ],
    "UIFrameFadeOut": [
      {
        "name": "UIFrameFadeOut",
        "count": 2,
        "confidence": 0.4,
        "sample": "for f,fr in pairs(faded_controls) do UIFrameFadeOut(fr,0.1,fr:GetAlpha(), 0) end",
        "retail": true
      },
      {
        "name": "ZGV.UIFrameFade.UIFrameFadeOut",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.UIFrameFade.UIFrameFadeOut(self, FADEOUT_TIME, 1, 0, function()",
        "retail": true
      }
    ],
    "SetMinResize": [
      {
        "name": "SetMinResize",
        "count": 8,
        "confidence": 1.0,
        "sample": "viewer:SetMinResize(80,100)",
        "retail": true
      }
    ],
    "RegisterForDrag": [
      {
        "name": "RegisterForDrag",
        "count": 34,
        "confidence": 1.0,
        "sample": ":RegisterForDrag(\"LeftButton\")",
        "retail": true
      }
    ],
    "StartSizing": [
      {
        "name": "StartSizing",
        "count": 34,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnDragStart\",function() viewer.ismoving=true viewer:StartSizing(\"BOTTOMLEFT\") end)",
        "retail": true
      }
    ],
    "StopMovingOrSizing": [
      {
        "name": "StopMovingOrSizing",
        "count": 91,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnDragStop\",function() viewer.ismoving=nil viewer:StopMovingOrSizing()",
        "retail": true
      }
    ],
    "CreateAnimationGroup": [
      {
        "name": "CreateAnimationGroup",
        "count": 19,
        "confidence": 1.0,
        "sample": "CV.Frame.model.cycle = CV.Frame.model:CreateAnimationGroup()",
        "retail": true
      }
    ],
    "CreateAnimation": [
      {
        "name": "CreateAnimation",
        "count": 118,
        "confidence": 1.0,
        "sample": "CHAIN(CV.Frame.model.cycle:CreateAnimation(\"ANIMATION\")) :SetSmoothing(\"OUT\") :SetDuration(0.3)",
        "retail": true
      }
    ],
    "SetSmoothing": [
      {
        "name": "SetSmoothing",
        "count": 4,
        "confidence": 0.8,
        "sample": "CHAIN(CV.Frame.model.cycle:CreateAnimation(\"ANIMATION\")) :SetSmoothing(\"OUT\") :SetDuration(0.3)",
        "retail": true
      }
    ],
    "SetDuration": [
      {
        "name": "SetDuration",
        "count": 49,
        "confidence": 1.0,
        "sample": "CHAIN(CV.Frame.model.cycle:CreateAnimation(\"ANIMATION\")) :SetSmoothing(\"OUT\") :SetDuration(0.3)",
        "retail": true
      }
    ],
    "SetOption": [
      {
        "name": "SetOption",
        "count": 344,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnClick\",function() ZGV:SetOption(\"Display\",\"mv_enabled\") end)",
        "retail": true
      },
      {
        "name": "DF.Language.SetOption",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.SetOption(addonId, optionId, value)",
        "retail": true
      }
    ],
    "GetName": [
      {
        "name": "GetName",
        "count": 251,
        "confidence": 1.0,
        "sample": "CV.Frame.title = CHAIN(CV.Frame.boo:CreateFontString(CV.Frame:GetName()..\"_Title\",\"ARTWORK\",\"GameFontNormalSmall\"))",
        "retail": true
      },
      {
        "name": "C_PetBattles.GetName",
        "count": 6,
        "confidence": 1.0,
        "sample": "local name,creature=C_PetBattles.GetName(2,i)",
        "retail": true
      }
    ],
    "SetDrawLayer": [
      {
        "name": "SetDrawLayer",
        "count": 96,
        "confidence": 1.0,
        "sample": ":SetDrawLayer(\"OVERLAY\")",
        "retail": true
      }
    ],
    "AssignButtonTexture": [
      {
        "name": "AssignButtonTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "--AssignButtonTexture(CV.Frame.nofn.prev,ZGV.SkinDir..\"titlebuttons\",9,32)",
        "retail": true
      },
      {
        "name": "ZGV.F.AssignButtonTexture",
        "count": 13,
        "confidence": 1.0,
        "sample": "--ZGV.F.AssignButtonTexture(MF.FooterSettingsButton,(SkinData(\"TitleButtons\")),5,32)",
        "retail": true
      }
    ],
    "IsShiftKeyDown": [
      {
        "name": "IsShiftKeyDown",
        "count": 43,
        "confidence": 1.0,
        "sample": "--:SetScript(\"OnClick\",\t\tfunction(self,but) ZGV.CV.currentmodel.crop.cx = (ZGV.CV.currentmodel.crop.cx or 0) + (but==\"LeftButton\" and -0.2 or 0.2) * (IsShiftKeyDown() and 0.2 or 1) ZGV.CV:Update() ZGV.CV:DumpModelSettings() end)",
        "retail": true
      }
    ],
    "DumpModelSettings": [
      {
        "name": "DumpModelSettings",
        "count": 17,
        "confidence": 1.0,
        "sample": "--:SetScript(\"OnClick\",\t\tfunction(self,but) ZGV.CV.currentmodel.crop.cx = (ZGV.CV.currentmodel.crop.cx or 0) + (but==\"LeftButton\" and -0.2 or 0.2) * (IsShiftKeyDown() and 0.2 or 1) ZGV.CV:Update() ZGV.CV:DumpModelSettings() end)",
        "retail": true
      }
    ],
    "DoCrop": [
      {
        "name": "DoCrop",
        "count": 8,
        "confidence": 1.0,
        "sample": "DoCrop()",
        "retail": true
      }
    ],
    "CreateTitleRegion": [
      {
        "name": "CreateTitleRegion",
        "count": 1,
        "confidence": 0.2,
        "sample": "--CV.Frame.titleregion = CHAIN(CV.Frame:CreateTitleRegion()) :RegisterForDrag(\"LeftButton\") :SetScript(\"OnDragStart\",function() CV.Frame:StartDragging() end) :SetScript(\"OnDragStop\",function() CV.Frame:StopMovingOrSizing() end) .__END",
        "retail": true
      }
    ],
    "StartDragging": [
      {
        "name": "StartDragging",
        "count": 1,
        "confidence": 0.2,
        "sample": "--CV.Frame.titleregion = CHAIN(CV.Frame:CreateTitleRegion()) :RegisterForDrag(\"LeftButton\") :SetScript(\"OnDragStart\",function() CV.Frame:StartDragging() end) :SetScript(\"OnDragStop\",function() CV.Frame:StopMovingOrSizing() end) .__END",
        "retail": true
      }
    ],
    "StartMoving": [
      {
        "name": "StartMoving",
        "count": 54,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnDragStart\",function(self) if not ZGV.db.profile.cvanchor then viewer.ismoving=true viewer:StartMoving() end end)",
        "retail": true
      }
    ],
    "GetPoint": [
      {
        "name": "GetPoint",
        "count": 36,
        "confidence": 1.0,
        "sample": "ZGV.db.profile.frame_positions.ZygorGuidesViewerViewer.point={viewer:GetPoint()}",
        "retail": true
      }
    ],
    "UpdateSkin": [
      {
        "name": "UpdateSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "--SetAnchor() -- is repeated in CV:UpdateSkin()",
        "retail": true
      }
    ],
    "GetRegions": [
      {
        "name": "GetRegions",
        "count": 10,
        "confidence": 1.0,
        "sample": "CV.Frame.sizer_se:GetRegions():SetTexCoord(1,0,0,1)",
        "retail": true
      }
    ],
    "SetTexCoord": [
      {
        "name": "SetTexCoord",
        "count": 704,
        "confidence": 1.0,
        "sample": "CV.Frame.sizer_se:GetRegions():SetTexCoord(1,0,0,1)",
        "retail": true
      }
    ],
    "SetNormalTexture": [
      {
        "name": "SetNormalTexture",
        "count": 79,
        "confidence": 1.0,
        "sample": "CV.Frame.nofn.prev:SetNormalTexture(ZGV.StyleDir..\"mv-arrow\")",
        "retail": true
      }
    ],
    "GetNormalTexture": [
      {
        "name": "GetNormalTexture",
        "count": 126,
        "confidence": 1.0,
        "sample": "CV.Frame.nofn.next:GetNormalTexture():SetTexCoord(1,0,0,1)",
        "retail": true
      }
    ],
    "AddMessage": [
      {
        "name": "AddMessage",
        "count": 32,
        "confidence": 1.0,
        "sample": "--DEFAULT_CHAT_FRAME:AddMessage((\"cx=%.1f,cy=%.1f,cz=%.1f,scale=%.1f,facing=%d\"):format(m.cx,m.cy,m.cz,m.scale,m.facing))",
        "retail": true
      }
    ],
    "ShowCreature": [
      {
        "name": "ShowCreature",
        "count": 2,
        "confidence": 0.4,
        "sample": "function CV:ShowCreature(id,name)",
        "retail": true
      }
    ],
    "RefreshModelOverflowTimer": [
      {
        "name": "RefreshModelOverflowTimer",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function RefreshModelOverflowTimer()",
        "retail": true
      }
    ],
    "CancelTimer": [
      {
        "name": "CancelTimer",
        "count": 103,
        "confidence": 1.0,
        "sample": "ZGV:CancelTimer(delayedModel.timerHandle,true)",
        "retail": true
      },
      {
        "name": "AceTimer.CancelTimer",
        "count": 2,
        "confidence": 0.4,
        "sample": "AceTimer.CancelTimer(self, k)",
        "retail": true
      },
      {
        "name": "C_Timer.CancelTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Timer.CancelTimer(timerHandle) end",
        "retail": true
      }
    ],
    "Test": [
      {
        "name": "Test",
        "count": 2,
        "confidence": 0.4,
        "sample": "function CV:Test()",
        "retail": true
      }
    ],
    "GetMouseButtonClicked": [
      {
        "name": "GetMouseButtonClicked",
        "count": 2,
        "confidence": 0.4,
        "sample": "timer = GetMouseButtonClicked() and -5 or 0  -- on click, set timer to negative to force a longer delay.",
        "retail": true
      }
    ],
    "ClearModel": [
      {
        "name": "ClearModel",
        "count": 4,
        "confidence": 0.8,
        "sample": "viewer:ClearModel()",
        "retail": true
      }
    ],
    "SetModel": [
      {
        "name": "SetModel",
        "count": 5,
        "confidence": 1.0,
        "sample": "viewer:SetModel(model.model)",
        "retail": true
      }
    ],
    "SetDisplayInfo": [
      {
        "name": "SetDisplayInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "viewer:SetDisplayInfo(model.displayinfo)",
        "retail": true
      }
    ],
    "SetCreature": [
      {
        "name": "SetCreature",
        "count": 4,
        "confidence": 0.8,
        "sample": "viewer:SetCreature(model.creatureid)",
        "retail": true
      }
    ],
    "GetDisplayInfo": [
      {
        "name": "GetDisplayInfo",
        "count": 10,
        "confidence": 1.0,
        "sample": "local model_check = viewer:GetDisplayInfo()",
        "retail": true
      }
    ],
    "RefreshCamera": [
      {
        "name": "RefreshCamera",
        "count": 1,
        "confidence": 0.2,
        "sample": "viewer:RefreshCamera()",
        "retail": true
      }
    ],
    "SetCamDistanceScale": [
      {
        "name": "SetCamDistanceScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "viewer:SetCamDistanceScale(model.camscale and max(model.camscale,0.01) or 1.01)",
        "retail": true
      }
    ],
    "SetPortraitZoom": [
      {
        "name": "SetPortraitZoom",
        "count": 1,
        "confidence": 0.2,
        "sample": "viewer:SetPortraitZoom(model.portrait)",
        "retail": true
      }
    ],
    "TrimDatabase": [
      {
        "name": "TrimDatabase",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GearFinder:TrimDatabase()",
        "retail": true
      }
    ],
    "GetChromieTime": [
      {
        "name": "ZGV.GetChromieTime",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (ZGV.GetChromieTime()>0 and ZGV.GetChromieTime()~=dungeon.expansionLevel) then return false, false, ident, 0, false,false, \"wrong chromie time\" end",
        "retail": true
      }
    ],
    "IsLFGDungeonJoinable": [
      {
        "name": "IsLFGDungeonJoinable",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isAvailable, isAvailableToPlayer, hideIfUnmet = IsLFGDungeonJoinable(dungeon.id);",
        "retail": true
      }
    ],
    "GetLFDLockInfo": [
      {
        "name": "GetLFDLockInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local playerName, lockedReason = GetLFDLockInfo(dungeon.id, 1);",
        "retail": true
      }
    ],
    "GetAchievementInfo": [
      {
        "name": "GetAchievementInfo",
        "count": 21,
        "confidence": 1.0,
        "sample": "local _,_,_,complete = GetAchievementInfo(dungeon.attunement_achieve)",
        "retail": true
      }
    ],
    "IsQuestFlaggedCompleted": [
      {
        "name": "IsQuestFlaggedCompleted",
        "count": 72,
        "confidence": 1.0,
        "sample": "if dungeon.attunement_quest and not IsQuestFlaggedCompleted(dungeon.attunement_quest) then return false, true, ident, maxScaleLevel, mythic,mythicplus, \"attunement needed\" end",
        "retail": true
      },
      {
        "name": "C_QuestLog.IsQuestFlaggedCompleted",
        "count": 9,
        "confidence": 1.0,
        "sample": "if C_QuestLog.IsQuestFlaggedCompleted(id) then return true end",
        "retail": true
      }
    ],
    "SetPercent": [
      {
        "name": "SetPercent",
        "count": 15,
        "confidence": 1.0,
        "sample": "GearFinder.MainFrame.Progress:SetPercent(0,\"noanim\")",
        "retail": true
      }
    ],
    "GetInventoryItemLink": [
      {
        "name": "GetInventoryItemLink",
        "count": 20,
        "confidence": 1.0,
        "sample": "local equipped_weapon = GetInventoryItemLink(\"player\",INVSLOT_MAINHAND) and ItemScore:GetItemDetails(GetInventoryItemLink(\"player\",INVSLOT_MAINHAND))",
        "retail": true
      }
    ],
    "GetItemDetails": [
      {
        "name": "GetItemDetails",
        "count": 29,
        "confidence": 1.0,
        "sample": "local equipped_weapon = GetInventoryItemLink(\"player\",INVSLOT_MAINHAND) and ItemScore:GetItemDetails(GetInventoryItemLink(\"player\",INVSLOT_MAINHAND))",
        "retail": true
      }
    ],
    "GetItemInfoInstant": [
      {
        "name": "GetItemInfoInstant",
        "count": 1,
        "confidence": 0.2,
        "sample": "for index,itemdata in pairs(dungeon) do if GetItemInfoInstant(itemdata.itemlink) then",
        "retail": true
      },
      {
        "name": "C_Item.GetItemInfoInstant",
        "count": 4,
        "confidence": 0.8,
        "sample": "local _, _, _, _, _, classID, subclassID = C_Item.GetItemInfoInstant(link)",
        "retail": true
      }
    ],
    "IsUpgrade": [
      {
        "name": "IsUpgrade",
        "count": 8,
        "confidence": 1.0,
        "sample": "local is_upgrade, slot, change, score, comment, futurevalid, slot_2, change_2  = ItemScore.Upgrades:IsUpgrade(itemlink)",
        "retail": true
      }
    ],
    "DisplayResults": [
      {
        "name": "DisplayResults",
        "count": 14,
        "confidence": 1.0,
        "sample": "GearFinder:DisplayResults()",
        "retail": true
      }
    ],
    "ScoreDungeonItems": [
      {
        "name": "ScoreDungeonItems",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GearFinder:ScoreDungeonItems()",
        "retail": true
      }
    ],
    "GetModifiedInstanceInfoFromMapID": [
      {
        "name": "C_ModifiedInstance.GetModifiedInstanceInfoFromMapID",
        "count": 1,
        "confidence": 0.2,
        "sample": "hasbonus = C_ModifiedInstance and C_ModifiedInstance.GetModifiedInstanceInfoFromMapID(dungeondata.EJMap)",
        "retail": true
      }
    ],
    "SetLevel": [
      {
        "name": "ZGV.ItemLink.SetLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "itemlink = ZGV.ItemLink.SetLevel(itemlink,capped_player_level,false)",
        "retail": true
      },
      {
        "name": "IL.SetLevel",
        "count": 3,
        "confidence": 0.6,
        "sample": "function IL.SetLevel(itemlink,level,keepDecor)",
        "retail": true
      }
    ],
    "RemoveBonus": [
      {
        "name": "ZGV.ItemLink.RemoveBonus",
        "count": 2,
        "confidence": 0.4,
        "sample": "itemlink = ZGV.ItemLink.RemoveBonus(itemlink,3524)",
        "retail": true
      },
      {
        "name": "IL.RemoveBonus",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.RemoveBonus(itemlink,bonusid)",
        "retail": true
      }
    ],
    "AddBonus": [
      {
        "name": "ZGV.ItemLink.AddBonus",
        "count": 2,
        "confidence": 0.4,
        "sample": "itemlink = ZGV.ItemLink.AddBonus(itemlink,mythic_bonus)",
        "retail": true
      },
      {
        "name": "IL.AddBonus",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.AddBonus(itemlink,bonuses)",
        "retail": true
      }
    ],
    "SetFated": [
      {
        "name": "ZGV.ItemLink.SetFated",
        "count": 2,
        "confidence": 0.4,
        "sample": "if hasbonus then itemlink = ZGV.ItemLink.SetFated(itemlink) end",
        "retail": true
      },
      {
        "name": "IL.SetFated",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.SetFated(itemlink)",
        "retail": true
      }
    ],
    "GetQuestName": [
      {
        "name": "GetQuestName",
        "count": 10,
        "confidence": 1.0,
        "sample": "qname = ZGV.QuestDB:GetQuestName(bossdata.quest[faction])",
        "retail": true
      }
    ],
    "SetHyperlink": [
      {
        "name": "SetHyperlink",
        "count": 16,
        "confidence": 1.0,
        "sample": "GameTooltip:SetHyperlink(button.link)",
        "retail": true
      }
    ],
    "FadeOut": [
      {
        "name": "FadeOut",
        "count": 8,
        "confidence": 1.0,
        "sample": "GameTooltip:FadeOut()",
        "retail": true
      }
    ],
    "LoadGuideToTab": [
      {
        "name": "LoadGuideToTab",
        "count": 25,
        "confidence": 1.0,
        "sample": "ZGV.Tabs:LoadGuideToTab(button.dungeonguide,button.dungeonguide.CurrentStepNum or 1)",
        "retail": true
      }
    ],
    "SetDecor": [
      {
        "name": "SetDecor",
        "count": 8,
        "confidence": 1.0,
        "sample": "MF.Progress:SetDecor(SkinData(\"ProgressBarDecorUse\"))",
        "retail": true
      }
    ],
    "SetVertexColor": [
      {
        "name": "SetVertexColor",
        "count": 449,
        "confidence": 1.0,
        "sample": "MF.Progress.Texture:SetVertexColor(unpack(SkinData(\"ProgressBarTextureColor\")))",
        "retail": true
      }
    ],
    "CreateMainFrame": [
      {
        "name": "CreateMainFrame",
        "count": 10,
        "confidence": 1.0,
        "sample": "function GearFinder:CreateMainFrame()",
        "retail": true
      }
    ],
    "AttachFrame": [
      {
        "name": "AttachFrame",
        "count": 4,
        "confidence": 0.8,
        "sample": "GearFinder:AttachFrame()",
        "retail": true
      }
    ],
    "OpenOptions": [
      {
        "name": "OpenOptions",
        "count": 20,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnClick\",function() ZGV:OpenOptions(\"gear\") end)",
        "retail": true
      }
    ],
    "ClearResults": [
      {
        "name": "ClearResults",
        "count": 22,
        "confidence": 1.0,
        "sample": "GearFinder:ClearResults()",
        "retail": true
      }
    ],
    "SetTitanRune": [
      {
        "name": "SetTitanRune",
        "count": 6,
        "confidence": 1.0,
        "sample": "GearFinder:SetTitanRune()",
        "retail": true
      }
    ],
    "GetPushedTexture": [
      {
        "name": "GetPushedTexture",
        "count": 46,
        "confidence": 1.0,
        "sample": "CHAIN(MF.TitanToggle:GetPushedTexture()):ClearAllPoints():SetPoint(\"LEFT\"):SetSize(17,17)",
        "retail": true
      }
    ],
    "GetHighlightTexture": [
      {
        "name": "GetHighlightTexture",
        "count": 51,
        "confidence": 1.0,
        "sample": "CHAIN(MF.TitanToggle:GetHighlightTexture()):ClearAllPoints():SetPoint(\"LEFT\"):SetSize(17,17)",
        "retail": true
      }
    ],
    "GetDisabledTexture": [
      {
        "name": "GetDisabledTexture",
        "count": 25,
        "confidence": 1.0,
        "sample": "CHAIN(MF.TitanToggle:GetDisabledTexture()):ClearAllPoints():SetPoint(\"LEFT\"):SetSize(17,17)",
        "retail": true
      }
    ],
    "SetAnim": [
      {
        "name": "SetAnim",
        "count": 5,
        "confidence": 1.0,
        "sample": ":SetAnim(true)",
        "retail": true
      }
    ],
    "SetHighlightBackdropColor": [
      {
        "name": "SetHighlightBackdropColor",
        "count": 14,
        "confidence": 1.0,
        "sample": ":SetHighlightBackdropColor(0,0,0,0.7)",
        "retail": true
      }
    ],
    "EJ_GetEncounterInfo": [
      {
        "name": "EJ_GetEncounterInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "button.itemencounter:SetText(EJ_GetEncounterInfo(upgrade.encounterId))",
        "retail": true
      },
      {
        "name": "EncounterJournal.EJ_GetEncounterInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local name, description, encounterID, rootSectionID, link = detailsFramework.EncounterJournal.EJ_GetEncounterInfo (2168) --taloc (primeiro boss de Uldir)",
        "retail": true
      },
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetEncounterInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local stack, encounter, _, _, curSectionID = {}, DetailsFramework.EncounterJournal.EJ_GetEncounterInfo (EJ_EncounterID)",
        "retail": true
      }
    ],
    "AddEventHandler": [
      {
        "name": "AddEventHandler",
        "count": 120,
        "confidence": 1.0,
        "sample": "self:AddEventHandler(\"CHAT_MSG_SYSTEM\",\"CHAT_MSG_SYSTEM_QuestTracking\")",
        "retail": true
      }
    ],
    "QUEST_LOG_UPDATE_QuestTracking": [
      {
        "name": "QUEST_LOG_UPDATE_QuestTracking",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:QUEST_LOG_UPDATE_QuestTracking(\"ZYGORSTARTUP\",\"player\")",
        "retail": true
      }
    ],
    "GetCaptures": [
      {
        "name": "GetCaptures",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function GetCaptures(s)",
        "retail": true
      }
    ],
    "Quest_GetCaptures": [
      {
        "name": "ZGV.Quest_GetCaptures",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- /dump ZGV.Quest_GetCaptures(QUEST_MONSTERS_KILLED)",
        "retail": true
      }
    ],
    "Reorganize": [
      {
        "name": "Reorganize",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Reorganize(indices,...)",
        "retail": true
      }
    ],
    "ParseLeaderBoard": [
      {
        "name": "ParseLeaderBoard",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function ParseLeaderBoard(leaderboard,type)",
        "retail": true
      }
    ],
    "GetQuestLeaderBoards": [
      {
        "name": "GetQuestLeaderBoards",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:GetQuestLeaderBoards(questindex,questID)",
        "retail": true
      }
    ],
    "GetNumQuestLeaderBoards": [
      {
        "name": "GetNumQuestLeaderBoards",
        "count": 2,
        "confidence": 0.4,
        "sample": "local numgoals = tonumber(GetNumQuestLeaderBoards(questindex))",
        "retail": true
      }
    ],
    "GetQuestLogLeaderBoard": [
      {
        "name": "GetQuestLogLeaderBoard",
        "count": 1,
        "confidence": 0.2,
        "sample": "local leaderboard,type,complete = GetQuestLogLeaderBoard(g,questindex)",
        "retail": true
      }
    ],
    "GetQuestProgressBarPercent": [
      {
        "name": "GetQuestProgressBarPercent",
        "count": 2,
        "confidence": 0.4,
        "sample": "num = GetQuestProgressBarPercent(questID)",
        "retail": true
      }
    ],
    "GetTitleForLogIndex": [
      {
        "name": "C_QuestLog.GetTitleForLogIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local title = C_QuestLog.GetTitleForLogIndex and C_QuestLog.GetTitleForLogIndex(questindex) or select(8,GetQuestLogTitle(questindex))",
        "retail": true
      }
    ],
    "GetQuestLogTitle": [
      {
        "name": "GetQuestLogTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "local title = C_QuestLog.GetTitleForLogIndex and C_QuestLog.GetTitleForLogIndex(questindex) or select(8,GetQuestLogTitle(questindex))",
        "retail": true
      }
    ],
    "GetQuest": [
      {
        "name": "GetQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:GetQuest(indexortitle)",
        "retail": true
      }
    ],
    "GetInfo": [
      {
        "name": "C_QuestLog.GetInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local info = C_QuestLog.GetInfo(indexortitle)",
        "retail": true
      },
      {
        "name": "C_Scenario.GetInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local name, currentStage, numStages,_,_,_,_,_,_,_,_,_,currentScenarioID = C_Scenario.GetInfo()",
        "retail": true
      }
    ],
    "QuestTracking_CacheQuestLog": [
      {
        "name": "QuestTracking_CacheQuestLog",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:QuestTracking_CacheQuestLog(from)",
        "retail": true
      }
    ],
    "InCombatLockdown": [
      {
        "name": "InCombatLockdown",
        "count": 74,
        "confidence": 1.0,
        "sample": "if InCombatLockdown() and not interacting then",
        "retail": true
      }
    ],
    "Throttler": [
      {
        "name": "Throttler",
        "count": 5,
        "confidence": 1.0,
        "sample": "if ZGV:Throttler(\"QuestTracking_CacheQuestLog\",0.5,ZGV.QuestTracking_CacheQuestLog,{ZGV,\"throttler\"}) then return end",
        "retail": true
      }
    ],
    "GetNumQuestLogEntries": [
      {
        "name": "GetNumQuestLogEntries",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local iNumEntries, iNumQuests = GetNumQuestLogEntries() -- this SUCKS. Entries can be muddled by collapsing the quest log, and NumQuests is useless anyway.",
        "retail": true
      },
      {
        "name": "C_QuestLog.GetNumQuestLogEntries",
        "count": 1,
        "confidence": 0.2,
        "sample": "local numEntries, numQuests = C_QuestLog.GetNumQuestLogEntries();",
        "retail": true
      }
    ],
    "GetQuestLogSelection": [
      {
        "name": "GetQuestLogSelection",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local selected = GetQuestLogSelection()",
        "retail": true
      }
    ],
    "GetQuestLogQuestText": [
      {
        "name": "GetQuestLogQuestText",
        "count": 1,
        "confidence": 0.2,
        "sample": "quest.text,quest.summary = GetQuestLogQuestText(i)",
        "retail": true
      }
    ],
    "GetQuestType": [
      {
        "name": "C_QuestLog.GetQuestType",
        "count": 1,
        "confidence": 0.2,
        "sample": "quest.tagnum = \tC_QuestLog.GetQuestType(info.questID)",
        "retail": true
      }
    ],
    "GetQuestLogQuestType": [
      {
        "name": "GetQuestLogQuestType",
        "count": 1,
        "confidence": 0.2,
        "sample": "quest.tagnum = GetQuestLogQuestType(i) --will return a number.[0] = \"\", [1] = \"Group\", [41] = \"PvP\",[62] = \"Raid\", [81] = \"Dungeon\", [83] = \"Legendary\",[ 85] = \"Heroic\",[98] = \"Scenario\", [102] = \"Account\",",
        "retail": true
      }
    ],
    "IsFailed": [
      {
        "name": "C_QuestLog.IsFailed",
        "count": 1,
        "confidence": 0.2,
        "sample": "quest.failed = C_QuestLog.IsFailed(info.questID)",
        "retail": true
      }
    ],
    "GetNumWorldQuestWatches": [
      {
        "name": "C_QuestLog.GetNumWorldQuestWatches",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i=1,C_QuestLog.GetNumWorldQuestWatches() do",
        "retail": true
      }
    ],
    "GetQuestIDForWorldQuestWatchIndex": [
      {
        "name": "C_QuestLog.GetQuestIDForWorldQuestWatchIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local questID = C_QuestLog.GetQuestIDForWorldQuestWatchIndex(i)",
        "retail": true
      }
    ],
    "GetTaskInfo": [
      {
        "name": "GetTaskInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isInArea, isOnMap, numObjectives, taskName, displayAsObjective = GetTaskInfo(questID)",
        "retail": true
      }
    ],
    "IsOnQuest": [
      {
        "name": "C_QuestLog.IsOnQuest",
        "count": 5,
        "confidence": 1.0,
        "sample": "quest.inlog = C_QuestLog.IsOnQuest(questID)",
        "retail": true
      }
    ],
    "GetQuestObjectiveInfo": [
      {
        "name": "GetQuestObjectiveInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local text, objectiveType, finished, num, total = GetQuestObjectiveInfo(questID, objectiveIndex, false);",
        "retail": true
      }
    ],
    "LostQuestEvent": [
      {
        "name": "LostQuestEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:LostQuestEvent(q.title,q.id,q.complete)",
        "retail": true
      }
    ],
    "AbandonedQuestEvent": [
      {
        "name": "AbandonedQuestEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:AbandonedQuestEvent(q.title,q.id,q.daily)",
        "retail": true
      }
    ],
    "CompletedQuestEvent": [
      {
        "name": "CompletedQuestEvent",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:CompletedQuestEvent(q.title,q.id,q.daily)",
        "retail": true
      }
    ],
    "NewQuestEvent": [
      {
        "name": "NewQuestEvent",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:NewQuestEvent(q.title,q.id)",
        "retail": true
      }
    ],
    "DevTools_Dump": [
      {
        "name": "DevTools_Dump",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self.DEBUG_QUEST_ID then local q=ZGV.questsbyid[self.DEBUG_QUEST_ID]  DevTools_Dump({title=q.title,complete=q.complete,inlog=q.inlog,goals=q.goals}) end",
        "retail": true
      }
    ],
    "QuestTracking_ResetDailies": [
      {
        "name": "QuestTracking_ResetDailies",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:QuestTracking_ResetDailies(force)",
        "retail": true
      }
    ],
    "GetQuestResetTime": [
      {
        "name": "GetQuestResetTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "local QuestResetTime=GetQuestResetTime()",
        "retail": true
      }
    ],
    "QuestTracking_ResetDailyByTitle": [
      {
        "name": "QuestTracking_ResetDailyByTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:QuestTracking_ResetDailyByTitle(title)",
        "retail": true
      }
    ],
    "QUEST_QUERY_COMPLETE_QuestTracking": [
      {
        "name": "QUEST_QUERY_COMPLETE_QuestTracking",
        "count": 1,
        "confidence": 0.2,
        "sample": "- ZGV:QUEST_QUERY_COMPLETE_QuestTracking() fires",
        "retail": true
      }
    ],
    "TryToCompleteStep": [
      {
        "name": "TryToCompleteStep",
        "count": 13,
        "confidence": 1.0,
        "sample": "self:ScheduleTimer(function() ZGV:TryToCompleteStep(true) ZGV:UpdateFrame(true) end,0.1)",
        "retail": true
      }
    ],
    "UpdateFrame": [
      {
        "name": "UpdateFrame",
        "count": 81,
        "confidence": 1.0,
        "sample": "self:ScheduleTimer(function() ZGV:TryToCompleteStep(true) ZGV:UpdateFrame(true) end,0.1)",
        "retail": true
      }
    ],
    "CHAT_MSG_SYSTEM_QuestTracking": [
      {
        "name": "CHAT_MSG_SYSTEM_QuestTracking",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CHAT_MSG_SYSTEM_QuestTracking(event,text)",
        "retail": true
      }
    ],
    "QuestTracking_GetQuestId": [
      {
        "name": "QuestTracking_GetQuestId",
        "count": 1,
        "confidence": 0.2,
        "sample": "--if quest then self:NewQuestEvent(quest,self:QuestTracking_GetQuestId(quest)) end",
        "retail": true
      }
    ],
    "QueryQuestsCompleted": [
      {
        "name": "QueryQuestsCompleted",
        "count": 1,
        "confidence": 0.2,
        "sample": "--if QueryQuestsCompleted then QueryQuestsCompleted() end",
        "retail": true
      }
    ],
    "NotifyQuest": [
      {
        "name": "NotifyQuest",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self.Writer then self.Writer:NotifyQuest(\"NEW\",id,questTitle) end",
        "retail": true
      }
    ],
    "QUEST_COMPLETE_QuestTracking": [
      {
        "name": "QUEST_COMPLETE_QuestTracking",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:QUEST_COMPLETE_QuestTracking()",
        "retail": true
      }
    ],
    "GetQuestID": [
      {
        "name": "GetQuestID",
        "count": 7,
        "confidence": 1.0,
        "sample": "self.recentCompletedQuestID=GetQuestID()",
        "retail": true
      }
    ],
    "GetTitleText": [
      {
        "name": "GetTitleText",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.recentCompletedQuestTitle=GetTitleText()",
        "retail": true
      }
    ],
    "QuestTracking_hook_SetAbandonQuest": [
      {
        "name": "ZGV.QuestTracking_hook_SetAbandonQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.QuestTracking_hook_SetAbandonQuest()",
        "retail": true
      }
    ],
    "GetSelectedQuest": [
      {
        "name": "C_QuestLog.GetSelectedQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "index = C_QuestLog.GetSelectedQuest()",
        "retail": true
      }
    ],
    "QuestTracking_hook_AbandonQuest": [
      {
        "name": "ZGV.QuestTracking_hook_AbandonQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.QuestTracking_hook_AbandonQuest()",
        "retail": true
      }
    ],
    "MarkUselessQuests": [
      {
        "name": "MarkUselessQuests",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:MarkUselessQuests()",
        "retail": true
      }
    ],
    "GetQuests": [
      {
        "name": "GetQuests",
        "count": 4,
        "confidence": 0.8,
        "sample": "local guidequests = self.CurrentGuide:GetQuests()",
        "retail": true
      }
    ],
    "AbandonUselessQuests": [
      {
        "name": "AbandonUselessQuests",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:AbandonUselessQuests()",
        "retail": true
      }
    ],
    "SetSelectedQuest": [
      {
        "name": "C_QuestLog.SetSelectedQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_QuestLog.SetSelectedQuest(quest.id);",
        "retail": true
      }
    ],
    "SetAbandonQuest": [
      {
        "name": "C_QuestLog.SetAbandonQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_QuestLog.SetAbandonQuest();",
        "retail": true
      }
    ],
    "AbandonQuest": [
      {
        "name": "C_QuestLog.AbandonQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_QuestLog.AbandonQuest()",
        "retail": true
      }
    ],
    "ShowQuestCleanup": [
      {
        "name": "ShowQuestCleanup",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:ShowQuestCleanup(automated)",
        "retail": true
      }
    ],
    "Enable": [
      {
        "name": "Enable",
        "count": 154,
        "confidence": 1.0,
        "sample": "self.CleanupPopup.acceptbutton:Enable()",
        "retail": true
      }
    ],
    "Disable": [
      {
        "name": "Disable",
        "count": 180,
        "confidence": 1.0,
        "sample": "self.CleanupPopup.acceptbutton:Disable()",
        "retail": true
      },
      {
        "name": "Details.Coach.Disable",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details.Coach.Disable()",
        "retail": true
      }
    ],
    "GetFactionDataByID": [
      {
        "name": "C_Reputation.GetFactionDataByID",
        "count": 6,
        "confidence": 1.0,
        "sample": "local data = C_Reputation.GetFactionDataByID(id)",
        "retail": true
      }
    ],
    "IsMajorFaction": [
      {
        "name": "C_Reputation.IsMajorFaction",
        "count": 1,
        "confidence": 0.2,
        "sample": "return C_Reputation and C_Reputation.IsMajorFaction and C_Reputation.IsMajorFaction(id)",
        "retail": true
      }
    ],
    "ZygorGuidesViewer_L": [
      {
        "name": "ZygorGuidesViewer_L",
        "count": 63,
        "confidence": 1.0,
        "sample": "local LF=ZygorGuidesViewer_L(\"Faction\")",
        "retail": true
      }
    ],
    "UPDATE_FACTION": [
      {
        "name": "UPDATE_FACTION",
        "count": 2,
        "confidence": 0.4,
        "sample": "Faction:UPDATE_FACTION()",
        "retail": true
      }
    ],
    "UnitSex": [
      {
        "name": "UnitSex",
        "count": 6,
        "confidence": 1.0,
        "sample": "local sex = UnitSex(\"player\")==3 and \"_FEMALE\" or \"\"",
        "retail": true
      }
    ],
    "GetFactionInfoByID": [
      {
        "name": "GetFactionInfoByID",
        "count": 14,
        "confidence": 1.0,
        "sample": "local name,desc,standing,min,max,val,_,_,header,_,headerhasrep,_,_, _,_,id = GetFactionInfoByID(1281)",
        "retail": true
      }
    ],
    "GetFriendshipReputation": [
      {
        "name": "C_GossipInfo.GetFriendshipReputation",
        "count": 6,
        "confidence": 1.0,
        "sample": "local friendID, friendRep, friendMaxRep, friendName, friendText, friendTexture, friendTextLevel, friendThresh, friendThreshNext = C_GossipInfo.GetFriendshipReputation(1281)",
        "retail": true
      }
    ],
    "GetFakeRep": [
      {
        "name": "GetFakeRep",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Faction:GetFakeRep(id,standing,min,max,val,name)",
        "retail": true
      }
    ],
    "New": [
      {
        "name": "New",
        "count": 124,
        "confidence": 1.0,
        "sample": "local rep = self.RepProto:New(id,name)",
        "retail": true
      },
      {
        "name": "CallbackHandler.New",
        "count": 2,
        "confidence": 0.4,
        "sample": "function CallbackHandler.New(_self, target, RegisterName, UnregisterName, UnregisterAllName)",
        "retail": true
      }
    ],
    "ReportChange": [
      {
        "name": "ReportChange",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Faction:ReportChange(name,delta,progdelta,going)",
        "retail": true
      }
    ],
    "ReportNoChange": [
      {
        "name": "ReportNoChange",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Faction:ReportNoChange(name,going)",
        "retail": true
      }
    ],
    "CacheRepByID": [
      {
        "name": "CacheRepByID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Faction:CacheRepByID(id) -- OVERRIDDEN in Classic",
        "retail": true
      }
    ],
    "GetMajorFactionData": [
      {
        "name": "C_MajorFactions.GetMajorFactionData",
        "count": 2,
        "confidence": 0.4,
        "sample": "local majorFacData = C_MajorFactions.GetMajorFactionData(id)",
        "retail": true
      }
    ],
    "GetRenownLevels": [
      {
        "name": "C_MajorFactions.GetRenownLevels",
        "count": 1,
        "confidence": 0.2,
        "sample": "local levels = C_MajorFactions.GetRenownLevels(id)",
        "retail": true
      }
    ],
    "Going": [
      {
        "name": "Going",
        "count": 10,
        "confidence": 1.0,
        "sample": "--self:ReportNoChange(rep.name, rep:Going(true))",
        "retail": true
      }
    ],
    "IsFactionParagon": [
      {
        "name": "C_Reputation.IsFactionParagon",
        "count": 2,
        "confidence": 0.4,
        "sample": "if C_Reputation.IsFactionParagon(id) then",
        "retail": true
      }
    ],
    "GetFactionParagonInfo": [
      {
        "name": "C_Reputation.GetFactionParagonInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local currentValue, threshold, rewardQuestID, hasRewardPending, tooLowLevelForParagon = C_Reputation.GetFactionParagonInfo(id)",
        "retail": true
      }
    ],
    "CacheReputations": [
      {
        "name": "CacheReputations",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Faction:CacheReputations()",
        "retail": true
      }
    ],
    "GetReputation": [
      {
        "name": "GetReputation",
        "count": 402,
        "confidence": 1.0,
        "sample": "function ZGV:GetReputation(...)",
        "retail": true
      }
    ],
    "ThrottlerWrap": [
      {
        "name": "ThrottlerWrap",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:ThrottlerWrap(\"Faction_UPDATE_FACTION\",0,function()",
        "retail": true
      }
    ],
    "CHAT_MSG_COMBAT_FACTION_CHANGE_Faction": [
      {
        "name": "CHAT_MSG_COMBAT_FACTION_CHANGE_Faction",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CHAT_MSG_COMBAT_FACTION_CHANGE_Faction(event,text)",
        "retail": true
      }
    ],
    "Current": [
      {
        "name": "Current",
        "count": 3,
        "confidence": 0.6,
        "sample": "print((\"%s: %s (%s)\"):format(faction,rep:Current(),rep:Going()))",
        "retail": true
      }
    ],
    "DEV_GetFactionsSorted": [
      {
        "name": "DEV_GetFactionsSorted",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Faction:DEV_GetFactionsSorted()",
        "retail": true
      }
    ],
    "DEV_DebugReputationsBasic": [
      {
        "name": "DEV_DebugReputationsBasic",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Faction:DEV_DebugReputationsBasic()",
        "retail": true
      }
    ],
    "Spoo": [
      {
        "name": "Spoo",
        "count": 27,
        "confidence": 1.0,
        "sample": "Spoo(rep)",
        "retail": true
      }
    ],
    "GetFormattedStanding": [
      {
        "name": "GetFormattedStanding",
        "count": 5,
        "confidence": 1.0,
        "sample": "rep:GetFormattedStanding(),",
        "retail": true
      }
    ],
    "DEV_DetectHiddenFriendships": [
      {
        "name": "DEV_DetectHiddenFriendships",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Faction:DEV_DetectHiddenFriendships() -- dev only",
        "retail": true
      }
    ],
    "CalcTo": [
      {
        "name": "CalcTo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function RepProto:CalcTo(standing)",
        "retail": true
      }
    ],
    "CalcTotalTo": [
      {
        "name": "CalcTotalTo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function RepProto:CalcTotalTo(standing)",
        "retail": true
      }
    ],
    "DebugCalcTotalTo": [
      {
        "name": "DebugCalcTotalTo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:DebugCalcTotalTo()",
        "retail": true
      }
    ],
    "GetStandingName": [
      {
        "name": "GetStandingName",
        "count": 5,
        "confidence": 1.0,
        "sample": "function RepProto:GetStandingName(num)",
        "retail": true
      }
    ],
    "Next": [
      {
        "name": "Next",
        "count": 14,
        "confidence": 1.0,
        "sample": "function RepProto:Next()",
        "retail": true
      }
    ],
    "GetNextStanding": [
      {
        "name": "GetNextStanding",
        "count": 3,
        "confidence": 0.6,
        "sample": "local nextstanding = self:GetNextStanding()",
        "retail": true
      }
    ],
    "EqualOrAbove": [
      {
        "name": "EqualOrAbove",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:EqualOrAbove(standing)",
        "retail": true
      }
    ],
    "Below": [
      {
        "name": "Below",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:Below(standing)",
        "retail": true
      }
    ],
    "GetRawReputation": [
      {
        "name": "GetRawReputation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:GetRawReputation()",
        "retail": true
      }
    ],
    "GetRawFriendship": [
      {
        "name": "GetRawFriendship",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:GetRawFriendship()",
        "retail": true
      }
    ],
    "UpdateRep": [
      {
        "name": "UpdateRep",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepProto:UpdateRep()",
        "retail": true
      }
    ],
    "CacheResults": [
      {
        "name": "ZGV.Covenants.CacheResults",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Covenants.CacheResults()",
        "retail": true
      }
    ],
    "GetFeatures": [
      {
        "name": "C_CovenantSanctumUI.GetFeatures",
        "count": 1,
        "confidence": 0.2,
        "sample": "local features = C_CovenantSanctumUI.GetFeatures()",
        "retail": true
      }
    ],
    "GetTalentTreeInfo": [
      {
        "name": "C_Garrison.GetTalentTreeInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local info = C_Garrison.GetTalentTreeInfo(data.garrTalentTreeID)",
        "retail": true
      }
    ],
    "ButtonPosition": [
      {
        "name": "ButtonPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ButtonPosition(but)",
        "retail": true
      }
    ],
    "PositionTooltip": [
      {
        "name": "PositionTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function PositionTooltip(locX,but)",
        "retail": true
      }
    ],
    "GetBottom": [
      {
        "name": "GetBottom",
        "count": 31,
        "confidence": 1.0,
        "sample": "--print(but:GetBottom(),topspace,sizeInfo.TooltipHeight, yOffset)",
        "retail": true
      }
    ],
    "SetTooltip": [
      {
        "name": "SetTooltip",
        "count": 23,
        "confidence": 1.0,
        "sample": "local function SetTooltip(pos,placement)",
        "retail": true
      }
    ],
    "GetStringHeight": [
      {
        "name": "GetStringHeight",
        "count": 66,
        "confidence": 1.0,
        "sample": "height = 10 + mainFrame.MainText:GetStringHeight() + 10 + mainFrame.TipText:GetStringHeight() + 10 + mainFrame.Back:GetHeight() + 10",
        "retail": true
      }
    ],
    "FadeStart": [
      {
        "name": "FadeStart",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Tutorial:FadeStart()",
        "retail": true
      }
    ],
    "Fade": [
      {
        "name": "Fade",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Fade(pos,placement)",
        "retail": true
      }
    ],
    "FadingReset": [
      {
        "name": "FadingReset",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Tutorial:FadingReset(current)",
        "retail": true
      }
    ],
    "TooltipLast": [
      {
        "name": "TooltipLast",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function TooltipLast()",
        "retail": true
      }
    ],
    "CheckTooltip": [
      {
        "name": "CheckTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CheckTooltip(vert,side,placement) --This has some recursion in it, but has a timeout and tooltip is moving so should fix itself.",
        "retail": true
      }
    ],
    "PlaceTooltip": [
      {
        "name": "PlaceTooltip",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:PlaceTooltip(vert,side,x,y,placement,true)",
        "retail": true
      }
    ],
    "Close": [
      {
        "name": "Close",
        "count": 39,
        "confidence": 1.0,
        "sample": "if not placement then Tutorial:Close() return end",
        "retail": true
      },
      {
        "name": "Details.AuraTracker.Close",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AuraTracker.Close()",
        "retail": true
      }
    ],
    "TutorialPreview": [
      {
        "name": "TutorialPreview",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ActionBar:TutorialPreview(\"on\")",
        "retail": true
      }
    ],
    "SetSpacing": [
      {
        "name": "SetSpacing",
        "count": 13,
        "confidence": 1.0,
        "sample": ":SetSpacing(5)",
        "retail": true
      }
    ],
    "GetDimensions": [
      {
        "name": "GetDimensions",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Tutorial:GetDimensions(ZGVF)",
        "retail": true
      }
    ],
    "GetSize": [
      {
        "name": "GetSize",
        "count": 47,
        "confidence": 1.0,
        "sample": "sizeInfo.TotalWidth,sizeInfo.TotalHeight=UIParent:GetSize() sizeInfo.TotalHeight=sizeInfo.TotalHeight-50 --nothing closer than 50 to top",
        "retail": true
      }
    ],
    "SavePositions": [
      {
        "name": "SavePositions",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Tutorial:SavePositions()",
        "retail": true
      }
    ],
    "Run": [
      {
        "name": "Run",
        "count": 10,
        "confidence": 1.0,
        "sample": "function Tutorial:Run()",
        "retail": true
      }
    ],
    "AttachViewerVendor": [
      {
        "name": "AttachViewerVendor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Inventory:AttachViewerVendor()",
        "retail": true
      }
    ],
    "SaveFrameAnchor": [
      {
        "name": "ZGV.F.SaveFrameAnchor",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZGV.F.SaveFrameAnchor(frame,\"frame_anchor_prevendor\")",
        "retail": true
      }
    ],
    "DetachViewerVendor": [
      {
        "name": "DetachViewerVendor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Inventory:DetachViewerVendor()",
        "retail": true
      }
    ],
    "SetFrameAnchor": [
      {
        "name": "ZGV.F.SetFrameAnchor",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZGV.F.SetFrameAnchor(ZGV.Frame:GetParent(),ZGV.db.profile.frame_anchor_prevendor)",
        "retail": true
      }
    ],
    "GetGrayTrashDetails": [
      {
        "name": "GetGrayTrashDetails",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:GetGrayTrashDetails()",
        "retail": true
      }
    ],
    "GetItemID": [
      {
        "name": "ZGV.ItemLink.GetItemID",
        "count": 9,
        "confidence": 1.0,
        "sample": "local itemID = ZGV.ItemLink.GetItemID(itemLink)",
        "retail": true
      },
      {
        "name": "IL.GetItemID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function IL.GetItemID(itemlink)",
        "retail": true
      },
      {
        "name": "C_Item.GetItemID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemID() end",
        "retail": true
      }
    ],
    "SetActionButtons": [
      {
        "name": "SetActionButtons",
        "count": 13,
        "confidence": 1.0,
        "sample": "ZGV.ActionBar:SetActionButtons() -- to refresh",
        "retail": true
      }
    ],
    "HandleTrashMacro": [
      {
        "name": "HandleTrashMacro",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:HandleTrashMacro()",
        "retail": true
      }
    ],
    "DestroyItem": [
      {
        "name": "DestroyItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Inventory:DestroyItem(item)",
        "retail": true
      }
    ],
    "PickupContainerItem": [
      {
        "name": "C_Container.PickupContainerItem",
        "count": 4,
        "confidence": 0.8,
        "sample": "C_Container.PickupContainerItem(bagID, bagSlotID)",
        "retail": true
      },
      {
        "name": "PickupContainerItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "PickupContainerItem(bag,bagslot) --put it in an empty slot",
        "retail": true
      }
    ],
    "DeleteCursorItem": [
      {
        "name": "DeleteCursorItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "DeleteCursorItem()",
        "retail": true
      }
    ],
    "IsTravelItem": [
      {
        "name": "IsTravelItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:IsTravelItem(itemid)",
        "retail": true
      }
    ],
    "GetUnusableItems": [
      {
        "name": "GetUnusableItems",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Inventory:GetUnusableItems()",
        "retail": true
      }
    ],
    "ScanBagsForUpgrades": [
      {
        "name": "ScanBagsForUpgrades",
        "count": 4,
        "confidence": 0.8,
        "sample": "Upgrades:ScanBagsForUpgrades(onlyscan)",
        "retail": true
      }
    ],
    "ScanBagsForUpgradesForAlts": [
      {
        "name": "ScanBagsForUpgradesForAlts",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Upgrades:ScanBagsForUpgradesForAlts()",
        "retail": true
      }
    ],
    "GetContainerItemEquipmentSetInfo": [
      {
        "name": "C_Container.GetContainerItemEquipmentSetInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not (C_Container and C_Container.GetContainerItemEquipmentSetInfo and C_Container.GetContainerItemEquipmentSetInfo(bagID,bagSlotID)) then -- don't sell equipment sets",
        "retail": true
      }
    ],
    "IsItemBound": [
      {
        "name": "ZGV.IsItemBound",
        "count": 3,
        "confidence": 0.6,
        "sample": "local isSoulbound = ZGV.IsItemBound(bagID, bagSlotID)",
        "retail": true
      }
    ],
    "IsUpgradeForAlt": [
      {
        "name": "IsUpgradeForAlt",
        "count": 2,
        "confidence": 0.4,
        "sample": "--isUpgrade = isUpgrade or Upgrades:IsUpgradeForAlt(stripped_itemlink)",
        "retail": true
      }
    ],
    "IsUpgradeForOffspec": [
      {
        "name": "IsUpgradeForOffspec",
        "count": 3,
        "confidence": 0.6,
        "sample": "isUpgrade = isUpgrade or Upgrades:IsUpgradeForOffspec(stripped_itemlink)",
        "retail": true
      }
    ],
    "GetItemUniqueness": [
      {
        "name": "GetItemUniqueness",
        "count": 5,
        "confidence": 1.0,
        "sample": "if id then fam,fmax = ZGV.ItemScore.Upgrades:GetItemUniqueness(id) end",
        "retail": true
      },
      {
        "name": "C_Item.GetItemUniqueness",
        "count": 2,
        "confidence": 0.4,
        "sample": "local fam,max = C_Item.GetItemUniqueness(id)",
        "retail": true
      }
    ],
    "SetUpGreySellButton": [
      {
        "name": "SetUpGreySellButton",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:SetUpGreySellButton()",
        "retail": true
      }
    ],
    "GetContainerItemID": [
      {
        "name": "C_Container.GetContainerItemID",
        "count": 7,
        "confidence": 1.0,
        "sample": "local itemID=C_Container.GetContainerItemID(bag,slot)",
        "retail": true
      },
      {
        "name": "GetContainerItemID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local itemid=GetContainerItemID(bag,bagslot)",
        "retail": true
      }
    ],
    "UseContainerItem": [
      {
        "name": "C_Container.UseContainerItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Container.UseContainerItem(bag,slot) -- Will use an item and since vendor is open, will sell the item.",
        "retail": true
      },
      {
        "name": "UseContainerItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "UseContainerItem (b, s)",
        "retail": true
      }
    ],
    "GetMoneyString": [
      {
        "name": "GetMoneyString",
        "count": 13,
        "confidence": 1.0,
        "sample": "ZGV:Print(L['loot_sellgreys_total']:format(GetMoneyString(Inventory.SellingGreyTotal)))",
        "retail": true
      },
      {
        "name": "ZGV.GetMoneyString",
        "count": 70,
        "confidence": 1.0,
        "sample": "local text = L['loot_autobuyframetext']:format(itemtext,ZGV.GetMoneyString(totalCost))",
        "retail": true
      }
    ],
    "SellGreyItems": [
      {
        "name": "SellGreyItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:SellGreyItems() --Auto Sell Grey Items",
        "retail": true
      }
    ],
    "FindItemsToBuyDelayed": [
      {
        "name": "FindItemsToBuyDelayed",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Inventory:FindItemsToBuyDelayed(delay)",
        "retail": true
      }
    ],
    "FindItemsToBuy": [
      {
        "name": "FindItemsToBuy",
        "count": 2,
        "confidence": 0.4,
        "sample": "Inventory.FindeItemsTimer = ZGV:ScheduleTimer(function() Inventory:FindItemsToBuy() end,delay or 0.1)",
        "retail": true
      }
    ],
    "RemoveEntry": [
      {
        "name": "RemoveEntry",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZGV.NotificationCenter:RemoveEntry(\"goldbuy\")",
        "retail": true
      }
    ],
    "GetMerchantNumItems": [
      {
        "name": "GetMerchantNumItems",
        "count": 1,
        "confidence": 0.2,
        "sample": "for index=1,GetMerchantNumItems() do while(1) do",
        "retail": true
      }
    ],
    "GetMerchantItemInfo": [
      {
        "name": "GetMerchantItemInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local merchItemName,_,costForOne,merchantStack,numAvail = GetMerchantItemInfo(index)",
        "retail": true
      }
    ],
    "GetMerchantItemLink": [
      {
        "name": "GetMerchantItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local itemlink = GetMerchantItemLink(index)",
        "retail": true
      }
    ],
    "GetMerchantItemMaxStack": [
      {
        "name": "GetMerchantItemMaxStack",
        "count": 1,
        "confidence": 0.2,
        "sample": "local maxStack = GetMerchantItemMaxStack(index)",
        "retail": true
      }
    ],
    "GetMoney": [
      {
        "name": "GetMoney",
        "count": 15,
        "confidence": 1.0,
        "sample": "local playerMoney = GetMoney()",
        "retail": true
      }
    ],
    "AddEntry": [
      {
        "name": "AddEntry",
        "count": 36,
        "confidence": 1.0,
        "sample": "ZGV.NotificationCenter:AddEntry(\"goldbuy\",title,text,{special=true, specialtext=\"Buy items\", forcemode=\"detailed\", displaytime=9999, transient=true, anchor={\"LEFT\",MerchantFrame,\"RIGHT\",0,0}})",
        "retail": true
      }
    ],
    "BuyItems": [
      {
        "name": "BuyItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:BuyItems()",
        "retail": true
      }
    ],
    "BuyMerchantItem": [
      {
        "name": "BuyMerchantItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "BuyMerchantItem(item.index,buyAmount)",
        "retail": true
      }
    ],
    "SetUpBagspaceText": [
      {
        "name": "SetUpBagspaceText",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:SetUpBagspaceText()",
        "retail": true
      }
    ],
    "UpdateBagspaceText": [
      {
        "name": "UpdateBagspaceText",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Inventory:UpdateBagspaceText()",
        "retail": true
      }
    ],
    "GetContainerNumFreeSlots": [
      {
        "name": "C_Container.GetContainerNumFreeSlots",
        "count": 3,
        "confidence": 0.6,
        "sample": "free = free + C_Container.GetContainerNumFreeSlots(bag)",
        "retail": true
      }
    ],
    "StripBlizzExtras": [
      {
        "name": "ZGV.ItemLink.StripBlizzExtras",
        "count": 4,
        "confidence": 0.8,
        "sample": "link = ZGV.ItemLink.StripBlizzExtras(link,true)",
        "retail": true
      },
      {
        "name": "IL.StripBlizzExtras",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.StripBlizzExtras(itemlink,keepDecor)",
        "retail": true
      }
    ],
    "RecordBank": [
      {
        "name": "RecordBank",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:RecordBank()",
        "retail": true
      }
    ],
    "ContainerIDToInventoryID": [
      {
        "name": "C_Container.ContainerIDToInventoryID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local slot = C_Container.ContainerIDToInventoryID(NUM_BAG_SLOTS + index-1)",
        "retail": true
      }
    ],
    "GetInventoryItemTexture": [
      {
        "name": "GetInventoryItemTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "local bagtexture = GetInventoryItemTexture(\"player\",slot)",
        "retail": true
      }
    ],
    "IsReagentBankUnlocked": [
      {
        "name": "IsReagentBankUnlocked",
        "count": 1,
        "confidence": 0.2,
        "sample": "if IsReagentBankUnlocked and IsReagentBankUnlocked() then",
        "retail": true
      }
    ],
    "FetchPurchasedBankTabData": [
      {
        "name": "C_Bank.FetchPurchasedBankTabData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local tabDataFetched = C_Bank.FetchPurchasedBankTabData(Enum.BankType.Account)",
        "retail": true
      }
    ],
    "SendMessage": [
      {
        "name": "SendMessage",
        "count": 49,
        "confidence": 1.0,
        "sample": "ZGV:SendMessage(\"INVENTORY_BANK_UPDATED\")",
        "retail": true
      }
    ],
    "CharacterBankKnown": [
      {
        "name": "CharacterBankKnown",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:CharacterBankKnown()",
        "retail": true
      }
    ],
    "ParseBank": [
      {
        "name": "ParseBank",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Inventory:ParseBank(ident)",
        "retail": true
      }
    ],
    "GetCalendarTimeFromEpoch": [
      {
        "name": "C_DateAndTime.GetCalendarTimeFromEpoch",
        "count": 6,
        "confidence": 1.0,
        "sample": "local timeobj = C_DateAndTime.GetCalendarTimeFromEpoch(timestamp*1000000)  -- seconds to microseconds",
        "retail": true
      }
    ],
    "FormatShortDate": [
      {
        "name": "FormatShortDate",
        "count": 9,
        "confidence": 1.0,
        "sample": "local timestamp = FormatShortDate(timeobj.monthDay, timeobj.month, timeobj.year) .. \" \" .. GameTime_GetFormattedTime(timeobj.hour, timeobj.minute, true)",
        "retail": true
      }
    ],
    "GameTime_GetFormattedTime": [
      {
        "name": "GameTime_GetFormattedTime",
        "count": 8,
        "confidence": 1.0,
        "sample": "local timestamp = FormatShortDate(timeobj.monthDay, timeobj.month, timeobj.year) .. \" \" .. GameTime_GetFormattedTime(timeobj.hour, timeobj.minute, true)",
        "retail": true
      }
    ],
    "ParseBankSummary": [
      {
        "name": "ParseBankSummary",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:ParseBankSummary()",
        "retail": true
      }
    ],
    "CountBank": [
      {
        "name": "CountBank",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Inventory:CountBank(itemid)",
        "retail": true
      }
    ],
    "AutoRepair": [
      {
        "name": "AutoRepair",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Inventory:AutoRepair()",
        "retail": true
      }
    ],
    "CanMerchantRepair": [
      {
        "name": "CanMerchantRepair",
        "count": 1,
        "confidence": 0.2,
        "sample": "if CanMerchantRepair() then",
        "retail": true
      }
    ],
    "GetRepairAllCost": [
      {
        "name": "GetRepairAllCost",
        "count": 1,
        "confidence": 0.2,
        "sample": "local zgvgoldneeded = GetRepairAllCost()",
        "retail": true
      }
    ],
    "CanGuildBankRepair": [
      {
        "name": "CanGuildBankRepair",
        "count": 2,
        "confidence": 0.4,
        "sample": "local zgvcangbrepair = CanGuildBankRepair()",
        "retail": true
      }
    ],
    "GetGuildBankWithdrawMoney": [
      {
        "name": "GetGuildBankWithdrawMoney",
        "count": 1,
        "confidence": 0.2,
        "sample": "local zgvgbankamount = GetGuildBankWithdrawMoney()",
        "retail": true
      }
    ],
    "IsInGuild": [
      {
        "name": "IsInGuild",
        "count": 15,
        "confidence": 1.0,
        "sample": "if ZGV.db.profile.autorepair==2 or (not IsInGuild() and ZGV.db.profile.autorepair>2) then",
        "retail": true
      }
    ],
    "RepairAllItems": [
      {
        "name": "RepairAllItems",
        "count": 5,
        "confidence": 1.0,
        "sample": "RepairAllItems()",
        "retail": true
      }
    ],
    "OnEvent": [
      {
        "name": "Inventory.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Inventory.OnEvent(self, event)",
        "retail": true
      },
      {
        "name": "OnEvent",
        "count": 39,
        "confidence": 1.0,
        "sample": "function ItemScore:OnEvent(event,arg1,arg2,...)",
        "retail": true
      },
      {
        "name": "Sync.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Sync.OnEvent(addon,event,...)",
        "retail": true
      },
      {
        "name": "GuideFuncs.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GuideFuncs.OnEvent(self,event,arg1,...)",
        "retail": true
      },
      {
        "name": "Lib.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.OnEvent(this, event, arg1,arg2)",
        "retail": true
      },
      {
        "name": "ChatThrottleLib.OnEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ChatThrottleLib.OnEvent(this,event)",
        "retail": true
      },
      {
        "name": "AuraScan.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.OnEvent(frame, eventName, unitId, updateInfo)",
        "retail": true
      },
      {
        "name": "NickTag.OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag.OnEvent (self, event, ...)",
        "retail": true
      }
    ],
    "SetShown": [
      {
        "name": "SetShown",
        "count": 46,
        "confidence": 1.0,
        "sample": "Inventory.greysellbutton:SetShown(ZGV.db.profile.showgreysellbutton)",
        "retail": true
      }
    ],
    "SellUnusableItems": [
      {
        "name": "SellUnusableItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "--if ZGV.db.profile.autosellother and ZGV.db.profile.enable_vendor_tools then Inventory:SellUnusableItems() end",
        "retail": true
      }
    ],
    "ShowSuggested": [
      {
        "name": "ShowSuggested",
        "count": 3,
        "confidence": 0.6,
        "sample": "callback=function() GuideMenu:ShowSuggested() GuideMenu:Update() end",
        "retail": true
      }
    ],
    "ShowRecent": [
      {
        "name": "ShowRecent",
        "count": 3,
        "confidence": 0.6,
        "sample": "callback=function() GuideMenu:ShowRecent() GuideMenu:Update() end",
        "retail": true
      }
    ],
    "UIDropDownFork_Refresh": [
      {
        "name": "UIDropDownFork_Refresh",
        "count": 11,
        "confidence": 1.0,
        "sample": "func=function() ZGV.db.profile[name]=value UIDropDownFork_Refresh(ZGV.Frame.Controls.MenuHostGuides) end,",
        "retail": true
      }
    ],
    "Open": [
      {
        "name": "Open",
        "count": 61,
        "confidence": 1.0,
        "sample": "function GuideMenu:Open(path,iscurrent,...)",
        "retail": true
      },
      {
        "name": "Details.AuraTracker.Open",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.AuraTracker.Open()",
        "retail": true
      },
      {
        "name": "DetailsMythicPlus.Open",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsMythicPlus.Open(runId)",
        "retail": true
      }
    ],
    "HideRowMouseOver": [
      {
        "name": "HideRowMouseOver",
        "count": 4,
        "confidence": 0.8,
        "sample": "GuideMenu:HideRowMouseOver()",
        "retail": true
      }
    ],
    "Initialise": [
      {
        "name": "Initialise",
        "count": 41,
        "confidence": 1.0,
        "sample": "ZGV.Goldguide:Initialise()",
        "retail": true
      },
      {
        "name": "TA.Initialise",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TA.Initialise()",
        "retail": true
      }
    ],
    "CloseDropDownForks": [
      {
        "name": "CloseDropDownForks",
        "count": 33,
        "confidence": 1.0,
        "sample": "CloseDropDownForks()",
        "retail": true
      }
    ],
    "SetLockHighlight": [
      {
        "name": "SetLockHighlight",
        "count": 4,
        "confidence": 0.8,
        "sample": "v:SetLockHighlight(true)",
        "retail": true
      }
    ],
    "ShowCurrent": [
      {
        "name": "ShowCurrent",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowCurrent()",
        "retail": true
      }
    ],
    "ShowHome": [
      {
        "name": "ShowHome",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideMenu:ShowHome()",
        "retail": true
      }
    ],
    "ShowFeatured": [
      {
        "name": "ShowFeatured",
        "count": 7,
        "confidence": 1.0,
        "sample": "GuideMenu:ShowFeatured()",
        "retail": true
      }
    ],
    "ShowOptions": [
      {
        "name": "ShowOptions",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowOptions(...)",
        "retail": true
      }
    ],
    "Search": [
      {
        "name": "Search",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:Search()",
        "retail": true
      }
    ],
    "SearchQuest": [
      {
        "name": "SearchQuest",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideMenu:SearchQuest(...)",
        "retail": true
      }
    ],
    "ShowFavourites": [
      {
        "name": "ShowFavourites",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowFavourites()",
        "retail": true
      }
    ],
    "ShowGuides": [
      {
        "name": "ShowGuides",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowGuides(path,iscurrent)",
        "retail": true
      }
    ],
    "HideAllPopups": [
      {
        "name": "HideAllPopups",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.Widgets:HideAllPopups()",
        "retail": true
      }
    ],
    "SetSectionHeader": [
      {
        "name": "SetSectionHeader",
        "count": 11,
        "confidence": 1.0,
        "sample": "function GuideMenu:SetSectionHeader(text,arrow)",
        "retail": true
      }
    ],
    "SetWideSectionHeader": [
      {
        "name": "SetWideSectionHeader",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideMenu:SetWideSectionHeader(text)",
        "retail": true
      }
    ],
    "UpdateHandler": [
      {
        "name": "UpdateHandler",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function UpdateHandler(self, event)",
        "retail": true
      },
      {
        "name": "Appraiser.UpdateHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser.UpdateHandler(nil,1000) -- force update",
        "retail": true
      },
      {
        "name": "Scan.UpdateHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan.UpdateHandler(frame,elapsed)",
        "retail": true
      }
    ],
    "HoverBarShow": [
      {
        "name": "HoverBarShow",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Widgets:HoverBarShow()",
        "retail": true
      }
    ],
    "HoverBarHide": [
      {
        "name": "HoverBarHide",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Widgets:HoverBarHide()",
        "retail": true
      }
    ],
    "HasFocus": [
      {
        "name": "HasFocus",
        "count": 10,
        "confidence": 1.0,
        "sample": "if GuideMenu.MainFrame.MenuGuides.SearchEdit:HasFocus()",
        "retail": true
      }
    ],
    "SquareCorners": [
      {
        "name": "SquareCorners",
        "count": 8,
        "confidence": 1.0,
        "sample": ":SquareCorners(true,true,true,false)",
        "retail": true
      }
    ],
    "HTMLColor": [
      {
        "name": "ZGV.F.HTMLColor",
        "count": 182,
        "confidence": 1.0,
        "sample": ":SetBackdropColor(ZGV.F.HTMLColor(\"#0d0d0dff\"))",
        "retail": true
      },
      {
        "name": "HTMLColor",
        "count": 26,
        "confidence": 1.0,
        "sample": "local ACCENT = {HTMLColor(\"#fe6100ff\")}",
        "retail": true
      }
    ],
    "CreateFrames": [
      {
        "name": "CreateFrames",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideMenu:CreateFrames()",
        "retail": true
      }
    ],
    "DisableConfig": [
      {
        "name": "DisableConfig",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.Widgets:DisableConfig()",
        "retail": true
      }
    ],
    "HeaderButton_SetHighlight": [
      {
        "name": "HeaderButton_SetHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HeaderButton_SetHighlight(button,tf,force)",
        "retail": true
      }
    ],
    "HeaderButton_SetNormalTextColor": [
      {
        "name": "HeaderButton_SetNormalTextColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HeaderButton_SetNormalTextColor(button,r,g,b,a)",
        "retail": true
      }
    ],
    "HeaderButton_SetHighlightTextColor": [
      {
        "name": "HeaderButton_SetHighlightTextColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HeaderButton_SetHighlightTextColor(button,r,g,b,a)",
        "retail": true
      }
    ],
    "HeaderButton_SetLockHighlight": [
      {
        "name": "HeaderButton_SetLockHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HeaderButton_SetLockHighlight(button,tf)",
        "retail": true
      }
    ],
    "SetHighlight": [
      {
        "name": "SetHighlight",
        "count": 7,
        "confidence": 1.0,
        "sample": "button:SetHighlight(tf,true)",
        "retail": true
      }
    ],
    "SetNormalTextColor": [
      {
        "name": "SetNormalTextColor",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetNormalTextColor(unpack(GuideMenu.BUTTONS_NORMAL_COLOR))",
        "retail": true
      }
    ],
    "SetHighlightTextColor": [
      {
        "name": "SetHighlightTextColor",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetHighlightTextColor(unpack(GuideMenu.BUTTONS_HIGHLIGHT_COLOR))",
        "retail": true
      }
    ],
    "GetStringWidth": [
      {
        "name": "GetStringWidth",
        "count": 105,
        "confidence": 1.0,
        "sample": ":SetWidth(button:GetStringWidth()+6)",
        "retail": true
      }
    ],
    "SearchHistory_Commit": [
      {
        "name": "SearchHistory_Commit",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnEnterPressed\",function() MF.MenuGuides.SearchEdit:ClearFocus() GuideMenu:Open(\"Search\") GuideMenu:SearchHistory_Commit() end)",
        "retail": true
      }
    ],
    "PrepareGuidesMenuButtons": [
      {
        "name": "PrepareGuidesMenuButtons",
        "count": 4,
        "confidence": 0.8,
        "sample": "GuideMenu:PrepareGuidesMenuButtons()",
        "retail": true
      }
    ],
    "MakeMenuButton": [
      {
        "name": "MakeMenuButton",
        "count": 5,
        "confidence": 1.0,
        "sample": "MF.MenuGuides.Options = GuideMenu:MakeMenuButton(\"ButtonOptions\",\"Options\",SkinData(\"TitleButtons\"),5,64,1,4)",
        "retail": true
      }
    ],
    "ToggleSectionMenu": [
      {
        "name": "ToggleSectionMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\",function() GuideMenu:ToggleSectionMenu() end)",
        "retail": true
      }
    ],
    "SetRotation": [
      {
        "name": "SetRotation",
        "count": 23,
        "confidence": 1.0,
        "sample": "SectionInfo.SettingsButton:GetNormalTexture():SetRotation(1.57079633) -- 90 degree in radians",
        "retail": true
      }
    ],
    "ActivateGuide": [
      {
        "name": "ActivateGuide",
        "count": 21,
        "confidence": 1.0,
        "sample": "GuideMenu:ActivateGuide(row.guide)",
        "retail": true
      }
    ],
    "ShowRowMouseOver": [
      {
        "name": "ShowRowMouseOver",
        "count": 2,
        "confidence": 0.4,
        "sample": "row:SetScript(\"OnEnter\",function() GuideMenu:ShowRowMouseOver(row) GuideMenu.CurrentRow=row end)",
        "retail": true
      }
    ],
    "GetScript": [
      {
        "name": "GetScript",
        "count": 101,
        "confidence": 1.0,
        "sample": "local load_button_onenter=row.loadbutton:GetScript(\"OnEnter\")",
        "retail": true
      }
    ],
    "ToggleFavourite": [
      {
        "name": "ToggleFavourite",
        "count": 2,
        "confidence": 0.4,
        "sample": "row.favourite:SetScript(\"OnClick\",function(but) if row.guide then row.guide:ToggleFavourite() GuideMenu:Update() end end)",
        "retail": true
      }
    ],
    "SetLooping": [
      {
        "name": "SetLooping",
        "count": 14,
        "confidence": 1.0,
        "sample": ":SetLooping(\"REPEAT\") .__END",
        "retail": true
      }
    ],
    "SetAutoRotation": [
      {
        "name": "SetAutoRotation",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetAutoRotation(0.4)",
        "retail": true
      }
    ],
    "ExportPath": [
      {
        "name": "ExportPath",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideMenu:ExportPath(row)",
        "retail": true
      }
    ],
    "MenuButton_SetHighlight": [
      {
        "name": "MenuButton_SetHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MenuButton_SetHighlight(button,tf,force)",
        "retail": true
      }
    ],
    "SetSpriteTexCoord": [
      {
        "name": "ZGV.F.SetSpriteTexCoord",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.F.SetSpriteTexCoord(button.texture,unpack(tf and button.spritecoords_hilite or button.spritecoords))",
        "retail": true
      },
      {
        "name": "SetSpriteTexCoord",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- SetSpriteTexCoord(textureobject,2,4,3,8) -- sets texture coords on textureobject to crop to sprite in the 2nd of 4 columns, 1st of 8 rows.",
        "retail": true
      }
    ],
    "MenuButton_SetHighlightSprite": [
      {
        "name": "MenuButton_SetHighlightSprite",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MenuButton_SetHighlightSprite(button,x,w,y,h)",
        "retail": true
      }
    ],
    "MenuButton_SetLockHighlight": [
      {
        "name": "MenuButton_SetLockHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MenuButton_SetLockHighlight(button,tf)",
        "retail": true
      }
    ],
    "MenuButton_SetNormalTextColor": [
      {
        "name": "MenuButton_SetNormalTextColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MenuButton_SetNormalTextColor(button,r,g,b,a)",
        "retail": true
      }
    ],
    "MenuButton_SetHighlightTextColor": [
      {
        "name": "MenuButton_SetHighlightTextColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MenuButton_SetHighlightTextColor(button,r,g,b,a)",
        "retail": true
      }
    ],
    "SetHighlightTexture": [
      {
        "name": "SetHighlightTexture",
        "count": 69,
        "confidence": 1.0,
        "sample": "but:SetHighlightTexture(\"dummy\") -- we need to set it, so it gets created.",
        "retail": true
      }
    ],
    "ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED": [
      {
        "name": "ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ZGV_LOADING_TOPLEVEL_GROUPS_UPDATED()",
        "retail": true
      }
    ],
    "DoFadeIn": [
      {
        "name": "DoFadeIn",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideMenu.MainFrame:DoFadeIn()",
        "retail": true
      }
    ],
    "DoFadeOut": [
      {
        "name": "DoFadeOut",
        "count": 3,
        "confidence": 0.6,
        "sample": "GuideMenu.MainFrame:DoFadeOut()",
        "retail": true
      }
    ],
    "Unload": [
      {
        "name": "Unload",
        "count": 3,
        "confidence": 0.6,
        "sample": "v:Unload()",
        "retail": true
      }
    ],
    "CreateHome": [
      {
        "name": "CreateHome",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideMenu:CreateHome()",
        "retail": true
      }
    ],
    "SetupWidgets": [
      {
        "name": "SetupWidgets",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Widgets:SetupWidgets()",
        "retail": true
      }
    ],
    "UpdateHomeWidgets": [
      {
        "name": "UpdateHomeWidgets",
        "count": 9,
        "confidence": 1.0,
        "sample": "GuideMenu:UpdateHomeWidgets()",
        "retail": true
      }
    ],
    "ApplyLayout": [
      {
        "name": "ApplyLayout",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.Widgets:ApplyLayout()",
        "retail": true
      }
    ],
    "TotalValue": [
      {
        "name": "TotalValue",
        "count": 20,
        "confidence": 1.0,
        "sample": "GuideMenu.MainFrame.WideColumnHome:TotalValue(height)",
        "retail": true
      }
    ],
    "SetValue": [
      {
        "name": "SetValue",
        "count": 471,
        "confidence": 1.0,
        "sample": "GuideMenu.MainFrame.WideColumnHome:SetValue(0)",
        "retail": true
      }
    ],
    "SetVerticalScroll": [
      {
        "name": "SetVerticalScroll",
        "count": 21,
        "confidence": 1.0,
        "sample": "GuideMenu.MainFrame.WideColumnHome:SetVerticalScroll(0)",
        "retail": true
      }
    ],
    "StartFeatured": [
      {
        "name": "StartFeatured",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideMenu:StartFeatured()",
        "retail": true
      }
    ],
    "ParseFeatured": [
      {
        "name": "ParseFeatured",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GuideMenu:ParseFeatured()",
        "retail": true
      }
    ],
    "FindFilteredGuides": [
      {
        "name": "FindFilteredGuides",
        "count": 3,
        "confidence": 0.6,
        "sample": "local res = ZGV:FindFilteredGuides(element.filters)",
        "retail": true
      }
    ],
    "Render": [
      {
        "name": "Render",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.Visuals:Render(section,FEATURED_COLUMN_WIDTH,section.frame,{TOPLEFT={0,0}, GUIDESTATUS=true, NOWORDWRAP=true, BOTTOMPADDING={banner=10,item=0}})",
        "retail": true
      }
    ],
    "SetIgnoreParentAlpha": [
      {
        "name": "SetIgnoreParentAlpha",
        "count": 71,
        "confidence": 1.0,
        "sample": ":SetIgnoreParentAlpha(true)",
        "retail": true
      }
    ],
    "AssignToTexture": [
      {
        "name": "AssignToTexture",
        "count": 21,
        "confidence": 1.0,
        "sample": "ZGV.ButtonSets.TitleButtons.STEP_NEXT:AssignToTexture(section.frame.footer.arrow)",
        "retail": true
      }
    ],
    "ShowBulletin": [
      {
        "name": "ShowBulletin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GuideMenu:ShowBulletin()",
        "retail": true
      }
    ],
    "ShowPopup": [
      {
        "name": "ShowPopup",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.Widgets.Registered.zygormessage:ShowPopup()",
        "retail": true
      }
    ],
    "GetSectionMenu": [
      {
        "name": "GetSectionMenu",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideMenu:GetSectionMenu()",
        "retail": true
      }
    ],
    "UIDropDownFork_SetAnchor": [
      {
        "name": "UIDropDownFork_SetAnchor",
        "count": 21,
        "confidence": 1.0,
        "sample": "UIDropDownFork_SetAnchor(ZGV.Frame.Controls.MenuHostGuides, 0, 0, \"TOP\",MF.CenterColumn.SectionInfo.SettingsButton,\"BOTTOM\")",
        "retail": true
      }
    ],
    "EasyFork": [
      {
        "name": "EasyFork",
        "count": 22,
        "confidence": 1.0,
        "sample": "EasyFork(RightColumnSubmenus[menu],ZGV.Frame.Controls.MenuHostGuides,nil,0,0,\"MENU\",10)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetWidth": [
      {
        "name": "UIDropDownFork_SetWidth",
        "count": 10,
        "confidence": 1.0,
        "sample": "UIDropDownFork_SetWidth(ZGV.Frame.Controls.MenuHostGuides,210,10)",
        "retail": true
      }
    ],
    "OptionButton_OnClick": [
      {
        "name": "OptionButton_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OptionButton_OnClick(button)",
        "retail": true
      }
    ],
    "HighlightOptionButton": [
      {
        "name": "HighlightOptionButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:HighlightOptionButton(button.optiongroupblizname)",
        "retail": true
      }
    ],
    "ShowOptionButtons": [
      {
        "name": "ShowOptionButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShowOptionButtons()",
        "retail": true
      }
    ],
    "SetHighlightSprite": [
      {
        "name": "SetHighlightSprite",
        "count": 1,
        "confidence": 0.2,
        "sample": "--button:SetHighlightSprite(1,2,i,16)",
        "retail": true
      }
    ],
    "CreateOptions": [
      {
        "name": "CreateOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GuideMenu:CreateOptions()",
        "retail": true
      }
    ],
    "Options_Initialize": [
      {
        "name": "Options_Initialize",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:Options_Initialize()",
        "retail": true
      }
    ],
    "SetProfile": [
      {
        "name": "SetProfile",
        "count": 9,
        "confidence": 1.0,
        "sample": "--self.db:SetProfile(\"char/\"..UnitName(\"player\")..\" - \"..GetRealmName())",
        "retail": true
      },
      {
        "name": "DBObjectLib.SetProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "DBObjectLib.SetProfile(db, name)",
        "retail": true
      },
      {
        "name": "SavedVars.SetProfile",
        "count": 3,
        "confidence": 0.6,
        "sample": "function detailsFramework.SavedVars.SetProfile(addonObject, profileName, bCopyFromCurrentProfile)",
        "retail": true
      }
    ],
    "GetRealmName": [
      {
        "name": "GetRealmName",
        "count": 34,
        "confidence": 1.0,
        "sample": "--self.db:SetProfile(\"char/\"..UnitName(\"player\")..\" - \"..GetRealmName())",
        "retail": true
      }
    ],
    "Options_DefineOptionTables": [
      {
        "name": "Options_DefineOptionTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Options_DefineOptionTables()",
        "retail": true
      }
    ],
    "Options_RegisterDefaults": [
      {
        "name": "Options_RegisterDefaults",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:Options_RegisterDefaults()",
        "retail": true
      }
    ],
    "Options_SetupConfig": [
      {
        "name": "Options_SetupConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Options_SetupConfig()",
        "retail": true
      }
    ],
    "Options_SetupBlizConfig": [
      {
        "name": "Options_SetupBlizConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Options_SetupBlizConfig()",
        "retail": true
      }
    ],
    "Options_SetFromMode": [
      {
        "name": "Options_SetFromMode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:Options_SetFromMode()",
        "retail": true
      }
    ],
    "UpdateLocking": [
      {
        "name": "UpdateLocking",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:UpdateLocking()",
        "retail": true
      }
    ],
    "ScrollToCurrentStep": [
      {
        "name": "ScrollToCurrentStep",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:ScrollToCurrentStep()",
        "retail": true
      }
    ],
    "ResetToDefaults": [
      {
        "name": "ResetToDefaults",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function ResetToDefaults(options_tab,parent)",
        "retail": true
      }
    ],
    "Setter_Simple": [
      {
        "name": "Setter_Simple",
        "count": 171,
        "confidence": 1.0,
        "sample": "Setter_Simple(info,value)",
        "retail": true
      }
    ],
    "Setter_Travel": [
      {
        "name": "Setter_Travel",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Setter_Travel(i,v)",
        "retail": true
      }
    ],
    "UpdateConfig": [
      {
        "name": "UpdateConfig",
        "count": 4,
        "confidence": 0.8,
        "sample": "LibRover:UpdateConfig()",
        "retail": true
      }
    ],
    "UpdateNow": [
      {
        "name": "UpdateNow",
        "count": 35,
        "confidence": 1.0,
        "sample": "LibRover:UpdateNow()",
        "retail": true
      }
    ],
    "ShowWaypoints": [
      {
        "name": "ShowWaypoints",
        "count": 48,
        "confidence": 1.0,
        "sample": "ZGV:ShowWaypoints()",
        "retail": true
      }
    ],
    "AddOption": [
      {
        "name": "AddOption",
        "count": 517,
        "confidence": 1.0,
        "sample": "local function AddOption(optname,optdata)",
        "retail": true
      }
    ],
    "AddOptionSep": [
      {
        "name": "AddOptionSep",
        "count": 66,
        "confidence": 1.0,
        "sample": "AddOptionSep()",
        "retail": true
      }
    ],
    "AddOptionSpace": [
      {
        "name": "AddOptionSpace",
        "count": 53,
        "confidence": 1.0,
        "sample": "function AddOptionSpace()",
        "retail": true
      }
    ],
    "AddSubgroup": [
      {
        "name": "AddSubgroup",
        "count": 14,
        "confidence": 1.0,
        "sample": "local function AddSubgroup(optname,optdata)",
        "retail": true
      }
    ],
    "EndSubgroup": [
      {
        "name": "EndSubgroup",
        "count": 13,
        "confidence": 1.0,
        "sample": "local function EndSubgroup()",
        "retail": true
      }
    ],
    "AddOptionGroup": [
      {
        "name": "AddOptionGroup",
        "count": 24,
        "confidence": 1.0,
        "sample": "local function AddOptionGroup(groupname,groupupname,slash,groupdata)",
        "retail": true
      }
    ],
    "CreateFont": [
      {
        "name": "CreateFont",
        "count": 7,
        "confidence": 1.0,
        "sample": "self.font_dialog = CreateFont(\"ZygorFontDialog\")",
        "retail": true
      }
    ],
    "ToggleFrame": [
      {
        "name": "ToggleFrame",
        "count": 20,
        "confidence": 1.0,
        "sample": "func = function(inp) ZGV:ToggleFrame() end,",
        "retail": true
      }
    ],
    "SetWaypointByCommandLine": [
      {
        "name": "SetWaypointByCommandLine",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.Pointer:SetWaypointByCommandLine(input)",
        "retail": true
      }
    ],
    "GetCVar": [
      {
        "name": "GetCVar",
        "count": 22,
        "confidence": 1.0,
        "sample": "get = function() return GetCVar(\"scriptProfile\")==\"1\" end,",
        "retail": true
      },
      {
        "name": "C_CVar.GetCVar",
        "count": 2,
        "confidence": 0.4,
        "sample": "local debugMessage = C_CVar.GetCVar(CONST_CVAR_TEMPCACHE_DEBUG)",
        "retail": true
      }
    ],
    "Debug_FlagsMenu": [
      {
        "name": "Debug_FlagsMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "func = function(inp)  ZGV:Debug_FlagsMenu()  end",
        "retail": true
      }
    ],
    "Detect": [
      {
        "name": "Detect",
        "count": 3,
        "confidence": 0.6,
        "sample": "func = function() ZGV.CreatureDetector:Detect(\"force\") end,",
        "retail": true
      }
    ],
    "SuggestGuidesForQuest": [
      {
        "name": "SuggestGuidesForQuest",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.QuestDB:SuggestGuidesForQuest(input) end,",
        "retail": true
      }
    ],
    "Activate": [
      {
        "name": "Activate",
        "count": 1,
        "confidence": 0.2,
        "sample": "set = function(i,v) Setter_Simple(i,v)  ZGV.Sync:Activate()  if ZGV.CurrentGuide and ZGV.CurrentGuide.headerdata.shared then ZGV:ClearCurrentGuide() end end,",
        "retail": true
      }
    ],
    "ClearCurrentGuide": [
      {
        "name": "ClearCurrentGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "set = function(i,v) Setter_Simple(i,v)  ZGV.Sync:Activate()  if ZGV.CurrentGuide and ZGV.CurrentGuide.headerdata.shared then ZGV:ClearCurrentGuide() end end,",
        "retail": true
      }
    ],
    "MinimapZoomChanged": [
      {
        "name": "MinimapZoomChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[[hidden--]] AddOption('minimapzoom',{ type = 'toggle', width = \"full\", set = function(i,v) Setter_Simple(i,v)  self.Pointer:MinimapZoomChanged() end, _default = false, hidden=true, })",
        "retail": true
      }
    ],
    "UpdateVisibility": [
      {
        "name": "UpdateVisibility",
        "count": 9,
        "confidence": 1.0,
        "sample": "--AddOption('hidetracker',{ type = 'toggle', set = function(i,v) Setter_Simple(i,v)  ZGV.Replacements:UpdateVisibility(\"force\")  end, _default=false, width=200,})",
        "retail": true
      }
    ],
    "Stealth": [
      {
        "name": "Stealth",
        "count": 2,
        "confidence": 0.4,
        "sample": "return t  -- [1]=\"Stealth (default)\", [2]=\"Midnight\"",
        "retail": true
      }
    ],
    "SetSkin": [
      {
        "name": "SetSkin",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SetSkin(self.db.profile.skin,style_sort_order_rev[n] or n)  -- use string id if number given",
        "retail": true
      }
    ],
    "GetScale": [
      {
        "name": "GetScale",
        "count": 34,
        "confidence": 1.0,
        "sample": "local scale = ZGV.Frame:GetScale()",
        "retail": true
      }
    ],
    "ReanchorFrame": [
      {
        "name": "ReanchorFrame",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:ReanchorFrame()",
        "retail": true
      }
    ],
    "After": [
      {
        "name": "C_Timer.After",
        "count": 177,
        "confidence": 1.0,
        "sample": "C_Timer.After(0.001,function()",
        "retail": true
      },
      {
        "name": "Details.Schedules.After",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details.Schedules.After(5, _detalhes.wipe_combat_after_failed_load)",
        "retail": true
      },
      {
        "name": "DF.Schedules.After",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.Schedules.After(DF.Math.RandomFraction(0.016, 0.3), function()",
        "retail": true
      },
      {
        "name": "Schedules.After",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework.Schedules.After(time, callback)",
        "retail": true
      }
    ],
    "SetCombatHiding": [
      {
        "name": "SetCombatHiding",
        "count": 9,
        "confidence": 1.0,
        "sample": "AddOption('hideincombat',{ type = 'toggle', width=\"double\", _default = false, set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:SetCombatHiding(v) ZGV.ActionBar:SetCombatHiding() end,})",
        "retail": true
      }
    ],
    "UpdateMapButton": [
      {
        "name": "UpdateMapButton",
        "count": 4,
        "confidence": 0.8,
        "sample": "AddOption('showmapbutton',{ type = 'toggle', width = \"full\", _default=true, set = function(i,v) Setter_Simple(i,v)  self:UpdateMapButton()  end, })",
        "retail": true
      }
    ],
    "ResetWindow": [
      {
        "name": "ResetWindow",
        "count": 10,
        "confidence": 1.0,
        "sample": "func = function() ZGV.Frame:ResetWindow() end,",
        "retail": true
      }
    ],
    "OnSizeChanged": [
      {
        "name": "OnSizeChanged",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZGV.Frame:OnSizeChanged()",
        "retail": true
      }
    ],
    "UnitGroupRolesAssigned": [
      {
        "name": "UnitGroupRolesAssigned",
        "count": 28,
        "confidence": 1.0,
        "sample": "AddOption('showallroles',{ type = 'toggle', width = \"full\", desc = function() return L['opt_showallroles_desc'] .. (UnitGroupRolesAssigned(\"Player\")==\"NONE\" and \"\\n\"..L['opt_showallroles_descwarnnone'] or \"\") end, _default=true, })",
        "retail": true
      },
      {
        "name": "DetailsFramework.UnitGroupRolesAssigned",
        "count": 2,
        "confidence": 0.4,
        "sample": "local role = DetailsFramework.UnitGroupRolesAssigned(\"player\")",
        "retail": true
      },
      {
        "name": "DF.UnitGroupRolesAssigned",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.UnitGroupRolesAssigned(unitId, bUseSupport, specId)",
        "retail": true
      }
    ],
    "UpdateMode": [
      {
        "name": "UpdateMode",
        "count": 9,
        "confidence": 1.0,
        "sample": "set=function(i,v) Setter_Simple(i,v)  ZGV.Sync:UpdateMode()  end,",
        "retail": true
      }
    ],
    "ClearBar": [
      {
        "name": "ClearBar",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.ActionBar:ClearBar()",
        "retail": true
      }
    ],
    "UpdateArrowVisibility": [
      {
        "name": "UpdateArrowVisibility",
        "count": 3,
        "confidence": 0.6,
        "sample": "AddOption('arrowshow',{  width=\"double\", type = 'toggle', set = function(i,v) Setter_Simple(i,v)  self.Pointer:UpdateArrowVisibility() end, _default=true, })",
        "retail": true
      }
    ],
    "SetupArrow": [
      {
        "name": "SetupArrow",
        "count": 7,
        "confidence": 1.0,
        "sample": "AddOption('arrowfreeze',{ type = 'toggle', set = function(i,v) Setter_Simple(i,v)  self.Pointer:SetupArrow() end, _default=false, })",
        "retail": true
      }
    ],
    "SetFontSize": [
      {
        "name": "SetFontSize",
        "count": 159,
        "confidence": 1.0,
        "sample": "ZGV.Pointer:SetFontSize(self.db.profile.arrowfontsize)",
        "retail": true
      }
    ],
    "SetArrowSkin": [
      {
        "name": "SetArrowSkin",
        "count": 7,
        "confidence": 1.0,
        "sample": "self.Pointer:SetArrowSkin(skin.id)",
        "retail": true
      }
    ],
    "DoStartup": [
      {
        "name": "DoStartup",
        "count": 5,
        "confidence": 1.0,
        "sample": "LibRover:DoStartup()",
        "retail": true
      }
    ],
    "ClearAntsAndLines": [
      {
        "name": "ClearAntsAndLines",
        "count": 3,
        "confidence": 0.6,
        "sample": "AddOption('maplines_enabled',{ type = 'toggle', width = \"double\", set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:ClearAntsAndLines() end, _default = true, })",
        "retail": true
      }
    ],
    "ToggleOverlay": [
      {
        "name": "ToggleOverlay",
        "count": 2,
        "confidence": 0.4,
        "sample": "AddOption('foglight',{ type = 'toggle', width = \"full\", set = function(i,v) Setter_Simple(i,v)  self.Foglight:ToggleOverlay() end, _default = true, })",
        "retail": true
      }
    ],
    "ClearWaypoints": [
      {
        "name": "ClearWaypoints",
        "count": 26,
        "confidence": 1.0,
        "sample": "ZGV.Pointer:ClearWaypoints(\"manual\")",
        "retail": true
      }
    ],
    "ChangeState": [
      {
        "name": "ChangeState",
        "count": 10,
        "confidence": 1.0,
        "sample": "AddOption('poienabled',{ type = 'toggle', width = \"double\", set = function(i,v) Setter_Simple(i,v) ZGV.Poi:ChangeState(v) end, _default = true, })",
        "retail": true
      }
    ],
    "RefreshDynamicValues": [
      {
        "name": "RefreshDynamicValues",
        "count": 5,
        "confidence": 1.0,
        "sample": "set = function(i,v) Setter_Simple(i,v) ZGV.Pointer:RefreshDynamicValues() end,",
        "retail": true
      }
    ],
    "OnMapChanged": [
      {
        "name": "OnMapChanged",
        "count": 3,
        "confidence": 0.6,
        "sample": "AddOption('worldquestenable',{ type = 'toggle', _default=true, width=\"full\", set=function(i,v) Setter_Simple(i,v) if v then ZGV.WorldQuests.DisplayFrame:Show() else ZGV.WorldQuests.DisplayFrame:Hide() end if WorldMapFrame then WorldMapFrame:OnMapChanged() end end})",
        "retail": true
      }
    ],
    "GetPlayerFacing": [
      {
        "name": "GetPlayerFacing",
        "count": 13,
        "confidence": 1.0,
        "sample": "if not GetPlayerFacing() then ZGV.PointerMap:ShowPreview() end",
        "retail": true
      }
    ],
    "ShowPreview": [
      {
        "name": "ShowPreview",
        "count": 6,
        "confidence": 1.0,
        "sample": "if not GetPlayerFacing() then ZGV.PointerMap:ShowPreview() end",
        "retail": true
      }
    ],
    "HidePreview": [
      {
        "name": "HidePreview",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.PointerMap:HidePreview()",
        "retail": true
      }
    ],
    "UpdateSettings": [
      {
        "name": "UpdateSettings",
        "count": 5,
        "confidence": 1.0,
        "sample": "set = function(i,v) Setter_Simple(i,v) ZGV.PointerMap:UpdateSettings() end,",
        "retail": true
      }
    ],
    "UpdateSystemTab": [
      {
        "name": "UpdateSystemTab",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ItemScore.GearFinder:UpdateSystemTab()",
        "retail": true
      }
    ],
    "AttachBagButton": [
      {
        "name": "AttachBagButton",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ItemScore.Upgrades:AttachBagButton()",
        "retail": true
      }
    ],
    "ScoreEquippedItems": [
      {
        "name": "ScoreEquippedItems",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.ItemScore.Upgrades:ScoreEquippedItems()",
        "retail": true
      }
    ],
    "RefreshBags": [
      {
        "name": "RefreshBags",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZGV.ItemScore.Upgrades:RefreshBags()",
        "retail": true
      }
    ],
    "GetNumClasses": [
      {
        "name": "GetNumClasses",
        "count": 4,
        "confidence": 0.8,
        "sample": "for i=1,GetNumClasses() do -- values taken from blizz api",
        "retail": true
      }
    ],
    "GetClassInfo": [
      {
        "name": "GetClassInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local name,tag,id = GetClassInfo(i)",
        "retail": true
      },
      {
        "name": "C_CreatureInfo.GetClassInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "function C_CreatureInfo.GetClassInfo(classId) return {} end",
        "retail": true
      }
    ],
    "DelayedRefreshUserData": [
      {
        "name": "DelayedRefreshUserData",
        "count": 7,
        "confidence": 1.0,
        "sample": "set = function(i,v) Setter_Simple(i,v) ZGV.ItemScore:DelayedRefreshUserData() end,",
        "retail": true
      }
    ],
    "UsesCustomWeights": [
      {
        "name": "UsesCustomWeights",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not ZGV.ItemScore:UsesCustomWeights(class,spec) then",
        "retail": true
      }
    ],
    "ImportPawn": [
      {
        "name": "ImportPawn",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.ItemScore:ImportPawn(v)",
        "retail": true
      }
    ],
    "RefreshUserData": [
      {
        "name": "RefreshUserData",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.ItemScore:RefreshUserData()",
        "retail": true
      }
    ],
    "ExportPawn": [
      {
        "name": "ExportPawn",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.ItemScore:ExportPawn()",
        "retail": true
      }
    ],
    "ImportQuick": [
      {
        "name": "ImportQuick",
        "count": 2,
        "confidence": 0.4,
        "sample": "--\t\tZGV.Gold.ServerTrends:ImportQuick()",
        "retail": true
      }
    ],
    "ShowWindow": [
      {
        "name": "ShowWindow",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.Gold.Appraiser:ShowWindow()",
        "retail": true
      }
    ],
    "HideWindow": [
      {
        "name": "HideWindow",
        "count": 11,
        "confidence": 1.0,
        "sample": "ZGV.Gold.Appraiser:HideWindow()",
        "retail": true
      },
      {
        "name": "Details.AllInOneWindow.HideWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.AllInOneWindow.HideWindow(settingId)",
        "retail": true
      }
    ],
    "ShowSystemTabs": [
      {
        "name": "ShowSystemTabs",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.Mailtools:ShowSystemTabs()",
        "retail": true
      }
    ],
    "HideSystemTabs": [
      {
        "name": "HideSystemTabs",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.Mailtools:HideSystemTabs()",
        "retail": true
      }
    ],
    "GetListOfInventory": [
      {
        "name": "GetListOfInventory",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.Mailtools:GetListOfInventory()",
        "retail": true
      }
    ],
    "UpdateButton": [
      {
        "name": "UpdateButton",
        "count": 11,
        "confidence": 1.0,
        "sample": "ZGV.NotificationCenter:UpdateButton()",
        "retail": true
      }
    ],
    "UpdatePosition": [
      {
        "name": "UpdatePosition",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.NotificationCenter:UpdatePosition()",
        "retail": true
      }
    ],
    "RefreshSkillPopup": [
      {
        "name": "RefreshSkillPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "AddOption('nc_skills_optional',{ type = 'toggle', width = \"single\", indent=20, set = function(i,v) Setter_Simple(i,v) ZGV.Skills:RefreshSkillPopup() end, _default = true, hidden=function() return not self.db.profile.nc_showall end, disabled=function() return not (self.db.profile.nc_enable and self.db.profile.nc_skills) end })",
        "retail": true
      }
    ],
    "ShowSkillPopup": [
      {
        "name": "ShowSkillPopup",
        "count": 4,
        "confidence": 0.8,
        "sample": "--ZGV.Skills:ShowSkillPopup()",
        "retail": true
      }
    ],
    "Cancel": [
      {
        "name": "Cancel",
        "count": 54,
        "confidence": 1.0,
        "sample": "set = function(i,v) Setter_Simple(i,v) ZGV.QuestDB:Cancel() end,",
        "retail": true
      },
      {
        "name": "Details.Schedules.Cancel",
        "count": 10,
        "confidence": 1.0,
        "sample": "Details.Schedules.Cancel(Details.scheduled_window_update)",
        "retail": true
      },
      {
        "name": "Scheduler.Cancel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function details222.Scheduler.Cancel(name)",
        "retail": true
      },
      {
        "name": "Schedules.Cancel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.Cancel(tickerObject)",
        "retail": true
      }
    ],
    "SetupConfig": [
      {
        "name": "SetupConfig",
        "count": 1,
        "confidence": 0.2,
        "sample": "local options = ZGV.ZTA:SetupConfig()",
        "retail": true
      }
    ],
    "RegisterCallback": [
      {
        "name": "RegisterCallback",
        "count": 60,
        "confidence": 1.0,
        "sample": "self.db.RegisterCallback(self, \"OnProfileChanged\", \"ProfileSwitch\")",
        "retail": true
      },
      {
        "name": "HBD.RegisterCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "HBD.RegisterCallback(pins, \"PlayerZoneChanged\", UpdateMinimap)",
        "retail": true
      },
      {
        "name": "AuraScan.RegisterCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.RegisterCallback(callback)",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterCallback",
        "count": 2,
        "confidence": 0.4,
        "sample": "--for custom callbacks use DF.Language.RegisterCallback()",
        "retail": true
      },
      {
        "name": "Language.RegisterCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.RegisterCallback(languageAddonId, function(addonId, languageId, ...) dropdown:Select(dropdown:GetValue()) end)",
        "retail": true
      },
      {
        "name": "LibCC.RegisterCallback",
        "count": 8,
        "confidence": 1.0,
        "sample": "LibCC.RegisterCallback(fCast,\"UNIT_SPELLCAST_START\", funcCast)",
        "retail": true
      }
    ],
    "GetCurrentProfile": [
      {
        "name": "GetCurrentProfile",
        "count": 9,
        "confidence": 1.0,
        "sample": "local currentProfile = profile:GetCurrentProfile()",
        "retail": true
      }
    ],
    "GetProfiles": [
      {
        "name": "GetProfiles",
        "count": 8,
        "confidence": 1.0,
        "sample": "for k, v in pairs(ZGV.db:GetProfiles()) do",
        "retail": true
      }
    ],
    "ResetProfile": [
      {
        "name": "ResetProfile",
        "count": 4,
        "confidence": 0.8,
        "sample": "--ZGV.db:ResetProfile()",
        "retail": true
      },
      {
        "name": "DBObjectLib.ResetProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "DBObjectLib.ResetProfile(self, nil, true)",
        "retail": true
      }
    ],
    "ProfileSwitch": [
      {
        "name": "ProfileSwitch",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:ProfileSwitch()",
        "retail": true
      }
    ],
    "ReloadUI": [
      {
        "name": "ReloadUI",
        "count": 14,
        "confidence": 1.0,
        "sample": "ReloadUI()",
        "retail": true
      }
    ],
    "CopyProfile": [
      {
        "name": "CopyProfile",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.db:CopyProfile(current)",
        "retail": true
      },
      {
        "name": "DBObjectLib.CopyProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "DBObjectLib.CopyProfile(db, name, true)",
        "retail": true
      }
    ],
    "DeleteProfile": [
      {
        "name": "DeleteProfile",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.db:DeleteProfile(delete_name)",
        "retail": true
      },
      {
        "name": "DBObjectLib.DeleteProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "DBObjectLib.DeleteProfile(db, name, true)",
        "retail": true
      }
    ],
    "ShakeFrame": [
      {
        "name": "ScriptAnimationUtil.ShakeFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "--ScriptAnimationUtil.ShakeFrame(v.frame,{ {x=-5,y=0}, {x=5,y=0},{x=-5,y=0}, {x=5,y=0},{x=-5,y=0}, {x=5,y=0}}, 2.0, 0.04)",
        "retail": true
      }
    ],
    "Backup": [
      {
        "name": "Backup",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.Widgets:Backup()",
        "retail": true
      }
    ],
    "Import": [
      {
        "name": "Import",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.Widgets:Import(v)",
        "retail": true
      }
    ],
    "GetOptionsTable": [
      {
        "name": "GetOptionsTable",
        "count": 10,
        "confidence": 1.0,
        "sample": "--self.optiontables['profile'] = LibStub(\"AceDBOptions-3.0\"):GetOptionsTable(self.db)",
        "retail": true
      }
    ],
    "NPCDebugUpdate": [
      {
        "name": "NPCDebugUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "--AddOption('shownpcdebug',{ name = \"Show NPC Debug button\", type=\"toggle\", width = \"full\", set = function(i,v)  Setter_Simple(i,v)  ZGV:NPCDebugUpdate()  end  })",
        "retail": true
      }
    ],
    "StartFPSFrame": [
      {
        "name": "StartFPSFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "AddOption('fpsgraph',{ name=\"FPS Graph\", desc=\"Show a detailed FPS graph. Max=60fps.\", type = 'toggle', width = \"full\", _default=false, set = function(i,v) Setter_Simple(i,v)  ZGV:StartFPSFrame() end, })",
        "retail": true
      }
    ],
    "UnitAffectingCombat": [
      {
        "name": "UnitAffectingCombat",
        "count": 33,
        "confidence": 1.0,
        "sample": "set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat(\"player\")) or (not v and UnitAffectingCombat(\"player\")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,",
        "retail": true
      }
    ],
    "PLAYER_REGEN_DISABLED": [
      {
        "name": "PLAYER_REGEN_DISABLED",
        "count": 3,
        "confidence": 0.6,
        "sample": "set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat(\"player\")) or (not v and UnitAffectingCombat(\"player\")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,",
        "retail": true
      }
    ],
    "PLAYER_REGEN_ENABLED": [
      {
        "name": "PLAYER_REGEN_ENABLED",
        "count": 3,
        "confidence": 0.6,
        "sample": "set = function(i,v) Setter_Simple(i,v)  if (v and not UnitAffectingCombat(\"player\")) or (not v and UnitAffectingCombat(\"player\")) then self:PLAYER_REGEN_DISABLED() else self:PLAYER_REGEN_ENABLED() end  end,",
        "retail": true
      }
    ],
    "Apprentice": [
      {
        "name": "Apprentice",
        "count": 1,
        "confidence": 0.2,
        "sample": "[0.6]=\"Apprentice (75) [slow ride]\",",
        "retail": true
      }
    ],
    "Journeyman": [
      {
        "name": "Journeyman",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1.0]=\"Journeyman (150) [fast ride]\",",
        "retail": true
      }
    ],
    "Expert": [
      {
        "name": "Expert",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1.5]=\"Expert (225) [slow flight]\",",
        "retail": true
      }
    ],
    "Artisan": [
      {
        "name": "Artisan",
        "count": 1,
        "confidence": 0.2,
        "sample": "[2.8]=\"Artisan (300) [fast flight]\",",
        "retail": true
      }
    ],
    "Master": [
      {
        "name": "Master",
        "count": 3,
        "confidence": 0.6,
        "sample": "[3.1]=\"Master (375) [epic flight]\",",
        "retail": true
      }
    ],
    "CheckMaxSpeeds": [
      {
        "name": "CheckMaxSpeeds",
        "count": 7,
        "confidence": 1.0,
        "sample": "LibRover:CheckMaxSpeeds()",
        "retail": true
      }
    ],
    "GoSlow": [
      {
        "name": "GoSlow",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (v) then LibRover:GoSlow() end",
        "retail": true
      }
    ],
    "IsBoosted": [
      {
        "name": "IsBoosted",
        "count": 3,
        "confidence": 0.6,
        "sample": "func=function(info,val) ZGV:IsBoosted(100,true) end",
        "retail": true
      },
      {
        "name": "ZGV.F.IsBoosted",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.IsBoosted(expansion)",
        "retail": true
      }
    ],
    "SuggestDungeonGuide": [
      {
        "name": "SuggestDungeonGuide",
        "count": 4,
        "confidence": 0.8,
        "sample": "func=function(info,val) ZGV.GuideFuncs:SuggestDungeonGuide(ZGV:GetGuideByTitle(\"Zygor's Dungeon Guides\\\\Classic Dungeons\\\\The Stormwind Stockade\")) end",
        "retail": true
      }
    ],
    "PLAYER_LEVEL_UP": [
      {
        "name": "PLAYER_LEVEL_UP",
        "count": 2,
        "confidence": 0.4,
        "sample": "func=function(info,val) ZGV:PLAYER_LEVEL_UP(nil,ZGV.FakeLevelForPopup or 101) end",
        "retail": true
      }
    ],
    "LearnMountGuideSuggestion": [
      {
        "name": "LearnMountGuideSuggestion",
        "count": 3,
        "confidence": 0.6,
        "sample": "func=function(info,val) ZGV.GuideFuncs:LearnMountGuideSuggestion(ZGV.FakeLevelForRiding or 20) end",
        "retail": true
      }
    ],
    "MonkQuest": [
      {
        "name": "MonkQuest",
        "count": 4,
        "confidence": 0.8,
        "sample": "func=function(info,val) ZGV.GuideFuncs:MonkQuest(ZGV.FakeLevelForMonk or 1) end",
        "retail": true
      }
    ],
    "AskReload": [
      {
        "name": "AskReload",
        "count": 3,
        "confidence": 0.6,
        "sample": "func=function(info,val) ZGV.GuideFuncs:AskReload() end",
        "retail": true
      }
    ],
    "SkipStep": [
      {
        "name": "SkipStep",
        "count": 8,
        "confidence": 1.0,
        "sample": "func=function(info,val) ZGV:SkipStep(false,true) end",
        "retail": true
      }
    ],
    "AdvertiseWithPopup": [
      {
        "name": "AdvertiseWithPopup",
        "count": 5,
        "confidence": 1.0,
        "sample": "func=function(info,val) ZGV.CurrentGuide:AdvertiseWithPopup(true,true) end",
        "retail": true
      }
    ],
    "GetGarrisonLevel": [
      {
        "name": "ZGV.GetGarrisonLevel",
        "count": 3,
        "confidence": 0.6,
        "sample": "return { [-1] = \"--not set: \"..ZGV.GetGarrisonLevel(true)..\"--\", [0] = \"not built\", [1] = \"level 1\", [2] = \"level 2\", [3] = \"level 3\" }",
        "retail": true
      }
    ],
    "GetCovenantData": [
      {
        "name": "C_Covenants.GetCovenantData",
        "count": 4,
        "confidence": 0.8,
        "sample": "local val = { [-1] = \"--not set: \"..(C_Covenants.GetCovenantData(C_Covenants.GetActiveCovenantID()) or {textureKit=\"none\"}).textureKit..\"--\", [0]=\"None\" }",
        "retail": true
      }
    ],
    "GetActiveCovenantID": [
      {
        "name": "C_Covenants.GetActiveCovenantID",
        "count": 4,
        "confidence": 0.8,
        "sample": "local val = { [-1] = \"--not set: \"..(C_Covenants.GetCovenantData(C_Covenants.GetActiveCovenantID()) or {textureKit=\"none\"}).textureKit..\"--\", [0]=\"None\" }",
        "retail": true
      }
    ],
    "GetCovenantIDs": [
      {
        "name": "C_Covenants.GetCovenantIDs",
        "count": 3,
        "confidence": 0.6,
        "sample": "for i,v in pairs(C_Covenants.GetCovenantIDs()) do",
        "retail": true
      }
    ],
    "Getter_Simple": [
      {
        "name": "Getter_Simple",
        "count": 2,
        "confidence": 0.4,
        "sample": "get = function(i)  return Getter_Simple(i) or -1  end,",
        "retail": true
      }
    ],
    "IsInScenario": [
      {
        "name": "C_Scenario.IsInScenario",
        "count": 15,
        "confidence": 1.0,
        "sample": "AddOption('dumpscenario',{ name = \"Dump scenario objectives\", width = \"double\", disabled=function() return not C_Scenario.IsInScenario() end, desc = \"\", type = 'execute', func = function() ZGV:DumpScenario() end})",
        "retail": true
      }
    ],
    "DumpScenario": [
      {
        "name": "DumpScenario",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('dumpscenario',{ name = \"Dump scenario objectives\", width = \"double\", disabled=function() return not C_Scenario.IsInScenario() end, desc = \"\", type = 'execute', func = function() ZGV:DumpScenario() end})",
        "retail": true
      }
    ],
    "UpdateAll": [
      {
        "name": "UpdateAll",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('foglightdumpnew',{ name = \"Update all maps data\", type = 'execute', width = \"double\", func = function() ZGV.Testing.FoglightDumper:UpdateAll() end})",
        "retail": true
      }
    ],
    "UpdateCurrent": [
      {
        "name": "UpdateCurrent",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('foglightdumpnew',{ name = \"Update current zone data\", desc = \"Map visible in map frame, or one player is on\", type = 'execute', width = \"double\", func = function() ZGV.Testing.FoglightDumper:UpdateCurrent() end})",
        "retail": true
      }
    ],
    "RefreshCurrent": [
      {
        "name": "RefreshCurrent",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('foglightdumpnew',{ name = \"Refresh current zone data\", desc = \"Map visible in map frame, or one player is on.\\nGet fresh copy of overlays, ignoring current data\", type = 'execute', width = \"double\", func = function() ZGV.Testing.FoglightDumper:RefreshCurrent() end})",
        "retail": true
      }
    ],
    "GetCursorInfo": [
      {
        "name": "GetCursorInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "AddOption('score_this', { type = 'execute', name=\"Score cursor item\", desc=function() if GetCursorInfo()==\"item\" then return ZGV.ItemScore:ScoreCursor(\"quiet\")..\"\\n\\nClick button to send this to a Dump window.\"  else  return \"Drag an item here to score it...\" end end,",
        "retail": true
      }
    ],
    "ScoreCursor": [
      {
        "name": "ScoreCursor",
        "count": 2,
        "confidence": 0.4,
        "sample": "AddOption('score_this', { type = 'execute', name=\"Score cursor item\", desc=function() if GetCursorInfo()==\"item\" then return ZGV.ItemScore:ScoreCursor(\"quiet\")..\"\\n\\nClick button to send this to a Dump window.\"  else  return \"Drag an item here to score it...\" end end,",
        "retail": true
      }
    ],
    "Startup": [
      {
        "name": "Startup",
        "count": 17,
        "confidence": 1.0,
        "sample": "LootDumper:Startup()",
        "retail": true
      }
    ],
    "GetAllInstancesInfo": [
      {
        "name": "GetAllInstancesInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:GetAllInstancesInfo() end",
        "retail": true
      }
    ],
    "GetInstances": [
      {
        "name": "GetInstances",
        "count": 2,
        "confidence": 0.4,
        "sample": "LootDumper:GetInstances()",
        "retail": true
      }
    ],
    "MapLFGtoMap": [
      {
        "name": "MapLFGtoMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "LootDumper:MapLFGtoMap()",
        "retail": true
      }
    ],
    "GetInstanceLoot": [
      {
        "name": "GetInstanceLoot",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:GetInstanceLoot(LootDumper.SelectedInstance) end",
        "retail": true
      }
    ],
    "GetInstanceGuides": [
      {
        "name": "GetInstanceGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "LootDumper:GetInstanceGuides(LootDumper.SelectedInstance,IsShiftKeyDown())",
        "retail": true
      }
    ],
    "GetAllInstancesLoot": [
      {
        "name": "GetAllInstancesLoot",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:GetAllInstancesLoot() end",
        "retail": true
      }
    ],
    "GetAllInstancesGuides": [
      {
        "name": "GetAllInstancesGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:GetAllInstancesGuides() end",
        "retail": true
      }
    ],
    "GetRFGBosses": [
      {
        "name": "GetRFGBosses",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:GetRFGBosses() end",
        "retail": true
      }
    ],
    "DumpLFGData": [
      {
        "name": "DumpLFGData",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function(info,val) LootDumper:DumpLFGData() end",
        "retail": true
      }
    ],
    "UpdateWaypoints": [
      {
        "name": "UpdateWaypoints",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.Pointer:UpdateWaypoints()",
        "retail": true
      }
    ],
    "SetAntColorsFromOptions": [
      {
        "name": "SetAntColorsFromOptions",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZGV.Pointer.Icons:SetAntColorsFromOptions()",
        "retail": true
      }
    ],
    "RescaleMarkers": [
      {
        "name": "RescaleMarkers",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.Pointer:RescaleMarkers()",
        "retail": true
      }
    ],
    "IsInGroup": [
      {
        "name": "IsInGroup",
        "count": 86,
        "confidence": 1.0,
        "sample": "disabled=function() return not ZGV.Sync:IsInGroup() end,",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick": [
      {
        "name": "ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function() ZygorGuidesViewerFrame_Guides_GuideShareButton_OnClick() end,",
        "retail": true
      }
    ],
    "Alice": [
      {
        "name": "Alice",
        "count": 1,
        "confidence": 0.2,
        "sample": "[2]=\"Alice (incomplete), Bob (complete)\",",
        "retail": true
      }
    ],
    "Bob": [
      {
        "name": "Bob",
        "count": 1,
        "confidence": 0.2,
        "sample": "[2]=\"Alice (incomplete), Bob (complete)\",",
        "retail": true
      }
    ],
    "Mixed": [
      {
        "name": "Mixed",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1]=\"Mixed (Alice is done, Bob slacks)\",",
        "retail": true
      }
    ],
    "FakePartyGenerator": [
      {
        "name": "FakePartyGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "set=function(i,v) Setter_Simple(i,v) ZGV.Sync:FakePartyGenerator(v) ZGV:UpdateFrame() end,",
        "retail": true
      }
    ],
    "SetVisible": [
      {
        "name": "ZGV.F.SetVisible",
        "count": 4,
        "confidence": 0.8,
        "sample": "AddOption('gmshowoptions',{ type = 'toggle', name=\"Guide Menu variant: show Options in top bar\", set = function(i,v) Setter_Simple(i,v)  ZGV.F.SetVisible(ZGV.GuideMenu.MainFrame.Header.Tabs.Options,v)  end, width = \"full\", _default = false })",
        "retail": true
      },
      {
        "name": "SetVisible",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV:SetVisible(nil,true)",
        "retail": true
      }
    ],
    "ResetCurrentWaypoint": [
      {
        "name": "ResetCurrentWaypoint",
        "count": 6,
        "confidence": 1.0,
        "sample": "AddOption('start_on_closest_waypoint',{ type = 'toggle', width = \"full\", set=function(i,v) Setter_Simple(i,v) ZGV.Pointer:ResetCurrentWaypoint() end, _default = false })",
        "retail": true
      }
    ],
    "ClearUserWaypoint": [
      {
        "name": "C_Map.ClearUserWaypoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('hijack_builtin_waypoint',{ type = 'toggle', width = \"full\", set=function(i,v) Setter_Simple(i,v) C_Map.ClearUserWaypoint() ZGV.Pointer:ResetCurrentWaypoint() end, _default = false })",
        "retail": true
      }
    ],
    "Setter_Loud": [
      {
        "name": "Setter_Loud",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddOption('load_all', { type = 'toggle', desc=\"Enable all!\", _default = false, set=function(info,val) Setter_Loud(info,val) self.db.profile.load_mail=val self.db.profile.load_im=val self.db.profile.load_betaguides=val self.db.profile.load_gold=val self.db.profile.show_ui=val end })",
        "retail": true
      }
    ],
    "SetupConfigExtra": [
      {
        "name": "SetupConfigExtra",
        "count": 1,
        "confidence": 0.2,
        "sample": "local extras = ZGV.ZTA:SetupConfigExtra()",
        "retail": true
      }
    ],
    "SetFilters": [
      {
        "name": "SetFilters",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.WorldQuests:SetFilters()",
        "retail": true
      }
    ],
    "Options_GrabDefaults": [
      {
        "name": "Options_GrabDefaults",
        "count": 3,
        "confidence": 0.6,
        "sample": "for k,v in pairs(self.optiontables) do  self:Options_GrabDefaults(v,defaults)  end  -- can work only once, as it CLEARS the _default fields!! (and it has to, as they're non-standard.)",
        "retail": true
      }
    ],
    "PrepareConfigDefaults": [
      {
        "name": "PrepareConfigDefaults",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV.ZTA and ZGV.ZTA.PrepareConfigDefaults then  for g,o in pairs(ZGV.ZTA:PrepareConfigDefaults()) do for k,v in pairs(o) do defaults[g]=defaults[g] or {}; defaults[g][k]=v; end end end",
        "retail": true
      }
    ],
    "RegisterDefaults": [
      {
        "name": "RegisterDefaults",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.db:RegisterDefaults(defaults)",
        "retail": true
      }
    ],
    "Options_ResetToDefaults": [
      {
        "name": "Options_ResetToDefaults",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:Options_ResetToDefaults(blizname)",
        "retail": true
      }
    ],
    "NotifyChange": [
      {
        "name": "NotifyChange",
        "count": 3,
        "confidence": 0.6,
        "sample": "AceConfigRegistry:NotifyChange(blizname)",
        "retail": true
      }
    ],
    "RegisterOptionsTable": [
      {
        "name": "RegisterOptionsTable",
        "count": 20,
        "confidence": 1.0,
        "sample": "AceConfig:RegisterOptionsTable(v.blizname, self.optiontables[v.name], v.slash );",
        "retail": true
      }
    ],
    "Options_SetupPanels": [
      {
        "name": "Options_SetupPanels",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:Options_SetupPanels() -- Unused!",
        "retail": true
      }
    ],
    "SetName": [
      {
        "name": "SetName",
        "count": 11,
        "confidence": 1.0,
        "sample": "group:SetName(v, v.parent)",
        "retail": true
      },
      {
        "name": "Details.Schedules.SetName",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.Schedules.SetName(Details.start_battleground, \"Battleground Start Timer\")",
        "retail": true
      },
      {
        "name": "Schedules.SetName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.SetName(object, name)",
        "retail": true
      }
    ],
    "SetTitle": [
      {
        "name": "SetTitle",
        "count": 24,
        "confidence": 1.0,
        "sample": "--panel:SetTitle(name or appName)",
        "retail": true
      }
    ],
    "SetUserData": [
      {
        "name": "SetUserData",
        "count": 17,
        "confidence": 1.0,
        "sample": "--group:SetUserData(\"appName\", appName)",
        "retail": true
      }
    ],
    "SetCallback": [
      {
        "name": "SetCallback",
        "count": 42,
        "confidence": 1.0,
        "sample": "--panel:SetCallback(\"OnShow\", FeedToBlizPanel)",
        "retail": true
      }
    ],
    "SetDefaultSize": [
      {
        "name": "SetDefaultSize",
        "count": 2,
        "confidence": 0.4,
        "sample": "AceConfigDialog:SetDefaultSize(\"ZygorGuidesViewer\", 600, 400)",
        "retail": true
      }
    ],
    "AddToBlizOptions": [
      {
        "name": "AddToBlizOptions",
        "count": 5,
        "confidence": 1.0,
        "sample": "local panel = AceConfigDialog:AddToBlizOptions(v.blizname, self.optiontables[v.name].name, v.name~='cover' and self.optiontables.cover.name)",
        "retail": true
      }
    ],
    "GetCurrentGuideNum": [
      {
        "name": "GetCurrentGuideNum",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GetCurrentGuideNum()",
        "retail": true
      }
    ],
    "HandleCommand": [
      {
        "name": "HandleCommand",
        "count": 4,
        "confidence": 0.8,
        "sample": "LibStub(\"AceConfigCmd-3.0-Z\").HandleCommand(self, \"zygor\", \"ZygorGuidesViewer\"..(cat~=\"\" and \"-\"..cat or \"\"), cmd)",
        "retail": true
      },
      {
        "name": "AceConfigCmd.HandleCommand",
        "count": 1,
        "confidence": 0.2,
        "sample": "AceConfigCmd.HandleCommand(self, slashcmd, appName, input)\t-- upgradable",
        "retail": true
      }
    ],
    "OPTTEST": [
      {
        "name": "OPTTEST",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:OPTTEST()",
        "retail": true
      }
    ],
    "B_Click": [
      {
        "name": "B_Click",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function B_Click(self)",
        "retail": true
      }
    ],
    "IsWeapon": [
      {
        "name": "IsWeapon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Upgrades:IsWeapon(item)",
        "retail": true
      }
    ],
    "IsEnabled": [
      {
        "name": "IsEnabled",
        "count": 153,
        "confidence": 1.0,
        "sample": "if not Upgrades:IsEnabled() then return end -- disabled",
        "retail": true
      },
      {
        "name": "Details.Coach.Server.IsEnabled",
        "count": 9,
        "confidence": 1.0,
        "sample": "if (Details.Coach.Server.IsEnabled()) then",
        "retail": true
      },
      {
        "name": "Details.Coach.Client.IsEnabled",
        "count": 6,
        "confidence": 1.0,
        "sample": "if (Details.Coach.Client.IsEnabled()) then",
        "retail": true
      },
      {
        "name": "Details.Coach.IsEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Coach.IsEnabled()",
        "retail": true
      },
      {
        "name": "Details222.CooldownTracking.IsEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.IsEnabled()",
        "retail": true
      }
    ],
    "UnitIsDeadOrGhost": [
      {
        "name": "UnitIsDeadOrGhost",
        "count": 8,
        "confidence": 1.0,
        "sample": "if UnitIsDeadOrGhost(\"player\") then return end",
        "retail": true
      }
    ],
    "GetInventoryItemID": [
      {
        "name": "GetInventoryItemID",
        "count": 4,
        "confidence": 0.8,
        "sample": "local itemid = GetInventoryItemID(\"player\", slotID)",
        "retail": true
      }
    ],
    "GetItemScore": [
      {
        "name": "GetItemScore",
        "count": 4,
        "confidence": 0.8,
        "sample": "local score,success,comment = ItemScore:GetItemScore(itemlink)",
        "retail": true
      }
    ],
    "IsProtectedQuestItem": [
      {
        "name": "IsProtectedQuestItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "local protected, protectedslot = ItemScore.QuestItem:IsProtectedQuestItem(itemlink)",
        "retail": true
      }
    ],
    "GetAverageItemLevel": [
      {
        "name": "GetAverageItemLevel",
        "count": 4,
        "confidence": 0.8,
        "sample": "ItemScore.playeritemlvl = GetAverageItemLevel()",
        "retail": true
      }
    ],
    "CanUseUniqueItem": [
      {
        "name": "CanUseUniqueItem",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Upgrades:CanUseUniqueItem(itemlink,slot)",
        "retail": true
      }
    ],
    "GetHeirloomInfo": [
      {
        "name": "GetHeirloomInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local has_bonus, max_level = ItemScore:GetHeirloomInfo(olditem.itemlink)",
        "retail": true
      }
    ],
    "IsValidItem": [
      {
        "name": "IsValidItem",
        "count": 7,
        "confidence": 1.0,
        "sample": "if olditem and not ItemScore:IsValidItem(olditem.itemlink) then",
        "retail": true
      }
    ],
    "IsUpgradeFor": [
      {
        "name": "IsUpgradeFor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Upgrades:IsUpgradeFor(itemlink,name,spec)",
        "retail": true
      }
    ],
    "GetValidSlots": [
      {
        "name": "GetValidSlots",
        "count": 4,
        "confidence": 0.8,
        "sample": "local slot1,slot2 = ItemScore:GetValidSlots(details,name,spec)",
        "retail": true
      }
    ],
    "GetStatChange": [
      {
        "name": "GetStatChange",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Upgrades:GetStatChange(item1,item2,item3,mode_new,mode_old)",
        "retail": true
      }
    ],
    "ScoreBagsItems": [
      {
        "name": "ScoreBagsItems",
        "count": 3,
        "confidence": 0.6,
        "sample": "Upgrades:ScoreBagsItems()",
        "retail": true
      }
    ],
    "FilterUpgrades": [
      {
        "name": "FilterUpgrades",
        "count": 3,
        "confidence": 0.6,
        "sample": "Upgrades:FilterUpgrades()",
        "retail": true
      }
    ],
    "ShowEquipmentChangePopup": [
      {
        "name": "ShowEquipmentChangePopup",
        "count": 4,
        "confidence": 0.8,
        "sample": "Upgrades:ShowEquipmentChangePopup(Upgrades.UpgradeQueueFlat[itemlink])",
        "retail": true
      }
    ],
    "GetMaxLevelForExpansionLevel": [
      {
        "name": "GetMaxLevelForExpansionLevel",
        "count": 6,
        "confidence": 1.0,
        "sample": "local maxLevel = GetMaxLevelForExpansionLevel(GetExpansionLevel())",
        "retail": true
      }
    ],
    "GetExpansionLevel": [
      {
        "name": "GetExpansionLevel",
        "count": 15,
        "confidence": 1.0,
        "sample": "local maxLevel = GetMaxLevelForExpansionLevel(GetExpansionLevel())",
        "retail": true
      }
    ],
    "EquipFromBags": [
      {
        "name": "EquipFromBags",
        "count": 3,
        "confidence": 0.6,
        "sample": "Upgrades:EquipFromBags(itemforupgrade,slotsinqueue)",
        "retail": true
      }
    ],
    "GetEntry": [
      {
        "name": "GetEntry",
        "count": 2,
        "confidence": 0.4,
        "sample": "local oldnotif = ZGV.NotificationCenter:GetEntry(\"gearpop\")",
        "retail": true
      }
    ],
    "RemoveEntriesByType": [
      {
        "name": "RemoveEntriesByType",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.NotificationCenter:RemoveEntriesByType(\"gearpop\")",
        "retail": true
      }
    ],
    "EquipCursorItem": [
      {
        "name": "EquipCursorItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "EquipCursorItem(slot)",
        "retail": true
      }
    ],
    "GetTalentTabInfo": [
      {
        "name": "GetTalentTabInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "out = out .. \"\\n spec \" .. ItemScore.playerspecName  .. \" system \" .. (select(2,GetTalentTabInfo(ItemScore.playerspec)))",
        "retail": true
      }
    ],
    "UnitLevel": [
      {
        "name": "UnitLevel",
        "count": 31,
        "confidence": 1.0,
        "sample": "out = out .. \"\\n level \" .. ItemScore.playerlevel .. \" system \" .. UnitLevel(\"player\")",
        "retail": true
      }
    ],
    "ShowGearReport": [
      {
        "name": "ShowGearReport",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Upgrades:ShowGearReport(new_item)",
        "retail": true
      }
    ],
    "ContainerFrame_Update": [
      {
        "name": "ContainerFrame_Update",
        "count": 1,
        "confidence": 0.2,
        "sample": "ContainerFrame_Update(frame) -- classic",
        "retail": true
      }
    ],
    "AddBagButton": [
      {
        "name": "AddBagButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Upgrades:AddBagButton()",
        "retail": true
      }
    ],
    "GetCVarBool": [
      {
        "name": "GetCVarBool",
        "count": 4,
        "confidence": 0.8,
        "sample": "if ZGV.IsRetail and GetCVarBool(\"combinedBags\") then",
        "retail": true
      }
    ],
    "ToggleMenu": [
      {
        "name": "ToggleMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Upgrades:ToggleMenu()",
        "retail": true
      }
    ],
    "HandleBagItem": [
      {
        "name": "Upgrades.HandleBagItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Upgrades.HandleBagItem(itemButton, quality, itemLink, doNotSuppressOverlays, isBound)",
        "retail": true
      }
    ],
    "GetID": [
      {
        "name": "GetID",
        "count": 24,
        "confidence": 1.0,
        "sample": "local data = C_Container.GetContainerItemInfo(parent:GetID(), itemButton:GetID())",
        "retail": true
      }
    ],
    "GetBagID": [
      {
        "name": "GetBagID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local bag = itembutton.GetBagID and itembutton:GetBagID() or itembutton:GetParent():GetID()",
        "retail": true
      }
    ],
    "H": [
      {
        "name": "H",
        "count": 3,
        "confidence": 0.6,
        "sample": "local itemString = select(3, strfind(itemLink, \"|H([^|]+)|h\"))",
        "retail": true
      }
    ],
    "ClearCursor": [
      {
        "name": "ClearCursor",
        "count": 7,
        "confidence": 1.0,
        "sample": "ClearCursor()",
        "retail": true
      }
    ],
    "CreatePopup": [
      {
        "name": "CreatePopup",
        "count": 4,
        "confidence": 0.8,
        "sample": "Upgrades:CreatePopup()",
        "retail": true
      }
    ],
    "SetItem": [
      {
        "name": "SetItem",
        "count": 6,
        "confidence": 1.0,
        "sample": "function button:SetItem(item,old)",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_OnLoad": [
      {
        "name": "TitanPanelZygorButton_OnLoad",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_OnLoad(self)",
        "retail": true
      }
    ],
    "RegisterEvent": [
      {
        "name": "RegisterEvent",
        "count": 344,
        "confidence": 1.0,
        "sample": "self:RegisterEvent(\"PLAYER_ENTERING_WORLD\");",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_OnEvent": [
      {
        "name": "TitanPanelZygorButton_OnEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- NAME : TitanPanelZygorButton_OnEvent()",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_ZYGORGV_STEP_CHANGED": [
      {
        "name": "TitanPanelZygorButton_ZYGORGV_STEP_CHANGED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_ZYGORGV_STEP_CHANGED(num)",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_ZYGORGV_LOADING": [
      {
        "name": "TitanPanelZygorButton_ZYGORGV_LOADING",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_ZYGORGV_LOADING(progress)",
        "retail": true
      }
    ],
    "TitanPanelButton_SetButtonIcon": [
      {
        "name": "TitanPanelButton_SetButtonIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not coordsset then  TitanPanelButton_SetButtonIcon(TITAN_ZYGOR_ID, self.registry.iconCoords)  coordsset=true  end",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_OnUpdate": [
      {
        "name": "TitanPanelZygorButton_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_OnUpdate(self)",
        "retail": true
      }
    ],
    "TitanPanelPluginHandle_OnUpdate": [
      {
        "name": "TitanPanelPluginHandle_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "TitanPanelPluginHandle_OnUpdate(updateTable)",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_OnClick": [
      {
        "name": "TitanPanelZygorButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_OnClick(self, button)",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_GetButtonText": [
      {
        "name": "TitanPanelZygorButton_GetButtonText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_GetButtonText(id)",
        "retail": true
      }
    ],
    "TitanUtils_GetButton": [
      {
        "name": "TitanUtils_GetButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local button, id = TitanUtils_GetButton(id, true)",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_GetTooltipText": [
      {
        "name": "TitanPanelZygorButton_GetTooltipText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_GetTooltipText()",
        "retail": true
      }
    ],
    "TitanUtils_GetNormalText": [
      {
        "name": "TitanUtils_GetNormalText",
        "count": 1,
        "confidence": 0.2,
        "sample": "--TitanUtils_GetNormalText(L[\"TITAN_BAG_USED_SLOTS\"])",
        "retail": true
      }
    ],
    "TitanGetVar": [
      {
        "name": "TitanGetVar",
        "count": 7,
        "confidence": 1.0,
        "sample": "--if TitanGetVar(TITAN_ZYGOR_ID, \"ShowDetailedInfo\") then",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_PrepareZygorMenu": [
      {
        "name": "TitanPanelRightClickMenu_PrepareZygorMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- NAME : TitanPanelRightClickMenu_PrepareZygorMenu()",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddTitle": [
      {
        "name": "TitanPanelRightClickMenu_AddTitle",
        "count": 3,
        "confidence": 0.6,
        "sample": "TitanPanelRightClickMenu_AddTitle(L[\"TITAN_PANEL_MENU_OPTIONS\"], _G[\"UIDROPDOWNMENU_MENU_LEVEL\"])",
        "retail": true
      }
    ],
    "UIDropDownMenu_AddButton": [
      {
        "name": "UIDropDownMenu_AddButton",
        "count": 8,
        "confidence": 1.0,
        "sample": "UIDropDownMenu_AddButton(info, _G[\"UIDROPDOWNMENU_MENU_LEVEL\"]);",
        "retail": true
      }
    ],
    "TitanUtils_Toggle": [
      {
        "name": "TitanUtils_Toggle",
        "count": 4,
        "confidence": 0.8,
        "sample": "info.checked = TitanUtils_Toggle(TitanGetVar(TITAN_BAG_ID, \"ShowUsedSlots\"));",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddSpacer": [
      {
        "name": "TitanPanelRightClickMenu_AddSpacer",
        "count": 2,
        "confidence": 0.4,
        "sample": "TitanPanelRightClickMenu_AddSpacer();",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddToggleIcon": [
      {
        "name": "TitanPanelRightClickMenu_AddToggleIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "TitanPanelRightClickMenu_AddToggleIcon(TITAN_ZYGOR_ID);",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddToggleLabelText": [
      {
        "name": "TitanPanelRightClickMenu_AddToggleLabelText",
        "count": 1,
        "confidence": 0.2,
        "sample": "TitanPanelRightClickMenu_AddToggleLabelText(TITAN_ZYGOR_ID);",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddToggleColoredText": [
      {
        "name": "TitanPanelRightClickMenu_AddToggleColoredText",
        "count": 1,
        "confidence": 0.2,
        "sample": "--TitanPanelRightClickMenu_AddToggleColoredText(TITAN_ZYGOR_ID);",
        "retail": true
      }
    ],
    "TitanPanelRightClickMenu_AddCommand": [
      {
        "name": "TitanPanelRightClickMenu_AddCommand",
        "count": 1,
        "confidence": 0.2,
        "sample": "TitanPanelRightClickMenu_AddCommand(L[\"TITAN_PANEL_MENU_HIDE\"], TITAN_ZYGOR_ID, TITAN_PANEL_MENU_FUNC_HIDE);",
        "retail": true
      }
    ],
    "TitanPanelZygorButton_ShowDetailedInfo": [
      {
        "name": "TitanPanelZygorButton_ShowDetailedInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TitanPanelZygorButton_ShowDetailedInfo()",
        "retail": true
      }
    ],
    "TitanToggleVar": [
      {
        "name": "TitanToggleVar",
        "count": 1,
        "confidence": 0.2,
        "sample": "TitanToggleVar(TITAN_BAG_ID, \"ShowDetailedInfo\");",
        "retail": true
      }
    ],
    "NewModule": [
      {
        "name": "NewModule",
        "count": 19,
        "confidence": 1.0,
        "sample": "local me = ZGV:NewModule('DataSource', 'AceEvent-3.0', 'AceBucket-3.0')",
        "retail": true
      }
    ],
    "OnInitialize": [
      {
        "name": "OnInitialize",
        "count": 7,
        "confidence": 1.0,
        "sample": "function me:OnInitialize()",
        "retail": true
      }
    ],
    "RegisterNamespace": [
      {
        "name": "RegisterNamespace",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.db = me.db:RegisterNamespace(self.moduleName, {",
        "retail": true
      }
    ],
    "OnEnable": [
      {
        "name": "OnEnable",
        "count": 22,
        "confidence": 1.0,
        "sample": "function me:OnEnable()",
        "retail": true
      }
    ],
    "NewDataObject": [
      {
        "name": "NewDataObject",
        "count": 4,
        "confidence": 0.8,
        "sample": "LibStub('LibDataBroker-1.1'):NewDataObject(ZGVname, dataobj)",
        "retail": true
      }
    ],
    "BuildSpaceString": [
      {
        "name": "BuildSpaceString",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function BuildSpaceString(bags)",
        "retail": true
      }
    ],
    "GetFamilyTag": [
      {
        "name": "GetFamilyTag",
        "count": 1,
        "confidence": 0.2,
        "sample": "local tag, icon = ZGV:GetFamilyTag(family)",
        "retail": true
      }
    ],
    "GetOptions": [
      {
        "name": "GetOptions",
        "count": 2,
        "confidence": 0.4,
        "sample": "function me:GetOptions()",
        "retail": true
      },
      {
        "name": "C_GossipInfo.GetOptions",
        "count": 3,
        "confidence": 0.6,
        "sample": "local gossips = C_GossipInfo.GetOptions()",
        "retail": true
      }
    ],
    "GetOptionHandler": [
      {
        "name": "GetOptionHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "local handler = ZGV:GetOptionHandler(self)",
        "retail": true
      }
    ],
    "IsDisabled": [
      {
        "name": "IsDisabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "disabled = function(info) return info.handler:IsDisabled(info) or self.db.profile.mergeBags end,",
        "retail": true
      }
    ],
    "Embed": [
      {
        "name": "Embed",
        "count": 48,
        "confidence": 1.0,
        "sample": "LibStub(\"AceHook-3.0\"):Embed(ItemScore)",
        "retail": true
      }
    ],
    "TrimGemsDatabase": [
      {
        "name": "TrimGemsDatabase",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:TrimGemsDatabase()",
        "retail": true
      }
    ],
    "RecordCurrentCharacter": [
      {
        "name": "RecordCurrentCharacter",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ItemScore:RecordCurrentCharacter()",
        "retail": true
      }
    ],
    "IsSpellKnown": [
      {
        "name": "IsSpellKnown",
        "count": 47,
        "confidence": 1.0,
        "sample": "character.dualwield=IsSpellKnown(674) -- dualwield spell for classic",
        "retail": true
      }
    ],
    "UpdateEquipmentSkills": [
      {
        "name": "UpdateEquipmentSkills",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:UpdateEquipmentSkills(arg1,arg2,...)",
        "retail": true
      }
    ],
    "GetEquipmentSkills": [
      {
        "name": "GetEquipmentSkills",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:GetEquipmentSkills()",
        "retail": true
      }
    ],
    "SetStatWeights": [
      {
        "name": "SetStatWeights",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:SetStatWeights()",
        "retail": true
      }
    ],
    "GetSpecFunc": [
      {
        "name": "GetSpecFunc",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.playerspec = playerspec or GetSpecFunc() or 1",
        "retail": true
      }
    ],
    "GetSpecInfoFunc": [
      {
        "name": "GetSpecInfoFunc",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.playerspecName = (select(2,GetSpecInfoFunc(self.playerspec)))",
        "retail": true
      }
    ],
    "SetDualWield": [
      {
        "name": "SetDualWield",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:SetDualWield()",
        "retail": true
      }
    ],
    "ScoreGems": [
      {
        "name": "ScoreGems",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:ScoreGems()",
        "retail": true
      }
    ],
    "NormaliseStatName": [
      {
        "name": "NormaliseStatName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ItemScore:NormaliseStatName(statname)",
        "retail": true
      }
    ],
    "CreateFromItemLink": [
      {
        "name": "CreateFromItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local item = Item:CreateFromItemLink(itemlink);",
        "retail": true
      }
    ],
    "IsItemEmpty": [
      {
        "name": "IsItemEmpty",
        "count": 1,
        "confidence": 0.2,
        "sample": "if item:IsItemEmpty() then return false end -- whatever it is, it does not exist",
        "retail": true
      }
    ],
    "ContinueOnItemLoad": [
      {
        "name": "ContinueOnItemLoad",
        "count": 1,
        "confidence": 0.2,
        "sample": "local success = pcall(function() item:ContinueOnItemLoad(function()",
        "retail": true
      }
    ],
    "GetItemDetailsQueued": [
      {
        "name": "GetItemDetailsQueued",
        "count": 2,
        "confidence": 0.4,
        "sample": "ItemScore:GetItemDetailsQueued(itemlink,force)",
        "retail": true
      }
    ],
    "GetDetailedItemLevelInfo": [
      {
        "name": "C_Item.GetDetailedItemLevelInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local itemlvl,_,baseitemlvl = C_Item.GetDetailedItemLevelInfo(itemlink)",
        "retail": true
      },
      {
        "name": "GetDetailedItemLevelInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local effectiveILvl, isPreview, baseILvl = GetDetailedItemLevelInfo(itemLink)",
        "retail": true
      }
    ],
    "GetTooltip": [
      {
        "name": "GetTooltip",
        "count": 19,
        "confidence": 1.0,
        "sample": "local tooltip = TS:GetTooltip(itemlink)",
        "retail": true
      }
    ],
    "GetItemStats": [
      {
        "name": "GetItemStats",
        "count": 4,
        "confidence": 0.8,
        "sample": "local blizzstats = GetItemStats(itemlink)",
        "retail": true
      },
      {
        "name": "C_Item.GetItemStats",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemStats() end",
        "retail": true
      }
    ],
    "IsEquippedItem": [
      {
        "name": "C_Item.IsEquippedItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "if caps and caps[statname] and not C_Item.IsEquippedItem(itemlink) then -- don't cap stats on already equipped items",
        "retail": true
      }
    ],
    "GetEquippedStatValue": [
      {
        "name": "GetEquippedStatValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "local current_rating = ItemScore:GetEquippedStatValue(statname)",
        "retail": true
      }
    ],
    "GetMaxPlayerLevel": [
      {
        "name": "GetMaxPlayerLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (current_rating > caps[statname]) or playerlevel < GetMaxPlayerLevel() then",
        "retail": true
      }
    ],
    "ScoreSocket": [
      {
        "name": "ScoreSocket",
        "count": 3,
        "confidence": 0.6,
        "sample": "local gemscore, gemstat, gemvalue = ItemScore:ScoreSocket(item.itemlvl)",
        "retail": true
      }
    ],
    "GetItemBonuses": [
      {
        "name": "ZGV.ItemLink.GetItemBonuses",
        "count": 1,
        "confidence": 0.2,
        "sample": "for bonus,_ in pairs(ZGV.ItemLink.GetItemBonuses(itemlink)) do",
        "retail": true
      },
      {
        "name": "IL.GetItemBonuses",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.GetItemBonuses(itemlink)",
        "retail": true
      }
    ],
    "ExplodeString": [
      {
        "name": "ZGV.ExplodeString",
        "count": 2,
        "confidence": 0.4,
        "sample": "for i,v in pairs(ZGV.ExplodeString(\", \",item.playerclass)) do",
        "retail": true
      }
    ],
    "GetItemByType": [
      {
        "name": "GetItemByType",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ItemScore:GetItemByType(equiptype)",
        "retail": true
      }
    ],
    "GetItemInSlot": [
      {
        "name": "GetItemInSlot",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ItemScore:GetItemInSlot(slotid)",
        "retail": true
      }
    ],
    "GetAzeritePowers": [
      {
        "name": "GetAzeritePowers",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ItemScore:GetAzeritePowers(itemlink)",
        "retail": true
      }
    ],
    "IsAzeriteEmpoweredItemByID": [
      {
        "name": "C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID(itemlink) then return tooltip_array,false end",
        "retail": true
      }
    ],
    "FindActiveAzeriteItem": [
      {
        "name": "C_AzeriteItem.FindActiveAzeriteItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "local power_location = C_AzeriteItem.FindActiveAzeriteItem()",
        "retail": true
      }
    ],
    "GetPowerLevel": [
      {
        "name": "C_AzeriteItem.GetPowerLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "power = C_AzeriteItem.GetPowerLevel(power_location)",
        "retail": true
      }
    ],
    "CreateFromEquipmentSlot": [
      {
        "name": "CreateFromEquipmentSlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "location = ItemLocation:CreateFromEquipmentSlot(slot)",
        "retail": true
      }
    ],
    "GetNumBankSlots": [
      {
        "name": "GetNumBankSlots",
        "count": 1,
        "confidence": 0.2,
        "sample": "for cont = 0,  NUM_BAG_SLOTS + GetNumBankSlots() do",
        "retail": true
      }
    ],
    "CreateFromBagAndSlot": [
      {
        "name": "CreateFromBagAndSlot",
        "count": 2,
        "confidence": 0.4,
        "sample": "location = ItemLocation:CreateFromBagAndSlot(cont, slot)",
        "retail": true
      }
    ],
    "GetAllTierInfoByItemID": [
      {
        "name": "C_AzeriteEmpoweredItem.GetAllTierInfoByItemID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local powers_list = C_AzeriteEmpoweredItem.GetAllTierInfoByItemID(itemlink)",
        "retail": true
      }
    ],
    "GetPowerInfo": [
      {
        "name": "C_AzeriteEmpoweredItem.GetPowerInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local powerinfo = C_AzeriteEmpoweredItem.GetPowerInfo(powerid)",
        "retail": true
      }
    ],
    "IsPowerSelected": [
      {
        "name": "C_AzeriteEmpoweredItem.IsPowerSelected",
        "count": 1,
        "confidence": 0.2,
        "sample": "active = C_AzeriteEmpoweredItem.IsPowerSelected(location, powerid)",
        "retail": true
      }
    ],
    "ItemScore_SetTooltipData": [
      {
        "name": "ItemScore_SetTooltipData",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function ItemScore_SetTooltipData(tooltip)",
        "retail": true
      }
    ],
    "GetItem": [
      {
        "name": "GetItem",
        "count": 7,
        "confidence": 1.0,
        "sample": "local itemName,itemlink = tooltip:GetItem()",
        "retail": true
      }
    ],
    "GetFontString": [
      {
        "name": "GetFontString",
        "count": 37,
        "confidence": 1.0,
        "sample": "t = ZGV.IconSets.AuctionToolsPriceIcons.DOWN1:GetFontString(width,height,nil,nil,255,0,0)",
        "retail": true
      }
    ],
    "ItemScore_ClearTooltipData": [
      {
        "name": "ItemScore_ClearTooltipData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ItemScore_ClearTooltipData(tooltip, ...) ItemScore.TooltipPatched = false end",
        "retail": true
      }
    ],
    "Skill": [
      {
        "name": "Skill",
        "count": 2,
        "confidence": 0.4,
        "sample": "local pattern = \"Skill (%d+) increased from (%d+) to (%d+)\"",
        "retail": true
      }
    ],
    "SetData": [
      {
        "name": "SetData",
        "count": 46,
        "confidence": 1.0,
        "sample": "ItemScore:SetData()",
        "retail": true
      }
    ],
    "HasScript": [
      {
        "name": "HasScript",
        "count": 5,
        "confidence": 1.0,
        "sample": "if GameTooltip:HasScript(\"OnTooltipSetItem\") then",
        "retail": true
      }
    ],
    "AddTooltipPostCall": [
      {
        "name": "TooltipDataProcessor.AddTooltipPostCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "TooltipDataProcessor.AddTooltipPostCall(Enum.TooltipDataType.Item, ItemScore_SetTooltipData)",
        "retail": true
      }
    ],
    "Trim": [
      {
        "name": "Trim",
        "count": 12,
        "confidence": 1.0,
        "sample": "self:Trim()",
        "retail": true
      }
    ],
    "Add": [
      {
        "name": "Add",
        "count": 22,
        "confidence": 1.0,
        "sample": "function Log:Add(frm,...)",
        "retail": true
      },
      {
        "name": "WeakAuras.Add",
        "count": 6,
        "confidence": 1.0,
        "sample": "WeakAuras.Add (group)",
        "retail": true
      }
    ],
    "SetHint": [
      {
        "name": "SetHint",
        "count": 3,
        "confidence": 0.6,
        "sample": "function MK:SetHint(s)",
        "retail": true
      }
    ],
    "Setup": [
      {
        "name": "Setup",
        "count": 17,
        "confidence": 1.0,
        "sample": "function Telemetry:Setup()",
        "retail": true
      }
    ],
    "Prune": [
      {
        "name": "Prune",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:Prune()",
        "retail": true
      }
    ],
    "SetupEvents": [
      {
        "name": "SetupEvents",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetupEvents()",
        "retail": true
      }
    ],
    "AddEvent": [
      {
        "name": "AddEvent",
        "count": 12,
        "confidence": 1.0,
        "sample": "function Telemetry:AddEvent(eventType,args)",
        "retail": true
      }
    ],
    "IsMaster": [
      {
        "name": "IsMaster",
        "count": 14,
        "confidence": 1.0,
        "sample": "(ZGV.Sync:IsMaster() and \"master\")",
        "retail": true
      }
    ],
    "IsSlave": [
      {
        "name": "IsSlave",
        "count": 16,
        "confidence": 1.0,
        "sample": "or (ZGV.Sync:IsSlave() and \"slave\")",
        "retail": true
      }
    ],
    "GetNumGroupMembers": [
      {
        "name": "GetNumGroupMembers",
        "count": 60,
        "confidence": 1.0,
        "sample": "or (GetNumGroupMembers()>0 and \"party\")",
        "retail": true
      }
    ],
    "NewTicker": [
      {
        "name": "C_Timer.NewTicker",
        "count": 26,
        "confidence": 1.0,
        "sample": "C_Timer.NewTicker(60,WrapUp)",
        "retail": true
      },
      {
        "name": "Details.Schedules.NewTicker",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details222.GarbageCollector.collectorTimer = Details.Schedules.NewTicker(Details222.GarbageCollector.intervalTime,",
        "retail": true
      },
      {
        "name": "Scheduler.NewTicker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function details222.Scheduler.NewTicker(seconds, callback, name)",
        "retail": true
      },
      {
        "name": "Schedules.NewTicker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.NewTicker(time, callback, ...)",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnEnter": [
      {
        "name": "Macro_ActionButtonOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_ActionButtonOnEnter(self)",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnDrag": [
      {
        "name": "Macro_ActionButtonOnDrag",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_ActionButtonOnDrag(self)",
        "retail": true
      }
    ],
    "LocateMacro": [
      {
        "name": "LocateMacro",
        "count": 9,
        "confidence": 1.0,
        "sample": "MacroGuide.draggedIsPreview=not self.macroguide:LocateMacro()",
        "retail": true
      }
    ],
    "EditMacro": [
      {
        "name": "EditMacro",
        "count": 4,
        "confidence": 0.8,
        "sample": "local mid=self.macroguide:LocateMacro() or EditMacro(GetMacroIndexByName(\"ZygorMacroPreview\"),self.macroguide.name)",
        "retail": true
      }
    ],
    "GetMacroIndexByName": [
      {
        "name": "GetMacroIndexByName",
        "count": 5,
        "confidence": 1.0,
        "sample": "local mid=self.macroguide:LocateMacro() or EditMacro(GetMacroIndexByName(\"ZygorMacroPreview\"),self.macroguide.name)",
        "retail": true
      }
    ],
    "PickupMacro": [
      {
        "name": "PickupMacro",
        "count": 4,
        "confidence": 0.8,
        "sample": "PickupMacro(mid)",
        "retail": true
      }
    ],
    "SetAttribute": [
      {
        "name": "SetAttribute",
        "count": 78,
        "confidence": 1.0,
        "sample": "self:SetAttribute(\"macro\",mid) -- Make sure we're referencing the newlycreated one",
        "retail": true
      }
    ],
    "MacroFrame_Update": [
      {
        "name": "MacroFrame_Update",
        "count": 4,
        "confidence": 0.8,
        "sample": "MacroFrame_Update()",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnLeave": [
      {
        "name": "Macro_ActionButtonOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_ActionButtonOnLeave(self)",
        "retail": true
      }
    ],
    "Macro_ActionButtonMouseOverFix": [
      {
        "name": "Macro_ActionButtonMouseOverFix",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Macro_ActionButtonMouseOverFix(self)",
        "retail": true
      }
    ],
    "UnitExists": [
      {
        "name": "UnitExists",
        "count": 70,
        "confidence": 1.0,
        "sample": "if not UnitExists(\"mouseover\") then self:UpdateMacroIcon() end",
        "retail": true
      }
    ],
    "UpdateMacroIcon": [
      {
        "name": "UpdateMacroIcon",
        "count": 4,
        "confidence": 0.8,
        "sample": "if not UnitExists(\"mouseover\") then self:UpdateMacroIcon() end",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnShow": [
      {
        "name": "Macro_ActionButtonOnShow",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Macro_ActionButtonOnShow(self)",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnHide": [
      {
        "name": "Macro_ActionButtonOnHide",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Macro_ActionButtonOnHide(self)",
        "retail": true
      }
    ],
    "UnregisterEvent": [
      {
        "name": "UnregisterEvent",
        "count": 47,
        "confidence": 1.0,
        "sample": "self:UnregisterEvent(\"PLAYER_TARGET_CHANGED\")",
        "retail": true
      }
    ],
    "Macro_DragAfterMathChecker": [
      {
        "name": "Macro_DragAfterMathChecker",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Macro_DragAfterMathChecker(self)",
        "retail": true
      }
    ],
    "NotifyAboutUpdates": [
      {
        "name": "NotifyAboutUpdates",
        "count": 4,
        "confidence": 0.8,
        "sample": "self.macroguide:NotifyAboutUpdates()",
        "retail": true
      }
    ],
    "Macro_ActionButtonOnEvent": [
      {
        "name": "Macro_ActionButtonOnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_ActionButtonOnEvent(self,event)",
        "retail": true
      }
    ],
    "CursorHasMacro": [
      {
        "name": "CursorHasMacro",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not CursorHasMacro() then",
        "retail": true
      }
    ],
    "ActionButtonPrepare": [
      {
        "name": "MacroGuide.ActionButtonPrepare",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MacroGuide.ActionButtonPrepare(button,refreshfunc)",
        "retail": true
      }
    ],
    "MacroFrame_LoadUI": [
      {
        "name": "MacroFrame_LoadUI",
        "count": 1,
        "confidence": 0.2,
        "sample": "MacroFrame_LoadUI()",
        "retail": true
      }
    ],
    "MacroGuide_MacroPanelRewired": [
      {
        "name": "MacroGuide_MacroPanelRewired",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not MacroGuide_MacroPanelRewired() then",
        "retail": true
      }
    ],
    "MacroGuide_RewireMacroPanel": [
      {
        "name": "MacroGuide_RewireMacroPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "MacroGuide_RewireMacroPanel()",
        "retail": true
      }
    ],
    "SetMacro": [
      {
        "name": "SetMacro",
        "count": 3,
        "confidence": 0.6,
        "sample": "function button:SetMacro(mg)",
        "retail": true
      }
    ],
    "DeleteMacro": [
      {
        "name": "DeleteMacro",
        "count": 13,
        "confidence": 1.0,
        "sample": "DeleteMacro(\"ZygorMacroPreview\")",
        "retail": true
      }
    ],
    "CreateMacro": [
      {
        "name": "CreateMacro",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SetAttribute(\"macro\",mg:LocateMacro() or mg:CreateMacro(\"preview\"))",
        "retail": true
      }
    ],
    "ClearMacro": [
      {
        "name": "ClearMacro",
        "count": 1,
        "confidence": 0.2,
        "sample": "function button:ClearMacro()",
        "retail": true
      }
    ],
    "GetMacroInfo": [
      {
        "name": "GetMacroInfo",
        "count": 12,
        "confidence": 1.0,
        "sample": "local _,texture=GetMacroInfo(mid)",
        "retail": true
      }
    ],
    "MacroExists": [
      {
        "name": "MacroExists",
        "count": 3,
        "confidence": 0.6,
        "sample": "function MacroGuide:MacroExists(location)",
        "retail": true
      }
    ],
    "GetNumMacros": [
      {
        "name": "GetNumMacros",
        "count": 4,
        "confidence": 0.8,
        "sample": "local numAccountMacros, numCharacterMacros = GetNumMacros()",
        "retail": true
      }
    ],
    "PlaceOnBar": [
      {
        "name": "PlaceOnBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MacroGuide:PlaceOnBar()",
        "retail": true
      }
    ],
    "GetActionInfo": [
      {
        "name": "GetActionInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not GetActionInfo(i+fix) then",
        "retail": true
      }
    ],
    "PlaceAction": [
      {
        "name": "PlaceAction",
        "count": 1,
        "confidence": 0.2,
        "sample": "PlaceAction(i+fix)",
        "retail": true
      }
    ],
    "Macro_UIMacroButtonOnClickDomestic": [
      {
        "name": "Macro_UIMacroButtonOnClickDomestic",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_UIMacroButtonOnClickDomestic(self, button)",
        "retail": true
      }
    ],
    "MacroFrame_SelectMacro": [
      {
        "name": "MacroFrame_SelectMacro",
        "count": 1,
        "confidence": 0.2,
        "sample": "MacroFrame_SelectMacro(mac:CreateMacro(mid <= MAX_ACCOUNT_MACROS and \"account\" or \"character\"))",
        "retail": true
      }
    ],
    "Old_MacroButtonClick": [
      {
        "name": "Old_MacroButtonClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "Old_MacroButtonClick(self,button)",
        "retail": true
      }
    ],
    "Macro_UIMacroDeleteOnClickDomestic": [
      {
        "name": "Macro_UIMacroDeleteOnClickDomestic",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_UIMacroDeleteOnClickDomestic()",
        "retail": true
      }
    ],
    "Old_MacroDeleteButtonClick": [
      {
        "name": "Old_MacroDeleteButtonClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "Old_MacroDeleteButtonClick()",
        "retail": true
      }
    ],
    "Macro_UIUpdateDomestic": [
      {
        "name": "Macro_UIUpdateDomestic",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Macro_UIUpdateDomestic()",
        "retail": true
      }
    ],
    "SetChecked": [
      {
        "name": "SetChecked",
        "count": 3,
        "confidence": 0.6,
        "sample": "macroButton:SetChecked(1);",
        "retail": true
      }
    ],
    "SetID": [
      {
        "name": "SetID",
        "count": 8,
        "confidence": 1.0,
        "sample": "MacroFrameSelectedMacroButton:SetID(i);",
        "retail": true
      }
    ],
    "MacroFrame_ShowDetails": [
      {
        "name": "MacroFrame_ShowDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "MacroFrame_ShowDetails();",
        "retail": true
      }
    ],
    "MacroFrame_HideDetails": [
      {
        "name": "MacroFrame_HideDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "MacroFrame_HideDetails();",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_OnLoad": [
      {
        "name": "ZygorGuidesViewerFrame_OnLoad",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZygorGuidesViewerFrame_OnLoad()",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_OnHide": [
      {
        "name": "ZygorGuidesViewerFrame_OnHide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_OnHide()",
        "retail": true
      }
    ],
    "Frame_OnHide": [
      {
        "name": "Frame_OnHide",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:Frame_OnHide();",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_OnShow": [
      {
        "name": "ZygorGuidesViewerFrame_OnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_OnShow()",
        "retail": true
      }
    ],
    "Frame_OnShow": [
      {
        "name": "Frame_OnShow",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV:Frame_OnShow();",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_Update": [
      {
        "name": "ZygorGuidesViewerFrame_Update",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_Update()",
        "retail": true
      }
    ],
    "UpdateMainFrame": [
      {
        "name": "UpdateMainFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV then ZGV:UpdateMainFrame() end",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_HighlightCurrentStep": [
      {
        "name": "ZygorGuidesViewerFrame_HighlightCurrentStep",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_HighlightCurrentStep()",
        "retail": true
      }
    ],
    "HighlightCurrentStep": [
      {
        "name": "HighlightCurrentStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.CurrentStep then ZGV:HighlightCurrentStep() end",
        "retail": true
      }
    ],
    "ParseMapXYDist": [
      {
        "name": "ParseMapXYDist",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function ParseMapXYDist(text,insanefloor,returnmany)",
        "retail": true
      },
      {
        "name": "ZGV.Parser.ParseMapXYDist",
        "count": 1,
        "confidence": 0.2,
        "sample": "map,f,x,y = ZGV.Parser.ParseMapXYDist(map)",
        "retail": true
      }
    ],
    "GetMapByNameFloor": [
      {
        "name": "GetMapByNameFloor",
        "count": 17,
        "confidence": 1.0,
        "sample": "mapid,flr = LibRover:GetMapByNameFloor(mapname,flr,text)",
        "retail": true
      }
    ],
    "DumpMapIDsByName": [
      {
        "name": "DumpMapIDsByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:DumpMapIDsByName()",
        "retail": true
      }
    ],
    "ParseID": [
      {
        "name": "ParseID",
        "count": 38,
        "confidence": 1.0,
        "sample": "local function ParseID(str)",
        "retail": true
      },
      {
        "name": "ZGV.Parser.ParseID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local name, id, criteria = ZGV.Parser.ParseID(point.achieve)",
        "retail": true
      }
    ],
    "ParseRanges": [
      {
        "name": "ParseRanges",
        "count": 11,
        "confidence": 1.0,
        "sample": "local function ParseRanges(str,askeys)",
        "retail": true
      }
    ],
    "NeedsAnimatedPopup": [
      {
        "name": "NeedsAnimatedPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:NeedsAnimatedPopup(variablesArray)",
        "retail": true
      }
    ],
    "RenderAnimation": [
      {
        "name": "RenderAnimation",
        "count": 6,
        "confidence": 1.0,
        "sample": "local reference = ZGV[ZGV:RenderAnimation({31,27,7,50,39,7,50,52})] or {} -- default animation table with metatable data",
        "retail": true
      }
    ],
    "GetCurrentCalendarTime": [
      {
        "name": "C_DateAndTime.GetCurrentCalendarTime",
        "count": 7,
        "confidence": 1.0,
        "sample": "local a = C_DateAndTime.GetCurrentCalendarTime and C_DateAndTime.GetCurrentCalendarTime() or C_DateAndTime.GetTodaysDate()",
        "retail": true
      }
    ],
    "GetTodaysDate": [
      {
        "name": "C_DateAndTime.GetTodaysDate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local a = C_DateAndTime.GetCurrentCalendarTime and C_DateAndTime.GetCurrentCalendarTime() or C_DateAndTime.GetTodaysDate()",
        "retail": true
      }
    ],
    "IsCurrentlySticky": [
      {
        "name": "IsCurrentlySticky",
        "count": 15,
        "confidence": 1.0,
        "sample": "self.sticky = step and step:IsCurrentlySticky()",
        "retail": true
      }
    ],
    "GetSkill": [
      {
        "name": "GetSkill",
        "count": 21,
        "confidence": 1.0,
        "sample": "local s = ZGV.Professions:GetSkill(skill)",
        "retail": true
      }
    ],
    "RaceClassMatch": [
      {
        "name": "RaceClassMatch",
        "count": 24,
        "confidence": 1.0,
        "sample": "return ZGV:RaceClassMatch(raceclass,true)",
        "retail": true
      }
    ],
    "MatchProfs": [
      {
        "name": "MatchProfs",
        "count": 2,
        "confidence": 0.4,
        "sample": "return ZGV:MatchProfs(hasprof,minlevel)",
        "retail": true
      }
    ],
    "HasProfessionUnscanned": [
      {
        "name": "HasProfessionUnscanned",
        "count": 2,
        "confidence": 0.4,
        "sample": "return ZGV.Professions:HasProfessionUnscanned(hasprof)",
        "retail": true
      }
    ],
    "GetPlayerAuraBySpellID": [
      {
        "name": "C_UnitAuras.GetPlayerAuraBySpellID",
        "count": 21,
        "confidence": 1.0,
        "sample": "local aura = C_UnitAuras.GetPlayerAuraBySpellID(tonumber(query))",
        "retail": true
      }
    ],
    "FindEvent": [
      {
        "name": "FindEvent",
        "count": 6,
        "confidence": 1.0,
        "sample": "return ZGV:FindEvent(eventname)",
        "retail": true
      }
    ],
    "Zygor_GetAchievementCriteriaInfo": [
      {
        "name": "ZGV.Zygor_GetAchievementCriteriaInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "if type(achieveid)==\"number\" and type(subid)==\"number\" then return select(3,ZGV.Zygor_GetAchievementCriteriaInfo(achieveid,subid)) end",
        "retail": true
      },
      {
        "name": "Zygor_GetAchievementCriteriaInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function Zygor_GetAchievementCriteriaInfo(achieveid, criteria)",
        "retail": true
      }
    ],
    "GetNumCollectedInfo": [
      {
        "name": "C_PetJournal.GetNumCollectedInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local numCollected, limit = C_PetJournal.GetNumCollectedInfo(speciesID)",
        "retail": true
      }
    ],
    "PlayerHasToy": [
      {
        "name": "PlayerHasToy",
        "count": 21,
        "confidence": 1.0,
        "sample": "return PlayerHasToy(toyId)",
        "retail": true
      }
    ],
    "GetThunderStage": [
      {
        "name": "GetThunderStage",
        "count": 3,
        "confidence": 0.6,
        "sample": "return ZGV:GetThunderStage()",
        "retail": true
      }
    ],
    "GetMountFromSpell": [
      {
        "name": "C_MountJournal.GetMountFromSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "local mountID = C_MountJournal.GetMountFromSpell(mountident)",
        "retail": true
      }
    ],
    "GetMountInfoByID": [
      {
        "name": "C_MountJournal.GetMountInfoByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local name, spell, _, _, _, _, _, _, _, _, isCollected = C_MountJournal.GetMountInfoByID(mountID)",
        "retail": true
      }
    ],
    "IsIndoors": [
      {
        "name": "IsIndoors",
        "count": 27,
        "confidence": 1.0,
        "sample": "return IsIndoors()",
        "retail": true
      }
    ],
    "GetItemCount": [
      {
        "name": "C_Item.GetItemCount",
        "count": 37,
        "confidence": 1.0,
        "sample": "total = total + C_Item.GetItemCount(select(i, ...))",
        "retail": true
      }
    ],
    "GetCurrencyInfo": [
      {
        "name": "C_CurrencyInfo.GetCurrencyInfo",
        "count": 21,
        "confidence": 1.0,
        "sample": "local info = C_CurrencyInfo.GetCurrencyInfo(curid)",
        "retail": true
      },
      {
        "name": "GetCurrencyInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "Click here to purchase your mount |confirm |only if _G.select(2,_G.GetCurrencyInfo(391))>165",
        "retail": true
      }
    ],
    "GetDungeonDifficultyID": [
      {
        "name": "GetDungeonDifficultyID",
        "count": 4,
        "confidence": 0.8,
        "sample": "local difficultyID = GetDungeonDifficultyID()",
        "retail": true
      }
    ],
    "GetDifficultyInfo": [
      {
        "name": "GetDifficultyInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local _, _, isHeroic, isChallengeMode, displayHeroic, displayMythic = GetDifficultyInfo(difficultyID)",
        "retail": true
      }
    ],
    "GetInstanceInfo": [
      {
        "name": "GetInstanceInfo",
        "count": 87,
        "confidence": 1.0,
        "sample": "local name, instanceType, difficultyID, _, maxPlayers = GetInstanceInfo()",
        "retail": true
      },
      {
        "name": "Ejc.GetInstanceInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Ejc.GetInstanceInfo(id)",
        "retail": true
      }
    ],
    "GetRaidDifficultyID": [
      {
        "name": "GetRaidDifficultyID",
        "count": 3,
        "confidence": 0.6,
        "sample": "local difficultyID = GetRaidDifficultyID()",
        "retail": true
      }
    ],
    "Garrison_GetBuildingState": [
      {
        "name": "ZGV.Garrison_GetBuildingState",
        "count": 4,
        "confidence": 0.8,
        "sample": "local rank,state = ZGV.Garrison_GetBuildingState(id_or_name,false) -- be precise",
        "retail": true
      }
    ],
    "Garrison_HasFollower": [
      {
        "name": "ZGV.Garrison_HasFollower",
        "count": 3,
        "confidence": 0.6,
        "sample": "return ZGV.Garrison_HasFollower(id)",
        "retail": true
      }
    ],
    "Garrison_HasBuildingBlueprint": [
      {
        "name": "ZGV.Garrison_HasBuildingBlueprint",
        "count": 2,
        "confidence": 0.4,
        "sample": "return ZGV.Garrison_HasBuildingBlueprint(id_or_name,level)",
        "retail": true
      }
    ],
    "GetActiveAbilities": [
      {
        "name": "C_ZoneAbility.GetActiveAbilities",
        "count": 1,
        "confidence": 0.2,
        "sample": "local info = C_ZoneAbility.GetActiveAbilities()",
        "retail": true
      }
    ],
    "GetTalentInfo": [
      {
        "name": "C_Garrison.GetTalentInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local info = C_Garrison.GetTalentInfo(id)",
        "retail": true
      },
      {
        "name": "GetTalentInfo",
        "count": 27,
        "confidence": 1.0,
        "sample": "function GetTalentInfo(tabIndex, talentIndex, isInspect) return \"\", \"\", \"\", 0, 0, true end",
        "retail": true
      }
    ],
    "GetPlayerPosition": [
      {
        "name": "GetPlayerPosition",
        "count": 33,
        "confidence": 1.0,
        "sample": "local x2,y2,map2 = LibRover:GetPlayerPosition()",
        "retail": true
      },
      {
        "name": "ZGV.GetPlayerPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.GetPlayerPosition()",
        "retail": true
      }
    ],
    "Mdist": [
      {
        "name": "ZGV.MapCoords.Mdist",
        "count": 3,
        "confidence": 0.6,
        "sample": "local dist = ZGV.MapCoords.Mdist(map1,x1,y1,map2,x2,y2)",
        "retail": true
      },
      {
        "name": "Mdist",
        "count": 9,
        "confidence": 1.0,
        "sample": "local len=sqrt((Ax-Bx)*(Ax-Bx)+(Ay-By)*(Ay-By)*0.444444) --(Mdist(way1.m,way1.x,way1.y,way2.m,way2.x,way2.y) or 300)",
        "retail": true
      },
      {
        "name": "MapCoords.Mdist",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MapCoords.Mdist(map1,x1,y1,map2,x2,y2)",
        "retail": true
      }
    ],
    "KnowsRecipe": [
      {
        "name": "KnowsRecipe",
        "count": 3,
        "confidence": 0.6,
        "sample": "return ZGV.Professions:KnowsRecipe(spellid)",
        "retail": true
      }
    ],
    "IsFlying": [
      {
        "name": "IsFlying",
        "count": 8,
        "confidence": 1.0,
        "sample": "return not (IsFlying and IsFlying())",
        "retail": true
      }
    ],
    "FindTaxi": [
      {
        "name": "FindTaxi",
        "count": 8,
        "confidence": 1.0,
        "sample": "local taxinode = ZGV.LibTaxi:FindTaxi(name)",
        "retail": true
      }
    ],
    "UnitOnTaxi": [
      {
        "name": "UnitOnTaxi",
        "count": 31,
        "confidence": 1.0,
        "sample": "return UnitOnTaxi(\"player\"),true",
        "retail": true
      }
    ],
    "IsBoostTutorialScenario": [
      {
        "name": "IsBoostTutorialScenario",
        "count": 1,
        "confidence": 0.2,
        "sample": "return IsBoostTutorialScenario()",
        "retail": true
      }
    ],
    "GetScenarioInfo": [
      {
        "name": "C_ScenarioInfo.GetScenarioInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local info = C_ScenarioInfo.GetScenarioInfo()",
        "retail": true
      }
    ],
    "GetStepInfo": [
      {
        "name": "C_Scenario.GetStepInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "local _, _, numCriteria = C_Scenario.GetStepInfo();",
        "retail": true
      }
    ],
    "GetCriteriaInfo": [
      {
        "name": "C_ScenarioInfo.GetCriteriaInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local criteriaInfo = C_ScenarioInfo.GetCriteriaInfo(criteriaIndex);",
        "retail": true
      }
    ],
    "IsPOIActive": [
      {
        "name": "IsPOIActive",
        "count": 26,
        "confidence": 1.0,
        "sample": "return ZGV:IsPOIActive(poiid)",
        "retail": true
      }
    ],
    "IsTitleKnown": [
      {
        "name": "IsTitleKnown",
        "count": 4,
        "confidence": 0.8,
        "sample": "return IsTitleKnown(id)",
        "retail": true
      }
    ],
    "GetAreaPOIInfo": [
      {
        "name": "C_AreaPoiInfo.GetAreaPOIInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "return C_AreaPoiInfo.GetAreaPOIInfo(map,id)",
        "retail": true
      }
    ],
    "GetActiveThreatMaps": [
      {
        "name": "C_QuestLog.GetActiveThreatMaps",
        "count": 1,
        "confidence": 0.2,
        "sample": "local threatmaps = C_QuestLog.GetActiveThreatMaps()",
        "retail": true
      }
    ],
    "GetAreaPOISecondsLeft": [
      {
        "name": "C_AreaPoiInfo.GetAreaPOISecondsLeft",
        "count": 7,
        "confidence": 1.0,
        "sample": "return C_AreaPoiInfo.GetAreaPOISecondsLeft(id) or 0",
        "retail": true
      }
    ],
    "GetAvailableQuests": [
      {
        "name": "C_GossipInfo.GetAvailableQuests",
        "count": 5,
        "confidence": 1.0,
        "sample": "local quests=C_GossipInfo.GetAvailableQuests()",
        "retail": true
      }
    ],
    "GetNumAvailableQuests": [
      {
        "name": "GetNumAvailableQuests",
        "count": 3,
        "confidence": 0.6,
        "sample": "if GetNumAvailableQuests()==0 then return false end",
        "retail": true
      },
      {
        "name": "C_GossipInfo.GetNumAvailableQuests",
        "count": 1,
        "confidence": 0.2,
        "sample": "for qnum=1,C_GossipInfo.GetNumAvailableQuests() do",
        "retail": true
      }
    ],
    "GetAvailableQuestInfo": [
      {
        "name": "GetAvailableQuestInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local isTrivial, frequency, isRepeatable, isLegendary, questID = GetAvailableQuestInfo(qnum)",
        "retail": true
      }
    ],
    "GetAvailableTitle": [
      {
        "name": "GetAvailableTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "local title=GetAvailableTitle(qnum)",
        "retail": true
      }
    ],
    "IsActive": [
      {
        "name": "C_TaskQuest.IsActive",
        "count": 6,
        "confidence": 1.0,
        "sample": "if not (settings and settings.skipactive) and C_TaskQuest.IsActive(id) then return true end -- it is active, good",
        "retail": true
      }
    ],
    "GetQuestTimeLeftSeconds": [
      {
        "name": "C_TaskQuest.GetQuestTimeLeftSeconds",
        "count": 7,
        "confidence": 1.0,
        "sample": "if not (settings and settings.skiptime) and C_TaskQuest.GetQuestTimeLeftSeconds(id) then return true end -- fallback, does it have time remaining",
        "retail": true
      }
    ],
    "GetAvailableQuestLines": [
      {
        "name": "C_QuestLine.GetAvailableQuestLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "for i,storyline in ipairs(C_QuestLine.GetAvailableQuestLines(mapID)) do",
        "retail": true
      }
    ],
    "GetQuestsOnMap": [
      {
        "name": "C_TaskQuest.GetQuestsOnMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "local taskquests = C_TaskQuest.GetQuestsOnMap(mapID)",
        "retail": true
      }
    ],
    "RequestQuestLinesForMap": [
      {
        "name": "C_QuestLine.RequestQuestLinesForMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_QuestLine.RequestQuestLinesForMap(mapID) -- refresh data",
        "retail": true
      }
    ],
    "GetSummonedPetGUID": [
      {
        "name": "C_PetJournal.GetSummonedPetGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local activeGUID = C_PetJournal.GetSummonedPetGUID()",
        "retail": true
      }
    ],
    "GetPetInfoByPetID": [
      {
        "name": "C_PetJournal.GetPetInfoByPetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local speciesID, _, _, _, _, _, _, name, _, _, creatureID  = C_PetJournal.GetPetInfoByPetID(activeGUID)",
        "retail": true
      }
    ],
    "GetDungeonEntrancesForMap": [
      {
        "name": "C_EncounterJournal.GetDungeonEntrancesForMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "for _,data in pairs(C_EncounterJournal.GetDungeonEntrancesForMap(mapid)) do",
        "retail": true
      }
    ],
    "GetTextureWithAnimationVisualizationInfo": [
      {
        "name": "C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local data = C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo(2873+i)",
        "retail": true
      }
    ],
    "UnitAura": [
      {
        "name": "UnitAura",
        "count": 8,
        "confidence": 1.0,
        "sample": "local _, icon, count, _, _, _, _, _, _, spellID = UnitAura(\"player\", i, \"MAW\");",
        "retail": true
      }
    ],
    "GetRenownLevel": [
      {
        "name": "C_CovenantSanctumUI.GetRenownLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "return C_CovenantSanctumUI.GetRenownLevel()",
        "retail": true
      }
    ],
    "UnitChromieTimeID": [
      {
        "name": "UnitChromieTimeID",
        "count": 6,
        "confidence": 1.0,
        "sample": "local timeid = UnitChromieTimeID(\"player\")",
        "retail": true
      }
    ],
    "UnitInVehicle": [
      {
        "name": "UnitInVehicle",
        "count": 5,
        "confidence": 1.0,
        "sample": "if not UnitInVehicle(\"player\") and not UnitOnTaxi(\"player\") then return false end",
        "retail": true
      }
    ],
    "GetUnitId": [
      {
        "name": "ZGV.GetUnitId",
        "count": 11,
        "confidence": 1.0,
        "sample": "return ZGV.GetUnitId(\"pet\")==id",
        "retail": true
      },
      {
        "name": "GetUnitId",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetUnitId(unitName)",
        "retail": true
      }
    ],
    "GetVignettes": [
      {
        "name": "C_VignetteInfo.GetVignettes",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- use /run local o={} for i,v in ipairs(C_VignetteInfo.GetVignettes()) do o[i]=C_VignetteInfo.GetVignetteInfo(v) end ZGV:ShowDump(o) to get list of active ones on current map",
        "retail": true
      }
    ],
    "GetVignetteInfo": [
      {
        "name": "C_VignetteInfo.GetVignetteInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- use /run local o={} for i,v in ipairs(C_VignetteInfo.GetVignettes()) do o[i]=C_VignetteInfo.GetVignetteInfo(v) end ZGV:ShowDump(o) to get list of active ones on current map",
        "retail": true
      }
    ],
    "IsPlayerSpell": [
      {
        "name": "IsPlayerSpell",
        "count": 47,
        "confidence": 1.0,
        "sample": "return IsSpellKnown(id) or IsPlayerSpell(id)",
        "retail": true
      }
    ],
    "IsUsableSpell": [
      {
        "name": "IsUsableSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "local usable, nomana = IsUsableSpell(spellid)",
        "retail": true
      }
    ],
    "GetAllAppearanceSources": [
      {
        "name": "C_TransmogCollection.GetAllAppearanceSources",
        "count": 2,
        "confidence": 0.4,
        "sample": "local sources = C_TransmogCollection.GetAllAppearanceSources(visualID)",
        "retail": true
      }
    ],
    "GetSourceInfo": [
      {
        "name": "C_TransmogCollection.GetSourceInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local info = C_TransmogCollection.GetSourceInfo(sourceid)",
        "retail": true
      }
    ],
    "GetLanguageSkill": [
      {
        "name": "GetLanguageSkill",
        "count": 2,
        "confidence": 0.4,
        "sample": "return ZGV.Languages:GetLanguageSkill(skill)",
        "retail": true
      }
    ],
    "GetTopCenterWidgetSetID": [
      {
        "name": "C_UIWidgetManager.GetTopCenterWidgetSetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "TopCenter = C_UIWidgetManager.GetTopCenterWidgetSetID(),",
        "retail": true
      }
    ],
    "GetPowerBarWidgetSetID": [
      {
        "name": "C_UIWidgetManager.GetPowerBarWidgetSetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "PowerBar = C_UIWidgetManager.GetPowerBarWidgetSetID(),",
        "retail": true
      }
    ],
    "GetObjectiveTrackerWidgetSetID": [
      {
        "name": "C_UIWidgetManager.GetObjectiveTrackerWidgetSetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "ObjectiveTracker = C_UIWidgetManager.GetObjectiveTrackerWidgetSetID(),",
        "retail": true
      }
    ],
    "GetBelowMinimapWidgetSetID": [
      {
        "name": "C_UIWidgetManager.GetBelowMinimapWidgetSetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "BelowMinimap = C_UIWidgetManager.GetBelowMinimapWidgetSetID(),",
        "retail": true
      }
    ],
    "GetAllWidgetsBySetID": [
      {
        "name": "C_UIWidgetManager.GetAllWidgetsBySetID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local widgetset = C_UIWidgetManager.GetAllWidgetsBySetID(setID)",
        "retail": true
      }
    ],
    "GetWidgetTypeInfo": [
      {
        "name": "GetWidgetTypeInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local widgetTypeInfo =  UIWidgetManager:GetWidgetTypeInfo(wData.widgetType)",
        "retail": true
      }
    ],
    "GetActiveQuests": [
      {
        "name": "C_GossipInfo.GetActiveQuests",
        "count": 4,
        "confidence": 0.8,
        "sample": "for qnum,questInfo in ipairs(C_GossipInfo.GetActiveQuests()) do",
        "retail": true
      }
    ],
    "CloseGossip": [
      {
        "name": "C_GossipInfo.CloseGossip",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_GossipInfo.CloseGossip()",
        "retail": true
      }
    ],
    "MakeCondition": [
      {
        "name": "MakeCondition",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function MakeCondition(cond,forcebool,usecache)",
        "retail": true
      },
      {
        "name": "ZGV.Parser.MakeCondition",
        "count": 6,
        "confidence": 1.0,
        "sample": "local fun,err,cond_procd = ZGV.Parser.MakeCondition(cond,true)",
        "retail": true
      }
    ],
    "ParseEntry": [
      {
        "name": "ParseEntry",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Parser:ParseEntry(guide,fully_parse,lastparsed)",
        "retail": true
      }
    ],
    "COLOR_LOC": [
      {
        "name": "COLOR_LOC",
        "count": 14,
        "confidence": 1.0,
        "sample": "local function COLOR_LOC(s) return \"|cffffee77\"..s..\"|r\" end",
        "retail": true
      }
    ],
    "GetParsed": [
      {
        "name": "GetParsed",
        "count": 1,
        "confidence": 0.2,
        "sample": "return inclusion and inclusion:GetParsed(params) or \"\"",
        "retail": true
      }
    ],
    "DevStart": [
      {
        "name": "ZGV.DevStart",
        "count": 2,
        "confidence": 0.4,
        "sample": "if chunk==\"ZGV.DevStart()\" then",
        "retail": true
      }
    ],
    "DevEnd": [
      {
        "name": "ZGV.DevEnd",
        "count": 2,
        "confidence": 0.4,
        "sample": "if chunk==\"ZGV.DevEnd()\" then",
        "retail": true
      }
    ],
    "SanitizeGuideTitle": [
      {
        "name": "SanitizeGuideTitle",
        "count": 7,
        "confidence": 1.0,
        "sample": "local leechsteps_guide = ZGV:SanitizeGuideTitle(fromguide or params:match(\"^\\\"(.+)\\\"$\") or params) :gsub(\"\\\\+\",\"\\\\\")",
        "retail": true
      }
    ],
    "Parse": [
      {
        "name": "Parse",
        "count": 21,
        "confidence": 1.0,
        "sample": "local parsed = leechedguide:Parse(true)",
        "retail": true
      }
    ],
    "GetJumpDestination": [
      {
        "name": "GetJumpDestination",
        "count": 8,
        "confidence": 1.0,
        "sample": "local step,guide = ZGV.StepProto:GetJumpDestination(params)",
        "retail": true
      }
    ],
    "BRACE": [
      {
        "name": "BRACE",
        "count": 2,
        "confidence": 0.4,
        "sample": "text = text:gsub(\"@@BRACE(%d+)%?%?(.-)@@\",loadbrace):gsub(\"%%%%BRACE(%d+)%%%%\",loadbrace)",
        "retail": true
      }
    ],
    "ReplaceMacroIDs": [
      {
        "name": "ReplaceMacroIDs",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function ReplaceMacroIDs(guide)",
        "retail": true
      }
    ],
    "LocalizedClassList": [
      {
        "name": "LocalizedClassList",
        "count": 2,
        "confidence": 0.4,
        "sample": "ParseHeader_classes = LocalizedClassList()",
        "retail": true
      }
    ],
    "FillLocalizedClassList": [
      {
        "name": "FillLocalizedClassList",
        "count": 2,
        "confidence": 0.4,
        "sample": "FillLocalizedClassList(ParseHeader_classes)",
        "retail": true
      }
    ],
    "ParseHeaderError": [
      {
        "name": "ParseHeaderError",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Parser:ParseHeaderError(msg,param,value)",
        "retail": true
      }
    ],
    "ParseHeader": [
      {
        "name": "ParseHeader",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Parser:ParseHeader(guide)",
        "retail": true
      }
    ],
    "RegisterGuide": [
      {
        "name": "ZGV.PetBattle.PetJournal.RegisterGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.PetBattle.PetJournal.RegisterGuide(speciesId,guide)",
        "retail": true
      },
      {
        "name": "RegisterGuide",
        "count": 14837,
        "confidence": 1.0,
        "sample": "function ZGV:RegisterGuide(title,header,data)",
        "retail": true
      },
      {
        "name": "PetBattle.PetJournal.RegisterGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PetBattle.PetJournal.RegisterGuide(speciesId,guide)",
        "retail": true
      }
    ],
    "GetPetInfoBySpeciesID": [
      {
        "name": "C_PetJournal.GetPetInfoBySpeciesID",
        "count": 7,
        "confidence": 1.0,
        "sample": "local _, _, _, creatureID, _, _, _, _, _, _, _, DisplayID = C_PetJournal.GetPetInfoBySpeciesID(speciesId or 0)",
        "retail": true
      }
    ],
    "RegisterPetID": [
      {
        "name": "RegisterPetID",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.CreatureDetector:RegisterPetID(creatureID,guide)",
        "retail": true
      }
    ],
    "FindOrCreateGroup": [
      {
        "name": "FindOrCreateGroup",
        "count": 10,
        "confidence": 1.0,
        "sample": "local group = ZGV:FindOrCreateGroup(ZGV.registered_groups,\"SUGGESTED\\\\\"..(folder or header)) or ZGV.registered_groups",
        "retail": true
      }
    ],
    "RegisterMountSpell": [
      {
        "name": "RegisterMountSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.CreatureDetector:RegisterMountSpell(tonumber(id),guide) -- TODO mark duplicates",
        "retail": true
      }
    ],
    "GetMountInfoExtraByID": [
      {
        "name": "C_MountJournal.GetMountInfoExtraByID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local DisplayID = C_MountJournal.GetMountInfoExtraByID(mountID)",
        "retail": true
      }
    ],
    "GetModelFileID": [
      {
        "name": "GetModelFileID",
        "count": 2,
        "confidence": 0.4,
        "sample": "file=ZGV.CreatureDetector.PetMirror:GetModelFileID()",
        "retail": true
      }
    ],
    "RegisterGuideModel": [
      {
        "name": "RegisterGuideModel",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.CreatureDetector:RegisterGuideModel(model,guide,file)",
        "retail": true
      }
    ],
    "UpdateCovenant": [
      {
        "name": "UpdateCovenant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Parser:UpdateCovenant()",
        "retail": true
      }
    ],
    "Translate": [
      {
        "name": "Translate",
        "count": 9,
        "confidence": 1.0,
        "sample": "assert(Translate(\"bla\")==\"bla\")",
        "retail": true
      }
    ],
    "CreateRequestFrame": [
      {
        "name": "CreateRequestFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideMenu:CreateRequestFrame()",
        "retail": true
      }
    ],
    "HideRequestFrame": [
      {
        "name": "HideRequestFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideMenu:HideRequestFrame()",
        "retail": true
      }
    ],
    "FindGuides": [
      {
        "name": "FindGuides",
        "count": 2,
        "confidence": 0.4,
        "sample": "for _,object in pairs(ZGV:FindGuides(searchtext)) do",
        "retail": true
      }
    ],
    "GetQuestsByTitle": [
      {
        "name": "GetQuestsByTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "local quests = ZGV.QuestDB:GetQuestsByTitle(searchtext)",
        "retail": true
      }
    ],
    "AddSearchHistory": [
      {
        "name": "AddSearchHistory",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:AddSearchHistory(searchtext,nresults)",
        "retail": true
      }
    ],
    "GetGuidesForQuest": [
      {
        "name": "GetGuidesForQuest",
        "count": 4,
        "confidence": 0.8,
        "sample": "local status,results = ZGV.QuestDB:GetGuidesForQuest(questID)",
        "retail": true
      }
    ],
    "SetFocusedRow": [
      {
        "name": "SetFocusedRow",
        "count": 7,
        "confidence": 1.0,
        "sample": "GuideMenu:SetFocusedRow()",
        "retail": true
      }
    ],
    "ShowGuideDetails": [
      {
        "name": "ShowGuideDetails",
        "count": 8,
        "confidence": 1.0,
        "sample": "GuideMenu:ShowGuideDetails()",
        "retail": true
      }
    ],
    "AnyGuideValid": [
      {
        "name": "AnyGuideValid",
        "count": 4,
        "confidence": 0.8,
        "sample": "if type(self.group.missing)~=\"boolean\" then self.group.missing=not GuideMenu:AnyGuideValid(self.group) end",
        "retail": true
      }
    ],
    "GetCompletion": [
      {
        "name": "GetCompletion",
        "count": 11,
        "confidence": 1.0,
        "sample": "g:GetCompletion()",
        "retail": true
      }
    ],
    "ShowParent": [
      {
        "name": "ShowParent",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideMenu:ShowParent()",
        "retail": true
      }
    ],
    "OpenGuide": [
      {
        "name": "OpenGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideMenu:OpenGuide(guide)",
        "retail": true
      }
    ],
    "FindSuggestedGuides": [
      {
        "name": "FindSuggestedGuides",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GuideMenu:FindSuggestedGuides()",
        "retail": true
      }
    ],
    "DoCond": [
      {
        "name": "DoCond",
        "count": 6,
        "confidence": 1.0,
        "sample": "local pass,msg = guide:DoCond(\"suggested\")",
        "retail": true
      }
    ],
    "Refresh": [
      {
        "name": "Refresh",
        "count": 166,
        "confidence": 1.0,
        "sample": "function GuideMenu:Refresh()",
        "retail": true
      },
      {
        "name": "DetailsAPI2Frame.Refresh",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsAPI2Frame.Refresh() --doesn't exists?",
        "retail": true
      },
      {
        "name": "Api2Frame.Refresh",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Api2Frame.Refresh()",
        "retail": true
      }
    ],
    "CountRows": [
      {
        "name": "CountRows",
        "count": 12,
        "confidence": 1.0,
        "sample": "local ROW_COUNT = GuideMenu.MainFrame.GuideListScrollFrame:CountRows()",
        "retail": true
      }
    ],
    "IsFavourite": [
      {
        "name": "IsFavourite",
        "count": 3,
        "confidence": 0.6,
        "sample": "if object.IsFavourite and object:IsFavourite() then",
        "retail": true
      }
    ],
    "GetGuideFolderInfo": [
      {
        "name": "GetGuideFolderInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "suggested=ZGV:GetGuideFolderInfo(object)",
        "retail": true
      }
    ],
    "ShowMissingPopup": [
      {
        "name": "ShowMissingPopup",
        "count": 3,
        "confidence": 0.6,
        "sample": "row:SetScript(\"OnClick\",function(this,button) GuideMenu:ShowMissingPopup(row) end)",
        "retail": true
      }
    ],
    "LoadNeededGuides": [
      {
        "name": "LoadNeededGuides",
        "count": 2,
        "confidence": 0.4,
        "sample": "local all_loaded = ZGV:LoadNeededGuides()",
        "retail": true
      }
    ],
    "IsValid": [
      {
        "name": "IsValid",
        "count": 15,
        "confidence": 1.0,
        "sample": "if not ZGV.GuideFuncs:IsValid(guide,nil,\"guidemenu\") then return end",
        "retail": true
      }
    ],
    "TryToActivateGuide": [
      {
        "name": "TryToActivateGuide",
        "count": 3,
        "confidence": 0.6,
        "sample": "if ZGV.Tabs:TryToActivateGuide(guide) then",
        "retail": true
      }
    ],
    "GetTabFromPool": [
      {
        "name": "GetTabFromPool",
        "count": 6,
        "confidence": 1.0,
        "sample": "local tab = ZGV.Tabs:GetTabFromPool()",
        "retail": true
      }
    ],
    "SetAsCurrent": [
      {
        "name": "SetAsCurrent",
        "count": 10,
        "confidence": 1.0,
        "sample": "tab:SetAsCurrent()",
        "retail": true
      }
    ],
    "AssignGuide": [
      {
        "name": "AssignGuide",
        "count": 8,
        "confidence": 1.0,
        "sample": "GuideMenu.UseTab:AssignGuide(guide.title,guide.QuestSearchStepNum or 1)",
        "retail": true
      }
    ],
    "ShowFolderDetails": [
      {
        "name": "ShowFolderDetails",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowFolderDetails(row.group)",
        "retail": true
      }
    ],
    "ShowQuestDetails": [
      {
        "name": "ShowQuestDetails",
        "count": 2,
        "confidence": 0.4,
        "sample": "GuideMenu:ShowQuestDetails(row.quest)",
        "retail": true
      }
    ],
    "FormatLevel": [
      {
        "name": "ZGV.FormatLevel",
        "count": 5,
        "confidence": 1.0,
        "sample": "desc = desc..color..\"Required level: \".. ZGV.FormatLevel(guide.startlevel,\"mono\")..\"|r\\n\"",
        "retail": true
      }
    ],
    "SetModels": [
      {
        "name": "SetModels",
        "count": 3,
        "confidence": 0.6,
        "sample": "right.GuideModel:SetModels(guide.headerdata.model)",
        "retail": true
      }
    ],
    "GetHyperlink": [
      {
        "name": "C_TooltipInfo.GetHyperlink",
        "count": 5,
        "confidence": 1.0,
        "sample": "local data = C_TooltipInfo.GetHyperlink(itemlink)",
        "retail": true
      }
    ],
    "GetQuestLogItem": [
      {
        "name": "GetQuestLogItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "function TS:GetQuestLogItem(type,index,quest)",
        "retail": true
      },
      {
        "name": "C_TooltipInfo.GetQuestLogItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "local data = C_TooltipInfo.GetQuestLogItem(type,index,quest)",
        "retail": true
      }
    ],
    "GetSpellTooltip": [
      {
        "name": "GetSpellTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TS:GetSpellTooltip(spellID)",
        "retail": true
      }
    ],
    "GetSpellByID": [
      {
        "name": "C_TooltipInfo.GetSpellByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local data = C_TooltipInfo.GetSpellByID(spellID)",
        "retail": true
      }
    ],
    "GetUnit": [
      {
        "name": "GetUnit",
        "count": 3,
        "confidence": 0.6,
        "sample": "function TS:GetUnit(token)",
        "retail": true
      },
      {
        "name": "C_TooltipInfo.GetUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "local data = C_TooltipInfo.GetUnit(token)",
        "retail": true
      }
    ],
    "NumLines": [
      {
        "name": "NumLines",
        "count": 10,
        "confidence": 1.0,
        "sample": "if Gratuity:NumLines()==0 then return results end",
        "retail": true
      }
    ],
    "GetLine": [
      {
        "name": "GetLine",
        "count": 41,
        "confidence": 1.0,
        "sample": "local line=Gratuity:GetLine(num)",
        "retail": true
      }
    ],
    "SetQuestLogItem": [
      {
        "name": "SetQuestLogItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "Gratuity:SetQuestLogItem(type,index,quest)",
        "retail": true
      }
    ],
    "SetUnit": [
      {
        "name": "SetUnit",
        "count": 20,
        "confidence": 1.0,
        "sample": "Gratuity:SetUnit(token)",
        "retail": true
      }
    ],
    "FormatTime": [
      {
        "name": "FormatTime",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Announce:FormatTime(seconds)",
        "retail": true
      },
      {
        "name": "Pointer.FormatTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "local time = Pointer.FormatTime(cooltime+cooldur-GetTime())",
        "retail": true
      }
    ],
    "FormatMessage": [
      {
        "name": "FormatMessage",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Announce:FormatMessage()",
        "retail": true
      }
    ],
    "SendChatMessage": [
      {
        "name": "SendChatMessage",
        "count": 17,
        "confidence": 1.0,
        "sample": "if ZGV.db.profile.spam_levelup_emote then SendChatMessage(message, \"EMOTE\") end",
        "retail": true
      }
    ],
    "GetSpellCooldown": [
      {
        "name": "GetSpellCooldown",
        "count": 12,
        "confidence": 1.0,
        "sample": "local startTime, duration, isEnabled, modRate = GetSpellCooldown(spellID)",
        "retail": true
      },
      {
        "name": "C_Spell.GetSpellCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local cooldownInfo = C_Spell.GetSpellCooldown(spellIdToCheckCooldown)",
        "retail": true
      }
    ],
    "SetEntry": [
      {
        "name": "SetEntry",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV_Notification_Entry_Template_Mixin:SetEntry(entry)",
        "retail": true
      }
    ],
    "GetTimeFromSeconds": [
      {
        "name": "ZGV.F.GetTimeFromSeconds",
        "count": 22,
        "confidence": 1.0,
        "sample": "self.time:SetText(\"(\"..ZGV.F.GetTimeFromSeconds(time()-entry.data.added,\"min\")..\" ago)\")",
        "retail": true
      }
    ],
    "UpdateHeight": [
      {
        "name": "UpdateHeight",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateHeight()",
        "retail": true
      }
    ],
    "StartFadeTimer": [
      {
        "name": "StartFadeTimer",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV_Notification_Entry_Template_Mixin:StartFadeTimer()",
        "retail": true
      }
    ],
    "CancelFadeTimer": [
      {
        "name": "CancelFadeTimer",
        "count": 8,
        "confidence": 1.0,
        "sample": "function ZGV_Notification_Entry_Template_Mixin:CancelFadeTimer()",
        "retail": true
      }
    ],
    "UIFrameFadeAbort": [
      {
        "name": "ZGV.UIFrameFade.UIFrameFadeAbort",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.UIFrameFade.UIFrameFadeAbort(self)",
        "retail": true
      }
    ],
    "OnEnter": [
      {
        "name": "OnEnter",
        "count": 28,
        "confidence": 1.0,
        "sample": "function ZGV_Notification_Entry_Template_Mixin:OnEnter()",
        "retail": true
      }
    ],
    "OnLeave": [
      {
        "name": "OnLeave",
        "count": 18,
        "confidence": 1.0,
        "sample": "function ZGV_Notification_Entry_Template_Mixin:OnLeave()",
        "retail": true
      }
    ],
    "OnClick": [
      {
        "name": "OnClick",
        "count": 16,
        "confidence": 1.0,
        "sample": "function ZGV_Notification_Entry_Close_Template_Mixin:OnClick()",
        "retail": true
      }
    ],
    "UIDropDownForkButton_OnEnter": [
      {
        "name": "UIDropDownForkButton_OnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownForkButton_OnEnter(self:GetParent())",
        "retail": true
      }
    ],
    "UIDropDownForkButton_OnLeave": [
      {
        "name": "UIDropDownForkButton_OnLeave",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownForkButton_OnLeave(self:GetParent())",
        "retail": true
      }
    ],
    "CreateDungeonPopup": [
      {
        "name": "CreateDungeonPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "multidungeon =\t{iconkey=\"DUNGEON\", priority=18, click=function(entry) ZGV.GuideFuncs:CreateDungeonPopup(entry.data.object,entry.data.nctext) end},",
        "retail": true
      }
    ],
    "OpenAllBags": [
      {
        "name": "OpenAllBags",
        "count": 1,
        "confidence": 0.2,
        "sample": "gear =\t\t{iconkey=\"GEAR\", priority=41, click=function() ZGV.ItemScore.Upgrades.DimItems=true OpenAllBags() CloseDropDownForks() ZGV.NotificationCenter:RemoveEntriesByType(\"gear\") end},",
        "retail": true
      }
    ],
    "ActivateAsMaster": [
      {
        "name": "ActivateAsMaster",
        "count": 4,
        "confidence": 0.8,
        "sample": "sharestart =\t{iconkey=\"SHARE\", priority=62, click=function() ZGV.Sync:ActivateAsMaster() end},",
        "retail": true
      }
    ],
    "ActivateAsSlave": [
      {
        "name": "ActivateAsSlave",
        "count": 4,
        "confidence": 0.8,
        "sample": "shareaccept =\t{iconkey=\"SHARE\", priority=63, click=function() ZGV.Sync:ActivateAsSlave() end},",
        "retail": true
      }
    ],
    "CreateFramePool": [
      {
        "name": "CreateFramePool",
        "count": 16,
        "confidence": 1.0,
        "sample": "NC.ButtonPool = CreateFramePool(\"BUTTON\",ZGV.Frame,\"ZGV_Notification_Entry_Template\",poolresetter,nil,poolinit)",
        "retail": true
      }
    ],
    "ClearNotifications": [
      {
        "name": "ClearNotifications",
        "count": 2,
        "confidence": 0.4,
        "sample": "NC.EntrySettings.clear:SetScript(\"OnClick\",function() NC:ClearNotifications() end)",
        "retail": true
      }
    ],
    "LoadNotifications": [
      {
        "name": "LoadNotifications",
        "count": 2,
        "confidence": 0.4,
        "sample": "NC:LoadNotifications()",
        "retail": true
      }
    ],
    "SetLoading": [
      {
        "name": "SetLoading",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewerMapIcon:SetLoading(false)",
        "retail": true
      }
    ],
    "ShowAll": [
      {
        "name": "ShowAll",
        "count": 6,
        "confidence": 1.0,
        "sample": "NC:ShowAll()",
        "retail": true
      }
    ],
    "CheckDynamicNotifications": [
      {
        "name": "CheckDynamicNotifications",
        "count": 2,
        "confidence": 0.4,
        "sample": "NC:CheckDynamicNotifications()",
        "retail": true
      }
    ],
    "ShowSpecial": [
      {
        "name": "ShowSpecial",
        "count": 12,
        "confidence": 1.0,
        "sample": "NC:ShowSpecial(entry)",
        "retail": true
      }
    ],
    "ShowOne": [
      {
        "name": "ShowOne",
        "count": 3,
        "confidence": 0.6,
        "sample": "function NC:ShowOne(entry)",
        "retail": true
      }
    ],
    "Acquire": [
      {
        "name": "Acquire",
        "count": 22,
        "confidence": 1.0,
        "sample": "local frame = NC.ButtonPool:Acquire()",
        "retail": true
      }
    ],
    "ShowSub": [
      {
        "name": "ShowSub",
        "count": 9,
        "confidence": 1.0,
        "sample": "function NC:ShowSub(force)",
        "retail": true
      }
    ],
    "ToggleDropDownFork": [
      {
        "name": "ToggleDropDownFork",
        "count": 4,
        "confidence": 0.8,
        "sample": "ToggleDropDownFork(2, nil, ZGV.Frame.Controls.MenuHostNotifications, nil, nil, nil, NC.EntrySettings.menuList, NC.EntrySettings);",
        "retail": true
      }
    ],
    "SaveNotifications": [
      {
        "name": "SaveNotifications",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NC:SaveNotifications()",
        "retail": true
      }
    ],
    "HandleQueue": [
      {
        "name": "NC.HandleQueue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NC.HandleQueue()",
        "retail": true
      }
    ],
    "QuestResetTrigger": [
      {
        "name": "QuestResetTrigger",
        "count": 3,
        "confidence": 0.6,
        "sample": "NC:QuestResetTrigger()",
        "retail": true
      }
    ],
    "OrientationTrigger": [
      {
        "name": "OrientationTrigger",
        "count": 2,
        "confidence": 0.4,
        "sample": "NC:OrientationTrigger()",
        "retail": true
      }
    ],
    "EventsTrigger": [
      {
        "name": "EventsTrigger",
        "count": 3,
        "confidence": 0.6,
        "sample": "NC:EventsTrigger()",
        "retail": true
      }
    ],
    "GetNumDayEvents": [
      {
        "name": "C_Calendar.GetNumDayEvents",
        "count": 4,
        "confidence": 0.8,
        "sample": "local numEvents = C_Calendar.GetNumDayEvents(0, day);",
        "retail": true
      }
    ],
    "GetDayEvent": [
      {
        "name": "C_Calendar.GetDayEvent",
        "count": 4,
        "confidence": 0.8,
        "sample": "local eventdata = C_Calendar.GetDayEvent(0,day,event)",
        "retail": true
      }
    ],
    "GetTimeUntil": [
      {
        "name": "ZGV.F.GetTimeUntil",
        "count": 5,
        "confidence": 1.0,
        "sample": "local remains,remainsec = ZGV.F.GetTimeUntil(eventdata.endTime)",
        "retail": true
      }
    ],
    "GetHolidayInfo": [
      {
        "name": "C_Calendar.GetHolidayInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local details = C_Calendar.GetHolidayInfo(0,day,event)",
        "retail": true
      }
    ],
    "GetSecondsUntilWeeklyReset": [
      {
        "name": "C_DateAndTime.GetSecondsUntilWeeklyReset",
        "count": 5,
        "confidence": 1.0,
        "sample": "local weekly = C_DateAndTime.GetSecondsUntilWeeklyReset()",
        "retail": true
      }
    ],
    "GetSecondsUntilDailyReset": [
      {
        "name": "C_DateAndTime.GetSecondsUntilDailyReset",
        "count": 5,
        "confidence": 1.0,
        "sample": "local daily = C_DateAndTime.GetSecondsUntilDailyReset()",
        "retail": true
      }
    ],
    "IsContinentKnown": [
      {
        "name": "IsContinentKnown",
        "count": 5,
        "confidence": 1.0,
        "sample": "if ZGV.db.profile.nc_orientation and not ZGV.db.global.bannedtoasts[\"orientation\"] and not LibTaxi:IsContinentKnown() then",
        "retail": true
      }
    ],
    "RegisterQuestChains": [
      {
        "name": "RegisterQuestChains",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RegisterQuestChains(text)",
        "retail": true
      }
    ],
    "ParseQuestChains_yielding": [
      {
        "name": "ParseQuestChains_yielding",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ParseQuestChains_yielding(text,Chains)",
        "retail": true
      }
    ],
    "CreateReverseQuestChains_yielding": [
      {
        "name": "CreateReverseQuestChains_yielding",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:CreateReverseQuestChains_yielding()",
        "retail": true
      }
    ],
    "CleanupChains": [
      {
        "name": "CleanupChains",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:CleanupChains()",
        "retail": true
      }
    ],
    "ShowOverlay": [
      {
        "name": "ShowOverlay",
        "count": 2,
        "confidence": 0.4,
        "sample": "Foglight:ShowOverlay()",
        "retail": true
      }
    ],
    "IsDataProviderRegistered": [
      {
        "name": "ZGV.IsDataProviderRegistered",
        "count": 4,
        "confidence": 0.8,
        "sample": "if ZGV.IsDataProviderRegistered(WorldMapFrame,Foglight.DataProvider.name) then return end",
        "retail": true
      }
    ],
    "AddDataProvider": [
      {
        "name": "AddDataProvider",
        "count": 8,
        "confidence": 1.0,
        "sample": "WorldMapFrame:AddDataProvider(ZGV.Foglight.DataProvider)",
        "retail": true
      }
    ],
    "HideOverlay": [
      {
        "name": "HideOverlay",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Foglight:HideOverlay()",
        "retail": true
      }
    ],
    "RemoveDataProvider": [
      {
        "name": "RemoveDataProvider",
        "count": 2,
        "confidence": 0.4,
        "sample": "WorldMapFrame:RemoveDataProvider(ZGV.Foglight.DataProvider)",
        "retail": true
      }
    ],
    "GetMapID": [
      {
        "name": "GetMapID",
        "count": 24,
        "confidence": 1.0,
        "sample": "local map = WorldMapFrame:GetMapID()",
        "retail": true
      }
    ],
    "OpenWorldMap": [
      {
        "name": "OpenWorldMap",
        "count": 7,
        "confidence": 1.0,
        "sample": "OpenWorldMap(map)",
        "retail": true
      }
    ],
    "CreateFromMixins": [
      {
        "name": "CreateFromMixins",
        "count": 13,
        "confidence": 1.0,
        "sample": "Foglight.DataProvider = CreateFromMixins(MapCanvasDataProviderMixin);",
        "retail": true
      }
    ],
    "OnAdded": [
      {
        "name": "OnAdded",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Foglight.DataProvider:OnAdded(mapCanvas)",
        "retail": true
      },
      {
        "name": "MapCanvasDataProviderMixin.OnAdded",
        "count": 2,
        "confidence": 0.4,
        "sample": "MapCanvasDataProviderMixin.OnAdded(self, mapCanvas);",
        "retail": true
      }
    ],
    "GetMap": [
      {
        "name": "GetMap",
        "count": 23,
        "confidence": 1.0,
        "sample": "local pin = self:GetMap():AcquirePin(\"ZygorFogLightPinTemplate\");",
        "retail": true
      }
    ],
    "AcquirePin": [
      {
        "name": "AcquirePin",
        "count": 2,
        "confidence": 0.4,
        "sample": "local pin = self:GetMap():AcquirePin(\"ZygorFogLightPinTemplate\");",
        "retail": true
      }
    ],
    "OnRemoved": [
      {
        "name": "OnRemoved",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Foglight.DataProvider:OnRemoved(mapCanvas)",
        "retail": true
      },
      {
        "name": "MapCanvasDataProviderMixin.OnRemoved",
        "count": 2,
        "confidence": 0.4,
        "sample": "MapCanvasDataProviderMixin.OnRemoved(self, mapCanvas);",
        "retail": true
      }
    ],
    "RemoveAllPinsByTemplate": [
      {
        "name": "RemoveAllPinsByTemplate",
        "count": 2,
        "confidence": 0.4,
        "sample": "--self:GetMap():RemoveAllPinsByTemplate(\"ZygorFogLightPinTemplate\"); -- for some reason this errors out, and if disabled overlays hide fine...",
        "retail": true
      }
    ],
    "OnShow": [
      {
        "name": "OnShow",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Foglight.DataProvider:OnShow()",
        "retail": true
      }
    ],
    "OnHide": [
      {
        "name": "OnHide",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Foglight.DataProvider:OnHide()",
        "retail": true
      }
    ],
    "RemoveAllData": [
      {
        "name": "RemoveAllData",
        "count": 11,
        "confidence": 1.0,
        "sample": "self.pin:RemoveAllData()",
        "retail": true
      }
    ],
    "RefreshAllData": [
      {
        "name": "RefreshAllData",
        "count": 23,
        "confidence": 1.0,
        "sample": "self:RefreshAllData();",
        "retail": true
      }
    ],
    "RefreshOverlays": [
      {
        "name": "RefreshOverlays",
        "count": 4,
        "confidence": 0.8,
        "sample": "self.pin:RefreshOverlays(fullUpdate);",
        "retail": true
      }
    ],
    "OnGlobalAlphaChanged": [
      {
        "name": "OnGlobalAlphaChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Foglight.DataProvider:OnGlobalAlphaChanged()",
        "retail": true
      }
    ],
    "RefreshAlpha": [
      {
        "name": "RefreshAlpha",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.pin:RefreshAlpha();",
        "retail": true
      }
    ],
    "OnLoad": [
      {
        "name": "OnLoad",
        "count": 11,
        "confidence": 1.0,
        "sample": "function ZygorFogLightPinMixin:OnLoad()",
        "retail": true
      }
    ],
    "SetIgnoreGlobalPinScale": [
      {
        "name": "SetIgnoreGlobalPinScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetIgnoreGlobalPinScale(true);",
        "retail": true
      }
    ],
    "UseFrameLevelType": [
      {
        "name": "UseFrameLevelType",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UseFrameLevelType(\"PIN_FRAME_LEVEL_MAP_EXPLORATION\");",
        "retail": true
      }
    ],
    "CreateTexturePool": [
      {
        "name": "CreateTexturePool",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.overlayTexturePool = CreateTexturePool(self, \"ARTWORK\", 0);",
        "retail": true
      }
    ],
    "ReleaseAll": [
      {
        "name": "ReleaseAll",
        "count": 22,
        "confidence": 1.0,
        "sample": "self.overlayTexturePool:ReleaseAll();",
        "retail": true
      }
    ],
    "Reset": [
      {
        "name": "Reset",
        "count": 71,
        "confidence": 1.0,
        "sample": "self.textureLoadGroup:Reset();",
        "retail": true
      },
      {
        "name": "Details222.PetContainer.Reset",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.PetContainer.Reset()",
        "retail": true
      },
      {
        "name": "C_ChallengeMode.Reset",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.Reset() end",
        "retail": true
      }
    ],
    "GetGlobalAlpha": [
      {
        "name": "GetGlobalAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetAlpha(self:GetMap():GetGlobalAlpha());",
        "retail": true
      }
    ],
    "OnUpdate": [
      {
        "name": "OnUpdate",
        "count": 17,
        "confidence": 1.0,
        "sample": "function ZygorFogLightPinMixin:OnUpdate(elapsed)",
        "retail": true
      },
      {
        "name": "Tabs.OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Tabs.OnUpdate(frame, elapsed)",
        "retail": true
      },
      {
        "name": "Pointer.Provider.OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.Provider.OnUpdate()",
        "retail": true
      },
      {
        "name": "Pointer.OverlayProvider.OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.OverlayProvider.OnUpdate(elapsed)",
        "retail": true
      },
      {
        "name": "ChatThrottleLib.OnUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ChatThrottleLib.OnUpdate(this,delay)",
        "retail": true
      }
    ],
    "AreDetailLayersLoaded": [
      {
        "name": "AreDetailLayersLoaded",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.isWaitingForLoad and self:GetMap():AreDetailLayersLoaded() and self.textureLoadGroup:IsFullyLoaded() then",
        "retail": true
      }
    ],
    "IsFullyLoaded": [
      {
        "name": "IsFullyLoaded",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.isWaitingForLoad and self:GetMap():AreDetailLayersLoaded() and self.textureLoadGroup:IsFullyLoaded() then",
        "retail": true
      }
    ],
    "GetExploredMapTextures": [
      {
        "name": "C_MapExplorationInfo.GetExploredMapTextures",
        "count": 2,
        "confidence": 0.4,
        "sample": "local exploredMapTextures = C_MapExplorationInfo.GetExploredMapTextures(mapID);",
        "retail": true
      }
    ],
    "GetCanvasContainer": [
      {
        "name": "GetCanvasContainer",
        "count": 6,
        "confidence": 1.0,
        "sample": "self.layerIndex = self:GetMap():GetCanvasContainer():GetCurrentLayerIndex();",
        "retail": true
      }
    ],
    "GetCurrentLayerIndex": [
      {
        "name": "GetCurrentLayerIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.layerIndex = self:GetMap():GetCanvasContainer():GetCurrentLayerIndex();",
        "retail": true
      }
    ],
    "GetMapArtLayers": [
      {
        "name": "C_Map.GetMapArtLayers",
        "count": 2,
        "confidence": 0.4,
        "sample": "local layers = C_Map.GetMapArtLayers(mapID);",
        "retail": true
      }
    ],
    "InPhase": [
      {
        "name": "ZGV.InPhase",
        "count": 1861,
        "confidence": 1.0,
        "sample": "if not exploredTextureInfo.phase or ZGV.InPhase(exploredTextureInfo.phase) then",
        "retail": true
      },
      {
        "name": "InPhase",
        "count": 227,
        "confidence": 1.0,
        "sample": "4604=sH|m90|x54.90|y37.70|cZGV.InPhase(\"Old Undercity\")--, Undercity (Abigail Sawyer)",
        "retail": true
      }
    ],
    "CheckMouseButtonPassthrough": [
      {
        "name": "CheckMouseButtonPassthrough",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZygorFogLightPinMixin:CheckMouseButtonPassthrough()",
        "retail": true
      }
    ],
    "OnCanvasScaleChanged": [
      {
        "name": "OnCanvasScaleChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZygorFogLightPinMixin:OnCanvasScaleChanged()",
        "retail": true
      }
    ],
    "OnCanvasSizeChanged": [
      {
        "name": "OnCanvasSizeChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZygorFogLightPinMixin:OnCanvasSizeChanged()",
        "retail": true
      }
    ],
    "DenormalizeHorizontalSize": [
      {
        "name": "DenormalizeHorizontalSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetSize(self:GetMap():DenormalizeHorizontalSize(1.0), self:GetMap():DenormalizeVerticalSize(1.0));",
        "retail": true
      }
    ],
    "DenormalizeVerticalSize": [
      {
        "name": "DenormalizeVerticalSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetSize(self:GetMap():DenormalizeHorizontalSize(1.0), self:GetMap():DenormalizeVerticalSize(1.0));",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrameMaster_OnUpdate": [
      {
        "name": "ZygorGuidesViewerFrameMaster_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrameMaster_OnUpdate(self,elapsed)",
        "retail": true
      }
    ],
    "StartupStep": [
      {
        "name": "StartupStep",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV:StartupStep()",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrameMaster_OnLoad": [
      {
        "name": "ZygorGuidesViewerFrameMaster_OnLoad",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrameMaster_OnLoad(self)",
        "retail": true
      }
    ],
    "ReanchorTabs": [
      {
        "name": "ReanchorTabs",
        "count": 11,
        "confidence": 1.0,
        "sample": "Tabs.ResizeTimer = ZGV:ScheduleRepeatingTimer(function() Tabs:ReanchorTabs() end, 0.01)",
        "retail": true
      }
    ],
    "GetCursorPosition": [
      {
        "name": "GetCursorPosition",
        "count": 48,
        "confidence": 1.0,
        "sample": "local x, y = GetCursorPosition();",
        "retail": true
      }
    ],
    "GetEffectiveScale": [
      {
        "name": "GetEffectiveScale",
        "count": 39,
        "confidence": 1.0,
        "sample": "local scale = UIParent:GetEffectiveScale()",
        "retail": true
      }
    ],
    "AddButtonOnClick": [
      {
        "name": "Tabs.AddButtonOnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Tabs.AddButtonOnClick(self,button)",
        "retail": true
      }
    ],
    "AddButtonOnEnter": [
      {
        "name": "Tabs.AddButtonOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Tabs.AddButtonOnEnter(self,button)",
        "retail": true
      }
    ],
    "Initialize": [
      {
        "name": "Initialize",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Tabs:Initialize()",
        "retail": true
      }
    ],
    "AddHandler": [
      {
        "name": "AddHandler",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZGV.UpdateCentral:AddHandler(Tabs.OnUpdate)",
        "retail": true
      }
    ],
    "GetSpecialTabFromPool": [
      {
        "name": "GetSpecialTabFromPool",
        "count": 6,
        "confidence": 1.0,
        "sample": "tab = Tabs:GetSpecialTabFromPool(special)",
        "retail": true
      }
    ],
    "CreateTab": [
      {
        "name": "CreateTab",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Tabs:CreateTab()",
        "retail": true
      }
    ],
    "HideInteraction": [
      {
        "name": "HideInteraction",
        "count": 8,
        "confidence": 1.0,
        "sample": "tab:HideInteraction()",
        "retail": true
      }
    ],
    "ToggleRemainingMenu": [
      {
        "name": "ToggleRemainingMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Tabs:ToggleRemainingMenu()",
        "retail": true
      }
    ],
    "UpdateCurrentTab": [
      {
        "name": "UpdateCurrentTab",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Tabs:UpdateCurrentTab(mode,step)",
        "retail": true
      }
    ],
    "CheckForStepCompletion": [
      {
        "name": "CheckForStepCompletion",
        "count": 3,
        "confidence": 0.6,
        "sample": "Tabs:CheckForStepCompletion()",
        "retail": true
      }
    ],
    "DoesTabExist": [
      {
        "name": "DoesTabExist",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Tabs:DoesTabExist(title)",
        "retail": true
      }
    ],
    "DoesSpecialTabExist": [
      {
        "name": "DoesSpecialTabExist",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Tabs:DoesSpecialTabExist(mode)",
        "retail": true
      }
    ],
    "ShowInteraction": [
      {
        "name": "ShowInteraction",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Tabs:ShowInteraction(tooltip)",
        "retail": true
      }
    ],
    "HandleClick": [
      {
        "name": "HandleClick",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnMouseUp\",function() tab:HandleClick() end)",
        "retail": true
      }
    ],
    "OnDragStart": [
      {
        "name": "OnDragStart",
        "count": 12,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnDragStart\",function() tab:OnDragStart() end)",
        "retail": true
      }
    ],
    "OnDragStop": [
      {
        "name": "OnDragStop",
        "count": 17,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnDragStop\",function() tab:OnDragStop() end)",
        "retail": true
      }
    ],
    "SetDegrees": [
      {
        "name": "SetDegrees",
        "count": 14,
        "confidence": 1.0,
        "sample": ":SetDegrees(-360)",
        "retail": true
      }
    ],
    "RemoveTab": [
      {
        "name": "RemoveTab",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetScript(\"OnClick\",function(self) tab:RemoveTab() end)",
        "retail": true
      }
    ],
    "SetBusy": [
      {
        "name": "SetBusy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Tabs:SetBusy(state)",
        "retail": true
      }
    ],
    "SetSpecialState": [
      {
        "name": "SetSpecialState",
        "count": 8,
        "confidence": 1.0,
        "sample": "if ZGV.Frame.specialstate ~= \"normal\" then ZGV.Frame:SetSpecialState(\"normal\") end",
        "retail": true
      }
    ],
    "Deactivate": [
      {
        "name": "Deactivate",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZGV:ScheduleTimer(function() ZGV.Sync:Deactivate() end,0)",
        "retail": true
      }
    ],
    "Abort": [
      {
        "name": "Abort",
        "count": 19,
        "confidence": 1.0,
        "sample": "LibRover:Abort()",
        "retail": true
      }
    ],
    "OptionalTab": [
      {
        "name": "OptionalTab",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Tabs:OptionalTab(params)",
        "retail": true
      }
    ],
    "FocusStep": [
      {
        "name": "FocusStep",
        "count": 15,
        "confidence": 1.0,
        "sample": "ZGV:FocusStep(step)",
        "retail": true
      }
    ],
    "IsGuideTabbed": [
      {
        "name": "IsGuideTabbed",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Tabs:IsGuideTabbed(guide)",
        "retail": true
      }
    ],
    "RegisterWidget": [
      {
        "name": "RegisterWidget",
        "count": 45,
        "confidence": 1.0,
        "sample": "function Widgets:RegisterWidget(object)",
        "retail": true
      }
    ],
    "DeepCopy": [
      {
        "name": "ZGV.F.DeepCopy",
        "count": 6,
        "confidence": 1.0,
        "sample": "Widgets.RegisteredFloating[object.ident]=ZGV.F.DeepCopy(object)",
        "retail": true
      }
    ],
    "SystemInitialise": [
      {
        "name": "SystemInitialise",
        "count": 2,
        "confidence": 0.4,
        "sample": "object:SystemInitialise()",
        "retail": true
      }
    ],
    "SystemApplySkin": [
      {
        "name": "SystemApplySkin",
        "count": 4,
        "confidence": 0.8,
        "sample": "object:SystemApplySkin()",
        "retail": true
      }
    ],
    "SetInteractive": [
      {
        "name": "SetInteractive",
        "count": 13,
        "confidence": 1.0,
        "sample": "object:SetInteractive(false)",
        "retail": true
      }
    ],
    "Resize": [
      {
        "name": "Resize",
        "count": 8,
        "confidence": 1.0,
        "sample": "object:Resize()",
        "retail": true
      }
    ],
    "Place": [
      {
        "name": "Place",
        "count": 3,
        "confidence": 0.6,
        "sample": "object:Place()",
        "retail": true
      }
    ],
    "UpdateDriver": [
      {
        "name": "Widgets.UpdateDriver",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets.UpdateDriver(elapsed)",
        "retail": true
      }
    ],
    "Throttle": [
      {
        "name": "Throttle",
        "count": 3,
        "confidence": 0.6,
        "sample": "if object.active and object.OnTick and not object:Throttle(elapsed) then object:OnTick() end",
        "retail": true
      }
    ],
    "OnTick": [
      {
        "name": "OnTick",
        "count": 16,
        "confidence": 1.0,
        "sample": "if object.active and object.OnTick and not object:Throttle(elapsed) then object:OnTick() end",
        "retail": true
      }
    ],
    "Fits": [
      {
        "name": "Fits",
        "count": 5,
        "confidence": 1.0,
        "sample": "if w:Fits(row,column) then",
        "retail": true
      }
    ],
    "WarnOff": [
      {
        "name": "WarnOff",
        "count": 7,
        "confidence": 1.0,
        "sample": "w:WarnOff()",
        "retail": true
      }
    ],
    "WarnOn": [
      {
        "name": "WarnOn",
        "count": 3,
        "confidence": 0.6,
        "sample": "w:WarnOn()",
        "retail": true
      }
    ],
    "MouseIsOver": [
      {
        "name": "MouseIsOver",
        "count": 12,
        "confidence": 1.0,
        "sample": "elseif MouseIsOver(Widgets.Parent,-1,1,1,-1) then -- skip 1px margin, since it may not be used by widgets due to grid being math.floored",
        "retail": true
      }
    ],
    "ToggleFloaters": [
      {
        "name": "ToggleFloaters",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ToggleFloaters(event,state)",
        "retail": true
      }
    ],
    "LoadFloating": [
      {
        "name": "LoadFloating",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not Widgets.FloatingLoaded then Widgets:LoadFloating() end",
        "retail": true
      }
    ],
    "SetFrameSizes": [
      {
        "name": "ZGV.F.SetFrameSizes",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.F.SetFrameSizes(widget.frame,data)",
        "retail": true
      }
    ],
    "EventDriver": [
      {
        "name": "EventDriver",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:EventDriver(event,...)",
        "retail": true
      }
    ],
    "ExitAddMode": [
      {
        "name": "ExitAddMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ExitAddMode()",
        "retail": true
      }
    ],
    "ShowConfig": [
      {
        "name": "ShowConfig",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Widgets:ShowConfig()",
        "retail": true
      }
    ],
    "Assign": [
      {
        "name": "Assign",
        "count": 8,
        "confidence": 1.0,
        "sample": "widgetframe:Assign(object)",
        "retail": true
      }
    ],
    "ShowDescription": [
      {
        "name": "ShowDescription",
        "count": 2,
        "confidence": 0.4,
        "sample": "widgetframe:ShowDescription()",
        "retail": true
      }
    ],
    "SetDimmed": [
      {
        "name": "SetDimmed",
        "count": 2,
        "confidence": 0.4,
        "sample": "widgetframe:SetDimmed(object.active)",
        "retail": true
      }
    ],
    "SetPinned": [
      {
        "name": "SetPinned",
        "count": 3,
        "confidence": 0.6,
        "sample": "widgetframe:SetPinned(Widgets.SavedHome[object.ident])",
        "retail": true
      }
    ],
    "EnableConfig": [
      {
        "name": "EnableConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Widgets:EnableConfig()",
        "retail": true
      }
    ],
    "ToggleConfigMenu": [
      {
        "name": "ToggleConfigMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ToggleConfigMenu()",
        "retail": true
      }
    ],
    "ToggleConfig": [
      {
        "name": "ToggleConfig",
        "count": 3,
        "confidence": 0.6,
        "sample": "func=function() Widgets:ToggleConfig() end,",
        "retail": true
      }
    ],
    "ClearWidgets": [
      {
        "name": "ClearWidgets",
        "count": 5,
        "confidence": 1.0,
        "sample": "func=function() Widgets:ClearWidgets() end,",
        "retail": true
      }
    ],
    "ConfigButtonTooltip": [
      {
        "name": "ConfigButtonTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ConfigButtonTooltip()",
        "retail": true
      }
    ],
    "ClearButtonTooltip": [
      {
        "name": "ClearButtonTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ClearButtonTooltip()",
        "retail": true
      }
    ],
    "ExitAddButtonTooltip": [
      {
        "name": "ExitAddButtonTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Widgets:ExitAddButtonTooltip()",
        "retail": true
      }
    ],
    "RecordAddWidget": [
      {
        "name": "RecordAddWidget",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Widgets:RecordAddWidget()",
        "retail": true
      }
    ],
    "AddWidget": [
      {
        "name": "AddWidget",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Widgets:AddWidget(object)",
        "retail": true
      }
    ],
    "Mixin": [
      {
        "name": "Mixin",
        "count": 211,
        "confidence": 1.0,
        "sample": "Mixin(self,ZGV_Widget_Object_Mixin)",
        "retail": true
      }
    ],
    "HidePopup": [
      {
        "name": "HidePopup",
        "count": 6,
        "confidence": 1.0,
        "sample": "object:HidePopup()",
        "retail": true
      }
    ],
    "OnResize": [
      {
        "name": "OnResize",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self.OnResize then self:OnResize() end",
        "retail": true
      }
    ],
    "OnResizeStart": [
      {
        "name": "OnResizeStart",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnDragStart\",function() self:OnResizeStart() end)",
        "retail": true
      }
    ],
    "OnResizeStop": [
      {
        "name": "OnResizeStop",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetScript(\"OnDragStop\",function() self:OnResizeStop() end)",
        "retail": true
      }
    ],
    "TogglePinned": [
      {
        "name": "TogglePinned",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetScript(\"OnClick\", function() self:TogglePinned() end)",
        "retail": true
      }
    ],
    "TogglePopup": [
      {
        "name": "TogglePopup",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetScript(\"OnClick\",function() self:TogglePopup() end)",
        "retail": true
      }
    ],
    "SetResizeBounds": [
      {
        "name": "SetResizeBounds",
        "count": 11,
        "confidence": 1.0,
        "sample": "self.frame:SetResizeBounds(limits.minwidth* Widgets.TileSize - padding,limits.minheight* Widgets.TileSize - padding,limits.maxwidth* Widgets.TileSize - padding,limits.maxheight* Widgets.TileSize - padding)",
        "retail": true
      }
    ],
    "SetMaxResize": [
      {
        "name": "SetMaxResize",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.frame:SetMaxResize(limits.maxwidth* Widgets.TileSize - padding,limits.maxheight* Widgets.TileSize - padding)",
        "retail": true
      }
    ],
    "InitialisePopup": [
      {
        "name": "InitialisePopup",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:InitialisePopup()",
        "retail": true
      }
    ],
    "OnPopup": [
      {
        "name": "OnPopup",
        "count": 7,
        "confidence": 1.0,
        "sample": "if self.OnPopup then self:OnPopup() end",
        "retail": true
      }
    ],
    "SaveFrameSizes": [
      {
        "name": "ZGV.F.SaveFrameSizes",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.F.SaveFrameSizes(self.frame,self.ident,Widgets.SavedHome)",
        "retail": true
      }
    ],
    "GetPointByName": [
      {
        "name": "GetPointByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local point, relativeTo, relativePoint, xOfs, yOfs  = prev.frame:GetPointByName(\"TOPLEFT\")",
        "retail": true
      }
    ],
    "ShowSizes": [
      {
        "name": "ShowSizes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_Widget_Unused_Mixin:ShowSizes()",
        "retail": true
      }
    ],
    "Lretrydots": [
      {
        "name": "Lretrydots",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function Lretrydots(goal) return dots(goal.Lretries)..(ZGV.db.profile.debug and goal.Lreasons or \"\") end",
        "retail": true
      }
    ],
    "GetQuestGoalData": [
      {
        "name": "Goal.GetQuestGoalData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal.GetQuestGoalData(questid,objnum,count)",
        "retail": true
      }
    ],
    "GetScenarioGoalData": [
      {
        "name": "GetScenarioGoalData",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function GetScenarioGoalData(scenariogoalid,count,stage)",
        "retail": true
      }
    ],
    "GetScenarioBonusData": [
      {
        "name": "GetScenarioBonusData",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetScenarioBonusData(scenariogoalid,count,stage)",
        "retail": true
      }
    ],
    "GetBonusSteps": [
      {
        "name": "C_Scenario.GetBonusSteps",
        "count": 1,
        "confidence": 0.2,
        "sample": "local tblBonusSteps = C_Scenario.GetBonusSteps();",
        "retail": true
      }
    ],
    "GetCriteriaInfoByStep": [
      {
        "name": "C_ScenarioInfo.GetCriteriaInfoByStep",
        "count": 1,
        "confidence": 0.2,
        "sample": "local criteriaInfo = C_ScenarioInfo.GetCriteriaInfoByStep(bonusStepIndex, criteriaIndex);",
        "retail": true
      }
    ],
    "GetAchievementCriteriaInfo": [
      {
        "name": "GetAchievementCriteriaInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "--local desc, ctype, completed, quantity, requiredQuantity  = GetAchievementCriteriaInfo(achieveid, criteria)",
        "retail": true
      }
    ],
    "GetAchievementGoalData": [
      {
        "name": "GetAchievementGoalData",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetAchievementGoalData(achieveid,criteria)",
        "retail": true
      }
    ],
    "GetAchievementNumCriteria": [
      {
        "name": "GetAchievementNumCriteria",
        "count": 4,
        "confidence": 0.8,
        "sample": "local numCriteria = GetAchievementNumCriteria(achieveid) --safety check.",
        "retail": true
      }
    ],
    "COLOR_COUNT": [
      {
        "name": "COLOR_COUNT",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function COLOR_COUNT(s) return \"|cffffffcc\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_ITEM": [
      {
        "name": "COLOR_ITEM",
        "count": 39,
        "confidence": 1.0,
        "sample": "local function COLOR_ITEM(s) return \"|cffaaeeff\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_QUEST": [
      {
        "name": "COLOR_QUEST",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function COLOR_QUEST(s) return \"|cffeebbff\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_NPC": [
      {
        "name": "COLOR_NPC",
        "count": 13,
        "confidence": 1.0,
        "sample": "local function COLOR_NPC(s) return \"|cffaaffaa\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_MONSTER": [
      {
        "name": "COLOR_MONSTER",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function COLOR_MONSTER(s) return \"|cffffaaaa\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_GOAL": [
      {
        "name": "COLOR_GOAL",
        "count": 21,
        "confidence": 1.0,
        "sample": "local function COLOR_GOAL(s) return \"|cffffcccc\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "COLOR_BOLD": [
      {
        "name": "COLOR_BOLD",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function COLOR_BOLD(s) return \"|cffffee55\"..tostring(s)..\"|r\" end",
        "retail": true
      }
    ],
    "GenericText": [
      {
        "name": "GenericText",
        "count": 17,
        "confidence": 1.0,
        "sample": "local function GenericText(brief,goaltype,colorfunc,count,target,nocount,isplural,_done,isthe)",
        "retail": true
      }
    ],
    "SetWaypoint": [
      {
        "name": "SetWaypoint",
        "count": 35,
        "confidence": 1.0,
        "sample": "local way = ZGV.Pointer:SetWaypoint(last.m,last.x,last.y,{",
        "retail": true
      }
    ],
    "IsControlKeyDown": [
      {
        "name": "IsControlKeyDown",
        "count": 23,
        "confidence": 1.0,
        "sample": "cleartype=not IsControlKeyDown(),",
        "retail": true
      }
    ],
    "FindNPC_Smart": [
      {
        "name": "FindNPC_Smart",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV.WhoWhere:FindNPC_Smart(self.npctype,self,GOALTYPES[self.action].onLibRoverResults)",
        "retail": true
      }
    ],
    "GetPrice": [
      {
        "name": "GetPrice",
        "count": 8,
        "confidence": 1.0,
        "sample": "totalvalue = totalvalue + ZGV.Gold.Scan:GetPrice(target[2]) * numInBags",
        "retail": true
      }
    ],
    "SelectOption": [
      {
        "name": "C_GossipInfo.SelectOption",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_GossipInfo.SelectOption(gossip.gossipOptionID)",
        "retail": true
      }
    ],
    "IsQuestPossible": [
      {
        "name": "IsQuestPossible",
        "count": 4,
        "confidence": 0.8,
        "sample": "return complete, complete or (ZGV.QuestDB:IsQuestPossible(self.questid)==ZGV.QuestDB.VALID_NOW)     --[[or ZGV.recentlyAcceptedQuests[id] --]]",
        "retail": true
      }
    ],
    "CloseQuest": [
      {
        "name": "CloseQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "if noquests then CloseQuest() end",
        "retail": true
      }
    ],
    "GetObjectiveText": [
      {
        "name": "GetObjectiveText",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif QuestFrame:IsShown() and ZGV.db.profile.autoaccept and not GetObjectiveText() and not IsQuestCompletable() then -- sitting in an incomplete quest detail",
        "retail": true
      }
    ],
    "IsQuestCompletable": [
      {
        "name": "IsQuestCompletable",
        "count": 2,
        "confidence": 0.4,
        "sample": "elseif QuestFrame:IsShown() and ZGV.db.profile.autoaccept and not GetObjectiveText() and not IsQuestCompletable() then -- sitting in an incomplete quest detail",
        "retail": true
      }
    ],
    "TriggerEvent": [
      {
        "name": "TriggerEvent",
        "count": 19,
        "confidence": 1.0,
        "sample": "EventRegistry:TriggerEvent(\"ZygorGossip\", v.gossipOptionID)",
        "retail": true
      }
    ],
    "GetRecipeItemLink": [
      {
        "name": "C_TradeSkillUI.GetRecipeItemLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "local product = C_TradeSkillUI.GetRecipeItemLink(self.spellid)",
        "retail": true
      }
    ],
    "GetRecipeQualityItemIDs": [
      {
        "name": "C_TradeSkillUI.GetRecipeQualityItemIDs",
        "count": 2,
        "confidence": 0.4,
        "sample": "local variants = C_TradeSkillUI.GetRecipeQualityItemIDs(self.spellid)",
        "retail": true
      }
    ],
    "PerformTradeSkillGoal": [
      {
        "name": "PerformTradeSkillGoal",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- self.macrosrc = \"#showtooltip \".. castskill ..\"{;}/run ZGV:PerformTradeSkillGoal({stepnum},{goalnum})\"",
        "retail": true
      }
    ],
    "GetRecipe": [
      {
        "name": "GetRecipe",
        "count": 6,
        "confidence": 1.0,
        "sample": "if  (ZGV.Professions:GetRecipe(self.spellid)) ~= false then",
        "retail": true
      }
    ],
    "GetInventorySlotInfo": [
      {
        "name": "GetInventorySlotInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local slotid,_ = GetInventorySlotInfo(slot)",
        "retail": true
      }
    ],
    "GetBindLocation": [
      {
        "name": "GetBindLocation",
        "count": 4,
        "confidence": 0.8,
        "sample": "local bind = GetBindLocation(\"player\")",
        "retail": true
      }
    ],
    "GetAchievementCriteriaInfoByID": [
      {
        "name": "GetAchievementCriteriaInfoByID",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (GetAchievementNumCriteria(self.achieveid) < self.achievesub) and not (GetAchievementCriteriaInfoByID(self.achieveid,self.achievesub)) then -- Causes errors when blizzard changes crap.",
        "retail": true
      }
    ],
    "AchievementFrame_LoadUI": [
      {
        "name": "AchievementFrame_LoadUI",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not AchievementFrame then  AchievementFrame_LoadUI()  end",
        "retail": true
      }
    ],
    "AchievementFrame_ToggleAchievementFrame": [
      {
        "name": "AchievementFrame_ToggleAchievementFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not AchievementFrame:IsShown() then  AchievementFrame_ToggleAchievementFrame()  end",
        "retail": true
      }
    ],
    "AchievementFrame_SelectAchievement": [
      {
        "name": "AchievementFrame_SelectAchievement",
        "count": 3,
        "confidence": 0.6,
        "sample": "AchievementFrame_SelectAchievement(self.achieveid)",
        "retail": true
      }
    ],
    "UnitXP": [
      {
        "name": "UnitXP",
        "count": 10,
        "confidence": 1.0,
        "sample": "elseif floor(level)>=self.level and UnitXP(\"player\")>=(self.exp or 0) then",
        "retail": true
      }
    ],
    "UnitXPMax": [
      {
        "name": "UnitXPMax",
        "count": 7,
        "confidence": 1.0,
        "sample": "return false,true, norm_nums(UnitXP(\"player\"),self.exp or UnitXPMax(\"player\"))",
        "retail": true
      }
    ],
    "GetKillsNeeded": [
      {
        "name": "GetKillsNeeded",
        "count": 2,
        "confidence": 0.4,
        "sample": "local killcount = ZGV.F:GetKillsNeeded(self.level,self.exp)",
        "retail": true
      }
    ],
    "IsEnvironmentPhased": [
      {
        "name": "IsEnvironmentPhased",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.Pointer:IsEnvironmentPhased(gm) then",
        "retail": true
      }
    ],
    "GetCurrentMapID": [
      {
        "name": "ZGV.GetCurrentMapID",
        "count": 22,
        "confidence": 1.0,
        "sample": "gm,gf=ZGV.GetCurrentMapID(),ZGV.GetCurrentMapDungeonLevel()",
        "retail": true
      }
    ],
    "GetCurrentMapDungeonLevel": [
      {
        "name": "ZGV.GetCurrentMapDungeonLevel",
        "count": 12,
        "confidence": 1.0,
        "sample": "gm,gf=ZGV.GetCurrentMapID(),ZGV.GetCurrentMapDungeonLevel()",
        "retail": true
      }
    ],
    "DIFFERENT": [
      {
        "name": "DIFFERENT",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- map/floor is DIFFERENT (make it work only with a negative distance, which would mean \"leave the zone\"",
        "retail": true
      }
    ],
    "GetZoneDistance": [
      {
        "name": "GetZoneDistance",
        "count": 26,
        "confidence": 1.0,
        "sample": "local realdist=HBD:GetZoneDistance(cm,cx,cy,gm,gx,gy)",
        "retail": true
      }
    ],
    "SanitizeMapFloor": [
      {
        "name": "SanitizeMapFloor",
        "count": 9,
        "confidence": 1.0,
        "sample": "self.floor= ZGV:SanitizeMapFloor(node.m,node.f)",
        "retail": true
      }
    ],
    "GetMapContinent": [
      {
        "name": "ZGV.GetMapContinent",
        "count": 31,
        "confidence": 1.0,
        "sample": "local goalcontinent=ZGV.GetMapContinent(self.map or 0,0)",
        "retail": true
      },
      {
        "name": "GetMapContinent",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:GetMapContinent(mapID)",
        "retail": true
      }
    ],
    "IsMounted": [
      {
        "name": "IsMounted",
        "count": 1,
        "confidence": 0.2,
        "sample": "(ZGV.CurrentMapID==self.map and not UnitOnTaxi(\"player\") and IsMounted()) then",
        "retail": true
      }
    ],
    "GetGarrisonInfo": [
      {
        "name": "GetGarrisonInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local level = C_Garrison:GetGarrisonInfo() or 1",
        "retail": true
      },
      {
        "name": "C_Garrison.GetGarrisonInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local glvl = C_Garrison.GetGarrisonInfo(garr60)",
        "retail": true
      }
    ],
    "GetUnitName": [
      {
        "name": "GetUnitName",
        "count": 32,
        "confidence": 1.0,
        "sample": "self.param = L[\"players_garrison_1\"]:format(GetUnitName(\"player\"))",
        "retail": true
      }
    ],
    "GetBuildingInfo": [
      {
        "name": "C_Garrison.GetBuildingInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "if not self.buildingLevel and type(self.building)==\"number\" then _,_,_,_,_,self.buildingLevel = C_Garrison.GetBuildingInfo(self.building) end  -- ie. LumberMill is 40,41,138; call \"41\" means \"41,2\" explicitly.",
        "retail": true
      }
    ],
    "IsEncounterComplete": [
      {
        "name": "C_EncounterJournal.IsEncounterComplete",
        "count": 1,
        "confidence": 0.2,
        "sample": "local killed = C_EncounterJournal.IsEncounterComplete(self.targetid)",
        "retail": true
      }
    ],
    "UnitHealth": [
      {
        "name": "UnitHealth",
        "count": 30,
        "confidence": 1.0,
        "sample": "local bosshp = UnitHealth(unit)",
        "retail": true
      }
    ],
    "UnitHealthMax": [
      {
        "name": "UnitHealthMax",
        "count": 29,
        "confidence": 1.0,
        "sample": "local bosshpmax = UnitHealthMax(unit)",
        "retail": true
      }
    ],
    "GetSetInfo": [
      {
        "name": "C_TransmogSets.GetSetInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local setinfo = C_TransmogSets.GetSetInfo(self.setid)",
        "retail": true
      }
    ],
    "GetSetSources": [
      {
        "name": "C_TransmogSets.GetSetSources",
        "count": 2,
        "confidence": 0.4,
        "sample": "for appid in pairs(C_TransmogSets.GetSetSources(self.setid)) do -- find item that matches slot in param",
        "retail": true
      }
    ],
    "GetTitleName": [
      {
        "name": "GetTitleName",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.title = GetTitleName(self.titleid):sub(0,-2)",
        "retail": true
      }
    ],
    "GoalPopupImage": [
      {
        "name": "ZGV.GoalPopupImage",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.GoalPopupImage(self)",
        "retail": true
      }
    ],
    "GoalPopupImage_DragStopHandler": [
      {
        "name": "GoalPopupImage_DragStopHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GoalPopupImage_DragStopHandler()",
        "retail": true
      }
    ],
    "RefreshRunesList": [
      {
        "name": "C_Engraving.RefreshRunesList",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_Engraving.RefreshRunesList()",
        "retail": true
      }
    ],
    "GetRuneCategories": [
      {
        "name": "C_Engraving.GetRuneCategories",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.categories = C_Engraving.GetRuneCategories(false, false)",
        "retail": true
      }
    ],
    "GetRunesForCategory": [
      {
        "name": "C_Engraving.GetRunesForCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "local runes = C_Engraving.GetRunesForCategory(cat, true)",
        "retail": true
      }
    ],
    "GetRuneForEquipmentSlot": [
      {
        "name": "C_Engraving.GetRuneForEquipmentSlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "local rune = C_Engraving.GetRuneForEquipmentSlot(slotid)",
        "retail": true
      }
    ],
    "Prepare": [
      {
        "name": "Prepare",
        "count": 4,
        "confidence": 0.8,
        "sample": "if not self.prepared then self:Prepare() end",
        "retail": true
      }
    ],
    "IsObsolete": [
      {
        "name": "IsObsolete",
        "count": 8,
        "confidence": 1.0,
        "sample": "if ZGV.db.profile.skipobsolete and not self.parentStep.parentGuide.noobsolete and self:IsObsolete() then return \"obsolete\" end",
        "retail": true
      }
    ],
    "UpdateStatus": [
      {
        "name": "UpdateStatus",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:UpdateStatus()",
        "retail": true
      }
    ],
    "IsValidRole": [
      {
        "name": "IsValidRole",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:IsValidRole()",
        "retail": true
      }
    ],
    "IsFitting": [
      {
        "name": "IsFitting",
        "count": 4,
        "confidence": 0.8,
        "sample": "if not self:IsFitting() then return false end",
        "retail": true
      }
    ],
    "MaybeSkipThisGoal": [
      {
        "name": "MaybeSkipThisGoal",
        "count": 3,
        "confidence": 0.6,
        "sample": "if ZGV.QuestDB:MaybeSkipThisGoal(self) then return false,false,0,1 end -- guide in turnin only mode, or sis skipping",
        "retail": true
      }
    ],
    "WasSavedStickyComplete": [
      {
        "name": "WasSavedStickyComplete",
        "count": 2,
        "confidence": 0.4,
        "sample": "or self:WasSavedStickyComplete()",
        "retail": true
      }
    ],
    "CheckVisited": [
      {
        "name": "CheckVisited",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:CheckVisited()  -- AKA arrived",
        "retail": true
      }
    ],
    "IsCompleteAs": [
      {
        "name": "IsCompleteAs",
        "count": 2,
        "confidence": 0.4,
        "sample": "local isvisited = self:IsCompleteAs(\"goto\")  -- complete me like one of your French gotos, Jack",
        "retail": true
      }
    ],
    "SaveStickyComplete": [
      {
        "name": "SaveStickyComplete",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SaveStickyComplete()",
        "retail": true
      }
    ],
    "OnVisited": [
      {
        "name": "OnVisited",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:OnVisited()",
        "retail": true
      }
    ],
    "OnDevisited": [
      {
        "name": "OnDevisited",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:OnDevisited()",
        "retail": true
      }
    ],
    "RemoveEventHandler": [
      {
        "name": "RemoveEventHandler",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:RemoveEventHandler(event,self.eventfunc)",
        "retail": true
      }
    ],
    "RegisterEvents": [
      {
        "name": "RegisterEvents",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Goal:RegisterEvents()",
        "retail": true
      }
    ],
    "UnregisterEvents": [
      {
        "name": "UnregisterEvents",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Goal:UnregisterEvents()",
        "retail": true
      }
    ],
    "CycleWaypointFrom": [
      {
        "name": "CycleWaypointFrom",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.parentStep:CycleWaypointFrom(self.num,\"no cycle\")",
        "retail": true
      }
    ],
    "RemoveWaypoint": [
      {
        "name": "RemoveWaypoint",
        "count": 11,
        "confidence": 1.0,
        "sample": "--ZGV.Pointer:RemoveWaypoint(self.waypoint) ZGV:ShowWaypoints()  -- that's bullshit...",
        "retail": true
      }
    ],
    "GetWaypoint": [
      {
        "name": "GetWaypoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goal:GetWaypoint()",
        "retail": true
      }
    ],
    "OnCompleted": [
      {
        "name": "OnCompleted",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:OnCompleted()",
        "retail": true
      }
    ],
    "OnUncompleted": [
      {
        "name": "OnUncompleted",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:OnUncompleted()",
        "retail": true
      }
    ],
    "GetAchievementLink": [
      {
        "name": "GetAchievementLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local link = GetAchievementLink(self.achieveid)",
        "retail": true
      }
    ],
    "IsPOIComplete": [
      {
        "name": "Utils.IsPOIComplete",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Sorta kinda similar to Utils.IsPOIComplete() in ESO, but not really . . .",
        "retail": true
      },
      {
        "name": "IsPOIComplete",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goal:IsPOIComplete(args)",
        "retail": true
      }
    ],
    "IsDynamic": [
      {
        "name": "IsDynamic",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Goal:IsDynamic()",
        "retail": true
      }
    ],
    "FindPetActionInfo": [
      {
        "name": "ZGV.FindPetActionInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.FindPetActionInfo(goal)",
        "retail": true
      }
    ],
    "IsActionable": [
      {
        "name": "IsActionable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goal:IsActionable()",
        "retail": true
      }
    ],
    "NeedsTranslation": [
      {
        "name": "NeedsTranslation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:NeedsTranslation()",
        "retail": true
      }
    ],
    "AutoTranslate": [
      {
        "name": "AutoTranslate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:AutoTranslate()",
        "retail": true
      }
    ],
    "GetCurrencyProgress": [
      {
        "name": "GetCurrencyProgress",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:GetCurrencyProgress(brief,complete)",
        "retail": true
      }
    ],
    "GoalRecipe": [
      {
        "name": "GoalRecipe",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.recipedata,errortype = ZGV.Professions:GoalRecipe(self.skill,self.spellid)",
        "retail": true
      }
    ],
    "GetItemReagentQualityByItemInfo": [
      {
        "name": "C_TradeSkillUI.GetItemReagentQualityByItemInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "reagentquality = C_TradeSkillUI.GetItemReagentQualityByItemInfo(self.targetid )",
        "retail": true
      }
    ],
    "CreateAtlasMarkupWithAtlasSize": [
      {
        "name": "CreateAtlasMarkupWithAtlasSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local atlas = CreateAtlasMarkupWithAtlasSize((\"Professions-ChatIcon-Quality-Tier%d\"):format(reagentquality),nil,nil,nil,nil,nil,0.4*ZGV.db.profile.framescale)",
        "retail": true
      }
    ],
    "GetString": [
      {
        "name": "GetString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goal:GetString()",
        "retail": true
      }
    ],
    "GetNextStep": [
      {
        "name": "GetNextStep",
        "count": 6,
        "confidence": 1.0,
        "sample": "step=step:GetNextStep()",
        "retail": true
      }
    ],
    "MRM": [
      {
        "name": "MRM",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.macrosrc = self.macrosrc ..\"\\n/run ZGV:MRM():CG(\"..self.parentStep.num..\",\"..self.num..\")\"",
        "retail": true
      }
    ],
    "CG": [
      {
        "name": "CG",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.macrosrc = self.macrosrc ..\"\\n/run ZGV:MRM():CG(\"..self.parentStep.num..\",\"..self.num..\")\"",
        "retail": true
      }
    ],
    "GetNearestTaxiInZone": [
      {
        "name": "GetNearestTaxiInZone",
        "count": 2,
        "confidence": 0.4,
        "sample": "local npc = LibRover:GetNearestTaxiInZone()",
        "retail": true
      }
    ],
    "SetMacroSpell": [
      {
        "name": "SetMacroSpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.macrospell then SetMacroSpell(macro,getSpellName(self.macrospell)) end",
        "retail": true
      }
    ],
    "SetMacroItem": [
      {
        "name": "SetMacroItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.macroitem then SetMacroItem(macro,ZGV:GetItemInfo(self.macroitem)) end",
        "retail": true
      }
    ],
    "GetIndentChildren": [
      {
        "name": "GetIndentChildren",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:GetIndentChildren()",
        "retail": true
      }
    ],
    "CanBeIndentHidden": [
      {
        "name": "CanBeIndentHidden",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Goal:CanBeIndentHidden()",
        "retail": true
      }
    ],
    "IsModifiedClick": [
      {
        "name": "IsModifiedClick",
        "count": 6,
        "confidence": 1.0,
        "sample": "if IsModifiedClick(\"DRESSUP\") and self.itemid and IsDressableItem(\"item:\"..self.itemid) then",
        "retail": true
      }
    ],
    "IsDressableItem": [
      {
        "name": "IsDressableItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "if IsModifiedClick(\"DRESSUP\") and self.itemid and IsDressableItem(\"item:\"..self.itemid) then",
        "retail": true
      }
    ],
    "DressUpItemLink": [
      {
        "name": "DressUpItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "DressUpItemLink(\"item:\"..self.itemid)",
        "retail": true
      }
    ],
    "FindTravelPath": [
      {
        "name": "FindTravelPath",
        "count": 11,
        "confidence": 1.0,
        "sample": "ZGV.Pointer:FindTravelPath(way)",
        "retail": true
      }
    ],
    "CycleWaypointTo": [
      {
        "name": "CycleWaypointTo",
        "count": 8,
        "confidence": 1.0,
        "sample": "self.parentStep:CycleWaypointTo(self.num)",
        "retail": true
      }
    ],
    "SetWaypointToGoal": [
      {
        "name": "SetWaypointToGoal",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Pointer:SetWaypointToGoal(self)",
        "retail": true
      }
    ],
    "FakeCompleteGoal": [
      {
        "name": "FakeCompleteGoal",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:FakeCompleteGoal(self,true)",
        "retail": true
      }
    ],
    "TrackQuest": [
      {
        "name": "TrackQuest",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV:TrackQuest(self.questid)",
        "retail": true
      }
    ],
    "PointToQuest": [
      {
        "name": "PointToQuest",
        "count": 3,
        "confidence": 0.6,
        "sample": "--self:PointToQuest(self.questid)  -- ONLY point to 'goto' coords now. 2014-09-02 14:34:42 sinus",
        "retail": true
      }
    ],
    "ShareToChat": [
      {
        "name": "ShareToChat",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:ShareToChat(ZGV.db.profile.share_target or \"SAY\",\"brand\",\"withtips\")",
        "retail": true
      }
    ],
    "FindNPC": [
      {
        "name": "FindNPC",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZGV.WhoWhere:FindNPC(self.npc)",
        "retail": true
      }
    ],
    "Click": [
      {
        "name": "Click",
        "count": 46,
        "confidence": 1.0,
        "sample": "ZGV.actionbuttons[self.num]:Click()",
        "retail": true
      }
    ],
    "IsInlineTravel": [
      {
        "name": "IsInlineTravel",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Goal:IsInlineTravel()",
        "retail": true
      }
    ],
    "GetTextForSharing": [
      {
        "name": "GetTextForSharing",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Goal:GetTextForSharing(withtip)",
        "retail": true
      }
    ],
    "GetTextForSharingWithAllTips": [
      {
        "name": "GetTextForSharingWithAllTips",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goal:GetTextForSharingWithAllTips()",
        "retail": true
      }
    ],
    "IsInRaid": [
      {
        "name": "IsInRaid",
        "count": 93,
        "confidence": 1.0,
        "sample": "if target==\"RAID\" and not IsInRaid() then ZGV:Error(ERR_NOT_IN_RAID) return end",
        "retail": true
      }
    ],
    "GetLFGDungeonInfo": [
      {
        "name": "GetLFGDungeonInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "name, typeID, subtypeID, minLevel, maxLevel, recLevel, minRecLevel, maxRecLevel, expansionLevel, groupID, textureFilename, difficulty, maxPlayers, description, isHoliday, bonusRepAmount, minPlayers, isTimeWalker, name2, min_ilevel  = GetLFGDungeonInfo(id)",
        "retail": true
      }
    ],
    "Get": [
      {
        "name": "Get",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Dungeons:Get(id)",
        "retail": true
      }
    ],
    "GetMaxLevelForLatestExpansion": [
      {
        "name": "GetMaxLevelForLatestExpansion",
        "count": 1,
        "confidence": 0.2,
        "sample": "Dungeons.MaxLevelForLatestExpansion = (GetClassicExpansionLevel and GetClassicExpansionLevel()==1 and 70 or 60) or (GetMaxLevelForLatestExpansion and GetMaxLevelForLatestExpansion()) or 60",
        "retail": true
      }
    ],
    "HighlightTaxiDestination": [
      {
        "name": "HighlightTaxiDestination",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer:HighlightTaxiDestination()",
        "retail": true
      }
    ],
    "HighlightFlightMapDestination": [
      {
        "name": "HighlightFlightMapDestination",
        "count": 4,
        "confidence": 0.8,
        "sample": "Pointer:HighlightFlightMapDestination()",
        "retail": true
      }
    ],
    "LoadSavedPoints": [
      {
        "name": "LoadSavedPoints",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer:LoadSavedPoints()",
        "retail": true
      }
    ],
    "GetCurrentMapContinent": [
      {
        "name": "GetCurrentMapContinent",
        "count": 13,
        "confidence": 1.0,
        "sample": "local cont = ZGV:GetCurrentMapContinent()",
        "retail": true
      },
      {
        "name": "ZGV.GetCurrentMapContinent",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.GetCurrentMapContinent()",
        "retail": true
      }
    ],
    "GetAllTaxiNodes": [
      {
        "name": "C_TaxiMap.GetAllTaxiNodes",
        "count": 3,
        "confidence": 0.6,
        "sample": "for _,tnode in ipairs(C_TaxiMap.GetAllTaxiNodes(cont)) do",
        "retail": true
      }
    ],
    "NumTaxiNodes": [
      {
        "name": "NumTaxiNodes",
        "count": 16,
        "confidence": 1.0,
        "sample": "for i=1,NumTaxiNodes() do",
        "retail": true
      }
    ],
    "TaxiNodePosition": [
      {
        "name": "TaxiNodePosition",
        "count": 7,
        "confidence": 1.0,
        "sample": "local x,y=TaxiNodePosition(i)",
        "retail": true
      }
    ],
    "TaxiNodeGetType": [
      {
        "name": "TaxiNodeGetType",
        "count": 9,
        "confidence": 1.0,
        "sample": "if TaxiNodeGetType(i)~=\"NONE\" and (taxinode.taxitag==tag or TaxiNodeName(i):find(taxinode.name,0,true)) then",
        "retail": true
      }
    ],
    "TaxiNodeName": [
      {
        "name": "TaxiNodeName",
        "count": 16,
        "confidence": 1.0,
        "sample": "if TaxiNodeGetType(i)~=\"NONE\" and (taxinode.taxitag==tag or TaxiNodeName(i):find(taxinode.name,0,true)) then",
        "retail": true
      }
    ],
    "PointTo": [
      {
        "name": "PointTo",
        "count": 4,
        "confidence": 0.8,
        "sample": "TaxiFrame.ZygorGuidesViewer_TaxiMarker:PointTo(pin,pin)",
        "retail": true
      }
    ],
    "TakeTaxiNode": [
      {
        "name": "TakeTaxiNode",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:Debug(\"Would TakeTaxiNode(%d) #%d to %s (tag %s)\",id,taxislot,TaxiNodeName(taxislot),taxinode.taxitag)",
        "retail": true
      }
    ],
    "IsAltKeyDown": [
      {
        "name": "IsAltKeyDown",
        "count": 15,
        "confidence": 1.0,
        "sample": "if ZGV.db.profile.autotaxi and id and ZGV.Frame:IsVisible() and not IsAltKeyDown() then",
        "retail": true
      }
    ],
    "Dismount": [
      {
        "name": "Dismount",
        "count": 3,
        "confidence": 0.6,
        "sample": "Dismount()",
        "retail": true
      }
    ],
    "GetNumRoutes": [
      {
        "name": "GetNumRoutes",
        "count": 10,
        "confidence": 1.0,
        "sample": "GetNumRoutes(id) -- dummy call! but needed in 6.1 for TakeTaxiNode to work. WTF Blizzard...",
        "retail": true
      }
    ],
    "RecordLastTaxiSlots": [
      {
        "name": "RecordLastTaxiSlots",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.LibTaxi:RecordLastTaxiSlots()",
        "retail": true
      }
    ],
    "PointToCoords": [
      {
        "name": "PointToCoords",
        "count": 3,
        "confidence": 0.6,
        "sample": "FlightMapFrame.ZygorGuidesViewer_TaxiMarker:PointToCoords(FlightMapFrame,0.87,0.16)",
        "retail": true
      }
    ],
    "EnumerateActive": [
      {
        "name": "EnumerateActive",
        "count": 8,
        "confidence": 1.0,
        "sample": "for pin,_ in FlightMapFrame.pinPools.FlightMap_FlightPointPinTemplate:EnumerateActive() do",
        "retail": true
      }
    ],
    "GetTaxiMapID": [
      {
        "name": "GetTaxiMapID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local mapID = GetTaxiMapID()",
        "retail": true
      }
    ],
    "GetMapInfoAtPosition": [
      {
        "name": "C_Map.GetMapInfoAtPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "local smapid = sx and mapID and (C_Map.GetMapInfoAtPosition(mapID, sx,sy) or {}).mapID or taxinodestart.m",
        "retail": true
      }
    ],
    "IsSet": [
      {
        "name": "FlagsUtil.IsSet",
        "count": 1,
        "confidence": 0.2,
        "sample": "if smapid and emapid and smapid~=emapid --[[and FlagsUtil.IsSet(subMapInfo.flags, Enum.UIMapFlag.FlightMapAutoZoom) --]] then",
        "retail": true
      }
    ],
    "GetMapCenterOnMap": [
      {
        "name": "MapUtil.GetMapCenterOnMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "local centerX, centerY = MapUtil.GetMapCenterOnMap(emapid, mapID);",
        "retail": true
      }
    ],
    "ZoomFlightMapToCoords": [
      {
        "name": "ZoomFlightMapToCoords",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ZoomFlightMapToCoords(centerX,centerY)",
        "retail": true
      }
    ],
    "ZoomOut": [
      {
        "name": "ZoomOut",
        "count": 2,
        "confidence": 0.4,
        "sample": "FlightMapFrame:ZoomOut()",
        "retail": true
      }
    ],
    "InstantPanAndZoom": [
      {
        "name": "InstantPanAndZoom",
        "count": 1,
        "confidence": 0.2,
        "sample": "--FlightMapFrame:InstantPanAndZoom(FlightMapFrame:GetScaleForMaxZoom(), x, y, ignoreScaleRatio);",
        "retail": true
      }
    ],
    "GetScaleForMaxZoom": [
      {
        "name": "GetScaleForMaxZoom",
        "count": 1,
        "confidence": 0.2,
        "sample": "--FlightMapFrame:InstantPanAndZoom(FlightMapFrame:GetScaleForMaxZoom(), x, y, ignoreScaleRatio);",
        "retail": true
      }
    ],
    "PanAndZoomTo": [
      {
        "name": "PanAndZoomTo",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:ScheduleTimer(function() FlightMapFrame:PanAndZoomTo(x, y) end, 0.2)",
        "retail": true
      }
    ],
    "ZoomIn": [
      {
        "name": "ZoomIn",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:ScheduleTimer(function() FlightMapFrame:ZoomIn() end, 0.4) -- in case PanAndZoomTo didn't start zooming",
        "retail": true
      }
    ],
    "GetCanvas": [
      {
        "name": "GetCanvas",
        "count": 5,
        "confidence": 1.0,
        "sample": "if not self.mapLinePool then self.mapLinePool = CreateFramePool(\"FRAME\", WorldMapFrame:GetCanvas(), \"ZygorGuidesViewer_MapLineTemplate\",mapLinePoolResetter) end",
        "retail": true
      }
    ],
    "CHAINC": [
      {
        "name": "CHAINC",
        "count": 11,
        "confidence": 1.0,
        "sample": "self.OverlayFrame = CHAINC(CreateFrame(\"FRAME\",\"ZygorGuidesViewerPointerOverlay\",worldMap_TargetFrame))",
        "retail": true
      }
    ],
    "IsCorpseArrowNeeded": [
      {
        "name": "IsCorpseArrowNeeded",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV:ScheduleRepeatingTimer(function()  if Pointer:IsCorpseArrowNeeded() then Pointer:DoCorpseCheck() end  end,3.0)",
        "retail": true
      }
    ],
    "DoCorpseCheck": [
      {
        "name": "DoCorpseCheck",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV:ScheduleRepeatingTimer(function()  if Pointer:IsCorpseArrowNeeded() then Pointer:DoCorpseCheck() end  end,3.0)",
        "retail": true
      }
    ],
    "SetMinimapPlayerTexture": [
      {
        "name": "SetMinimapPlayerTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.db.profile.custom_minimap_arrow then self:SetMinimapPlayerTexture() end  -- 2022-11-07: option not implemented. Kinda on purpose, at this point.",
        "retail": true
      }
    ],
    "GetMapInfo": [
      {
        "name": "ZGV.GetMapInfo",
        "count": 26,
        "confidence": 1.0,
        "sample": "local mapinfo = ZGV.GetMapInfo(mapid)",
        "retail": true
      },
      {
        "name": "C_Map.GetMapInfo",
        "count": 19,
        "confidence": 1.0,
        "sample": "local info = C_Map.GetMapInfo(map)",
        "retail": true
      },
      {
        "name": "GetMapInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "s = s .. \"GetMapInfo() = N/I\\n\"--..konkat({GetMapInfo()},4)..\"\\n\"",
        "retail": true
      }
    ],
    "GetMapChildren": [
      {
        "name": "ZGV.GetMapChildren",
        "count": 6,
        "confidence": 1.0,
        "sample": "local valid_children = ZGV.GetMapChildren(mapid)",
        "retail": true
      }
    ],
    "SetIcon": [
      {
        "name": "SetIcon",
        "count": 113,
        "confidence": 1.0,
        "sample": "for k,w in pairs(ZGV.Pointer.waypoints) do w:SetIcon() end",
        "retail": true
      }
    ],
    "FixMapLevel": [
      {
        "name": "Pointer.FixMapLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.FixMapLevel()",
        "retail": true
      }
    ],
    "GetNumDungeonMapLevels": [
      {
        "name": "GetNumDungeonMapLevels",
        "count": 3,
        "confidence": 0.6,
        "sample": "numlevels = GetNumDungeonMapLevels()",
        "retail": true
      }
    ],
    "SetMapToCurrentZone": [
      {
        "name": "SetMapToCurrentZone",
        "count": 5,
        "confidence": 1.0,
        "sample": "SetMapToCurrentZone()",
        "retail": true
      }
    ],
    "SetMapByID": [
      {
        "name": "SetMapByID",
        "count": 6,
        "confidence": 1.0,
        "sample": "SetMapByID(_mm) SetDungeonMapLevel(_ff)",
        "retail": true
      }
    ],
    "SetDungeonMapLevel": [
      {
        "name": "SetDungeonMapLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetMapByID(_mm) SetDungeonMapLevel(_ff)",
        "retail": true
      }
    ],
    "SetBasePhase": [
      {
        "name": "SetBasePhase",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:SetBasePhase(map)",
        "retail": true
      }
    ],
    "SanitizePhase": [
      {
        "name": "SanitizePhase",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Pointer:SanitizePhase(map)",
        "retail": true
      }
    ],
    "MakeMarkerFrames": [
      {
        "name": "MakeMarkerFrames",
        "count": 3,
        "confidence": 0.6,
        "sample": "Pointer:MakeMarkerFrames(waypoint,\"Ant\")",
        "retail": true
      }
    ],
    "SetWaypoint_ant": [
      {
        "name": "SetWaypoint_ant",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:SetWaypoint_ant (m,x,y,num,icon, ant)  -- ant is here for one-time lookup! don't reuse!!",
        "retail": true
      }
    ],
    "UpdateWorldMapIcon": [
      {
        "name": "UpdateWorldMapIcon",
        "count": 8,
        "confidence": 1.0,
        "sample": "waypoint:UpdateWorldMapIcon(lm)",
        "retail": true
      }
    ],
    "UpdateMiniMapIcon": [
      {
        "name": "UpdateMiniMapIcon",
        "count": 8,
        "confidence": 1.0,
        "sample": "waypoint:UpdateMiniMapIcon(lm)",
        "retail": true
      }
    ],
    "UpdateTaxiMapIcon": [
      {
        "name": "UpdateTaxiMapIcon",
        "count": 4,
        "confidence": 0.8,
        "sample": "waypoint:UpdateTaxiMapIcon()",
        "retail": true
      }
    ],
    "ClearWaypoints_ant": [
      {
        "name": "ClearWaypoints_ant",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Pointer:ClearWaypoints_ant(active)",
        "retail": true
      }
    ],
    "RemoveMinimapIcon": [
      {
        "name": "RemoveMinimapIcon",
        "count": 6,
        "confidence": 1.0,
        "sample": "HBDPins:RemoveMinimapIcon(Pointer,waypoint.frame_minimap)",
        "retail": true
      }
    ],
    "GetMapMarker": [
      {
        "name": "GetMapMarker",
        "count": 2,
        "confidence": 0.4,
        "sample": "local waypoint = self:GetMapMarker (m,x,y,data)",
        "retail": true
      }
    ],
    "GetTitle": [
      {
        "name": "GetTitle",
        "count": 11,
        "confidence": 1.0,
        "sample": "waypoint.frame_worldmap.label:SetText(\"   \" .. (waypoint.goal and waypoint.goal.num..\". \" or \"\")  ..  waypoint:GetTitle()  ..  (\"  %.1f,%.1f\"):format(waypoint.x*100,waypoint.y*100))",
        "retail": true
      }
    ],
    "ShowArrow": [
      {
        "name": "ShowArrow",
        "count": 14,
        "confidence": 1.0,
        "sample": "self:ShowArrow(waypoint)",
        "retail": true
      }
    ],
    "SoilData": [
      {
        "name": "SoilData",
        "count": 4,
        "confidence": 0.8,
        "sample": "Pointer.Provider:SoilData()",
        "retail": true
      }
    ],
    "ShowWaiting": [
      {
        "name": "ShowWaiting",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Pointer:ShowWaiting(phase)",
        "retail": true
      }
    ],
    "GetUnusedMarker": [
      {
        "name": "GetUnusedMarker",
        "count": 2,
        "confidence": 0.4,
        "sample": "local waypoint = self:GetUnusedMarker()",
        "retail": true
      }
    ],
    "BoatLockDisable": [
      {
        "name": "BoatLockDisable",
        "count": 6,
        "confidence": 1.0,
        "sample": "LibRover:BoatLockDisable(\"manual\")",
        "retail": true
      }
    ],
    "RemoveWorldMapIcon": [
      {
        "name": "RemoveWorldMapIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "HBDPins:RemoveWorldMapIcon(Pointer,waypoint.frame_worldmap)",
        "retail": true
      }
    ],
    "RemoveWaypointFromSets": [
      {
        "name": "RemoveWaypointFromSets",
        "count": 2,
        "confidence": 0.4,
        "sample": "if waypoint.in_set then self:RemoveWaypointFromSets(waypoint) end",
        "retail": true
      }
    ],
    "HideArrow": [
      {
        "name": "HideArrow",
        "count": 4,
        "confidence": 0.8,
        "sample": "if self.ArrowFrame.waypoint==waypoint then self:HideArrow() end",
        "retail": true
      }
    ],
    "ClearSet": [
      {
        "name": "ClearSet",
        "count": 24,
        "confidence": 1.0,
        "sample": "self:ClearSet(\"route\")",
        "retail": true
      }
    ],
    "ResetMinimapZoom": [
      {
        "name": "ResetMinimapZoom",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ResetMinimapZoom() -- to perhaps reset the zoom",
        "retail": true
      }
    ],
    "IsMouseButtonDown": [
      {
        "name": "IsMouseButtonDown",
        "count": 5,
        "confidence": 1.0,
        "sample": "if not IsMouseButtonDown() and self.ArrowFrame.dragging then",
        "retail": true
      }
    ],
    "GetWorldCoordinatesFromZone": [
      {
        "name": "GetWorldCoordinatesFromZone",
        "count": 12,
        "confidence": 1.0,
        "sample": "local ix,iy,inst = HBD:GetWorldCoordinatesFromZone(tonumber(waypoint.x), tonumber(waypoint.y), waypoint.m)",
        "retail": true
      }
    ],
    "AddMinimapIconWorld": [
      {
        "name": "AddMinimapIconWorld",
        "count": 6,
        "confidence": 1.0,
        "sample": "HBDPins:AddMinimapIconWorld(Pointer, waypoint.frame_minimap, tonumber(inst), tonumber(ix), tonumber(iy), waypoint.showonedge)",
        "retail": true
      }
    ],
    "CreateFromCoordinates": [
      {
        "name": "UiMapPoint.CreateFromCoordinates",
        "count": 1,
        "confidence": 0.2,
        "sample": "local uiMapPoint = UiMapPoint.CreateFromCoordinates(waypoint.m, waypoint.x, waypoint.y);",
        "retail": true
      }
    ],
    "SetUserWaypoint": [
      {
        "name": "C_Map.SetUserWaypoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Map.SetUserWaypoint(uiMapPoint);",
        "retail": true
      }
    ],
    "SetSuperTrackedUserWaypoint": [
      {
        "name": "C_SuperTrack.SetSuperTrackedUserWaypoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_SuperTrack.SetSuperTrackedUserWaypoint(true);",
        "retail": true
      }
    ],
    "GetWaypointBearings": [
      {
        "name": "GetWaypointBearings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:GetWaypointBearings(way)",
        "retail": true
      }
    ],
    "GetChildren": [
      {
        "name": "GetChildren",
        "count": 17,
        "confidence": 1.0,
        "sample": "marker.frame_minimap.isZygorWaypoint=true -- marking the marker to be protected by substituted Minimap:GetChildren() call.",
        "retail": true
      }
    ],
    "GetFrameStrata": [
      {
        "name": "GetFrameStrata",
        "count": 16,
        "confidence": 1.0,
        "sample": "--print(markertype==\"Ant\" and (\"MEDIUM\" and WorldMapFrame:GetFrameStrata() ~= \"HIGH\") or \"HIGH\")",
        "retail": true
      }
    ],
    "POIs": [
      {
        "name": "POIs",
        "count": 1,
        "confidence": 0.2,
        "sample": "marker.frame_worldmap:SetFrameLevel((markertype==\"Ant\" and 608 or 609)+WorldMapFrame:GetFrameLevel())  -- built-in POIs (taxis, pet trainers) are 500-ish, so 600 should suffice.",
        "retail": true
      }
    ],
    "IsSizeMax": [
      {
        "name": "IsSizeMax",
        "count": 1,
        "confidence": 0.2,
        "sample": "if win:IsSizeMax() then",
        "retail": true
      }
    ],
    "SetTexelSnappingBias": [
      {
        "name": "SetTexelSnappingBias",
        "count": 4,
        "confidence": 0.8,
        "sample": "mini_ico:SetTexelSnappingBias(0)",
        "retail": true
      }
    ],
    "SetSnapToPixelGrid": [
      {
        "name": "SetSnapToPixelGrid",
        "count": 6,
        "confidence": 1.0,
        "sample": "mini_ico:SetSnapToPixelGrid(false)",
        "retail": true
      }
    ],
    "GetPinFrameLevelsManager": [
      {
        "name": "GetPinFrameLevelsManager",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.frame_worldmap:SetFrameLevel(self.type==\"ant\" and 3000 or 3001)\t-- self:GetMap():GetPinFrameLevelsManager():GetValidFrameLevel(self.pinFrameLevelType, self.pinFrameLevelIndex);",
        "retail": true
      }
    ],
    "GetValidFrameLevel": [
      {
        "name": "GetValidFrameLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.frame_worldmap:SetFrameLevel(self.type==\"ant\" and 3000 or 3001)\t-- self:GetMap():GetPinFrameLevelsManager():GetValidFrameLevel(self.pinFrameLevelType, self.pinFrameLevelIndex);",
        "retail": true
      }
    ],
    "Mxlt": [
      {
        "name": "Mxlt",
        "count": 14,
        "confidence": 1.0,
        "sample": "local x,y = Mxlt(self.m,self.x,self.y,map,true)",
        "retail": true
      },
      {
        "name": "MapCoords.Mxlt",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MapCoords.Mxlt(map1,x,y,map2,oob_ok,creative)",
        "retail": true
      }
    ],
    "AddWorldMapIconWorld": [
      {
        "name": "AddWorldMapIconWorld",
        "count": 2,
        "confidence": 0.4,
        "sample": "HBDPins:AddWorldMapIconWorld(Pointer, self.frame_worldmap, instanceID, xCoord, yCoord, HBD_PINS_WORLDMAP_SHOW_WORLD)",
        "retail": true
      }
    ],
    "ZGV_MapsOnDifferentFloors": [
      {
        "name": "ZGV_MapsOnDifferentFloors",
        "count": 4,
        "confidence": 0.8,
        "sample": "local alpha_p1 = ZGV_MapsOnDifferentFloors(map,p1m) and 0.3 or 1.0",
        "retail": true
      }
    ],
    "Astrolabe_PlaceIconOnWorldMap2": [
      {
        "name": "Astrolabe_PlaceIconOnWorldMap2",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Astrolabe_PlaceIconOnWorldMap2( taxiBgFrame, icon, taximapID, mapID, mapFloor, xPos, yPos )",
        "retail": true
      }
    ],
    "TranslateZoneCoordinates": [
      {
        "name": "TranslateZoneCoordinates",
        "count": 6,
        "confidence": 1.0,
        "sample": "local nX, nY = HBD:TranslateZoneCoordinates(xPos, yPos, mapID, mapFloor, taximapID, 0)",
        "retail": true
      }
    ],
    "GetTexture": [
      {
        "name": "GetTexture",
        "count": 45,
        "confidence": 1.0,
        "sample": "Pointer:Debug(\"No map for taxi! texture is '%s'\",taxitextureframe:GetTexture())",
        "retail": true
      }
    ],
    "GetArrowTitle": [
      {
        "name": "GetArrowTitle",
        "count": 6,
        "confidence": 1.0,
        "sample": "function markerproto:GetArrowTitle()",
        "retail": true
      }
    ],
    "ToString": [
      {
        "name": "ToString",
        "count": 4,
        "confidence": 0.8,
        "sample": "function markerproto:ToString()",
        "retail": true
      }
    ],
    "FormatDistance": [
      {
        "name": "FormatDistance",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function FormatDistance(dist)",
        "retail": true
      },
      {
        "name": "ZGV.FormatDistance",
        "count": 1,
        "confidence": 0.2,
        "sample": "else  return ZGV.FormatDistance(dist)",
        "retail": true
      }
    ],
    "CreateArrowFrame": [
      {
        "name": "CreateArrowFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:CreateArrowFrame()",
        "retail": true
      }
    ],
    "EnableMouseWheel": [
      {
        "name": "EnableMouseWheel",
        "count": 38,
        "confidence": 1.0,
        "sample": "self.ArrowFrame:EnableMouseWheel(true)",
        "retail": true
      }
    ],
    "SetPushedTexture": [
      {
        "name": "SetPushedTexture",
        "count": 70,
        "confidence": 1.0,
        "sample": ":SetPushedTexture(\"Interface\\\\Buttons\\\\CheckButtonHilight\")",
        "retail": true
      }
    ],
    "SetBlendMode": [
      {
        "name": "SetBlendMode",
        "count": 127,
        "confidence": 1.0,
        "sample": "self.ArrowFrame.ArrowIcon:GetPushedTexture():SetBlendMode(\"ADD\")",
        "retail": true
      }
    ],
    "RegisterAttributeDriver": [
      {
        "name": "RegisterAttributeDriver",
        "count": 5,
        "confidence": 1.0,
        "sample": "RegisterAttributeDriver(Pointer.ArrowFrame, \"state-combathide\", \"[combat] hide; show\");",
        "retail": true
      }
    ],
    "UnregisterAttributeDriver": [
      {
        "name": "UnregisterAttributeDriver",
        "count": 5,
        "confidence": 1.0,
        "sample": "UnregisterAttributeDriver(Pointer.ArrowFrame, \"state-combathide\");",
        "retail": true
      }
    ],
    "ResetWaypointIfOrphaned": [
      {
        "name": "ResetWaypointIfOrphaned",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:ResetWaypointIfOrphaned()",
        "retail": true
      }
    ],
    "CycleWaypoint": [
      {
        "name": "CycleWaypoint",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZGV.CurrentStep:CycleWaypoint(nil,nil,\"orphaned\")",
        "retail": true
      }
    ],
    "GetFont": [
      {
        "name": "GetFont",
        "count": 65,
        "confidence": 1.0,
        "sample": "local f=self.ArrowFrame.title:GetFont()",
        "retail": true
      }
    ],
    "SetZoom": [
      {
        "name": "SetZoom",
        "count": 5,
        "confidence": 1.0,
        "sample": "Minimap:SetZoom(0)",
        "retail": true
      }
    ],
    "AddTexture": [
      {
        "name": "AddTexture",
        "count": 7,
        "confidence": 1.0,
        "sample": "if line.icon then tooltip:AddTexture(line.icon) end",
        "retail": true
      }
    ],
    "MAPBUT": [
      {
        "name": "ZGV.MAPBUT",
        "count": 1,
        "confidence": 0.2,
        "sample": "tip:AddLine(\"|cffff0000DEBUG:|r |cffddff00Ctrl-Alt-click|r to save map button to ZGV.MAPBUT (+Shift to Spoo)\")",
        "retail": true
      }
    ],
    "AnimateAnts": [
      {
        "name": "AnimateAnts",
        "count": 9,
        "confidence": 1.0,
        "sample": "Pointer:AnimateAnts()",
        "retail": true
      }
    ],
    "GetDistanceToIcon": [
      {
        "name": "GetDistanceToIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "local dist,x,y = HBDPins:GetDistanceToIcon(self)  -- ADDED by our own HBDragons.lua",
        "retail": true
      }
    ],
    "IsInInstance": [
      {
        "name": "IsInInstance",
        "count": 32,
        "confidence": 1.0,
        "sample": "if not dist --[[or IsInInstance()--]] then self.icon:Hide() self.arrow:Hide() return end",
        "retail": true
      }
    ],
    "IsMinimapIconOnEdge": [
      {
        "name": "IsMinimapIconOnEdge",
        "count": 2,
        "confidence": 0.4,
        "sample": "local edge = HBDPins:IsMinimapIconOnEdge(self)",
        "retail": true
      }
    ],
    "GetDirectionToIcon": [
      {
        "name": "GetDirectionToIcon",
        "count": 3,
        "confidence": 0.6,
        "sample": "local angle = HBDPins:GetDirectionToIcon(self)",
        "retail": true
      }
    ],
    "GetZoom": [
      {
        "name": "GetZoom",
        "count": 6,
        "confidence": 1.0,
        "sample": "local getzoom = Minimap:GetZoom()",
        "retail": true
      }
    ],
    "GetZoomLevels": [
      {
        "name": "GetZoomLevels",
        "count": 2,
        "confidence": 0.4,
        "sample": "for i=1,Minimap:GetZoomLevels()-1 do",
        "retail": true
      }
    ],
    "Debug_StartDragging": [
      {
        "name": "Debug_StartDragging",
        "count": 1,
        "confidence": 0.2,
        "sample": "Pointer:Debug_StartDragging(self.waypoint)",
        "retail": true
      }
    ],
    "Debug_RemovePointFromPath": [
      {
        "name": "Debug_RemovePointFromPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "Pointer:Debug_RemovePointFromPath(self.waypoint)",
        "retail": true
      }
    ],
    "ShowNodeDebugMenu": [
      {
        "name": "ZGV.LibRover.ShowNodeDebugMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.LibRover.ShowNodeDebugMenu(self,self.waypoint.pathnode)",
        "retail": true
      },
      {
        "name": "Lib.ShowNodeDebugMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.ShowNodeDebugMenu(parent,node)",
        "retail": true
      }
    ],
    "DoSpoo": [
      {
        "name": "DoSpoo",
        "count": 1,
        "confidence": 0.2,
        "sample": "DoSpoo(ZGV.MAPBUT)",
        "retail": true
      }
    ],
    "GetFloorByMapID": [
      {
        "name": "GetFloorByMapID",
        "count": 6,
        "confidence": 1.0,
        "sample": "local floor = LibRover:GetFloorByMapID(map)",
        "retail": true
      }
    ],
    "OnMouseWheel": [
      {
        "name": "OnMouseWheel",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Pointer.frame_worldmap_functions.OnMouseWheel(self,delta,...)",
        "retail": true
      }
    ],
    "ClearMapLines": [
      {
        "name": "ClearMapLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:ClearMapLines()",
        "retail": true
      }
    ],
    "UpdateMapLines": [
      {
        "name": "UpdateMapLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:UpdateMapLines()",
        "retail": true
      }
    ],
    "DrawLineZ": [
      {
        "name": "DrawLineZ",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DrawLineZ(way1,way2,thickness,r,g,b,a,phase)",
        "retail": true
      }
    ],
    "DrawLine": [
      {
        "name": "DrawLine",
        "count": 23,
        "confidence": 1.0,
        "sample": "DrawLine(line,wmfc,",
        "retail": true
      }
    ],
    "AddMaskTexture": [
      {
        "name": "AddMaskTexture",
        "count": 18,
        "confidence": 1.0,
        "sample": "--line:AddMaskTexture(self.MinimapOverlayFrame.mask)",
        "retail": true
      }
    ],
    "SetThickness": [
      {
        "name": "SetThickness",
        "count": 8,
        "confidence": 1.0,
        "sample": "line.Fill:SetThickness(thickness)",
        "retail": true
      }
    ],
    "IsPlaying": [
      {
        "name": "IsPlaying",
        "count": 33,
        "confidence": 1.0,
        "sample": "if not line.ScrollAnim:IsPlaying() then line.ScrollAnim:Play() end",
        "retail": true
      }
    ],
    "SetStartPoint": [
      {
        "name": "SetStartPoint",
        "count": 11,
        "confidence": 1.0,
        "sample": "line.FillScroll1:SetStartPoint(line.Fill:GetStartPoint())",
        "retail": true
      }
    ],
    "GetStartPoint": [
      {
        "name": "GetStartPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "line.FillScroll1:SetStartPoint(line.Fill:GetStartPoint())",
        "retail": true
      }
    ],
    "SetEndPoint": [
      {
        "name": "SetEndPoint",
        "count": 12,
        "confidence": 1.0,
        "sample": "line.FillScroll1:SetEndPoint(line.Fill:GetEndPoint())",
        "retail": true
      }
    ],
    "GetEndPoint": [
      {
        "name": "GetEndPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "line.FillScroll1:SetEndPoint(line.Fill:GetEndPoint())",
        "retail": true
      }
    ],
    "DrawLineFrame": [
      {
        "name": "DrawLineFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "DrawLineFrame(line,line.Fill,self.MinimapOverlayFrame,",
        "retail": true
      }
    ],
    "DrawLineZygor": [
      {
        "name": "DrawLineZygor",
        "count": 2,
        "confidence": 0.4,
        "sample": "DrawLineZygor(line,self.MinimapOverlayFrame,",
        "retail": true
      }
    ],
    "ArrowFrame_OnEvent": [
      {
        "name": "Pointer.ArrowFrame_OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.ArrowFrame_OnEvent(self,event,...)",
        "retail": true
      }
    ],
    "ArrowFrameControl_OnUpdate": [
      {
        "name": "Pointer.ArrowFrameControl_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.ArrowFrameControl_OnUpdate(self,elapsed)",
        "retail": true
      }
    ],
    "ArrowFrame_OnUpdate_Common": [
      {
        "name": "Pointer.ArrowFrame_OnUpdate_Common",
        "count": 2,
        "confidence": 0.4,
        "sample": "if Pointer.ArrowFrame then Pointer.ArrowFrame_OnUpdate_Common(Pointer.ArrowFrame,arrowctrl_elapsed) end",
        "retail": true
      }
    ],
    "ArrowFrame_HideSpellArrow": [
      {
        "name": "Pointer.ArrowFrame_HideSpellArrow",
        "count": 3,
        "confidence": 0.6,
        "sample": "if icon and icon:IsVisible() and not ZGV.Pointer.ArrowFrame:IsVisible() then Pointer.ArrowFrame_HideSpellArrow(self) end",
        "retail": true
      }
    ],
    "CalculateDirectionTiers": [
      {
        "name": "Pointer.CalculateDirectionTiers",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer.CalculateDirectionTiers(perc,t1,t2,t3,t4)",
        "retail": true
      }
    ],
    "GetDefaultStepDist": [
      {
        "name": "GetDefaultStepDist",
        "count": 9,
        "confidence": 1.0,
        "sample": "function Pointer:GetDefaultStepDist(waypoint)",
        "retail": true
      }
    ],
    "TableFind": [
      {
        "name": "TableFind",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function TableFind(table,val)  -- unused, yeah",
        "retail": true
      }
    ],
    "TableFind2": [
      {
        "name": "TableFind2",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function TableFind2(table,val1,val2)",
        "retail": true
      }
    ],
    "L_or_nil": [
      {
        "name": "L_or_nil",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function L_or_nil(id)",
        "retail": true
      }
    ],
    "GetPreciseFloorCrossingText": [
      {
        "name": "GetPreciseFloorCrossingText",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local function GetPreciseFloorCrossingText(map_from,map_to)",
        "retail": true
      }
    ],
    "PickupInventoryItem": [
      {
        "name": "PickupInventoryItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "PickupInventoryItem(slot) --Pickup the quest item",
        "retail": true
      }
    ],
    "RemoveItem": [
      {
        "name": "RemoveItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "RemoveItem(slot)",
        "retail": true
      }
    ],
    "EquipItemByName": [
      {
        "name": "C_Item.EquipItemByName",
        "count": 3,
        "confidence": 0.6,
        "sample": "--C_Item.EquipItemByName(previous)",
        "retail": true
      }
    ],
    "ArrowFrame_ShowSpellArrow": [
      {
        "name": "Pointer.ArrowFrame_ShowSpellArrow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer.ArrowFrame_ShowSpellArrow(self,waypoint)",
        "retail": true
      }
    ],
    "GetCooldownWithoutGCD": [
      {
        "name": "GetCooldownWithoutGCD",
        "count": 5,
        "confidence": 1.0,
        "sample": "local cooltime,cooldur,coolactive = LibRover:GetCooldownWithoutGCD((spell and \"spell\") or (item and \"item\"),item or spell)",
        "retail": true
      }
    ],
    "GetToyInfo": [
      {
        "name": "C_ToyBox.GetToyInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "_,name,texture,_ = C_ToyBox.GetToyInfo(item)",
        "retail": true
      }
    ],
    "Mangle": [
      {
        "name": "Mangle",
        "count": 2,
        "confidence": 0.4,
        "sample": "local angle,dist = Mangle(pm,px,py,waypoint.m,waypoint.x,waypoint.y)",
        "retail": true
      },
      {
        "name": "MapCoords.Mangle",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MapCoords.Mangle(...)",
        "retail": true
      }
    ],
    "SetCooldown": [
      {
        "name": "SetCooldown",
        "count": 2,
        "confidence": 0.4,
        "sample": "icon.cooldown:SetCooldown(cooltime,cooldur,coolactive and 1 or 0)",
        "retail": true
      }
    ],
    "ShowNothing": [
      {
        "name": "ShowNothing",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ShowNothing()",
        "retail": true
      }
    ],
    "ShowText": [
      {
        "name": "ShowText",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:ShowText(pretext or arrivaltoytext or waypoint:GetArrowTitle() or waypoint:GetTitle())",
        "retail": true
      }
    ],
    "PointToNextTimer": [
      {
        "name": "PointToNextTimer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:PointToNextTimer(elapsed)",
        "retail": true
      }
    ],
    "PointToNextInPath": [
      {
        "name": "PointToNextInPath",
        "count": 5,
        "confidence": 1.0,
        "sample": "local newway = self:PointToNextInPath(waypoint.in_set)",
        "retail": true
      }
    ],
    "CalculateSpeed": [
      {
        "name": "CalculateSpeed",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:CalculateSpeed(elapsed,dist)",
        "retail": true
      }
    ],
    "DoAudioCues": [
      {
        "name": "DoAudioCues",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:DoAudioCues(targetangle,playerangle,dist)",
        "retail": true
      }
    ],
    "GetUnitSpeed": [
      {
        "name": "GetUnitSpeed",
        "count": 7,
        "confidence": 1.0,
        "sample": "if GetUnitSpeed(\"player\")==0 then laststoptime=t else lastmovetime=t end",
        "retail": true
      }
    ],
    "PlaySoundFile": [
      {
        "name": "PlaySoundFile",
        "count": 8,
        "confidence": 1.0,
        "sample": "PlaySoundFile(\"Sound\\\\Doodad\\\\BoatDockedWarning.wav\")",
        "retail": true
      }
    ],
    "ShowWarning": [
      {
        "name": "ShowWarning",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.ArrowFrame.ShowWarning then self.ArrowFrame:ShowWarning() end",
        "retail": true
      }
    ],
    "CalculateETA": [
      {
        "name": "CalculateETA",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:CalculateETA(speed,dist,elapsed)",
        "retail": true
      }
    ],
    "IsSwimming": [
      {
        "name": "IsSwimming",
        "count": 2,
        "confidence": 0.4,
        "sample": "spd = IsSwimming() and swimspd or (LibRover.maxspeedinzone[ZGV.CurrentMapID][1] * BASE_MOVEMENT_SPEED) -- *7 is for recalc from multiplier to yds/s  -- or max(mntspd,flyspd)",
        "retail": true
      }
    ],
    "RestoreMapSettings": [
      {
        "name": "RestoreMapSettings",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZGV.PointerMap:RestoreMapSettings()",
        "retail": true
      }
    ],
    "SetNotice": [
      {
        "name": "SetNotice",
        "count": 3,
        "confidence": 0.6,
        "sample": "if Pointer.tmp_taxis_assumed then  ArrowFrame:SetNotice(L['pointer_arrow_noflightdata'])",
        "retail": true
      }
    ],
    "ShouldShowPreview": [
      {
        "name": "ShouldShowPreview",
        "count": 6,
        "confidence": 1.0,
        "sample": "if ZGV.PointerMap:ShouldShowPreview() then -- enable preview on guides with no steps while inside valid instance",
        "retail": true
      }
    ],
    "IsPreviewShown": [
      {
        "name": "IsPreviewShown",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not ZGV.PointerMap:IsPreviewShown()  then",
        "retail": true
      }
    ],
    "ShowInstance": [
      {
        "name": "ShowInstance",
        "count": 3,
        "confidence": 0.6,
        "sample": "ArrowFrame:ShowInstance()",
        "retail": true
      }
    ],
    "HideInstance": [
      {
        "name": "HideInstance",
        "count": 3,
        "confidence": 0.6,
        "sample": "ArrowFrame:HideInstance()",
        "retail": true
      }
    ],
    "ClearSets": [
      {
        "name": "ClearSets",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not WorldMapFrame:IsVisible() and self.waypoints and #self.waypoints > 0 and not ZGV.Frame:IsVisible() then self:ClearSets() end -- Hide waypoints and ants if we are not looking at the world map.",
        "retail": true
      }
    ],
    "GetCurrentMapContinentAndZone": [
      {
        "name": "GetCurrentMapContinentAndZone",
        "count": 1,
        "confidence": 0.2,
        "sample": "--if GetCurrentMapContinentAndZone()~=waypoint.c then end",
        "retail": true
      }
    ],
    "ArrowFrame_OnClick": [
      {
        "name": "Pointer.ArrowFrame_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer.ArrowFrame_OnClick(nil,\"RightButton\") --***Is possible for it to not work if click goes up and down without OnUpdate running***",
        "retail": true
      }
    ],
    "ZoneIsOutdoor": [
      {
        "name": "ZoneIsOutdoor",
        "count": 4,
        "confidence": 0.8,
        "sample": "--if ZoneIsOutdoor(waypoint.m) then errortxt,show_stairs=nil end  -- Don't warn about floors on outdoor maps. TODO: remove later.",
        "retail": true
      },
      {
        "name": "Lib.ZoneIsOutdoor",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (system and Lib.ZoneIsOutdoor(zoneid)) or (meta.flyable==true) then",
        "retail": true
      }
    ],
    "ShowStairs": [
      {
        "name": "ShowStairs",
        "count": 4,
        "confidence": 0.8,
        "sample": "if ArrowFrame.ShowStairs then ArrowFrame:ShowStairs(going_up) end",
        "retail": true
      }
    ],
    "IsOutdoors": [
      {
        "name": "IsOutdoors",
        "count": 1,
        "confidence": 0.2,
        "sample": "or\t (waypoint.pathnode.indoors and IsOutdoors())",
        "retail": true
      }
    ],
    "BoatLockEnable": [
      {
        "name": "BoatLockEnable",
        "count": 3,
        "confidence": 0.6,
        "sample": "LibRover:BoatLockEnable(\"arrival\")",
        "retail": true
      }
    ],
    "ClearWaypoint": [
      {
        "name": "Pointer.ClearWaypoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer.ClearWaypoint()",
        "retail": true
      }
    ],
    "ShowShip": [
      {
        "name": "ShowShip",
        "count": 4,
        "confidence": 0.8,
        "sample": "ArrowFrame:ShowShip()",
        "retail": true
      }
    ],
    "ShowArrived": [
      {
        "name": "ShowArrived",
        "count": 2,
        "confidence": 0.4,
        "sample": "ArrowFrame:ShowArrived()",
        "retail": true
      }
    ],
    "GetNextInPath": [
      {
        "name": "GetNextInPath",
        "count": 5,
        "confidence": 1.0,
        "sample": "local nextway = self:GetNextInPath(\"route\")",
        "retail": true
      }
    ],
    "ShowError": [
      {
        "name": "ShowError",
        "count": 3,
        "confidence": 0.6,
        "sample": "ArrowFrame:ShowError()",
        "retail": true
      }
    ],
    "ShowTraveling": [
      {
        "name": "ShowTraveling",
        "count": 3,
        "confidence": 0.6,
        "sample": "ArrowFrame:ShowTraveling(elapsed,angle,dist)",
        "retail": true
      }
    ],
    "ColorGradient": [
      {
        "name": "ColorGradient",
        "count": 1,
        "confidence": 0.2,
        "sample": "local r,g,b = ColorGradient(perc, br, bg, bb, mr, mg, mb, gr, gg, gb)",
        "retail": true
      }
    ],
    "ShowTaxi": [
      {
        "name": "ShowTaxi",
        "count": 2,
        "confidence": 0.4,
        "sample": "ArrowFrame:ShowTaxi()",
        "retail": true
      }
    ],
    "CastingBarFrame_ApplyAlpha": [
      {
        "name": "CastingBarFrame_ApplyAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "CastingBarFrame_ApplyAlpha(CBF, 1.0);",
        "retail": true
      }
    ],
    "SetStatusBarColor": [
      {
        "name": "SetStatusBarColor",
        "count": 87,
        "confidence": 1.0,
        "sample": "CBF:SetStatusBarColor(0,1,0)",
        "retail": true
      }
    ],
    "SetMinMaxValues": [
      {
        "name": "SetMinMaxValues",
        "count": 66,
        "confidence": 1.0,
        "sample": "CBF:SetMinMaxValues(0, CBF.maxValue);",
        "retail": true
      }
    ],
    "GetCurStep": [
      {
        "name": "GetCurStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "local step = ZGV.CurrentGuide and ZGV.CurrentGuide:GetCurStep()",
        "retail": true
      }
    ],
    "ArrowFrame_OnMouseDown": [
      {
        "name": "Pointer.ArrowFrame_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.ArrowFrame_OnMouseDown(frame,button)",
        "retail": true
      }
    ],
    "QueueShowRouteMenu": [
      {
        "name": "QueueShowRouteMenu",
        "count": 5,
        "confidence": 1.0,
        "sample": "Pointer:QueueShowRouteMenu(Pointer.ArrowFrame)",
        "retail": true
      }
    ],
    "ShowRouteMenu": [
      {
        "name": "ShowRouteMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer.ShowRouteMenuTimer = ZGV:ScheduleTimer(function() Pointer:ShowRouteMenu(arrowframe) end, 0.01)",
        "retail": true
      }
    ],
    "GetBackdrop": [
      {
        "name": "GetBackdrop",
        "count": 7,
        "confidence": 1.0,
        "sample": "--local backdrop = DropDownList1:GetBackdrop()",
        "retail": true
      }
    ],
    "GetCFG": [
      {
        "name": "GetCFG",
        "count": 30,
        "confidence": 1.0,
        "sample": "checked = function() return LibRover:GetCFG(\"avoid_portals\") end,",
        "retail": true
      }
    ],
    "Explain": [
      {
        "name": "Explain",
        "count": 2,
        "confidence": 0.4,
        "sample": "func = function() LibRover:Explain() end,",
        "retail": true
      },
      {
        "name": "IL.Explain",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.Explain(itemlink)",
        "retail": true
      }
    ],
    "ArrowFrame_SetAlpha": [
      {
        "name": "Pointer.ArrowFrame_SetAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.ArrowFrame_SetAlpha(but,v)",
        "retail": true
      }
    ],
    "ArrowFrame_SetScale": [
      {
        "name": "Pointer.ArrowFrame_SetScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.ArrowFrame_SetScale(but,v)",
        "retail": true
      }
    ],
    "IsActiveBattlefieldArena": [
      {
        "name": "IsActiveBattlefieldArena",
        "count": 1,
        "confidence": 0.2,
        "sample": "return ZGV.db.profile.corpsearrow and UnitIsDeadOrGhost(\"player\") and select(2, IsInInstance()) ~= \"pvp\" and not (IsActiveBattlefieldArena and IsActiveBattlefieldArena()) and not ZGV.Parser.ConditionEnv.hasbuff(\"spell:5384\")",
        "retail": true
      }
    ],
    "FindCorpseArrow": [
      {
        "name": "FindCorpseArrow",
        "count": 3,
        "confidence": 0.6,
        "sample": "Pointer:FindCorpseArrow()",
        "retail": true
      }
    ],
    "SetCorpseArrow": [
      {
        "name": "SetCorpseArrow",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Pointer:SetCorpseArrow(m,x,y)",
        "retail": true
      }
    ],
    "RecordCorpseLocation": [
      {
        "name": "RecordCorpseLocation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:RecordCorpseLocation()",
        "retail": true
      }
    ],
    "ForgetCorpse": [
      {
        "name": "ForgetCorpse",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:ForgetCorpse()",
        "retail": true
      }
    ],
    "UnitIsGhost": [
      {
        "name": "UnitIsGhost",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not UnitIsGhost(\"player\") then self:Debug(\"FindCorpseArrow: player isn't a ghost...\") return end",
        "retail": true
      }
    ],
    "GetCorpseMapPosition": [
      {
        "name": "C_DeathInfo.GetCorpseMapPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "if map then corpse = C_DeathInfo.GetCorpseMapPosition(map) end",
        "retail": true
      }
    ],
    "AddArrowSkin": [
      {
        "name": "AddArrowSkin",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Pointer:AddArrowSkin(id,name)",
        "retail": true
      }
    ],
    "GetSkinPath": [
      {
        "name": "GetSkinPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:GetSkinPath(skin)",
        "retail": true
      }
    ],
    "GetDir": [
      {
        "name": "GetDir",
        "count": 26,
        "confidence": 1.0,
        "sample": "return self.ArrowSkins[skin or ZGV.db.options.arrowskin]:GetDir()",
        "retail": true
      }
    ],
    "GetArrowSkin": [
      {
        "name": "GetArrowSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.ArrowSkinDir = self:GetArrowSkin():GetDir()",
        "retail": true
      }
    ],
    "SetPlayerTexture": [
      {
        "name": "SetPlayerTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "Minimap:SetPlayerTexture(ZGV.DIR..\"\\\\skins\\\\minimaparrow-player\")",
        "retail": true
      }
    ],
    "GetDist": [
      {
        "name": "GetDist",
        "count": 1,
        "confidence": 0.2,
        "sample": "local dist,xd,yd = GetDist(self,node2)",
        "retail": true
      },
      {
        "name": "Lib.GetDist",
        "count": 1,
        "confidence": 0.2,
        "sample": "local centermatch = self.centernode.m==node.m and Lib.GetDist(self.centernode,node)<self.radius",
        "retail": true
      }
    ],
    "TestGetNextInPathOne": [
      {
        "name": "TestGetNextInPathOne",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:TestGetNextInPathOne(x,y,n)",
        "retail": true
      }
    ],
    "TestGetNextInPathOne_SetWay": [
      {
        "name": "TestGetNextInPathOne_SetWay",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:TestGetNextInPathOne_SetWay(way)",
        "retail": true
      }
    ],
    "Debug_MoveManualsForward": [
      {
        "name": "Debug_MoveManualsForward",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:Debug_MoveManualsForward()",
        "retail": true
      }
    ],
    "TestGetNextInPath": [
      {
        "name": "TestGetNextInPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:TestGetNextInPath(n)",
        "retail": true
      }
    ],
    "GetMapName": [
      {
        "name": "Pointer.GetMapName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.GetMapName(id)",
        "retail": true
      }
    ],
    "UnwrapMapFloor": [
      {
        "name": "Pointer.UnwrapMapFloor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local map,floor = Pointer.UnwrapMapFloor(mapfloor)",
        "retail": true
      }
    ],
    "MinimapNodeFlash": [
      {
        "name": "MinimapNodeFlash",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:MinimapNodeFlash(s)",
        "retail": true
      }
    ],
    "SetBlipTexture": [
      {
        "name": "SetBlipTexture",
        "count": 3,
        "confidence": 0.6,
        "sample": "Minimap:SetBlipTexture(\"Interface\\\\MINIMAP\\\\ObjectIcons\")",
        "retail": true
      }
    ],
    "MinimapNodeFlashOff": [
      {
        "name": "MinimapNodeFlashOff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:MinimapNodeFlashOff()",
        "retail": true
      }
    ],
    "GetFocusedStep": [
      {
        "name": "GetFocusedStep",
        "count": 6,
        "confidence": 1.0,
        "sample": "local step = ZGV:GetFocusedStep() or ZGV.CurrentStep or {}",
        "retail": true
      }
    ],
    "GetWayTitle": [
      {
        "name": "GetWayTitle",
        "count": 3,
        "confidence": 0.6,
        "sample": "or (point.parentStep and point.parentStep:GetWayTitle())",
        "retail": true
      }
    ],
    "SetAntSpacing": [
      {
        "name": "SetAntSpacing",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Pointer:SetAntSpacing(spacing)",
        "retail": true
      }
    ],
    "Display": [
      {
        "name": "Display",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Display (time-phased) ants between all .ants -enabled sets in Pointer.pointsets .",
        "retail": true
      }
    ],
    "ResetAnts": [
      {
        "name": "ResetAnts",
        "count": 5,
        "confidence": 1.0,
        "sample": "if map~=lastmap then self:ResetAnts() end",
        "retail": true
      }
    ],
    "ShowSet": [
      {
        "name": "ShowSet",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Pointer:ShowSet(waypath,name,callback)",
        "retail": true
      }
    ],
    "Thread_ShowSet": [
      {
        "name": "Thread_ShowSet",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Pointer:Thread_ShowSet(waypath,name,callback)",
        "retail": true
      }
    ],
    "PathFoundHandler": [
      {
        "name": "PathFoundHandler",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function PathFoundHandler(state,path,ext,reason)",
        "retail": true
      },
      {
        "name": "ZGV.Pointer.PathFoundHandler",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.Pointer.PathFoundHandler(\"failure\")",
        "retail": true
      },
      {
        "name": "WW.PathFoundHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WW.PathFoundHandler(state,path,ext,reason)",
        "retail": true
      }
    ],
    "GetTextAsItinerary": [
      {
        "name": "GetTextAsItinerary",
        "count": 2,
        "confidence": 0.4,
        "sample": "local wayp = {map=node.m,x=node.x,y=node.y, title=node.maplabel, arrowtitle=node:GetTextAsItinerary(),player=node.player, type=\"route\", icon=icon, pathnode=node, iconoverride=true }",
        "retail": true
      }
    ],
    "GetActionIcon": [
      {
        "name": "GetActionIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "wayp.actionicon = node:GetActionIcon(path[i-1],path[i+1])",
        "retail": true
      }
    ],
    "ResetFollowing": [
      {
        "name": "ResetFollowing",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:ResetFollowing()",
        "retail": true
      }
    ],
    "QueueFindPath": [
      {
        "name": "QueueFindPath",
        "count": 7,
        "confidence": 1.0,
        "sample": "LibRover:QueueFindPath(0,0,0,way.m,way.x,way.y, PathFoundHandler,",
        "retail": true
      }
    ],
    "QuestPOI_PointToMe": [
      {
        "name": "Pointer.QuestPOI_PointToMe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.QuestPOI_PointToMe(poiBut,args)",
        "retail": true
      }
    ],
    "QuestPOIGetIconInfo": [
      {
        "name": "QuestPOIGetIconInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _,x,y=QuestPOIGetIconInfo(questId)",
        "retail": true
      }
    ],
    "QuestWatchPOI_PointToMe": [
      {
        "name": "Pointer.QuestWatchPOI_PointToMe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer.QuestWatchPOI_PointToMe(poiBut,args)",
        "retail": true
      }
    ],
    "GetFrameTimeMilliseconds": [
      {
        "name": "GetFrameTimeMilliseconds",
        "count": 2,
        "confidence": 0.4,
        "sample": "--if lastCycleMilli==GetFrameTimeMilliseconds() then lastCycles=lastCycles+1 end  if lastCycles>10 then return end",
        "retail": true
      }
    ],
    "DelayedRun": [
      {
        "name": "DelayedRun",
        "count": 5,
        "confidence": 1.0,
        "sample": "--ZGV:DelayedRun(\"OnUpdate\", function() ZGV.Viewer:Update() end)",
        "retail": true
      }
    ],
    "GetWaypointByGoal": [
      {
        "name": "GetWaypointByGoal",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:GetWaypointByGoal(goal)",
        "retail": true
      }
    ],
    "SetArrowToFirstCompletableGoal": [
      {
        "name": "SetArrowToFirstCompletableGoal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:SetArrowToFirstCompletableGoal()",
        "retail": true
      }
    ],
    "SetWaypointToFirst": [
      {
        "name": "SetWaypointToFirst",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\tPointer:SetWaypointToFirst()",
        "retail": true
      }
    ],
    "Debug_FreeWorldMapScale": [
      {
        "name": "Debug_FreeWorldMapScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:Debug_FreeWorldMapScale()",
        "retail": true
      }
    ],
    "FIXMAPZOOM": [
      {
        "name": "FIXMAPZOOM",
        "count": 2,
        "confidence": 0.4,
        "sample": "FIXMAPZOOM()  -- in MapCoords",
        "retail": true
      }
    ],
    "TestPOIs": [
      {
        "name": "TestPOIs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Pointer:TestPOIs()",
        "retail": true
      }
    ],
    "LimitValue": [
      {
        "name": "LimitValue",
        "count": 8,
        "confidence": 1.0,
        "sample": "LimitValue(topLeftX       )",
        "retail": true
      }
    ],
    "PointToTimed": [
      {
        "name": "PointToTimed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewer_TaxiMarker_Mixin:PointToTimed(parent,pin,timeout)",
        "retail": true
      }
    ],
    "OnCanvasClickHandler": [
      {
        "name": "OnCanvasClickHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.onCanvasClickHandler = self.onCanvasClickHandler or function(mapCanvas, button, cursorX, cursorY) return self:OnCanvasClickHandler(button, cursorX, cursorY) end;",
        "retail": true
      }
    ],
    "AddCanvasClickHandler": [
      {
        "name": "AddCanvasClickHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "mapCanvas:AddCanvasClickHandler(self.onCanvasClickHandler, priority);",
        "retail": true
      }
    ],
    "RecordNextClick": [
      {
        "name": "RecordNextClick",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\", function() Pointer.OverlayProvider:RecordNextClick() end)",
        "retail": true
      }
    ],
    "AddCursorHandler": [
      {
        "name": "AddCursorHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "--mapCanvas:AddCursorHandler(self.cursorHandler, priority);",
        "retail": true
      }
    ],
    "RemoveCursorHandler": [
      {
        "name": "RemoveCursorHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "--mapCanvas:RemoveCursorHandler(self.cursorHandler);",
        "retail": true
      }
    ],
    "RecordFakeCoords": [
      {
        "name": "RecordFakeCoords",
        "count": 3,
        "confidence": 0.6,
        "sample": "LibRover:RecordFakeCoords()",
        "retail": true
      }
    ],
    "Debug_AddPointToPath": [
      {
        "name": "Debug_AddPointToPath",
        "count": 2,
        "confidence": 0.4,
        "sample": "Pointer:Debug_AddPointToPath(map,x,y)",
        "retail": true
      }
    ],
    "ShowMapMarkers": [
      {
        "name": "ShowMapMarkers",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Pointer:ShowMapMarkers()",
        "retail": true
      }
    ],
    "RegisterGuideSorting": [
      {
        "name": "RegisterGuideSorting",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZGV:RegisterGuideSorting({",
        "retail": true
      }
    ],
    "Classic": [
      {
        "name": "Classic",
        "count": 521,
        "confidence": 1.0,
        "sample": "\"Classic (1-50)\",",
        "retail": true
      }
    ],
    "Crusade": [
      {
        "name": "Crusade",
        "count": 125,
        "confidence": 1.0,
        "sample": "\"The Burning Crusade (10-50)\",",
        "retail": true
      }
    ],
    "King": [
      {
        "name": "King",
        "count": 160,
        "confidence": 1.0,
        "sample": "\"Wrath of the Lich King (10-50)\",",
        "retail": true
      }
    ],
    "Cataclysm": [
      {
        "name": "Cataclysm",
        "count": 97,
        "confidence": 1.0,
        "sample": "\"Cataclysm (10-50)\",",
        "retail": true
      }
    ],
    "Pandaria": [
      {
        "name": "Pandaria",
        "count": 296,
        "confidence": 1.0,
        "sample": "\"Pandaria (10-50)\",",
        "retail": true
      }
    ],
    "Draenor": [
      {
        "name": "Draenor",
        "count": 865,
        "confidence": 1.0,
        "sample": "\"Draenor (10-50)\",",
        "retail": true
      }
    ],
    "Legion": [
      {
        "name": "Legion",
        "count": 1664,
        "confidence": 1.0,
        "sample": "\"Legion (10-50)\",",
        "retail": true
      }
    ],
    "Azeroth": [
      {
        "name": "Azeroth",
        "count": 632,
        "confidence": 1.0,
        "sample": "\"Battle for Azeroth (10-50)\",",
        "retail": true
      }
    ],
    "Shadowlands": [
      {
        "name": "Shadowlands",
        "count": 1012,
        "confidence": 1.0,
        "sample": "\"Shadowlands (50-60)\",",
        "retail": true
      }
    ],
    "Human": [
      {
        "name": "Human",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Human (1-5)\",",
        "retail": true
      }
    ],
    "Dwarf": [
      {
        "name": "Dwarf",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Dwarf (1-5)\",",
        "retail": true
      }
    ],
    "Elf": [
      {
        "name": "Elf",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"Night Elf (1-11)\",",
        "retail": true
      }
    ],
    "Gnome": [
      {
        "name": "Gnome",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Gnome (1-5)\",",
        "retail": true
      }
    ],
    "Draenei": [
      {
        "name": "Draenei",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Draenei (1-5)\",",
        "retail": true
      }
    ],
    "Worgen": [
      {
        "name": "Worgen",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"Worgen (1-13)\",",
        "retail": true
      }
    ],
    "Pandaren": [
      {
        "name": "Pandaren",
        "count": 8,
        "confidence": 1.0,
        "sample": "\"Pandaren (1-15)\",",
        "retail": true
      }
    ],
    "Knight": [
      {
        "name": "Knight",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"Death Knight (8-10)\",",
        "retail": true
      }
    ],
    "Hunter": [
      {
        "name": "Hunter",
        "count": 3,
        "confidence": 0.6,
        "sample": "\"Demon Hunter (98-100)\"})",
        "retail": true
      }
    ],
    "Orc": [
      {
        "name": "Orc",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Orc (1-5)\",",
        "retail": true
      }
    ],
    "Undead": [
      {
        "name": "Undead",
        "count": 3,
        "confidence": 0.6,
        "sample": "\"Undead (1-10)\",",
        "retail": true
      }
    ],
    "Tauren": [
      {
        "name": "Tauren",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Tauren (1-4)\",",
        "retail": true
      }
    ],
    "Troll": [
      {
        "name": "Troll",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Troll (1-5)\",",
        "retail": true
      }
    ],
    "Goblin": [
      {
        "name": "Goblin",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"Goblin (1-10)\",",
        "retail": true
      }
    ],
    "GetNPCNameFromCache": [
      {
        "name": "GetNPCNameFromCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetNPCNameFromCache(NPCid)",
        "retail": true
      }
    ],
    "FindNPCIdByName": [
      {
        "name": "FindNPCIdByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Localizers:FindNPCIdByName(testname)",
        "retail": true
      }
    ],
    "PruneNPCs": [
      {
        "name": "PruneNPCs",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Localizers:PruneNPCs()",
        "retail": true
      }
    ],
    "GetQuestDataFromTooltip": [
      {
        "name": "GetQuestDataFromTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Localizers:GetQuestDataFromTooltip(qid)",
        "retail": true
      }
    ],
    "PruneCachedQuestData": [
      {
        "name": "PruneCachedQuestData",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function PruneCachedQuestData()",
        "retail": true
      }
    ],
    "GetQuestInfo": [
      {
        "name": "C_QuestLog.GetQuestInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "title = C_QuestLog.GetQuestInfo(qid)",
        "retail": true
      }
    ],
    "Azuremyst": [
      {
        "name": "Azuremyst",
        "count": 1,
        "confidence": 0.2,
        "sample": "[775]=Enum_Micro, [776]=Enum_Micro, -- Exodar, Azuremyst (scenario)",
        "retail": true
      }
    ],
    "Rift": [
      {
        "name": "Rift",
        "count": 7,
        "confidence": 1.0,
        "sample": "[717]=Enum_Micro, -- Dreadscar Rift (Warlock OH)",
        "retail": true
      }
    ],
    "Quarters": [
      {
        "name": "Quarters",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1690]=Enum_Micro,\t\t\t\t-- Aspirant's Quarters (Bastion)",
        "retail": true
      }
    ],
    "Hold": [
      {
        "name": "Hold",
        "count": 33,
        "confidence": 1.0,
        "sample": "[1707]=Enum_Micro,[1708]=Enum_Micro,\t\t\t-- Elysian Hold (Bastion)",
        "retail": true
      }
    ],
    "Forest": [
      {
        "name": "Forest",
        "count": 551,
        "confidence": 1.0,
        "sample": "[1701]=Enum_Zone,[1702]=Enum_Zone,[1703]=Enum_Zone, -- Heart of the Forest (Ardenweald)",
        "retail": true
      }
    ],
    "Primus": [
      {
        "name": "Primus",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1698]=Enum_Micro,\t\t\t\t\t-- Seat of the Primus (Maldraxxus)",
        "retail": true
      }
    ],
    "Torghast": [
      {
        "name": "Torghast",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1705]=Enum_Micro,\t\t\t\t\t-- Torghast (Main Floor)",
        "retail": true
      }
    ],
    "Souls": [
      {
        "name": "Souls",
        "count": 18,
        "confidence": 1.0,
        "sample": "[1652]=Enum_Micro,\t\t\t\t\t-- Vault of Souls (Maldraxxus)",
        "retail": true
      }
    ],
    "Den": [
      {
        "name": "Den",
        "count": 14,
        "confidence": 1.0,
        "sample": "[1824]=Enum_Micro,\t\t\t\t\t-- Matriarch's Den (Ardenweald)",
        "retail": true
      }
    ],
    "GetMapChildrenInfo": [
      {
        "name": "C_Map.GetMapChildrenInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "for i,cData in pairs(C_Map.GetMapChildrenInfo(mapID)) do",
        "retail": true
      }
    ],
    "GetAllContinents": [
      {
        "name": "ZGV.GetAllContinents",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.GetAllContinents()",
        "retail": true
      }
    ],
    "GetMapGroupID": [
      {
        "name": "ZGV.GetMapGroupID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.GetMapGroupID(id,floor)",
        "retail": true
      },
      {
        "name": "C_Map.GetMapGroupID",
        "count": 4,
        "confidence": 0.8,
        "sample": "mapInfo.groupID = C_Map.GetMapGroupID(id)",
        "retail": true
      }
    ],
    "GetMapFloorNameByID": [
      {
        "name": "ZGV.GetMapFloorNameByID",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.GetMapFloorNameByID(id,floor)",
        "retail": true
      }
    ],
    "GetMapGroupMembersInfo": [
      {
        "name": "C_Map.GetMapGroupMembersInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local groupInfo = C_Map.GetMapGroupMembersInfo(groupID)  if not groupInfo then break end",
        "retail": true
      }
    ],
    "MapsOnDifferentFloors": [
      {
        "name": "ZGV.MapsOnDifferentFloors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.MapsOnDifferentFloors(m1,m2)",
        "retail": true
      }
    ],
    "EQ": [
      {
        "name": "EQ",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function EQ(a,b) return abs(a-b)<0.1 end",
        "retail": true
      }
    ],
    "NE": [
      {
        "name": "NE",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function NE(a,b) return not EQ(a,b) end",
        "retail": true
      }
    ],
    "GetMAPDATAFromGWP": [
      {
        "name": "GetMAPDATAFromGWP",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetMAPDATAFromGWP()",
        "retail": true
      }
    ],
    "GWP": [
      {
        "name": "GWP",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _,d1=GWP(i,{x=0,y=0})",
        "retail": true
      }
    ],
    "CloneHBDMap": [
      {
        "name": "CloneHBDMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CloneHBDMap(src,dst,force,changes)",
        "retail": true
      }
    ],
    "ForceHBDMapUpdate": [
      {
        "name": "ForceHBDMapUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ForceHBDMapUpdate(id)",
        "retail": true
      }
    ],
    "FixHBD": [
      {
        "name": "FixHBD",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function FixHBD()",
        "retail": true
      }
    ],
    "GetMAPDATAFromHBD": [
      {
        "name": "GetMAPDATAFromHBD",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetMAPDATAFromHBD()",
        "retail": true
      }
    ],
    "FixMAPDATA": [
      {
        "name": "FixMAPDATA",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function FixMAPDATA()",
        "retail": true
      }
    ],
    "Shallows": [
      {
        "name": "Shallows",
        "count": 1,
        "confidence": 0.2,
        "sample": "MAPDATA[694]={1220,2441,4040,1485,990} -- Helmouth Shallows (Hunter scenario) on Stormheim",
        "retail": true
      }
    ],
    "HBDmaptest": [
      {
        "name": "HBDmaptest",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HBDmaptest(n)",
        "retail": true
      }
    ],
    "HBDuse": [
      {
        "name": "HBDuse",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HBDuse(id)",
        "retail": true
      }
    ],
    "GetCosmicWorldMapCoordinatesFromWorld": [
      {
        "name": "GetCosmicWorldMapCoordinatesFromWorld",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetCosmicWorldMapCoordinatesFromWorld(x,y,instance,allowOutOfBounds)",
        "retail": true
      }
    ],
    "GetAzerothWorldMapCoordinatesFromWorld": [
      {
        "name": "GetAzerothWorldMapCoordinatesFromWorld",
        "count": 4,
        "confidence": 0.8,
        "sample": "return ZGV.HBD:GetAzerothWorldMapCoordinatesFromWorld(x,y,zone,true)",
        "retail": true
      }
    ],
    "Mxlt_get_virtual_cont_data": [
      {
        "name": "MapCoords.Mxlt_get_virtual_cont_data",
        "count": 2,
        "confidence": 0.4,
        "sample": "dm1 = MapCoords.Mxlt_get_virtual_cont_data(map1,map2)",
        "retail": true
      }
    ],
    "TranslateVirtualContinents": [
      {
        "name": "MapCoords.TranslateVirtualContinents",
        "count": 2,
        "confidence": 0.4,
        "sample": "function MapCoords.TranslateVirtualContinents()",
        "retail": true
      }
    ],
    "Mxlt_test": [
      {
        "name": "MapCoords.Mxlt_test",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MapCoords.Mxlt_test()",
        "retail": true
      }
    ],
    "F": [
      {
        "name": "F",
        "count": 2,
        "confidence": 0.4,
        "sample": "--  local T={}  function F(i) return T[i] end",
        "retail": true
      }
    ],
    "CreateZoomLevels": [
      {
        "name": "CreateZoomLevels",
        "count": 2,
        "confidence": 0.4,
        "sample": "function MapCanvasScrollControllerMixin:CreateZoomLevels()",
        "retail": true
      }
    ],
    "SetMouseWheelZoomMode": [
      {
        "name": "SetMouseWheelZoomMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "--WorldMapFrame:GetCanvasContainer():SetMouseWheelZoomMode(MAP_CANVAS_MOUSE_WHEEL_ZOOM_BEHAVIOR_SMOOTH)",
        "retail": true
      }
    ],
    "SetupMapButtons": [
      {
        "name": "SetupMapButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "function MapCoords:SetupMapButtons()",
        "retail": true
      }
    ],
    "IsDragging": [
      {
        "name": "IsDragging",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (MapCoords.MapButton:IsDragging()) then  -- yes, it's the inside button that's dragging the parent.",
        "retail": true
      }
    ],
    "GetRect": [
      {
        "name": "GetRect",
        "count": 2,
        "confidence": 0.4,
        "sample": "local px,py = parent:GetRect()",
        "retail": true
      }
    ],
    "ShowMapMenu": [
      {
        "name": "ShowMapMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\", function() MapCoords:ShowMapMenu() end)",
        "retail": true
      }
    ],
    "EmbeddedItemTooltip_SetItemByID": [
      {
        "name": "EmbeddedItemTooltip_SetItemByID",
        "count": 2,
        "confidence": 0.4,
        "sample": "EmbeddedItemTooltip_SetItemByID(GameTooltip.ItemTooltip,item.itemid)",
        "retail": true
      }
    ],
    "GetItemQualityColor": [
      {
        "name": "C_Item.GetItemQualityColor",
        "count": 9,
        "confidence": 1.0,
        "sample": "local _,_,_,color = C_Item.GetItemQualityColor(2)",
        "retail": true
      },
      {
        "name": "GetItemQualityColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local r, g, b, hex = GetItemQualityColor(qualityColor)",
        "retail": true
      }
    ],
    "LoadPoint": [
      {
        "name": "LoadPoint",
        "count": 3,
        "confidence": 0.6,
        "sample": "Poi:LoadPoint(point)",
        "retail": true
      }
    ],
    "ParsePoints": [
      {
        "name": "ParsePoints",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Poi:ParsePoints()",
        "retail": true
      }
    ],
    "PreparePoints": [
      {
        "name": "PreparePoints",
        "count": 3,
        "confidence": 0.6,
        "sample": "Poi:PreparePoints()",
        "retail": true
      }
    ],
    "SetupLoader": [
      {
        "name": "SetupLoader",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Poi:SetupLoader()",
        "retail": true
      }
    ],
    "RefreshPoints": [
      {
        "name": "RefreshPoints",
        "count": 4,
        "confidence": 0.8,
        "sample": "Poi.CurrentZoneDataProvider:RefreshPoints()",
        "retail": true
      }
    ],
    "EventHandler": [
      {
        "name": "EventHandler",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function EventHandler(self, event, ...)",
        "retail": true
      },
      {
        "name": "ActionButton.EventHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton.EventHandler(self, event)",
        "retail": true
      },
      {
        "name": "PointerMap.EventHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PointerMap.EventHandler(self,event)",
        "retail": true
      },
      {
        "name": "Scan.EventHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan.EventHandler(frame,event,...)",
        "retail": true
      },
      {
        "name": "Appraiser.EventHandler",
        "count": 4,
        "confidence": 0.8,
        "sample": "--Appraiser.EventHandler(frame,\"ZGV_AFTER_SINGLE_AILU\")",
        "retail": true
      }
    ],
    "GameTooltip_CalculatePadding": [
      {
        "name": "GameTooltip_CalculatePadding",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_CalculatePadding(GameTooltip)",
        "retail": true
      }
    ],
    "DisplayPoints": [
      {
        "name": "DisplayPoints",
        "count": 3,
        "confidence": 0.6,
        "sample": "DataProvider:DisplayPoints(mapid)",
        "retail": true
      }
    ],
    "HideQuestRewardGlow": [
      {
        "name": "HideQuestRewardGlow",
        "count": 3,
        "confidence": 0.6,
        "sample": "function QuestItem:HideQuestRewardGlow()",
        "retail": true
      }
    ],
    "ShowQuestRewardGlow": [
      {
        "name": "ShowQuestRewardGlow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function QuestItem:ShowQuestRewardGlow(index,reason)",
        "retail": true
      }
    ],
    "IsQuestItemsReady": [
      {
        "name": "IsQuestItemsReady",
        "count": 2,
        "confidence": 0.4,
        "sample": "function QuestItem:IsQuestItemsReady()",
        "retail": true
      }
    ],
    "GetNumQuestChoices": [
      {
        "name": "GetNumQuestChoices",
        "count": 7,
        "confidence": 1.0,
        "sample": "local totalrewards=GetNumQuestChoices()",
        "retail": true
      }
    ],
    "GetQuestItemLink": [
      {
        "name": "GetQuestItemLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "local link= GetQuestItemLink(\"choice\",index)",
        "retail": true
      }
    ],
    "GetQuestRewardIndex": [
      {
        "name": "GetQuestRewardIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "function QuestItem:GetQuestRewardIndex()",
        "retail": true
      }
    ],
    "QuestItem_StepReset": [
      {
        "name": "QuestItem_StepReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function QuestItem_StepReset(step)",
        "retail": true
      }
    ],
    "TestCurStepForQuestItem": [
      {
        "name": "TestCurStepForQuestItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "function QuestItem:TestCurStepForQuestItem()",
        "retail": true
      }
    ],
    "CreateQuestPopup": [
      {
        "name": "CreateQuestPopup",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function CreateQuestPopup()",
        "retail": true
      }
    ],
    "SetHyperlinksEnabled": [
      {
        "name": "SetHyperlinksEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetHyperlinksEnabled(true) :Disable() :SetJustifyH(\"CENTER\")",
        "retail": true
      }
    ],
    "SetCursorPosition": [
      {
        "name": "SetCursorPosition",
        "count": 24,
        "confidence": 1.0,
        "sample": ":SetCursorPosition(0)",
        "retail": true
      }
    ],
    "OnOpen": [
      {
        "name": "OnOpen",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnOpen() -- If the guide is completed then we know all the needed trainings",
        "retail": true
      }
    ],
    "RemoveButton": [
      {
        "name": "RemoveButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.NotificationCenterOld:RemoveButton(self:GetName())",
        "retail": true
      }
    ],
    "ModifyQuestPopup": [
      {
        "name": "ModifyQuestPopup",
        "count": 3,
        "confidence": 0.6,
        "sample": "function QuestItem:ModifyQuestPopup(questid,itemid,popupNum,replacing)",
        "retail": true
      }
    ],
    "OnEscape": [
      {
        "name": "OnEscape",
        "count": 4,
        "confidence": 0.8,
        "sample": "AutoEquip.Popup:OnEscape() AutoEquip.Popup:Hide()",
        "retail": true
      }
    ],
    "FoundQuestItemForCurStep": [
      {
        "name": "FoundQuestItemForCurStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "--/run ZGV.ItemScore:FoundQuestItemForCurStep(235,19019)",
        "retail": true
      }
    ],
    "ReEquipNormalItem": [
      {
        "name": "ReEquipNormalItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function QuestItem:ReEquipNormalItem()",
        "retail": true
      }
    ],
    "GetReverseLookupTable": [
      {
        "name": "GetReverseLookupTable",
        "count": 12,
        "confidence": 1.0,
        "sample": "local CTR = CT:GetReverseLookupTable()",
        "retail": true
      }
    ],
    "StartUp": [
      {
        "name": "StartUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "CreatureDetector:StartUp()",
        "retail": true
      },
      {
        "name": "Details.Coach.StartUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.StartUp()",
        "retail": true
      }
    ],
    "UnitIsPlayer": [
      {
        "name": "UnitIsPlayer",
        "count": 4,
        "confidence": 0.8,
        "sample": "if UnitIsPlayer(\"target\") then -- Screw the IDs this one is safer",
        "retail": true
      }
    ],
    "DetectMount": [
      {
        "name": "DetectMount",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:DetectMount(not force)",
        "retail": true
      }
    ],
    "UnitCreatureType": [
      {
        "name": "UnitCreatureType",
        "count": 2,
        "confidence": 0.4,
        "sample": "elseif (CTR[UnitCreatureType(\"target\")] == \"Non-combat Pet\") then --",
        "retail": true
      }
    ],
    "DetectPet": [
      {
        "name": "DetectPet",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:DetectPet(not force)",
        "retail": true
      }
    ],
    "DetectHunterPet": [
      {
        "name": "DetectHunterPet",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:DetectHunterPet(not force)",
        "retail": true
      }
    ],
    "UnitIsUnit": [
      {
        "name": "UnitIsUnit",
        "count": 22,
        "confidence": 1.0,
        "sample": "if UnitIsUnit(\"target\",\"pet\") then return end -- own pet",
        "retail": true
      }
    ],
    "Report": [
      {
        "name": "Report",
        "count": 74,
        "confidence": 1.0,
        "sample": "CreatureDetector:Report(\"hunterpet\",guide,owned)",
        "retail": true
      }
    ],
    "MountJournalIconSetup": [
      {
        "name": "CreatureDetector.MountJournalIconSetup",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"ToggleCollectionsJournal\",function() CreatureDetector.MountJournalIconSetup() end)",
        "retail": true
      }
    ],
    "UpdateMountIcons": [
      {
        "name": "CreatureDetector.UpdateMountIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CreatureDetector.UpdateMountIcons()",
        "retail": true
      }
    ],
    "MountJournalIcon_OnClick": [
      {
        "name": "CreatureDetector.MountJournalIcon_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "button:SetScript(\"OnClick\", function() CreatureDetector.MountJournalIcon_OnClick(blizzbutton.spellID) end) -- Find the mount",
        "retail": true
      }
    ],
    "AreRequirementsMet": [
      {
        "name": "AreRequirementsMet",
        "count": 20,
        "confidence": 1.0,
        "sample": "if not self:AreRequirementsMet(nil,\"strict\") then return true,true,\"req unmet\" end",
        "retail": true
      },
      {
        "name": "Goldguide.Common.AreRequirementsMet",
        "count": 2,
        "confidence": 0.4,
        "sample": "if string.match(guide.title_short, name) and Goldguide.Common.AreRequirementsMet(guide) then",
        "retail": true
      }
    ],
    "NeedsUpdating": [
      {
        "name": "NeedsUpdating",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Step:NeedsUpdating()",
        "retail": true
      }
    ],
    "PrepareCompletion": [
      {
        "name": "PrepareCompletion",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Step:PrepareCompletion(full)",
        "retail": true
      }
    ],
    "IsAuxiliarySkippable": [
      {
        "name": "IsAuxiliarySkippable",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Step:IsAuxiliarySkippable()",
        "retail": true
      }
    ],
    "ReloadStep": [
      {
        "name": "ReloadStep",
        "count": 3,
        "confidence": 0.6,
        "sample": "--clickfun=function() ZGV:ReloadStep() end,",
        "retail": true
      }
    ],
    "GetNext": [
      {
        "name": "GetNext",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Step:GetNext()",
        "retail": true
      }
    ],
    "GetStep": [
      {
        "name": "GetStep",
        "count": 5,
        "confidence": 1.0,
        "sample": "local stepobj = self.parentGuide:GetStep(step)",
        "retail": true
      }
    ],
    "GetNextValidStep": [
      {
        "name": "GetNextValidStep",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Step:GetNextValidStep()",
        "retail": true
      }
    ],
    "GetNextCompletableStep": [
      {
        "name": "GetNextCompletableStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Step:GetNextCompletableStep()",
        "retail": true
      }
    ],
    "CheckVisitedGotos": [
      {
        "name": "CheckVisitedGotos",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Step:CheckVisitedGotos()",
        "retail": true
      }
    ],
    "CanBeSticky": [
      {
        "name": "CanBeSticky",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Step:CanBeSticky()",
        "retail": true
      }
    ],
    "SelectClosestWaypoint": [
      {
        "name": "SelectClosestWaypoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:SelectClosestWaypoint()",
        "retail": true
      }
    ],
    "GetLibrary": [
      {
        "name": "GetLibrary",
        "count": 126,
        "confidence": 1.0,
        "sample": "local LibDeflate = LibStub:GetLibrary(\"LibDeflate\")",
        "retail": true
      }
    ],
    "GS": [
      {
        "name": "GS",
        "count": 1,
        "confidence": 0.2,
        "sample": "Packet GS (GuideState):",
        "retail": true
      }
    ],
    "CreatePacket_GuideStatus": [
      {
        "name": "CreatePacket_GuideStatus",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:CreatePacket_GuideStatus()",
        "retail": true
      }
    ],
    "GetStepStatus": [
      {
        "name": "GetStepStatus",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function GetStepStatus(step)",
        "retail": true
      }
    ],
    "CreatePackets_StepData": [
      {
        "name": "CreatePackets_StepData",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Sync:CreatePackets_StepData()",
        "retail": true
      }
    ],
    "GetStepSource": [
      {
        "name": "GetStepSource",
        "count": 3,
        "confidence": 0.6,
        "sample": "local steplines = self:GetStepSource(ZGV.CurrentStepNum)",
        "retail": true
      }
    ],
    "CreatePacket_StatusRequest": [
      {
        "name": "CreatePacket_StatusRequest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:CreatePacket_StatusRequest()",
        "retail": true
      }
    ],
    "CreatePacket_StepRequest": [
      {
        "name": "CreatePacket_StepRequest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:CreatePacket_StepRequest()",
        "retail": true
      }
    ],
    "CreatePacket_SlaveRequest": [
      {
        "name": "CreatePacket_SlaveRequest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:CreatePacket_SlaveRequest()",
        "retail": true
      }
    ],
    "OnChatReceived": [
      {
        "name": "OnChatReceived",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- /run SDs={ZGV.Sync:CreatePackets_StepData()} for i,pck in ipairs(SDs) do ZGV.Sync:OnChatReceived(\"zygor7sync\",pck,\"party\",\"Alice\") end",
        "retail": true
      }
    ],
    "SplitXXIntoPacket": [
      {
        "name": "SplitXXIntoPacket",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Sync:SplitXXIntoPacket(packet,data)",
        "retail": true
      }
    ],
    "DecodeForWoWAddonChannel": [
      {
        "name": "DecodeForWoWAddonChannel",
        "count": 10,
        "confidence": 1.0,
        "sample": "local msg_decoded = LibDeflate:DecodeForWoWAddonChannel(msg)",
        "retail": true
      }
    ],
    "DecompressDeflate": [
      {
        "name": "DecompressDeflate",
        "count": 15,
        "confidence": 1.0,
        "sample": "local msg_unpacked = LibDeflate:DecompressDeflate(msg_decoded)",
        "retail": true
      }
    ],
    "Unpack": [
      {
        "name": "Unpack",
        "count": 2,
        "confidence": 0.4,
        "sample": "Sync:Unpack(packet,data)",
        "retail": true
      }
    ],
    "HandleReceivedPacket": [
      {
        "name": "HandleReceivedPacket",
        "count": 2,
        "confidence": 0.4,
        "sample": "Sync:HandleReceivedPacket(packet)",
        "retail": true
      }
    ],
    "OnPartyStatusChanged": [
      {
        "name": "OnPartyStatusChanged",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:OnPartyStatusChanged()",
        "retail": true
      }
    ],
    "BroadcastStepContents": [
      {
        "name": "BroadcastStepContents",
        "count": 6,
        "confidence": 1.0,
        "sample": "Sync:BroadcastStepContents()",
        "retail": true
      }
    ],
    "AnnounceStatus": [
      {
        "name": "AnnounceStatus",
        "count": 9,
        "confidence": 1.0,
        "sample": "self:AnnounceStatus()",
        "retail": true
      }
    ],
    "ShowSlaveConfirmation": [
      {
        "name": "ShowSlaveConfirmation",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ShowSlaveConfirmation(packet.sender,packet.guide)",
        "retail": true
      }
    ],
    "UpdateButtonColor": [
      {
        "name": "UpdateButtonColor",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:UpdateButtonColor()",
        "retail": true
      }
    ],
    "GuideShareButton_OnEnter": [
      {
        "name": "ZGV.Frame.GuideShareButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV.Frame.Controls.GuideShareButton:IsMouseOver() then ZGV.Frame.GuideShareButton_OnEnter() end  -- goes to Sync:OnShareButtonEnter() anyway",
        "retail": true
      },
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnEnter(self)",
        "retail": true
      }
    ],
    "OnShareButtonEnter": [
      {
        "name": "OnShareButtonEnter",
        "count": 3,
        "confidence": 0.6,
        "sample": "if ZGV.Frame.Controls.GuideShareButton:IsMouseOver() then ZGV.Frame.GuideShareButton_OnEnter() end  -- goes to Sync:OnShareButtonEnter() anyway",
        "retail": true
      }
    ],
    "IsPartyStatusComplete": [
      {
        "name": "IsPartyStatusComplete",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self:IsPartyStatusComplete() then self:DeclarePartyStatusComplete() end",
        "retail": true
      }
    ],
    "DeclarePartyStatusComplete": [
      {
        "name": "DeclarePartyStatusComplete",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self:IsPartyStatusComplete() then self:DeclarePartyStatusComplete() end",
        "retail": true
      }
    ],
    "IsClearToProceed": [
      {
        "name": "IsClearToProceed",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Sync:IsClearToProceed(stepnum)",
        "retail": true
      }
    ],
    "IsSnapping": [
      {
        "name": "IsSnapping",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not self:IsEnabled() or not self:IsSnapping() then return true end",
        "retail": true
      }
    ],
    "GetStepGoalPartyStatusText": [
      {
        "name": "GetStepGoalPartyStatusText",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:GetStepGoalPartyStatusText(stepnum,goalnum)",
        "retail": true
      }
    ],
    "OrderedPairs": [
      {
        "name": "ZGV.OrderedPairs",
        "count": 15,
        "confidence": 1.0,
        "sample": "for k,v in ZGV.OrderedPairs(self.PartyStatus) do table.insert(partysort,k) end",
        "retail": true
      }
    ],
    "GetAheadBehind": [
      {
        "name": "GetAheadBehind",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:GetAheadBehind()",
        "retail": true
      }
    ],
    "Send": [
      {
        "name": "Send",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:Send(self:CreatePacket_GuideStatus())",
        "retail": true
      }
    ],
    "ResetPartyStatus": [
      {
        "name": "ResetPartyStatus",
        "count": 3,
        "confidence": 0.6,
        "sample": "Sync:ResetPartyStatus()",
        "retail": true
      }
    ],
    "RequestSlaveMode": [
      {
        "name": "RequestSlaveMode",
        "count": 4,
        "confidence": 0.8,
        "sample": "--self:RequestSlaveMode() -- For new members. Existing slaves should ignore this.",
        "retail": true
      }
    ],
    "Init": [
      {
        "name": "Init",
        "count": 10,
        "confidence": 1.0,
        "sample": "function Sync:Init()",
        "retail": true
      }
    ],
    "RegisterComm": [
      {
        "name": "RegisterComm",
        "count": 9,
        "confidence": 1.0,
        "sample": "AceComm:RegisterComm(PREFIX,Sync.OnChatReceived)",
        "retail": true
      }
    ],
    "ON_ZGV_STEP_CHANGED": [
      {
        "name": "ON_ZGV_STEP_CHANGED",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ON_ZGV_STEP_CHANGED()",
        "retail": true
      }
    ],
    "RequestPartyStatus": [
      {
        "name": "RequestPartyStatus",
        "count": 4,
        "confidence": 0.8,
        "sample": "if self:IsEnabled() then self:AnnounceStatus() self:RequestPartyStatus() end",
        "retail": true
      }
    ],
    "IsChecked": [
      {
        "name": "IsChecked",
        "count": 7,
        "confidence": 1.0,
        "sample": "if dialog.text3checkbox:IsChecked() then",
        "retail": true
      }
    ],
    "RequestStepContents": [
      {
        "name": "RequestStepContents",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self:IsSlave() then self:RequestStepContents()",
        "retail": true
      }
    ],
    "SetEnabled": [
      {
        "name": "SetEnabled",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZGV.Frame.Controls.PrevButton:SetEnabled(not self:IsSlave())",
        "retail": true
      }
    ],
    "ShowMasterConfirmation": [
      {
        "name": "ShowMasterConfirmation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:ShowMasterConfirmation()",
        "retail": true
      }
    ],
    "IsInNC": [
      {
        "name": "IsInNC",
        "count": 5,
        "confidence": 1.0,
        "sample": "if ZGV.PopupHandler:IsInNC(\"ZygorShareInitiate\") then return end",
        "retail": true
      }
    ],
    "GetParty_NotSlaveNames": [
      {
        "name": "GetParty_NotSlaveNames",
        "count": 6,
        "confidence": 1.0,
        "sample": "local notslaves = self:GetParty_NotSlaveNames()",
        "retail": true
      }
    ],
    "FormatNiceGuideTitle": [
      {
        "name": "FormatNiceGuideTitle",
        "count": 4,
        "confidence": 0.8,
        "sample": "self.InitiateConfirmPopup:SetText(L[\"share_invite_master\"]:format(ZGV:FormatNiceGuideTitle(ZGV.CurrentGuide.title),#zygor_users<GetNumGroupMembers()-1 and (#zygor_users>1 and L['share_invite_master_party_manyzygors'] or L['share_invite_master_party_onezygor']):format(comma_and(zygor_users)) or \"\"))",
        "retail": true
      }
    ],
    "UnitIsConnected": [
      {
        "name": "UnitIsConnected",
        "count": 6,
        "confidence": 1.0,
        "sample": "if UnitExists(unit) and UnitIsConnected(unit) then",
        "retail": true
      }
    ],
    "CompressDeflate": [
      {
        "name": "CompressDeflate",
        "count": 15,
        "confidence": 1.0,
        "sample": "local message_packed = LibDeflate:CompressDeflate(message)",
        "retail": true
      }
    ],
    "EncodeForWoWAddonChannel": [
      {
        "name": "EncodeForWoWAddonChannel",
        "count": 10,
        "confidence": 1.0,
        "sample": "local message_encoded = LibDeflate:EncodeForWoWAddonChannel(message_packed)",
        "retail": true
      }
    ],
    "SendCommMessage": [
      {
        "name": "SendCommMessage",
        "count": 27,
        "confidence": 1.0,
        "sample": "AceComm:SendCommMessage(PREFIX,message_encoded,\"PARTY\")",
        "retail": true
      }
    ],
    "SendSelf": [
      {
        "name": "SendSelf",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:SendSelf(message,...)",
        "retail": true
      }
    ],
    "RequestAllStatuses": [
      {
        "name": "RequestAllStatuses",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Sync:RequestAllStatuses(callback,timeout)",
        "retail": true
      }
    ],
    "GetParty_SlaveNames": [
      {
        "name": "GetParty_SlaveNames",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Sync:GetParty_SlaveNames()",
        "retail": true
      }
    ],
    "OnShareButtonClick": [
      {
        "name": "OnShareButtonClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Sync:OnShareButtonClick()",
        "retail": true
      }
    ],
    "PlayerIsOnQuest": [
      {
        "name": "PlayerIsOnQuest",
        "count": 36,
        "confidence": 1.0,
        "sample": "function PlayerIsOnQuest(id)",
        "retail": true
      }
    ],
    "CacheQuestNames": [
      {
        "name": "CacheQuestNames",
        "count": 2,
        "confidence": 0.4,
        "sample": "--QuestDB:CacheQuestNames()",
        "retail": true
      }
    ],
    "CreateButton": [
      {
        "name": "CreateButton",
        "count": 126,
        "confidence": 1.0,
        "sample": "function QuestDB:CreateButton()",
        "retail": true
      }
    ],
    "SetQuestForButton": [
      {
        "name": "SetQuestForButton",
        "count": 6,
        "confidence": 1.0,
        "sample": "function QuestDB:SetQuestForButton(questIdent)",
        "retail": true
      }
    ],
    "IsQuestFlaggedCompletedOnAccount": [
      {
        "name": "C_QuestLog.IsQuestFlaggedCompletedOnAccount",
        "count": 1,
        "confidence": 0.2,
        "sample": "if C_QuestLog.IsQuestFlaggedCompletedOnAccount and C_QuestLog.IsQuestFlaggedCompletedOnAccount(questID) then",
        "retail": true
      }
    ],
    "MaybeShowButton": [
      {
        "name": "MaybeShowButton",
        "count": 3,
        "confidence": 0.6,
        "sample": "function QuestDB:MaybeShowButton()",
        "retail": true
      }
    ],
    "MaybeStopOnThisStep": [
      {
        "name": "MaybeStopOnThisStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "function QuestDB:MaybeStopOnThisStep()",
        "retail": true
      }
    ],
    "FocusNextStepForQuest": [
      {
        "name": "FocusNextStepForQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function QuestDB:FocusNextStepForQuest()",
        "retail": true
      }
    ],
    "RequestLoadQuestByID": [
      {
        "name": "C_QuestLog.RequestLoadQuestByID",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_QuestLog.RequestLoadQuestByID(quest)",
        "retail": true
      }
    ],
    "GetTitleForQuestID": [
      {
        "name": "C_QuestLog.GetTitleForQuestID",
        "count": 2,
        "confidence": 0.4,
        "sample": "return C_QuestLog.GetTitleForQuestID(questID)",
        "retail": true
      }
    ],
    "GetBuildInfo": [
      {
        "name": "GetBuildInfo",
        "count": 53,
        "confidence": 1.0,
        "sample": "local version, build, date, tocversion = GetBuildInfo()",
        "retail": true
      }
    ],
    "CacheQuestNameResult": [
      {
        "name": "CacheQuestNameResult",
        "count": 1,
        "confidence": 0.2,
        "sample": "function QuestDB:CacheQuestNameResult(event,quest,success)",
        "retail": true
      }
    ],
    "SortGuides": [
      {
        "name": "SortGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SortGuides(a,b)",
        "retail": true
      }
    ],
    "GetChain": [
      {
        "name": "GetChain",
        "count": 1,
        "confidence": 0.2,
        "sample": "local chain = QuestDB:GetChain(questid,nil,nil,\"\")",
        "retail": true
      }
    ],
    "OnAccept": [
      {
        "name": "OnAccept",
        "count": 4,
        "confidence": 0.8,
        "sample": "Popup:OnAccept()",
        "retail": true
      }
    ],
    "OnDecline": [
      {
        "name": "OnDecline",
        "count": 3,
        "confidence": 0.6,
        "sample": "Popup:OnDecline()",
        "retail": true
      }
    ],
    "OnMinimize": [
      {
        "name": "OnMinimize",
        "count": 1,
        "confidence": 0.2,
        "sample": "Popup:OnMinimize()",
        "retail": true
      }
    ],
    "AdjustSize": [
      {
        "name": "AdjustSize",
        "count": 5,
        "confidence": 1.0,
        "sample": "Popup:AdjustSize()",
        "retail": true
      }
    ],
    "OnSettings": [
      {
        "name": "OnSettings",
        "count": 3,
        "confidence": 0.6,
        "sample": "Popup:OnSettings()",
        "retail": true
      }
    ],
    "OnClose": [
      {
        "name": "OnClose",
        "count": 3,
        "confidence": 0.6,
        "sample": "Popup:OnClose() --should not be needed most of the time",
        "retail": true
      }
    ],
    "QueuePush": [
      {
        "name": "QueuePush",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.PopupHandler:QueuePush(self)",
        "retail": true
      }
    ],
    "Accept": [
      {
        "name": "Accept",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Popup.private:Accept(popup)",
        "retail": true
      }
    ],
    "Decline": [
      {
        "name": "Decline",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Popup.private:Decline(popup)",
        "retail": true
      }
    ],
    "Escape": [
      {
        "name": "Escape",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Popup.private:Escape(popup)",
        "retail": true
      }
    ],
    "More": [
      {
        "name": "More",
        "count": 34,
        "confidence": 1.0,
        "sample": "function Popup.private:More(popup)",
        "retail": true
      }
    ],
    "OnMore": [
      {
        "name": "OnMore",
        "count": 1,
        "confidence": 0.2,
        "sample": "popup:OnMore()",
        "retail": true
      }
    ],
    "Minimize": [
      {
        "name": "Minimize",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Popup.private:Minimize(popup,time,hideDelay)",
        "retail": true
      }
    ],
    "GetDebugName": [
      {
        "name": "GetDebugName",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:Debug(\"&popup Minimize initialized: \"..popup:GetDebugName())",
        "retail": true
      }
    ],
    "GetNCTextureInfo": [
      {
        "name": "GetNCTextureInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local texture,texcoords = PopupHandler:GetNCTextureInfo(popup.type)",
        "retail": true
      }
    ],
    "QueuePop": [
      {
        "name": "QueuePop",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:ScheduleTimer(function() ZGV.PopupHandler:QueuePop() end,2) --pop the next popup in the queue.",
        "retail": true
      }
    ],
    "Settings": [
      {
        "name": "Settings",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Popup.private:Settings(popup)",
        "retail": true
      }
    ],
    "SetToggle": [
      {
        "name": "SetToggle",
        "count": 10,
        "confidence": 1.0,
        "sample": ":SetToggle(true)",
        "retail": true
      }
    ],
    "ReturnToast": [
      {
        "name": "ReturnToast",
        "count": 2,
        "confidence": 0.4,
        "sample": "popup.minimize:SetScript(\"OnClick\",function() popup.private:Minimize(popup) PopupHandler:ReturnToast() end)",
        "retail": true
      }
    ],
    "SavedShow": [
      {
        "name": "SavedShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "popup:SavedShow() --Show was overwrote and saved here.",
        "retail": true
      }
    ],
    "AddStyle": [
      {
        "name": "AddStyle",
        "count": 6,
        "confidence": 1.0,
        "sample": "function SkinProto:AddStyle(id,name,inherit)",
        "retail": true
      }
    ],
    "GetStyle": [
      {
        "name": "GetStyle",
        "count": 3,
        "confidence": 0.6,
        "sample": "function SkinProto:GetStyle(id)",
        "retail": true
      }
    ],
    "AddSkin": [
      {
        "name": "AddSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Skins:AddSkin(id,name,inherit)",
        "retail": true
      }
    ],
    "GetSkin": [
      {
        "name": "GetSkin",
        "count": 10,
        "confidence": 1.0,
        "sample": "function ZGV.Skins:GetSkin(id)",
        "retail": true
      }
    ],
    "AddStyleToBlizzardScrollBar": [
      {
        "name": "AddStyleToBlizzardScrollBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Skins:AddStyleToBlizzardScrollBar(scrollbar)",
        "retail": true
      }
    ],
    "GetProp": [
      {
        "name": "GetProp",
        "count": 3,
        "confidence": 0.6,
        "sample": "function StyleProto:GetProp(propertyname,...)",
        "retail": true
      }
    ],
    "SetDisabledTexture": [
      {
        "name": "SetDisabledTexture",
        "count": 29,
        "confidence": 1.0,
        "sample": "if not button:GetDisabledTexture() then button:SetDisabledTexture(\"dummy\") end",
        "retail": true
      }
    ],
    "SetMapID": [
      {
        "name": "SetMapID",
        "count": 1,
        "confidence": 0.2,
        "sample": "WorldMapFrame:SetMapID(arrowpoint.m);",
        "retail": true
      }
    ],
    "DestinationWaypoint": [
      {
        "name": "Pointer.DestinationWaypoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:Debug(\"&waypoints Finding path to: Pointer.DestinationWaypoint (there are manual points)\")",
        "retail": true
      }
    ],
    "QueueProcess": [
      {
        "name": "QueueProcess",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.WorldQuests:QueueProcess()",
        "retail": true
      }
    ],
    "SetupMenuArray": [
      {
        "name": "SetupMenuArray",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WW:SetupMenuArray()",
        "retail": true
      }
    ],
    "FindMailbox": [
      {
        "name": "FindMailbox",
        "count": 2,
        "confidence": 0.4,
        "sample": "{text=\"Mailbox\",icon=\"Interface\\\\Minimap\\\\Tracking\\\\Mailbox\",func = function() ZGV.WhoWhere:FindMailbox() CloseDropDownForks() end},",
        "retail": true
      }
    ],
    "CreateWorkerFrame": [
      {
        "name": "CreateWorkerFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WW:CreateWorkerFrame()",
        "retail": true
      }
    ],
    "CalcStep": [
      {
        "name": "CalcStep",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CalcStep()",
        "retail": true
      }
    ],
    "CalcThread_Direct": [
      {
        "name": "CalcThread_Direct",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CalcThread_Direct()",
        "retail": true
      }
    ],
    "FindNPC_Direct": [
      {
        "name": "FindNPC_Direct",
        "count": 2,
        "confidence": 0.4,
        "sample": "WW:FindNPC_Direct(typ)",
        "retail": true
      }
    ],
    "CalcMailboxThread": [
      {
        "name": "CalcMailboxThread",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CalcMailboxThread()",
        "retail": true
      }
    ],
    "LeechLibRover": [
      {
        "name": "LeechLibRover",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WW:LeechLibRover()",
        "retail": true
      }
    ],
    "InteractionStart": [
      {
        "name": "InteractionStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WW:InteractionStart(_,interactionID)",
        "retail": true
      }
    ],
    "InteractionEnd": [
      {
        "name": "InteractionEnd",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WW:InteractionEnd()",
        "retail": true
      }
    ],
    "DragStart": [
      {
        "name": "DragStart",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function DragStart(self)",
        "retail": true
      }
    ],
    "GetAttribute": [
      {
        "name": "GetAttribute",
        "count": 67,
        "confidence": 1.0,
        "sample": "local objtype = self:GetAttribute(\"type\")",
        "retail": true
      }
    ],
    "PickupItem": [
      {
        "name": "C_Item.PickupItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_Item.PickupItem(object)",
        "retail": true
      }
    ],
    "PickupPetAction": [
      {
        "name": "PickupPetAction",
        "count": 2,
        "confidence": 0.4,
        "sample": "PickupPetAction(object)",
        "retail": true
      }
    ],
    "PickupSpell": [
      {
        "name": "PickupSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "PickupSpell(object)",
        "retail": true
      }
    ],
    "SetMouseClickEnabled": [
      {
        "name": "SetMouseClickEnabled",
        "count": 7,
        "confidence": 1.0,
        "sample": "frame:SetMouseClickEnabled(false)",
        "retail": true
      }
    ],
    "SetActionButtonsQueued": [
      {
        "name": "SetActionButtonsQueued",
        "count": 2,
        "confidence": 0.4,
        "sample": "ActionBar:SetActionButtonsQueued()",
        "retail": true
      }
    ],
    "ReanchorButtons": [
      {
        "name": "ReanchorButtons",
        "count": 5,
        "confidence": 1.0,
        "sample": "ActionBar:ReanchorButtons()",
        "retail": true
      }
    ],
    "SetButton": [
      {
        "name": "SetButton",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.ActionBar:SetButton(data[1],data[2],data[3],counter)",
        "retail": true
      }
    ],
    "SavePosition": [
      {
        "name": "SavePosition",
        "count": 7,
        "confidence": 1.0,
        "sample": "ActionBar:SavePosition()",
        "retail": true
      },
      {
        "name": "LibWindow.SavePosition",
        "count": 9,
        "confidence": 1.0,
        "sample": "LibWindow.SavePosition(pluginContainerFrame)",
        "retail": true
      }
    ],
    "ShowDisabledOverlay": [
      {
        "name": "ShowDisabledOverlay",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionBar:ShowDisabledOverlay()",
        "retail": true
      }
    ],
    "PoolInit": [
      {
        "name": "ActionBar.PoolInit",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not ZGV.IsRetail and freshbutton then ActionBar.PoolInit(button) end -- classic does not have custom creationFunc yet, need to call it by hand",
        "retail": true
      }
    ],
    "GetMacroBody": [
      {
        "name": "GetMacroBody",
        "count": 1,
        "confidence": 0.2,
        "sample": "macro_text = GetMacroBody(object)",
        "retail": true
      }
    ],
    "DoEmote": [
      {
        "name": "DoEmote",
        "count": 485,
        "confidence": 1.0,
        "sample": "macro_tooltip = macro_text:match(\"\\\"(.*)\\\"\") -- /run DoEmote(\"blah\") -> blah",
        "retail": true
      }
    ],
    "MCM": [
      {
        "name": "MCM",
        "count": 3,
        "confidence": 0.6,
        "sample": "macro_text = (macro_name and \"#showtooltip \"..macro_name..\"\\n\" or \"\")..\"/run ZGV:MCM(4)\\n/cleartarget\\n/target \"..name..\"\\n/run ZGV:MRM()\"",
        "retail": true
      }
    ],
    "GetSkillDataByName": [
      {
        "name": "GetSkillDataByName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local skilldata = ZGV.Professions:GetSkillDataByName(object.tradeskill)",
        "retail": true
      }
    ],
    "GetTradeSkillTexture": [
      {
        "name": "C_TradeSkillUI.GetTradeSkillTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "macro_texture = C_TradeSkillUI.GetTradeSkillTexture(skilldata.skill)",
        "retail": true
      }
    ],
    "OpenTradeSkill": [
      {
        "name": "C_TradeSkillUI.OpenTradeSkill",
        "count": 3,
        "confidence": 0.6,
        "sample": "macro_text = (macro_name and \"#showtooltip \"..macro_name..\"\\n\" or \"\")..\"/run C_TradeSkillUI.OpenTradeSkill(\"..skilldata.parent..\")\"",
        "retail": true
      }
    ],
    "CreateGoaltype": [
      {
        "name": "CreateGoaltype",
        "count": 3,
        "confidence": 0.6,
        "sample": "macro_text = (macro_name and \"#showtooltip \"..macro_name..\"\\n\" or \"\")..\"/run ZGV.ActionBar:CreateGoaltype(\"..ActionBar.creategoal..\")\"",
        "retail": true
      }
    ],
    "PoolOverlayInit": [
      {
        "name": "ActionBar.PoolOverlayInit",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not ZGV.IsRetail and freshoverlay then ActionBar.PoolOverlayInit(overlay) end -- classic does not have creationFunc yet, need to call it by hand",
        "retail": true
      }
    ],
    "PoolResetter": [
      {
        "name": "ActionBar.PoolResetter",
        "count": 1,
        "confidence": 0.2,
        "sample": "for _,button in ipairs(ActionBar.KeyboundButtons) do ActionBar.PoolResetter(nil,button) end",
        "retail": true
      }
    ],
    "SetSpellByID": [
      {
        "name": "SetSpellByID",
        "count": 14,
        "confidence": 1.0,
        "sample": "GameTooltip:SetSpellByID(button:GetAttribute(\"spellid\"))",
        "retail": true
      }
    ],
    "SetPetAction": [
      {
        "name": "SetPetAction",
        "count": 5,
        "confidence": 1.0,
        "sample": "GameTooltip:SetPetAction(button:GetAttribute(\"petid\"))",
        "retail": true
      }
    ],
    "GetOwner": [
      {
        "name": "GetOwner",
        "count": 18,
        "confidence": 1.0,
        "sample": "if (GameTooltip:GetOwner()==self) then",
        "retail": true
      }
    ],
    "UpdateCooldown": [
      {
        "name": "UpdateCooldown",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:UpdateCooldown()",
        "retail": true
      }
    ],
    "GetItemCooldown": [
      {
        "name": "C_Container.GetItemCooldown",
        "count": 5,
        "confidence": 1.0,
        "sample": "starts,dur,ends = C_Container.GetItemCooldown(button:GetAttribute(\"itemid\"))",
        "retail": true
      },
      {
        "name": "ZGV.F.GetItemCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.GetItemCooldown(itemID)",
        "retail": true
      },
      {
        "name": "C_Item.GetItemCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemCooldown() end",
        "retail": true
      }
    ],
    "GetPetActionCooldown": [
      {
        "name": "GetPetActionCooldown",
        "count": 3,
        "confidence": 0.6,
        "sample": "starts,dur,ends = GetPetActionCooldown(button:GetAttribute(\"petid\"))",
        "retail": true
      }
    ],
    "SetDrawSwipe": [
      {
        "name": "SetDrawSwipe",
        "count": 4,
        "confidence": 0.8,
        "sample": "self.cooldown:SetDrawSwipe(true);",
        "retail": true
      }
    ],
    "CooldownFrame_Set": [
      {
        "name": "CooldownFrame_Set",
        "count": 4,
        "confidence": 0.8,
        "sample": "CooldownFrame_Set(self.cooldown, starts,dur,ends)",
        "retail": true
      }
    ],
    "Gossip": [
      {
        "name": "Gossip",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"GOSSIP_SHOW\",function(...) return QuestAuto:Gossip(...) end)",
        "retail": true
      },
      {
        "name": "QuestAuto.Gossip",
        "count": 2,
        "confidence": 0.4,
        "sample": "QuestAuto.Gossip(ZGV)",
        "retail": true
      }
    ],
    "Greeting": [
      {
        "name": "Greeting",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"QUEST_GREETING\",function(...) return QuestAuto:Greeting(...) end)",
        "retail": true
      }
    ],
    "Detail": [
      {
        "name": "Detail",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"QUEST_DETAIL\",function(...) return QuestAuto:Detail(...) end)",
        "retail": true
      },
      {
        "name": "QuestAuto.Detail",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestAuto.Detail(ZGV)",
        "retail": true
      }
    ],
    "Progress": [
      {
        "name": "Progress",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"QUEST_PROGRESS\",function(...) return QuestAuto:Progress(...) end)",
        "retail": true
      },
      {
        "name": "QuestAuto.Progress",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestAuto.Progress(ZGV)",
        "retail": true
      }
    ],
    "Complete": [
      {
        "name": "Complete",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:AddEventHandler(\"QUEST_COMPLETE\",function(...) return QuestAuto:Complete(...) end)",
        "retail": true
      },
      {
        "name": "QuestAuto.Complete",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestAuto.Complete(ZGV)",
        "retail": true
      }
    ],
    "Finished": [
      {
        "name": "Finished",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"QUEST_FINISHED\",function(...) return QuestAuto:Finished(...) end)",
        "retail": true
      }
    ],
    "Accepted": [
      {
        "name": "Accepted",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"QUEST_ACCEPTED\",function(...) return QuestAuto:Accepted(...) end)",
        "retail": true
      }
    ],
    "Retry": [
      {
        "name": "Retry",
        "count": 1,
        "confidence": 0.2,
        "sample": "function QuestAuto:Retry()",
        "retail": true
      }
    ],
    "SelectAvailableQuest": [
      {
        "name": "C_GossipInfo.SelectAvailableQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_GossipInfo.SelectAvailableQuest(questInfo.questID)",
        "retail": true
      },
      {
        "name": "SelectAvailableQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "SelectAvailableQuest(qnum)",
        "retail": true
      }
    ],
    "SelectActiveQuest": [
      {
        "name": "C_GossipInfo.SelectActiveQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_GossipInfo.SelectActiveQuest(questInfo.questID)",
        "retail": true
      },
      {
        "name": "SelectActiveQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "SelectActiveQuest(qnum)",
        "retail": true
      }
    ],
    "QuestDetailAcceptButton_OnClick": [
      {
        "name": "QuestDetailAcceptButton_OnClick",
        "count": 3,
        "confidence": 0.6,
        "sample": "QuestDetailAcceptButton_OnClick()",
        "retail": true
      }
    ],
    "GetQuestReward": [
      {
        "name": "GetQuestReward",
        "count": 4,
        "confidence": 0.8,
        "sample": "GetQuestReward(max(QuestInfoFrame.itemChoice,1))",
        "retail": true
      }
    ],
    "CompleteQuest": [
      {
        "name": "CompleteQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "CompleteQuest()",
        "retail": true
      }
    ],
    "QuestInfoItem_OnClick": [
      {
        "name": "QuestInfoItem_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestInfoItem_OnClick(button)",
        "retail": true
      }
    ],
    "GetNumActiveQuests": [
      {
        "name": "GetNumActiveQuests",
        "count": 1,
        "confidence": 0.2,
        "sample": "for qnum=1,GetNumActiveQuests() do",
        "retail": true
      }
    ],
    "GetActiveTitle": [
      {
        "name": "GetActiveTitle",
        "count": 1,
        "confidence": 0.2,
        "sample": "queststurnin[qnum] = GetActiveTitle(qnum)",
        "retail": true
      }
    ],
    "GetActiveQuestID": [
      {
        "name": "GetActiveQuestID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local questID = GetActiveQuestID(qnum)",
        "retail": true
      }
    ],
    "If_Complete_achieveid": [
      {
        "name": "If_Complete_achieveid",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Guide:If_Complete_achieveid()",
        "retail": true
      }
    ],
    "If_Complete_mounts": [
      {
        "name": "If_Complete_mounts",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Guide:If_Complete_mounts()",
        "retail": true
      }
    ],
    "If_Complete_pets": [
      {
        "name": "If_Complete_pets",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Guide:If_Complete_pets()",
        "retail": true
      }
    ],
    "GetCompletionText": [
      {
        "name": "GetCompletionText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Guide:GetCompletionText(mode)",
        "retail": true
      }
    ],
    "Load": [
      {
        "name": "Load",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Guide:Load(step)",
        "retail": true
      },
      {
        "name": "Ejc.Load",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.Load()",
        "retail": true
      }
    ],
    "GetFutureGuides": [
      {
        "name": "GetFutureGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Guide:GetFutureGuides()",
        "retail": true
      }
    ],
    "HasProfession": [
      {
        "name": "HasProfession",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Guide:HasProfession() --Real quick and dirty check to see if this profession guide works for us.",
        "retail": true
      }
    ],
    "IsPlayerInCombat": [
      {
        "name": "IsPlayerInCombat",
        "count": 4,
        "confidence": 0.8,
        "sample": "if delay and ZGV:IsPlayerInCombat() then",
        "retail": true
      }
    ],
    "LegionPopup": [
      {
        "name": "LegionPopup",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Guide:LegionPopup(title,message,level)",
        "retail": true
      }
    ],
    "GetFirstValidStep": [
      {
        "name": "GetFirstValidStep",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Guide:GetFirstValidStep(start)",
        "retail": true
      }
    ],
    "GetParentFolder": [
      {
        "name": "GetParentFolder",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Guide:GetParentFolder()",
        "retail": true
      }
    ],
    "LayoutFull": [
      {
        "name": "ReloadPopup.LayoutFull",
        "count": 1,
        "confidence": 0.2,
        "sample": "function self.ReloadPopup.LayoutFull() end",
        "retail": true
      }
    ],
    "SuggestPreviousGuide": [
      {
        "name": "SuggestPreviousGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideFuncs:SuggestPreviousGuide(prevguide)",
        "retail": true
      }
    ],
    "CheckIfEvent": [
      {
        "name": "CheckIfEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideFuncs:CheckIfEvent()",
        "retail": true
      }
    ],
    "IsDungeon": [
      {
        "name": "IsDungeon",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GuideFuncs:IsDungeon()",
        "retail": true
      }
    ],
    "ToggleViewer": [
      {
        "name": "ToggleViewer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideFuncs:ToggleViewer()",
        "retail": true
      }
    ],
    "IsGuideBanned": [
      {
        "name": "IsGuideBanned",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GuideFuncs:IsGuideBanned(title)",
        "retail": true
      }
    ],
    "VerifyKeyIntegrity": [
      {
        "name": "VerifyKeyIntegrity",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.Licence:VerifyKeyIntegrity(ZGV.registered_guide_key)",
        "retail": true
      }
    ],
    "CloneTable": [
      {
        "name": "ZGV.CloneTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.CloneTable (subj,into)",
        "retail": true
      },
      {
        "name": "CloneTable",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function CloneTable(tab)",
        "retail": true
      }
    ],
    "MergeTable": [
      {
        "name": "ZGV.MergeTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.MergeTable (subj,into)",
        "retail": true
      }
    ],
    "MOVE": [
      {
        "name": "ZGV.MOVE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.MOVE(frame)",
        "retail": true
      }
    ],
    "GetMouseFocus": [
      {
        "name": "GetMouseFocus",
        "count": 3,
        "confidence": 0.6,
        "sample": "frame = GetMouseFocus()",
        "retail": true
      }
    ],
    "RotatePair": [
      {
        "name": "ZGV.RotatePair",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.RotatePair(x,y,ox,oy,a,asp)",
        "retail": true
      }
    ],
    "RotateTex": [
      {
        "name": "ZGV.RotateTex",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.RotateTex(self, angle)",
        "retail": true
      }
    ],
    "AnimRotOnUpdate": [
      {
        "name": "ZGV.AnimRotOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.AnimRotOnUpdate(self,step)",
        "retail": true
      }
    ],
    "AnimRotOnUpdate2": [
      {
        "name": "ZGV.AnimRotOnUpdate2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.AnimRotOnUpdate2(self)",
        "retail": true
      }
    ],
    "CreateTextureWithCoords": [
      {
        "name": "CreateTextureWithCoords",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateTextureWithCoords(parent,texture,l,r,u,d,blend,flip)",
        "retail": true
      }
    ],
    "SetNPHtx": [
      {
        "name": "ZGV.F.SetNPHtx",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.SetNPHtx(but,n,p,h)",
        "retail": true
      }
    ],
    "CreateTexWithCoordsNum": [
      {
        "name": "CreateTexWithCoordsNum",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function CreateTexWithCoordsNum(obj,tx,x,w,y,h,flip)",
        "retail": true
      }
    ],
    "GetProgress": [
      {
        "name": "GetProgress",
        "count": 1,
        "confidence": 0.2,
        "sample": "local progress = 1.0 - self:GetProgress()",
        "retail": true
      }
    ],
    "Benchmark": [
      {
        "name": "ZGV.Benchmark",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Benchmark(f,n)",
        "retail": true
      }
    ],
    "FixDropDownMenuFrameLevelBug": [
      {
        "name": "FixDropDownMenuFrameLevelBug",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FixDropDownMenuFrameLevelBug()",
        "retail": true
      }
    ],
    "FixDropDownMenuFrameLevelBug_List_OnShow": [
      {
        "name": "FixDropDownMenuFrameLevelBug_List_OnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FixDropDownMenuFrameLevelBug_List_OnShow(self)",
        "retail": true
      }
    ],
    "BigFixDropDownMenuFrameLevelBug": [
      {
        "name": "BigFixDropDownMenuFrameLevelBug",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function BigFixDropDownMenuFrameLevelBug()",
        "retail": true
      }
    ],
    "WrapperCall": [
      {
        "name": "WrapperCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function WrapperCall(self,...)",
        "retail": true
      }
    ],
    "ChainInternalCall": [
      {
        "name": "ChainInternalCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ChainInternalCall(self,fun)",
        "retail": true
      }
    ],
    "ChainCallClean": [
      {
        "name": "ZGV.ChainCallClean",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.ChainCallClean(obj)",
        "retail": true
      }
    ],
    "AllCall": [
      {
        "name": "ZGV.AllCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.AllCall(arr)",
        "retail": true
      }
    ],
    "AllWrapperCall": [
      {
        "name": "AllWrapperCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function AllWrapperCall(self,...)",
        "retail": true
      }
    ],
    "AllSetter": [
      {
        "name": "AllSetter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function AllSetter(self,key,val)",
        "retail": true
      }
    ],
    "AllChainInternalCall": [
      {
        "name": "AllChainInternalCall",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function AllChainInternalCall(self,fun)",
        "retail": true
      }
    ],
    "AllCallClean": [
      {
        "name": "ZGV.AllCallClean",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.AllCallClean(obj)",
        "retail": true
      }
    ],
    "ShowIf": [
      {
        "name": "ShowIf",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function ShowIf(self,b) if b then self:Show() else self:Hide() end end",
        "retail": true
      }
    ],
    "EnableIf": [
      {
        "name": "EnableIf",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function EnableIf(self,b) if b then self:Enable() else self:Disable() end end",
        "retail": true
      }
    ],
    "ZGV_ShowManyLines": [
      {
        "name": "ZGV_ShowManyLines",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GameTooltip:ZGV_ShowManyLines(lines)",
        "retail": true
      }
    ],
    "ArrayToStringColor": [
      {
        "name": "ZGV.ArrayToStringColor",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.ArrayToStringColor(array)",
        "retail": true
      }
    ],
    "TableProduct": [
      {
        "name": "ZGV.TableProduct",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.TableProduct(tabs)",
        "retail": true
      }
    ],
    "OrderedPairsCleanup": [
      {
        "name": "ZGV.OrderedPairsCleanup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.OrderedPairsCleanup(t)",
        "retail": true
      }
    ],
    "OrderedPairsCleanFast": [
      {
        "name": "ZGV.OrderedPairsCleanFast",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.OrderedPairsCleanFast(t,indextemp,indexrevtemp)",
        "retail": true
      }
    ],
    "CoroNext": [
      {
        "name": "CoroNext",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CoroNext(wrappedT,not_state)",
        "retail": true
      }
    ],
    "CoroPairs": [
      {
        "name": "ZGV.CoroPairs",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV.CoroPairs(T,corofun)",
        "retail": true
      }
    ],
    "GetFollowers": [
      {
        "name": "C_Garrison.GetFollowers",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not C_Garrison.GetFollowers() then return false end",
        "retail": true
      }
    ],
    "GetBuildings": [
      {
        "name": "C_Garrison.GetBuildings",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i,building in ipairs(C_Garrison.GetBuildings(garr60)) do",
        "retail": true
      }
    ],
    "GetOwnedBuildingInfo": [
      {
        "name": "C_Garrison.GetOwnedBuildingInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local id, name, texPrefix, icon, description, rank, currencyID, currencyQty, goldQty, buildTime, needsPlan, isPrebuilt, possSpecs, upgrades, canUpgrade, isMaxLevel, hasFollowerSlot, knownSpecs, currSpec, specCooldown, isBuilding, startTime, buildDuration, timeLeftStr, canActivate = C_Garrison.GetOwnedBuildingInfo(building.plotID)",
        "retail": true
      }
    ],
    "Garrison_GetBuildingLocation": [
      {
        "name": "ZGV.Garrison_GetBuildingLocation",
        "count": 33,
        "confidence": 1.0,
        "sample": "function ZGV.Garrison_GetBuildingLocation(id_or_name)",
        "retail": true
      }
    ],
    "GetPlots": [
      {
        "name": "C_Garrison.GetPlots",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not C_Garrison.GetPlots(follower60) then return false end",
        "retail": true
      }
    ],
    "MSG": [
      {
        "name": "MSG",
        "count": 1,
        "confidence": 0.2,
        "sample": "local msg = event:match(\"MSG (.+)\")",
        "retail": true
      }
    ],
    "RegisterMessage": [
      {
        "name": "RegisterMessage",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:RegisterMessage(event,function(...) if arg then aFunction(arg,...) else aFunction(...) end  ZGV:UnregisterMessage(event) end)",
        "retail": true
      },
      {
        "name": "BigWigs.RegisterMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "BigWigs.RegisterMessage(addon, \"BigWigs_Message\")",
        "retail": true
      },
      {
        "name": "BigWigsLoader.RegisterMessage",
        "count": 8,
        "confidence": 1.0,
        "sample": "BigWigsLoader.RegisterMessage (Details, \"BigWigs_SetStage\")",
        "retail": true
      }
    ],
    "UnregisterMessage": [
      {
        "name": "UnregisterMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:RegisterMessage(event,function(...) if arg then aFunction(arg,...) else aFunction(...) end  ZGV:UnregisterMessage(event) end)",
        "retail": true
      }
    ],
    "TimedDelayedRun": [
      {
        "name": "TimedDelayedRun",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:TimedDelayedRun(waitTime, aFunction, arg)",
        "retail": true
      }
    ],
    "OnUpdateHandler": [
      {
        "name": "OnUpdateHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnUpdateHandler()",
        "retail": true
      }
    ],
    "OnEventHandler": [
      {
        "name": "OnEventHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnEventHandler(self, event, ...)",
        "retail": true
      }
    ],
    "GetItemInfoWipe": [
      {
        "name": "GetItemInfoWipe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GetItemInfoWipe()",
        "retail": true
      }
    ],
    "PurgeItemCache": [
      {
        "name": "PurgeItemCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:PurgeItemCache()",
        "retail": true
      }
    ],
    "GET_ITEM_INFO_RECEIVED": [
      {
        "name": "GET_ITEM_INFO_RECEIVED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GET_ITEM_INFO_RECEIVED(event,id,success)",
        "retail": true
      }
    ],
    "ExpireItemCache": [
      {
        "name": "ExpireItemCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ExpireItemCache()",
        "retail": true
      }
    ],
    "DebugMap": [
      {
        "name": "DebugMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:DebugMap()",
        "retail": true
      }
    ],
    "DungeonUsesTerrainMap": [
      {
        "name": "DungeonUsesTerrainMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "s = s .. \"DungeonUsesTerrainMap() = N/I\\n\"--..tostring(DungeonUsesTerrainMap())..\"\\n\"",
        "retail": true
      }
    ],
    "GetCurrentMapZone": [
      {
        "name": "GetCurrentMapZone",
        "count": 2,
        "confidence": 0.4,
        "sample": "s = s .. \"GetCurrentMapZone() = N/I\\n\"--..konkat({GetCurrentMapZone()},5)..\"\\n\"",
        "retail": true
      }
    ],
    "UIFrameFade": [
      {
        "name": "ZGV.UIFrameFade.UIFrameFade",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.UIFrameFade.UIFrameFade(frame, fadeInfo)",
        "retail": true
      }
    ],
    "UIFrameFadeRemoveFrame": [
      {
        "name": "ZGV.UIFrameFade.UIFrameFadeRemoveFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.UIFrameFade.UIFrameFadeRemoveFrame(frame)",
        "retail": true
      }
    ],
    "UIFrameFade_OnUpdate": [
      {
        "name": "ZGV.UIFrameFade.UIFrameFade_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.UIFrameFade.UIFrameFade_OnUpdate(self, elapsed)",
        "retail": true
      }
    ],
    "UIFrameIsFading": [
      {
        "name": "ZGV.UIFrameFade.UIFrameIsFading",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.UIFrameFade.UIFrameIsFading(frame)",
        "retail": true
      }
    ],
    "MatchID": [
      {
        "name": "IL.MatchID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.MatchID(itemlink1,itemlink2)",
        "retail": true
      }
    ],
    "Strip": [
      {
        "name": "IL.Strip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.Strip(itemlink)",
        "retail": true
      }
    ],
    "ProcessItemLink": [
      {
        "name": "IL.ProcessItemLink",
        "count": 8,
        "confidence": 1.0,
        "sample": "function IL.ProcessItemLink(itemlink,keepDecor,...) --  (warning, potential small memory leak)",
        "retail": true
      }
    ],
    "SetCurrentSpec": [
      {
        "name": "IL.SetCurrentSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.SetCurrentSpec(itemlink,keepDecor)",
        "retail": true
      }
    ],
    "FixLink": [
      {
        "name": "IL.FixLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.FixLink(itemlink)",
        "retail": true
      }
    ],
    "Match": [
      {
        "name": "IL.Match",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.Match(itemlink1,itemlink2)",
        "retail": true
      }
    ],
    "ReplaceBonus": [
      {
        "name": "IL.ReplaceBonus",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IL.ReplaceBonus(itemlink,oldbonusid,newbonusid)",
        "retail": true
      }
    ],
    "GetChatLink": [
      {
        "name": "IL.GetChatLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "function IL.GetChatLink(itemlink)",
        "retail": true
      }
    ],
    "CheckLicence": [
      {
        "name": "CheckLicence",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Licence:CheckLicence(guide)",
        "retail": true
      }
    ],
    "ShowExpiredPopup": [
      {
        "name": "ShowExpiredPopup",
        "count": 6,
        "confidence": 1.0,
        "sample": "if not guide then return ZGV.Licence:ShowExpiredPopup(0) end -- no guide provided",
        "retail": true
      }
    ],
    "GetType": [
      {
        "name": "GetType",
        "count": 5,
        "confidence": 1.0,
        "sample": "if not ZGV.Licence:GetType(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide type",
        "retail": true
      }
    ],
    "GetSubtype": [
      {
        "name": "GetSubtype",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not ZGV.Licence:GetSubtype(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide expansion",
        "retail": true
      }
    ],
    "GetSide": [
      {
        "name": "GetSide",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not ZGV.Licence:GetSide(guide) then return ZGV.Licence:ShowExpiredPopup(1) end -- no licence entry for this guide expansion",
        "retail": true
      }
    ],
    "GetKey": [
      {
        "name": "GetKey",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not ZGV.Licence:VerifyKeyIntegrity(ZGV.Licence:GetKey(guide)) then return ZGV.Licence:ShowExpiredPopup(2) end",
        "retail": true
      }
    ],
    "VerifyKeyExpiration": [
      {
        "name": "VerifyKeyExpiration",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not ZGV.Licence:VerifyKeyExpiration(ZGV.Licence:GetKey(guide)) then return ZGV.Licence:ShowExpiredPopup(3) end",
        "retail": true
      }
    ],
    "GetBitmask": [
      {
        "name": "GetBitmask",
        "count": 2,
        "confidence": 0.4,
        "sample": "local key2,crc1,crc2,crc3,True,False = bit.rshift(key,GenericZygorLicenceEngine:GetBitmask()),key:sub(19,21),key:sub(22,26),\"\",false,true",
        "retail": true
      }
    ],
    "Check": [
      {
        "name": "Check",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GenericZygorLicenceEngine and GenericZygorLicenceEngine:Check(key) then return true end",
        "retail": true
      }
    ],
    "Expired": [
      {
        "name": "Expired",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GenericZygorLicenceEngine and GenericZygorLicenceEngine:Expired(key) then return true end",
        "retail": true
      }
    ],
    "CheckExpirationPopup": [
      {
        "name": "CheckExpirationPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Licence:CheckExpirationPopup()",
        "retail": true
      }
    ],
    "CheckExpirationWarning": [
      {
        "name": "CheckExpirationWarning",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Licence:CheckExpirationWarning()",
        "retail": true
      }
    ],
    "MinimizeStack": [
      {
        "name": "ZGV.MinimizeStack",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.MinimizeStack(stack)",
        "retail": true
      }
    ],
    "Start": [
      {
        "name": "Start",
        "count": 9,
        "confidence": 1.0,
        "sample": "function ZGV.Profiler:Start(tag)",
        "retail": true
      },
      {
        "name": "Details222.TimeMachine.Start",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.TimeMachine.Start()",
        "retail": true
      },
      {
        "name": "AuraScan.Start",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.Start()",
        "retail": true
      },
      {
        "name": "Details222.TimeCapture.Start",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.TimeCapture.Start(Details.playername, DETAILS_ATTRIBUTE_DAMAGE)",
        "retail": true
      }
    ],
    "Store": [
      {
        "name": "Store",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Profiler:Store(tag,mem,cpu,time,cycles)",
        "retail": true
      }
    ],
    "WMU_Suspend": [
      {
        "name": "ZGV.WMU_Suspend",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ZGV.WMU_Suspend()",
        "retail": true
      }
    ],
    "GetFramesRegisteredForEvent": [
      {
        "name": "GetFramesRegisteredForEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "wmuRegistry = {GetFramesRegisteredForEvent(\"WORLD_MAP_UPDATE\")}",
        "retail": true
      }
    ],
    "WMU_Resume": [
      {
        "name": "ZGV.WMU_Resume",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ZGV.WMU_Resume()",
        "retail": true
      }
    ],
    "IsSavedBossDead": [
      {
        "name": "ZGV.IsSavedBossDead",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.IsSavedBossDead(instanceid,bossbit)",
        "retail": true
      }
    ],
    "RequestRaidInfo": [
      {
        "name": "RequestRaidInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "RequestRaidInfo()",
        "retail": true
      }
    ],
    "GetNumSavedInstances": [
      {
        "name": "GetNumSavedInstances",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i=1,GetNumSavedInstances() do",
        "retail": true
      }
    ],
    "GetSavedInstanceChatLink": [
      {
        "name": "GetSavedInstanceChatLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local link = GetSavedInstanceChatLink(i)",
        "retail": true
      }
    ],
    "Object": [
      {
        "name": "Object",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- in: Object (ex: WorldMapFrame)",
        "retail": true
      }
    ],
    "GetItemQuality": [
      {
        "name": "C_Item.GetItemQuality",
        "count": 2,
        "confidence": 0.4,
        "sample": "local quality = C_Item.GetItemQuality(item_location)",
        "retail": true
      }
    ],
    "IsBound": [
      {
        "name": "C_Item.IsBound",
        "count": 2,
        "confidence": 0.4,
        "sample": "return C_Item.IsBound(item_location),quality==item_quality_heirloom or quality==item_quality_wowtoken",
        "retail": true
      }
    ],
    "SimpleThreadFrame_OnUpdate": [
      {
        "name": "SimpleThreadFrame_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SimpleThreadFrame_OnUpdate(frame,elapsed)",
        "retail": true
      }
    ],
    "RunCycle": [
      {
        "name": "RunCycle",
        "count": 1,
        "confidence": 0.2,
        "sample": "promise:RunCycle()",
        "retail": true
      }
    ],
    "Timerize": [
      {
        "name": "Timerize",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:Timerize(func,...)",
        "retail": true
      }
    ],
    "Then": [
      {
        "name": "Then",
        "count": 10,
        "confidence": 1.0,
        "sample": ":Then(function(...) print(\"success!\",...) end)",
        "retail": true
      }
    ],
    "Catch": [
      {
        "name": "Catch",
        "count": 6,
        "confidence": 1.0,
        "sample": ":Catch(function(...) print(\"failure!\",...) end)",
        "retail": true
      }
    ],
    "Finally": [
      {
        "name": "Finally",
        "count": 8,
        "confidence": 1.0,
        "sample": ":Finally(function(...) print(\"finally.\",...) end)",
        "retail": true
      }
    ],
    "Defer": [
      {
        "name": "Defer",
        "count": 7,
        "confidence": 1.0,
        "sample": "function ZGV.Promise:Defer(func)",
        "retail": true
      }
    ],
    "Resolve": [
      {
        "name": "Resolve",
        "count": 5,
        "confidence": 1.0,
        "sample": "if self.next then return self.next:Resolve(unpack(rets)) end",
        "retail": true
      }
    ],
    "DoFinally": [
      {
        "name": "DoFinally",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:DoFinally()",
        "retail": true
      }
    ],
    "Reject": [
      {
        "name": "Reject",
        "count": 5,
        "confidence": 1.0,
        "sample": "if self.next then return self.next:Reject(unpack(rets)) end",
        "retail": true
      }
    ],
    "Promisify": [
      {
        "name": "Promisify",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Promise:Promisify(func)",
        "retail": true
      }
    ],
    "PromisifyTestDefer": [
      {
        "name": "PromisifyTestDefer",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV.Promise:PromisifyTestDefer(func)",
        "retail": true
      }
    ],
    "PromisifyTest1": [
      {
        "name": "PromisifyTest1",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromisifyTest1()",
        "retail": true
      }
    ],
    "PromisifyTest1b": [
      {
        "name": "PromisifyTest1b",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromisifyTest1b()",
        "retail": true
      }
    ],
    "PromisifyTest2": [
      {
        "name": "PromisifyTest2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromisifyTest2()",
        "retail": true
      }
    ],
    "PromisifyTest3": [
      {
        "name": "PromisifyTest3",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromisifyTest3()",
        "retail": true
      }
    ],
    "PromiseTest1": [
      {
        "name": "PromiseTest1",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromiseTest1()",
        "retail": true
      }
    ],
    "PromiseTest2": [
      {
        "name": "PromiseTest2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromiseTest2()",
        "retail": true
      }
    ],
    "PromiseTest3": [
      {
        "name": "PromiseTest3",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromiseTest3()",
        "retail": true
      }
    ],
    "PromiseTest4": [
      {
        "name": "PromiseTest4",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromiseTest4()",
        "retail": true
      }
    ],
    "PromiseTest5": [
      {
        "name": "PromiseTest5",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.Promise:PromiseTest5()",
        "retail": true
      }
    ],
    "GetNumPoints": [
      {
        "name": "GetNumPoints",
        "count": 13,
        "confidence": 1.0,
        "sample": "for i=1,frame:GetNumPoints() do  repeat",
        "retail": true
      }
    ],
    "Try": [
      {
        "name": "ZGV.Try",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Try()",
        "retail": true
      }
    ],
    "Try2": [
      {
        "name": "ZGV.Try2",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.Try2(f,erf)",
        "retail": true
      }
    ],
    "GetCurrentPath": [
      {
        "name": "ZGV.F.GetCurrentPath",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.F.GetCurrentPath(n,full_results)",
        "retail": true
      }
    ],
    "GetCurrentPath_Test": [
      {
        "name": "ZGV.F.GetCurrentPath_Test",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.GetCurrentPath_Test()",
        "retail": true
      }
    ],
    "CreateSprite": [
      {
        "name": "CreateSprite",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Zygor_SpriteTexture_Mixin:CreateSprite(count,spr_w,spr_h,img_w,img_h)",
        "retail": true
      }
    ],
    "SetBounce": [
      {
        "name": "SetBounce",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Zygor_SpriteTexture_Mixin:SetBounce(mirror)",
        "retail": true
      }
    ],
    "SetSpriteNum": [
      {
        "name": "SetSpriteNum",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Zygor_SpriteTexture_Mixin:SetSpriteNum(num)",
        "retail": true
      }
    ],
    "IsPlayerRole": [
      {
        "name": "ZGV.F.IsPlayerRole",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.IsPlayerRole(role)",
        "retail": true
      }
    ],
    "CutsceneCancel": [
      {
        "name": "ZGV.F.CutsceneCancel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.CutsceneCancel()",
        "retail": true
      }
    ],
    "CinematicFrame_CancelCinematic": [
      {
        "name": "CinematicFrame_CancelCinematic",
        "count": 1,
        "confidence": 0.2,
        "sample": "CinematicFrame_CancelCinematic()",
        "retail": true
      }
    ],
    "MovieCancel": [
      {
        "name": "ZGV.F.MovieCancel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.MovieCancel()",
        "retail": true
      }
    ],
    "GameMovieFinished": [
      {
        "name": "GameMovieFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GameMovieFinished then GameMovieFinished() end",
        "retail": true
      }
    ],
    "CinematicFinished": [
      {
        "name": "CinematicFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": "if CinematicFinished then CinematicFinished(Enum.CinematicType.GameMovie, true) end",
        "retail": true
      }
    ],
    "GetSecondsFromTime": [
      {
        "name": "ZGV.F.GetSecondsFromTime",
        "count": 7,
        "confidence": 1.0,
        "sample": "function ZGV.F.GetSecondsFromTime(timeobject)",
        "retail": true
      }
    ],
    "ConvertSecondsToUnits": [
      {
        "name": "ConvertSecondsToUnits",
        "count": 1,
        "confidence": 0.2,
        "sample": "local units = ConvertSecondsToUnits(seconds or 0)",
        "retail": true
      }
    ],
    "TrackKills": [
      {
        "name": "ZGV.F.TrackKills",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.F.TrackKills(_,event,message)",
        "retail": true
      }
    ],
    "GetXPExhaustion": [
      {
        "name": "GetXPExhaustion",
        "count": 1,
        "confidence": 0.2,
        "sample": "local restedXPBonus = (GetXPExhaustion() or 0)/2 -- function returns how much exp will be gained under rested, including normal exp gain. actual bonus is half of that",
        "retail": true
      }
    ],
    "NewAddon": [
      {
        "name": "NewAddon",
        "count": 31,
        "confidence": 1.0,
        "sample": "LibStub(\"AceAddon-3.0\"):NewAddon(ZygorGuidesViewer,addonName, \"AceConsole-3.0\",\"AceEvent-3.0\",\"AceTimer-3.0\",\"AceHook-3.0\")",
        "retail": true
      }
    ],
    "HasActiveSeason": [
      {
        "name": "C_Seasons.HasActiveSeason",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.IsClassicSoM =  C_Seasons and (ZGV.IsClassic and C_Seasons.HasActiveSeason() and C_Seasons.GetActiveSeason()==Enum.SeasonID.SeasonOfMastery)",
        "retail": true
      }
    ],
    "GetActiveSeason": [
      {
        "name": "C_Seasons.GetActiveSeason",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZGV.IsClassicSoM =  C_Seasons and (ZGV.IsClassic and C_Seasons.HasActiveSeason() and C_Seasons.GetActiveSeason()==Enum.SeasonID.SeasonOfMastery)",
        "retail": true
      }
    ],
    "PlayerGetTimerunningSeasonID": [
      {
        "name": "PlayerGetTimerunningSeasonID",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV.IsPandariaRemix =  PlayerGetTimerunningSeasonID and PlayerGetTimerunningSeasonID() == Constants.TimerunningConsts.TIMERUNNING_SEASON_PANDARIA",
        "retail": true
      }
    ],
    "GetUnstrictLookupTable": [
      {
        "name": "GetUnstrictLookupTable",
        "count": 11,
        "confidence": 1.0,
        "sample": "local BZL = BZ:GetUnstrictLookupTable()",
        "retail": true
      }
    ],
    "AceLibrary": [
      {
        "name": "AceLibrary",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local Dewdrop = AceLibrary(\"Dewdrop-2.0\")",
        "retail": true
      }
    ],
    "SIS_Activate": [
      {
        "name": "SIS_Activate",
        "count": 1,
        "confidence": 0.2,
        "sample": "OnAccept = function(self) ZGV:SIS_Activate() end,",
        "retail": true
      }
    ],
    "Punch": [
      {
        "name": "Punch",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZGV.startuptimestamps:Punch(\"libs.xml start\",___ZGV_TIMESTAMP_LOADLIBSXML_START)",
        "retail": true
      }
    ],
    "SetCVar": [
      {
        "name": "SetCVar",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetCVar(\"scriptProfile\",\"0\")",
        "retail": true
      },
      {
        "name": "C_CVar.SetCVar",
        "count": 6,
        "confidence": 1.0,
        "sample": "--C_CVar.SetCVar(\"cameraDistanceMaxZoomFactor\", 2.6)",
        "retail": true
      }
    ],
    "WarnAboutDebugSettings": [
      {
        "name": "WarnAboutDebugSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:WarnAboutDebugSettings()",
        "retail": true
      }
    ],
    "ClearRecentActivities": [
      {
        "name": "ClearRecentActivities",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ClearRecentActivities() -- just to make sure they're not nils",
        "retail": true
      }
    ],
    "QuestRewardSelect": [
      {
        "name": "QuestRewardSelect",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not ZGV.Expansion_Shadowlands then hooksecurefunc(\"SendQuestChoiceResponse\",function(...) ZGV:QuestRewardSelect(...) end) end",
        "retail": true
      }
    ],
    "PlayerChoiceResponce": [
      {
        "name": "PlayerChoiceResponce",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(C_PlayerChoice,\"SendPlayerChoiceResponse\",function(...) ZGV:PlayerChoiceResponce(...) end)",
        "retail": true
      }
    ],
    "SetFontObject": [
      {
        "name": "SetFontObject",
        "count": 76,
        "confidence": 1.0,
        "sample": "ZGV.DebugFrame.text1 = ZGV.ChainCall(ZGV.DebugFrame:CreateFontString()) :SetPoint(\"TOPLEFT\") :SetFontObject(SystemFont_Tiny) .__END",
        "retail": true
      },
      {
        "name": "ItemBase.SetFontObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetFontObject(self, font)",
        "retail": true
      }
    ],
    "StoreTelemetryBasics": [
      {
        "name": "StoreTelemetryBasics",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:StoreTelemetryBasics()",
        "retail": true
      }
    ],
    "HandleRaidmarker": [
      {
        "name": "ZGV.HandleRaidmarker",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:AddEventHandler(\"UPDATE_MOUSEOVER_UNIT\",function() ZGV.HandleRaidmarker(\"mouseover\") end)",
        "retail": true
      }
    ],
    "Hook_QuestChoice": [
      {
        "name": "Hook_QuestChoice",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Hook_QuestChoice()",
        "retail": true
      }
    ],
    "SuggestGuideFromBlizzardIcon": [
      {
        "name": "SuggestGuideFromBlizzardIcon",
        "count": 3,
        "confidence": 0.6,
        "sample": "hooksecurefunc(pin,\"OnMouseUp\", function(pin,button) ZGV:SuggestGuideFromBlizzardIcon(pin) end)",
        "retail": true
      }
    ],
    "EnumeratePinsByTemplate": [
      {
        "name": "EnumeratePinsByTemplate",
        "count": 4,
        "confidence": 0.8,
        "sample": "for pin,_ in WorldMapFrame:EnumeratePinsByTemplate(pintemplate) do register_for_suggestion(pin) end",
        "retail": true
      }
    ],
    "ZGV_DEV": [
      {
        "name": "ZGV_DEV",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV_DEV then ZGV_DEV() end",
        "retail": true
      }
    ],
    "SetBeta": [
      {
        "name": "SetBeta",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetBeta()",
        "retail": true
      }
    ],
    "OnDisable": [
      {
        "name": "OnDisable",
        "count": 9,
        "confidence": 1.0,
        "sample": "function ZGV:OnDisable()",
        "retail": true
      }
    ],
    "UnregisterAllEvents": [
      {
        "name": "UnregisterAllEvents",
        "count": 12,
        "confidence": 1.0,
        "sample": "--\tself:UnregisterAllEvents()",
        "retail": true
      }
    ],
    "CompGroups": [
      {
        "name": "CompGroups",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CompGroups(a,b)",
        "retail": true
      }
    ],
    "SortGroups": [
      {
        "name": "SortGroups",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function SortGroups(group,recurse)",
        "retail": true
      }
    ],
    "Startup_LoadGuides_Threaded": [
      {
        "name": "Startup_LoadGuides_Threaded",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:Startup_LoadGuides_Threaded()",
        "retail": true
      }
    ],
    "LoadInitialGuide": [
      {
        "name": "LoadInitialGuide",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:LoadInitialGuide(\"fastload\")",
        "retail": true
      }
    ],
    "UpdateGuideMenuButton": [
      {
        "name": "UpdateGuideMenuButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "--self:UpdateGuideMenuButton()",
        "retail": true
      }
    ],
    "CheckGuideJumps": [
      {
        "name": "CheckGuideJumps",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CheckGuideJumps()",
        "retail": true
      }
    ],
    "StartupModule_Threaded": [
      {
        "name": "StartupModule_Threaded",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:StartupModule_Threaded(startup,timeleft)  -- resumed in _StartupThread. Returns when module is 100% done. May yield, or may let the module startup yield.",
        "retail": true
      }
    ],
    "ErrorThrow": [
      {
        "name": "ErrorThrow",
        "count": 6,
        "confidence": 1.0,
        "sample": "if coroutine.status(startup.thread)~=\"suspended\" then self:ErrorThrow(\"Error during initialization sequence: module '\"..startup.name..\"' didn't start\") end",
        "retail": true
      }
    ],
    "FixPhasedContinents": [
      {
        "name": "FixPhasedContinents",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.HBD:FixPhasedContinents()",
        "retail": true
      }
    ],
    "SetMaxLines": [
      {
        "name": "SetMaxLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.db.profile.debug and ChatFrame1 and ChatFrame1.SetMaxLines then ChatFrame1:SetMaxLines(2000) end",
        "retail": true
      }
    ],
    "CacheMentionedFollowups": [
      {
        "name": "CacheMentionedFollowups",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CacheMentionedFollowups()",
        "retail": true
      }
    ],
    "CatchEvent": [
      {
        "name": "CatchEvent",
        "count": 6,
        "confidence": 1.0,
        "sample": "self.Checklist:CatchEvent(\"_GUIDES_LOADED_\")",
        "retail": true
      }
    ],
    "ShowAnimatedPopup": [
      {
        "name": "ShowAnimatedPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "--if ZGV.AnimatePopup then ZGV:ShowAnimatedPopup() end -- if we have animated popup, show it",
        "retail": true
      }
    ],
    "View": [
      {
        "name": "View",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.startuptimes:View()",
        "retail": true
      }
    ],
    "ViewStartupTimes": [
      {
        "name": "ViewStartupTimes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ViewStartupTimes()",
        "retail": true
      }
    ],
    "GetFramerate": [
      {
        "name": "GetFramerate",
        "count": 10,
        "confidence": 1.0,
        "sample": "if GetFramerate()<40 then ZGV.STARTUP_INTENSITY=5",
        "retail": true
      }
    ],
    "Total": [
      {
        "name": "Total",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.startuptimes['Total (realtime)']=debugprofilestop()-ZGV.timestamp_initing",
        "retail": true
      }
    ],
    "LOADING_SCREEN_DISABLED": [
      {
        "name": "LOADING_SCREEN_DISABLED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:LOADING_SCREEN_DISABLED()",
        "retail": true
      }
    ],
    "LOADING_SCREEN_ENABLED": [
      {
        "name": "LOADING_SCREEN_ENABLED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:LOADING_SCREEN_ENABLED()",
        "retail": true
      }
    ],
    "CINEMATIC_START": [
      {
        "name": "CINEMATIC_START",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CINEMATIC_START()",
        "retail": true
      }
    ],
    "CINEMATIC_STOP": [
      {
        "name": "CINEMATIC_STOP",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CINEMATIC_STOP()",
        "retail": true
      }
    ],
    "RemoveMessageHandler": [
      {
        "name": "RemoveMessageHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RemoveMessageHandler(event,removehandler)",
        "retail": true
      }
    ],
    "EventHandler_Events": [
      {
        "name": "EventHandler_Events",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:EventHandler_Events(event,...)",
        "retail": true
      }
    ],
    "EventHandler_Messages": [
      {
        "name": "EventHandler_Messages",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:EventHandler_Messages(event,...)",
        "retail": true
      }
    ],
    "RemoveHandler": [
      {
        "name": "RemoveHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UpdateCentral_Mixin:RemoveHandler(removehandler)",
        "retail": true
      }
    ],
    "AddHiding": [
      {
        "name": "AddHiding",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UpdateCentral_Mixin:AddHiding(object)",
        "retail": true
      }
    ],
    "RemoveHiding": [
      {
        "name": "RemoveHiding",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UpdateCentral_Mixin:RemoveHiding(removeobject)",
        "retail": true
      }
    ],
    "IsEventValid": [
      {
        "name": "C_EventUtils.IsEventValid",
        "count": 6,
        "confidence": 1.0,
        "sample": "if C_EventUtils.IsEventValid(\"GLOBAL_MOUSE_UP\") then",
        "retail": true
      }
    ],
    "ForceReloadInitialGuide": [
      {
        "name": "ForceReloadInitialGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ForceReloadInitialGuide()",
        "retail": true
      }
    ],
    "GetRecipeReagents": [
      {
        "name": "GetRecipeReagents",
        "count": 3,
        "confidence": 0.6,
        "sample": "--chore:GetRecipeReagents()",
        "retail": true
      }
    ],
    "GenerateGuide": [
      {
        "name": "ZGV.Goldguide.Crafting.GenerateGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.Goldguide.Crafting.GenerateGuide(chore)",
        "retail": true
      },
      {
        "name": "GenerateGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Crafting:GenerateGuide()",
        "retail": true
      },
      {
        "name": "Crafting.GenerateGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "Crafting.GenerateGuide(self)",
        "retail": true
      }
    ],
    "AddGuide": [
      {
        "name": "AddGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.StepHistory:AddGuide(name)",
        "retail": true
      }
    ],
    "AddStep": [
      {
        "name": "AddStep",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ZGV.StepHistory:AddStep(name,num)",
        "retail": true
      }
    ],
    "GetPreviousValidStep": [
      {
        "name": "GetPreviousValidStep",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.StepHistory:GetPreviousValidStep(name)",
        "retail": true
      }
    ],
    "Back": [
      {
        "name": "Back",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV.StepHistory:Back(name,num)",
        "retail": true
      }
    ],
    "HasHistory": [
      {
        "name": "HasHistory",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.StepHistory:HasHistory(name)",
        "retail": true
      }
    ],
    "UnlockHighlight": [
      {
        "name": "UnlockHighlight",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZGV.Tabs.AddButton:UnlockHighlight()",
        "retail": true
      }
    ],
    "ForeachInGuidesAsync": [
      {
        "name": "ForeachInGuidesAsync",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ForeachInGuidesAsync(guides,callback,progress,done)",
        "retail": true
      }
    ],
    "ForeachInGuidesAsync2": [
      {
        "name": "ForeachInGuidesAsync2",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ForeachInGuidesAsync2(guides,callback,progress,done)",
        "retail": true
      }
    ],
    "FindSuggestedGuidesAsync": [
      {
        "name": "FindSuggestedGuidesAsync",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FindSuggestedGuidesAsync(typ)",
        "retail": true
      }
    ],
    "FindSuggestedGuidesAsync2": [
      {
        "name": "FindSuggestedGuidesAsync2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FindSuggestedGuidesAsync2(typ)",
        "retail": true
      }
    ],
    "SearchForCompleteableGoal": [
      {
        "name": "SearchForCompleteableGoal",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- function ZGV:SearchForCompleteableGoal() --removed",
        "retail": true
      }
    ],
    "GetStepTag": [
      {
        "name": "GetStepTag",
        "count": 2,
        "confidence": 0.4,
        "sample": "local reportlabel = self.CurrentStep and ZGV.QuestDB.GetStepTag and (ZGV.QuestDB:GetStepTag(self.CurrentStep) or \"\")..\" \" or \"\"",
        "retail": true
      }
    ],
    "StopFlashAnimation": [
      {
        "name": "StopFlashAnimation",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.Frame:StopFlashAnimation()  -- possibly prevent lines staying green from previous step",
        "retail": true
      }
    ],
    "SetStepFocus": [
      {
        "name": "SetStepFocus",
        "count": 4,
        "confidence": 0.8,
        "sample": "if prevFocus or forcefocus then ZGV:SetStepFocus(self.CurrentStep) end",
        "retail": true
      }
    ],
    "FocusStepUnquiet": [
      {
        "name": "FocusStepUnquiet",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:FocusStepUnquiet()",
        "retail": true
      }
    ],
    "UpdateMinimapArrow": [
      {
        "name": "UpdateMinimapArrow",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self:UpdateMinimapArrow(true)",
        "retail": true
      }
    ],
    "AddGuideItemsToBuy": [
      {
        "name": "AddGuideItemsToBuy",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Gold.Appraiser:AddGuideItemsToBuy()",
        "retail": true
      }
    ],
    "UpdateFrameStepSkipping": [
      {
        "name": "UpdateFrameStepSkipping",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZGV:UpdateFrameStepSkipping()",
        "retail": true
      }
    ],
    "ClearRaidmarker": [
      {
        "name": "ZGV.ClearRaidmarker",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.ClearRaidmarker()",
        "retail": true
      }
    ],
    "FocusStepQuiet": [
      {
        "name": "FocusStepQuiet",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FocusStepQuiet(num)",
        "retail": true
      }
    ],
    "UpdateCartographerExport": [
      {
        "name": "UpdateCartographerExport",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self:UpdateCartographerExport()  -- moved to Waypoints where it belongs.",
        "retail": true
      }
    ],
    "GetQuestWatchType": [
      {
        "name": "C_QuestLog.GetQuestWatchType",
        "count": 4,
        "confidence": 0.8,
        "sample": "if not C_QuestLog.GetQuestWatchType(id) then",
        "retail": true
      }
    ],
    "AddQuestWatch": [
      {
        "name": "C_QuestLog.AddQuestWatch",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_QuestLog.AddQuestWatch(id, Enum.QuestWatchType.Manual)",
        "retail": true
      },
      {
        "name": "AddQuestWatch",
        "count": 1,
        "confidence": 0.2,
        "sample": "AddQuestWatch(q.index)",
        "retail": true
      }
    ],
    "SetSuperTrackedQuestID": [
      {
        "name": "C_SuperTrack.SetSuperTrackedQuestID",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_SuperTrack.SetSuperTrackedQuestID(q.id)",
        "retail": true
      },
      {
        "name": "SetSuperTrackedQuestID",
        "count": 1,
        "confidence": 0.2,
        "sample": "SetSuperTrackedQuestID(q.id)",
        "retail": true
      }
    ],
    "QuestPOIUpdateIcons": [
      {
        "name": "QuestPOIUpdateIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestPOIUpdateIcons()",
        "retail": true
      }
    ],
    "IsQuestWatched": [
      {
        "name": "IsQuestWatched",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not IsQuestWatched(q.index) then",
        "retail": true
      }
    ],
    "WatchFrame_Update": [
      {
        "name": "WatchFrame_Update",
        "count": 3,
        "confidence": 0.6,
        "sample": "if WatchFrame_Update then WatchFrame_Update() end",
        "retail": true
      }
    ],
    "PreviousStep": [
      {
        "name": "PreviousStep",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:PreviousStep(fast,forcefocus)",
        "retail": true
      }
    ],
    "GetShortGuideTitle": [
      {
        "name": "GetShortGuideTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.NextGuidePopup:SetText(L['dialog_nextguide']:format(self:GetShortGuideTitle(self.CurrentGuide.next)))",
        "retail": true
      }
    ],
    "NextGuide": [
      {
        "name": "NextGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:NextGuide()",
        "retail": true
      }
    ],
    "GetMentionedFollowups": [
      {
        "name": "GetMentionedFollowups",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:GetMentionedFollowups(questid)",
        "retail": true
      }
    ],
    "PlaySound": [
      {
        "name": "PlaySound",
        "count": 23,
        "confidence": 1.0,
        "sample": "PlaySound(self.db.profile.completesound)",
        "retail": true
      }
    ],
    "MaybeSuggestNextGuide": [
      {
        "name": "MaybeSuggestNextGuide",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- self:MaybeSuggestNextGuide()  -- Patch 7.3.5: don't suggest next levels. Players progress to the end of the guide, always. It doesn't make much sense to skip. TODO: detect when they've actually outleveled the current zone!",
        "retail": true
      }
    ],
    "InitializeDropDown": [
      {
        "name": "InitializeDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:InitializeDropDown(frame)",
        "retail": true
      }
    ],
    "UIDropDownFork_AddButton": [
      {
        "name": "UIDropDownFork_AddButton",
        "count": 4,
        "confidence": 0.8,
        "sample": "UIDropDownFork_AddButton(info)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetText": [
      {
        "name": "UIDropDownFork_SetText",
        "count": 6,
        "confidence": 1.0,
        "sample": "UIDropDownFork_SetText(frame, self.CurrentGuideName)",
        "retail": true
      }
    ],
    "HideCooldown": [
      {
        "name": "HideCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:HideCooldown(arg)",
        "retail": true
      }
    ],
    "SetDisplayMode": [
      {
        "name": "SetDisplayMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:SetDisplayMode(mode)",
        "retail": true
      }
    ],
    "GetCardinalDirName": [
      {
        "name": "GetCardinalDirName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetCardinalDirName(angle)",
        "retail": true
      }
    ],
    "GetCardinalDirNum": [
      {
        "name": "GetCardinalDirNum",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetCardinalDirNum(angle)",
        "retail": true
      }
    ],
    "DoUpdateFrame": [
      {
        "name": "DoUpdateFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "do return self:DoUpdateFrame(full,onupdate) end  -- bandaid bypass",
        "retail": true
      }
    ],
    "UpdateFrame_Schedule": [
      {
        "name": "UpdateFrame_Schedule",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:UpdateFrame_Schedule() -- called each frame",
        "retail": true
      }
    ],
    "IsDone": [
      {
        "name": "IsDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "--if ZygorGuidesViewerMiniFrame_bdflash:IsPlaying() and not ZygorGuidesViewerMiniFrame_bdflash:IsDone() then return end",
        "retail": true
      }
    ],
    "GetValue": [
      {
        "name": "GetValue",
        "count": 117,
        "confidence": 1.0,
        "sample": "local firststep = (showallsteps and math.floor(Scroll.Bar:GetValue()) or self.CurrentStepNum) or 1",
        "retail": true
      }
    ],
    "ClearSteps": [
      {
        "name": "ClearSteps",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Frame:ClearSteps()",
        "retail": true
      }
    ],
    "HideRemainingSteps": [
      {
        "name": "HideRemainingSteps",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.Frame:HideRemainingSteps()",
        "retail": true
      }
    ],
    "GetGuides": [
      {
        "name": "GetGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "local guides = self:GetGuides()",
        "retail": true
      }
    ],
    "ShowSpecialState": [
      {
        "name": "ShowSpecialState",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.Frame:ShowSpecialState()",
        "retail": true
      }
    ],
    "StartRGB": [
      {
        "name": "StartRGB",
        "count": 1,
        "confidence": 0.2,
        "sample": "--ZygorGuidesViewerFrame_bdflash:StartRGB(1,1,1,1,0,1,0,1)",
        "retail": true
      }
    ],
    "SetFrameScale": [
      {
        "name": "SetFrameScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:SetFrameScale(scale)",
        "retail": true
      }
    ],
    "SetClampRectInsets": [
      {
        "name": "SetClampRectInsets",
        "count": 7,
        "confidence": 1.0,
        "sample": "frame:SetClampRectInsets(0,0,-48-tabh,0)",
        "retail": true
      }
    ],
    "UpdateMiniMode": [
      {
        "name": "UpdateMiniMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "--frame:UpdateMiniMode()",
        "retail": true
      }
    ],
    "CalculateHeight": [
      {
        "name": "CalculateHeight",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function CalculateHeight()",
        "retail": true
      }
    ],
    "AdjustHeight": [
      {
        "name": "AdjustHeight",
        "count": 5,
        "confidence": 1.0,
        "sample": "stepframe:AdjustHeight()",
        "retail": true
      }
    ],
    "GetScrollRange": [
      {
        "name": "GetScrollRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "Scroll.Bar:SetMinMaxValues(0,Scroll:GetScrollRange())",
        "retail": true
      }
    ],
    "GoalProgress": [
      {
        "name": "GoalProgress",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GoalProgress(goal)",
        "retail": true
      }
    ],
    "IsDefaultFitting": [
      {
        "name": "IsDefaultFitting",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:IsDefaultFitting(default)",
        "retail": true
      }
    ],
    "RaceClassMatchList": [
      {
        "name": "RaceClassMatchList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RaceClassMatchList(list)",
        "retail": true
      }
    ],
    "ThunderStageForceUpdate": [
      {
        "name": "ThunderStageForceUpdate",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:ThunderStageForceUpdate()",
        "retail": true
      }
    ],
    "GetCurrentMapAreaID": [
      {
        "name": "GetCurrentMapAreaID",
        "count": 5,
        "confidence": 1.0,
        "sample": "if WorldMapFrame:IsShown() and GetCurrentMapAreaID()~=928 then --Wait for them to close the map then update",
        "retail": true
      }
    ],
    "GetTag": [
      {
        "name": "C_MapBar.GetTag",
        "count": 1,
        "confidence": 0.2,
        "sample": "if C_MapBar.GetTag()==\"THUNDER_ISLE\" then",
        "retail": true
      }
    ],
    "GetPhaseIndex": [
      {
        "name": "C_MapBar.GetPhaseIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.db.char.thunderstage = (C_MapBar.GetPhaseIndex() + 1) or 1",
        "retail": true
      }
    ],
    "GetCurrentValue": [
      {
        "name": "C_MapBar.GetCurrentValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV.db.char.thunderprogress = (C_MapBar.GetCurrentValue()/C_MapBar.GetMaxValue()) or 0",
        "retail": true
      }
    ],
    "GetMaxValue": [
      {
        "name": "C_MapBar.GetMaxValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.db.char.thunderprogress = (C_MapBar.GetCurrentValue()/C_MapBar.GetMaxValue()) or 0",
        "retail": true
      },
      {
        "name": "GetMaxValue",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:GetMaxValue()",
        "retail": true
      }
    ],
    "AnalyzeThunderData": [
      {
        "name": "AnalyzeThunderData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:AnalyzeThunderData(reset)",
        "retail": true
      }
    ],
    "GetThunderStageQQ": [
      {
        "name": "GetThunderStageQQ",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GetThunderStageQQ()",
        "retail": true
      }
    ],
    "BarIsShown": [
      {
        "name": "C_MapBar.BarIsShown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local stage = (C_MapBar and C_MapBar.BarIsShown() and C_MapBar.GetPhaseIndex() + 1)  or  1",
        "retail": true
      }
    ],
    "UNIT_INVENTORY_CHANGED": [
      {
        "name": "UNIT_INVENTORY_CHANGED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:UNIT_INVENTORY_CHANGED(event,unit)",
        "retail": true
      }
    ],
    "MAP_BAR_UPDATE": [
      {
        "name": "MAP_BAR_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MAP_BAR_UPDATE(event)",
        "retail": true
      }
    ],
    "QUEST_LOG_UPDATE": [
      {
        "name": "QUEST_LOG_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:QUEST_LOG_UPDATE(event,unit)",
        "retail": true
      }
    ],
    "SPELL_UPDATE_COOLDOWN": [
      {
        "name": "SPELL_UPDATE_COOLDOWN",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:SPELL_UPDATE_COOLDOWN()",
        "retail": true
      }
    ],
    "PLAYER_CONTROL_GAINED": [
      {
        "name": "PLAYER_CONTROL_GAINED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:PLAYER_CONTROL_GAINED()",
        "retail": true
      }
    ],
    "CacheCurrentMapID": [
      {
        "name": "CacheCurrentMapID",
        "count": 8,
        "confidence": 1.0,
        "sample": "self:CacheCurrentMapID()",
        "retail": true
      }
    ],
    "CRITERIA_EARNED": [
      {
        "name": "CRITERIA_EARNED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CRITERIA_EARNED()",
        "retail": true
      }
    ],
    "WORLD_MAP_UPDATE": [
      {
        "name": "WORLD_MAP_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:WORLD_MAP_UPDATE()",
        "retail": true
      }
    ],
    "NEW_WMO_CHUNK": [
      {
        "name": "NEW_WMO_CHUNK",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:NEW_WMO_CHUNK()",
        "retail": true
      }
    ],
    "PLAYER_ENTERING_WORLD": [
      {
        "name": "PLAYER_ENTERING_WORLD",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV:PLAYER_ENTERING_WORLD()",
        "retail": true
      }
    ],
    "ZONE_CHANGED_INDOORS": [
      {
        "name": "ZONE_CHANGED_INDOORS",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ZONE_CHANGED_INDOORS()",
        "retail": true
      }
    ],
    "ZONE_CHANGED": [
      {
        "name": "ZONE_CHANGED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ZONE_CHANGED()",
        "retail": true
      }
    ],
    "CachePOIs": [
      {
        "name": "CachePOIs",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CachePOIs()",
        "retail": true
      }
    ],
    "ZONE_CHANGED_NEW_AREA": [
      {
        "name": "ZONE_CHANGED_NEW_AREA",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV:ZONE_CHANGED_NEW_AREA()",
        "retail": true
      }
    ],
    "PlayerChoiceCleanUp": [
      {
        "name": "PlayerChoiceCleanUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:PlayerChoiceCleanUp()",
        "retail": true
      }
    ],
    "TAXIMAP_OPENED": [
      {
        "name": "TAXIMAP_OPENED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:TAXIMAP_OPENED()",
        "retail": true
      }
    ],
    "TaxiNodeCost": [
      {
        "name": "TaxiNodeCost",
        "count": 3,
        "confidence": 0.6,
        "sample": "elseif TaxiNodeCost(dest_i)>GetMoney() then",
        "retail": true
      }
    ],
    "FindData": [
      {
        "name": "FindData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FindData(array,what,data)",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_Filter": [
      {
        "name": "ZygorGuidesViewerFrame_Filter",
        "count": 1,
        "confidence": 0.2,
        "sample": "--ZygorGuidesViewerFrame_Filter()",
        "retail": true
      }
    ],
    "IsStepFocused": [
      {
        "name": "IsStepFocused",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:IsStepFocused(step)",
        "retail": true
      }
    ],
    "GoalOnClick": [
      {
        "name": "GoalOnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:GoalOnClick(frame,button)",
        "retail": true
      }
    ],
    "OpenQuickStepMenu": [
      {
        "name": "OpenQuickStepMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:OpenQuickStepMenu(stepframe,goalframe)",
        "retail": true
      }
    ],
    "GoalOnEnter": [
      {
        "name": "GoalOnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:GoalOnEnter(goalframe)",
        "retail": true
      }
    ],
    "ShowInspectCursor": [
      {
        "name": "ShowInspectCursor",
        "count": 1,
        "confidence": 0.2,
        "sample": "ShowInspectCursor()",
        "retail": true
      }
    ],
    "ResetCursor": [
      {
        "name": "ResetCursor",
        "count": 1,
        "confidence": 0.2,
        "sample": "ResetCursor()",
        "retail": true
      }
    ],
    "GoalOnLeave": [
      {
        "name": "GoalOnLeave",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:GoalOnLeave(goalframe,num)",
        "retail": true
      }
    ],
    "GetMostRecentGuide": [
      {
        "name": "GetMostRecentGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GetMostRecentGuide(gtype)",
        "retail": true
      }
    ],
    "GetGuidesHistory": [
      {
        "name": "GetGuidesHistory",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:GetGuidesHistory(gtype)",
        "retail": true
      }
    ],
    "OpenGuideMenu": [
      {
        "name": "OpenGuideMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:OpenGuideMenu(path)",
        "retail": true
      }
    ],
    "FakeCompleteQuest": [
      {
        "name": "FakeCompleteQuest",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:FakeCompleteQuest(questid,docomplete,questtitle)",
        "retail": true
      }
    ],
    "OpenMapToQuest": [
      {
        "name": "OpenMapToQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:OpenMapToQuest(questid)",
        "retail": true
      }
    ],
    "WorldMap_OpenToQuest": [
      {
        "name": "WorldMap_OpenToQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "WorldMap_OpenToQuest(questid)",
        "retail": true
      }
    ],
    "FindNextActiveQuest": [
      {
        "name": "FindNextActiveQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FindNextActiveQuest()",
        "retail": true
      }
    ],
    "ShowQuestInfo": [
      {
        "name": "ShowQuestInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:ShowQuestInfo(questid,questtitle,indump)",
        "retail": true
      }
    ],
    "GetQuestDifficultyColor": [
      {
        "name": "GetQuestDifficultyColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "local col = GetQuestDifficultyColor(lev)",
        "retail": true
      }
    ],
    "GetQuestRemainingInChain": [
      {
        "name": "GetQuestRemainingInChain",
        "count": 1,
        "confidence": 0.2,
        "sample": "local remaining = self:GetQuestRemainingInChain(questid)",
        "retail": true
      }
    ],
    "ToggleWatchQuest": [
      {
        "name": "ToggleWatchQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ToggleWatchQuest(questid)",
        "retail": true
      }
    ],
    "QuestMapFrame_OpenToQuestDetails": [
      {
        "name": "QuestMapFrame_OpenToQuestDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "func = function() QuestMapFrame_OpenToQuestDetails(goal.quest.id) end,",
        "retail": true
      }
    ],
    "RemoveQuestWatch": [
      {
        "name": "C_QuestLof.RemoveQuestWatch",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_QuestLof.RemoveQuestWatch(goal.quest.id)",
        "retail": true
      }
    ],
    "GetNumQuestWatches": [
      {
        "name": "C_QuestLog.GetNumQuestWatches",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ( C_QuestLog.GetNumQuestWatches() < Constants.QuestWatchConsts.MAX_QUEST_WATCHES ) then",
        "retail": true
      }
    ],
    "GetQuestUiMapID": [
      {
        "name": "GetQuestUiMapID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local quest_map = GetQuestUiMapID and GetQuestUiMapID(goal.quest.id)",
        "retail": true
      }
    ],
    "GetPageText": [
      {
        "name": "GetPageText",
        "count": 1,
        "confidence": 0.2,
        "sample": "local s = LightHeaded:GetPageText(goal.quest.id)",
        "retail": true
      }
    ],
    "Guides_Mini_to_Full": [
      {
        "name": "Guides_Mini_to_Full",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:Guides_Mini_to_Full()",
        "retail": true
      }
    ],
    "OpenQuickSteps": [
      {
        "name": "OpenQuickSteps",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:OpenQuickSteps()",
        "retail": true
      }
    ],
    "OpenMapToQuestGoal": [
      {
        "name": "OpenMapToQuestGoal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:OpenMapToQuestGoal(questid,goalnum)",
        "retail": true
      }
    ],
    "RegisterGuidePlaceholder": [
      {
        "name": "RegisterGuidePlaceholder",
        "count": 13853,
        "confidence": 1.0,
        "sample": "function ZGV:RegisterGuidePlaceholder(title)",
        "retail": true
      }
    ],
    "BETASTART": [
      {
        "name": "ZGV.BETASTART",
        "count": 47,
        "confidence": 1.0,
        "sample": "function ZGV.BETASTART()",
        "retail": true
      }
    ],
    "BETAEND": [
      {
        "name": "ZGV.BETAEND",
        "count": 59,
        "confidence": 1.0,
        "sample": "function ZGV.BETAEND()",
        "retail": true
      }
    ],
    "RegisterMapSpots": [
      {
        "name": "RegisterMapSpots",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RegisterMapSpots(title,data)",
        "retail": true
      }
    ],
    "NewRaw": [
      {
        "name": "NewRaw",
        "count": 1,
        "confidence": 0.2,
        "sample": "local set = self.MapSpotSetProto:NewRaw(title,tit or title,data)",
        "retail": true
      }
    ],
    "RegisterInclude": [
      {
        "name": "RegisterInclude",
        "count": 358,
        "confidence": 1.0,
        "sample": "function ZGV:RegisterInclude(title,text)",
        "retail": true
      }
    ],
    "RegisterFunction": [
      {
        "name": "RegisterFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RegisterFunction(title,func)",
        "retail": true
      }
    ],
    "UnregisterGuide": [
      {
        "name": "UnregisterGuide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:UnregisterGuide(name)",
        "retail": true
      }
    ],
    "RegisterStoredGuides": [
      {
        "name": "RegisterStoredGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:RegisterStoredGuides()",
        "retail": true
      }
    ],
    "ProfilerEnable": [
      {
        "name": "ProfilerEnable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ProfilerEnable()",
        "retail": true
      }
    ],
    "ProfilerReport": [
      {
        "name": "ProfilerReport",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ProfilerReport()",
        "retail": true
      }
    ],
    "GetFunctionCPUUsage": [
      {
        "name": "GetFunctionCPUUsage",
        "count": 2,
        "confidence": 0.4,
        "sample": "tab.fulltime,tab.count=GetFunctionCPUUsage(fun,true)",
        "retail": true
      }
    ],
    "ResetCPUUsage": [
      {
        "name": "ResetCPUUsage",
        "count": 1,
        "confidence": 0.2,
        "sample": "ResetCPUUsage()",
        "retail": true
      }
    ],
    "Echo": [
      {
        "name": "Echo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:Echo (s)",
        "retail": true
      }
    ],
    "MarkDisplayDirty": [
      {
        "name": "MarkDisplayDirty",
        "count": 1,
        "confidence": 0.2,
        "sample": "chatframe:MarkDisplayDirty()",
        "retail": true
      }
    ],
    "RaidNotice_AddMessage": [
      {
        "name": "RaidNotice_AddMessage",
        "count": 2,
        "confidence": 0.4,
        "sample": "RaidNotice_AddMessage(RaidWarningFrame, \"[|cffff8800Z|r] \"..formatted_msg, HIGHLIGHT_FONT_COLOR);",
        "retail": true
      }
    ],
    "ListQuests": [
      {
        "name": "ListQuests",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ListQuests(from,to)",
        "retail": true
      }
    ],
    "PeekQuest": [
      {
        "name": "PeekQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "local level = CQI:PeekQuest(i)",
        "retail": true
      }
    ],
    "GetQuestText": [
      {
        "name": "GetQuestText",
        "count": 2,
        "confidence": 0.4,
        "sample": "local title,_,_,_,nobjs = CQI:GetQuestText(i,level)",
        "retail": true
      }
    ],
    "GetModule": [
      {
        "name": "GetModule",
        "count": 19,
        "confidence": 1.0,
        "sample": "Chatter:GetModule(\"Chat Copy\").editBox:SetText(qlog)",
        "retail": true
      }
    ],
    "ReloadTranslation": [
      {
        "name": "ReloadTranslation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ReloadTranslation()",
        "retail": true
      }
    ],
    "ConditionTrue": [
      {
        "name": "ZGV.ConditionTrue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.ConditionTrue(subject,case)",
        "retail": true
      }
    ],
    "FindAch_AchievementFrame_OnShow": [
      {
        "name": "FindAch_AchievementFrame_OnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FindAch_AchievementFrame_OnShow(self)",
        "retail": true
      }
    ],
    "FindAch_Listen_OnEvent": [
      {
        "name": "FindAch_Listen_OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FindAch_Listen_OnEvent(self,event,...)",
        "retail": true
      }
    ],
    "CraptOnReload": [
      {
        "name": "CraptOnReload",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:CraptOnReload(name)",
        "retail": true
      }
    ],
    "COMBAT_LOG_EVENT_UNFILTERED": [
      {
        "name": "COMBAT_LOG_EVENT_UNFILTERED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:COMBAT_LOG_EVENT_UNFILTERED(event,time,evtype,a1,a2,a3,a4,a5)",
        "retail": true
      }
    ],
    "SetMagicKey": [
      {
        "name": "SetMagicKey",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetMagicKey()",
        "retail": true
      }
    ],
    "RE": [
      {
        "name": "SlashCmdList.RE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.RE(text)  ReloadUI()  end",
        "retail": true
      }
    ],
    "DoBind": [
      {
        "name": "DoBind",
        "count": 11,
        "confidence": 1.0,
        "sample": "local function DoBind(bind,bind2,desc)",
        "retail": true
      }
    ],
    "SetBindingClick": [
      {
        "name": "SetBindingClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "SetBindingClick(self.db.profile.magickey,bind2)",
        "retail": true
      }
    ],
    "SetBinding": [
      {
        "name": "SetBinding",
        "count": 1,
        "confidence": 0.2,
        "sample": "SetBinding(self.db.profile.magickey,bind)",
        "retail": true
      }
    ],
    "UnitIsDead": [
      {
        "name": "UnitIsDead",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self.db.profile.magickey_loot and UnitIsDead(\"target\") then",
        "retail": true
      }
    ],
    "UnitIsFriend": [
      {
        "name": "UnitIsFriend",
        "count": 4,
        "confidence": 0.8,
        "sample": "if UnitIsFriend(\"target\",\"player\") and self.db.profile.magickey_talk then",
        "retail": true
      }
    ],
    "MagicButton_OnClick": [
      {
        "name": "ZGV.MagicButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.MagicButton_OnClick(but)",
        "retail": true
      }
    ],
    "QuestAutoStuff": [
      {
        "name": "QuestAutoStuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:QuestAutoStuff()",
        "retail": true
      }
    ],
    "MagicRaidMarker": [
      {
        "name": "MagicRaidMarker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MagicRaidMarker(marker)",
        "retail": true
      }
    ],
    "UnitCanAttack": [
      {
        "name": "UnitCanAttack",
        "count": 2,
        "confidence": 0.4,
        "sample": "if UnitCanAttack(\"player\",\"target\") then",
        "retail": true
      }
    ],
    "GetRaidTargetIndex": [
      {
        "name": "GetRaidTargetIndex",
        "count": 4,
        "confidence": 0.8,
        "sample": "local icon = GetRaidTargetIndex(\"target\")",
        "retail": true
      }
    ],
    "SetRaidTarget": [
      {
        "name": "SetRaidTarget",
        "count": 9,
        "confidence": 1.0,
        "sample": "SetRaidTarget(\"target\",raidmarker)",
        "retail": true
      }
    ],
    "MaybeClearRaidMarker": [
      {
        "name": "MaybeClearRaidMarker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MaybeClearRaidMarker(index)",
        "retail": true
      }
    ],
    "MacroClickGoal": [
      {
        "name": "MacroClickGoal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MacroClickGoal(stepnum,goalnum)",
        "retail": true
      }
    ],
    "Unparse": [
      {
        "name": "Unparse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:Unparse(id,y,m,d)",
        "retail": true
      }
    ],
    "DoMutex": [
      {
        "name": "DoMutex",
        "count": 593,
        "confidence": 1.0,
        "sample": "function ZGV:DoMutex(m)",
        "retail": true
      }
    ],
    "GetFlatListOfGroups": [
      {
        "name": "GetFlatListOfGroups",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:GetFlatListOfGroups(source,search,target,notoplevel,curlevel)",
        "retail": true
      }
    ],
    "UnloadUnusedGuides": [
      {
        "name": "UnloadUnusedGuides",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:UnloadUnusedGuides()",
        "retail": true
      }
    ],
    "LoadGuidesByType": [
      {
        "name": "LoadGuidesByType",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:LoadGuidesByType(guidetype)",
        "retail": true
      }
    ],
    "MemHogging": [
      {
        "name": "MemHogging",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MemHogging()",
        "retail": true
      }
    ],
    "UpdateAddOnMemoryUsage": [
      {
        "name": "UpdateAddOnMemoryUsage",
        "count": 6,
        "confidence": 1.0,
        "sample": "UpdateAddOnMemoryUsage()",
        "retail": true
      }
    ],
    "GetAddOnMemoryUsage": [
      {
        "name": "GetAddOnMemoryUsage",
        "count": 4,
        "confidence": 0.8,
        "sample": "local mem = GetAddOnMemoryUsage(addonName)",
        "retail": true
      }
    ],
    "MemHogStart": [
      {
        "name": "MemHogStart",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:MemHogStart()",
        "retail": true
      }
    ],
    "MemHogStop": [
      {
        "name": "MemHogStop",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ZGV:MemHogStop(desc)",
        "retail": true
      }
    ],
    "MemHogTest": [
      {
        "name": "MemHogTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:MemHogTest()",
        "retail": true
      }
    ],
    "ZGV__QUEST_CHOICE_SENT": [
      {
        "name": "ZGV__QUEST_CHOICE_SENT",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ZGV__QUEST_CHOICE_SENT(event,id,choice)",
        "retail": true
      }
    ],
    "Surrogate_SendQuestChoiceResponse": [
      {
        "name": "ZGV.Surrogate_SendQuestChoiceResponse",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"SendQuestChoiceResponse\",function(...) ZGV.Surrogate_SendQuestChoiceResponse(...) end)",
        "retail": true
      }
    ],
    "GetQuestChoiceInfo": [
      {
        "name": "C_QuestChoice.GetQuestChoiceInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local id = C_QuestChoice.GetQuestChoiceInfo()",
        "retail": true
      }
    ],
    "PLAYER_CHOICE_UPDATE": [
      {
        "name": "ZGV.PLAYER_CHOICE_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.PLAYER_CHOICE_UPDATE()",
        "retail": true
      }
    ],
    "GetPlayerChoiceInfo": [
      {
        "name": "C_PlayerChoice.GetPlayerChoiceInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local choice = C_PlayerChoice.GetPlayerChoiceInfo()",
        "retail": true
      }
    ],
    "GetCurrentPlayerChoiceInfo": [
      {
        "name": "C_PlayerChoice.GetCurrentPlayerChoiceInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local c = C_PlayerChoice.GetCurrentPlayerChoiceInfo()",
        "retail": true
      }
    ],
    "PLAYER_CHOICE_CLOSE": [
      {
        "name": "ZGV.PLAYER_CHOICE_CLOSE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.PLAYER_CHOICE_CLOSE()",
        "retail": true
      }
    ],
    "QuestRewardConfirm": [
      {
        "name": "QuestRewardConfirm",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV:QuestRewardConfirm()",
        "retail": true
      }
    ],
    "RequestTimePlayed": [
      {
        "name": "RequestTimePlayed",
        "count": 3,
        "confidence": 0.6,
        "sample": "RequestTimePlayed()",
        "retail": true
      }
    ],
    "GetAreaPOIForMap": [
      {
        "name": "C_AreaPoiInfo.GetAreaPOIForMap",
        "count": 3,
        "confidence": 0.6,
        "sample": "local points = C_AreaPoiInfo.GetAreaPOIForMap(mapid)",
        "retail": true
      }
    ],
    "SetupListener": [
      {
        "name": "SetupListener",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Checklist:SetupListener()",
        "retail": true
      }
    ],
    "FrameOnUpdate": [
      {
        "name": "Checklist.FrameOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Checklist.FrameOnUpdate(frame,elapsed)",
        "retail": true
      }
    ],
    "FrameOnEvent": [
      {
        "name": "Checklist.FrameOnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Checklist.FrameOnEvent(frame,event,...)",
        "retail": true
      },
      {
        "name": "TWP.FrameOnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TWP.FrameOnEvent(frame,event,...)",
        "retail": true
      },
      {
        "name": "MMH.FrameOnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MMH.FrameOnEvent(frame,event,arg1,arg2,arg3)",
        "retail": true
      }
    ],
    "IsLegionOn": [
      {
        "name": "ZGV.IsLegionOn",
        "count": 11,
        "confidence": 1.0,
        "sample": "function ZGV.IsLegionOn()",
        "retail": true
      }
    ],
    "TestPhases": [
      {
        "name": "TestPhases",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:TestPhases()",
        "retail": true
      }
    ],
    "RecordTirisfal": [
      {
        "name": "ZGV.RecordTirisfal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.RecordTirisfal(_,_,unit)",
        "retail": true
      }
    ],
    "IsBoostedChar": [
      {
        "name": "IsBoostedChar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:IsBoostedChar()",
        "retail": true
      }
    ],
    "IsLegionBoatLock": [
      {
        "name": "ZGV.IsLegionBoatLock",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.IsLegionBoatLock()",
        "retail": true
      }
    ],
    "FakeWidescreen": [
      {
        "name": "FakeWidescreen",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:FakeWidescreen()",
        "retail": true
      }
    ],
    "SaveChromieProgress": [
      {
        "name": "SaveChromieProgress",
        "count": 9,
        "confidence": 1.0,
        "sample": "function ZGV:SaveChromieProgress()",
        "retail": true
      }
    ],
    "IsDragonshrineUp": [
      {
        "name": "IsDragonshrineUp",
        "count": 9,
        "confidence": 1.0,
        "sample": "function ZGV:IsDragonshrineUp(name)",
        "retail": true
      }
    ],
    "EnableMessageDebugging": [
      {
        "name": "EnableMessageDebugging",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV:EnableMessageDebugging()",
        "retail": true
      }
    ],
    "Orig_SendMessage": [
      {
        "name": "Orig_SendMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "Orig_SendMessage(self,...)",
        "retail": true
      }
    ],
    "ZygorGuidesViewer_OnAddonCompartmentEnter": [
      {
        "name": "ZygorGuidesViewer_OnAddonCompartmentEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewer_OnAddonCompartmentEnter(addonName,buttonFrame)",
        "retail": true
      }
    ],
    "ZygorGuidesViewer_OnAddonCompartmentLeave": [
      {
        "name": "ZygorGuidesViewer_OnAddonCompartmentLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewer_OnAddonCompartmentLeave(addonName,buttonFrame)",
        "retail": true
      }
    ],
    "ZygorGuidesViewer_OnAddonCompartmentClick": [
      {
        "name": "ZygorGuidesViewer_OnAddonCompartmentClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewer_OnAddonCompartmentClick(addonName,mouseButton,buttonFrame)",
        "retail": true
      }
    ],
    "UnitIsGroupLeader": [
      {
        "name": "UnitIsGroupLeader",
        "count": 4,
        "confidence": 0.8,
        "sample": "if IsInGroup() and not UnitIsGroupLeader('player') then return end",
        "retail": true
      }
    ],
    "GetTrendsFromScan": [
      {
        "name": "GetTrendsFromScan",
        "count": 2,
        "confidence": 0.4,
        "sample": "Trends:GetTrendsFromScan()",
        "retail": true
      }
    ],
    "DoImport": [
      {
        "name": "DoImport",
        "count": 3,
        "confidence": 0.6,
        "sample": "Trends:DoImport(dump)",
        "retail": true
      }
    ],
    "ImportServerPrices": [
      {
        "name": "ImportServerPrices",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Trends:ImportServerPrices(header,data)",
        "retail": true
      }
    ],
    "DoOldImport": [
      {
        "name": "DoOldImport",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Trends:DoOldImport(dumpdata,loud)",
        "retail": true
      }
    ],
    "GetHealth": [
      {
        "name": "GetHealth",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:Print((\"Server Trends for %s created. Trend quality: %s.\"):format(GetRealmName(), Trends:GetHealth()))",
        "retail": true
      },
      {
        "name": "C_PetBattles.GetHealth",
        "count": 6,
        "confidence": 1.0,
        "sample": "local health=C_PetBattles.GetHealth(2,i)",
        "retail": true
      }
    ],
    "IsValidChore": [
      {
        "name": "IsValidChore",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Farming:IsValidChore()",
        "retail": true
      }
    ],
    "CacheSkills": [
      {
        "name": "CacheSkills",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV:CacheSkills()",
        "retail": true
      }
    ],
    "CalculateAllChores": [
      {
        "name": "CalculateAllChores",
        "count": 3,
        "confidence": 0.6,
        "sample": "Goldguide:CalculateAllChores(true)",
        "retail": true
      }
    ],
    "InitialiseAuctionChores": [
      {
        "name": "InitialiseAuctionChores",
        "count": 2,
        "confidence": 0.4,
        "sample": "Goldguide:InitialiseAuctionChores()",
        "retail": true
      }
    ],
    "InitialiseCraftingChores": [
      {
        "name": "InitialiseCraftingChores",
        "count": 3,
        "confidence": 0.6,
        "sample": "Goldguide:InitialiseCraftingChores()",
        "retail": true
      }
    ],
    "CalculateDetails": [
      {
        "name": "CalculateDetails",
        "count": 11,
        "confidence": 1.0,
        "sample": "for _,chore in pairs(Goldguide.Chores.Farming) do chore:CalculateDetails(refresh)   chore.needsRefresh=refresh end",
        "retail": true
      },
      {
        "name": "Auctions.CalculateDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "if Auctions.CalculateDetails(chore) then Auctions:New(chore) end",
        "retail": true
      }
    ],
    "GetCurrentSelectedItem": [
      {
        "name": "GetCurrentSelectedItem",
        "count": 7,
        "confidence": 1.0,
        "sample": "local type = Goldguide.Farming_Frame.TypeDropdown:GetCurrentSelectedItem():GetText()",
        "retail": true
      }
    ],
    "SetEnabledIf": [
      {
        "name": "SetEnabledIf",
        "count": 2,
        "confidence": 0.4,
        "sample": "row.loadbutton:SetEnabledIf(not ZGVG.Appraiser:IsInCurrentDeals(chore.id))",
        "retail": true
      }
    ],
    "IsInCurrentDeals": [
      {
        "name": "IsInCurrentDeals",
        "count": 3,
        "confidence": 0.6,
        "sample": "row.loadbutton:SetEnabledIf(not ZGVG.Appraiser:IsInCurrentDeals(chore.id))",
        "retail": true
      }
    ],
    "UpdateSortingArrows": [
      {
        "name": "UpdateSortingArrows",
        "count": 3,
        "confidence": 0.6,
        "sample": "Goldguide:UpdateSortingArrows()",
        "retail": true
      }
    ],
    "UpdateStatusBar": [
      {
        "name": "UpdateStatusBar",
        "count": 6,
        "confidence": 1.0,
        "sample": "Goldguide:UpdateStatusBar()",
        "retail": true
      }
    ],
    "MainFrame_EventHandler": [
      {
        "name": "Goldguide.MainFrame_EventHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goldguide.MainFrame_EventHandler(self, event, ...)",
        "retail": true
      }
    ],
    "MainFrame_UpdateHandler": [
      {
        "name": "Goldguide.MainFrame_UpdateHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goldguide.MainFrame_UpdateHandler(self, event)",
        "retail": true
      }
    ],
    "UpdateSorting": [
      {
        "name": "Goldguide.UpdateSorting",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Goldguide.UpdateSorting(widget,col)  -- NOT called with a colon; called from a ScrollTable widget.",
        "retail": true
      },
      {
        "name": "WorldQuests.UpdateSorting",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WorldQuests.UpdateSorting(widget,field)  -- NOT called with a colon; called from a ScrollTable widget.",
        "retail": true
      }
    ],
    "GetItemFlagsAndStatus": [
      {
        "name": "GetItemFlagsAndStatus",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Goldguide:GetItemFlagsAndStatus(chore)",
        "retail": true
      }
    ],
    "GetProfitPerHour": [
      {
        "name": "GetProfitPerHour",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goldguide.Common:GetProfitPerHour()  -- NOT SMART. Stupid as hell.",
        "retail": true
      }
    ],
    "GetItemPrice": [
      {
        "name": "GetItemPrice",
        "count": 4,
        "confidence": 0.8,
        "sample": "local vendorprice,ahprice = ZGVG:GetItemPrice(id)",
        "retail": true
      }
    ],
    "GetSmartProfitPerHour": [
      {
        "name": "GetSmartProfitPerHour",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goldguide.Common:GetSmartProfitPerHour()",
        "retail": true
      }
    ],
    "GetSellPrice": [
      {
        "name": "GetSellPrice",
        "count": 12,
        "confidence": 1.0,
        "sample": "local sellprice = ZGVG:GetSellPrice(itemid)",
        "retail": true
      }
    ],
    "GetPriceStatus": [
      {
        "name": "GetPriceStatus",
        "count": 8,
        "confidence": 1.0,
        "sample": "local priceStatus = ZGVG:GetPriceStatus(itemid,sellprice)",
        "retail": true
      }
    ],
    "GetTooltipData": [
      {
        "name": "GetTooltipData",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Goldguide.Common:GetTooltipData(refresh)",
        "retail": true
      }
    ],
    "GetPetFallbackId": [
      {
        "name": "GetPetFallbackId",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Gold:GetSellPrice(ZGV.PetBattle:GetPetFallbackId(itemid),itemCount,true)",
        "retail": true
      }
    ],
    "GetSaturation": [
      {
        "name": "GetSaturation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Gold:GetSaturation(itemid)",
        "retail": true
      }
    ],
    "ZGV_GOLD_SCANNED": [
      {
        "name": "ZGV_GOLD_SCANNED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:ZGV_GOLD_SCANNED()",
        "retail": true
      }
    ],
    "LastScan": [
      {
        "name": "LastScan",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Gold:LastScan(min)\t--in minutes",
        "retail": true
      }
    ],
    "Can": [
      {
        "name": "Can",
        "count": 1,
        "confidence": 0.2,
        "sample": "\"High risk. Can (and often will) face losses.\",",
        "retail": true
      }
    ],
    "GetInfoFrame": [
      {
        "name": "GetInfoFrame",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function GetInfoFrame(parentFrame)",
        "retail": true
      }
    ],
    "SetSummaryText": [
      {
        "name": "SetSummaryText",
        "count": 5,
        "confidence": 1.0,
        "sample": "function infoframe:SetSummaryText(txt)",
        "retail": true
      }
    ],
    "AddPro": [
      {
        "name": "AddPro",
        "count": 5,
        "confidence": 1.0,
        "sample": "function infoframe:AddPro(text)",
        "retail": true
      }
    ],
    "AddCon": [
      {
        "name": "AddCon",
        "count": 5,
        "confidence": 1.0,
        "sample": "function infoframe:AddCon(text)",
        "retail": true
      }
    ],
    "SetDiffBarPercent": [
      {
        "name": "SetDiffBarPercent",
        "count": 5,
        "confidence": 1.0,
        "sample": "function infoframe:SetDiffBarPercent(num)",
        "retail": true
      }
    ],
    "ToggleInfoPage": [
      {
        "name": "ToggleInfoPage",
        "count": 3,
        "confidence": 0.6,
        "sample": "Goldguide:ToggleInfoPage()",
        "retail": true
      }
    ],
    "MakeInfoPages": [
      {
        "name": "MakeInfoPages",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goldguide:MakeInfoPages()",
        "retail": true
      }
    ],
    "CD": [
      {
        "name": "CD",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- yes, .CD() and not :CD(). There are way too many auctions to do a full parse on them, so we are",
        "retail": true
      }
    ],
    "UNDERCUT": [
      {
        "name": "UNDERCUT",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function UNDERCUT(price,limit)",
        "retail": true
      }
    ],
    "M": [
      {
        "name": "M",
        "count": 7,
        "confidence": 1.0,
        "sample": "--worth=M(self.targetprice),",
        "retail": true
      }
    ],
    "BUY": [
      {
        "name": "BUY",
        "count": 1,
        "confidence": 0.2,
        "sample": "{ title=\"BUY (ALL)\", width=110, titlej=\"RIGHT\", textj=\"RIGHT\", name=\"buyall\" },",
        "retail": true
      }
    ],
    "SELL": [
      {
        "name": "SELL",
        "count": 1,
        "confidence": 0.2,
        "sample": "{ title=\"SELL (ALL)\", width=110, titlej=\"RIGHT\", textj=\"RIGHT\", name=\"sellall\" },",
        "retail": true
      }
    ],
    "MakeImgButton": [
      {
        "name": "MakeImgButton",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function MakeImgButton(name,seticon,caption)",
        "retail": true
      }
    ],
    "ShowMenuTooltip": [
      {
        "name": "ShowMenuTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnEnter\", function() Goldguide:ShowMenuTooltip(MF.HeaderFrame.menu,\"Go back to main menu\") end)",
        "retail": true
      }
    ],
    "HideMenuTooltip": [
      {
        "name": "HideMenuTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnLeave\", function() Goldguide:HideMenuTooltip() end)",
        "retail": true
      }
    ],
    "ToggleHelpPage": [
      {
        "name": "ToggleHelpPage",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetScript(\"OnClick\", function() Goldguide:ToggleHelpPage() end)",
        "retail": true
      }
    ],
    "SetCurrentTab": [
      {
        "name": "SetCurrentTab",
        "count": 16,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnClick\",function(tab) Goldguide:SetCurrentTab(\"Farming\") end)",
        "retail": true
      }
    ],
    "MakeTable_Farming": [
      {
        "name": "MakeTable_Farming",
        "count": 2,
        "confidence": 0.4,
        "sample": "Goldguide.Farming_Frame   = Goldguide:MakeTable_Farming()",
        "retail": true
      }
    ],
    "MakeTable_Gathering": [
      {
        "name": "MakeTable_Gathering",
        "count": 2,
        "confidence": 0.4,
        "sample": "Goldguide.Gathering_Frame = Goldguide:MakeTable_Gathering()",
        "retail": true
      }
    ],
    "MakeTable_Crafting": [
      {
        "name": "MakeTable_Crafting",
        "count": 2,
        "confidence": 0.4,
        "sample": "Goldguide.Crafting_Frame  = Goldguide:MakeTable_Crafting()",
        "retail": true
      }
    ],
    "MakeTable_Auctions": [
      {
        "name": "MakeTable_Auctions",
        "count": 2,
        "confidence": 0.4,
        "sample": "Goldguide.Auctions_Frame  = Goldguide:MakeTable_Auctions()",
        "retail": true
      }
    ],
    "MakeTooltip": [
      {
        "name": "MakeTooltip",
        "count": 5,
        "confidence": 1.0,
        "sample": "Goldguide.FarmingTooltip = Goldguide:MakeTooltip(\"Farming\",FARMING_TOOLTIP)",
        "retail": true
      }
    ],
    "ShowLoadbuttonTooltip": [
      {
        "name": "ShowLoadbuttonTooltip",
        "count": 5,
        "confidence": 1.0,
        "sample": "row.loadbutton:SetScript(\"OnEnter\",function() if row.chore then Goldguide:ShowLoadbuttonTooltip(row.loadbutton,\"Load guide\",row.chore.display_name) end end)",
        "retail": true
      }
    ],
    "HideLoadbuttonTooltip": [
      {
        "name": "HideLoadbuttonTooltip",
        "count": 5,
        "confidence": 1.0,
        "sample": "row.loadbutton:SetScript(\"OnLeave\",function() Goldguide:HideLoadbuttonTooltip(row) end)",
        "retail": true
      }
    ],
    "DisplayData": [
      {
        "name": "DisplayData",
        "count": 5,
        "confidence": 1.0,
        "sample": "row:SetScript(\"OnEnter\",function(self) ZGV.Goldguide.FarmingTooltip:DisplayData(row) end)",
        "retail": true
      }
    ],
    "AddTooltip": [
      {
        "name": "AddTooltip",
        "count": 14,
        "confidence": 1.0,
        "sample": ":AddTooltip(\"ANCHOR_TOPLEFT\",L[\"gold_expertmode_generictooltip\"])",
        "retail": true
      }
    ],
    "AddItemToBuy": [
      {
        "name": "AddItemToBuy",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.Gold.Appraiser:AddItemToBuy(row.chore.id,row.chore.count,ZGV.Gold.Appraiser.ShoppingModes.GOLD,row.chore.price,nil,row.chore.category)",
        "retail": true
      }
    ],
    "OldColor": [
      {
        "name": "OldColor",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function OldColor(timestamp,red,yellow)",
        "retail": true
      }
    ],
    "GetTimeStamp": [
      {
        "name": "GetTimeStamp",
        "count": 5,
        "confidence": 1.0,
        "sample": "timestamptext = (\"|c%s%s|r\"):format(OldColor(ScanDatabase.LastScan,3600*2,60*10), ui.GetTimeStamp(ScanDatabase.LastScan))",
        "retail": true
      },
      {
        "name": "UI.GetTimeStamp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UI.GetTimeStamp(lasttime)",
        "retail": true
      },
      {
        "name": "ZGV.UI.GetTimeStamp",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.timestamp:SetText(ZGV.UI.GetTimeStamp(self.lastTimeStampReset))",
        "retail": true
      }
    ],
    "CreateHelpContentPanel": [
      {
        "name": "CreateHelpContentPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not Goldguide.MainFrame.helpPanel then Goldguide:CreateHelpContentPanel() end",
        "retail": true
      }
    ],
    "HighlightGoldguideColumn": [
      {
        "name": "HighlightGoldguideColumn",
        "count": 44,
        "confidence": 1.0,
        "sample": "function() return {L['gold_4_header'],nil,L['gold_4_sum'],Goldguide.Farming_Frame,defaultPoint,nil,nil,function() Goldguide:SetCurrentTab(\"Farming\") Goldguide:HighlightGoldguideColumn() if AuctionFrame_Hide then AuctionFrame_Hide() end end } end, -- HiColumn for hitting back support",
        "retail": true
      }
    ],
    "AuctionFrame_Hide": [
      {
        "name": "AuctionFrame_Hide",
        "count": 4,
        "confidence": 0.8,
        "sample": "function() return {L['gold_4_header'],nil,L['gold_4_sum'],Goldguide.Farming_Frame,defaultPoint,nil,nil,function() Goldguide:SetCurrentTab(\"Farming\") Goldguide:HighlightGoldguideColumn() if AuctionFrame_Hide then AuctionFrame_Hide() end end } end, -- HiColumn for hitting back support",
        "retail": true
      }
    ],
    "SetPerfectSizing": [
      {
        "name": "SetPerfectSizing",
        "count": 2,
        "confidence": 0.4,
        "sample": "--:SetPerfectSizing(1)",
        "retail": true
      }
    ],
    "RunTutorial": [
      {
        "name": "RunTutorial",
        "count": 4,
        "confidence": 0.8,
        "sample": "Goldguide:RunTutorial(info[2],1)",
        "retail": true
      }
    ],
    "CreateHelpPopup": [
      {
        "name": "CreateHelpPopup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Goldguide:CreateHelpPopup()",
        "retail": true
      }
    ],
    "SavedSetParent": [
      {
        "name": "SavedSetParent",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SavedSetParent(parent)",
        "retail": true
      }
    ],
    "SetHeader": [
      {
        "name": "SetHeader",
        "count": 2,
        "confidence": 0.4,
        "sample": "function popup:SetHeader(text)",
        "retail": true
      }
    ],
    "SetImage": [
      {
        "name": "SetImage",
        "count": 11,
        "confidence": 1.0,
        "sample": "function popup:SetImage(object)",
        "retail": true
      }
    ],
    "SetSummary": [
      {
        "name": "SetSummary",
        "count": 2,
        "confidence": 0.4,
        "sample": "function popup:SetSummary(text)",
        "retail": true
      }
    ],
    "OnNextHook": [
      {
        "name": "OnNextHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "--function popup:OnNextHook()\tend",
        "retail": true
      }
    ],
    "SavedSetPoint": [
      {
        "name": "SavedSetPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SavedSetPoint(...)",
        "retail": true
      }
    ],
    "SetRowElementsAlpha": [
      {
        "name": "SetRowElementsAlpha",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function SetRowElementsAlpha(row,a)",
        "retail": true
      }
    ],
    "SetColumnsAlpha": [
      {
        "name": "SetColumnsAlpha",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function SetColumnsAlpha(page,a)",
        "retail": true
      }
    ],
    "SetupSprites": [
      {
        "name": "SetupSprites",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetupSprites()",
        "retail": true
      }
    ],
    "SetupColors": [
      {
        "name": "SetupColors",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetupColors()",
        "retail": true
      }
    ],
    "GetArrowColors": [
      {
        "name": "GetArrowColors",
        "count": 2,
        "confidence": 0.4,
        "sample": "local r,g,b = self:GetArrowColors(angle_rad,dist)",
        "retail": true
      }
    ],
    "GetPrecisionMeter": [
      {
        "name": "GetPrecisionMeter",
        "count": 2,
        "confidence": 0.4,
        "sample": "local precise = self:GetPrecisionMeter(angle)",
        "retail": true
      }
    ],
    "GetVertexColor": [
      {
        "name": "GetVertexColor",
        "count": 36,
        "confidence": 1.0,
        "sample": "local r,g,b,a = self.arrow.arr:GetVertexColor()",
        "retail": true
      }
    ],
    "SetAngle": [
      {
        "name": "SetAngle",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self.arrow:SetAngle(phase*6.28)",
        "retail": true
      }
    ],
    "GetDistTxt": [
      {
        "name": "GetDistTxt",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZygorGuidesViewerFrame_Arrow_Mixin:GetDistTxt(dist)",
        "retail": true
      }
    ],
    "GetFarText": [
      {
        "name": "GetFarText",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not dist or dist==\"far\" or ((tonumber(dist or 0) or 0)>9999998) then return self:GetFarText()",
        "retail": true
      }
    ],
    "GetETATxt": [
      {
        "name": "GetETATxt",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZygorGuidesViewerFrame_Arrow_Mixin:GetETATxt(eta)",
        "retail": true
      }
    ],
    "ConvertSpritesForArrows": [
      {
        "name": "ConvertSpritesForArrows",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ConvertSpritesForArrows(self.arrow.arr)",
        "retail": true
      }
    ],
    "ArrowFrame_Proto_ShowText": [
      {
        "name": "Pointer.ArrowFrame_Proto_ShowText",
        "count": 1,
        "confidence": 0.2,
        "sample": "--Pointer.ArrowFrame_Proto_ShowText(self)",
        "retail": true
      }
    ],
    "SetRadians": [
      {
        "name": "SetRadians",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.turn.anim:SetRadians(frac_angle/rad2deg)  self.turn:Play()",
        "retail": true
      }
    ],
    "Verteidigung": [
      {
        "name": "Verteidigung",
        "count": 1,
        "confidence": 0.2,
        "sample": "DEFENSE_SKILL = \"Verteidigung ([+-]+)([0-9]+).\",",
        "retail": true
      }
    ],
    "Goal": [
      {
        "name": "Goal",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"stepgoal_scenariogoal_unknown #\"] = \"Complete %d Scenario Goal(s)\",",
        "retail": true
      }
    ],
    "GetItemClassInfo": [
      {
        "name": "C_Item.GetItemClassInfo",
        "count": 21,
        "confidence": 1.0,
        "sample": "[\"type_armor\"] = C_Item.GetItemClassInfo(Enum.ItemClass.Armor),",
        "retail": true
      }
    ],
    "GetItemSubClassInfo": [
      {
        "name": "C_Item.GetItemSubClassInfo",
        "count": 98,
        "confidence": 1.0,
        "sample": "[\"subtype_armor_miscellaneous\"] = C_Item.GetItemSubClassInfo(Enum.ItemClass.Armor,Enum.ItemArmorSubclass.Generic),",
        "retail": true
      }
    ],
    "Defense": [
      {
        "name": "Defense",
        "count": 5,
        "confidence": 1.0,
        "sample": "DEFENSE_SKILL = \"Increased Defense ([+-]+)([0-9]+).\",",
        "retail": true
      }
    ],
    "Profiler": [
      {
        "name": "Profiler",
        "count": 1,
        "confidence": 0.2,
        "sample": "opt_profiler = \"Profiler (caution!)\",",
        "retail": true
      }
    ],
    "Slave": [
      {
        "name": "Slave",
        "count": 2,
        "confidence": 0.4,
        "sample": "opt_share_masterslave_slave = \"Slave (receives)\",",
        "retail": true
      }
    ],
    "L": [
      {
        "name": "L",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- rest is pulled from L(\"zta\")",
        "retail": true
      }
    ],
    "Ahead": [
      {
        "name": "Ahead",
        "count": 1,
        "confidence": 0.2,
        "sample": "sync_ahead = \"|cff88ff88%s: Ahead (%d)|r\", -- name, count",
        "retail": true
      }
    ],
    "Behind": [
      {
        "name": "Behind",
        "count": 1,
        "confidence": 0.2,
        "sample": "sync_behind = \"|cffff8888%s: Behind (%d)|r\", -- name, count",
        "retail": true
      }
    ],
    "C_GREEN": [
      {
        "name": "C_GREEN",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function C_GREEN(s) return \"|cff00ff00\"..s..\"|r\" end",
        "retail": true
      }
    ],
    "C_WHITE": [
      {
        "name": "C_WHITE",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function C_WHITE(s) return \"|cffffffff\"..s..\"|r\" end",
        "retail": true
      }
    ],
    "C_RED": [
      {
        "name": "C_RED",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function C_RED(s) return \"|cffff0000\"..s..\"|r\" end",
        "retail": true
      }
    ],
    "C_GRAY": [
      {
        "name": "C_GRAY",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function C_GRAY(s) return \"|cffaaaaaa\"..s..\"|r\" end",
        "retail": true
      }
    ],
    "Guides_xxXX": [
      {
        "name": "Guides_xxXX",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Guides_xxXX (temporarily) have simply full guide texts, translated - hence NO enUS file there.",
        "retail": true
      }
    ],
    "Esploratori": [
      {
        "name": "Esploratori",
        "count": 6,
        "confidence": 1.0,
        "sample": "[13655] = \"Documento della Lega degli Esploratori (2 di 6)\",",
        "retail": true
      }
    ],
    "La": [
      {
        "name": "La",
        "count": 1,
        "confidence": 0.2,
        "sample": "[26700] = \"La (S)Fortuna della Damigella\",",
        "retail": true
      }
    ],
    "Vittoria": [
      {
        "name": "Vittoria",
        "count": 1,
        "confidence": 0.2,
        "sample": "[52291] = \"Vittoria (non proprio) assicurata\",",
        "retail": true
      }
    ],
    "Temp": [
      {
        "name": "Temp",
        "count": 1,
        "confidence": 0.2,
        "sample": "[67026] = \"Tieni il Temp(i)o\",",
        "retail": true
      }
    ],
    "Expedicionarios": [
      {
        "name": "Expedicionarios",
        "count": 6,
        "confidence": 1.0,
        "sample": "[13655] = \"Documento de la Liga de Expedicionarios (2 de 6)\",",
        "retail": true
      }
    ],
    "GUERRA": [
      {
        "name": "GUERRA",
        "count": 1,
        "confidence": 0.2,
        "sample": "[27001] = \"Esto es la GUERRA (Gran Unificaci\u00f3n y Erradicaci\u00f3n de Raras y Rabiosas Ara\u00f1as)\",",
        "retail": true
      }
    ],
    "Exploradores": [
      {
        "name": "Exploradores",
        "count": 6,
        "confidence": 1.0,
        "sample": "[13655] = \"Documento da Liga dos Exploradores (2 de 6)\",",
        "retail": true
      }
    ],
    "Como": [
      {
        "name": "Como",
        "count": 1,
        "confidence": 0.2,
        "sample": "[13979] = \"Como (des)motivar goblins\",",
        "retail": true
      }
    ],
    "Ora": [
      {
        "name": "Ora",
        "count": 1,
        "confidence": 0.2,
        "sample": "[26683] = \"Ora (direis) ouvir estrelas!\",",
        "retail": true
      }
    ],
    "A": [
      {
        "name": "A",
        "count": 3,
        "confidence": 0.6,
        "sample": "[26700] = \"A (m\u00e1) Sorte da Donzela\",",
        "retail": true
      }
    ],
    "PAU": [
      {
        "name": "PAU",
        "count": 1,
        "confidence": 0.2,
        "sample": "[27001] = \"T\u00e1 na hora do PAU (Porrada nas Aranhas Urgente!)\",",
        "retail": true
      }
    ],
    "Grim": [
      {
        "name": "Grim",
        "count": 9,
        "confidence": 1.0,
        "sample": "[10998] = \"Grim(oire) Business\",",
        "retail": true
      }
    ],
    "Grand": [
      {
        "name": "Grand",
        "count": 5,
        "confidence": 1.0,
        "sample": "[12839] = \"The Grand (Admiral's) Plan\",",
        "retail": true
      }
    ],
    "Document": [
      {
        "name": "Document",
        "count": 23,
        "confidence": 1.0,
        "sample": "[13655] = \"Explorers' League Document (2 of 6)\",",
        "retail": true
      }
    ],
    "WAR": [
      {
        "name": "WAR",
        "count": 11,
        "confidence": 1.0,
        "sample": "[27001] = \"This Means WAR (Wild Arachnid Roundup)\",",
        "retail": true
      }
    ],
    "Grub": [
      {
        "name": "Grub",
        "count": 13,
        "confidence": 1.0,
        "sample": "[27456] = \"Gathering Some Grub(s)\",",
        "retail": true
      }
    ],
    "Dark": [
      {
        "name": "Dark",
        "count": 9,
        "confidence": 1.0,
        "sample": "[48399] = \"A Dark (Iron) Tide\",",
        "retail": true
      }
    ],
    "Reforg": [
      {
        "name": "Reforg",
        "count": 3,
        "confidence": 0.6,
        "sample": "[77831] = \"A Key To Reforg(ing)\",",
        "retail": true
      }
    ],
    "Mine": [
      {
        "name": "Mine",
        "count": 7,
        "confidence": 1.0,
        "sample": "[79579] = \"That Airspace is Mine(d)!\",",
        "retail": true
      }
    ],
    "Plan": [
      {
        "name": "Plan",
        "count": 1,
        "confidence": 0.2,
        "sample": "[12839] = \"Der gro\u00dfe Plan (des Admirals)\",",
        "retail": true
      }
    ],
    "Forscherliga": [
      {
        "name": "Forscherliga",
        "count": 6,
        "confidence": 1.0,
        "sample": "[13655] = \"Dokument der Forscherliga (2 von 6)\",",
        "retail": true
      }
    ],
    "IDEEN": [
      {
        "name": "IDEEN",
        "count": 1,
        "confidence": 0.2,
        "sample": "[25110] = \"Kaja'Cola! Hier kommen die IDEEN (TM)\",",
        "retail": true
      }
    ],
    "WoW": [
      {
        "name": "WoW",
        "count": 1,
        "confidence": 0.2,
        "sample": "[27001] = \"Hier ist WoW (Wald ohne Wildspinnen)\",",
        "retail": true
      }
    ],
    "Dunkle": [
      {
        "name": "Dunkle",
        "count": 1,
        "confidence": 0.2,
        "sample": "[48399] = \"Dunkle (Eisen-)Flut\",",
        "retail": true
      }
    ],
    "Fallbei": [
      {
        "name": "Fallbei",
        "count": 1,
        "confidence": 0.2,
        "sample": "[64854] = \"Fallbei(l)spiele\",",
        "retail": true
      }
    ],
    "Welpen": [
      {
        "name": "Welpen",
        "count": 1,
        "confidence": 0.2,
        "sample": "[78356] = \"Traumwappen des Welpen (Keine Begrenzung)\",",
        "retail": true
      }
    ],
    "UIDropDownForkDelegate_OnAttributeChanged": [
      {
        "name": "UIDropDownForkDelegate_OnAttributeChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkDelegate_OnAttributeChanged (self, attribute, value)",
        "retail": true
      }
    ],
    "UIDropDownFork_CreateFrames": [
      {
        "name": "UIDropDownFork_CreateFrames",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_CreateFrames(self:GetAttribute(\"createframes-level\"), self:GetAttribute(\"createframes-index\"));",
        "retail": true
      }
    ],
    "UIDropDownForkDelegate_OnEvent": [
      {
        "name": "UIDropDownForkDelegate_OnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkDelegate_OnEvent (self, event, ...)",
        "retail": true
      }
    ],
    "UIDropDownFork_InitializeHelper": [
      {
        "name": "UIDropDownFork_InitializeHelper",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_InitializeHelper (frame)",
        "retail": true
      }
    ],
    "GetChild": [
      {
        "name": "GetChild",
        "count": 29,
        "confidence": 1.0,
        "sample": "local function GetChild(frame, name, key)",
        "retail": true
      }
    ],
    "UIDropDownFork_Initialize": [
      {
        "name": "UIDropDownFork_Initialize",
        "count": 3,
        "confidence": 0.6,
        "sample": "function UIDropDownFork_Initialize(frame, initFunction, displayMode, level, menuList)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetInitializeFunction": [
      {
        "name": "UIDropDownFork_SetInitializeFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_SetInitializeFunction(frame, initFunction);",
        "retail": true
      }
    ],
    "UIDropDownFork_SetDisplayMode": [
      {
        "name": "UIDropDownFork_SetDisplayMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_SetDisplayMode(frame, displayMode);",
        "retail": true
      }
    ],
    "UIDropDownFork_RefreshDropDownSize": [
      {
        "name": "UIDropDownFork_RefreshDropDownSize",
        "count": 3,
        "confidence": 0.6,
        "sample": "function UIDropDownFork_RefreshDropDownSize(self)",
        "retail": true
      }
    ],
    "UIDropDownFork_GetMaxButtonWidth": [
      {
        "name": "UIDropDownFork_GetMaxButtonWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.maxWidth = UIDropDownFork_GetMaxButtonWidth(self);",
        "retail": true
      }
    ],
    "UIDropDownFork_OnUpdate": [
      {
        "name": "UIDropDownFork_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_OnUpdate(self, elapsed)",
        "retail": true
      }
    ],
    "UIDropDownFork_StartCounting": [
      {
        "name": "UIDropDownFork_StartCounting",
        "count": 4,
        "confidence": 0.8,
        "sample": "function UIDropDownFork_StartCounting(frame)",
        "retail": true
      }
    ],
    "UIDropDownFork_StopCounting": [
      {
        "name": "UIDropDownFork_StopCounting",
        "count": 4,
        "confidence": 0.8,
        "sample": "function UIDropDownFork_StopCounting(frame)",
        "retail": true
      }
    ],
    "UIDropDownForkButtonInvisibleButton_OnEnter": [
      {
        "name": "UIDropDownForkButtonInvisibleButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButtonInvisibleButton_OnEnter(self)",
        "retail": true
      }
    ],
    "GameTooltip_SetTitle": [
      {
        "name": "GameTooltip_SetTitle",
        "count": 2,
        "confidence": 0.4,
        "sample": "GameTooltip_SetTitle(GameTooltip, parent.tooltipTitle);",
        "retail": true
      }
    ],
    "GameTooltip_AddInstructionLine": [
      {
        "name": "GameTooltip_AddInstructionLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_AddInstructionLine(GameTooltip, parent.tooltipInstruction);",
        "retail": true
      }
    ],
    "GameTooltip_AddNormalLine": [
      {
        "name": "GameTooltip_AddNormalLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "GameTooltip_AddNormalLine(GameTooltip, parent.tooltipText, true);",
        "retail": true
      }
    ],
    "GameTooltip_AddColoredLine": [
      {
        "name": "GameTooltip_AddColoredLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_AddColoredLine(GameTooltip, parent.tooltipWarning, RED_FONT_COLOR, true);",
        "retail": true
      }
    ],
    "UIDropDownForkButtonInvisibleButton_OnLeave": [
      {
        "name": "UIDropDownForkButtonInvisibleButton_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButtonInvisibleButton_OnLeave(self)",
        "retail": true
      }
    ],
    "UIDropDownFork_CreateInfo": [
      {
        "name": "UIDropDownFork_CreateInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_CreateInfo()",
        "retail": true
      }
    ],
    "UIDropDownFork_AddSeparator": [
      {
        "name": "UIDropDownFork_AddSeparator",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_AddSeparator(level)",
        "retail": true
      }
    ],
    "SetDisabledFontObject": [
      {
        "name": "SetDisabledFontObject",
        "count": 9,
        "confidence": 1.0,
        "sample": "button:SetDisabledFontObject(GameFontDisableSmallLeft);",
        "retail": true
      }
    ],
    "SetNormalFontObject": [
      {
        "name": "SetNormalFontObject",
        "count": 15,
        "confidence": 1.0,
        "sample": "button:SetNormalFontObject(info.fontObject);",
        "retail": true
      }
    ],
    "SetHighlightFontObject": [
      {
        "name": "SetHighlightFontObject",
        "count": 11,
        "confidence": 1.0,
        "sample": "button:SetHighlightFontObject(info.fontObject);",
        "retail": true
      }
    ],
    "UIDropDownFork_SetIconImage": [
      {
        "name": "UIDropDownFork_SetIconImage",
        "count": 3,
        "confidence": 0.6,
        "sample": "UIDropDownFork_SetIconImage(icon, info.icon, info.iconInfo);",
        "retail": true
      }
    ],
    "UIDropDownFork_GetSelectedName": [
      {
        "name": "UIDropDownFork_GetSelectedName",
        "count": 7,
        "confidence": 1.0,
        "sample": "if ( UIDropDownFork_GetSelectedName(frame) ) then",
        "retail": true
      }
    ],
    "UIDropDownFork_GetSelectedID": [
      {
        "name": "UIDropDownFork_GetSelectedID",
        "count": 5,
        "confidence": 1.0,
        "sample": "elseif ( UIDropDownFork_GetSelectedID(frame) ) then",
        "retail": true
      }
    ],
    "UIDropDownFork_GetSelectedValue": [
      {
        "name": "UIDropDownFork_GetSelectedValue",
        "count": 7,
        "confidence": 1.0,
        "sample": "elseif ( UIDropDownFork_GetSelectedValue(frame) ) then",
        "retail": true
      }
    ],
    "SetAtlas": [
      {
        "name": "SetAtlas",
        "count": 66,
        "confidence": 1.0,
        "sample": "check:SetAtlas(info.customCheckIconAtlas);",
        "retail": true
      }
    ],
    "LockHighlight": [
      {
        "name": "LockHighlight",
        "count": 11,
        "confidence": 1.0,
        "sample": "button:LockHighlight();",
        "retail": true
      }
    ],
    "UIDropDownFork_CheckAddCustomFrame": [
      {
        "name": "UIDropDownFork_CheckAddCustomFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_CheckAddCustomFrame(listFrame, button, info);",
        "retail": true
      }
    ],
    "UIDropDownFork_GetButtonWidth": [
      {
        "name": "UIDropDownFork_GetButtonWidth",
        "count": 4,
        "confidence": 0.8,
        "sample": "width = UIDropDownFork_GetButtonWidth(button)",
        "retail": true
      }
    ],
    "SetOwningButton": [
      {
        "name": "SetOwningButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "customFrame:SetOwningButton(button);",
        "retail": true
      }
    ],
    "UIDropDownFork_RegisterCustomFrame": [
      {
        "name": "UIDropDownFork_RegisterCustomFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_RegisterCustomFrame(self, customFrame);",
        "retail": true
      }
    ],
    "GetPreferredEntryWidth": [
      {
        "name": "GetPreferredEntryWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "return math.max(minWidth, button.customFrame:GetPreferredEntryWidth());",
        "retail": true
      }
    ],
    "UIDropDownFork_RefreshAll": [
      {
        "name": "UIDropDownFork_RefreshAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "function UIDropDownFork_RefreshAll(frame, useValue)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetSelectedName": [
      {
        "name": "UIDropDownFork_SetSelectedName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetSelectedName(frame, name, useValue)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetSelectedValue": [
      {
        "name": "UIDropDownFork_SetSelectedValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetSelectedValue(frame, value, useValue)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetSelectedID": [
      {
        "name": "UIDropDownFork_SetSelectedID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetSelectedID(frame, id, useValue)",
        "retail": true
      }
    ],
    "UIDropDownForkButton_OnClick": [
      {
        "name": "UIDropDownForkButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButton_OnClick(self)",
        "retail": true
      }
    ],
    "HideDropDownFork": [
      {
        "name": "HideDropDownFork",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HideDropDownFork(level)",
        "retail": true
      }
    ],
    "GetScreenWidth": [
      {
        "name": "GetScreenWidth",
        "count": 11,
        "confidence": 1.0,
        "sample": "local offRight = (GetScreenWidth() - listFrame:GetRight())/uiScale;",
        "retail": true
      }
    ],
    "GetScreenHeight": [
      {
        "name": "GetScreenHeight",
        "count": 11,
        "confidence": 1.0,
        "sample": "local offTop = (GetScreenHeight() - listFrame:GetTop())/uiScale;",
        "retail": true
      }
    ],
    "TOP": [
      {
        "name": "TOP",
        "count": 4,
        "confidence": 0.8,
        "sample": "point = gsub(point, \"TOP(.*)\", \"BOTTOM%1\");",
        "retail": true
      }
    ],
    "DropDownForkList": [
      {
        "name": "DropDownForkList",
        "count": 1,
        "confidence": 0.2,
        "sample": "listFrame.parentLevel = tonumber(strmatch(anchorFrame:GetName(), \"DropDownForkList(%d+)\"));",
        "retail": true
      }
    ],
    "UIDropDownFork_ApplySkin": [
      {
        "name": "UIDropDownFork_ApplySkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "UIDropDownFork_ApplySkin()",
        "retail": true
      }
    ],
    "UIDropDownFork_OnHide": [
      {
        "name": "UIDropDownFork_OnHide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_OnHide(self)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetButtonWidth": [
      {
        "name": "UIDropDownFork_SetButtonWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetButtonWidth(frame, width)",
        "retail": true
      }
    ],
    "UIDropDownFork_GetText": [
      {
        "name": "UIDropDownFork_GetText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_GetText(frame)",
        "retail": true
      }
    ],
    "UIDropDownFork_ClearAll": [
      {
        "name": "UIDropDownFork_ClearAll",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_ClearAll(frame)",
        "retail": true
      }
    ],
    "UIDropDownFork_JustifyText": [
      {
        "name": "UIDropDownFork_JustifyText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_JustifyText(frame, justification)",
        "retail": true
      }
    ],
    "UIDropDownFork_GetCurrentDropDown": [
      {
        "name": "UIDropDownFork_GetCurrentDropDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_GetCurrentDropDown()",
        "retail": true
      }
    ],
    "UIDropDownForkButton_GetChecked": [
      {
        "name": "UIDropDownForkButton_GetChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButton_GetChecked(self)",
        "retail": true
      }
    ],
    "UIDropDownForkButton_GetName": [
      {
        "name": "UIDropDownForkButton_GetName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButton_GetName(self)",
        "retail": true
      }
    ],
    "UIDropDownForkButton_OpenColorPicker": [
      {
        "name": "UIDropDownForkButton_OpenColorPicker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownForkButton_OpenColorPicker(self, button)",
        "retail": true
      }
    ],
    "CloseMenus": [
      {
        "name": "CloseMenus",
        "count": 1,
        "confidence": 0.2,
        "sample": "CloseMenus();",
        "retail": true
      }
    ],
    "OpenColorPicker": [
      {
        "name": "OpenColorPicker",
        "count": 3,
        "confidence": 0.6,
        "sample": "OpenColorPicker(button);",
        "retail": true
      }
    ],
    "UIDropDownFork_DisableButton": [
      {
        "name": "UIDropDownFork_DisableButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_DisableButton(level, id)",
        "retail": true
      }
    ],
    "UIDropDownFork_EnableButton": [
      {
        "name": "UIDropDownFork_EnableButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_EnableButton(level, id)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetButtonText": [
      {
        "name": "UIDropDownFork_SetButtonText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetButtonText(level, id, text, colorCode)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetButtonNotClickable": [
      {
        "name": "UIDropDownFork_SetButtonNotClickable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetButtonNotClickable(level, id)",
        "retail": true
      }
    ],
    "UIDropDownFork_SetButtonClickable": [
      {
        "name": "UIDropDownFork_SetButtonClickable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_SetButtonClickable(level, id)",
        "retail": true
      }
    ],
    "UIDropDownFork_DisableDropDown": [
      {
        "name": "UIDropDownFork_DisableDropDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_DisableDropDown(dropDown)",
        "retail": true
      }
    ],
    "UIDropDownFork_EnableDropDown": [
      {
        "name": "UIDropDownFork_EnableDropDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_EnableDropDown(dropDown)",
        "retail": true
      }
    ],
    "UIDropDownFork_IsEnabled": [
      {
        "name": "UIDropDownFork_IsEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_IsEnabled(dropDown)",
        "retail": true
      }
    ],
    "UIDropDownFork_GetValue": [
      {
        "name": "UIDropDownFork_GetValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIDropDownFork_GetValue(id)",
        "retail": true
      }
    ],
    "SetColorRGB": [
      {
        "name": "SetColorRGB",
        "count": 7,
        "confidence": 1.0,
        "sample": "ColorPickerFrame:SetColorRGB(info.r, info.g, info.b);",
        "retail": true
      }
    ],
    "ColorPicker_GetPreviousValues": [
      {
        "name": "ColorPicker_GetPreviousValues",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorPicker_GetPreviousValues()",
        "retail": true
      }
    ],
    "GetPlayerWorldPosition": [
      {
        "name": "GetPlayerWorldPosition",
        "count": 8,
        "confidence": 1.0,
        "sample": "local oX, oY, instanceID = HBD:GetPlayerWorldPosition()",
        "retail": true
      }
    ],
    "GetWorldVector": [
      {
        "name": "GetWorldVector",
        "count": 3,
        "confidence": 0.6,
        "sample": "return HBD:GetWorldVector(instanceID, oX, oY, data.x, data.y)",
        "retail": true
      }
    ],
    "GetWorldDistance": [
      {
        "name": "GetWorldDistance",
        "count": 4,
        "confidence": 0.8,
        "sample": "local dist, detalx, deltay = HBD:GetWorldDistance(instanceID, oX, oY, data.x, data.y)",
        "retail": true
      }
    ],
    "EasyFork_Initialize": [
      {
        "name": "EasyFork_Initialize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EasyFork_Initialize( frame, level, menuList )",
        "retail": true
      }
    ],
    "FriendsFrame_GetLastOnline": [
      {
        "name": "FriendsFrame_GetLastOnline",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local s = FriendsFrame_GetLastOnline(lasttime)",
        "retail": true
      }
    ],
    "InventoryClick": [
      {
        "name": "InventoryClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "Appraiser:InventoryClick(row)",
        "retail": true
      }
    ],
    "MaxValueAtOnce": [
      {
        "name": "MaxValueAtOnce",
        "count": 6,
        "confidence": 1.0,
        "sample": ":MaxValueAtOnce(DATA.ROW_COUNT)",
        "retail": true
      }
    ],
    "ResizeRows": [
      {
        "name": "ResizeRows",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:ResizeRows()",
        "retail": true
      }
    ],
    "SetColumnWidth": [
      {
        "name": "SetColumnWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ScrollTable:SetColumnWidth(column,width)",
        "retail": true
      }
    ],
    "MaxWidth": [
      {
        "name": "MaxWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": ":MaxWidth(maxwidth)",
        "retail": true
      }
    ],
    "OnHyperEnter": [
      {
        "name": "OnHyperEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnHyperlinkEnter\", function(self,...) self:OnHyperEnter(...) end)",
        "retail": true
      }
    ],
    "OnHyperLeave": [
      {
        "name": "OnHyperLeave",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnHyperlinkLeave\", function(self,...) self:OnHyperLeave(...) end)",
        "retail": true
      }
    ],
    "SetMaxWidth": [
      {
        "name": "SetMaxWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "function HyperEditBox:SetMaxWidth(width)",
        "retail": true
      }
    ],
    "ShowPetTooltip": [
      {
        "name": "ShowPetTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ShowPetTooltip(self)",
        "retail": true
      }
    ],
    "HideTooltip": [
      {
        "name": "HideTooltip",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function HideTooltip(self)",
        "retail": true
      }
    ],
    "SetAllSizes": [
      {
        "name": "SetAllSizes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:SetAllSizes(width,height)",
        "retail": true
      }
    ],
    "UpdateTexture": [
      {
        "name": "UpdateTexture",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ActionButton:UpdateTexture()",
        "retail": true
      }
    ],
    "SetSpell": [
      {
        "name": "SetSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ActionButton:SetSpell(spellid)",
        "retail": true
      }
    ],
    "ClearData": [
      {
        "name": "ClearData",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:ClearData()",
        "retail": true
      }
    ],
    "EnableCooldown": [
      {
        "name": "EnableCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:EnableCooldown()",
        "retail": true
      }
    ],
    "DisableCooldown": [
      {
        "name": "DisableCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:DisableCooldown()",
        "retail": true
      }
    ],
    "EnableHighlight": [
      {
        "name": "EnableHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:EnableHighlight()",
        "retail": true
      }
    ],
    "DisableHighlight": [
      {
        "name": "DisableHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:DisableHighlight()",
        "retail": true
      }
    ],
    "EnableTooltip": [
      {
        "name": "EnableTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:EnableTooltip()",
        "retail": true
      }
    ],
    "DisableTooltip": [
      {
        "name": "DisableTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:DisableTooltip()",
        "retail": true
      }
    ],
    "EnableDrag": [
      {
        "name": "EnableDrag",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:EnableDrag()",
        "retail": true
      }
    ],
    "DisableDrag": [
      {
        "name": "DisableDrag",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ActionButton:DisableDrag()",
        "retail": true
      }
    ],
    "UpdateTimeStamp": [
      {
        "name": "UpdateTimeStamp",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Frame:UpdateTimeStamp()",
        "retail": true
      }
    ],
    "ResetTimeStamp": [
      {
        "name": "ResetTimeStamp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Frame:ResetTimeStamp()",
        "retail": true
      }
    ],
    "RegisterToggleCallback": [
      {
        "name": "RegisterToggleCallback",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ToggleButton:RegisterToggleCallback(callback)",
        "retail": true
      }
    ],
    "RemoveToggleCallbacks": [
      {
        "name": "RemoveToggleCallbacks",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:RemoveToggleCallbacks()",
        "retail": true
      }
    ],
    "RegisterOnEnterCallback": [
      {
        "name": "RegisterOnEnterCallback",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:RegisterOnEnterCallback(callback)",
        "retail": true
      }
    ],
    "RegisterOnLeaveCallback": [
      {
        "name": "RegisterOnLeaveCallback",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:RegisterOnLeaveCallback(callback)",
        "retail": true
      }
    ],
    "RemoveOnEnterCallbacks": [
      {
        "name": "RemoveOnEnterCallbacks",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:RemoveOnEnterCallbacks()",
        "retail": true
      }
    ],
    "RemoveOnLeaveCallbacks": [
      {
        "name": "RemoveOnLeaveCallbacks",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:RemoveOnLeaveCallbacks()",
        "retail": true
      }
    ],
    "SetCanToggle": [
      {
        "name": "SetCanToggle",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:SetCanToggle(set)",
        "retail": true
      }
    ],
    "SetTextPos": [
      {
        "name": "SetTextPos",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ToggleButton:SetTextPos(pos)",
        "retail": true
      }
    ],
    "ShowMenu": [
      {
        "name": "ShowMenu",
        "count": 5,
        "confidence": 1.0,
        "sample": "container:SetScript(\"OnClick\",function() container:ShowMenu() end)",
        "retail": true
      }
    ],
    "SetSelected": [
      {
        "name": "SetSelected",
        "count": 8,
        "confidence": 1.0,
        "sample": "container.Dropdown.OnButtonClicked = function(button) container:SetSelected(button) end",
        "retail": true
      }
    ],
    "SetButtonColor": [
      {
        "name": "SetButtonColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.Button:SetButtonColor(unpack(SkinData(\"UIDropDownLabelColor\")))",
        "retail": true
      }
    ],
    "ValuesFunc": [
      {
        "name": "ValuesFunc",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self.ValuesFunc then self:ValuesFunc() end -- fill self.Values with options",
        "retail": true
      }
    ],
    "OnButtonClicked": [
      {
        "name": "OnButtonClicked",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DropDownFork:OnButtonClicked(func)",
        "retail": true
      }
    ],
    "IsButtonChecked": [
      {
        "name": "IsButtonChecked",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DropDownFork:IsButtonChecked(func)",
        "retail": true
      }
    ],
    "SetValues": [
      {
        "name": "SetValues",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DropDownFork:SetValues(array)",
        "retail": true
      }
    ],
    "SetValuesFunc": [
      {
        "name": "SetValuesFunc",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DropDownFork:SetValuesFunc(func)",
        "retail": true
      }
    ],
    "GetCurrentSelectedText": [
      {
        "name": "GetCurrentSelectedText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownFork:GetCurrentSelectedText()",
        "retail": true
      }
    ],
    "AddRadio": [
      {
        "name": "AddRadio",
        "count": 2,
        "confidence": 0.4,
        "sample": "radio1 = groupname:AddRadio(\"value\",parent)",
        "retail": true
      }
    ],
    "GetVerticalScroll": [
      {
        "name": "GetVerticalScroll",
        "count": 7,
        "confidence": 1.0,
        "sample": "me:SetValue(me:GetVerticalScroll())",
        "retail": true
      }
    ],
    "ScrollingEdit_OnUpdate": [
      {
        "name": "ScrollingEdit_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "ScrollingEdit_OnUpdate(me, elapsed, me:GetParent());",
        "retail": true
      }
    ],
    "ScrollingEdit_OnCursorChanged": [
      {
        "name": "ScrollingEdit_OnCursorChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "ScrollingEdit_OnCursorChanged(me, x, y, w, h)",
        "retail": true
      }
    ],
    "ScrollingEdit_OnTextChanged": [
      {
        "name": "ScrollingEdit_OnTextChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "ScrollingEdit_OnTextChanged(me, me:GetParent());",
        "retail": true
      }
    ],
    "ScrollingEdit_SetCursorOffsets": [
      {
        "name": "ScrollingEdit_SetCursorOffsets",
        "count": 1,
        "confidence": 0.2,
        "sample": "ScrollingEdit_SetCursorOffsets(child, 0, 0);",
        "retail": true
      }
    ],
    "SetScrollChild": [
      {
        "name": "SetScrollChild",
        "count": 15,
        "confidence": 1.0,
        "sample": "scroll:SetScrollChild(child)",
        "retail": true
      }
    ],
    "UpdateList": [
      {
        "name": "UpdateList",
        "count": 5,
        "confidence": 1.0,
        "sample": "me:UpdateList()",
        "retail": true
      }
    ],
    "ClearList": [
      {
        "name": "ClearList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ScrollItems:ClearList()",
        "retail": true
      }
    ],
    "SetItemYOffset": [
      {
        "name": "SetItemYOffset",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ScrollItems:SetItemYOffset(offset)",
        "retail": true
      }
    ],
    "SetClipsChildren": [
      {
        "name": "SetClipsChildren",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetClipsChildren(true)",
        "retail": true
      }
    ],
    "HideBar": [
      {
        "name": "HideBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:HideBar()",
        "retail": true
      }
    ],
    "ShowBar": [
      {
        "name": "ShowBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:ShowBar()",
        "retail": true
      }
    ],
    "SetColor": [
      {
        "name": "SetColor",
        "count": 88,
        "confidence": 1.0,
        "sample": "function ProgressBar:SetColor(r,g,b,a)",
        "retail": true
      }
    ],
    "SetTextOnMouse": [
      {
        "name": "SetTextOnMouse",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ProgressBar:SetTextOnMouse(mode)",
        "retail": true
      }
    ],
    "SetPushedTextOffset": [
      {
        "name": "SetPushedTextOffset",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetPushedTextOffset(0,0)",
        "retail": true
      }
    ],
    "SetMultiselect": [
      {
        "name": "SetMultiselect",
        "count": 5,
        "confidence": 1.0,
        "sample": ":SetMultiselect(multi)",
        "retail": true
      }
    ],
    "UpdatePulloutSize": [
      {
        "name": "UpdatePulloutSize",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DropDown:UpdatePulloutSize()",
        "retail": true
      }
    ],
    "SetCurrentSelectedItem": [
      {
        "name": "SetCurrentSelectedItem",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DropDown:SetCurrentSelectedItem(item)",
        "retail": true
      }
    ],
    "OnWidthSet": [
      {
        "name": "OnWidthSet",
        "count": 9,
        "confidence": 1.0,
        "sample": "function DropDown:OnWidthSet(width)",
        "retail": true
      }
    ],
    "OnHeightSet": [
      {
        "name": "OnHeightSet",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DropDown:OnHeightSet(height)",
        "retail": true
      }
    ],
    "DropDown_Click": [
      {
        "name": "DropDown_Click",
        "count": 1,
        "confidence": 0.2,
        "sample": "function private.DropDown_Click(self,button)",
        "retail": true
      }
    ],
    "PulloutItem_Click": [
      {
        "name": "PulloutItem_Click",
        "count": 2,
        "confidence": 0.4,
        "sample": "function private.PulloutItem_Click(this)",
        "retail": true
      }
    ],
    "OnMouseDown": [
      {
        "name": "OnMouseDown",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetScript(\"OnMouseDown\",function(me,...) scrollframe.OnMouseDown(scrollframe,me,...) end)",
        "retail": true
      }
    ],
    "OnMouseUp": [
      {
        "name": "OnMouseUp",
        "count": 6,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnMouseUp\",function(me,...) scrollframe.OnMouseUp(scrollframe,me,...) end)",
        "retail": true
      }
    ],
    "SetDefaults": [
      {
        "name": "SetDefaults",
        "count": 2,
        "confidence": 0.4,
        "sample": "scrollframe:SetDefaults()",
        "retail": true
      }
    ],
    "AddButtons": [
      {
        "name": "AddButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "scrollframe:AddButtons()",
        "retail": true
      }
    ],
    "But_OnMouseDown": [
      {
        "name": "But_OnMouseDown",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function But_OnMouseDown(me,but,dir)",
        "retail": true
      }
    ],
    "But_OnMouse_Up": [
      {
        "name": "But_OnMouse_Up",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function But_OnMouse_Up(me)",
        "retail": true
      }
    ],
    "RefreshScroller": [
      {
        "name": "RefreshScroller",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:RefreshScroller()",
        "retail": true
      }
    ],
    "ValueChanged": [
      {
        "name": "ValueChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ValueChanged() -- pass it back",
        "retail": true
      }
    ],
    "GetWidtth": [
      {
        "name": "GetWidtth",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not width then renderer.WIDTH=parent:GetWidtth() end",
        "retail": true
      }
    ],
    "GetAsString": [
      {
        "name": "GetAsString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Visuals:GetAsString(data)",
        "retail": true
      }
    ],
    "SetTextColors": [
      {
        "name": "SetTextColors",
        "count": 10,
        "confidence": 1.0,
        "sample": "local function SetTextColors(str,gray,dev)",
        "retail": true
      }
    ],
    "SetCursor": [
      {
        "name": "SetCursor",
        "count": 4,
        "confidence": 0.8,
        "sample": "if self.cursor then SetCursor(self.cursor) end",
        "retail": true
      }
    ],
    "POSTCLICK": [
      {
        "name": "POSTCLICK",
        "count": 5,
        "confidence": 1.0,
        "sample": "if self.POSTCLICK then self.POSTCLICK() end",
        "retail": true
      }
    ],
    "Multiselect_Click": [
      {
        "name": "Multiselect_Click",
        "count": 1,
        "confidence": 0.2,
        "sample": "function private.Multiselect_Click(self,button)",
        "retail": true
      }
    ],
    "AddSuggestItem": [
      {
        "name": "AddSuggestItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "SuggestBox:AddSuggestItem(display,value)",
        "retail": true
      }
    ],
    "SetAllTrigger": [
      {
        "name": "SetAllTrigger",
        "count": 2,
        "confidence": 0.4,
        "sample": "SuggestBox:SetAllTrigger(...)",
        "retail": true
      }
    ],
    "ShowSuggestList": [
      {
        "name": "ShowSuggestList",
        "count": 4,
        "confidence": 0.8,
        "sample": "internal SuggestBox:ShowSuggestList(mode)",
        "retail": true
      }
    ],
    "AceGUI_OnClick": [
      {
        "name": "Dropdown.AceGUI_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "frame.Dropdown.AceGUI_OnClick(frame.Dropdown.dropdown) -- hide it, so it can be redrawn",
        "retail": true
      }
    ],
    "SetList": [
      {
        "name": "SetList",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.frame.Dropdown:SetList(currentList)",
        "retail": true
      }
    ],
    "RestoreBlizzardFrame": [
      {
        "name": "RestoreBlizzardFrame",
        "count": 4,
        "confidence": 0.8,
        "sample": "CharacterFrame:HookScript(\"OnHide\", function() GearFinder:RestoreBlizzardFrame() end)",
        "retail": true
      }
    ],
    "PanelTemplates_DeselectTab": [
      {
        "name": "PanelTemplates_DeselectTab",
        "count": 4,
        "confidence": 0.8,
        "sample": "PanelTemplates_DeselectTab(CharacterFrameTab4); -- 8.2 taint error workaround",
        "retail": true
      }
    ],
    "OnZygorTabClick": [
      {
        "name": "OnZygorTabClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnZygorTabClick(self)",
        "retail": true
      }
    ],
    "ToggleCharacter": [
      {
        "name": "ToggleCharacter",
        "count": 3,
        "confidence": 0.6,
        "sample": "ToggleCharacter(\"ZygorGearFinder\")",
        "retail": true
      }
    ],
    "PanelTemplates_SetTab": [
      {
        "name": "PanelTemplates_SetTab",
        "count": 1,
        "confidence": 0.2,
        "sample": "PanelTemplates_SetTab(CharacterFrame, self:GetID())",
        "retail": true
      }
    ],
    "PanelTemplates_SelectTab": [
      {
        "name": "PanelTemplates_SelectTab",
        "count": 3,
        "confidence": 0.6,
        "sample": "PanelTemplates_SelectTab(CharacterFrameTab4); -- 8.2 taint error workaround",
        "retail": true
      }
    ],
    "ZygorTabAnchor": [
      {
        "name": "ZygorTabAnchor",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function ZygorTabAnchor()",
        "retail": true
      }
    ],
    "OnNonZygorClick": [
      {
        "name": "OnNonZygorClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnNonZygorClick()",
        "retail": true
      }
    ],
    "PanelTemplates_SetNumTabs": [
      {
        "name": "PanelTemplates_SetNumTabs",
        "count": 1,
        "confidence": 0.2,
        "sample": "--PanelTemplates_SetNumTabs(CharacterFrame, n) -- 8.2 taint error",
        "retail": true
      }
    ],
    "PanelTemplates_EnableTab": [
      {
        "name": "PanelTemplates_EnableTab",
        "count": 1,
        "confidence": 0.2,
        "sample": "PanelTemplates_EnableTab(CharacterFrame, n)",
        "retail": true
      }
    ],
    "PanelTemplates_TabResize": [
      {
        "name": "PanelTemplates_TabResize",
        "count": 4,
        "confidence": 0.8,
        "sample": "PanelTemplates_TabResize(_G[\"CharacterFrameTab4\"], nil, 100, nil, nil);",
        "retail": true
      }
    ],
    "SecureHook": [
      {
        "name": "SecureHook",
        "count": 3,
        "confidence": 0.6,
        "sample": "ItemScore:SecureHook(\"PanelTemplates_Tab_OnClick\", OnNonZygorClick, true)",
        "retail": true
      }
    ],
    "Hook": [
      {
        "name": "Hook",
        "count": 5,
        "confidence": 1.0,
        "sample": "--ItemScore:Hook(\"CharacterFrame_Expand\", OnNonZygorClick, true)",
        "retail": true
      }
    ],
    "DelayShowPreview": [
      {
        "name": "DelayShowPreview",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PointerMap:DelayShowPreview()",
        "retail": true
      }
    ],
    "SetCVarBitfield": [
      {
        "name": "SetCVarBitfield",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not GetCVarBool(\"closedInfoFrames\") then SetCVarBitfield( \"closedInfoFrames\", LE_FRAME_TUTORIAL_WORLD_MAP_FRAME, true ) end",
        "retail": true
      }
    ],
    "QuestMapFrame_Hide": [
      {
        "name": "QuestMapFrame_Hide",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GetCVar(\"questLogOpen\") then QuestMapFrame_Hide() end",
        "retail": true
      }
    ],
    "RemoveFrame": [
      {
        "name": "PlayerMovementFrameFader.RemoveFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "PlayerMovementFrameFader.RemoveFrame(WorldMapFrame)",
        "retail": true
      }
    ],
    "DelayRestoreMap": [
      {
        "name": "DelayRestoreMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PointerMap:DelayRestoreMap(manual)",
        "retail": true
      }
    ],
    "Maximize": [
      {
        "name": "Maximize",
        "count": 1,
        "confidence": 0.2,
        "sample": "WorldMapFrame:Maximize()",
        "retail": true
      }
    ],
    "QuestMapFrame_Show": [
      {
        "name": "QuestMapFrame_Show",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GetCVar(\"questLogOpen\") then QuestMapFrame_Show() end",
        "retail": true
      }
    ],
    "AddDeferredFrame": [
      {
        "name": "PlayerMovementFrameFader.AddDeferredFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "PlayerMovementFrameFader.AddDeferredFrame(WorldMapFrame, .5, 1.0, .5, function() return GetCVarBool(\"mapFade\") and not WorldMapFrame:IsMouseOver() end);",
        "retail": true
      }
    ],
    "FadeIn": [
      {
        "name": "FadeIn",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PointerMap:FadeIn()",
        "retail": true
      }
    ],
    "ShowTooltipQuest": [
      {
        "name": "ShowTooltipQuest",
        "count": 2,
        "confidence": 0.4,
        "sample": "{ title=L[\"wqp_col_NAME\"], width=100, titlej=\"LEFT\", textj=\"LEFT\", name=\"name\", sortable=true, sortfunction=WorldQuests.UpdateSorting, onentertooltip=function(row) WorldQuests:ShowTooltipQuest(row) end, tooltipanchor=\"ANCHOR_BOTTOM\" },",
        "retail": true
      }
    ],
    "ShowTooltipReward": [
      {
        "name": "ShowTooltipReward",
        "count": 3,
        "confidence": 0.6,
        "sample": "{ title=\"\", width=20, headerwidth=20, titlej=\"LEFT\", textj=\"LEFT\", name=\"rewardicon\", type=\"icon\", onentertooltip=function(row) WorldQuests:ShowTooltipReward(row) end, tooltipanchor=\"ANCHOR_BOTTOM\" },",
        "retail": true
      }
    ],
    "ShowTooltipFaction": [
      {
        "name": "ShowTooltipFaction",
        "count": 2,
        "confidence": 0.4,
        "sample": "{ title=L[\"wqp_col_FACTION\"], width=65, titlej=\"LEFT\", textj=\"LEFT\", name=\"faction\", sortable=true, sortfunction=WorldQuests.UpdateSorting, onentertooltip=function(row) WorldQuests:ShowTooltipFaction(row) end, tooltipanchor=\"ANCHOR_BOTTOM\"  },",
        "retail": true
      }
    ],
    "SuggestWorldQuestGuideFromMap": [
      {
        "name": "SuggestWorldQuestGuideFromMap",
        "count": 5,
        "confidence": 1.0,
        "sample": "hooksecurefunc(pin,\"OnMouseUp\", function(pin,button) ZGV:ScheduleTimer(function() WorldQuests:SuggestWorldQuestGuideFromMap(pin) end,0) end)",
        "retail": true
      }
    ],
    "HighlightHide": [
      {
        "name": "HighlightHide",
        "count": 4,
        "confidence": 0.8,
        "sample": "WorldQuests:HighlightHide()",
        "retail": true
      }
    ],
    "SUPER_TRACKING_CHANGED": [
      {
        "name": "SUPER_TRACKING_CHANGED",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:AddEventHandler(\"SUPER_TRACKING_CHANGED\",function(self,event) WorldQuests:SUPER_TRACKING_CHANGED() end)",
        "retail": true
      }
    ],
    "QueueDetailsLoad": [
      {
        "name": "QueueDetailsLoad",
        "count": 6,
        "confidence": 1.0,
        "sample": "WorldQuests:QueueDetailsLoad()",
        "retail": true
      }
    ],
    "GetSuperTrackedQuestID": [
      {
        "name": "C_SuperTrack.GetSuperTrackedQuestID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local questID = C_SuperTrack.GetSuperTrackedQuestID()",
        "retail": true
      }
    ],
    "IsQuestBeingTracked": [
      {
        "name": "WorldQuestTrackerAddon.IsQuestBeingTracked",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not WorldQuestTrackerAddon.IsQuestBeingTracked(questID) then return end",
        "retail": true
      }
    ],
    "WQTwrapper": [
      {
        "name": "WorldQuests.WQTwrapper",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WorldQuests.WQTwrapper(object)",
        "retail": true
      }
    ],
    "SuggestWorldQuestGuide": [
      {
        "name": "SuggestWorldQuestGuide",
        "count": 9,
        "confidence": 1.0,
        "sample": "function WorldQuests:SuggestWorldQuestGuide(object,questID,force,mapID)",
        "retail": true
      }
    ],
    "SuggestWorldQuestGuideFromList": [
      {
        "name": "SuggestWorldQuestGuideFromList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WorldQuests:SuggestWorldQuestGuideFromList(object)",
        "retail": true
      }
    ],
    "GetQuestZoneID": [
      {
        "name": "C_TaskQuest.GetQuestZoneID",
        "count": 5,
        "confidence": 1.0,
        "sample": "data.mapID = data.mapID or C_TaskQuest.GetQuestZoneID(qid)",
        "retail": true
      }
    ],
    "GetQuestInfoByQuestID": [
      {
        "name": "C_TaskQuest.GetQuestInfoByQuestID",
        "count": 5,
        "confidence": 1.0,
        "sample": "data.title,data.faction,_ = C_TaskQuest.GetQuestInfoByQuestID(qid)",
        "retail": true
      }
    ],
    "GetQuestTagInfo": [
      {
        "name": "C_QuestLog.GetQuestTagInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local info = C_QuestLog.GetQuestTagInfo(qid)",
        "retail": true
      }
    ],
    "GetQuestTimeLeftMinutes": [
      {
        "name": "C_TaskQuest.GetQuestTimeLeftMinutes",
        "count": 1,
        "confidence": 0.2,
        "sample": "data.timedisp = C_TaskQuest.GetQuestTimeLeftMinutes(qid)",
        "retail": true
      }
    ],
    "GetQuestLogRewardXP": [
      {
        "name": "GetQuestLogRewardXP",
        "count": 1,
        "confidence": 0.2,
        "sample": "data.exp = GetQuestLogRewardXP(qid)",
        "retail": true
      }
    ],
    "GetQuestLogRewardMoney": [
      {
        "name": "GetQuestLogRewardMoney",
        "count": 1,
        "confidence": 0.2,
        "sample": "data.gold = GetQuestLogRewardMoney(qid)",
        "retail": true
      }
    ],
    "GetQuestLogRewardHonor": [
      {
        "name": "GetQuestLogRewardHonor",
        "count": 1,
        "confidence": 0.2,
        "sample": "data.honor = GetQuestLogRewardHonor(qid)",
        "retail": true
      }
    ],
    "GetQuestRewardCurrencies": [
      {
        "name": "C_QuestLog.GetQuestRewardCurrencies",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i,v in ipairs(C_QuestLog.GetQuestRewardCurrencies(qid)) do",
        "retail": true
      }
    ],
    "GetFactionGrantedByCurrency": [
      {
        "name": "C_CurrencyInfo.GetFactionGrantedByCurrency",
        "count": 1,
        "confidence": 0.2,
        "sample": "if C_CurrencyInfo.GetFactionGrantedByCurrency(v.currencyID) then",
        "retail": true
      }
    ],
    "GetNumQuestLogRewards": [
      {
        "name": "GetNumQuestLogRewards",
        "count": 1,
        "confidence": 0.2,
        "sample": "if GetNumQuestLogRewards(qid)>0 then",
        "retail": true
      }
    ],
    "GetQuestLogRewardInfo": [
      {
        "name": "GetQuestLogRewardInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _, _, numItems = GetQuestLogRewardInfo(1,qid)",
        "retail": true
      }
    ],
    "IsAnimaItemByID": [
      {
        "name": "C_Item.IsAnimaItemByID",
        "count": 2,
        "confidence": 0.4,
        "sample": "if itemlink then data.rewards.anima = C_Item.IsAnimaItemByID(itemlink) end",
        "retail": true
      }
    ],
    "DoesQuestAwardReputationWithFaction": [
      {
        "name": "C_QuestLog.DoesQuestAwardReputationWithFaction",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (C_QuestLog.DoesQuestAwardReputationWithFaction(qid, factionID) or C_QuestLog.IsQuestCriteriaForBounty(qid, factionData.quest) or (data.mapID==factionData.zone) or (data.faction==factionID)) and (not factionData.faction or factionData.faction==player_faction) then",
        "retail": true
      }
    ],
    "IsQuestCriteriaForBounty": [
      {
        "name": "C_QuestLog.IsQuestCriteriaForBounty",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (C_QuestLog.DoesQuestAwardReputationWithFaction(qid, factionID) or C_QuestLog.IsQuestCriteriaForBounty(qid, factionData.quest) or (data.mapID==factionData.zone) or (data.faction==factionID)) and (not factionData.faction or factionData.faction==player_faction) then",
        "retail": true
      }
    ],
    "GetWorldQuests": [
      {
        "name": "GetWorldQuests",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WorldQuests:GetWorldQuests()",
        "retail": true
      }
    ],
    "GetQuestsForPlayerByMapID": [
      {
        "name": "C_TaskQuest.GetQuestsForPlayerByMapID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local quests = C_TaskQuest.GetQuestsForPlayerByMapID(current_mapid)",
        "retail": true
      }
    ],
    "HighlightShow": [
      {
        "name": "HighlightShow",
        "count": 5,
        "confidence": 1.0,
        "sample": "function WorldQuests:HighlightShow(row)",
        "retail": true
      }
    ],
    "IsValidQuest": [
      {
        "name": "IsValidQuest",
        "count": 4,
        "confidence": 0.8,
        "sample": "function WorldQuests:IsValidQuest(object)",
        "retail": true
      }
    ],
    "IsMaximized": [
      {
        "name": "IsMaximized",
        "count": 1,
        "confidence": 0.2,
        "sample": "if WorldMapFrame:IsMaximized() then WorldQuests.DisplayFrame:Hide() end",
        "retail": true
      }
    ],
    "SetDisableTooltip": [
      {
        "name": "SetDisableTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- SetDisableTooltip()",
        "retail": true
      }
    ],
    "HaveQuestData": [
      {
        "name": "HaveQuestData",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ( not HaveQuestData(questItem.questID) ) then",
        "retail": true
      }
    ],
    "QuestUtils_AddQuestTypeToTooltip": [
      {
        "name": "QuestUtils_AddQuestTypeToTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "QuestUtils_AddQuestTypeToTooltip(tooltip_object, questItem.questID, NORMAL_FONT_COLOR);",
        "retail": true
      }
    ],
    "GetRGB": [
      {
        "name": "GetRGB",
        "count": 2,
        "confidence": 0.4,
        "sample": "tooltip_object:AddLine(factionName, GRAY_FONT_COLOR:GetRGB());",
        "retail": true
      }
    ],
    "WorldMap_AddQuestTimeToTooltip": [
      {
        "name": "WorldMap_AddQuestTimeToTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "WorldMap_AddQuestTimeToTooltip(questItem.questID);",
        "retail": true
      }
    ],
    "GetQuestProgressBarInfo": [
      {
        "name": "C_TaskQuest.GetQuestProgressBarInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local percent = C_TaskQuest.GetQuestProgressBarInfo(questItem.questID);",
        "retail": true
      }
    ],
    "GameTooltip_ShowProgressBar": [
      {
        "name": "GameTooltip_ShowProgressBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_ShowProgressBar(tooltip_object, 0, 100, percent, PERCENTAGE_STRING:format(percent));",
        "retail": true
      }
    ],
    "GameTooltip_AddQuestRewardsToTooltip": [
      {
        "name": "GameTooltip_AddQuestRewardsToTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_AddQuestRewardsToTooltip(tooltip_object, questItem.questID);",
        "retail": true
      }
    ],
    "AddDebugWorldQuestInfo": [
      {
        "name": "AddDebugWorldQuestInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "tooltip_object:AddDebugWorldQuestInfo(questItem.questID);",
        "retail": true
      }
    ],
    "ToggleAll": [
      {
        "name": "ToggleAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WorldQuests:ToggleAll(isChecked)",
        "retail": true
      }
    ],
    "QueueUpdate": [
      {
        "name": "QueueUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "WorldQuests:QueueUpdate(row)",
        "retail": true
      }
    ],
    "QueueUpdateButton": [
      {
        "name": "QueueUpdateButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "WorldQuests:QueueUpdateButton()",
        "retail": true
      }
    ],
    "FindPath": [
      {
        "name": "FindPath",
        "count": 7,
        "confidence": 1.0,
        "sample": "LibRover:FindPath(0,0,0, endpoint.m,endpoint.x,endpoint.y, ZGV.WorldQuests.QueuePathHandler, {direct=not ZGV.db.profile.pathfinding, multiple_ends=more_points, reportEnd=true })",
        "retail": true
      }
    ],
    "QueuePathHandler": [
      {
        "name": "WorldQuests.QueuePathHandler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WorldQuests.QueuePathHandler(state,path,ext,reason)",
        "retail": true
      }
    ],
    "QuestsQueued": [
      {
        "name": "QuestsQueued",
        "count": 85,
        "confidence": 1.0,
        "sample": "function WorldQuests:QuestsQueued()",
        "retail": true
      }
    ],
    "GetPinTemplate": [
      {
        "name": "GetPinTemplate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function WorldQuests.DataProvier:GetPinTemplate()",
        "retail": true
      }
    ],
    "RefreshVisuals": [
      {
        "name": "RefreshVisuals",
        "count": 1,
        "confidence": 0.2,
        "sample": "pin:RefreshVisuals();",
        "retail": true
      }
    ],
    "AddWorldQuest": [
      {
        "name": "AddWorldQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.activePins[info.questID] = self:AddWorldQuest(info);",
        "retail": true
      }
    ],
    "RemovePin": [
      {
        "name": "RemovePin",
        "count": 3,
        "confidence": 0.6,
        "sample": "mapCanvas:RemovePin(self.activePins[questID]);",
        "retail": true
      }
    ],
    "GetNumActivePinsByTemplate": [
      {
        "name": "GetNumActivePinsByTemplate",
        "count": 1,
        "confidence": 0.2,
        "sample": "mapCanvas:TriggerEvent(\"WorldQuestsUpdate\", mapCanvas:GetNumActivePinsByTemplate(self:GetPinTemplate()));",
        "retail": true
      }
    ],
    "PetRegEvents": [
      {
        "name": "PetRegEvents",
        "count": 2,
        "confidence": 0.4,
        "sample": "PetBattle:PetRegEvents()",
        "retail": true
      }
    ],
    "JournalIconSetup": [
      {
        "name": "PetBattle.PetJournal.JournalIconSetup",
        "count": 3,
        "confidence": 0.6,
        "sample": "hooksecurefunc(\"ToggleCollectionsJournal\",function() PetBattle.PetJournal.JournalIconSetup() end)",
        "retail": true
      }
    ],
    "IsFrameLockActive": [
      {
        "name": "IsFrameLockActive",
        "count": 1,
        "confidence": 0.2,
        "sample": "if IsFrameLockActive(\"PETBATTLES\") then",
        "retail": true
      }
    ],
    "ShowInterface": [
      {
        "name": "ShowInterface",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZGV.PetBattle:ShowInterface()",
        "retail": true
      }
    ],
    "PrepareCachePets": [
      {
        "name": "PrepareCachePets",
        "count": 2,
        "confidence": 0.4,
        "sample": "PetBattle:PrepareCachePets()",
        "retail": true
      }
    ],
    "GetAbilityText": [
      {
        "name": "GetAbilityText",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PetBattle:GetAbilityText(id,maxHp,power,speed)",
        "retail": true
      }
    ],
    "GetAbilityInfoByID": [
      {
        "name": "C_PetBattles.GetAbilityInfoByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _,name = C_PetBattles.GetAbilityInfoByID(id)",
        "retail": true
      }
    ],
    "FloatingPetBattleAbility_Show": [
      {
        "name": "FloatingPetBattleAbility_Show",
        "count": 7,
        "confidence": 1.0,
        "sample": "FloatingPetBattleAbility_Show(id,maxHp,power,speed)",
        "retail": true
      }
    ],
    "PetBattle_MainFrameUpdateRound": [
      {
        "name": "PetBattle_MainFrameUpdateRound",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PetBattle_MainFrameUpdateRound(round)",
        "retail": true
      }
    ],
    "GetActivePet": [
      {
        "name": "C_PetBattles.GetActivePet",
        "count": 5,
        "confidence": 1.0,
        "sample": "local enemyPet=C_PetBattles.GetActivePet(2)",
        "retail": true
      }
    ],
    "GetPower": [
      {
        "name": "C_PetBattles.GetPower",
        "count": 6,
        "confidence": 1.0,
        "sample": "local power=C_PetBattles.GetPower(2,enemyPet)",
        "retail": true
      }
    ],
    "GetSpeed": [
      {
        "name": "C_PetBattles.GetSpeed",
        "count": 7,
        "confidence": 1.0,
        "sample": "local speed=C_PetBattles.GetSpeed(2,enemyPet)",
        "retail": true
      }
    ],
    "GetMaxHealth": [
      {
        "name": "C_PetBattles.GetMaxHealth",
        "count": 7,
        "confidence": 1.0,
        "sample": "local maxHp=C_PetBattles.GetMaxHealth(2,enemyPet)",
        "retail": true
      }
    ],
    "GetAbilityState": [
      {
        "name": "C_PetBattles.GetAbilityState",
        "count": 5,
        "confidence": 1.0,
        "sample": "C_PetBattles.GetAbilityState(owner,petindex,ability) -- TODO: what? these are all nils!",
        "retail": true
      }
    ],
    "GetAbilityInfo": [
      {
        "name": "C_PetBattles.GetAbilityInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local id, name, icon, maxCooldown, description, numTurns, abilityPetType, noStrongWeakHints = C_PetBattles.GetAbilityInfo(2, enemyPet, i)",
        "retail": true
      }
    ],
    "GetBattlePetAbilityHyperlink": [
      {
        "name": "GetBattlePetAbilityHyperlink",
        "count": 5,
        "confidence": 1.0,
        "sample": "local link = GetBattlePetAbilityHyperlink(id,maxHp,power,speed)",
        "retail": true
      }
    ],
    "PetBattle_EnemyFrameUpdateRound": [
      {
        "name": "PetBattle_EnemyFrameUpdateRound",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PetBattle_EnemyFrameUpdateRound(round)",
        "retail": true
      }
    ],
    "GetExp": [
      {
        "name": "GetExp",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetExp(pet)",
        "retail": true
      }
    ],
    "GetLevel": [
      {
        "name": "C_PetBattles.GetLevel",
        "count": 5,
        "confidence": 1.0,
        "sample": "local level=C_PetBattles.GetLevel(1,pet)",
        "retail": true
      }
    ],
    "PetBattle_AllyFrameUpdateRound": [
      {
        "name": "PetBattle_AllyFrameUpdateRound",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PetBattle_AllyFrameUpdateRound(round)",
        "retail": true
      }
    ],
    "MainFrameUpdate": [
      {
        "name": "MainFrameUpdate",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PetBattle:MainFrameUpdate()",
        "retail": true
      }
    ],
    "GetPetType": [
      {
        "name": "C_PetBattles.GetPetType",
        "count": 5,
        "confidence": 1.0,
        "sample": "local petTypeNum=C_PetBattles.GetPetType(2,enemyPet)",
        "retail": true
      }
    ],
    "GetBreedQuality": [
      {
        "name": "C_PetBattles.GetBreedQuality",
        "count": 3,
        "confidence": 0.6,
        "sample": "local quality=C_PetBattles.GetBreedQuality(2,enemyPet)",
        "retail": true
      }
    ],
    "GetIcon": [
      {
        "name": "C_PetBattles.GetIcon",
        "count": 4,
        "confidence": 0.8,
        "sample": "local bigIcon=C_PetBattles.GetIcon(2,enemyPet) --always their pets.",
        "retail": true
      },
      {
        "name": "Details.Immersion.GetIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Immersion.GetIcon(aID)",
        "retail": true
      },
      {
        "name": "GetIcon",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:AddTooltipSpellHeaderText (customObject:GetName(), \"yellow\", 1, customObject:GetIcon(), 0.90625, 0.109375, 0.15625, 0.875, false, 18)",
        "retail": true
      }
    ],
    "ComparePets": [
      {
        "name": "ComparePets",
        "count": 3,
        "confidence": 0.6,
        "sample": "local scores = PetBattle:ComparePets(petTypeNum,enemyAbilities,level,speed)",
        "retail": true
      }
    ],
    "UpdateSuggestedPets": [
      {
        "name": "UpdateSuggestedPets",
        "count": 3,
        "confidence": 0.6,
        "sample": "PetBattle:UpdateSuggestedPets(scores,\"Main\")",
        "retail": true
      }
    ],
    "EnemyFrameUpdate": [
      {
        "name": "EnemyFrameUpdate",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PetBattle:EnemyFrameUpdate()",
        "retail": true
      }
    ],
    "AllyFrameUpdate": [
      {
        "name": "AllyFrameUpdate",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PetBattle:AllyFrameUpdate()",
        "retail": true
      }
    ],
    "IsDamageAbility": [
      {
        "name": "IsDamageAbility",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function IsDamageAbility(description,abilityType)",
        "retail": true
      }
    ],
    "GetNumPets": [
      {
        "name": "C_PetBattles.GetNumPets",
        "count": 1,
        "confidence": 0.2,
        "sample": "for petnum=1, C_PetBattles.GetNumPets(1) do",
        "retail": true
      },
      {
        "name": "C_PetJournal.GetNumPets",
        "count": 1,
        "confidence": 0.2,
        "sample": "local numPets = C_PetJournal.GetNumPets();",
        "retail": true
      }
    ],
    "SortScores": [
      {
        "name": "SortScores",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SortScores(scores)",
        "retail": true
      }
    ],
    "MakeFontStrings": [
      {
        "name": "MakeFontStrings",
        "count": 42,
        "confidence": 1.0,
        "sample": "function PetBattle:MakeFontStrings(frame,name,text,point,x,y,label)",
        "retail": true
      }
    ],
    "SetIndentedWordWrap": [
      {
        "name": "SetIndentedWordWrap",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetIndentedWordWrap(true)",
        "retail": true
      }
    ],
    "MakeEditBox": [
      {
        "name": "MakeEditBox",
        "count": 11,
        "confidence": 1.0,
        "sample": "function PetBattle:MakeEditBox(frame,name,text,point,labelpoint,x,y,label)",
        "retail": true
      }
    ],
    "SetHeightAllFrames": [
      {
        "name": "SetHeightAllFrames",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function SetHeightAllFrames(y)",
        "retail": true
      }
    ],
    "PetBattle_ToggleFrames": [
      {
        "name": "PetBattle_ToggleFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function PetBattle_ToggleFrames(button)",
        "retail": true
      }
    ],
    "CreateMainFrames": [
      {
        "name": "CreateMainFrames",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateMainFrames(self)",
        "retail": true
      }
    ],
    "SetUserPlaced": [
      {
        "name": "SetUserPlaced",
        "count": 8,
        "confidence": 1.0,
        "sample": ":SetUserPlaced(true)",
        "retail": true
      }
    ],
    "CreateTabs": [
      {
        "name": "CreateTabs",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateTabs(self)",
        "retail": true
      }
    ],
    "CreateMainFrameText": [
      {
        "name": "CreateMainFrameText",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateMainFrameText(self)",
        "retail": true
      }
    ],
    "SetTextHeight": [
      {
        "name": "SetTextHeight",
        "count": 6,
        "confidence": 1.0,
        "sample": "parent.Icon:SetTextHeight(50) parent.Icon:SetWidth(225)",
        "retail": true
      }
    ],
    "MakeEnemys": [
      {
        "name": "MakeEnemys",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function MakeEnemys(parent)",
        "retail": true
      }
    ],
    "CreateEnemyFrameText": [
      {
        "name": "CreateEnemyFrameText",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateEnemyFrameText(self)",
        "retail": true
      }
    ],
    "MakeAllys": [
      {
        "name": "MakeAllys",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function MakeAllys(parent)",
        "retail": true
      }
    ],
    "CreateAllyFrameText": [
      {
        "name": "CreateAllyFrameText",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateAllyFrameText(self)",
        "retail": true
      }
    ],
    "Icon_OnClick": [
      {
        "name": "PetBattle.PetJournal.Icon_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PetBattle.PetJournal.Icon_OnClick(self,but)",
        "retail": true
      },
      {
        "name": "ZGV.PetBattle.PetJournal.Icon_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "button:SetScript(\"OnClick\", function(...) ZGV.PetBattle.PetJournal.Icon_OnClick(...) end) -- Find the pet!",
        "retail": true
      },
      {
        "name": "Achievement.Icon_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Achievement.Icon_OnClick(self,but)",
        "retail": true
      },
      {
        "name": "ZGV.Achievement.Icon_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "button:SetScript(\"OnClick\", function(...) ZGV.Achievement.Icon_OnClick(...) end)",
        "retail": true
      }
    ],
    "ScheduleUpdate": [
      {
        "name": "PetBattle.PetJournal.ScheduleUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PetBattle.PetJournal.ScheduleUpdate()",
        "retail": true
      },
      {
        "name": "Achievement.ScheduleUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Achievement.ScheduleUpdate()",
        "retail": true
      },
      {
        "name": "ScheduleUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ScheduleUpdate(instancia)",
        "retail": true
      }
    ],
    "UpdateIcons": [
      {
        "name": "PetBattle.PetJournal.UpdateIcons",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:ScheduleTimer(function() PetBattle.PetJournal.UpdateIcons() end, 0.0001)",
        "retail": true
      },
      {
        "name": "Achievement.UpdateIcons",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:ScheduleTimer(function() Achievement.UpdateIcons() end, 0.0001)",
        "retail": true
      }
    ],
    "CachePets": [
      {
        "name": "CachePets",
        "count": 2,
        "confidence": 0.4,
        "sample": "PetBattle:CachePets()",
        "retail": true
      }
    ],
    "IsFilterChecked": [
      {
        "name": "C_PetJournal.IsFilterChecked",
        "count": 2,
        "confidence": 0.4,
        "sample": "[LE_PET_JOURNAL_FILTER_COLLECTED] = C_PetJournal.IsFilterChecked(LE_PET_JOURNAL_FILTER_COLLECTED),",
        "retail": true
      }
    ],
    "GetNumPetTypes": [
      {
        "name": "C_PetJournal.GetNumPetTypes",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i=1, C_PetJournal.GetNumPetTypes() do",
        "retail": true
      }
    ],
    "IsPetTypeChecked": [
      {
        "name": "C_PetJournal.IsPetTypeChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "filters_types[i] = C_PetJournal.IsPetTypeChecked(i)",
        "retail": true
      }
    ],
    "GetNumPetSources": [
      {
        "name": "C_PetJournal.GetNumPetSources",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i=1, C_PetJournal.GetNumPetSources() do",
        "retail": true
      }
    ],
    "IsPetSourceChecked": [
      {
        "name": "C_PetJournal.IsPetSourceChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "filters_sources[i] = C_PetJournal.IsPetSourceChecked(i)",
        "retail": true
      }
    ],
    "SetDefaultFilters": [
      {
        "name": "C_PetJournal.SetDefaultFilters",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_PetJournal.SetDefaultFilters();",
        "retail": true
      }
    ],
    "SetFilterChecked": [
      {
        "name": "C_PetJournal.SetFilterChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i,v in pairs(filters_collected) do C_PetJournal.SetFilterChecked(i, v) end",
        "retail": true
      }
    ],
    "SetPetTypeFilter": [
      {
        "name": "C_PetJournal.SetPetTypeFilter",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i,v in pairs(filters_types) do C_PetJournal.SetPetTypeFilter(i, v) end",
        "retail": true
      }
    ],
    "SetPetSourceChecked": [
      {
        "name": "C_PetJournal.SetPetSourceChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i,v in pairs(filters_sources) do C_PetJournal.SetPetSourceChecked(i, v) end",
        "retail": true
      }
    ],
    "GetPetInfoByIndex": [
      {
        "name": "C_PetJournal.GetPetInfoByIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _, speciesID, _, _, level = C_PetJournal.GetPetInfoByIndex(i)",
        "retail": true
      }
    ],
    "GetPetFakeIdByLink": [
      {
        "name": "GetPetFakeIdByLink",
        "count": 5,
        "confidence": 1.0,
        "sample": "function PetBattle:GetPetFakeIdByLink(link,generic)",
        "retail": true
      }
    ],
    "GetPetBreedByLink": [
      {
        "name": "GetPetBreedByLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "local breedid,breedname = ZGV.PetBattle:GetPetBreedByLink(link)",
        "retail": true
      }
    ],
    "GetBattlePetIdFromFakeId": [
      {
        "name": "GetBattlePetIdFromFakeId",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PetBattle:GetBattlePetIdFromFakeId(link)",
        "retail": true
      }
    ],
    "GetPetBreedByStats": [
      {
        "name": "GetPetBreedByStats",
        "count": 3,
        "confidence": 0.6,
        "sample": "return PetBattle:GetPetBreedByStats(BattlePetId,BattlePetHP,BattlePetAtt,BattlePetSpeed,BattlePetRarity,BattlePetLevel)",
        "retail": true
      }
    ],
    "GetPetBreedBySlot": [
      {
        "name": "GetPetBreedBySlot",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PetBattle:GetPetBreedBySlot(bag,slot)",
        "retail": true
      }
    ],
    "HasPetByDisplay": [
      {
        "name": "HasPetByDisplay",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PetBattle:HasPetByDisplay(petid)",
        "retail": true
      }
    ],
    "CanPlayerDualWield": [
      {
        "name": "CanPlayerDualWield",
        "count": 3,
        "confidence": 0.6,
        "sample": "self.playerDualWield, self.playerDualTwohanders = ItemScore:CanPlayerDualWield()",
        "retail": true
      }
    ],
    "IconSetup": [
      {
        "name": "IconSetup",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"ToggleAchievementFrame\",function() Achievement:IconSetup() end)",
        "retail": true
      }
    ],
    "CacheSkills_Queued": [
      {
        "name": "CacheSkills_Queued",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:CacheSkills_Queued()",
        "retail": true
      }
    ],
    "GetCategoryInfo": [
      {
        "name": "C_TradeSkillUI.GetCategoryInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local cat = C_TradeSkillUI.GetCategoryInfo(subid)",
        "retail": true
      }
    ],
    "CacheRecipes": [
      {
        "name": "CacheRecipes",
        "count": 2,
        "confidence": 0.4,
        "sample": "--self:CacheRecipes(profs)  -- or try to, anyway. --Do Cooking masteries too",
        "retail": true
      }
    ],
    "CacheRecipes_Queued": [
      {
        "name": "CacheRecipes_Queued",
        "count": 4,
        "confidence": 0.8,
        "sample": "if ZGVP.LastRecipeCheckLine~=skill then ZGV:CacheRecipes_Queued(profs) return end -- we changed skill line, grab recipes now",
        "retail": true
      }
    ],
    "IsTradeSkillReady": [
      {
        "name": "C_TradeSkillUI.IsTradeSkillReady",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not C_TradeSkillUI.IsTradeSkillReady() then return end -- prevents missing reagents in recipes",
        "retail": true
      }
    ],
    "IsTradeSkillGuild": [
      {
        "name": "C_TradeSkillUI.IsTradeSkillGuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "if C_TradeSkillUI.IsTradeSkillGuild() or C_TradeSkillUI.IsTradeSkillLinked() then return end",
        "retail": true
      }
    ],
    "IsTradeSkillLinked": [
      {
        "name": "C_TradeSkillUI.IsTradeSkillLinked",
        "count": 1,
        "confidence": 0.2,
        "sample": "if C_TradeSkillUI.IsTradeSkillGuild() or C_TradeSkillUI.IsTradeSkillLinked() then return end",
        "retail": true
      }
    ],
    "GetAllRecipeIDs": [
      {
        "name": "C_TradeSkillUI.GetAllRecipeIDs",
        "count": 1,
        "confidence": 0.2,
        "sample": "local all_recipes = C_TradeSkillUI.GetAllRecipeIDs()",
        "retail": true
      }
    ],
    "GetRecipeInfo": [
      {
        "name": "C_TradeSkillUI.GetRecipeInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local api_recipe = C_TradeSkillUI.GetRecipeInfo(recipeid)",
        "retail": true
      }
    ],
    "GetRecipeSchematic": [
      {
        "name": "C_TradeSkillUI.GetRecipeSchematic",
        "count": 1,
        "confidence": 0.2,
        "sample": "local api_schematic = C_TradeSkillUI.GetRecipeSchematic(recipeid,false)",
        "retail": true
      }
    ],
    "GetCraftableCount": [
      {
        "name": "C_TradeSkillUI.GetCraftableCount",
        "count": 1,
        "confidence": 0.2,
        "sample": "numAvailable = C_TradeSkillUI.GetCraftableCount(recipeid),",
        "retail": true
      }
    ],
    "GetRecipeSourceText": [
      {
        "name": "C_TradeSkillUI.GetRecipeSourceText",
        "count": 1,
        "confidence": 0.2,
        "sample": "source = C_TradeSkillUI.GetRecipeSourceText(recipeid),",
        "retail": true
      }
    ],
    "Profession_NEW_RECIPE_LEARNED": [
      {
        "name": "Profession_NEW_RECIPE_LEARNED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:Profession_NEW_RECIPE_LEARNED(event,spell)",
        "retail": true
      }
    ],
    "Profession_CHAT_MSG_SYSTEM": [
      {
        "name": "Profession_CHAT_MSG_SYSTEM",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV:Profession_CHAT_MSG_SYSTEM(event,text)",
        "retail": true
      }
    ],
    "PerformTradeSkill": [
      {
        "name": "PerformTradeSkill",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:PerformTradeSkill(goal.spellid,goal.count-C_Item.GetItemCount(goal.targetid))",
        "retail": true
      }
    ],
    "SelectRecipe": [
      {
        "name": "SelectRecipe",
        "count": 1,
        "confidence": 0.2,
        "sample": "ProfessionsFrame.CraftingPage:SelectRecipe(api_recipe)",
        "retail": true
      }
    ],
    "GetTransaction": [
      {
        "name": "GetTransaction",
        "count": 1,
        "confidence": 0.2,
        "sample": "local transaction = (ProfessionsFrame and ProfessionsFrame.CraftingPage and ProfessionsFrame.CraftingPage.SchematicForm) and ProfessionsFrame.CraftingPage.SchematicForm:GetTransaction()",
        "retail": true
      }
    ],
    "CreateCraftingReagentInfoTbl": [
      {
        "name": "CreateCraftingReagentInfoTbl",
        "count": 1,
        "confidence": 0.2,
        "sample": "local craftingReagentTbl = transaction and transaction:CreateCraftingReagentInfoTbl()",
        "retail": true
      }
    ],
    "CraftRecipe": [
      {
        "name": "C_TradeSkillUI.CraftRecipe",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_TradeSkillUI.CraftRecipe(id, count, craftingReagentTbl)",
        "retail": true
      }
    ],
    "UpdateSkillConsole": [
      {
        "name": "UpdateSkillConsole",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function UpdateSkillConsole(_,_,msg)",
        "retail": true
      }
    ],
    "HasProfessionSlot": [
      {
        "name": "HasProfessionSlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGVP:HasProfessionSlot()",
        "retail": true
      }
    ],
    "SetTalents": [
      {
        "name": "TA.SetTalents",
        "count": 5,
        "confidence": 1.0,
        "sample": "PlayerSpellsFrame.TalentsFrame:HookScript(\"OnShow\",function() TA.SetTalents() end)",
        "retail": true
      }
    ],
    "LearnNextTalent": [
      {
        "name": "LearnNextTalent",
        "count": 2,
        "confidence": 0.4,
        "sample": "TA:LearnNextTalent()",
        "retail": true
      }
    ],
    "SetSpec": [
      {
        "name": "TA.SetSpec",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TA.SetSpec()",
        "retail": true
      }
    ],
    "DelayedSetTalents": [
      {
        "name": "TA.DelayedSetTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TA.DelayedSetTalents()",
        "retail": true
      }
    ],
    "GetBuild": [
      {
        "name": "GetBuild",
        "count": 2,
        "confidence": 0.4,
        "sample": "TA.ActiveBuild = TA:GetBuild(ident)",
        "retail": true
      }
    ],
    "GetBuildStatus": [
      {
        "name": "GetBuildStatus",
        "count": 3,
        "confidence": 0.6,
        "sample": "local status = TA:GetBuildStatus()",
        "retail": true
      }
    ],
    "SetAvailable": [
      {
        "name": "SetAvailable",
        "count": 2,
        "confidence": 0.4,
        "sample": "zygorbutton:SetAvailable(available)",
        "retail": true
      }
    ],
    "SetSelectionTalents": [
      {
        "name": "TA.SetSelectionTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TA.SetSelectionTalents()",
        "retail": true
      }
    ],
    "ParseLines": [
      {
        "name": "ParseLines",
        "count": 5,
        "confidence": 1.0,
        "sample": "function TA:ParseLines(text,spec,tree)",
        "retail": true
      }
    ],
    "GetEntryInfo": [
      {
        "name": "C_Traits.GetEntryInfo",
        "count": 12,
        "confidence": 1.0,
        "sample": "local leftEntryInfo =  C_Traits.GetEntryInfo(configID, left)",
        "retail": true
      }
    ],
    "GetSubTreeInfo": [
      {
        "name": "C_Traits.GetSubTreeInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local leftTreeInfo = C_Traits.GetSubTreeInfo(configID, leftEntryInfo.subTreeID);",
        "retail": true
      }
    ],
    "GetNodeCost": [
      {
        "name": "C_Traits.GetNodeCost",
        "count": 1,
        "confidence": 0.2,
        "sample": "local cost = C_Traits.GetNodeCost(configID,nodeInfo.ID)",
        "retail": true
      }
    ],
    "LearnBuild": [
      {
        "name": "LearnBuild",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TA:LearnBuild()",
        "retail": true
      }
    ],
    "ResetTree": [
      {
        "name": "C_Traits.ResetTree",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Traits.ResetTree(configID,treeID)",
        "retail": true
      }
    ],
    "SetSelection": [
      {
        "name": "C_Traits.SetSelection",
        "count": 3,
        "confidence": 0.6,
        "sample": "if build.hero==\"left\" then C_Traits.SetSelection(configID,nodeID,left) end",
        "retail": true
      }
    ],
    "PurchaseRank": [
      {
        "name": "C_Traits.PurchaseRank",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Traits.PurchaseRank(configID,node.ID)",
        "retail": true
      }
    ],
    "RecordTalents": [
      {
        "name": "ZGV.Testing.RecordTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "func = function() ZGV.Testing.RecordTalents() end,",
        "retail": true
      }
    ],
    "DumpTalents": [
      {
        "name": "ZGV.Testing.DumpTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "func = function() ZGV.Testing.DumpTalents() end,",
        "retail": true
      }
    ],
    "ExportCurrentBuild": [
      {
        "name": "ZGV.Testing.ExportCurrentBuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "func = function() ZGV.Testing.ExportCurrentBuild() end,",
        "retail": true
      }
    ],
    "CheckForChanges": [
      {
        "name": "ZGV.Testing.CheckForChanges",
        "count": 1,
        "confidence": 0.2,
        "sample": "func = function() ZGV.Testing.CheckForChanges() end,",
        "retail": true
      }
    ],
    "ContinueOnAddOnLoaded": [
      {
        "name": "EventUtil.ContinueOnAddOnLoaded",
        "count": 1,
        "confidence": 0.2,
        "sample": "EventUtil.ContinueOnAddOnLoaded(\"Blizzard_PlayerSpells\", TA.Initialise);",
        "retail": true
      }
    ],
    "GetRaceZone": [
      {
        "name": "GetRaceZone",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DR:GetRaceZone(zone)",
        "retail": true
      }
    ],
    "GetRaceName": [
      {
        "name": "GetRaceName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DR:GetRaceName(zone,race)",
        "retail": true
      }
    ],
    "GetRaceLocation": [
      {
        "name": "GetRaceLocation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DR:GetRaceLocation(zone,race)",
        "retail": true
      }
    ],
    "GetRaceMedal": [
      {
        "name": "GetRaceMedal",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DR:GetRaceMedal(zone,race,diff)",
        "retail": true
      }
    ],
    "Blood": [
      {
        "name": "Blood",
        "count": 13,
        "confidence": 1.0,
        "sample": "name = \"Blood (Leveling)\",",
        "retail": true
      }
    ],
    "Frost": [
      {
        "name": "Frost",
        "count": 20,
        "confidence": 1.0,
        "sample": "name = \"Frost (Leveling)\",",
        "retail": true
      }
    ],
    "Unholy": [
      {
        "name": "Unholy",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Unholy (Leveling)\",",
        "retail": true
      }
    ],
    "Havoc": [
      {
        "name": "Havoc",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Havoc (Leveling)\",",
        "retail": true
      }
    ],
    "Vengeance": [
      {
        "name": "Vengeance",
        "count": 4,
        "confidence": 0.8,
        "sample": "name = \"Vengeance (Leveling)\",",
        "retail": true
      }
    ],
    "Balance": [
      {
        "name": "Balance",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Balance (Leveling)\",",
        "retail": true
      }
    ],
    "Feral": [
      {
        "name": "Feral",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Feral (Leveling)\",",
        "retail": true
      }
    ],
    "Guardian": [
      {
        "name": "Guardian",
        "count": 11,
        "confidence": 1.0,
        "sample": "name = \"Guardian (Leveling)\",",
        "retail": true
      }
    ],
    "Restoration": [
      {
        "name": "Restoration",
        "count": 6,
        "confidence": 1.0,
        "sample": "name = \"Restoration (Leveling)\",",
        "retail": true
      }
    ],
    "Devastation": [
      {
        "name": "Devastation",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Devastation (Leveling)\",",
        "retail": true
      }
    ],
    "Preservation": [
      {
        "name": "Preservation",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Preservation (Leveling)\",",
        "retail": true
      }
    ],
    "Augmentation": [
      {
        "name": "Augmentation",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Augmentation (Leveling)\",",
        "retail": true
      }
    ],
    "Mastery": [
      {
        "name": "Mastery",
        "count": 45,
        "confidence": 1.0,
        "sample": "name = \"Beast Mastery (Leveling)\",",
        "retail": true
      }
    ],
    "Marksmanship": [
      {
        "name": "Marksmanship",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Marksmanship (Leveling)\",",
        "retail": true
      }
    ],
    "Survival": [
      {
        "name": "Survival",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Survival (Leveling)\",",
        "retail": true
      }
    ],
    "Arcane": [
      {
        "name": "Arcane",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Arcane (Leveling)\",",
        "retail": true
      }
    ],
    "Fire": [
      {
        "name": "Fire",
        "count": 143,
        "confidence": 1.0,
        "sample": "name = \"Fire (Leveling)\",",
        "retail": true
      }
    ],
    "Brewmaster": [
      {
        "name": "Brewmaster",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Brewmaster (Leveling)\",",
        "retail": true
      }
    ],
    "Mistweaver": [
      {
        "name": "Mistweaver",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Mistweaver (Leveling)\",",
        "retail": true
      }
    ],
    "Windwalker": [
      {
        "name": "Windwalker",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Windwalker (Leveling)\",",
        "retail": true
      }
    ],
    "Holy": [
      {
        "name": "Holy",
        "count": 6,
        "confidence": 1.0,
        "sample": "name = \"Holy (Leveling)\",",
        "retail": true
      }
    ],
    "Protection": [
      {
        "name": "Protection",
        "count": 6,
        "confidence": 1.0,
        "sample": "name = \"Protection (Leveling)\",",
        "retail": true
      }
    ],
    "Retribution": [
      {
        "name": "Retribution",
        "count": 5,
        "confidence": 1.0,
        "sample": "name = \"Retribution (Leveling)\",",
        "retail": true
      }
    ],
    "Discipline": [
      {
        "name": "Discipline",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Discipline (Leveling)\",",
        "retail": true
      }
    ],
    "Shadow": [
      {
        "name": "Shadow",
        "count": 7,
        "confidence": 1.0,
        "sample": "name = \"Shadow (Leveling)\",",
        "retail": true
      }
    ],
    "Assassination": [
      {
        "name": "Assassination",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Assassination (Leveling)\",",
        "retail": true
      }
    ],
    "Outlaw": [
      {
        "name": "Outlaw",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Outlaw (Leveling)\",",
        "retail": true
      }
    ],
    "Subtlety": [
      {
        "name": "Subtlety",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Subtlety (Leveling)\",",
        "retail": true
      }
    ],
    "Enhancement": [
      {
        "name": "Enhancement",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Enhancement (Leveling)\",",
        "retail": true
      }
    ],
    "Elemental": [
      {
        "name": "Elemental",
        "count": 9,
        "confidence": 1.0,
        "sample": "name = \"Elemental (Leveling)\",",
        "retail": true
      }
    ],
    "Affliction": [
      {
        "name": "Affliction",
        "count": 8,
        "confidence": 1.0,
        "sample": "name = \"Affliction (Leveling)\",",
        "retail": true
      }
    ],
    "Demonology": [
      {
        "name": "Demonology",
        "count": 2,
        "confidence": 0.4,
        "sample": "name = \"Demonology (Leveling)\",",
        "retail": true
      }
    ],
    "Demonologist": [
      {
        "name": "Demonologist",
        "count": 1,
        "confidence": 0.2,
        "sample": "name = \"Demonologist (M+)\",",
        "retail": true
      }
    ],
    "Destruction": [
      {
        "name": "Destruction",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Destruction (Leveling)\",",
        "retail": true
      }
    ],
    "Arms": [
      {
        "name": "Arms",
        "count": 3,
        "confidence": 0.6,
        "sample": "name = \"Arms (Leveling)\",",
        "retail": true
      }
    ],
    "Fury": [
      {
        "name": "Fury",
        "count": 12,
        "confidence": 1.0,
        "sample": "name = \"Fury (Leveling)\",",
        "retail": true
      }
    ],
    "Niffelem": [
      {
        "name": "Niffelem",
        "count": 11,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\Wrath of the Lich King Dailies\\\\The Storm Peaks\\\\Dun Niffelem (The Sons of Hodir) Pre-quest and Dailies\"] = {",
        "retail": true
      }
    ],
    "Jungle": [
      {
        "name": "Jungle",
        "count": 130,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\Warlords of Draenor Dailies\\\\Tanaan Jungle (100)\\\\Hand of the Prophet Dailies\"] = {",
        "retail": true
      }
    ],
    "Dragonflight": [
      {
        "name": "Dragonflight",
        "count": 663,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\Dragonflight (10-70)\\\\A Cataloger's Paradise\"] = {",
        "retail": true
      }
    ],
    "Quests": [
      {
        "name": "Quests",
        "count": 60,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\Dragonflight (10-70)\\\\Maruuk Centaur\\\\Aylaag Outpost Daily Quests (Eaglewatch Outpost)\"] = {",
        "retail": true
      }
    ],
    "Camp": [
      {
        "name": "Camp",
        "count": 16,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\Dragonflight (10-70)\\\\Suffusion Camp (Ohn'ahran Plains)\"] = {",
        "retail": true
      }
    ],
    "Within": [
      {
        "name": "Within",
        "count": 631,
        "confidence": 1.0,
        "sample": "[\"DAILIES\\\\The War Within (70-80)\\\\Awakening the Machine/Snuffling Weeklies\"] = {",
        "retail": true
      }
    ],
    "Summit": [
      {
        "name": "Summit",
        "count": 103,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Outland Raids\\\\Hyjal Summit (Battle for Mount Hyjal)\"] = {",
        "retail": true
      }
    ],
    "Chromie": [
      {
        "name": "Chromie",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Legion Scenarios\\\\The Deaths of Chromie (Stratholme Intro)\"] = {",
        "retail": true
      }
    ],
    "Storm": [
      {
        "name": "Storm",
        "count": 27,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\A Brewing Storm (10-70)\"] = {",
        "retail": true
      }
    ],
    "Patience": [
      {
        "name": "Patience",
        "count": 7,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\A Little Patience (20-70)\"] = {",
        "retail": true
      }
    ],
    "Annihilation": [
      {
        "name": "Annihilation",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Arena of Annihilation (25-70)\"] = {",
        "retail": true
      }
    ],
    "Festival": [
      {
        "name": "Festival",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Brewmoon Festival (25-70)\"] = {",
        "retail": true
      }
    ],
    "Ingoo": [
      {
        "name": "Ingoo",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"DUNGEONS\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Unga Ingoo (20-70)\"] = {",
        "retail": true
      }
    ],
    "Ascension": [
      {
        "name": "Ascension",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"EVENTS\\\\Battle for Azeroth\\\\Tyrande's Ascension (Darkshore Warfront Unlock)\"] = {",
        "retail": true
      }
    ],
    "Dreamsurge": [
      {
        "name": "Dreamsurge",
        "count": 32,
        "confidence": 1.0,
        "sample": "[\"EVENTS\\\\Dragonflight (10-70)\\\\Emerald Dreamsurge (Ohn'ahran Plains)\"] = {",
        "retail": true
      }
    ],
    "Beans": [
      {
        "name": "Beans",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"GOLD\\\\Farming\\\\Cocoa Beans (Alliance)\"] = {",
        "retail": true
      }
    ],
    "Drustvar": [
      {
        "name": "Drustvar",
        "count": 45,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Kul Tiras\\\\Drustvar (10-70)\"] = {",
        "retail": true
      }
    ],
    "Loremaster": [
      {
        "name": "Loremaster",
        "count": 27,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Kul Tiras\\\\Drustvar Loremaster (Story Quest Only)\"] = {",
        "retail": true
      }
    ],
    "Valley": [
      {
        "name": "Valley",
        "count": 266,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Kul Tiras\\\\Stormsong Valley (10-70)\"] = {",
        "retail": true
      }
    ],
    "Sound": [
      {
        "name": "Sound",
        "count": 64,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Kul Tiras\\\\Tiragarde Sound (10-70)\"] = {",
        "retail": true
      }
    ],
    "Crash": [
      {
        "name": "Crash",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Grimwatt's Crash (Nazmir)\"] = {",
        "retail": true
      }
    ],
    "Ledge": [
      {
        "name": "Ledge",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Mistvine Ledge (Zuldazar)\"] = {",
        "retail": true
      }
    ],
    "Overlook": [
      {
        "name": "Overlook",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Mugamba Overlook (Zuldazar)\"] = {",
        "retail": true
      }
    ],
    "Grotto": [
      {
        "name": "Grotto",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Veiled Grotto (Zuldazar)\"] = {",
        "retail": true
      }
    ],
    "Hollow": [
      {
        "name": "Hollow",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Verdant Hollow (Zuldazar)\"] = {",
        "retail": true
      }
    ],
    "Nest": [
      {
        "name": "Nest",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Vulture's Nest (Vol'dun)\"] = {",
        "retail": true
      }
    ],
    "Reach": [
      {
        "name": "Reach",
        "count": 28,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Starter Guides\\\\Exile's Reach (1-10)\"] = {",
        "retail": true
      }
    ],
    "Deepholm": [
      {
        "name": "Deepholm",
        "count": 42,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Cataclysm (10-70)\\\\Deepholm (30-70)\"] = {",
        "retail": true
      }
    ],
    "Hyjal": [
      {
        "name": "Hyjal",
        "count": 68,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Cataclysm (10-70)\\\\Mount Hyjal (30-70)\"] = {",
        "retail": true
      }
    ],
    "Highlands": [
      {
        "name": "Highlands",
        "count": 210,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Cataclysm (10-70)\\\\Twilight Highlands (30-70)\"] = {",
        "retail": true
      }
    ],
    "Uldum": [
      {
        "name": "Uldum",
        "count": 73,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Cataclysm (10-70)\\\\Uldum (30-70)\"] = {",
        "retail": true
      }
    ],
    "Badlands": [
      {
        "name": "Badlands",
        "count": 52,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Badlands (15-70)\"] = {",
        "retail": true
      }
    ],
    "Lands": [
      {
        "name": "Lands",
        "count": 58,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Blasted Lands (15-70)\"] = {",
        "retail": true
      }
    ],
    "Steppes": [
      {
        "name": "Steppes",
        "count": 70,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Burning Steppes (15-70)\"] = {",
        "retail": true
      }
    ],
    "Morogh": [
      {
        "name": "Morogh",
        "count": 117,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Dun Morogh (1-70)\"] = {",
        "retail": true
      }
    ],
    "Duskwood": [
      {
        "name": "Duskwood",
        "count": 37,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Duskwood (10-70)\"] = {",
        "retail": true
      }
    ],
    "Plaguelands": [
      {
        "name": "Plaguelands",
        "count": 108,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Eastern Plaguelands (15-70)\"] = {",
        "retail": true
      }
    ],
    "Modan": [
      {
        "name": "Modan",
        "count": 47,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Loch Modan (5-70)\"] = {",
        "retail": true
      }
    ],
    "Stranglethorn": [
      {
        "name": "Stranglethorn",
        "count": 129,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Northern Stranglethorn (10-70)\"] = {",
        "retail": true
      }
    ],
    "Mountains": [
      {
        "name": "Mountains",
        "count": 168,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Redridge Mountains (7-70)\"] = {",
        "retail": true
      }
    ],
    "Gorge": [
      {
        "name": "Gorge",
        "count": 29,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Searing Gorge (15-70)\"] = {",
        "retail": true
      }
    ],
    "Sorrows": [
      {
        "name": "Sorrows",
        "count": 61,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Swamp of Sorrows (15-70)\"] = {",
        "retail": true
      }
    ],
    "Hinterlands": [
      {
        "name": "Hinterlands",
        "count": 49,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\The Hinterlands (10-70)\"] = {",
        "retail": true
      }
    ],
    "Westfall": [
      {
        "name": "Westfall",
        "count": 27,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Westfall (5-70)\"] = {",
        "retail": true
      }
    ],
    "Wetlands": [
      {
        "name": "Wetlands",
        "count": 59,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Wetlands (10-70)\"] = {",
        "retail": true
      }
    ],
    "Ashenvale": [
      {
        "name": "Ashenvale",
        "count": 80,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Ashenvale (7-70)\"] = {",
        "retail": true
      }
    ],
    "Isle": [
      {
        "name": "Isle",
        "count": 136,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Azuremyst Isle (1-70)\"] = {",
        "retail": true
      }
    ],
    "Darkshore": [
      {
        "name": "Darkshore",
        "count": 55,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Darkshore (5-70)\"] = {",
        "retail": true
      }
    ],
    "Desolace": [
      {
        "name": "Desolace",
        "count": 51,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Desolace (10-70)\"] = {",
        "retail": true
      }
    ],
    "Marsh": [
      {
        "name": "Marsh",
        "count": 79,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Dustwallow Marsh (15-70)\"] = {",
        "retail": true
      }
    ],
    "Felwood": [
      {
        "name": "Felwood",
        "count": 51,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Felwood (15-70)\"] = {",
        "retail": true
      }
    ],
    "Feralas": [
      {
        "name": "Feralas",
        "count": 76,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Feralas (15-70)\"] = {",
        "retail": true
      }
    ],
    "Silithus": [
      {
        "name": "Silithus",
        "count": 37,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Silithus (15-70)\"] = {",
        "retail": true
      }
    ],
    "Barrens": [
      {
        "name": "Barrens",
        "count": 160,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Southern Barrens (10-70)\"] = {",
        "retail": true
      }
    ],
    "Tanaris": [
      {
        "name": "Tanaris",
        "count": 69,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Tanaris (15-70)\"] = {",
        "retail": true
      }
    ],
    "Needles": [
      {
        "name": "Needles",
        "count": 27,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Thousand Needles (15-70)\"] = {",
        "retail": true
      }
    ],
    "Crater": [
      {
        "name": "Crater",
        "count": 27,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Un'Goro Crater (15-70)\"] = {",
        "retail": true
      }
    ],
    "Winterspring": [
      {
        "name": "Winterspring",
        "count": 50,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Winterspring (15-70)\"] = {",
        "retail": true
      }
    ],
    "Peninsula": [
      {
        "name": "Peninsula",
        "count": 123,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The Burning Crusade (10-70)\\\\Hellfire Peninsula (10-70)\"] = {",
        "retail": true
      }
    ],
    "Nagrand": [
      {
        "name": "Nagrand",
        "count": 122,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The Burning Crusade (10-70)\\\\Nagrand (15-70)\"] = {",
        "retail": true
      }
    ],
    "Netherstorm": [
      {
        "name": "Netherstorm",
        "count": 69,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The Burning Crusade (10-70)\\\\Netherstorm (25-70)\"] = {",
        "retail": true
      }
    ],
    "Zangarmarsh": [
      {
        "name": "Zangarmarsh",
        "count": 60,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The Burning Crusade (10-70)\\\\Zangarmarsh (10-70)\"] = {",
        "retail": true
      }
    ],
    "Tundra": [
      {
        "name": "Tundra",
        "count": 127,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Borean Tundra (10-70)\"] = {",
        "retail": true
      }
    ],
    "Dragonblight": [
      {
        "name": "Dragonblight",
        "count": 97,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Dragonblight (15-70)\"] = {",
        "retail": true
      }
    ],
    "Hills": [
      {
        "name": "Hills",
        "count": 67,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Grizzly Hills (15-70)\"] = {",
        "retail": true
      }
    ],
    "Fjord": [
      {
        "name": "Fjord",
        "count": 122,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Howling Fjord (10-70)\"] = {",
        "retail": true
      }
    ],
    "Icecrown": [
      {
        "name": "Icecrown",
        "count": 123,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Icecrown (25-70)\"] = {",
        "retail": true
      }
    ],
    "Basin": [
      {
        "name": "Basin",
        "count": 36,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Sholazar Basin (20-70)\"] = {",
        "retail": true
      }
    ],
    "Peaks": [
      {
        "name": "Peaks",
        "count": 71,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\The Storm Peaks (25-70)\"] = {",
        "retail": true
      }
    ],
    "Drak": [
      {
        "name": "Drak",
        "count": 58,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Wrath of the Lich King (10-70)\\\\Zul'Drak (20-70)\"] = {",
        "retail": true
      }
    ],
    "Suramar": [
      {
        "name": "Suramar",
        "count": 182,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Legion (10-70)\\\\Suramar (45-70)\"] = {",
        "retail": true
      }
    ],
    "Wastes": [
      {
        "name": "Wastes",
        "count": 51,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Pandaria (10-70)\\\\Dread Wastes (30-70)\"] = {",
        "retail": true
      }
    ],
    "Thunder": [
      {
        "name": "Thunder",
        "count": 44,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Pandaria (10-70)\\\\Isle of Thunder (50-70)\"] = {",
        "retail": true
      }
    ],
    "Wilds": [
      {
        "name": "Wilds",
        "count": 65,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Pandaria (10-70)\\\\Krasarang Wilds (15-70)\"] = {",
        "retail": true
      }
    ],
    "Winds": [
      {
        "name": "Winds",
        "count": 73,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Pandaria (10-70)\\\\Valley of the Four Winds (15-70)\"] = {",
        "retail": true
      }
    ],
    "Gorgrond": [
      {
        "name": "Gorgrond",
        "count": 35,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Draenor (10-70)\\\\Gorgrond (15-70)\"] = {",
        "retail": true
      }
    ],
    "Arak": [
      {
        "name": "Arak",
        "count": 47,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Draenor (10-70)\\\\Spires of Arak (30-70)\"] = {",
        "retail": true
      }
    ],
    "Talador": [
      {
        "name": "Talador",
        "count": 72,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Draenor (10-70)\\\\Talador (20-70)\"] = {",
        "retail": true
      }
    ],
    "Questline": [
      {
        "name": "Questline",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Augmentation Questline (Evoker)\"] = {",
        "retail": true
      }
    ],
    "Zones": [
      {
        "name": "Zones",
        "count": 288,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\Intro & The Waking Shores (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Shores": [
      {
        "name": "Shores",
        "count": 74,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\Intro & The Waking Shores (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Plains": [
      {
        "name": "Plains",
        "count": 34,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\Ohn'ahran Plains (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Thaldraszus": [
      {
        "name": "Thaldraszus",
        "count": 37,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\Thaldraszus (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Span": [
      {
        "name": "Span",
        "count": 31,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\The Azure Span (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Things": [
      {
        "name": "Things",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Dragonflight (10-70)\\\\Some Wicked Things (Warlock)\"] = {",
        "retail": true
      }
    ],
    "Starter": [
      {
        "name": "Starter",
        "count": 19,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Starter Guides\\\\Dracthyr Starter (10-15)\"] = {",
        "retail": true
      }
    ],
    "Ardenweald": [
      {
        "name": "Ardenweald",
        "count": 99,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Ardenweald (Story Only)\"] = {",
        "retail": true
      }
    ],
    "Bastion": [
      {
        "name": "Bastion",
        "count": 60,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Bastion (Story Only)\"] = {",
        "retail": true
      }
    ],
    "Maldraxxus": [
      {
        "name": "Maldraxxus",
        "count": 62,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Maldraxxus (Story Only)\"] = {",
        "retail": true
      }
    ],
    "Chordy": [
      {
        "name": "Chordy",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Chordy (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Bag": [
      {
        "name": "Bag",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Gas Bag (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Guillotine": [
      {
        "name": "Guillotine",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Guillotine (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Phillip": [
      {
        "name": "Phillip",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Iron Phillip (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Tomalin": [
      {
        "name": "Tomalin",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Mama Tomalin (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Naxx": [
      {
        "name": "Naxx",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Naxx (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Professor": [
      {
        "name": "Professor",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Professor (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Sabrina": [
      {
        "name": "Sabrina",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Sabrina (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Toothpick": [
      {
        "name": "Toothpick",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Toothpick (Abomination)\"] = {",
        "retail": true
      }
    ],
    "Revendreth": [
      {
        "name": "Revendreth",
        "count": 67,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Revendreth (Story Only)\"] = {",
        "retail": true
      }
    ],
    "Court": [
      {
        "name": "Court",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Shadowlands (50-70)\\\\Venthyr Covenant\\\\Venthyr The Ember Court (Weekly Scenario)\"] = {",
        "retail": true
      }
    ],
    "Leveling": [
      {
        "name": "Leveling",
        "count": 6,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Allied Races\\\\Earthen Exploration Leveling (10-71)\"] = {",
        "retail": true
      }
    ],
    "Kahet": [
      {
        "name": "Kahet",
        "count": 100,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\Azj-Kahet (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Hallowfall": [
      {
        "name": "Hallowfall",
        "count": 81,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\Hallowfall (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Dorn": [
      {
        "name": "Dorn",
        "count": 156,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\Intro & Isle of Dorn (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Deeps": [
      {
        "name": "Deeps",
        "count": 57,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\The Ringing Deeps (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Undermine": [
      {
        "name": "Undermine",
        "count": 149,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\Undermine (Full Zone)\"] = {",
        "retail": true
      }
    ],
    "Spider": [
      {
        "name": "Spider",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"PETSMOUNTS\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Shale Spiders\\\\Green Shale Spider (Rare Spawn)\"] = {",
        "retail": true
      }
    ],
    "Drone": [
      {
        "name": "Drone",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"PETSMOUNTS\\\\Mounts\\\\Flying Mounts\\\\Quest Mounts\\\\Shadowbarb Drone (Beta)\"] = {",
        "retail": true
      }
    ],
    "Angler": [
      {
        "name": "Angler",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"PROFESSIONS\\\\Fishing\\\\Quest Guides\\\\Underlight Angler (Legion Fishing Artifact)\"] = {",
        "retail": true
      }
    ],
    "Leaper": [
      {
        "name": "Leaper",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"GOLD\\\\Gathering\\\\Prismatic Leaper (Ohn'ahran Plains)\"] = {",
        "retail": true
      }
    ],
    "Pterrordax": [
      {
        "name": "Pterrordax",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"ACHIEVEMENTS\\\\Quests\\\\Battle for Azeroth\\\\How to Ptrain Your Pterrordax (Part Two)\"] = {",
        "retail": true
      }
    ],
    "Path": [
      {
        "name": "Path",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"DAILIES\\\\Wrath of the Lich King Dailies\\\\The Storm Peaks\\\\The Storm Peaks Full Zone Quest Path (Includes Pre-Quests)\"] = {",
        "retail": true
      }
    ],
    "Dailies": [
      {
        "name": "Dailies",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"DAILIES\\\\Mists of Pandaria Dailies\\\\Beast Master Dailies (Dominance Offensive)\"] = {",
        "retail": true
      }
    ],
    "Pasture": [
      {
        "name": "Pasture",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Hillcrest Pasture (Stormsong Valley)\"] = {",
        "retail": true
      }
    ],
    "Cove": [
      {
        "name": "Cove",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Mudfisher Cove (Drustvar)\"] = {",
        "retail": true
      }
    ],
    "Watch": [
      {
        "name": "Watch",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Stonefist Watch (Tiragarde Sound)\"] = {",
        "retail": true
      }
    ],
    "Post": [
      {
        "name": "Post",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Swiftwind Post (Drustvar)\"] = {",
        "retail": true
      }
    ],
    "Cavern": [
      {
        "name": "Cavern",
        "count": 8,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Scouting Reports\\\\Windfall Cavern (Stormsong Valley)\"] = {",
        "retail": true
      }
    ],
    "Nazmir": [
      {
        "name": "Nazmir",
        "count": 44,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Zandalar\\\\Nazmir (10-70)\"] = {",
        "retail": true
      }
    ],
    "Zuldazar": [
      {
        "name": "Zuldazar",
        "count": 117,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Battle for Azeroth (10-70)\\\\Zandalar\\\\Zuldazar (10-70)\"] = {",
        "retail": true
      }
    ],
    "Woods": [
      {
        "name": "Woods",
        "count": 69,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Eversong Woods (1-70)\"] = {",
        "retail": true
      }
    ],
    "Ghostlands": [
      {
        "name": "Ghostlands",
        "count": 25,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Ghostlands (1-70)\"] = {",
        "retail": true
      }
    ],
    "Foothills": [
      {
        "name": "Foothills",
        "count": 85,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Hillsbrad Foothills (7-70)\"] = {",
        "retail": true
      }
    ],
    "Azshara": [
      {
        "name": "Azshara",
        "count": 47,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Azshara (5-70)\"] = {",
        "retail": true
      }
    ],
    "Durotar": [
      {
        "name": "Durotar",
        "count": 122,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Durotar (1-70)\"] = {",
        "retail": true
      }
    ],
    "Mulgore": [
      {
        "name": "Mulgore",
        "count": 64,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Classic (1-70)\\\\Kalimdor\\\\Mulgore (1-70)\"] = {",
        "retail": true
      }
    ],
    "Ridge": [
      {
        "name": "Ridge",
        "count": 53,
        "confidence": 1.0,
        "sample": "[\"LEVELING\\\\Draenor (10-70)\\\\Frostfire Ridge (10-70)\"] = {",
        "retail": true
      }
    ],
    "TestFindNearest": [
      {
        "name": "ZGV.Testing.TestFindNearest",
        "count": 1,
        "confidence": 0.2,
        "sample": "--/run ZGV.Testing.TestFindNearest(\"TrainerInscription\")",
        "retail": true
      }
    ],
    "City": [
      {
        "name": "City",
        "count": 417,
        "confidence": 1.0,
        "sample": "69334=sA|m84|x68.00|y17.00--, Stormwind City (Adherent Hanjun)",
        "retail": true
      }
    ],
    "Ironforge": [
      {
        "name": "Ironforge",
        "count": 98,
        "confidence": 1.0,
        "sample": "27819=sA|m87|x19.00|y51.80--, Ironforge (Brew Vendor)",
        "retail": true
      }
    ],
    "Northshire": [
      {
        "name": "Northshire",
        "count": 8,
        "confidence": 1.0,
        "sample": "91405=sA|m425|x75.30|y10.80--, Northshire (Jeremiah Seely)",
        "retail": true
      }
    ],
    "Gilneas": [
      {
        "name": "Gilneas",
        "count": 61,
        "confidence": 1.0,
        "sample": "42953=sA|m179|x68.00|y74.50--, Gilneas (Benjamin Sykes)",
        "retail": true
      }
    ],
    "Tinkertown": [
      {
        "name": "Tinkertown",
        "count": 11,
        "confidence": 1.0,
        "sample": "3162=sA|m469|x49.50|y51.90--, New Tinkertown (Burdrak Harglhelm)",
        "retail": true
      }
    ],
    "Depths": [
      {
        "name": "Depths",
        "count": 43,
        "confidence": 1.0,
        "sample": "42966=sA|m204|x56.00|y73.00--, Abyssal Depths (Chase Whithers)",
        "retail": true
      }
    ],
    "Expanse": [
      {
        "name": "Expanse",
        "count": 26,
        "confidence": 1.0,
        "sample": "42488=sA|m205|x57.00|y76.20--, Shimmering Expanse (Chief Engineer Yoon)",
        "retail": true
      }
    ],
    "Shadowglen": [
      {
        "name": "Shadowglen",
        "count": 10,
        "confidence": 1.0,
        "sample": "3592=sA|m460|x49.50|y65.69--, Shadowglen (Andiss)",
        "retail": true
      }
    ],
    "Sea": [
      {
        "name": "Sea",
        "count": 5,
        "confidence": 1.0,
        "sample": "156800=sA|m1409|x52.23|y55.32--Exile's Reach, North Sea (Quartermaster Richter)",
        "retail": true
      }
    ],
    "Glades": [
      {
        "name": "Glades",
        "count": 102,
        "confidence": 1.0,
        "sample": "63073=sH|m18|x60.80|y54.20--, Tirisfal Glades (Ansel Fincap)",
        "retail": true
      }
    ],
    "Deathknell": [
      {
        "name": "Deathknell",
        "count": 4,
        "confidence": 0.8,
        "sample": "2116=sH|m465|x52.50|y59.10--, Deathknell (Blacksmith Rand)",
        "retail": true
      }
    ],
    "Undercity": [
      {
        "name": "Undercity",
        "count": 92,
        "confidence": 1.0,
        "sample": "4604=sH|m90|x54.90|y37.70|cZGV.InPhase(\"Old Undercity\")--, Undercity (Abigail Sawyer)",
        "retail": true
      }
    ],
    "Pass": [
      {
        "name": "Pass",
        "count": 1,
        "confidence": 0.2,
        "sample": "18255=sB|m42|x47.10|y75.30--, Deadwind Pass (Mage Darius)",
        "retail": true
      }
    ],
    "Enclave": [
      {
        "name": "Enclave",
        "count": 12,
        "confidence": 1.0,
        "sample": "29203=sB|m124|x48.60|y32.60--, Plaguelands: The Scarlet Enclave (Alchemist Karloff)",
        "retail": true
      }
    ],
    "Danas": [
      {
        "name": "Danas",
        "count": 17,
        "confidence": 1.0,
        "sample": "25036=sB|m122|x51.10|y33.59--, Isle of Quel'Danas (Caregiver Inaara)",
        "retail": true
      }
    ],
    "Teldrassil": [
      {
        "name": "Teldrassil",
        "count": 72,
        "confidence": 1.0,
        "sample": "3608=sA|m57|x55.20|y50.00--, Teldrassil (Aldia)",
        "retail": true
      }
    ],
    "Darnassus": [
      {
        "name": "Darnassus",
        "count": 69,
        "confidence": 1.0,
        "sample": "3562=sA|m89|x42.60|y52.80--, Darnassus (Alaindia)",
        "retail": true
      }
    ],
    "Exodar": [
      {
        "name": "Exodar",
        "count": 48,
        "confidence": 1.0,
        "sample": "16705=sA|m103|x27.60|y63.00--, The Exodar (Altaa)",
        "retail": true
      }
    ],
    "Vale": [
      {
        "name": "Vale",
        "count": 6,
        "confidence": 1.0,
        "sample": "16917=sA|m468|x51.80|y38.50--, Ammen Vale (Aurok)",
        "retail": true
      }
    ],
    "Orgrimmar": [
      {
        "name": "Orgrimmar",
        "count": 203,
        "confidence": 1.0,
        "sample": "114104=sH|m85|x52.40|y56.00--, Orgrimmar (Adept Yad M'Sivart)",
        "retail": true
      }
    ],
    "Bluff": [
      {
        "name": "Bluff",
        "count": 65,
        "confidence": 1.0,
        "sample": "35343=sH|m88|x30.60|y63.30--, Thunder Bluff (Bountiful Barrel)",
        "retail": true
      }
    ],
    "Isles": [
      {
        "name": "Isles",
        "count": 122,
        "confidence": 1.0,
        "sample": "39032=sH|m463|x57.20|y62.80--, Echo Isles (Gora'tin)",
        "retail": true
      }
    ],
    "Narache": [
      {
        "name": "Narache",
        "count": 8,
        "confidence": 1.0,
        "sample": "3075=sH|m462|x25.80|y29.50--, Camp Narache (Bronk Steelrage)",
        "retail": true
      }
    ],
    "Trials": [
      {
        "name": "Trials",
        "count": 10,
        "confidence": 1.0,
        "sample": "3158=sH|m461|x42.65|y62.65--, Valley of Trials (Duokna)",
        "retail": true
      }
    ],
    "Moonglade": [
      {
        "name": "Moonglade",
        "count": 19,
        "confidence": 1.0,
        "sample": "7940=sB|m80|x51.50|y33.20--, Moonglade (Darnall)",
        "retail": true
      }
    ],
    "Front": [
      {
        "name": "Front",
        "count": 6,
        "confidence": 1.0,
        "sample": "53881=sB|m338|x44.50|y85.40--, Molten Front (Ayla Shadowstorm)",
        "retail": true
      }
    ],
    "Wintergrasp": [
      {
        "name": "Wintergrasp",
        "count": 7,
        "confidence": 1.0,
        "sample": "32294=sA|m123|x51.60|y17.50--, Wintergrasp (Knight Dameron)",
        "retail": true
      }
    ],
    "Citadel": [
      {
        "name": "Citadel",
        "count": 44,
        "confidence": 1.0,
        "sample": "38841=sH|m186|x34.80|y22.80--, Icecrown Citadel (Vol'guk)",
        "retail": true
      }
    ],
    "Blossoms": [
      {
        "name": "Blossoms",
        "count": 105,
        "confidence": 1.0,
        "sample": "64557=sA|m390|x85.60|y62.20--, Vale of Eternal Blossoms (Aster)",
        "retail": true
      }
    ],
    "Giants": [
      {
        "name": "Giants",
        "count": 6,
        "confidence": 1.0,
        "sample": "70030=sA|m507|x35.65|y53.50--, Isle of Giants (Agrant Sharpshot)",
        "retail": true
      }
    ],
    "Stars": [
      {
        "name": "Stars",
        "count": 10,
        "confidence": 1.0,
        "sample": "64094=sA|m393|x75.00|y47.80--, Shrine of Seven Stars (Tanner Pang)",
        "retail": true
      }
    ],
    "Ashran": [
      {
        "name": "Ashran",
        "count": 159,
        "confidence": 1.0,
        "sample": "86007=sH|m624|x62.25|y22.40--Warspear, Ashran (Aldrich Rolan)",
        "retail": true
      }
    ],
    "Moons": [
      {
        "name": "Moons",
        "count": 2,
        "confidence": 0.4,
        "sample": "64038=sH|m392|x71.52|y62.83--, Shrine of Two Moons (Marli Two-Toes)",
        "retail": true
      }
    ],
    "Tournament": [
      {
        "name": "Tournament",
        "count": 3,
        "confidence": 0.6,
        "sample": "--73815=sB|m571|x37.80|y53.60--, Celestial Tournament (Hearthminder Digao)",
        "retail": true
      }
    ],
    "Stair": [
      {
        "name": "Stair",
        "count": 4,
        "confidence": 0.8,
        "sample": "70436=sB|m433|x54.40|y72.80--, The Veiled Stair (Blacktalon Quartermaster)",
        "retail": true
      }
    ],
    "Shore": [
      {
        "name": "Shore",
        "count": 171,
        "confidence": 1.0,
        "sample": "119484=sA|m627|x29.50|y74.90--Dalaran, Broken Shore (Captain Roberts)",
        "retail": true
      }
    ],
    "Stormheim": [
      {
        "name": "Stormheim",
        "count": 22,
        "confidence": 1.0,
        "sample": "110521=sA|m634|x33.50|y50.80--, Stormheim (Supplier Barleyfoot)",
        "retail": true
      }
    ],
    "Helheim": [
      {
        "name": "Helheim",
        "count": 1,
        "confidence": 0.2,
        "sample": "93225=sB|m649|x65.20|y43.50--, Helheim (Ku'ku)",
        "retail": true
      }
    ],
    "Lodge": [
      {
        "name": "Lodge",
        "count": 11,
        "confidence": 1.0,
        "sample": "98737=sB|m739|x52.69|y54.79|cHunter--, Trueshot Lodge (Holt Thunderhorn)",
        "retail": true
      }
    ],
    "Totem": [
      {
        "name": "Totem",
        "count": 32,
        "confidence": 1.0,
        "sample": "120457=sB|m750|x32.50|y41.30--, Thunder Totem (Akule Riverhorn)",
        "retail": true
      }
    ],
    "Highmountain": [
      {
        "name": "Highmountain",
        "count": 53,
        "confidence": 1.0,
        "sample": "108534=sB|m650|x41.70|y10.50--, Highmountain (Adaleigh Mae Nelson)",
        "retail": true
      }
    ],
    "Azsuna": [
      {
        "name": "Azsuna",
        "count": 30,
        "confidence": 1.0,
        "sample": "89939=sB|m630|x47.80|y23.20--, Azsuna (Berazus)",
        "retail": true
      }
    ],
    "Krokuun": [
      {
        "name": "Krokuun",
        "count": 15,
        "confidence": 1.0,
        "sample": "125346=sB|m830|x56.20|y66.80--, Krokuun (Alchemist Funen)",
        "retail": true
      }
    ],
    "Boralus": [
      {
        "name": "Boralus",
        "count": 94,
        "confidence": 1.0,
        "sample": "132228=sA|m1161|x74.09|y6.50--, Boralus (Elric Whalgrene)",
        "retail": true
      }
    ],
    "Nazjatar": [
      {
        "name": "Nazjatar",
        "count": 62,
        "confidence": 1.0,
        "sample": "153510=sA|m1355|x37.80|y55.60--, Nazjatar (Artisan Itanu)",
        "retail": true
      }
    ],
    "Mechagon": [
      {
        "name": "Mechagon",
        "count": 14,
        "confidence": 1.0,
        "sample": "155209=sB|m1497|x70.30|y30.50--, Mechagon (Alan Greasehops)",
        "retail": true
      }
    ],
    "Cay": [
      {
        "name": "Cay",
        "count": 8,
        "confidence": 1.0,
        "sample": "143755=sA|m1035|x31.50|y61.40--, Molten Cay (Fitzi Gearwobble)",
        "retail": true
      }
    ],
    "Chain": [
      {
        "name": "Chain",
        "count": 12,
        "confidence": 1.0,
        "sample": "143758=sA|m1036|x27.10|y61.20--, The Dread Chain (Brewer Ahna)",
        "retail": true
      }
    ],
    "Nashal": [
      {
        "name": "Nashal",
        "count": 2,
        "confidence": 0.4,
        "sample": "92932=sA|m671|x26.90|y5.50--, The Cove of Nashal (Tinkmaster Overspark)",
        "retail": true
      }
    ],
    "Valor": [
      {
        "name": "Valor",
        "count": 26,
        "confidence": 1.0,
        "sample": "118882=sH|m829|x49.40|y90.95--, Halls of Valor (Eitrigg)",
        "retail": true
      }
    ],
    "Abyss": [
      {
        "name": "Abyss",
        "count": 9,
        "confidence": 1.0,
        "sample": "95242=sH|m719|x58.20|y62.40--, Mardum, the Shattered Abyss (Falara Nightsong)",
        "retail": true
      }
    ],
    "Kezan": [
      {
        "name": "Kezan",
        "count": 4,
        "confidence": 0.8,
        "sample": "37762=sH|m194|x59.67|y72.57--, Kezan (Brett \"Coins\" McQuid)",
        "retail": true
      }
    ],
    "Temple": [
      {
        "name": "Temple",
        "count": 18,
        "confidence": 1.0,
        "sample": "111738=sB|m702|x58.20|y28.20|cPriest--, Netherlight Temple (Juvess the Duskwhisperer)",
        "retail": true
      }
    ],
    "Skyhold": [
      {
        "name": "Skyhold",
        "count": 3,
        "confidence": 0.6,
        "sample": "111741=sB|m695|x44.80|y29.70|cWarrior--, Skyhold (Fjornson Stonecarver)",
        "retail": true
      }
    ],
    "Dreamgrove": [
      {
        "name": "Dreamgrove",
        "count": 2,
        "confidence": 0.4,
        "sample": "112323=sB|m747|x39.80|y25.80|cDruid--, The Dreamgrove (Amurra Thistledew)",
        "retail": true
      }
    ],
    "Maelstrom": [
      {
        "name": "Maelstrom",
        "count": 4,
        "confidence": 0.8,
        "sample": "112318=sB|m276|x30.50|y60.35|cShaman--, The Maelstrom (Flamesmith Lanying)",
        "retail": true
      }
    ],
    "Island": [
      {
        "name": "Island",
        "count": 33,
        "confidence": 1.0,
        "sample": "55072=sB|m407|x47.65|y66.44--, Darkmoon Island (Barum)",
        "retail": true
      }
    ],
    "Hostile": [
      {
        "name": "Hostile",
        "count": 3,
        "confidence": 0.6,
        "sample": "--174679=sB|m1536|x65.06|y36.26-- , Maldraxxus, (Forgehand Veris)--VERIFY! --Hostile (find condition)",
        "retail": true
      }
    ],
    "Mortis": [
      {
        "name": "Mortis",
        "count": 11,
        "confidence": 1.0,
        "sample": "180918=sB|m1970|x35.24|y65.56--Haven, Zereth Mortis (Tuul)",
        "retail": true
      }
    ],
    "Valdrakken": [
      {
        "name": "Valdrakken",
        "count": 3,
        "confidence": 0.6,
        "sample": "221421=sB|m2112|x43.55|y42.52|cZGV.DEV -- Valdrakken (Eraneth)",
        "retail": true
      }
    ],
    "Dornogal": [
      {
        "name": "Dornogal",
        "count": 83,
        "confidence": 1.0,
        "sample": "223728=sB|m2339|x39.1|y24.17|wInside the building. -- Dornogal (Auditor Balwurz)",
        "retail": true
      }
    ],
    "Stormshield": [
      {
        "name": "Stormshield",
        "count": 21,
        "confidence": 1.0,
        "sample": "93905=sA|m622|x54.50|y18.39--, Stormshield (Alixandr Fallor)",
        "retail": true
      }
    ],
    "Northrend": [
      {
        "name": "Northrend",
        "count": 5,
        "confidence": 1.0,
        "sample": "35594=sA|m125|x37.07|y54.77--Dalaran, Northrend (Brassbolt Mechawrench)",
        "retail": true
      }
    ],
    "Tiras": [
      {
        "name": "Tiras",
        "count": 17,
        "confidence": 1.0,
        "sample": "35594=sA|m1161|x77.25|y13.97|cskill(\"Engineering\") >= 1--Boralus, Kul Tiras (Brassbolt Mechawrench)",
        "retail": true
      }
    ],
    "Eredath": [
      {
        "name": "Eredath",
        "count": 1,
        "confidence": 0.2,
        "sample": "96507=sB|m883|x46.22|y69.34--The Vindicaar, Eredath (Tassia Whisperglen)",
        "retail": true
      }
    ],
    "Crafters": [
      {
        "name": "Crafters",
        "count": 11,
        "confidence": 1.0,
        "sample": "122703=sH|m1165|x42.22|y37.95--Terrace of Crafters (Dazar'alor), Zandalar (Clever Kumali)",
        "retail": true
      }
    ],
    "Zandalar": [
      {
        "name": "Zandalar",
        "count": 23,
        "confidence": 1.0,
        "sample": "122703=sH|m1165|x42.22|y37.95--Terrace of Crafters (Dazar'alor), Zandalar (Clever Kumali)",
        "retail": true
      }
    ],
    "Kings": [
      {
        "name": "Kings",
        "count": 11,
        "confidence": 1.0,
        "sample": "122701=sH|m1165|x32.01|y34.96--Vault of Kings (Dazar'alor), Zandalar (Examiner Alerinda)",
        "retail": true
      }
    ],
    "House": [
      {
        "name": "House",
        "count": 19,
        "confidence": 1.0,
        "sample": "131741=sH|m1165|x38.08|y14.15--Hot House (Dazar'alor), Zandalar (Cooka Mala)",
        "retail": true
      }
    ],
    "Sliver": [
      {
        "name": "Sliver",
        "count": 1,
        "confidence": 0.2,
        "sample": "122705=sH|m1165|x50.52|y23.37--The Sliver (Dazar'alor), Zandalar (Silent Tali)",
        "retail": true
      }
    ],
    "Dread": [
      {
        "name": "Dread",
        "count": 1,
        "confidence": 0.2,
        "sample": "132265=sH|m1165|x36.54|y17.89--Threads of Dread (Dazar'alor), Zandalar (Milliner Hakkit)",
        "retail": true
      }
    ],
    "Harbor": [
      {
        "name": "Harbor",
        "count": 3,
        "confidence": 0.6,
        "sample": "sA|m84|x37.91|y34.33|tM--Stormwind Harbor (Stairs), Stormwind City",
        "retail": true
      }
    ],
    "Lift": [
      {
        "name": "Lift",
        "count": 5,
        "confidence": 1.0,
        "sample": "sH|m85|x50.52|y64.89|tM--Orgrimmar Lift(East), Orgrimmar",
        "retail": true
      }
    ],
    "Tunnel": [
      {
        "name": "Tunnel",
        "count": 3,
        "confidence": 0.6,
        "sample": "sH|m85|x36.39|y65.10|tM--Valley of Sprits Tunnel (West), Orgrimmar",
        "retail": true
      }
    ],
    "Dalran": [
      {
        "name": "Dalran",
        "count": 13,
        "confidence": 1.0,
        "sample": "sA|m125|x37.16|y59.99|tM--The Silver Enclave, Dalran (Northrend)",
        "retail": true
      }
    ],
    "Grounds": [
      {
        "name": "Grounds",
        "count": 10,
        "confidence": 1.0,
        "sample": "sA|m118|x75.75|y19.95|tM--Argent Tournament Grounds (North), Icecrown",
        "retail": true
      }
    ],
    "Dalaran": [
      {
        "name": "Dalaran",
        "count": 51,
        "confidence": 1.0,
        "sample": "sB|m125|x49.12|y25.10|tM--The Bank of Dalaran (Left), Dalran (Northrend)",
        "retail": true
      }
    ],
    "Lounge": [
      {
        "name": "Lounge",
        "count": 2,
        "confidence": 0.4,
        "sample": "sB|m125|x49.88|y36.87|tM--The Ledgermain Lounge (North), Dalran (Northrend)",
        "retail": true
      }
    ],
    "Underbelly": [
      {
        "name": "Underbelly",
        "count": 1,
        "confidence": 0.2,
        "sample": "sB|m126|x33.55|y56.28|tM--Cantrips & Crows, The Underbelly (Dalaran, Northrend)",
        "retail": true
      }
    ],
    "Stand": [
      {
        "name": "Stand",
        "count": 3,
        "confidence": 0.6,
        "sample": "sB|m121|x40.46|y67.63|tM--The Argent Stand (South), Zul'drak",
        "retail": true
      }
    ],
    "Terrace": [
      {
        "name": "Terrace",
        "count": 11,
        "confidence": 1.0,
        "sample": "sA|m1530|x85.11|y58.54|tM--The Summer Terrace (Lower Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Lantern": [
      {
        "name": "Lantern",
        "count": 2,
        "confidence": 0.4,
        "sample": "sA|m1530|x86.77|y66.58|tM--The Golden Lantern (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Vault": [
      {
        "name": "Vault",
        "count": 9,
        "confidence": 1.0,
        "sample": "sA|m1530|x87.52|y67.52|tM--The Celestial Vault (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Corridor": [
      {
        "name": "Corridor",
        "count": 2,
        "confidence": 0.4,
        "sample": "sA|m1530|x88.16|y70.37|tM--Ethereal Corridor (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Step": [
      {
        "name": "Step",
        "count": 2,
        "confidence": 0.4,
        "sample": "sA|m1530|x89.69|y65.46|tM--The Emperor's Step (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Bazaar": [
      {
        "name": "Bazaar",
        "count": 2,
        "confidence": 0.4,
        "sample": "sA|m1530|x90.15|y63.97|tM--The Star's Bazaar (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Exchange": [
      {
        "name": "Exchange",
        "count": 2,
        "confidence": 0.4,
        "sample": "sA|m1530|x90.69|y64.05|tM--The Imperial Exchange (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Serenity": [
      {
        "name": "Serenity",
        "count": 9,
        "confidence": 1.0,
        "sample": "sA|m1530|x91.91|y66.26|tM--Path of Serenity (Inner Seven Stars), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Village": [
      {
        "name": "Village",
        "count": 6,
        "confidence": 1.0,
        "sample": "sH|m371|x27.72|y14.93|tM--Honeydew Village (Southwest, The Jade Forest",
        "retail": true
      }
    ],
    "Rest": [
      {
        "name": "Rest",
        "count": 9,
        "confidence": 1.0,
        "sample": "sH|m1530|x62.84|y12.37|tM--Summer's Rest (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Balcony": [
      {
        "name": "Balcony",
        "count": 4,
        "confidence": 0.8,
        "sample": "sH|m1530|x62.59|y13.18|tM--Hall of the Crescent Moon East Balcony (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Mercantile": [
      {
        "name": "Mercantile",
        "count": 2,
        "confidence": 0.4,
        "sample": "sH|m1530|x63.53|y8.52|tM--The Imperial Mercantile (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Area": [
      {
        "name": "Area",
        "count": 2,
        "confidence": 0.4,
        "sample": "sH|m1530|x62.15|y12.15|tM--Hall of the Crescent Moon Engineering Area (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Entrance": [
      {
        "name": "Entrance",
        "count": 8,
        "confidence": 1.0,
        "sample": "sH|m1530|x61.26|y14.99|tM--Hall of the Crescent Moon Entrance (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Masters": [
      {
        "name": "Masters",
        "count": 2,
        "confidence": 0.4,
        "sample": "sH|m1530|x59.88|y13.02|tM--Chamber of the Masters (Inner Two Moons), Vale of Eternal Blossoms (N'zoth)",
        "retail": true
      }
    ],
    "Nathria": [
      {
        "name": "Nathria",
        "count": 28,
        "confidence": 1.0,
        "sample": "[2093]=60, -- Castle Nathria (Mythic)",
        "retail": true
      }
    ],
    "Tazavesh": [
      {
        "name": "Tazavesh",
        "count": 1,
        "confidence": 0.2,
        "sample": "[2225]=60, -- Tazavesh (Mythic)",
        "retail": true
      }
    ],
    "Domination": [
      {
        "name": "Domination",
        "count": 8,
        "confidence": 1.0,
        "sample": "[2226]=60, -- Sanctum of Domination (Mythic)",
        "retail": true
      }
    ],
    "Ones": [
      {
        "name": "Ones",
        "count": 11,
        "confidence": 1.0,
        "sample": "[2290]=60, -- Sepulcher of the First Ones (Mythic)",
        "retail": true
      }
    ],
    "Crucible": [
      {
        "name": "Crucible",
        "count": 17,
        "confidence": 1.0,
        "sample": "[2405]=70, -- Aberrus, the Shadowed Crucible (Mythic)",
        "retail": true
      }
    ],
    "Dungeon": [
      {
        "name": "Dungeon",
        "count": 9,
        "confidence": 1.0,
        "sample": "[2274] = {buff=359082}, -- Random Timewalking Dungeon (Legion)",
        "retail": true
      }
    ],
    "Event": [
      {
        "name": "Event",
        "count": 1,
        "confidence": 0.2,
        "sample": "{\"list\", text=[[Click here to load the **20th Anniversary Event (Beta)** guide]], guide=\"EVENTS\\\\The War Within (70-80)\\\\20th Anniversary Event\"},",
        "retail": true
      }
    ],
    "ModelsToNPCCounter": [
      {
        "name": "ZGV.ModelsToNPCCounter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV.ModelsToNPCCounter(id,count)",
        "retail": true
      }
    ],
    "Glyphs": [
      {
        "name": "Glyphs",
        "count": 14,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**The War Within Dragon Glyphs (All Zones)**]], guide=\"Leveling Guides\\\\The War Within (70-80)\\\\Dragon Glyphs\\\\The War Within Dragon Glyphs (All Zones)\"},",
        "retail": true
      }
    ],
    "Mycobloom": [
      {
        "name": "Mycobloom",
        "count": 28,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Mycobloom (Azj-Kahet)**]], guide=\"Profession Guides\\\\Herbalism\\\\Farming Guides\\\\Mycobloom (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Spear": [
      {
        "name": "Spear",
        "count": 12,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Arathor's Spear (Hallowfall)**]], guide=\"Profession Guides\\\\Herbalism\\\\Farming Guides\\\\Arathor's Spear (Hallowfall)\"},",
        "retail": true
      }
    ],
    "Blossom": [
      {
        "name": "Blossom",
        "count": 12,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Blessing Blossom (Hallowfall)**]], guide=\"Profession Guides\\\\Herbalism\\\\Farming Guides\\\\Blessing Blossom (Hallowfall)\"},",
        "retail": true
      }
    ],
    "Orbinid": [
      {
        "name": "Orbinid",
        "count": 8,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Orbinid (Azj-Kahet)**]], guide=\"Profession Guides\\\\Herbalism\\\\Farming Guides\\\\Orbinid (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Luredrop": [
      {
        "name": "Luredrop",
        "count": 9,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Luredrop (Azj-Kahet)**]], guide=\"Profession Guides\\\\Herbalism\\\\Farming Guides\\\\Luredrop (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Bismuth": [
      {
        "name": "Bismuth",
        "count": 36,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Bismuth (Azj-Kahet)**]], guide=\"Profession Guides\\\\Mining\\\\Farming Guides\\\\Bismuth (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Ironclaw": [
      {
        "name": "Ironclaw",
        "count": 8,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Ironclaw (Isle of Dorn)**]], guide=\"Profession Guides\\\\Mining\\\\Farming Guides\\\\Ironclaw (Isle of Dorn)\"},",
        "retail": true
      }
    ],
    "Aqirite": [
      {
        "name": "Aqirite",
        "count": 8,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Aqirite (Azj-Kahet)**]], guide=\"Profession Guides\\\\Mining\\\\Farming Guides\\\\Aqirite (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Leather": [
      {
        "name": "Leather",
        "count": 32,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Stormcharged Leather (Isle of Dorn)**]], guide=\"Profession Guides\\\\Skinning\\\\Farming Guides\\\\Stormcharged Leather (Isle of Dorn)\"},",
        "retail": true
      }
    ],
    "Chitin": [
      {
        "name": "Chitin",
        "count": 5,
        "confidence": 1.0,
        "sample": "{\"item\", text=[[**Gloom Chitin (Azj-Kahet)**]], guide=\"Profession Guides\\\\Skinning\\\\Farming Guides\\\\Gloom Chitin (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Carapace": [
      {
        "name": "Carapace",
        "count": 4,
        "confidence": 0.8,
        "sample": "{\"item\", text=[[**Sunless Carapace (Azj-Kahet)**]], guide=\"Profession Guides\\\\Skinning\\\\Farming Guides\\\\Sunless Carapace (Azj-Kahet)\"},",
        "retail": true
      }
    ],
    "Understanding": [
      {
        "name": "Understanding",
        "count": 2,
        "confidence": 0.4,
        "sample": "{\"text\", text=[[Zereth Mortis introduces a new crafting system called Protoform Synthesis that allows you to craft Battle Pets and Mounts.|n|nAfter you complete Chapter 3 of the Zereth Mortis campaign you will gain access to the Cypher Research Console. To unlock Protoform Synthesis, you will need to use the Dealic section of the Cypher Research Console to research the talents Dealic Understanding (for crafting Battle Pets) and Sopranian Understanding (for crafting Mounts).|n|nYou can then use the following guides to obtain schematics which teach you how to craft different creatures.|n|nNote: Some aspects of this content is time-gated until week 4 of the Patch 9.2 release.]]},",
        "retail": true
      }
    ],
    "Goblins": [
      {
        "name": "Goblins",
        "count": 1,
        "confidence": 0.2,
        "sample": "{\"text\", text=[[You can now obtain Heritage Armor for Worgen (Alliance only) and Goblins (Horde only).]]},",
        "retail": true
      }
    ],
    "GameTooltip_AddQuest": [
      {
        "name": "GameTooltip_AddQuest",
        "count": 5,
        "confidence": 1.0,
        "sample": "GameTooltip_AddQuest(row)",
        "retail": true
      }
    ],
    "OnLegendPinMouseEnter": [
      {
        "name": "OnLegendPinMouseEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function row:OnLegendPinMouseEnter() return end",
        "retail": true
      }
    ],
    "SetAbsMonth": [
      {
        "name": "C_Calendar.SetAbsMonth",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Calendar.SetAbsMonth(currentCalendarTime.month, currentCalendarTime.year);",
        "retail": true
      }
    ],
    "OpenCalendar": [
      {
        "name": "C_Calendar.OpenCalendar",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_Calendar.OpenCalendar()",
        "retail": true
      }
    ],
    "GetWorldEvents": [
      {
        "name": "GetWorldEvents",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:GetWorldEvents()",
        "retail": true
      }
    ],
    "GetMonthInfo": [
      {
        "name": "C_Calendar.GetMonthInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local currentmonth = C_Calendar.GetMonthInfo()",
        "retail": true
      }
    ],
    "UpdateTimes": [
      {
        "name": "UpdateTimes",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:UpdateTimes()",
        "retail": true
      }
    ],
    "RequestCallings": [
      {
        "name": "C_CovenantCallings.RequestCallings",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_CovenantCallings.RequestCallings()",
        "retail": true
      }
    ],
    "GetMapTable": [
      {
        "name": "C_ChallengeMode.GetMapTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_ChallengeMode.GetMapTable()",
        "retail": true
      }
    ],
    "RequestCurrentAffixes": [
      {
        "name": "C_MythicPlus.RequestCurrentAffixes",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_MythicPlus.RequestCurrentAffixes()",
        "retail": true
      }
    ],
    "RequestMapInfo": [
      {
        "name": "C_MythicPlus.RequestMapInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_MythicPlus.RequestMapInfo()",
        "retail": true
      }
    ],
    "GetCurrentAffixes": [
      {
        "name": "C_MythicPlus.GetCurrentAffixes",
        "count": 1,
        "confidence": 0.2,
        "sample": "local affixes = C_MythicPlus.GetCurrentAffixes()",
        "retail": true
      }
    ],
    "GetAffixInfo": [
      {
        "name": "C_ChallengeMode.GetAffixInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local name,desc,texture = C_ChallengeMode.GetAffixInfo(aff.id)",
        "retail": true
      },
      {
        "name": "GetAffixInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local affixName, desc, texture = GetAffixInfo(i)",
        "retail": true
      }
    ],
    "CreateFromSpellID": [
      {
        "name": "CreateFromSpellID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local sdata = Spell:CreateFromSpellID(spell)",
        "retail": true
      }
    ],
    "GetSpellName": [
      {
        "name": "GetSpellName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local sname = sdata:GetSpellName()",
        "retail": true
      }
    ],
    "GetSpellDescription": [
      {
        "name": "GetSpellDescription",
        "count": 2,
        "confidence": 0.4,
        "sample": "local sdesc = sdata:GetSpellDescription()",
        "retail": true
      },
      {
        "name": "C_Spell.GetSpellDescription",
        "count": 2,
        "confidence": 0.4,
        "sample": "local desc = C_Spell.GetSpellDescription and C_Spell.GetSpellDescription(spellId) or GetSpellDescription(spellId)",
        "retail": true
      }
    ],
    "ContinueOnSpellLoad": [
      {
        "name": "ContinueOnSpellLoad",
        "count": 1,
        "confidence": 0.2,
        "sample": "spell:ContinueOnSpellLoad(function() widget:Update() end)",
        "retail": true
      }
    ],
    "CreateGraphLine": [
      {
        "name": "CreateGraphLine",
        "count": 8,
        "confidence": 1.0,
        "sample": "self.graph = Graph:CreateGraphLine(\"ZGVWidgetTokenGraph\", self.frame , \"BOTTOM\", \"BOTTOM\", 0,25,self.widthpx,self.heightpx/2)",
        "retail": true
      }
    ],
    "SetXAxis": [
      {
        "name": "SetXAxis",
        "count": 14,
        "confidence": 1.0,
        "sample": ":SetXAxis(0, 48)",
        "retail": true
      }
    ],
    "SetDrawGrid": [
      {
        "name": "SetDrawGrid",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetDrawGrid(false)",
        "retail": true
      }
    ],
    "SetUseHotspots": [
      {
        "name": "SetUseHotspots",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetUseHotspots(false)",
        "retail": true
      }
    ],
    "SetGridSpacing": [
      {
        "name": "SetGridSpacing",
        "count": 15,
        "confidence": 1.0,
        "sample": ":SetGridSpacing(12, 500000)",
        "retail": true
      }
    ],
    "SetGridColor": [
      {
        "name": "SetGridColor",
        "count": 10,
        "confidence": 1.0,
        "sample": ":SetGridColor({0.5, 0.5, 0.5, 0.5})",
        "retail": true
      }
    ],
    "SetAxisDrawing": [
      {
        "name": "SetAxisDrawing",
        "count": 10,
        "confidence": 1.0,
        "sample": ":SetAxisDrawing(true, true)",
        "retail": true
      }
    ],
    "SetAxisColor": [
      {
        "name": "SetAxisColor",
        "count": 10,
        "confidence": 1.0,
        "sample": ":SetAxisColor({1.0, 1.0, 1.0, 1.0})",
        "retail": true
      }
    ],
    "SetAutoScale": [
      {
        "name": "SetAutoScale",
        "count": 14,
        "confidence": 1.0,
        "sample": ":SetAutoScale(true)",
        "retail": true
      }
    ],
    "SetYAxis": [
      {
        "name": "SetYAxis",
        "count": 10,
        "confidence": 1.0,
        "sample": ":SetYAxis(minv, maxv)",
        "retail": true
      }
    ],
    "AddDataSeries": [
      {
        "name": "AddDataSeries",
        "count": 15,
        "confidence": 1.0,
        "sample": ":AddDataSeries(self.values,{1.0, 0.0, 0.0, 0.8})",
        "retail": true
      }
    ],
    "SetUseHotlines": [
      {
        "name": "SetUseHotlines",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetUseHotlines(true)",
        "retail": true
      }
    ],
    "SetYLabels": [
      {
        "name": "SetYLabels",
        "count": 4,
        "confidence": 0.8,
        "sample": ":SetYLabels(true,false)",
        "retail": true
      }
    ],
    "SetXLabels": [
      {
        "name": "SetXLabels",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetXLabels(false,true)",
        "retail": true
      }
    ],
    "SetYLabelsFormatter": [
      {
        "name": "SetYLabelsFormatter",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetYLabelsFormatter(ylabelformatter)",
        "retail": true
      }
    ],
    "SetXLabelsFormatter": [
      {
        "name": "SetXLabelsFormatter",
        "count": 3,
        "confidence": 0.6,
        "sample": ":SetXLabelsFormatter(xlabelformatter)",
        "retail": true
      }
    ],
    "GetCurrentMarketPrice": [
      {
        "name": "C_WowTokenPublic.GetCurrentMarketPrice",
        "count": 2,
        "confidence": 0.4,
        "sample": "local price = C_WowTokenPublic.GetCurrentMarketPrice()",
        "retail": true
      }
    ],
    "UpdateMarketPrice": [
      {
        "name": "C_WowTokenPublic.UpdateMarketPrice",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_WowTokenPublic.UpdateMarketPrice()",
        "retail": true
      }
    ],
    "GetCurrentRegion": [
      {
        "name": "GetCurrentRegion",
        "count": 3,
        "confidence": 0.6,
        "sample": "local region = GetCurrentRegion()",
        "retail": true
      }
    ],
    "GetServerTime": [
      {
        "name": "GetServerTime",
        "count": 8,
        "confidence": 1.0,
        "sample": "local timer = self.interval - ((GetServerTime() - self.firstEvent) % self.interval)",
        "retail": true
      }
    ],
    "UpdateCurrentDay": [
      {
        "name": "UpdateCurrentDay",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdateCurrentDay()",
        "retail": true
      }
    ],
    "ShowRange": [
      {
        "name": "ShowRange",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\",function() self:ShowRange() end)",
        "retail": true
      }
    ],
    "CreateGraphPieChart": [
      {
        "name": "CreateGraphPieChart",
        "count": 5,
        "confidence": 1.0,
        "sample": "self.todaygraph = Graph:CreateGraphPieChart(\"ZGVWidgetGoldGraphPie\", self.popup , \"BOTTOM\", \"BOTTOM\", 0,100,self.popup:GetWidth()/2,(self.popup:GetHeight())/2)",
        "retail": true
      }
    ],
    "GetHistory": [
      {
        "name": "GetHistory",
        "count": 4,
        "confidence": 0.8,
        "sample": "local startmoney,endmoney,gain,loss = self:GetHistory(0)",
        "retail": true
      }
    ],
    "AddPie": [
      {
        "name": "AddPie",
        "count": 10,
        "confidence": 1.0,
        "sample": ":AddPie(gainper*100, {0.0, 1.0, 0.0})",
        "retail": true
      }
    ],
    "CompletePie": [
      {
        "name": "CompletePie",
        "count": 5,
        "confidence": 1.0,
        "sample": ":CompletePie({0.2, 0.2, 1.0})",
        "retail": true
      }
    ],
    "HideLines": [
      {
        "name": "HideLines",
        "count": 19,
        "confidence": 1.0,
        "sample": ":HideLines(self.todaygraph)",
        "retail": true
      }
    ],
    "AdjustTimeByDays": [
      {
        "name": "C_DateAndTime.AdjustTimeByDays",
        "count": 1,
        "confidence": 0.2,
        "sample": "local timeobject = C_DateAndTime.AdjustTimeByDays(timeobjectnow,offset)",
        "retail": true
      }
    ],
    "UpdateMoney": [
      {
        "name": "UpdateMoney",
        "count": 2,
        "confidence": 0.4,
        "sample": "function widget:UpdateMoney()",
        "retail": true
      }
    ],
    "PrepareResults": [
      {
        "name": "PrepareResults",
        "count": 11,
        "confidence": 1.0,
        "sample": ":SetScript(\"OnShow\",function() self:PrepareResults() end)",
        "retail": true
      }
    ],
    "ShowCharacters": [
      {
        "name": "ShowCharacters",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\",function() self:ShowCharacters() end)",
        "retail": true
      }
    ],
    "ShowModes": [
      {
        "name": "ShowModes",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetScript(\"OnClick\",function() self:ShowModes() end)",
        "retail": true
      }
    ],
    "BattlePetToolTip_ShowLink": [
      {
        "name": "BattlePetToolTip_ShowLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "BattlePetToolTip_ShowLink(row.item.link)",
        "retail": true
      }
    ],
    "SwitchMode": [
      {
        "name": "SwitchMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SwitchMode(data)",
        "retail": true
      }
    ],
    "Reagent": [
      {
        "name": "Reagent",
        "count": 1,
        "confidence": 0.2,
        "sample": "[5] = 6,  -- Reagent (obsolete)",
        "retail": true
      }
    ],
    "Projectile": [
      {
        "name": "Projectile",
        "count": 1,
        "confidence": 0.2,
        "sample": "[6] = 7,  -- Projectile (obsolete)",
        "retail": true
      }
    ],
    "Money": [
      {
        "name": "Money",
        "count": 1,
        "confidence": 0.2,
        "sample": "[10] = 11, -- Money (obsolete)",
        "retail": true
      }
    ],
    "Quiver": [
      {
        "name": "Quiver",
        "count": 1,
        "confidence": 0.2,
        "sample": "[11] = 12, -- Quiver (obsolete)",
        "retail": true
      }
    ],
    "Key": [
      {
        "name": "Key",
        "count": 1,
        "confidence": 0.2,
        "sample": "[13] = 14, -- Key  (obsolete)",
        "retail": true
      }
    ],
    "Permanent": [
      {
        "name": "Permanent",
        "count": 1,
        "confidence": 0.2,
        "sample": "[14] = 15, -- Permanent  (obsolete)",
        "retail": true
      }
    ],
    "NewLibrary": [
      {
        "name": "NewLibrary",
        "count": 89,
        "confidence": 1.0,
        "sample": "local AceConsole, oldminor = LibStub:NewLibrary(MAJOR, MINOR)",
        "retail": true
      }
    ],
    "ChatFrame": [
      {
        "name": "ChatFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "--- Print to DEFAULT_CHAT_FRAME or given ChatFrame (anything with an .AddMessage function)",
        "retail": true
      }
    ],
    "Formatted": [
      {
        "name": "Formatted",
        "count": 1,
        "confidence": 0.2,
        "sample": "--- Formatted (using format()) print to DEFAULT_CHAT_FRAME or given ChatFrame (anything with an .AddMessage function)",
        "retail": true
      }
    ],
    "Printf": [
      {
        "name": "Printf",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConsole:Printf(...)",
        "retail": true
      }
    ],
    "RegisterChatCommand": [
      {
        "name": "RegisterChatCommand",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceConsole:RegisterChatCommand( command, func, persist )",
        "retail": true
      },
      {
        "name": "AceConsole.RegisterChatCommand",
        "count": 1,
        "confidence": 0.2,
        "sample": "if AceConsole.RegisterChatCommand(self, slashcmd, function(input)",
        "retail": true
      }
    ],
    "UnregisterChatCommand": [
      {
        "name": "UnregisterChatCommand",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceConsole:UnregisterChatCommand( command )",
        "retail": true
      }
    ],
    "Iterator": [
      {
        "name": "Iterator",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- @return Iterator (pairs) over all commands",
        "retail": true
      }
    ],
    "IterateChatCommands": [
      {
        "name": "IterateChatCommands",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConsole:IterateChatCommands() return pairs(AceConsole.commands) end",
        "retail": true
      }
    ],
    "GetArgs": [
      {
        "name": "GetArgs",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceConsole:GetArgs(str, numargs, startpos)",
        "retail": true
      }
    ],
    "OnEmbedEnable": [
      {
        "name": "OnEmbedEnable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConsole:OnEmbedEnable( target )",
        "retail": true
      }
    ],
    "OnEmbedDisable": [
      {
        "name": "OnEmbedDisable",
        "count": 11,
        "confidence": 1.0,
        "sample": "function AceConsole:OnEmbedDisable( target )",
        "retail": true
      }
    ],
    "Remove": [
      {
        "name": "Remove",
        "count": 7,
        "confidence": 1.0,
        "sample": "function NodeSet:Remove(node)",
        "retail": true
      }
    ],
    "GetCheapest": [
      {
        "name": "GetCheapest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NodeSet:GetCheapest()",
        "retail": true
      }
    ],
    "Length": [
      {
        "name": "Length",
        "count": 4,
        "confidence": 0.8,
        "sample": "function NodeSet:Length()",
        "retail": true
      }
    ],
    "InterfaceWithLib": [
      {
        "name": "InterfaceWithLib",
        "count": 8,
        "confidence": 1.0,
        "sample": "function NodeSet:InterfaceWithLib(lib)",
        "retail": true
      }
    ],
    "AddNeigh": [
      {
        "name": "AddNeigh",
        "count": 16,
        "confidence": 1.0,
        "sample": "function Node:AddNeigh(node,meta)",
        "retail": true
      }
    ],
    "RemoveNeigh": [
      {
        "name": "RemoveNeigh",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Node:RemoveNeigh(node)",
        "retail": true
      }
    ],
    "IterNeighs": [
      {
        "name": "IterNeighs",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Node:IterNeighs()",
        "retail": true
      }
    ],
    "RemoveNeighType": [
      {
        "name": "RemoveNeighType",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover_Node:RemoveNeighType(type1,type2,type3)",
        "retail": true
      }
    ],
    "GetNeigh": [
      {
        "name": "GetNeigh",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover_Node:GetNeigh(node,num)",
        "retail": true
      }
    ],
    "DoLinkage": [
      {
        "name": "DoLinkage",
        "count": 5,
        "confidence": 1.0,
        "sample": "function LibRover_Node:DoLinkage(n2,dryrun)",
        "retail": true
      }
    ],
    "CanFlyTo": [
      {
        "name": "CanFlyTo",
        "count": 5,
        "confidence": 1.0,
        "sample": "canfly,reasonfly = n1:CanFlyTo(n2,dryrun)",
        "retail": true
      }
    ],
    "CanWalkTo": [
      {
        "name": "CanWalkTo",
        "count": 4,
        "confidence": 0.8,
        "sample": "canwalk,reasonwalk,penalty = n1:CanWalkTo(n2,dryrun)",
        "retail": true
      }
    ],
    "GetActionTitle": [
      {
        "name": "GetActionTitle",
        "count": 3,
        "confidence": 0.6,
        "sample": "function LibRover_Node:GetActionTitle(prevnode,nextnode)",
        "retail": true
      }
    ],
    "FromTo": [
      {
        "name": "FromTo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function FromTo(strfrom,strto)",
        "retail": true
      }
    ],
    "MapName": [
      {
        "name": "MapName",
        "count": 16,
        "confidence": 1.0,
        "sample": "return (\"%s/%s border\"):format(MapName(self),MapName(self.border or self.ms and next(self.ms)))",
        "retail": true
      },
      {
        "name": "Lib.MapName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local ret = (\"[%d] %s\\\"|cffddddee%s|r\\\" = |cffddeedd%s|r/%d (%d) |cffddeedd%.1f|r,|cffddeedd%.1f|r [|cffeedddd%s|r]\"):format(self.num, (self.id and \"@\"..self.id..\" \" or \"\"), self:GetText() or \"\\\"#\"..self.num..\"\\\"\", Lib.MapName(self.m), self.f, self.m, self.x*100,self.y*100, stype)",
        "retail": true
      }
    ],
    "IsTaxiKnown": [
      {
        "name": "IsTaxiKnown",
        "count": 8,
        "confidence": 1.0,
        "sample": "function LibRover_Node:IsTaxiKnown()",
        "retail": true
      }
    ],
    "GetMapLevels": [
      {
        "name": "C_Map.GetMapLevels",
        "count": 3,
        "confidence": 0.6,
        "sample": "elseif (self.level and ZGV:GetPlayerPreciseLevel()<self.level) or (not C_Map.GetMapLevels(self.m) or C_Map.GetMapLevels(self.m)>ZGV:GetPlayerPreciseLevel()+5) then return false,\"|cffff0000unavailable (high lvl)|r\",false",
        "retail": true
      }
    ],
    "GetAngleTo": [
      {
        "name": "GetAngleTo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function LibRover_Node:GetAngleTo(node2)",
        "retail": true
      }
    ],
    "Lib_GetDist": [
      {
        "name": "Lib_GetDist",
        "count": 1,
        "confidence": 0.2,
        "sample": "local dist,xd,yd = Lib_GetDist(self,node2)",
        "retail": true
      }
    ],
    "Lib_IsSegmentWalled": [
      {
        "name": "Lib_IsSegmentWalled",
        "count": 1,
        "confidence": 0.2,
        "sample": "local walled,_,_,penalty = Lib_IsSegmentWalled(n1,n2)",
        "retail": true
      }
    ],
    "CanCross": [
      {
        "name": "CanCross",
        "count": 3,
        "confidence": 0.6,
        "sample": "if Lib.greenborders:CanCross(n1_m,n2_m) then return true,debug and \"greenborder \"..n1_m..\" -> \"..n2_m, penalty end",
        "retail": true
      }
    ],
    "HasGreenBorder": [
      {
        "name": "HasGreenBorder",
        "count": 3,
        "confidence": 0.6,
        "sample": "if n1.regionobj and n1.regionobj:HasGreenBorder(n2_m) then return true, debug and \"region greenborder region \"..n1.region..\" -> \"..n2_m, penalty end",
        "retail": true
      }
    ],
    "Cleft": [
      {
        "name": "Cleft",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (m==504 and self.f==2)  -- Orgri or Dala  -- 2015-07-27 sinus: CAN fly in Orgri Cleft (321/2) for some time now.",
        "retail": true
      }
    ],
    "CanConnectTo": [
      {
        "name": "CanConnectTo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover_Node:CanConnectTo(dest)",
        "retail": true
      }
    ],
    "AssignRegion": [
      {
        "name": "AssignRegion",
        "count": 4,
        "confidence": 0.8,
        "sample": "function LibRover_Node:AssignRegion(regionobj)",
        "retail": true
      }
    ],
    "AssignSpecialMap": [
      {
        "name": "AssignSpecialMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover_Node:AssignSpecialMap()",
        "retail": true
      }
    ],
    "GetDebugNeighs": [
      {
        "name": "GetDebugNeighs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover_Node:GetDebugNeighs()",
        "retail": true
      }
    ],
    "CacheMaxSpeeds": [
      {
        "name": "CacheMaxSpeeds",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover_Node:CacheMaxSpeeds()",
        "retail": true
      }
    ],
    "NeighbourhoodCache_Localize": [
      {
        "name": "NeighbourhoodCache_Localize",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover_Node:NeighbourhoodCache_Localize()",
        "retail": true
      }
    ],
    "NeighbourhoodCache_Kill": [
      {
        "name": "NeighbourhoodCache_Kill",
        "count": 3,
        "confidence": 0.6,
        "sample": "function LibRover_Node:NeighbourhoodCache_Kill()",
        "retail": true
      }
    ],
    "Author": [
      {
        "name": "Author",
        "count": 5,
        "confidence": 1.0,
        "sample": "Author(s): sinus (sinus@sinpi.net)",
        "retail": true
      }
    ],
    "TryBZL": [
      {
        "name": "TryBZL",
        "count": 19,
        "confidence": 1.0,
        "sample": "local function TryBZL(text)",
        "retail": true
      }
    ],
    "TranslateWorldMapPosition": [
      {
        "name": "TranslateWorldMapPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "local x,y = Astrolabe:TranslateWorldMapPosition( lam, laf, lax, lay, m, f )",
        "retail": true
      }
    ],
    "Arathi": [
      {
        "name": "Arathi",
        "count": 1,
        "confidence": 0.2,
        "sample": "[BIT_NORTH]={MAPENUM[\"TIRISFALGLADES\"],MAPENUM[\"UNDERCITY\"],MAPENUM[\"WESTERNPLAGUELANDS\"],MAPENUM[\"EASTERNPLAGUELANDS\"],MAPENUM[\"SILVERPINEFOREST\"],MAPENUM[\"HILLSBRADFOOTHILLS\"],MAPENUM[\"ARATHIHIGHLANDS\"],MAPENUM[\"THEHINTERLANDS\"]}, --northmost, down to Arathi (common)",
        "retail": true
      }
    ],
    "AddNode": [
      {
        "name": "AddNode",
        "count": 16,
        "confidence": 1.0,
        "sample": "local function AddNode(node,dontlink)",
        "retail": true
      }
    ],
    "DoLinkage_in_scope": [
      {
        "name": "DoLinkage_in_scope",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DoLinkage_in_scope(scope)",
        "retail": true
      }
    ],
    "ParseFullNode": [
      {
        "name": "ParseFullNode",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ParseFullNode(text)",
        "retail": true
      }
    ],
    "ParseMapXY": [
      {
        "name": "ParseMapXY",
        "count": 2,
        "confidence": 0.4,
        "sample": "local m1,x1,y1 = ParseMapXY(mxy1)",
        "retail": true
      }
    ],
    "Contains": [
      {
        "name": "Contains",
        "count": 3,
        "confidence": 0.6,
        "sample": "for ri,region in ipairs(self) do if region:Contains(node) then node:AssignRegion(region) break end end",
        "retail": true
      }
    ],
    "AddNewRegion": [
      {
        "name": "AddNewRegion",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib.NodeRegions:AddNewRegion(data)",
        "retail": true
      }
    ],
    "B": [
      {
        "name": "B",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Intersect segments A (x1,y1 : x2,y2) and B (x1,y1 : x2,y2).",
        "retail": true
      }
    ],
    "IsSegmentWalledN": [
      {
        "name": "Lib.IsSegmentWalledN",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.IsSegmentWalledN(n1,n2)",
        "retail": true
      }
    ],
    "IsSegmentWalled": [
      {
        "name": "Lib.IsSegmentWalled",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Lib.IsSegmentWalled(Lib.nodes.all[n1],Lib.nodes.all[n2])",
        "retail": true
      }
    ],
    "HandleSpellsAndItems": [
      {
        "name": "HandleSpellsAndItems",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function HandleSpellsAndItems(node,link)",
        "retail": true
      }
    ],
    "ParseDataCond": [
      {
        "name": "ParseDataCond",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function ParseDataCond(data)",
        "retail": true
      }
    ],
    "AddError": [
      {
        "name": "AddError",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function AddError(fmt,...)",
        "retail": true
      }
    ],
    "SmartAddNode": [
      {
        "name": "SmartAddNode",
        "count": 13,
        "confidence": 1.0,
        "sample": "--assert(n1,\"No coords in SmartAddNode(\\\"\"..text..\"\\\")\")",
        "retail": true
      }
    ],
    "AddMap": [
      {
        "name": "AddMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib.SpecialMapNodeData:AddMap(Lib.data.MapIDsByName[data.map],data.floor or 0,data.extra)",
        "retail": true
      }
    ],
    "InitializeTaxis": [
      {
        "name": "InitializeTaxis",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function InitializeTaxis(dontlink)",
        "retail": true
      }
    ],
    "RemoveUselessWalkLinks": [
      {
        "name": "RemoveUselessWalkLinks",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function RemoveUselessWalkLinks()",
        "retail": true
      }
    ],
    "Sha2Data": [
      {
        "name": "Sha2Data",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Lib:Sha2Data()",
        "retail": true
      }
    ],
    "GetCurrentMapLevelRange": [
      {
        "name": "GetCurrentMapLevelRange",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Lib.MapLevels[770]=84 -- 770 is a phase in Twlight Highlands and it returns 0 for GetCurrentMapLevelRange() this is a fix for that since it breaks the taxi system.",
        "retail": true
      }
    ],
    "FixRemapData": [
      {
        "name": "FixRemapData",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:FixRemapData(Lib.data.RemapData)",
        "retail": true
      }
    ],
    "ProcessBakedNeighbourCache": [
      {
        "name": "ProcessBakedNeighbourCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:ProcessBakedNeighbourCache()  -- takes about 0.17s",
        "retail": true
      }
    ],
    "StopStartup": [
      {
        "name": "StopStartup",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:StopStartup()",
        "retail": true
      }
    ],
    "ShowStartupSummary": [
      {
        "name": "ShowStartupSummary",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.db.profile.debug then self:ShowStartupSummary() end",
        "retail": true
      }
    ],
    "RecordVindicaar": [
      {
        "name": "RecordVindicaar",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Lib:RecordVindicaar() --use realtime map check now",
        "retail": true
      }
    ],
    "GetPlayerPos": [
      {
        "name": "GetPlayerPos",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetPlayerPos()",
        "retail": true
      }
    ],
    "GetCurrentPlayerPosition": [
      {
        "name": "GetCurrentPlayerPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "local m,f,x,y = Astrolabe:GetCurrentPlayerPosition()",
        "retail": true
      }
    ],
    "GetNearestTaxi": [
      {
        "name": "GetNearestTaxi",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:GetNearestTaxi()",
        "retail": true
      }
    ],
    "ComputeDistance": [
      {
        "name": "ComputeDistance",
        "count": 3,
        "confidence": 0.6,
        "sample": "local dist = Astrolabe:ComputeDistance(m,f,x,y,node.m,node.f,node.x,node.y)",
        "retail": true
      }
    ],
    "ImportTaxis": [
      {
        "name": "ImportTaxis",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:ImportTaxis(taxiset)",
        "retail": true
      }
    ],
    "ImportBorders": [
      {
        "name": "ImportBorders",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:ImportBorders()",
        "retail": true
      }
    ],
    "SetupInitialQuickTravel": [
      {
        "name": "SetupInitialQuickTravel",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:SetupInitialQuickTravel(startnode)",
        "retail": true
      }
    ],
    "GetVindicaarPosition": [
      {
        "name": "GetVindicaarPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "bind = bind..\", \"..Lib:GetVindicaarPosition()",
        "retail": true
      }
    ],
    "FindBindLocation": [
      {
        "name": "FindBindLocation",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function FindBindLocation(bind)",
        "retail": true
      }
    ],
    "FindGarrisonBindLocation": [
      {
        "name": "FindGarrisonBindLocation",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function FindGarrisonBindLocation(silent)",
        "retail": true
      },
      {
        "name": "Lib.FindGarrisonBindLocation",
        "count": 1,
        "confidence": 0.2,
        "sample": "local inn = Lib.FindGarrisonBindLocation and Lib.FindGarrisonBindLocation(\"silent\")",
        "retail": true
      }
    ],
    "PredictWhistle": [
      {
        "name": "PredictWhistle",
        "count": 4,
        "confidence": 0.8,
        "sample": "elseif dest==\"_TAXIWHISTLE\" then  dest = self.TaxiWhistlePredictor:PredictWhistle()",
        "retail": true
      }
    ],
    "IsUsableItem": [
      {
        "name": "C_Item.IsUsableItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "valid = valid or (C_Item.GetItemCount(port.item)>0 and C_Item.IsUsableItem(port.item)) -- item owned",
        "retail": true
      }
    ],
    "GetGlyphSocketInfo": [
      {
        "name": "GetGlyphSocketInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local enabled, glyphType, glyphTooltipIndex, glyphSpell, icon = GetGlyphSocketInfo(i)",
        "retail": true
      }
    ],
    "Lerp": [
      {
        "name": "Lerp",
        "count": 14,
        "confidence": 1.0,
        "sample": "local raritycost = 0--Lerp(rarity_min,rarity_max,1-Lib:GetCFG(\"blow_item_cd_ratio\")) --30m cd = 25 extra cost.",
        "retail": true
      }
    ],
    "GetMoleLocation": [
      {
        "name": "GetMoleLocation",
        "count": 2,
        "confidence": 0.4,
        "sample": "local mole = Lib.MoleMachineHandler:GetMoleLocation()",
        "retail": true
      }
    ],
    "GetDestinations": [
      {
        "name": "GetDestinations",
        "count": 2,
        "confidence": 0.4,
        "sample": "local destinations = Lib.MoleMachineHandler:GetDestinations()",
        "retail": true
      }
    ],
    "ClearQueue": [
      {
        "name": "ClearQueue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:ClearQueue()",
        "retail": true
      }
    ],
    "DelayFindPath": [
      {
        "name": "DelayFindPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DelayFindPath()",
        "retail": true
      }
    ],
    "IsDestinationImpossible": [
      {
        "name": "IsDestinationImpossible",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:IsDestinationImpossible(mymap,destmap)",
        "retail": true
      }
    ],
    "GMNBID": [
      {
        "name": "GMNBID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local title=destmap~=899 and ZGV.GetMapNameByID(destmap) or \"Arena of Annilhilation\" --TODO Localize Area of Annilhilation; GMNBID(899)==\"Proving Grounds\"...",
        "retail": true
      }
    ],
    "ReportFail": [
      {
        "name": "ReportFail",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:ReportFail(GetPlayerFacing() and \"Current location unknown.\")",
        "retail": true
      }
    ],
    "InitializePath__RemoveStartEnd_Threaded": [
      {
        "name": "InitializePath__RemoveStartEnd_Threaded",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:InitializePath__RemoveStartEnd_Threaded()",
        "retail": true
      }
    ],
    "InitializePath_Threaded": [
      {
        "name": "InitializePath_Threaded",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:InitializePath_Threaded() --called in as part of StepForever_Threaded only.",
        "retail": true
      }
    ],
    "IsSubmerged": [
      {
        "name": "IsSubmerged",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.startnode.submerged=IsSubmerged()",
        "retail": true
      }
    ],
    "RebuildNodes": [
      {
        "name": "RebuildNodes",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:RebuildNodes()",
        "retail": true
      }
    ],
    "StepForever_Threaded": [
      {
        "name": "StepForever_Threaded",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:StepForever_Threaded()",
        "retail": true
      }
    ],
    "StepPath": [
      {
        "name": "StepPath",
        "count": 3,
        "confidence": 0.6,
        "sample": "code,ret = self:StepPath()",
        "retail": true
      }
    ],
    "RemoveCheapest": [
      {
        "name": "RemoveCheapest",
        "count": 2,
        "confidence": 0.4,
        "sample": "local current = self.opennodes:RemoveCheapest()",
        "retail": true
      }
    ],
    "FadingFrame_Show": [
      {
        "name": "FadingFrame_Show",
        "count": 2,
        "confidence": 0.4,
        "sample": "FadingFrame_Show( ZoneTextFrame )",
        "retail": true
      }
    ],
    "PlayerHasKhazAlgarFlightMasterAchievement": [
      {
        "name": "PlayerHasKhazAlgarFlightMasterAchievement",
        "count": 3,
        "confidence": 0.6,
        "sample": "and LibTaxi:PlayerHasKhazAlgarFlightMasterAchievement() then -- flight time was 25% reduced",
        "retail": true
      }
    ],
    "BubbleUp": [
      {
        "name": "BubbleUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.opennodes:BubbleUp(neigh)",
        "retail": true
      }
    ],
    "Cleanup": [
      {
        "name": "Cleanup",
        "count": 10,
        "confidence": 1.0,
        "sample": "function Lib:Cleanup()",
        "retail": true
      },
      {
        "name": "Details222.TimeMachine.Cleanup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.TimeMachine.Cleanup()",
        "retail": true
      }
    ],
    "AngleBetween": [
      {
        "name": "AngleBetween",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function AngleBetween(n1,n2,n3)",
        "retail": true
      }
    ],
    "BuildResults": [
      {
        "name": "BuildResults",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:BuildResults(endnode)",
        "retail": true
      }
    ],
    "ReportPath": [
      {
        "name": "ReportPath",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:ReportPath(endnode)",
        "retail": true
      }
    ],
    "ReportArrival": [
      {
        "name": "ReportArrival",
        "count": 2,
        "confidence": 0.4,
        "sample": "if getdist(results[1],results[2])<ZGV.Pointer:GetDefaultStepDist() then return self:ReportArrival() end",
        "retail": true
      }
    ],
    "GetGlidingInfo": [
      {
        "name": "C_PlayerInfo.GetGlidingInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isGliding = C_PlayerInfo and C_PlayerInfo.GetGlidingInfo and C_PlayerInfo.GetGlidingInfo()",
        "retail": true
      }
    ],
    "HasBuff": [
      {
        "name": "Lib.HasBuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.HasBuff(name,id)",
        "retail": true
      }
    ],
    "UnitBuff": [
      {
        "name": "UnitBuff",
        "count": 4,
        "confidence": 0.8,
        "sample": "local name, _, _, _, _, _, _, _, _, _, spellID = UnitBuff(\"player\",name)",
        "retail": true
      }
    ],
    "HasAchievement": [
      {
        "name": "Lib.HasAchievement",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.HasAchievement(id)",
        "retail": true
      },
      {
        "name": "HasAchievement",
        "count": 2,
        "confidence": 0.4,
        "sample": "local A_UNLOCKING_THE_SECRETS = HasAchievement(15514)",
        "retail": true
      },
      {
        "name": "LibRover.HasAchievement",
        "count": 5,
        "confidence": 1.0,
        "sample": "\"Dun Morogh 02.0,28.0 -x- Kelp'thar Forest 71.0,63.0 {mode:FLY} {cond:LibRover.HasAchievement(890)}\", -- anyone can fly this one, really",
        "retail": true
      }
    ],
    "GetConfigIDByTreeID": [
      {
        "name": "C_Traits.GetConfigIDByTreeID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local configID = C_Traits.GetConfigIDByTreeID(treeID)",
        "retail": true
      }
    ],
    "GetTreeCurrencyInfo": [
      {
        "name": "C_Traits.GetTreeCurrencyInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local treeCurrencyInfo = configID and C_Traits.GetTreeCurrencyInfo(configID, 1115, true)",
        "retail": true
      }
    ],
    "Outland": [
      {
        "name": "Outland",
        "count": 9,
        "confidence": 1.0,
        "sample": "[\"Outland\"] = { groundspeed + max(BONUS_GUILDPERK_MOUNTUP), dragonspeed_nerfed or flyspeed, flyspeed }, --Outland (flying)",
        "retail": true
      }
    ],
    "CanFlyAt": [
      {
        "name": "CanFlyAt",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:CanFlyAt(map)  -- unused?",
        "retail": true
      }
    ],
    "HasFlyingMount": [
      {
        "name": "HasFlyingMount",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Lib.maxspeedinzone[map][3]>0 and (has_flying_mount or Lib:HasFlyingMount())",
        "retail": true
      }
    ],
    "GetNumDisplayedMounts": [
      {
        "name": "C_MountJournal.GetNumDisplayedMounts",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_MountJournal.GetNumDisplayedMounts()",
        "retail": true
      }
    ],
    "GetDisplayedMountInfo": [
      {
        "name": "C_MountJournal.GetDisplayedMountInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local mountID = select(12,C_MountJournal.GetDisplayedMountInfo(i))",
        "retail": true
      }
    ],
    "UnitVehicleSkin": [
      {
        "name": "UnitVehicleSkin",
        "count": 1,
        "confidence": 0.2,
        "sample": "and UnitVehicleSkin(\"player\")==\"INTERFACE\\\\PLAYERACTIONBARALT\\\\NATURAL.BLP\"",
        "retail": true
      }
    ],
    "IsVindicaarIn": [
      {
        "name": "IsVindicaarIn",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:IsVindicaarIn(name)  -- map ids fixed for bfa",
        "retail": true
      }
    ],
    "ShowAllNodes": [
      {
        "name": "ShowAllNodes",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:ShowAllNodes(nodetype,do_spoo)",
        "retail": true
      }
    ],
    "DEV_ShowAllWalls": [
      {
        "name": "DEV_ShowAllWalls",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:DEV_ShowAllWalls()",
        "retail": true
      }
    ],
    "IsWintergraspControlled": [
      {
        "name": "IsWintergraspControlled",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Lib:IsWintergraspControlled()",
        "retail": true
      }
    ],
    "GetNumMapLandmarks": [
      {
        "name": "GetNumMapLandmarks",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i=1,GetNumMapLandmarks() do",
        "retail": true
      }
    ],
    "GetMapLandmarkInfo": [
      {
        "name": "C_WorldMap.GetMapLandmarkInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "name,_,textureIndex,_,_ = C_WorldMap.GetMapLandmarkInfo(i);",
        "retail": true
      },
      {
        "name": "GetMapLandmarkInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "name,_,textureIndex,_,_ = GetMapLandmarkInfo(i);",
        "retail": true
      }
    ],
    "ShowDebugMenu": [
      {
        "name": "Lib.ShowDebugMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib.ShowDebugMenu(parent,but)",
        "retail": true
      }
    ],
    "GetMapRectOnMap": [
      {
        "name": "C_Map.GetMapRectOnMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "local x1,x2,y1,y2 = C_Map.GetMapRectOnMap(self.value,mapid)",
        "retail": true
      }
    ],
    "DebugRegionsForPlayer": [
      {
        "name": "DebugRegionsForPlayer",
        "count": 2,
        "confidence": 0.4,
        "sample": "tinsert(menu,{ text = \"Is player in region..?\",  notCheckable=true, disabled=not Spoo or not Lib.startnode, func=function() Spoo(LibRover:DebugRegionsForPlayer()) end, tooltipTitle=(not Spoo and \"|cffff0000Spoo not loaded or no start point!\"), tooltipWhileDisabled=true })",
        "retail": true
      }
    ],
    "AnnouncePrediction": [
      {
        "name": "AnnouncePrediction",
        "count": 3,
        "confidence": 0.6,
        "sample": "tinsert(menu,{ text = \"Test Flight Whistle\", notCheckable=true, func=function() Lib.TaxiWhistlePredictor:PredictWhistle() Lib.TaxiWhistlePredictor:AnnouncePrediction() end })",
        "retail": true
      }
    ],
    "SetupFakeStartingPoint": [
      {
        "name": "SetupFakeStartingPoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "tinsert(menu,{ text = \"Use fake starting point?\", isNotRadio=true, checked=self.FAKE_STARTING_POINT_SETUP or self.FAKE_STARTING_POINT, func=function() Lib:SetupFakeStartingPoint() end})",
        "retail": true
      }
    ],
    "DebugNodes": [
      {
        "name": "DebugNodes",
        "count": 3,
        "confidence": 0.6,
        "sample": "function LibRover:DebugNodes(n1,n2,...)",
        "retail": true
      }
    ],
    "FindNode": [
      {
        "name": "FindNode",
        "count": 5,
        "confidence": 1.0,
        "sample": "if type(n1)==\"string\" then n1=self:FindNode(n1)[1] end",
        "retail": true
      }
    ],
    "DebugPath": [
      {
        "name": "DebugPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover:DebugPath(...)",
        "retail": true
      }
    ],
    "DebugBanLink": [
      {
        "name": "DebugBanLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover:DebugBanLink(n1,n2,mode)",
        "retail": true
      }
    ],
    "DumpAllNodes": [
      {
        "name": "DumpAllNodes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover:DumpAllNodes(zone)",
        "retail": true
      }
    ],
    "PathToString": [
      {
        "name": "PathToString",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover:PathToString(path)",
        "retail": true
      }
    ],
    "DumpNode": [
      {
        "name": "DumpNode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover:DumpNode(...)",
        "retail": true
      }
    ],
    "UnitPosition": [
      {
        "name": "UnitPosition",
        "count": 7,
        "confidence": 1.0,
        "sample": "wy,wx=UnitPosition(\"player\")",
        "retail": true
      }
    ],
    "GetZoneCoordinatesFromWorld": [
      {
        "name": "GetZoneCoordinatesFromWorld",
        "count": 7,
        "confidence": 1.0,
        "sample": "if wx then x,y = ZGV.HBD:GetZoneCoordinatesFromWorld(wx,wy,map,false) end",
        "retail": true
      }
    ],
    "RelocalizeFunctions": [
      {
        "name": "RelocalizeFunctions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:RelocalizeFunctions(fun,fun2)",
        "retail": true
      }
    ],
    "RunPrint": [
      {
        "name": "RunPrint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover.Tests.TestProto:RunPrint()",
        "retail": true
      }
    ],
    "RunTests": [
      {
        "name": "RunTests",
        "count": 2,
        "confidence": 0.4,
        "sample": "function LibRover.Tests:RunTests(tests,final_callback)",
        "retail": true
      }
    ],
    "RunTestSet": [
      {
        "name": "RunTestSet",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LibRover.Tests:RunTestSet(number)",
        "retail": true
      }
    ],
    "FindNearestTaxis": [
      {
        "name": "FindNearestTaxis",
        "count": 4,
        "confidence": 0.8,
        "sample": "function TWP:FindNearestTaxis()",
        "retail": true
      }
    ],
    "IsOnValidMap": [
      {
        "name": "IsOnValidMap",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self:IsOnValidMap() then",
        "retail": true
      }
    ],
    "ConfirmPrediction": [
      {
        "name": "ConfirmPrediction",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TWP:ConfirmPrediction()",
        "retail": true
      }
    ],
    "ValidDHSMap": [
      {
        "name": "ValidDHSMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:ValidDHSMap()",
        "retail": true
      }
    ],
    "GetMapZoneNumbers": [
      {
        "name": "GetMapZoneNumbers",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetMapZoneNumbers(zonename)",
        "retail": true
      }
    ],
    "GetMapContinents": [
      {
        "name": "GetMapContinents",
        "count": 1,
        "confidence": 0.2,
        "sample": "for cont in pairs{GetMapContinents()} do",
        "retail": true
      }
    ],
    "GetMapZones": [
      {
        "name": "GetMapZones",
        "count": 1,
        "confidence": 0.2,
        "sample": "for zone,name in pairs{GetMapZones(cont)} do",
        "retail": true
      }
    ],
    "CompareNodes": [
      {
        "name": "CompareNodes",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CompareNodes(i,j)",
        "retail": true
      }
    ],
    "CompareNodesSort": [
      {
        "name": "CompareNodesSort",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CompareNodesSort(node1,node2)",
        "retail": true
      }
    ],
    "HeapSwimMinUp": [
      {
        "name": "HeapSwimMinUp",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function HeapSwimMinUp(num)",
        "retail": true
      }
    ],
    "SinkNodeDown": [
      {
        "name": "SinkNodeDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SinkNodeDown()",
        "retail": true
      }
    ],
    "GetUIMapIDFromMapAreaId": [
      {
        "name": "GetUIMapIDFromMapAreaId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function HBDMigrate:GetUIMapIDFromMapAreaId(mapId, floor)",
        "retail": true
      }
    ],
    "GetUIMapIDFromMapFile": [
      {
        "name": "GetUIMapIDFromMapFile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HBDMigrate:GetUIMapIDFromMapFile(mapFile, floor)",
        "retail": true
      }
    ],
    "SetupMigrationData": [
      {
        "name": "SetupMigrationData",
        "count": 3,
        "confidence": 0.6,
        "sample": "if not mapFileToIdMap then SetupMigrationData() end",
        "retail": true
      }
    ],
    "GetLegacyMapInfo": [
      {
        "name": "GetLegacyMapInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HBDMigrate:GetLegacyMapInfo(uiMapId)",
        "retail": true
      }
    ],
    "Scenario": [
      {
        "name": "Scenario",
        "count": 8,
        "confidence": 1.0,
        "sample": "[1277] = 1116, -- Defense of Karabor Scenario (SMV)",
        "retail": true
      }
    ],
    "CreateVector2D": [
      {
        "name": "CreateVector2D",
        "count": 5,
        "confidence": 1.0,
        "sample": "local vector00, vector05 = CreateVector2D(0, 0), CreateVector2D(0.5, 0.5)",
        "retail": true
      }
    ],
    "GetWorldPosFromMapPos": [
      {
        "name": "C_Map.GetWorldPosFromMapPos",
        "count": 2,
        "confidence": 0.4,
        "sample": "local instance, topLeft = C_Map.GetWorldPosFromMapPos(id, vector00)",
        "retail": true
      }
    ],
    "GetXY": [
      {
        "name": "GetXY",
        "count": 3,
        "confidence": 0.6,
        "sample": "local top, left = topLeft:GetXY()",
        "retail": true
      }
    ],
    "UpdateCurrentPosition": [
      {
        "name": "UpdateCurrentPosition",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function UpdateCurrentPosition(instanceCheck)",
        "retail": true
      },
      {
        "name": "HereBeDragons.UpdateCurrentPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "HereBeDragons.UpdateCurrentPosition()",
        "retail": true
      }
    ],
    "StartUpdateTimer": [
      {
        "name": "StartUpdateTimer",
        "count": 2,
        "confidence": 0.4,
        "sample": "StartUpdateTimer()",
        "retail": true
      }
    ],
    "UpdateTimerCallback": [
      {
        "name": "UpdateTimerCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function UpdateTimerCallback()",
        "retail": true
      }
    ],
    "GetLocalizedMap": [
      {
        "name": "GetLocalizedMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HereBeDragons:GetLocalizedMap(uiMapID)",
        "retail": true
      }
    ],
    "GetZoneSize": [
      {
        "name": "GetZoneSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HereBeDragons:GetZoneSize(uiMapID)",
        "retail": true
      }
    ],
    "GetAllMapIDs": [
      {
        "name": "GetAllMapIDs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HereBeDragons:GetAllMapIDs()",
        "retail": true
      }
    ],
    "GetWorldCoordinatesFromAzerothWorldMap": [
      {
        "name": "GetWorldCoordinatesFromAzerothWorldMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function HereBeDragons:GetWorldCoordinatesFromAzerothWorldMap(x, y, instance)",
        "retail": true
      }
    ],
    "TranslateAzerothWorldMapCoordinates": [
      {
        "name": "TranslateAzerothWorldMapCoordinates",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function TranslateAzerothWorldMapCoordinates(self, x, y, oZone, dZone, allowOutOfBounds)",
        "retail": true
      }
    ],
    "GetUnitWorldPosition": [
      {
        "name": "GetUnitWorldPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HereBeDragons:GetUnitWorldPosition(unitId)",
        "retail": true
      }
    ],
    "GetPlayerZone": [
      {
        "name": "GetPlayerZone",
        "count": 2,
        "confidence": 0.4,
        "sample": "function HereBeDragons:GetPlayerZone()",
        "retail": true
      }
    ],
    "GetPlayerZonePosition": [
      {
        "name": "GetPlayerZonePosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HereBeDragons:GetPlayerZonePosition(allowOutOfBounds)",
        "retail": true
      }
    ],
    "IsLoggedIn": [
      {
        "name": "IsLoggedIn",
        "count": 6,
        "confidence": 1.0,
        "sample": "if IsLoggedIn() then",
        "retail": true
      }
    ],
    "IsParentMap": [
      {
        "name": "IsParentMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function IsParentMap(originMapId, toCheckMapId)",
        "retail": true
      }
    ],
    "UpdateMinimapPins": [
      {
        "name": "UpdateMinimapPins",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function UpdateMinimapPins(force)",
        "retail": true
      }
    ],
    "GetMinimapShape": [
      {
        "name": "GetMinimapShape",
        "count": 2,
        "confidence": 0.4,
        "sample": "minimapShape = GetMinimapShape and minimap_shapes[GetMinimapShape() or \"ROUND\"]",
        "retail": true
      }
    ],
    "GetViewRadius": [
      {
        "name": "C_Minimap.GetViewRadius",
        "count": 2,
        "confidence": 0.4,
        "sample": "mapRadius = C_Minimap.GetViewRadius()",
        "retail": true
      }
    ],
    "UpdateMinimapIconPosition": [
      {
        "name": "UpdateMinimapIconPosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function UpdateMinimapIconPosition()",
        "retail": true
      }
    ],
    "UpdateMinimapZoom": [
      {
        "name": "UpdateMinimapZoom",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function UpdateMinimapZoom()",
        "retail": true
      }
    ],
    "FramePool_HideAndClearAnchors": [
      {
        "name": "FramePool_HideAndClearAnchors",
        "count": 1,
        "confidence": 0.2,
        "sample": "FramePool_HideAndClearAnchors(pinPool, pin)",
        "retail": true
      }
    ],
    "OnReleased": [
      {
        "name": "OnReleased",
        "count": 2,
        "confidence": 0.4,
        "sample": "pin:OnReleased()",
        "retail": true
      }
    ],
    "RemovePinByIcon": [
      {
        "name": "RemovePinByIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "function worldmapProvider:RemovePinByIcon(icon)",
        "retail": true
      }
    ],
    "RemovePinsByRef": [
      {
        "name": "RemovePinsByRef",
        "count": 2,
        "confidence": 0.4,
        "sample": "function worldmapProvider:RemovePinsByRef(ref)",
        "retail": true
      }
    ],
    "HandlePin": [
      {
        "name": "HandlePin",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:HandlePin(icon, data)",
        "retail": true
      }
    ],
    "SetScalingLimits": [
      {
        "name": "SetScalingLimits",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetScalingLimits(1, 1.0, 1.2)",
        "retail": true
      }
    ],
    "OnAcquired": [
      {
        "name": "OnAcquired",
        "count": 1,
        "confidence": 0.2,
        "sample": "function worldmapProviderPin:OnAcquired(icon, x, y, frameLevelType)",
        "retail": true
      }
    ],
    "UpdateMinimap": [
      {
        "name": "UpdateMinimap",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function UpdateMinimap()",
        "retail": true
      }
    ],
    "UpdateWorldMap": [
      {
        "name": "UpdateWorldMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function UpdateWorldMap()",
        "retail": true
      }
    ],
    "AddMinimapIconMap": [
      {
        "name": "AddMinimapIconMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:AddMinimapIconMap(ref, icon, uiMapID, x, y, showInParentZone, floatOnEdge)",
        "retail": true
      }
    ],
    "RemoveAllMinimapIcons": [
      {
        "name": "RemoveAllMinimapIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:RemoveAllMinimapIcons(ref)",
        "retail": true
      }
    ],
    "SetMinimapObject": [
      {
        "name": "SetMinimapObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:SetMinimapObject(minimapObject)",
        "retail": true
      }
    ],
    "AddWorldMapIconMap": [
      {
        "name": "AddWorldMapIconMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:AddWorldMapIconMap(ref, icon, uiMapID, x, y, showFlag, frameLevel)",
        "retail": true
      }
    ],
    "RemoveAllWorldMapIcons": [
      {
        "name": "RemoveAllWorldMapIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:RemoveAllWorldMapIcons(ref)",
        "retail": true
      }
    ],
    "GetVectorToIcon": [
      {
        "name": "GetVectorToIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pins:GetVectorToIcon(icon)",
        "retail": true
      }
    ],
    "C_TimerAfter": [
      {
        "name": "C_TimerAfter",
        "count": 4,
        "confidence": 0.8,
        "sample": "C_TimerAfter(ndelay, timer.callback)",
        "retail": true
      }
    ],
    "TimerFeedback": [
      {
        "name": "TimerFeedback",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- function MyAddOn:TimerFeedback()",
        "retail": true
      }
    ],
    "CancelAllTimers": [
      {
        "name": "CancelAllTimers",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceTimer:CancelAllTimers()",
        "retail": true
      }
    ],
    "TimeLeft": [
      {
        "name": "TimeLeft",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceTimer:TimeLeft(id)",
        "retail": true
      }
    ],
    "GetDuration": [
      {
        "name": "GetDuration",
        "count": 4,
        "confidence": 0.8,
        "sample": "local duration, elapsed = timer:GetDuration(), timer:GetElapsed()",
        "retail": true
      }
    ],
    "GetElapsed": [
      {
        "name": "GetElapsed",
        "count": 2,
        "confidence": 0.4,
        "sample": "local duration, elapsed = timer:GetDuration(), timer:GetElapsed()",
        "retail": true
      }
    ],
    "IterateCZNN": [
      {
        "name": "IterateCZNN",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function IterateCZNN(T)",
        "retail": true
      }
    ],
    "CacheTaxiPoints": [
      {
        "name": "CacheTaxiPoints",
        "count": 4,
        "confidence": 0.8,
        "sample": "Lib:CacheTaxiPoints()",
        "retail": true
      }
    ],
    "MergeData": [
      {
        "name": "MergeData",
        "count": 3,
        "confidence": 0.6,
        "sample": "Lib:MergeData()",
        "retail": true
      }
    ],
    "MarkKnownTaxis": [
      {
        "name": "MarkKnownTaxis",
        "count": 5,
        "confidence": 1.0,
        "sample": "Lib:MarkKnownTaxis()",
        "retail": true
      }
    ],
    "ImportTaxiDataFromGame": [
      {
        "name": "ImportTaxiDataFromGame",
        "count": 3,
        "confidence": 0.6,
        "sample": "Lib:ImportTaxiDataFromGame()",
        "retail": true
      }
    ],
    "HookMapChange": [
      {
        "name": "HookMapChange",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:HookMapChange()",
        "retail": true
      }
    ],
    "HookTaxiAborts": [
      {
        "name": "HookTaxiAborts",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:HookTaxiAborts()",
        "retail": true
      }
    ],
    "HookTakeTaxiNode": [
      {
        "name": "HookTakeTaxiNode",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:HookTakeTaxiNode()",
        "retail": true
      }
    ],
    "ImportTaxiTimesFromSV": [
      {
        "name": "ImportTaxiTimesFromSV",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:ImportTaxiTimesFromSV()",
        "retail": true
      }
    ],
    "UpdateAntoranTaxis": [
      {
        "name": "UpdateAntoranTaxis",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:UpdateAntoranTaxis()",
        "retail": true
      },
      {
        "name": "Lib.UpdateAntoranTaxis",
        "count": 1,
        "confidence": 0.2,
        "sample": "Lib.UpdateAntoranTaxis(this)",
        "retail": true
      }
    ],
    "GetTaxiNodesForMap": [
      {
        "name": "C_TaxiMap.GetTaxiNodesForMap",
        "count": 3,
        "confidence": 0.6,
        "sample": "local nodes = C_TaxiMap.GetTaxiNodesForMap(ZONE_ARGUS_ANTORAN)",
        "retail": true
      }
    ],
    "GetTaxiTripTime": [
      {
        "name": "GetTaxiTripTime",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Lib:GetTaxiTripTime(node1,node2)",
        "retail": true
      }
    ],
    "FindTaxiByNodeID": [
      {
        "name": "FindTaxiByNodeID",
        "count": 18,
        "confidence": 1.0,
        "sample": "local node1n=Lib:FindTaxiByNodeID(node1)  if not node1n then return false,false,\"npc 1 missing\" end",
        "retail": true
      }
    ],
    "AbortTaxiTiming": [
      {
        "name": "AbortTaxiTiming",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:AbortTaxiTiming()",
        "retail": true
      }
    ],
    "PlayerOnOffTaxi": [
      {
        "name": "PlayerOnOffTaxi",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:PlayerOnOffTaxi(ontaxi)",
        "retail": true
      }
    ],
    "FlashClientIcon": [
      {
        "name": "FlashClientIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV.DEV or ZGV.db.profile.flash_on_taxi_arrival then FlashClientIcon() end",
        "retail": true
      }
    ],
    "DEV_ScanCurrentTaxiNPC": [
      {
        "name": "DEV_ScanCurrentTaxiNPC",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:DEV_ScanCurrentTaxiNPC()",
        "retail": true
      }
    ],
    "DEV_HookZygorButtons": [
      {
        "name": "DEV_HookZygorButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:DEV_HookZygorButtons()",
        "retail": true
      }
    ],
    "HookTaxiMapPins_Delayed": [
      {
        "name": "HookTaxiMapPins_Delayed",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:HookTaxiMapPins_Delayed() -- need to give FlightMap time to initialize",
        "retail": true
      }
    ],
    "ScanTaxiMap": [
      {
        "name": "ScanTaxiMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:ScanTaxiMap()",
        "retail": true
      }
    ],
    "CacheRoutesAsNodeIDs": [
      {
        "name": "CacheRoutesAsNodeIDs",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:CacheRoutesAsNodeIDs()",
        "retail": true
      }
    ],
    "DEV_HighlightIncompletePins": [
      {
        "name": "DEV_HighlightIncompletePins",
        "count": 2,
        "confidence": 0.4,
        "sample": "if ZGV.DEV then Lib.HooksForFlightMapFrame:DEV_HighlightIncompletePins() end",
        "retail": true
      }
    ],
    "GetNextToastToDisplay": [
      {
        "name": "C_EventToastManager.GetNextToastToDisplay",
        "count": 1,
        "confidence": 0.2,
        "sample": "local toastInfo = C_EventToastManager.GetNextToastToDisplay();",
        "retail": true
      }
    ],
    "LearnCurrentTaxi": [
      {
        "name": "LearnCurrentTaxi",
        "count": 4,
        "confidence": 0.8,
        "sample": "Lib:LearnCurrentTaxi()",
        "retail": true
      }
    ],
    "MarkNeightboursUnknown": [
      {
        "name": "MarkNeightboursUnknown",
        "count": 2,
        "confidence": 0.4,
        "sample": "Lib:MarkNeightboursUnknown(node)",
        "retail": true
      }
    ],
    "MarkKnownByLevels": [
      {
        "name": "MarkKnownByLevels",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Lib:MarkKnownByLevels() --Only needs to be ran once after the faction's information has been made available at startup",
        "retail": true
      }
    ],
    "CacheTaxiNodeIDs": [
      {
        "name": "CacheTaxiNodeIDs",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:CacheTaxiNodeIDs()",
        "retail": true
      }
    ],
    "GetAllBlizNodesForCurrentContinent": [
      {
        "name": "GetAllBlizNodesForCurrentContinent",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Lib:GetAllBlizNodesForCurrentContinent()",
        "retail": true
      }
    ],
    "GetBlizNodesByEverything": [
      {
        "name": "GetBlizNodesByEverything",
        "count": 9,
        "confidence": 1.0,
        "sample": "function Lib:GetBlizNodesByEverything()",
        "retail": true
      }
    ],
    "ClearAllKnowledge": [
      {
        "name": "ClearAllKnowledge",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:ClearAllKnowledge(status)",
        "retail": true
      }
    ],
    "ClearContinentKnowledge": [
      {
        "name": "ClearContinentKnowledge",
        "count": 3,
        "confidence": 0.6,
        "sample": "Lib:ClearContinentKnowledge(c,\"all\",status)",
        "retail": true
      }
    ],
    "MarkContinentSeen": [
      {
        "name": "MarkContinentSeen",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:MarkContinentSeen(cont,operator)",
        "retail": true
      }
    ],
    "LearnTaxi": [
      {
        "name": "LearnTaxi",
        "count": 11,
        "confidence": 1.0,
        "sample": "if node.taxioperator==operator and node.known==nil then self:LearnTaxi(node,false) end",
        "retail": true
      }
    ],
    "ResetKnowledge": [
      {
        "name": "ResetKnowledge",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:ResetKnowledge()",
        "retail": true
      }
    ],
    "GetCurrentBlizTaxiFromMap": [
      {
        "name": "GetCurrentBlizTaxiFromMap",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Lib:GetCurrentBlizTaxiFromMap()",
        "retail": true
      }
    ],
    "GetLastSlotsData": [
      {
        "name": "GetLastSlotsData",
        "count": 6,
        "confidence": 1.0,
        "sample": "self.lastSlotsToData = self.TaxiMapAdapter:GetLastSlotsData()",
        "retail": true
      }
    ],
    "TaxiIsDirectFlight": [
      {
        "name": "TaxiIsDirectFlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "if TaxiIsDirectFlight(dest) and TaxiNodeGetType(dest)==\"REACHABLE\" then",
        "retail": true
      }
    ],
    "TaxiGetNodeSlot": [
      {
        "name": "TaxiGetNodeSlot",
        "count": 7,
        "confidence": 1.0,
        "sample": "local srcSlot = TaxiGetNodeSlot(dest, 1, true)",
        "retail": true
      }
    ],
    "GetCurrentTaxiSlot": [
      {
        "name": "GetCurrentTaxiSlot",
        "count": 4,
        "confidence": 0.8,
        "sample": "self.lastCurrentSlot = self:GetCurrentTaxiSlot()",
        "retail": true
      }
    ],
    "GetTotalFlightTimeTo": [
      {
        "name": "GetTotalFlightTimeTo",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:GetTotalFlightTimeTo(destNodeID)",
        "retail": true
      }
    ],
    "GetTaxiByTarget": [
      {
        "name": "GetTaxiByTarget",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:GetTaxiByTarget(token)",
        "retail": true
      }
    ],
    "HookPins": [
      {
        "name": "HookPins",
        "count": 4,
        "confidence": 0.8,
        "sample": "C_Timer.After(0,function() self.TaxiMapAdapter:HookPins() end)",
        "retail": true
      }
    ],
    "GetFlightPathDataProvider": [
      {
        "name": "GetFlightPathDataProvider",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- /dump LibTaxi.HooksForFlightMapFrame:GetFlightPathDataProvider().slotIndexToPin",
        "retail": true
      }
    ],
    "FlightMapFrameTimer": [
      {
        "name": "FlightMapFrameTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "--if not self.taxi_tooltip_timer then self.taxi_tooltip_timer = ZGV:ScheduleRepeatingTimer(function() self:FlightMapFrameTimer() end,0.1) end",
        "retail": true
      }
    ],
    "AnyTaxiKnown": [
      {
        "name": "AnyTaxiKnown",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Lib:AnyTaxiKnown(...)",
        "retail": true
      }
    ],
    "DEV_FindNodeIDs": [
      {
        "name": "DEV_FindNodeIDs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_FindNodeIDs(operator,continent)",
        "retail": true
      }
    ],
    "DEV_DumpFlightCosts": [
      {
        "name": "DEV_DumpFlightCosts",
        "count": 3,
        "confidence": 0.6,
        "sample": "Lib:DEV_DumpFlightCosts(continent)",
        "retail": true
      }
    ],
    "DEV_ConvertCostsToNodeID": [
      {
        "name": "DEV_ConvertCostsToNodeID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_ConvertCostsToNodeID()",
        "retail": true
      }
    ],
    "DEV_FixByDupes": [
      {
        "name": "DEV_FixByDupes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_FixByDupes()",
        "retail": true
      }
    ],
    "DumpFlightCosts": [
      {
        "name": "DumpFlightCosts",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- /run LibTaxi:DumpFlightCosts()",
        "retail": true
      }
    ],
    "DEV_DumpSavedTaxiNPCs": [
      {
        "name": "DEV_DumpSavedTaxiNPCs",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:DEV_DumpSavedTaxiNPCs()",
        "retail": true
      }
    ],
    "DEV_DumpTaxiByTarget": [
      {
        "name": "DEV_DumpTaxiByTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_DumpTaxiByTarget()  -- DEV",
        "retail": true
      }
    ],
    "DEV_TestAllFlights": [
      {
        "name": "DEV_TestAllFlights",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_TestAllFlights()",
        "retail": true
      }
    ],
    "FindTaxiByTag": [
      {
        "name": "FindTaxiByTag",
        "count": 1,
        "confidence": 0.2,
        "sample": "local tagmatch = Lib:FindTaxiByTag(Lib:GetCurrentMapContinent(),ttag)",
        "retail": true
      }
    ],
    "DEV_CheckNodeMatches": [
      {
        "name": "DEV_CheckNodeMatches",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_CheckNodeMatches()",
        "retail": true
      }
    ],
    "DeepScanTaxiMap": [
      {
        "name": "DeepScanTaxiMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- /run LibTaxi:DeepScanTaxiMap()",
        "retail": true
      }
    ],
    "DEV_DeepScanTaxiMap": [
      {
        "name": "DEV_DeepScanTaxiMap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:DEV_DeepScanTaxiMap()  -- DEV FUNCTION",
        "retail": true
      }
    ],
    "DEV_ViewTaxiMapData": [
      {
        "name": "DEV_ViewTaxiMapData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Lib:DEV_ViewTaxiMapData()  -- DEV FUNCTION (simple)",
        "retail": true
      }
    ],
    "FUNCTION": [
      {
        "name": "FUNCTION",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DEV_ViewTaxiMapData()  -- DEV FUNCTION (simple)",
        "retail": true
      }
    ],
    "NPCs": [
      {
        "name": "NPCs",
        "count": 2,
        "confidence": 0.4,
        "sample": ":SetText(\"[Z] Dump NPCs ()\")",
        "retail": true
      }
    ],
    "MergeTags__": [
      {
        "name": "MergeTags__",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:MergeTags__()  --unused?",
        "retail": true
      }
    ],
    "DumpNeighborFlights": [
      {
        "name": "DumpNeighborFlights",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DumpNeighborFlights()",
        "retail": true
      }
    ],
    "DumpAllFlights": [
      {
        "name": "DumpAllFlights",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:DumpAllFlights()",
        "retail": true
      }
    ],
    "ConvertTag": [
      {
        "name": "ConvertTag",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:ConvertTag(typ,a,b,c)",
        "retail": true
      }
    ],
    "TestCurrent": [
      {
        "name": "TestCurrent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Lib:TestCurrent()",
        "retail": true
      }
    ],
    "HookButtons": [
      {
        "name": "HookButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "if TaxiFrame then Lib.HooksForTaxiFrame:HookButtons() end",
        "retail": true
      }
    ],
    "FlightMapPinOnEnter": [
      {
        "name": "FlightMapPinOnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "pin:HookScript(\"OnEnter\",function(...) HooksForFlightMapFrame:FlightMapPinOnEnter(...) end)",
        "retail": true
      }
    ],
    "GetCurrentFlightMapPin": [
      {
        "name": "GetCurrentFlightMapPin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HooksForFlightMapFrame:GetCurrentFlightMapPin()",
        "retail": true
      }
    ],
    "ClassicTaxiButtonOnEnter": [
      {
        "name": "ClassicTaxiButtonOnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"TaxiNodeOnButtonEnter\",function(...) HooksForTaxiFrame:ClassicTaxiButtonOnEnter(...) end)",
        "retail": true
      }
    ],
    "GetCurrentTaxiMapButton": [
      {
        "name": "GetCurrentTaxiMapButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HooksForTaxiFrame:GetCurrentTaxiMapButton() --Classic",
        "retail": true
      }
    ],
    "SHL": [
      {
        "name": "SHL",
        "count": 23,
        "confidence": 1.0,
        "sample": "function SHL(x, n)",
        "retail": true
      }
    ],
    "SHR": [
      {
        "name": "SHR",
        "count": 27,
        "confidence": 1.0,
        "sample": "function SHR(x, n)",
        "retail": true
      }
    ],
    "ROL": [
      {
        "name": "ROL",
        "count": 11,
        "confidence": 1.0,
        "sample": "function ROL(x, n)",
        "retail": true
      }
    ],
    "ROR": [
      {
        "name": "ROR",
        "count": 14,
        "confidence": 1.0,
        "sample": "function ROR(x, n)",
        "retail": true
      }
    ],
    "AND": [
      {
        "name": "AND",
        "count": 71,
        "confidence": 1.0,
        "sample": "function AND(x, y)",
        "retail": true
      }
    ],
    "OR": [
      {
        "name": "OR",
        "count": 2,
        "confidence": 0.4,
        "sample": "function OR(x, y)",
        "retail": true
      }
    ],
    "XOR": [
      {
        "name": "XOR",
        "count": 147,
        "confidence": 1.0,
        "sample": "function XOR(x, y, z, t, u) -- 2..5 arguments",
        "retail": true
      }
    ],
    "XOR_BYTE": [
      {
        "name": "XOR_BYTE",
        "count": 3,
        "confidence": 0.6,
        "sample": "function XOR_BYTE(x, y)",
        "retail": true
      }
    ],
    "HEX": [
      {
        "name": "HEX",
        "count": 8,
        "confidence": 1.0,
        "sample": "function HEX(x)",
        "retail": true
      }
    ],
    "XOR32A5": [
      {
        "name": "XOR32A5",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function XOR32A5(x)",
        "retail": true
      }
    ],
    "SHAKE": [
      {
        "name": "SHAKE",
        "count": 2,
        "confidence": 0.4,
        "sample": "--    NIST FIPS 202 defines SHAKE(message,num_bits)",
        "retail": true
      }
    ],
    "HMAC": [
      {
        "name": "HMAC",
        "count": 1,
        "confidence": 0.2,
        "sample": "lib.hmac = hmac -- HMAC(hash_func, key, message) is applicable to any hash function from this module except SHAKE*",
        "retail": true
      }
    ],
    "He": [
      {
        "name": "He",
        "count": 2,
        "confidence": 0.4,
        "sample": "@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))",
        "retail": true
      }
    ],
    "Illidan": [
      {
        "name": "Illidan",
        "count": 2,
        "confidence": 0.4,
        "sample": "@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))",
        "retail": true
      }
    ],
    "Gailly": [
      {
        "name": "Gailly",
        "count": 2,
        "confidence": 0.4,
        "sample": "1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).",
        "retail": true
      }
    ],
    "Adler": [
      {
        "name": "Adler",
        "count": 2,
        "confidence": 0.4,
        "sample": "1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).",
        "retail": true
      }
    ],
    "Stormrage": [
      {
        "name": "Stormrage",
        "count": 6,
        "confidence": 1.0,
        "sample": "3. LibCompress, by jjsheets and Galmok of European Stormrage (Horde)",
        "retail": true
      }
    ],
    "Copyright": [
      {
        "name": "Copyright",
        "count": 2,
        "confidence": 0.4,
        "sample": "..\" Copyright (C) 2018-2020 Haoqian He.\"",
        "retail": true
      }
    ],
    "Adler32": [
      {
        "name": "Adler32",
        "count": 16,
        "confidence": 1.0,
        "sample": "function LibDeflate:Adler32(str)",
        "retail": true
      }
    ],
    "IsEqualAdler32": [
      {
        "name": "IsEqualAdler32",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function IsEqualAdler32(actual, expected)",
        "retail": true
      }
    ],
    "CreateDictionary": [
      {
        "name": "CreateDictionary",
        "count": 24,
        "confidence": 1.0,
        "sample": "-- local dict = LibDeflate:CreateDictionary(dict_str, 10, 187433486)",
        "retail": true
      }
    ],
    "IsValidDictionary": [
      {
        "name": "IsValidDictionary",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function IsValidDictionary(dictionary)",
        "retail": true
      }
    ],
    "IsValidArguments": [
      {
        "name": "IsValidArguments",
        "count": 18,
        "confidence": 1.0,
        "sample": "local function IsValidArguments(str,",
        "retail": true
      }
    ],
    "WriteBits": [
      {
        "name": "WriteBits",
        "count": 70,
        "confidence": 1.0,
        "sample": "1. WriteBits(code, bitlen):",
        "retail": true
      }
    ],
    "WriteString": [
      {
        "name": "WriteString",
        "count": 6,
        "confidence": 1.0,
        "sample": "2. WriteString(str):",
        "retail": true
      }
    ],
    "Flush": [
      {
        "name": "Flush",
        "count": 2,
        "confidence": 0.4,
        "sample": "3. Flush(mode):",
        "retail": true
      }
    ],
    "CreateWriter": [
      {
        "name": "CreateWriter",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function CreateWriter()",
        "retail": true
      }
    ],
    "FlushWriter": [
      {
        "name": "FlushWriter",
        "count": 14,
        "confidence": 1.0,
        "sample": "local function FlushWriter(mode)",
        "retail": true
      }
    ],
    "MinHeapPush": [
      {
        "name": "MinHeapPush",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function MinHeapPush(heap, e, heap_size)",
        "retail": true
      }
    ],
    "MinHeapPop": [
      {
        "name": "MinHeapPop",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function MinHeapPop(heap, heap_size)",
        "retail": true
      }
    ],
    "GetHuffmanCodeFromBitlen": [
      {
        "name": "GetHuffmanCodeFromBitlen",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens",
        "retail": true
      }
    ],
    "SortByFirstThenSecond": [
      {
        "name": "SortByFirstThenSecond",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SortByFirstThenSecond(a, b)",
        "retail": true
      }
    ],
    "GetHuffmanBitlenAndCode": [
      {
        "name": "GetHuffmanBitlenAndCode",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function GetHuffmanBitlenAndCode(symbol_counts, max_bitlen, max_symbol)",
        "retail": true
      }
    ],
    "RunLengthEncodeHuffmanBitlen": [
      {
        "name": "RunLengthEncodeHuffmanBitlen",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function RunLengthEncodeHuffmanBitlen(",
        "retail": true
      }
    ],
    "LoadStringToTable": [
      {
        "name": "LoadStringToTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function LoadStringToTable(str, t, start, stop, offset)",
        "retail": true
      }
    ],
    "GetBlockLZ77Result": [
      {
        "name": "GetBlockLZ77Result",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetBlockLZ77Result(level, string_table, hash_tables, block_start,",
        "retail": true
      }
    ],
    "GetBlockDynamicHuffmanHeader": [
      {
        "name": "GetBlockDynamicHuffmanHeader",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)",
        "retail": true
      }
    ],
    "GetDynamicHuffmanBlockSize": [
      {
        "name": "GetDynamicHuffmanBlockSize",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetDynamicHuffmanBlockSize(lcodes, dcodes, HCLEN",
        "retail": true
      }
    ],
    "CompressDynamicHuffmanBlock": [
      {
        "name": "CompressDynamicHuffmanBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function CompressDynamicHuffmanBlock(WriteBits, is_last_block",
        "retail": true
      }
    ],
    "GetFixedHuffmanBlockSize": [
      {
        "name": "GetFixedHuffmanBlockSize",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetFixedHuffmanBlockSize(lcodes, dcodes)",
        "retail": true
      }
    ],
    "CompressFixedHuffmanBlock": [
      {
        "name": "CompressFixedHuffmanBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function CompressFixedHuffmanBlock(WriteBits, is_last_block,",
        "retail": true
      }
    ],
    "GetStoreBlockSize": [
      {
        "name": "GetStoreBlockSize",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetStoreBlockSize(block_start, block_end, total_bitlen)",
        "retail": true
      }
    ],
    "CompressStoreBlock": [
      {
        "name": "CompressStoreBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function CompressStoreBlock(WriteBits, WriteString, is_last_block, str",
        "retail": true
      }
    ],
    "Deflate": [
      {
        "name": "Deflate",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function Deflate(configs, WriteBits, WriteString, FlushWriter, str",
        "retail": true
      }
    ],
    "CompressDeflateWithDict": [
      {
        "name": "CompressDeflateWithDict",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- @see LibDeflate:CompressDeflateWithDict(str, dictionary, configs)",
        "retail": true
      }
    ],
    "CompressDeflateInternal": [
      {
        "name": "CompressDeflateInternal",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function CompressDeflateInternal(str, dictionary, configs)",
        "retail": true
      }
    ],
    "CompressZlibInternal": [
      {
        "name": "CompressZlibInternal",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function CompressZlibInternal(str, dictionary, configs)",
        "retail": true
      }
    ],
    "CompressZlib": [
      {
        "name": "CompressZlib",
        "count": 6,
        "confidence": 1.0,
        "sample": "function LibDeflate:CompressZlib(str, configs)",
        "retail": true
      }
    ],
    "CompressZlibWithDict": [
      {
        "name": "CompressZlibWithDict",
        "count": 4,
        "confidence": 0.8,
        "sample": "function LibDeflate:CompressZlibWithDict(str, dictionary, configs)",
        "retail": true
      }
    ],
    "ReadBits": [
      {
        "name": "ReadBits",
        "count": 50,
        "confidence": 1.0,
        "sample": "1. ReadBits(bitlen)",
        "retail": true
      }
    ],
    "ReadBytes": [
      {
        "name": "ReadBytes",
        "count": 6,
        "confidence": 1.0,
        "sample": "2. ReadBytes(bytelen, buffer, buffer_size)",
        "retail": true
      }
    ],
    "Decode": [
      {
        "name": "Decode",
        "count": 27,
        "confidence": 1.0,
        "sample": "3. Decode(huffman_bitlen_count, huffman_symbol, min_bitlen)",
        "retail": true
      }
    ],
    "ReaderBitlenLeft": [
      {
        "name": "ReaderBitlenLeft",
        "count": 26,
        "confidence": 1.0,
        "sample": "4. ReaderBitlenLeft()",
        "retail": true
      }
    ],
    "SkipToByteBoundary": [
      {
        "name": "SkipToByteBoundary",
        "count": 8,
        "confidence": 1.0,
        "sample": "5. SkipToByteBoundary()",
        "retail": true
      }
    ],
    "CreateReader": [
      {
        "name": "CreateReader",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function CreateReader(input_string)",
        "retail": true
      }
    ],
    "CreateDecompressState": [
      {
        "name": "CreateDecompressState",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function CreateDecompressState(str, dictionary)",
        "retail": true
      }
    ],
    "GetHuffmanForDecode": [
      {
        "name": "GetHuffmanForDecode",
        "count": 12,
        "confidence": 1.0,
        "sample": "local function GetHuffmanForDecode(huffman_bitlens, max_symbol, max_bitlen)",
        "retail": true
      }
    ],
    "DecodeUntilEndOfBlock": [
      {
        "name": "DecodeUntilEndOfBlock",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function DecodeUntilEndOfBlock(state, lcodes_huffman_bitlens",
        "retail": true
      }
    ],
    "DecompressStoreBlock": [
      {
        "name": "DecompressStoreBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DecompressStoreBlock(state)",
        "retail": true
      }
    ],
    "DecompressFixBlock": [
      {
        "name": "DecompressFixBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DecompressFixBlock(state)",
        "retail": true
      }
    ],
    "DecompressDynamicBlock": [
      {
        "name": "DecompressDynamicBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DecompressDynamicBlock(state)",
        "retail": true
      }
    ],
    "Inflate": [
      {
        "name": "Inflate",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function Inflate(state)",
        "retail": true
      }
    ],
    "DecompressDeflateWithDict": [
      {
        "name": "DecompressDeflateWithDict",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- @see LibDeflate:DecompressDeflateWithDict(str, dictionary)",
        "retail": true
      }
    ],
    "DecompressDeflateInternal": [
      {
        "name": "DecompressDeflateInternal",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function DecompressDeflateInternal(str, dictionary)",
        "retail": true
      }
    ],
    "DecompressZlib": [
      {
        "name": "DecompressZlib",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- @see LibDeflate:DecompressZlib(str)",
        "retail": true
      }
    ],
    "DecompressZlibWithDict": [
      {
        "name": "DecompressZlibWithDict",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- @see LibDeflate:DecompressZlibWithDict(str)",
        "retail": true
      }
    ],
    "DecompressZlibInternal": [
      {
        "name": "DecompressZlibInternal",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function DecompressZlibInternal(str, dictionary)",
        "retail": true
      }
    ],
    "Encode": [
      {
        "name": "Encode",
        "count": 13,
        "confidence": 1.0,
        "sample": "-- t:Encode(str) returns the encoded string. <br>",
        "retail": true
      }
    ],
    "CreateCodec": [
      {
        "name": "CreateCodec",
        "count": 10,
        "confidence": 1.0,
        "sample": "-- local codec = LibDeflate:CreateCodec(\"\\000\\001\", \"\\002\", \"\\003\")",
        "retail": true
      }
    ],
    "GenerateWoWAddonChannelCodec": [
      {
        "name": "GenerateWoWAddonChannelCodec",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function GenerateWoWAddonChannelCodec()",
        "retail": true
      }
    ],
    "NULL": [
      {
        "name": "NULL",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- The encoded string is guaranteed to contain no NULL (\"\\000\") character.",
        "retail": true
      }
    ],
    "GenerateWoWChatChannelCodec": [
      {
        "name": "GenerateWoWChatChannelCodec",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function GenerateWoWChatChannelCodec()",
        "retail": true
      }
    ],
    "EncodeForWoWChatChannel": [
      {
        "name": "EncodeForWoWChatChannel",
        "count": 4,
        "confidence": 0.8,
        "sample": "function LibDeflate:EncodeForWoWChatChannel(str)",
        "retail": true
      }
    ],
    "DecodeForWoWChatChannel": [
      {
        "name": "DecodeForWoWChatChannel",
        "count": 4,
        "confidence": 0.8,
        "sample": "function LibDeflate:DecodeForWoWChatChannel(str)",
        "retail": true
      }
    ],
    "Galmok": [
      {
        "name": "Galmok",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- and Galmok (galmok@gmail.com) for the 6 bit encoding algorithm.",
        "retail": true
      }
    ],
    "EncodeForPrint": [
      {
        "name": "EncodeForPrint",
        "count": 5,
        "confidence": 1.0,
        "sample": "function LibDeflate:EncodeForPrint(str)",
        "retail": true
      }
    ],
    "DecodeForPrint": [
      {
        "name": "DecodeForPrint",
        "count": 5,
        "confidence": 1.0,
        "sample": "function LibDeflate:DecodeForPrint(str)",
        "retail": true
      }
    ],
    "InternalClearCache": [
      {
        "name": "InternalClearCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function InternalClearCache()",
        "retail": true
      }
    ],
    "IsEventRegistered": [
      {
        "name": "IsEventRegistered",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not grip:IsEventRegistered(\"PLAYER_LOGIN\") then",
        "retail": true
      }
    ],
    "IsMouseWheelEnabled": [
      {
        "name": "IsMouseWheelEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not InterfaceOptionsFrameAddOns:IsMouseWheelEnabled() then",
        "retail": true
      }
    ],
    "GetCurrentRegionName": [
      {
        "name": "GetCurrentRegionName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local regionKey = regionTable[GetCurrentRegion()] or GetCurrentRegionName() or \"TR\"",
        "retail": true
      }
    ],
    "ResetDB": [
      {
        "name": "ResetDB",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DBObjectLib:ResetDB(defaultProfile)",
        "retail": true
      }
    ],
    "GetNamespace": [
      {
        "name": "GetNamespace",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- local namespace = self.db:GetNamespace('namespace')",
        "retail": true
      }
    ],
    "NewLocale": [
      {
        "name": "NewLocale",
        "count": 26,
        "confidence": 1.0,
        "sample": "-- Remember the locale table being registered right now (it gets set by :NewLocale())",
        "retail": true
      }
    ],
    "Dispatch": [
      {
        "name": "Dispatch",
        "count": 32,
        "confidence": 1.0,
        "sample": "local function Dispatch(handlers, ...)",
        "retail": true
      }
    ],
    "OnUsed": [
      {
        "name": "OnUsed",
        "count": 7,
        "confidence": 1.0,
        "sample": "registry.OnUsed(registry, target, event)",
        "retail": true
      }
    ],
    "OnUnused": [
      {
        "name": "OnUnused",
        "count": 7,
        "confidence": 1.0,
        "sample": "registry.OnUnused(registry, target, eventname)",
        "retail": true
      }
    ],
    "ListProfiles": [
      {
        "name": "ListProfiles",
        "count": 2,
        "confidence": 0.4,
        "sample": "function OptionsHandlerPrototype:ListProfiles(info)",
        "retail": true
      }
    ],
    "HasNoProfiles": [
      {
        "name": "HasNoProfiles",
        "count": 1,
        "confidence": 0.2,
        "sample": "function OptionsHandlerPrototype:HasNoProfiles(info)",
        "retail": true
      }
    ],
    "Cryect": [
      {
        "name": "Cryect",
        "count": 2,
        "confidence": 0.4,
        "sample": "Author(s): Cryect (cryect@gmail.com), Xinhuan",
        "retail": true
      }
    ],
    "SetupGraphRealtimeFunctions": [
      {
        "name": "SetupGraphRealtimeFunctions",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function SetupGraphRealtimeFunctions(graph, upgrade)",
        "retail": true
      }
    ],
    "CreateGraphRealtime": [
      {
        "name": "CreateGraphRealtime",
        "count": 6,
        "confidence": 1.0,
        "sample": "function lib:CreateGraphRealtime(name, parent, relative, relativeTo, offsetX, offsetY, Width, Height)",
        "retail": true
      }
    ],
    "SetOrientation": [
      {
        "name": "SetOrientation",
        "count": 20,
        "confidence": 1.0,
        "sample": "bar:SetOrientation(\"VERTICAL\")",
        "retail": true
      }
    ],
    "SetStatusBarTexture": [
      {
        "name": "SetStatusBarTexture",
        "count": 24,
        "confidence": 1.0,
        "sample": "bar:SetStatusBarTexture(\"Interface\\\\Buttons\\\\WHITE8X8\")",
        "retail": true
      }
    ],
    "GetStatusBarTexture": [
      {
        "name": "GetStatusBarTexture",
        "count": 19,
        "confidence": 1.0,
        "sample": "bar:GetStatusBarTexture():SetHorizTile(false)",
        "retail": true
      }
    ],
    "SetHorizTile": [
      {
        "name": "SetHorizTile",
        "count": 19,
        "confidence": 1.0,
        "sample": "bar:GetStatusBarTexture():SetHorizTile(false)",
        "retail": true
      }
    ],
    "SetVertTile": [
      {
        "name": "SetVertTile",
        "count": 18,
        "confidence": 1.0,
        "sample": "bar:GetStatusBarTexture():SetVertTile(false)",
        "retail": true
      }
    ],
    "SetGradientAlpha": [
      {
        "name": "SetGradientAlpha",
        "count": 9,
        "confidence": 1.0,
        "sample": "t:SetGradientAlpha(\"VERTICAL\", 0.2, 0.0, 0.0, 0.5, 1.0, 0.0, 0.0, 1.0)",
        "retail": true
      }
    ],
    "SetupGraphLineFunctions": [
      {
        "name": "SetupGraphLineFunctions",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function SetupGraphLineFunctions(graph)",
        "retail": true
      }
    ],
    "SetupGraphScatterPlotFunctions": [
      {
        "name": "SetupGraphScatterPlotFunctions",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function SetupGraphScatterPlotFunctions(graph)",
        "retail": true
      }
    ],
    "CreateGraphScatterPlot": [
      {
        "name": "CreateGraphScatterPlot",
        "count": 4,
        "confidence": 0.8,
        "sample": "function lib:CreateGraphScatterPlot(name, parent, relative, relativeTo, offsetX, offsetY, Width, Height)",
        "retail": true
      }
    ],
    "SetupGraphPieChartFunctions": [
      {
        "name": "SetupGraphPieChartFunctions",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function SetupGraphPieChartFunctions(graph)",
        "retail": true
      }
    ],
    "AddTimeData": [
      {
        "name": "AddTimeData",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:AddTimeData(value)",
        "retail": true
      }
    ],
    "RefreshRealtimeGraph": [
      {
        "name": "RefreshRealtimeGraph",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RefreshRealtimeGraph()",
        "retail": true
      }
    ],
    "CreateGridlines": [
      {
        "name": "CreateGridlines",
        "count": 8,
        "confidence": 1.0,
        "sample": "self:CreateGridlines()",
        "retail": true
      }
    ],
    "SetFilterRadius": [
      {
        "name": "SetFilterRadius",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:SetFilterRadius(radius)",
        "retail": true
      }
    ],
    "SetAutoscaleYAxis": [
      {
        "name": "SetAutoscaleYAxis",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetAutoscaleYAxis(scale)",
        "retail": true
      }
    ],
    "SetBarColors": [
      {
        "name": "SetBarColors",
        "count": 16,
        "confidence": 1.0,
        "sample": "function GraphFunctions:SetBarColors(BotColor, TopColor)",
        "retail": true
      }
    ],
    "SetMode": [
      {
        "name": "SetMode",
        "count": 18,
        "confidence": 1.0,
        "sample": "function GraphFunctions:SetMode(mode)",
        "retail": true
      }
    ],
    "RealtimeSetColors": [
      {
        "name": "RealtimeSetColors",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RealtimeSetColors(BotColor, TopColor)",
        "retail": true
      }
    ],
    "RealtimeSetWidth": [
      {
        "name": "RealtimeSetWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RealtimeSetWidth(Width)",
        "retail": true
      }
    ],
    "OldSetWidth": [
      {
        "name": "OldSetWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:OldSetWidth(Width)",
        "retail": true
      }
    ],
    "RefreshGraph": [
      {
        "name": "RefreshGraph",
        "count": 8,
        "confidence": 1.0,
        "sample": "self:RefreshGraph()",
        "retail": true
      }
    ],
    "RealtimeSetHeight": [
      {
        "name": "RealtimeSetHeight",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RealtimeSetHeight(Height)",
        "retail": true
      }
    ],
    "OldSetHeight": [
      {
        "name": "OldSetHeight",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:OldSetHeight(Height)",
        "retail": true
      }
    ],
    "RealtimeGetValue": [
      {
        "name": "RealtimeGetValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RealtimeGetValue(Time)",
        "retail": true
      }
    ],
    "SetUpdateLimit": [
      {
        "name": "SetUpdateLimit",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetUpdateLimit(Time)",
        "retail": true
      }
    ],
    "SetDecay": [
      {
        "name": "SetDecay",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetDecay(decay)",
        "retail": true
      }
    ],
    "AddBar": [
      {
        "name": "AddBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:AddBar(value)",
        "retail": true
      }
    ],
    "SetBars": [
      {
        "name": "SetBars",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:SetBars()",
        "retail": true
      }
    ],
    "AddFilledDataSeries": [
      {
        "name": "AddFilledDataSeries",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:AddFilledDataSeries(points, color, n2)",
        "retail": true
      }
    ],
    "ResetData": [
      {
        "name": "ResetData",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:ResetData()",
        "retail": true
      }
    ],
    "SetLinearFit": [
      {
        "name": "SetLinearFit",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:SetLinearFit(fit)",
        "retail": true
      }
    ],
    "HideTextures": [
      {
        "name": "HideTextures",
        "count": 6,
        "confidence": 1.0,
        "sample": "function GraphFunctions:HideTextures()",
        "retail": true
      }
    ],
    "FindTexture": [
      {
        "name": "FindTexture",
        "count": 10,
        "confidence": 1.0,
        "sample": "function GraphFunctions:FindTexture()",
        "retail": true
      }
    ],
    "HideFontStrings": [
      {
        "name": "HideFontStrings",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:HideFontStrings()",
        "retail": true
      }
    ],
    "FindFontString": [
      {
        "name": "FindFontString",
        "count": 12,
        "confidence": 1.0,
        "sample": "function GraphFunctions:FindFontString()",
        "retail": true
      }
    ],
    "LinearRegression": [
      {
        "name": "LinearRegression",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:LinearRegression(data)",
        "retail": true
      }
    ],
    "DrawLinePie": [
      {
        "name": "DrawLinePie",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:DrawLinePie(0)",
        "retail": true
      }
    ],
    "RotateTexture": [
      {
        "name": "RotateTexture",
        "count": 8,
        "confidence": 1.0,
        "sample": "GraphFunctions:RotateTexture(t, CurAngle)",
        "retail": true
      }
    ],
    "ResetPie": [
      {
        "name": "ResetPie",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:ResetPie()",
        "retail": true
      }
    ],
    "SetSelectionFunc": [
      {
        "name": "SetSelectionFunc",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetSelectionFunc(f)",
        "retail": true
      }
    ],
    "PieChart_OnUpdate": [
      {
        "name": "PieChart_OnUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:PieChart_OnUpdate()",
        "retail": true
      }
    ],
    "SelectionFunc": [
      {
        "name": "SelectionFunc",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SelectionFunc(k)",
        "retail": true
      }
    ],
    "SetYMax": [
      {
        "name": "SetYMax",
        "count": 6,
        "confidence": 1.0,
        "sample": "function GraphFunctions:SetYMax(ymax)",
        "retail": true
      }
    ],
    "SetMinMaxY": [
      {
        "name": "SetMinMaxY",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetMinMaxY(val)",
        "retail": true
      }
    ],
    "LockXMin": [
      {
        "name": "LockXMin",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:LockXMin(state)",
        "retail": true
      }
    ],
    "LockXMax": [
      {
        "name": "LockXMax",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:LockXMax(state)",
        "retail": true
      }
    ],
    "LockYMin": [
      {
        "name": "LockYMin",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:LockYMin(state)",
        "retail": true
      }
    ],
    "LockYMax": [
      {
        "name": "LockYMax",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:LockYMax(state)",
        "retail": true
      }
    ],
    "SetGridColorSecondary": [
      {
        "name": "SetGridColorSecondary",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetGridColorSecondary(color)",
        "retail": true
      }
    ],
    "SetGridSecondaryMultiple": [
      {
        "name": "SetGridSecondaryMultiple",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:SetGridSecondaryMultiple(XAxis, YAxis)",
        "retail": true
      }
    ],
    "SetLineTexture": [
      {
        "name": "SetLineTexture",
        "count": 4,
        "confidence": 0.8,
        "sample": "function GraphFunctions:SetLineTexture(texture)",
        "retail": true
      }
    ],
    "SetBorderSize": [
      {
        "name": "SetBorderSize",
        "count": 8,
        "confidence": 1.0,
        "sample": "function GraphFunctions:SetBorderSize(border, size)",
        "retail": true
      }
    ],
    "YLabelsFormatter": [
      {
        "name": "YLabelsFormatter",
        "count": 2,
        "confidence": 0.4,
        "sample": "F:SetText(self.YLabelsFormatter(i * self.YGridInterval))",
        "retail": true
      }
    ],
    "XLabelsFormatter": [
      {
        "name": "XLabelsFormatter",
        "count": 2,
        "confidence": 0.4,
        "sample": "F:SetText(self.XLabelsFormatter(i * self.XGridInterval))",
        "retail": true
      }
    ],
    "OnUpdateGraph": [
      {
        "name": "OnUpdateGraph",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:OnUpdateGraph()",
        "retail": true
      }
    ],
    "OnUpdateGraphRealtime": [
      {
        "name": "OnUpdateGraphRealtime",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:OnUpdateGraphRealtime()",
        "retail": true
      }
    ],
    "RegisterHotspot": [
      {
        "name": "RegisterHotspot",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RegisterHotspot(x,y,text)",
        "retail": true
      }
    ],
    "RefreshLineGraph": [
      {
        "name": "RefreshLineGraph",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RefreshLineGraph()",
        "retail": true
      }
    ],
    "HideBars": [
      {
        "name": "HideBars",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:HideBars(self)",
        "retail": true
      }
    ],
    "DrawBar": [
      {
        "name": "DrawBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:DrawBar(self, LastPoint.x, LastPoint.y, TPoint.x, TPoint.y, series.Color, k1)",
        "retail": true
      }
    ],
    "RefreshScatterPlot": [
      {
        "name": "RefreshScatterPlot",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GraphFunctions:RefreshScatterPlot()",
        "retail": true
      }
    ],
    "Frame": [
      {
        "name": "Frame",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- C\t\t- Canvas Frame (for anchoring)",
        "retail": true
      }
    ],
    "DrawVLine": [
      {
        "name": "DrawVLine",
        "count": 4,
        "confidence": 0.8,
        "sample": "return self:DrawVLine(C, sx, sy, ey, w, color, layer)",
        "retail": true
      }
    ],
    "DrawHLine": [
      {
        "name": "DrawHLine",
        "count": 4,
        "confidence": 0.8,
        "sample": "return self:DrawHLine(C, sx, ex, sy, w, color, layer)",
        "retail": true
      }
    ],
    "TestGraph2Lib": [
      {
        "name": "TestGraph2Lib",
        "count": 4,
        "confidence": 0.8,
        "sample": "--To test the library do /script LibStub(\"LibGraph-2.0\"):TestGraph2Lib()",
        "retail": true
      }
    ],
    "TestRealtimeGraph": [
      {
        "name": "TestRealtimeGraph",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function TestRealtimeGraph()",
        "retail": true
      }
    ],
    "TestRealtimeGraphRaw": [
      {
        "name": "TestRealtimeGraphRaw",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function TestRealtimeGraphRaw()",
        "retail": true
      }
    ],
    "TestLineGraph": [
      {
        "name": "TestLineGraph",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function TestLineGraph()",
        "retail": true
      }
    ],
    "TestScatterPlot": [
      {
        "name": "TestScatterPlot",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function TestScatterPlot()",
        "retail": true
      }
    ],
    "TestPieChart": [
      {
        "name": "TestPieChart",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function TestPieChart()",
        "retail": true
      }
    ],
    "Stoutwrithe": [
      {
        "name": "Stoutwrithe",
        "count": 1,
        "confidence": 0.2,
        "sample": "Author: Tekkub Stoutwrithe (tekkub@gmail.com)",
        "retail": true
      }
    ],
    "CreateTooltip": [
      {
        "name": "CreateTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function lib:CreateTooltip()",
        "retail": true
      }
    ],
    "AddFontStrings": [
      {
        "name": "AddFontStrings",
        "count": 1,
        "confidence": 0.2,
        "sample": "tt:AddFontStrings(self.vars.Llines[i], self.vars.Rlines[i])",
        "retail": true
      }
    ],
    "Erase": [
      {
        "name": "Erase",
        "count": 2,
        "confidence": 0.4,
        "sample": "function lib:Erase()",
        "retail": true
      }
    ],
    "IsOwned": [
      {
        "name": "IsOwned",
        "count": 5,
        "confidence": 1.0,
        "sample": "--\tif not self.vars.tooltip:IsOwned(self.vars.tooltip) then self.vars.tooltip:SetOwner(self.vars.tooltip, \"ANCHOR_NONE\") end",
        "retail": true
      }
    ],
    "Find": [
      {
        "name": "Find",
        "count": 10,
        "confidence": 1.0,
        "sample": "function lib:Find(txt, startln, endln, ignoreleft, ignoreright, exact)",
        "retail": true
      }
    ],
    "MultiFind": [
      {
        "name": "MultiFind",
        "count": 2,
        "confidence": 0.4,
        "sample": "function lib:MultiFind(startln, endln, ignoreleft, ignoreright, t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)",
        "retail": true
      }
    ],
    "FindDeformat": [
      {
        "name": "FindDeformat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:FindDeformat(txt, startln, endln, ignoreleft, ignoreright)",
        "retail": true
      }
    ],
    "HasInstance": [
      {
        "name": "HasInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not AceLibrary or not AceLibrary:HasInstance(\"Deformat-2.0\") then",
        "retail": true
      }
    ],
    "HasAction": [
      {
        "name": "HasAction",
        "count": 1,
        "confidence": 0.2,
        "sample": "SetAction = function(id) return HasAction(id) end,",
        "retail": true
      }
    ],
    "CreateSetMethods": [
      {
        "name": "CreateSetMethods",
        "count": 2,
        "confidence": 0.4,
        "sample": "function lib:CreateSetMethods()",
        "retail": true
      }
    ],
    "Register": [
      {
        "name": "Register",
        "count": 46,
        "confidence": 1.0,
        "sample": "AceLibrary:Register(Gratuity20, \"Gratuity-2.0\", vminor+70000000)",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.Register",
        "count": 5,
        "confidence": 1.0,
        "sample": "Register() = DetailsFramework.Language.Register()",
        "retail": true
      }
    ],
    "GetLookupTable": [
      {
        "name": "GetLookupTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "local BL = B:GetLookupTable()",
        "retail": true
      }
    ],
    "DoSomething": [
      {
        "name": "DoSomething",
        "count": 9,
        "confidence": 1.0,
        "sample": "DoSomething(BL[\"Some english word that doesn't exist\"]) -- warning!",
        "retail": true
      }
    ],
    "GetBaseLookupTable": [
      {
        "name": "GetBaseLookupTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "local B_hasBase = B:GetBaseLookupTable()",
        "retail": true
      }
    ],
    "GetReverseIterator": [
      {
        "name": "GetReverseIterator",
        "count": 9,
        "confidence": 1.0,
        "sample": "* This will return only one English word that it maps to, if there are more than one to check, see :GetReverseIterator(\"word\")",
        "retail": true
      }
    ],
    "Iterate": [
      {
        "name": "Iterate",
        "count": 6,
        "confidence": 1.0,
        "sample": "for english, localized in B:Iterate() do",
        "retail": true
      }
    ],
    "SetBaseTranslations": [
      {
        "name": "SetBaseTranslations",
        "count": 3,
        "confidence": 0.6,
        "sample": "function prototype:SetBaseTranslations(base)",
        "retail": true
      }
    ],
    "SetCurrentTranslations": [
      {
        "name": "SetCurrentTranslations",
        "count": 6,
        "confidence": 1.0,
        "sample": "function prototype:SetCurrentTranslations(current)",
        "retail": true
      }
    ],
    "Thirst": [
      {
        "name": "Thirst",
        "count": 36,
        "confidence": 1.0,
        "sample": "[\"Arcane Thirst (Oculeth)\"] = \"Arcane Thirst (Oculeth)\",",
        "retail": true
      }
    ],
    "Legionfall": [
      {
        "name": "Legionfall",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Armies of Legionfall (Paragon)\"] = \"Armies of Legionfall (Paragon)\",",
        "retail": true
      }
    ],
    "Light": [
      {
        "name": "Light",
        "count": 30,
        "confidence": 1.0,
        "sample": "[\"Army of the Light (Paragon)\"] = \"Army of the Light (Paragon)\",",
        "retail": true
      }
    ],
    "Brawlpub": [
      {
        "name": "Brawlpub",
        "count": 36,
        "confidence": 1.0,
        "sample": "[\"Bizmo's Brawlpub (Season 1)\"] = \"Bizmo's Brawlpub (Season 1)\",",
        "retail": true
      }
    ],
    "Arena": [
      {
        "name": "Arena",
        "count": 59,
        "confidence": 1.0,
        "sample": "[\"Brawl'gar Arena (Season 1)\"] = \"Brawl'gar Arena (Season 1)\",",
        "retail": true
      }
    ],
    "Farondis": [
      {
        "name": "Farondis",
        "count": 17,
        "confidence": 1.0,
        "sample": "[\"Court of Farondis (Paragon)\"] = \"Court of Farondis (Paragon)\",",
        "retail": true
      }
    ],
    "Harvesters": [
      {
        "name": "Harvesters",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Court of Harvesters (Paragon)\",",
        "retail": true
      }
    ],
    "Dreamweavers": [
      {
        "name": "Dreamweavers",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Dreamweavers (Paragon)\"] = \"Dreamweavers (Paragon)\",",
        "retail": true
      }
    ],
    "Tribe": [
      {
        "name": "Tribe",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Highmountain Tribe (Paragon)\",",
        "retail": true
      }
    ],
    "Embers": [
      {
        "name": "Embers",
        "count": 14,
        "confidence": 1.0,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Order of Embers (Paragon)\",",
        "retail": true
      }
    ],
    "Admiralty": [
      {
        "name": "Admiralty",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Proudmoore Admiralty (Paragon)\"] = \"Proudmoore Admiralty (Paragon)\",",
        "retail": true
      }
    ],
    "Rajani": [
      {
        "name": "Rajani",
        "count": 18,
        "confidence": 1.0,
        "sample": "[\"Rajani (Paragon)\"] = \"Rajani (Paragon)\",",
        "retail": true
      }
    ],
    "Resistance": [
      {
        "name": "Resistance",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Rustbolt Resistance (Paragon)\"] = \"Rustbolt Resistance (Paragon)\",",
        "retail": true
      }
    ],
    "Wake": [
      {
        "name": "Wake",
        "count": 21,
        "confidence": 1.0,
        "sample": "[\"Storm's Wake (Paragon)\"] = \"Storm's Wake (Paragon)\",",
        "retail": true
      }
    ],
    "Expedition": [
      {
        "name": "Expedition",
        "count": 13,
        "confidence": 1.0,
        "sample": "[\"Talanji's Expedition (Paragon)\"] = \"Talanji's Expedition (Paragon)\",",
        "retail": true
      }
    ],
    "Ascended": [
      {
        "name": "Ascended",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Ascended (Paragon)\"] = \"The Ascended (Paragon)\",",
        "retail": true
      }
    ],
    "Honorbound": [
      {
        "name": "Honorbound",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Honorbound (Paragon)\"] = \"The Honorbound (Paragon)\",",
        "retail": true
      }
    ],
    "Nightfallen": [
      {
        "name": "Nightfallen",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Nightfallen (Paragon)\"] = \"The Nightfallen (Paragon)\",",
        "retail": true
      }
    ],
    "Army": [
      {
        "name": "Army",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Undying Army (Paragon)\"] = \"The Undying Army (Paragon)\",",
        "retail": true
      }
    ],
    "Unshackled": [
      {
        "name": "Unshackled",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Unshackled (Paragon)\"] = \"The Unshackled (Paragon)\",",
        "retail": true
      }
    ],
    "Wardens": [
      {
        "name": "Wardens",
        "count": 20,
        "confidence": 1.0,
        "sample": "[\"The Wardens (Paragon)\"] = \"The Wardens (Paragon)\",",
        "retail": true
      }
    ],
    "Hunt": [
      {
        "name": "Hunt",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"The Wild Hunt (Paragon)\",",
        "retail": true
      }
    ],
    "Seekers": [
      {
        "name": "Seekers",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Tortollan Seekers (Paragon)\"] = \"Tortollan Seekers (Paragon)\",",
        "retail": true
      }
    ],
    "Accord": [
      {
        "name": "Accord",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Uldum Accord (Paragon)\"] = \"Uldum Accord (Paragon)\",",
        "retail": true
      }
    ],
    "Valarjar": [
      {
        "name": "Valarjar",
        "count": 18,
        "confidence": 1.0,
        "sample": "[\"Valarjar (Paragon)\"] = \"Valarjar (Paragon)\",",
        "retail": true
      }
    ],
    "Voldunai": [
      {
        "name": "Voldunai",
        "count": 17,
        "confidence": 1.0,
        "sample": "[\"Voldunai (Paragon)\"] = \"Voldunai (Paragon)\",",
        "retail": true
      }
    ],
    "Ankoan": [
      {
        "name": "Ankoan",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Waveblade Ankoan (Paragon)\",",
        "retail": true
      }
    ],
    "Empire": [
      {
        "name": "Empire",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Zandalari Empire (Paragon)\"] = \"Zandalari Empire (Paragon)\"",
        "retail": true
      }
    ],
    "Durst": [
      {
        "name": "Durst",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Arcane Thirst (Oculeth)\"] = \"Arkaner Durst (Oculeth)\",",
        "retail": true
      }
    ],
    "Legionsrichter": [
      {
        "name": "Legionsrichter",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Armies of Legionfall (Paragon)\"] = \"Die Legionsrichter (huldigend)\",",
        "retail": true
      }
    ],
    "Boxbar": [
      {
        "name": "Boxbar",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Bizmo's Brawlpub (Season 1)\"] = \"Bizmos Boxbar (Saison 1)\",",
        "retail": true
      }
    ],
    "Hofstaat": [
      {
        "name": "Hofstaat",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Court of Farondis (Paragon)\"] = \"Farondis' Hofstaat (huldigend)\",",
        "retail": true
      }
    ],
    "Ernter": [
      {
        "name": "Ernter",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Hof der Ernter (huldigend)\",",
        "retail": true
      }
    ],
    "Traumweber": [
      {
        "name": "Traumweber",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Dreamweavers (Paragon)\"] = \"Die Traumweber (huldigend)\",",
        "retail": true
      }
    ],
    "Hochbergstamm": [
      {
        "name": "Hochbergstamm",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Der Hochbergstamm (huldigend)\",",
        "retail": true
      }
    ],
    "Glutorden": [
      {
        "name": "Glutorden",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Glutorden (huldigend)\",",
        "retail": true
      }
    ],
    "Rostbolzenwiderstand": [
      {
        "name": "Rostbolzenwiderstand",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Rustbolt Resistance (Paragon)\"] = \"Rostbolzenwiderstand (huldigend)\",",
        "retail": true
      }
    ],
    "Sturmwacht": [
      {
        "name": "Sturmwacht",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Storm's Wake (Paragon)\"] = \"Die Sturmwacht (huldigend)\",",
        "retail": true
      }
    ],
    "Aufgestiegenen": [
      {
        "name": "Aufgestiegenen",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Ascended (Paragon)\"] = \"Die Aufgestiegenen (huldigend)\",",
        "retail": true
      }
    ],
    "Eidgebundenen": [
      {
        "name": "Eidgebundenen",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Die Eidgebundenen (huldigend)\",",
        "retail": true
      }
    ],
    "Armee": [
      {
        "name": "Armee",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Undying Army (Paragon)\"] = \"Die Uverg\u00e4ngliche Armee (huldigend)\",",
        "retail": true
      }
    ],
    "Entfesselten": [
      {
        "name": "Entfesselten",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Unshackled (Paragon)\"] = \"Die Entfesselten (huldigend)\",",
        "retail": true
      }
    ],
    "Jagd": [
      {
        "name": "Jagd",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"Die Wilde Jagd (huldigend)\",",
        "retail": true
      }
    ],
    "Sucher": [
      {
        "name": "Sucher",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Tortollan Seekers (Paragon)\"] = \"Tortollanische Sucher (huldigend)\",",
        "retail": true
      }
    ],
    "Meeresklinge": [
      {
        "name": "Meeresklinge",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Ankoaner der Meeresklinge (huldigend)\",",
        "retail": true
      }
    ],
    "Zandalariimperium": [
      {
        "name": "Zandalariimperium",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Zandalari Empire (Paragon)\"] = \"Zandalariimperium (huldigend)\"",
        "retail": true
      }
    ],
    "Arcanes": [
      {
        "name": "Arcanes",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Arcane Thirst (Oculeth)\"] = \"Soif des Arcanes (Oculeth)\",",
        "retail": true
      }
    ],
    "Bizmo": [
      {
        "name": "Bizmo",
        "count": 15,
        "confidence": 1.0,
        "sample": "[\"Bizmo's Brawlpub (Season 1)\"] = \"Bar-Tabasse de Bizmo (saison 1)\",",
        "retail": true
      }
    ],
    "Moissonneurs": [
      {
        "name": "Moissonneurs",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Cour des Moissonneurs (parangon)\",",
        "retail": true
      }
    ],
    "Centaures": [
      {
        "name": "Centaures",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Gelkis Clan Centaur\"] = \"Centaures (Gelkis)\",",
        "retail": true
      }
    ],
    "Roc": [
      {
        "name": "Roc",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Tribu de Haut-Roc (parangon)\",",
        "retail": true
      }
    ],
    "Braises": [
      {
        "name": "Braises",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Ordre des Braises (parangon)\",",
        "retail": true
      }
    ],
    "Portvaillant": [
      {
        "name": "Portvaillant",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Proudmoore Admiralty (Paragon)\"] = \"Amiraut\u00e9 des Portvaillant (parangon)\",",
        "retail": true
      }
    ],
    "Talanji": [
      {
        "name": "Talanji",
        "count": 5,
        "confidence": 1.0,
        "sample": "[\"Talanji's Expedition (Paragon)\"] = \"Exp\u00e9dition de Talanji (parangon)\",",
        "retail": true
      }
    ],
    "Honneur": [
      {
        "name": "Honneur",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Brigade de l\u2019Honneur (parangon)\",",
        "retail": true
      }
    ],
    "Souffrenuit": [
      {
        "name": "Souffrenuit",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Nightfallen (Paragon)\"] = \"Souffrenuit (parangon)\",",
        "retail": true
      }
    ],
    "Affranchis": [
      {
        "name": "Affranchis",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Unshackled (Paragon)\"] = \"Affranchis (parangon)\",",
        "retail": true
      }
    ],
    "Gardiennes": [
      {
        "name": "Gardiennes",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wardens (Paragon)\"] = \"Gardiennes (parangon)\",",
        "retail": true
      }
    ],
    "Hallali": [
      {
        "name": "Hallali",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"L\u2019Hallali (parangon)\",",
        "retail": true
      }
    ],
    "Volduni": [
      {
        "name": "Volduni",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Voldunai (Paragon)\"] = \"Volduni (parangon)\",",
        "retail": true
      }
    ],
    "Brisant": [
      {
        "name": "Brisant",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Anko\u00efens du Brisant (parangon)\",",
        "retail": true
      }
    ],
    "Arcano": [
      {
        "name": "Arcano",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Arcane Thirst (Oculeth)\"] = \"Sedientos de lo Arcano (Oculeth)\",",
        "retail": true
      }
    ],
    "Arcana": [
      {
        "name": "Arcana",
        "count": 10,
        "confidence": 1.0,
        "sample": "[\"Arcane Thirst (Valtrois)\"] = \"Ansia Arcana (Valtrois)\",",
        "retail": true
      }
    ],
    "Argus": [
      {
        "name": "Argus",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Argussian Reach (Paragon)\"] = \"Gloria de Argus (baluarte)\",",
        "retail": true
      }
    ],
    "Luz": [
      {
        "name": "Luz",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Army of the Light (Paragon)\"] = \"Ej\u00e9rcito de la Luz (baluarte)\",",
        "retail": true
      }
    ],
    "Cosechadores": [
      {
        "name": "Cosechadores",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Corte de los Cosechadores (dechado)\",",
        "retail": true
      }
    ],
    "Alto": [
      {
        "name": "Alto",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Tribu Monte Alto (baluarte)\",",
        "retail": true
      }
    ],
    "Ascuas": [
      {
        "name": "Ascuas",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Orden de Ascuas (baluarte)\",",
        "retail": true
      }
    ],
    "Valiente": [
      {
        "name": "Valiente",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Proudmoore Admiralty (Paragon)\"] = \"Almirantazgo de la Casa Valiente (baluarte)\",",
        "retail": true
      }
    ],
    "Tormenta": [
      {
        "name": "Tormenta",
        "count": 4,
        "confidence": 0.8,
        "sample": "[\"Storm's Wake (Paragon)\"] = \"Despertar de la Tormenta (baluarte)\",",
        "retail": true
      }
    ],
    "Ascendidos": [
      {
        "name": "Ascendidos",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"The Ascended (Paragon)\"] = \"Los Ascendidos (dechado)\",",
        "retail": true
      }
    ],
    "Honor": [
      {
        "name": "Honor",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Defensores del Honor (baluarte)\",",
        "retail": true
      }
    ],
    "Noche": [
      {
        "name": "Noche",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Nightfallen (Paragon)\"] = \"Ca\u00eddos de la Noche (baluarte)\",",
        "retail": true
      }
    ],
    "Inmortal": [
      {
        "name": "Inmortal",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"The Undying Army (Paragon)\"] = \"El Ej\u00e9rcito Inmortal (dechado)\",",
        "retail": true
      }
    ],
    "Desencadenados": [
      {
        "name": "Desencadenados",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"The Unshackled (Paragon)\"] = \"Desencadenados (baluarte)\",",
        "retail": true
      }
    ],
    "Celadoras": [
      {
        "name": "Celadoras",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"The Wardens (Paragon)\"] = \"Las Celadoras (baluarte)\",",
        "retail": true
      }
    ],
    "Salvaje": [
      {
        "name": "Salvaje",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"La Cacer\u00eda Salvaje (dechado)\",",
        "retail": true
      }
    ],
    "Tortolianos": [
      {
        "name": "Tortolianos",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Tortollan Seekers (Paragon)\"] = \"Buscadores Tortolianos (baluarte)\",",
        "retail": true
      }
    ],
    "Hojamarea": [
      {
        "name": "Hojamarea",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Ankoan Hojamarea (baluarte)\",",
        "retail": true
      }
    ],
    "Zandalari": [
      {
        "name": "Zandalari",
        "count": 5,
        "confidence": 1.0,
        "sample": "[\"Zandalari Empire (Paragon)\"] = \"Imperio Zandalari (baluarte)\"",
        "retail": true
      }
    ],
    "Pernoxidado": [
      {
        "name": "Pernoxidado",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Rustbolt Resistance (Paragon)\"] = \"Resistencia de Pernoxidado (Dechado)\",",
        "retail": true
      }
    ],
    "Honorables": [
      {
        "name": "Honorables",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Los Honorables (Dechado)\",",
        "retail": true
      }
    ],
    "Fea": [
      {
        "name": "Fea",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Brawl'gar Arena (Season 1)\"] = \"Arena de Brig'ga Fea (Temporada 1)\",",
        "retail": true
      }
    ],
    "Ceifadores": [
      {
        "name": "Ceifadores",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Corte dos Ceifadores (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Montanha": [
      {
        "name": "Montanha",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Tribo Alta Montanha (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Brasas": [
      {
        "name": "Brasas",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Ordem das Brasas (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Proudmore": [
      {
        "name": "Proudmore",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Proudmoore Admiralty (Paragon)\"] = \"Almirantado Proudmore (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Tempestade": [
      {
        "name": "Tempestade",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Storm's Wake (Paragon)\"] = \"Rastro da Tempestade (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Honra": [
      {
        "name": "Honra",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Brigada da Honra (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Imorredouro": [
      {
        "name": "Imorredouro",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Undying Army (Paragon)\"] = \"O Ex\u00e9rcito Imorredouro (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Libertos": [
      {
        "name": "Libertos",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Unshackled (Paragon)\"] = \"Os Libertos (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Selvagem": [
      {
        "name": "Selvagem",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"A Ca\u00e7ada Selvagem (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Tortollanos": [
      {
        "name": "Tortollanos",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Tortollan Seekers (Paragon)\"] = \"Peregrinos Tortollanos (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Lamionda": [
      {
        "name": "Lamionda",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Ankoano Lamionda (Parag\u00e3o)\",",
        "retail": true
      }
    ],
    "Legione": [
      {
        "name": "Legione",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"7th Legion (Paragon)\"] = \"VII Legione (Eccellenza)\",",
        "retail": true
      }
    ],
    "Spezzalegione": [
      {
        "name": "Spezzalegione",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Armies of Legionfall (Paragon)\"] = \"Armata Spezzalegione (Eccellenza)\",",
        "retail": true
      }
    ],
    "Combattenti": [
      {
        "name": "Combattenti",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Brawl'gar Arena (Season 1)\"] = \"Arena dei Combattenti (Stagione 1)\",",
        "retail": true
      }
    ],
    "Mietitori": [
      {
        "name": "Mietitori",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Court of Harvesters (Paragon)\"] = \"Corte dei Mietitori (Eccellenza)\",",
        "retail": true
      }
    ],
    "Plasmasogni": [
      {
        "name": "Plasmasogni",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Dreamweavers (Paragon)\"] = \"Plasmasogni (Eccellenza)\",",
        "retail": true
      }
    ],
    "Monte": [
      {
        "name": "Monte",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmountain Tribe (Paragon)\"] = \"Trib\u00f9 Alto Monte (Eccellenza)\",",
        "retail": true
      }
    ],
    "Braci": [
      {
        "name": "Braci",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Order of Embers (Paragon)\"] = \"Ordine delle Braci (Eccellenza)\",",
        "retail": true
      }
    ],
    "Marefiero": [
      {
        "name": "Marefiero",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Proudmoore Admiralty (Paragon)\"] = \"Ammiragliato dei Marefiero (Eccellenza)\",",
        "retail": true
      }
    ],
    "Bullonaccio": [
      {
        "name": "Bullonaccio",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Rustbolt Resistance (Paragon)\"] = \"Resistenza di Bullonaccio (Eccellenza)\",",
        "retail": true
      }
    ],
    "Destatempesta": [
      {
        "name": "Destatempesta",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Storm's Wake (Paragon)\"] = \"Destatempesta (Eccellenza)\",",
        "retail": true
      }
    ],
    "Ascesi": [
      {
        "name": "Ascesi",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Ascended (Paragon)\"] = \"Gli Ascesi (Eccellenza)\",",
        "retail": true
      }
    ],
    "Onore": [
      {
        "name": "Onore",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Honorbound (Paragon)\"] = \"Brigata dell'Onore (Eccellenza)\",",
        "retail": true
      }
    ],
    "Oscuri": [
      {
        "name": "Oscuri",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Nightfallen (Paragon)\"] = \"Esuli Oscuri (Eccellenza)\",",
        "retail": true
      }
    ],
    "Imperitura": [
      {
        "name": "Imperitura",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Undying Army (Paragon)\"] = \"L'Armata Imperitura (Eccellenza)\",",
        "retail": true
      }
    ],
    "Liberti": [
      {
        "name": "Liberti",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Unshackled (Paragon)\"] = \"Liberti (Eccellenza)\",",
        "retail": true
      }
    ],
    "Custodi": [
      {
        "name": "Custodi",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wardens (Paragon)\"] = \"Custodi (Eccellenza)\",",
        "retail": true
      }
    ],
    "Selvaggia": [
      {
        "name": "Selvaggia",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wild Hunt (Paragon)\"] = \"La Caccia Selvaggia (Eccellenza)\",",
        "retail": true
      }
    ],
    "Tortolliani": [
      {
        "name": "Tortolliani",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Tortollan Seekers (Paragon)\"] = \"Cercatori Tortolliani (Eccellenza)\",",
        "retail": true
      }
    ],
    "Lamaonda": [
      {
        "name": "Lamaonda",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Waveblade Ankoan (Paragon)\"] = \"Ankoan Lamaonda (Eccellenza)\",",
        "retail": true
      }
    ],
    "EmbedLibraries": [
      {
        "name": "EmbedLibraries",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:EmbedLibraries(object, select(i,...))",
        "retail": true
      }
    ],
    "GetAddon": [
      {
        "name": "GetAddon",
        "count": 24,
        "confidence": 1.0,
        "sample": "-- MyAddon = LibStub(\"AceAddon-3.0\"):GetAddon(\"MyAddon\")",
        "retail": true
      },
      {
        "name": "Details222.WarcraftLogs.GetAddon",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.WarcraftLogs.GetAddon()",
        "retail": true
      }
    ],
    "EmbedLibrary": [
      {
        "name": "EmbedLibrary",
        "count": 8,
        "confidence": 1.0,
        "sample": "self:EmbedLibrary(addon, libname, false, 4)",
        "retail": true
      }
    ],
    "IsModuleTrue": [
      {
        "name": "IsModuleTrue",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function IsModuleTrue(self) return true end",
        "retail": true
      }
    ],
    "SetEnabledState": [
      {
        "name": "SetEnabledState",
        "count": 8,
        "confidence": 1.0,
        "sample": "module:SetEnabledState(self.defaultModuleState)",
        "retail": true
      }
    ],
    "EnableAddon": [
      {
        "name": "EnableAddon",
        "count": 10,
        "confidence": 1.0,
        "sample": "-- This internally calls AceAddon:EnableAddon(), thus dispatching a OnEnable callback",
        "retail": true
      }
    ],
    "DisableAddon": [
      {
        "name": "DisableAddon",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- This internally calls AceAddon:DisableAddon(), thus dispatching a OnDisable callback",
        "retail": true
      }
    ],
    "EnableModule": [
      {
        "name": "EnableModule",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- MyAddon:EnableModule(\"MyModule\")",
        "retail": true
      }
    ],
    "DisableModule": [
      {
        "name": "DisableModule",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- MyAddon:DisableModule(\"MyModule\")",
        "retail": true
      }
    ],
    "SetDefaultModuleLibraries": [
      {
        "name": "SetDefaultModuleLibraries",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- MyAddon:SetDefaultModuleLibraries(\"AceEvent-3.0\")",
        "retail": true
      }
    ],
    "SetDefaultModuleState": [
      {
        "name": "SetDefaultModuleState",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- MyAddon:SetDefaultModuleState(false)",
        "retail": true
      }
    ],
    "SetDefaultModulePrototype": [
      {
        "name": "SetDefaultModulePrototype",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- MyAddon:SetDefaultModulePrototype(prototype)",
        "retail": true
      }
    ],
    "IterateModules": [
      {
        "name": "IterateModules",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- for name, module in MyAddon:IterateModules() do",
        "retail": true
      }
    ],
    "IterateEmbeds": [
      {
        "name": "IterateEmbeds",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function IterateEmbeds(self) return pairs(AceAddon.embeds[self]) end",
        "retail": true
      }
    ],
    "IsModule": [
      {
        "name": "IsModule",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function IsModule(self) return false end",
        "retail": true
      }
    ],
    "InitializeAddon": [
      {
        "name": "InitializeAddon",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceAddon:InitializeAddon(addon)",
        "retail": true
      }
    ],
    "IterateAddons": [
      {
        "name": "IterateAddons",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- for name, addon in AceAddon:IterateAddons() do",
        "retail": true
      }
    ],
    "IterateAddonStatus": [
      {
        "name": "IterateAddonStatus",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- for name, status in AceAddon:IterateAddonStatus() do",
        "retail": true
      }
    ],
    "IterateEmbedsOnAddon": [
      {
        "name": "IterateEmbedsOnAddon",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- e.g. addon:IterateEmbeds() instead of :IterateEmbedsOnAddon(addon)",
        "retail": true
      }
    ],
    "IterateModulesOfAddon": [
      {
        "name": "IterateModulesOfAddon",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceAddon:IterateModulesOfAddon(addon) return pairs(addon.modules) end",
        "retail": true
      }
    ],
    "IterateLibraries": [
      {
        "name": "IterateLibraries",
        "count": 19,
        "confidence": 1.0,
        "sample": "function LibStub:IterateLibraries() return pairs(self.libs) end",
        "retail": true
      }
    ],
    "UnhookAll": [
      {
        "name": "UnhookAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "target:UnhookAll()",
        "retail": true
      }
    ],
    "IsProtected": [
      {
        "name": "IsProtected",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not secure and obj.IsProtected and obj:IsProtected() and protectedScripts[method] then",
        "retail": true
      }
    ],
    "SecureHookScript": [
      {
        "name": "SecureHookScript",
        "count": 3,
        "confidence": 0.6,
        "sample": "error(format(\"Cannot hook secure script %q; Use SecureHookScript(obj, method, [handler]) instead.\", method), 3)",
        "retail": true
      }
    ],
    "ActionButton_UpdateHotkeys": [
      {
        "name": "ActionButton_UpdateHotkeys",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- function MyAddon:ActionButton_UpdateHotkeys(button, type)",
        "retail": true
      }
    ],
    "RawHook": [
      {
        "name": "RawHook",
        "count": 3,
        "confidence": 0.6,
        "sample": "--   self:RawHook(\"ActionButton_UpdateHotkeys\", true)",
        "retail": true
      }
    ],
    "FriendsFrameOnShow": [
      {
        "name": "FriendsFrameOnShow",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- function MyAddon:FriendsFrameOnShow(frame)",
        "retail": true
      }
    ],
    "RawHookScript": [
      {
        "name": "RawHookScript",
        "count": 3,
        "confidence": 0.6,
        "sample": "--   self:RawHookScript(FriendsFrame, \"OnShow\", \"FriendsFrameOnShow\")",
        "retail": true
      }
    ],
    "Unhook": [
      {
        "name": "Unhook",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceHook:Unhook(obj, method)",
        "retail": true
      },
      {
        "name": "AceHook.Unhook",
        "count": 2,
        "confidence": 0.4,
        "sample": "AceHook.Unhook(self, key, method)",
        "retail": true
      }
    ],
    "IsHooked": [
      {
        "name": "IsHooked",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceHook:IsHooked(obj, method)",
        "retail": true
      }
    ],
    "Release": [
      {
        "name": "Release",
        "count": 7,
        "confidence": 1.0,
        "sample": "-- f:SetCallback(\"OnClose\",function(widget) AceGUI:Release(widget) end)",
        "retail": true
      }
    ],
    "SetStatusText": [
      {
        "name": "SetStatusText",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- f:SetStatusText(\"Status Bar\")",
        "retail": true
      }
    ],
    "SetLayout": [
      {
        "name": "SetLayout",
        "count": 8,
        "confidence": 1.0,
        "sample": "-- f:SetLayout(\"Flow\")",
        "retail": true
      }
    ],
    "AddChild": [
      {
        "name": "AddChild",
        "count": 9,
        "confidence": 1.0,
        "sample": "-- f:AddChild(btn)",
        "retail": true
      }
    ],
    "OnAcquire": [
      {
        "name": "OnAcquire",
        "count": 5,
        "confidence": 1.0,
        "sample": "widget:OnAcquire()",
        "retail": true
      },
      {
        "name": "ItemBase.OnAcquire",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.OnAcquire(self)",
        "retail": true
      }
    ],
    "Layout": [
      {
        "name": "Layout",
        "count": 5,
        "confidence": 1.0,
        "sample": "-- Set the default Layout (\"List\")",
        "retail": true
      }
    ],
    "OnRelease": [
      {
        "name": "OnRelease",
        "count": 6,
        "confidence": 1.0,
        "sample": "widget:OnRelease()",
        "retail": true
      },
      {
        "name": "ItemBase.OnRelease",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ItemBase.OnRelease(self)",
        "retail": true
      }
    ],
    "IsReleasing": [
      {
        "name": "IsReleasing",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceGUI:IsReleasing(widget)",
        "retail": true
      }
    ],
    "LayoutFinished": [
      {
        "name": "LayoutFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": ":LayoutFinished(width, height) - called after a layout has finished, the width and height will be the width and height of the",
        "retail": true
      }
    ],
    "SetRelativeWidth": [
      {
        "name": "SetRelativeWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "error(\":SetRelativeWidth(width): Invalid relative width.\", 2)",
        "retail": true
      }
    ],
    "SetRelativeHeight": [
      {
        "name": "SetRelativeHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "error(\":SetRelativeHeight(height): Invalid relative height.\", 2)",
        "retail": true
      }
    ],
    "LayoutOnUpdate": [
      {
        "name": "LayoutOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\tlocal function LayoutOnUpdate(this)",
        "retail": true
      }
    ],
    "PerformLayout": [
      {
        "name": "PerformLayout",
        "count": 3,
        "confidence": 0.6,
        "sample": "--\t\tthis.obj:PerformLayout()",
        "retail": true
      }
    ],
    "DoLayout": [
      {
        "name": "DoLayout",
        "count": 16,
        "confidence": 1.0,
        "sample": "self:DoLayout()",
        "retail": true
      }
    ],
    "GetLayout": [
      {
        "name": "GetLayout",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.LayoutFunc = AceGUI:GetLayout(Layout)",
        "retail": true
      }
    ],
    "FrameResize": [
      {
        "name": "FrameResize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function FrameResize(this)",
        "retail": true
      }
    ],
    "ContentResize": [
      {
        "name": "ContentResize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ContentResize(this)",
        "retail": true
      }
    ],
    "RegisterAsContainer": [
      {
        "name": "RegisterAsContainer",
        "count": 10,
        "confidence": 1.0,
        "sample": "function AceGUI:RegisterAsContainer(widget)",
        "retail": true
      }
    ],
    "RegisterAsWidget": [
      {
        "name": "RegisterAsWidget",
        "count": 20,
        "confidence": 1.0,
        "sample": "function AceGUI:RegisterAsWidget(widget)",
        "retail": true
      }
    ],
    "RegisterWidgetType": [
      {
        "name": "RegisterWidgetType",
        "count": 30,
        "confidence": 1.0,
        "sample": "function AceGUI:RegisterWidgetType(Name, Constructor, Version)",
        "retail": true
      }
    ],
    "RegisterLayout": [
      {
        "name": "RegisterLayout",
        "count": 6,
        "confidence": 1.0,
        "sample": "function AceGUI:RegisterLayout(Name, LayoutFunc)",
        "retail": true
      }
    ],
    "GetNextWidgetNum": [
      {
        "name": "GetNextWidgetNum",
        "count": 15,
        "confidence": 1.0,
        "sample": "function AceGUI:GetNextWidgetNum(widgetType)",
        "retail": true
      }
    ],
    "GetWidgetCount": [
      {
        "name": "GetWidgetCount",
        "count": 3,
        "confidence": 0.6,
        "sample": "function AceGUI:GetWidgetCount(widgetType)",
        "retail": true
      }
    ],
    "GetWidgetVersion": [
      {
        "name": "GetWidgetVersion",
        "count": 23,
        "confidence": 1.0,
        "sample": "function AceGUI:GetWidgetVersion(widgetType)",
        "retail": true
      }
    ],
    "GetCellAlign": [
      {
        "name": "GetCellAlign",
        "count": 3,
        "confidence": 0.6,
        "sample": "- align, alignH, alignV: Overall, horizontal and vertical cell alignment. See GetCellAlign() for possible values.",
        "retail": true
      }
    ],
    "PauseLayout": [
      {
        "name": "PauseLayout",
        "count": 3,
        "confidence": 0.6,
        "sample": "obj:PauseLayout()",
        "retail": true
      }
    ],
    "GetUserData": [
      {
        "name": "GetUserData",
        "count": 22,
        "confidence": 1.0,
        "sample": "local tableObj = obj:GetUserData(\"table\")",
        "retail": true
      }
    ],
    "GetCellDimension": [
      {
        "name": "GetCellDimension",
        "count": 7,
        "confidence": 1.0,
        "sample": "laneH[col] = math_max(laneH[col], childH - GetCellDimension(\"H\", laneH, colStart[child], col - 1, spaceH))",
        "retail": true
      }
    ],
    "IsFullWidth": [
      {
        "name": "IsFullWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "if child:IsFullWidth() or alignFn == \"fill\" or childH > cellH then",
        "retail": true
      }
    ],
    "IsFullHeight": [
      {
        "name": "IsFullHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "if child:IsFullHeight() or alignFn == \"fill\" then",
        "retail": true
      }
    ],
    "ResumeLayout": [
      {
        "name": "ResumeLayout",
        "count": 4,
        "confidence": 0.8,
        "sample": "obj:ResumeLayout()",
        "retail": true
      }
    ],
    "CreateChatCommand": [
      {
        "name": "CreateChatCommand",
        "count": 3,
        "confidence": 0.6,
        "sample": "cfgcmd:CreateChatCommand(cmd, appName)",
        "retail": true
      }
    ],
    "Priority": [
      {
        "name": "Priority",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- a Priority (\"BULK\", \"NORMAL\", \"ALERT\") as well as prefix for SendChatMessage.",
        "retail": true
      }
    ],
    "Ring_Link": [
      {
        "name": "Ring_Link",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function Ring_Link(self, other)  -- Move and append all contents of another ring to this ring",
        "retail": true
      }
    ],
    "DelPipe": [
      {
        "name": "DelPipe",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DelPipe(pipe)",
        "retail": true
      }
    ],
    "NewPipe": [
      {
        "name": "NewPipe",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function NewPipe()",
        "retail": true
      }
    ],
    "DelMsg": [
      {
        "name": "DelMsg",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DelMsg(msg)",
        "retail": true
      }
    ],
    "NewMsg": [
      {
        "name": "NewMsg",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function NewMsg()",
        "retail": true
      }
    ],
    "Hook_SendChatMessage": [
      {
        "name": "ChatThrottleLib.Hook_SendChatMessage",
        "count": 4,
        "confidence": 0.8,
        "sample": "return ChatThrottleLib.Hook_SendChatMessage(...)",
        "retail": true
      }
    ],
    "Hook_SendAddonMessage": [
      {
        "name": "ChatThrottleLib.Hook_SendAddonMessage",
        "count": 8,
        "confidence": 1.0,
        "sample": "return ChatThrottleLib.Hook_SendAddonMessage(...)",
        "retail": true
      }
    ],
    "Hook_SendAddonMessageLogged": [
      {
        "name": "ChatThrottleLib.Hook_SendAddonMessageLogged",
        "count": 4,
        "confidence": 0.8,
        "sample": "return ChatThrottleLib.Hook_SendAddonMessageLogged(...)",
        "retail": true
      }
    ],
    "Hook_BNSendGameData": [
      {
        "name": "ChatThrottleLib.Hook_BNSendGameData",
        "count": 4,
        "confidence": 0.8,
        "sample": "return ChatThrottleLib.Hook_BNSendGameData(...)",
        "retail": true
      }
    ],
    "UpdateAvail": [
      {
        "name": "UpdateAvail",
        "count": 8,
        "confidence": 1.0,
        "sample": "function ChatThrottleLib:UpdateAvail()",
        "retail": true
      }
    ],
    "MapToSendResult": [
      {
        "name": "MapToSendResult",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function MapToSendResult(ok, ...)",
        "retail": true
      }
    ],
    "IsThrottledSendResult": [
      {
        "name": "IsThrottledSendResult",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function IsThrottledSendResult(result)",
        "retail": true
      }
    ],
    "CallErrorHandler": [
      {
        "name": "CallErrorHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CallErrorHandler(...)",
        "retail": true
      }
    ],
    "PerformSend": [
      {
        "name": "PerformSend",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function PerformSend(sendFunction, ...)",
        "retail": true
      }
    ],
    "Despool": [
      {
        "name": "Despool",
        "count": 4,
        "confidence": 0.8,
        "sample": "function ChatThrottleLib:Despool(Prio)",
        "retail": true
      }
    ],
    "Enqueue": [
      {
        "name": "Enqueue",
        "count": 6,
        "confidence": 1.0,
        "sample": "function ChatThrottleLib:Enqueue(prioname, pipename, msg)",
        "retail": true
      }
    ],
    "ChatMessage": [
      {
        "name": "ChatMessage",
        "count": 2,
        "confidence": 0.4,
        "sample": "error('ChatThrottleLib:ChatMessage(): callbackFn: expected function, got '..type(callbackFn), 2)",
        "retail": true
      }
    ],
    "SendAddonMessageInternal": [
      {
        "name": "SendAddonMessageInternal",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function SendAddonMessageInternal(self, sendFunction, prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)",
        "retail": true
      }
    ],
    "SendAddonMessage": [
      {
        "name": "SendAddonMessage",
        "count": 16,
        "confidence": 1.0,
        "sample": "function ChatThrottleLib:SendAddonMessage(prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)",
        "retail": true
      },
      {
        "name": "C_ChatInfo.SendAddonMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_ChatInfo.SendAddonMessage(CONST_COMM_PREFIX, dataEncoded, channel)",
        "retail": true
      }
    ],
    "SendAddonMessageLogged": [
      {
        "name": "SendAddonMessageLogged",
        "count": 10,
        "confidence": 1.0,
        "sample": "function ChatThrottleLib:SendAddonMessageLogged(prio, prefix, text, chattype, target, queueName, callbackFn, callbackArg)",
        "retail": true
      }
    ],
    "BNSendGameDataReordered": [
      {
        "name": "BNSendGameDataReordered",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function BNSendGameDataReordered(prefix, text, _, gameAccountID)",
        "retail": true
      }
    ],
    "BNSendGameData": [
      {
        "name": "BNSendGameData",
        "count": 12,
        "confidence": 1.0,
        "sample": "return _G.BNSendGameData(gameAccountID, prefix, text)",
        "retail": true
      }
    ],
    "SayTimer": [
      {
        "name": "SayTimer",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SayTimer()",
        "retail": true
      }
    ],
    "RegisterAddonMessagePrefix": [
      {
        "name": "C_ChatInfo.RegisterAddonMessagePrefix",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_ChatInfo.RegisterAddonMessagePrefix(prefix)",
        "retail": true
      },
      {
        "name": "RegisterAddonMessagePrefix",
        "count": 3,
        "confidence": 0.6,
        "sample": "RegisterAddonMessagePrefix(prefix)",
        "retail": true
      }
    ],
    "OnReceiveMultipartFirst": [
      {
        "name": "OnReceiveMultipartFirst",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceComm:OnReceiveMultipartFirst(prefix, message, distribution, sender)",
        "retail": true
      }
    ],
    "OnReceiveMultipartNext": [
      {
        "name": "OnReceiveMultipartNext",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceComm:OnReceiveMultipartNext(prefix, message, distribution, sender)",
        "retail": true
      }
    ],
    "OnReceiveMultipartLast": [
      {
        "name": "OnReceiveMultipartLast",
        "count": 4,
        "confidence": 0.8,
        "sample": "function AceComm:OnReceiveMultipartLast(prefix, message, distribution, sender)",
        "retail": true
      }
    ],
    "Ambiguate": [
      {
        "name": "Ambiguate",
        "count": 34,
        "confidence": 1.0,
        "sample": "sender = Ambiguate(sender, \"none\")",
        "retail": true
      }
    ],
    "SILENTLY": [
      {
        "name": "SILENTLY",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- unknown control character, ignore SILENTLY (dont warn unnecessarily about future extensions!)",
        "retail": true
      }
    ],
    "UnregisterAllComm": [
      {
        "name": "UnregisterAllComm",
        "count": 2,
        "confidence": 0.4,
        "sample": "target:UnregisterAllComm()",
        "retail": true
      }
    ],
    "UnregisterAllMessages": [
      {
        "name": "UnregisterAllMessages",
        "count": 1,
        "confidence": 0.2,
        "sample": "target:UnregisterAllMessages()",
        "retail": true
      }
    ],
    "MyMethod": [
      {
        "name": "MyMethod",
        "count": 3,
        "confidence": 0.6,
        "sample": "function lib:MyMethod()",
        "retail": true
      }
    ],
    "Button_OnClick": [
      {
        "name": "Button_OnClick",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function Button_OnClick(frame, ...)",
        "retail": true
      }
    ],
    "Control_OnEnter": [
      {
        "name": "Control_OnEnter",
        "count": 10,
        "confidence": 1.0,
        "sample": "local function Control_OnEnter(frame)",
        "retail": true
      }
    ],
    "Control_OnLeave": [
      {
        "name": "Control_OnLeave",
        "count": 10,
        "confidence": 1.0,
        "sample": "local function Control_OnLeave(frame)",
        "retail": true
      }
    ],
    "SetDisabled": [
      {
        "name": "SetDisabled",
        "count": 22,
        "confidence": 1.0,
        "sample": "self:SetDisabled(false)",
        "retail": true
      },
      {
        "name": "ItemBase.SetDisabled",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ItemBase.SetDisabled(self, disabled)",
        "retail": true
      }
    ],
    "SetAutoWidth": [
      {
        "name": "SetAutoWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetAutoWidth(false)",
        "retail": true
      }
    ],
    "SetStyle": [
      {
        "name": "SetStyle",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetStyle()",
        "retail": true
      }
    ],
    "Constructor": [
      {
        "name": "Constructor",
        "count": 33,
        "confidence": 1.0,
        "sample": "local function Constructor()",
        "retail": true
      }
    ],
    "GetTextColor": [
      {
        "name": "GetTextColor",
        "count": 25,
        "confidence": 1.0,
        "sample": "self.label:SetTextColor(font:GetTextColor())",
        "retail": true
      }
    ],
    "ApplyStatus": [
      {
        "name": "ApplyStatus",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:ApplyStatus()",
        "retail": true
      }
    ],
    "EnableResize": [
      {
        "name": "EnableResize",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:EnableResize(true)",
        "retail": true
      }
    ],
    "SetStatusTable": [
      {
        "name": "SetStatusTable",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function SetStatusTable(self, status)",
        "retail": true
      }
    ],
    "ColorCallback": [
      {
        "name": "ColorCallback",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function ColorCallback(self, r, g, b, a, isAlpha)",
        "retail": true
      }
    ],
    "ColorSwatch_OnClick": [
      {
        "name": "ColorSwatch_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ColorSwatch_OnClick(frame)",
        "retail": true
      }
    ],
    "GetColorRGB": [
      {
        "name": "GetColorRGB",
        "count": 10,
        "confidence": 1.0,
        "sample": "local r, g, b = ColorPickerFrame:GetColorRGB()",
        "retail": true
      }
    ],
    "GetColorAlpha": [
      {
        "name": "GetColorAlpha",
        "count": 3,
        "confidence": 0.6,
        "sample": "local a = ColorPickerFrame:GetColorAlpha()",
        "retail": true
      }
    ],
    "SetupColorPickerAndShow": [
      {
        "name": "SetupColorPickerAndShow",
        "count": 2,
        "confidence": 0.4,
        "sample": "ColorPickerFrame:SetupColorPickerAndShow(info)",
        "retail": true
      }
    ],
    "SetHasAlpha": [
      {
        "name": "SetHasAlpha",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetHasAlpha(false)",
        "retail": true
      }
    ],
    "SetLabel": [
      {
        "name": "SetLabel",
        "count": 20,
        "confidence": 1.0,
        "sample": "self:SetLabel(nil)",
        "retail": true
      }
    ],
    "Frame_OnClose": [
      {
        "name": "Frame_OnClose",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Frame_OnClose(frame)",
        "retail": true
      }
    ],
    "Frame_OnMouseDown": [
      {
        "name": "Frame_OnMouseDown",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Frame_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "Title_OnMouseDown": [
      {
        "name": "Title_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Title_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "MoverSizer_OnMouseUp": [
      {
        "name": "MoverSizer_OnMouseUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MoverSizer_OnMouseUp(mover)",
        "retail": true
      }
    ],
    "SizerSE_OnMouseDown": [
      {
        "name": "SizerSE_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SizerSE_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "SizerS_OnMouseDown": [
      {
        "name": "SizerS_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SizerS_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "SizerE_OnMouseDown": [
      {
        "name": "SizerE_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SizerE_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "StatusBar_OnEnter": [
      {
        "name": "StatusBar_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function StatusBar_OnEnter(frame)",
        "retail": true
      }
    ],
    "StatusBar_OnLeave": [
      {
        "name": "StatusBar_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function StatusBar_OnLeave(frame)",
        "retail": true
      }
    ],
    "FixScrollOnUpdate": [
      {
        "name": "FixScrollOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function FixScrollOnUpdate(frame)",
        "retail": true
      }
    ],
    "FixScroll": [
      {
        "name": "FixScroll",
        "count": 5,
        "confidence": 1.0,
        "sample": "frame.obj:FixScroll()",
        "retail": true
      }
    ],
    "ScrollFrame_OnMouseWheel": [
      {
        "name": "ScrollFrame_OnMouseWheel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ScrollFrame_OnMouseWheel(frame, value)",
        "retail": true
      }
    ],
    "MoveScroll": [
      {
        "name": "MoveScroll",
        "count": 3,
        "confidence": 0.6,
        "sample": "frame.obj:MoveScroll(value)",
        "retail": true
      }
    ],
    "ScrollFrame_OnSizeChanged": [
      {
        "name": "ScrollFrame_OnSizeChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ScrollFrame_OnSizeChanged(frame)",
        "retail": true
      }
    ],
    "ScrollBar_OnScrollValueChanged": [
      {
        "name": "ScrollBar_OnScrollValueChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ScrollBar_OnScrollValueChanged(frame, value)",
        "retail": true
      }
    ],
    "SetScroll": [
      {
        "name": "SetScroll",
        "count": 6,
        "confidence": 1.0,
        "sample": "frame.obj:SetScroll(value)",
        "retail": true
      }
    ],
    "SetValueStep": [
      {
        "name": "SetValueStep",
        "count": 12,
        "confidence": 1.0,
        "sample": "scrollbar:SetValueStep(1)",
        "retail": true
      }
    ],
    "Label_OnClick": [
      {
        "name": "Label_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Label_OnClick(frame, button)",
        "retail": true
      }
    ],
    "LabelOnAcquire": [
      {
        "name": "LabelOnAcquire",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:LabelOnAcquire()",
        "retail": true
      }
    ],
    "SetHighlightTexCoord": [
      {
        "name": "SetHighlightTexCoord",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetHighlightTexCoord()",
        "retail": true
      }
    ],
    "AceGUIEditBoxInsertLink": [
      {
        "name": "AceGUIEditBoxInsertLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"ChatEdit_InsertLink\", function(...) return _G.AceGUIEditBoxInsertLink(...) end)",
        "retail": true
      }
    ],
    "Insert": [
      {
        "name": "Insert",
        "count": 19,
        "confidence": 1.0,
        "sample": "editbox:Insert(text)",
        "retail": true
      }
    ],
    "ShowButton": [
      {
        "name": "ShowButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ShowButton(self)",
        "retail": true
      }
    ],
    "SetTextInsets": [
      {
        "name": "SetTextInsets",
        "count": 16,
        "confidence": 1.0,
        "sample": "self.editbox:SetTextInsets(0, 20, 3, 3)",
        "retail": true
      }
    ],
    "HideButton": [
      {
        "name": "HideButton",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function HideButton(self)",
        "retail": true
      }
    ],
    "Frame_OnShowFocus": [
      {
        "name": "Frame_OnShowFocus",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Frame_OnShowFocus(frame)",
        "retail": true
      }
    ],
    "EditBox_OnEscapePressed": [
      {
        "name": "EditBox_OnEscapePressed",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function EditBox_OnEscapePressed(frame)",
        "retail": true
      }
    ],
    "EditBox_OnEnterPressed": [
      {
        "name": "EditBox_OnEnterPressed",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function EditBox_OnEnterPressed(frame)",
        "retail": true
      }
    ],
    "EditBox_OnReceiveDrag": [
      {
        "name": "EditBox_OnReceiveDrag",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EditBox_OnReceiveDrag(frame)",
        "retail": true
      }
    ],
    "EditBox_OnTextChanged": [
      {
        "name": "EditBox_OnTextChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EditBox_OnTextChanged(frame)",
        "retail": true
      }
    ],
    "EditBox_OnFocusGained": [
      {
        "name": "EditBox_OnFocusGained",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EditBox_OnFocusGained(frame)",
        "retail": true
      }
    ],
    "DisableButton": [
      {
        "name": "DisableButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:DisableButton(false)",
        "retail": true
      }
    ],
    "SetLabelFontObject": [
      {
        "name": "SetLabelFontObject",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:SetLabelFontObject()",
        "retail": true
      }
    ],
    "SetEditFontObject": [
      {
        "name": "SetEditFontObject",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetEditFontObject()",
        "retail": true
      }
    ],
    "SetButtonNormalFontObject": [
      {
        "name": "SetButtonNormalFontObject",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetButtonNormalFontObject()",
        "retail": true
      }
    ],
    "SetButtonHighlightFontObject": [
      {
        "name": "SetButtonHighlightFontObject",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetButtonHighlightFontObject()",
        "retail": true
      }
    ],
    "SetButtonText": [
      {
        "name": "SetButtonText",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetButtonText()",
        "retail": true
      }
    ],
    "SetButtonWidth": [
      {
        "name": "SetButtonWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetButtonWidth()",
        "retail": true
      }
    ],
    "SetButtonStatic": [
      {
        "name": "SetButtonStatic",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetButtonStatic()",
        "retail": true
      }
    ],
    "SetHiddenText": [
      {
        "name": "SetHiddenText",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetHiddenText()",
        "retail": true
      }
    ],
    "Frame_OnEnter": [
      {
        "name": "ItemBase.Frame_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.Frame_OnEnter(this)",
        "retail": true
      }
    ],
    "Frame_OnLeave": [
      {
        "name": "ItemBase.Frame_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.Frame_OnLeave(this)",
        "retail": true
      }
    ],
    "SetPullout": [
      {
        "name": "ItemBase.SetPullout",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetPullout(self, pullout)",
        "retail": true
      },
      {
        "name": "SetPullout",
        "count": 1,
        "confidence": 0.2,
        "sample": "item:SetPullout(self)",
        "retail": true
      }
    ],
    "SetOnLeave": [
      {
        "name": "ItemBase.SetOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetOnLeave(self, func)",
        "retail": true
      }
    ],
    "SetOnEnter": [
      {
        "name": "ItemBase.SetOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ItemBase.SetOnEnter(self, func)",
        "retail": true
      },
      {
        "name": "SetOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "item:SetOnEnter(OnEnter)",
        "retail": true
      }
    ],
    "Frame_OnClick": [
      {
        "name": "Frame_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Frame_OnClick(this, button)",
        "retail": true
      }
    ],
    "UpdateToggle": [
      {
        "name": "UpdateToggle",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function UpdateToggle(self)",
        "retail": true
      }
    ],
    "GetRightBorderWidth": [
      {
        "name": "GetRightBorderWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.submenu:Open(\"TOPLEFT\", self.frame, \"TOPRIGHT\", self.pullout:GetRightBorderWidth(), 0, self.frame:GetFrameLevel() + 100)",
        "retail": true
      }
    ],
    "SetMenu": [
      {
        "name": "SetMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SetMenu(self, menu)",
        "retail": true
      }
    ],
    "CloseMenu": [
      {
        "name": "CloseMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CloseMenu(self)",
        "retail": true
      }
    ],
    "OnScrollValueChanged": [
      {
        "name": "OnScrollValueChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnScrollValueChanged(this, value)",
        "retail": true
      }
    ],
    "SetItemFontObject": [
      {
        "name": "SetItemFontObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SetItemFontObject(self, font)",
        "retail": true
      }
    ],
    "IterateItems": [
      {
        "name": "IterateItems",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function IterateItems(self)",
        "retail": true
      }
    ],
    "SetHideOnLeave": [
      {
        "name": "SetHideOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SetHideOnLeave(self, val)",
        "retail": true
      }
    ],
    "SetMaxHeight": [
      {
        "name": "SetMaxHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SetMaxHeight(self, height)",
        "retail": true
      }
    ],
    "GetLeftBorderWidth": [
      {
        "name": "GetLeftBorderWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetLeftBorderWidth(self)",
        "retail": true
      }
    ],
    "SetHitRectInsets": [
      {
        "name": "SetHitRectInsets",
        "count": 7,
        "confidence": 1.0,
        "sample": "slider:SetHitRectInsets(0, 0, -10, 0)",
        "retail": true
      }
    ],
    "SetThumbTexture": [
      {
        "name": "SetThumbTexture",
        "count": 18,
        "confidence": 1.0,
        "sample": "slider:SetThumbTexture(\"Interface\\\\Buttons\\\\UI-SliderBar-Button-Vertical\")",
        "retail": true
      }
    ],
    "Button_OnEnter": [
      {
        "name": "Button_OnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Button_OnEnter(this)",
        "retail": true
      }
    ],
    "Button_OnLeave": [
      {
        "name": "Button_OnLeave",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Button_OnLeave(this)",
        "retail": true
      }
    ],
    "Dropdown_OnHide": [
      {
        "name": "Dropdown_OnHide",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dropdown_OnHide(this)",
        "retail": true
      }
    ],
    "Dropdown_TogglePullout": [
      {
        "name": "Dropdown_TogglePullout",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dropdown_TogglePullout(this)",
        "retail": true
      }
    ],
    "OnPulloutOpen": [
      {
        "name": "OnPulloutOpen",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnPulloutOpen(this)",
        "retail": true
      }
    ],
    "OnPulloutClose": [
      {
        "name": "OnPulloutClose",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnPulloutClose(this)",
        "retail": true
      }
    ],
    "ShowMultiText": [
      {
        "name": "ShowMultiText",
        "count": 5,
        "confidence": 1.0,
        "sample": "local function ShowMultiText(self)",
        "retail": true
      }
    ],
    "OnItemValueChanged": [
      {
        "name": "OnItemValueChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnItemValueChanged(this, event, checked)",
        "retail": true
      }
    ],
    "SetPulloutWidth": [
      {
        "name": "SetPulloutWidth",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SetPulloutWidth(nil)",
        "retail": true
      }
    ],
    "SetValueFontObject": [
      {
        "name": "SetValueFontObject",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:SetValueFontObject()",
        "retail": true
      }
    ],
    "GetFontObject": [
      {
        "name": "GetFontObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.label:SetTextColor(self.label:GetFontObject():GetTextColor())",
        "retail": true
      }
    ],
    "SetItemValue": [
      {
        "name": "SetItemValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function SetItemValue(self, item, value)",
        "retail": true
      }
    ],
    "SetItemDisabled": [
      {
        "name": "SetItemDisabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SetItemDisabled(self, item, disabled)",
        "retail": true
      }
    ],
    "AddListItem": [
      {
        "name": "AddListItem",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function AddListItem(self, value, text, itemType)",
        "retail": true
      }
    ],
    "AddCloseButton": [
      {
        "name": "AddCloseButton",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function AddCloseButton(self)",
        "retail": true
      }
    ],
    "GetMultiselect": [
      {
        "name": "GetMultiselect",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GetMultiselect(self)",
        "retail": true
      }
    ],
    "SelectedGroup": [
      {
        "name": "SelectedGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SelectedGroup(self, event, value)",
        "retail": true
      }
    ],
    "SetDropdownWidth": [
      {
        "name": "SetDropdownWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetDropdownWidth(200)",
        "retail": true
      }
    ],
    "AceGUIMultiLineEditBoxInsertLink": [
      {
        "name": "AceGUIMultiLineEditBoxInsertLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "hooksecurefunc(\"ChatEdit_InsertLink\", function(...) return _G.AceGUIMultiLineEditBoxInsertLink(...) end)",
        "retail": true
      }
    ],
    "OnCursorChanged": [
      {
        "name": "OnCursorChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnCursorChanged(self, _, y, _, cursorHeight)                      -- EditBox",
        "retail": true
      }
    ],
    "OnEditFocusLost": [
      {
        "name": "OnEditFocusLost",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnEditFocusLost(self)                                             -- EditBox",
        "retail": true
      }
    ],
    "GetNumLetters": [
      {
        "name": "GetNumLetters",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SetCursorPosition(self:GetNumLetters())",
        "retail": true
      }
    ],
    "OnReceiveDrag": [
      {
        "name": "OnReceiveDrag",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnReceiveDrag(self)                                               -- EditBox / ScrollFrame",
        "retail": true
      }
    ],
    "OnTextChanged": [
      {
        "name": "OnTextChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnTextChanged(self, userInput)                                    -- EditBox",
        "retail": true
      }
    ],
    "OnTextSet": [
      {
        "name": "OnTextSet",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnTextSet(self)                                                   -- EditBox",
        "retail": true
      }
    ],
    "OnVerticalScroll": [
      {
        "name": "OnVerticalScroll",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function OnVerticalScroll(self, offset)                                    -- ScrollFrame",
        "retail": true
      }
    ],
    "OnScrollRangeChanged": [
      {
        "name": "OnScrollRangeChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnScrollRangeChanged(self, xrange, yrange)",
        "retail": true
      }
    ],
    "OnShowFocus": [
      {
        "name": "OnShowFocus",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnShowFocus(frame)",
        "retail": true
      }
    ],
    "OnEditFocusGained": [
      {
        "name": "OnEditFocusGained",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnEditFocusGained(frame)",
        "retail": true
      }
    ],
    "SetNumLines": [
      {
        "name": "SetNumLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetNumLines()",
        "retail": true
      }
    ],
    "GetNormalFontObject": [
      {
        "name": "GetNormalFontObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self.button:GetNormalFontObject():SetTextColor(unpack(SkinData(\"AceGUIButtonTextColor\")))",
        "retail": true
      }
    ],
    "GetHighlightFontObject": [
      {
        "name": "GetHighlightFontObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self.button:GetHighlightFontObject():SetTextColor(unpack(SkinData(\"AceGUIButtonTextColor\")))",
        "retail": true
      }
    ],
    "GetDisabledFontObject": [
      {
        "name": "GetDisabledFontObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self.button:GetDisabledFontObject():SetTextColor(unpack(SkinData(\"AceGUIButtonTextColorDisabled\")))",
        "retail": true
      }
    ],
    "SetCountInvisibleLetters": [
      {
        "name": "SetCountInvisibleLetters",
        "count": 1,
        "confidence": 0.2,
        "sample": "editBox:SetCountInvisibleLetters(false)",
        "retail": true
      }
    ],
    "AlignImage": [
      {
        "name": "AlignImage",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function AlignImage(self)",
        "retail": true
      }
    ],
    "CheckBox_OnMouseDown": [
      {
        "name": "CheckBox_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CheckBox_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "CheckBox_OnMouseUp": [
      {
        "name": "CheckBox_OnMouseUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CheckBox_OnMouseUp(frame)",
        "retail": true
      }
    ],
    "ToggleChecked": [
      {
        "name": "ToggleChecked",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ToggleChecked()",
        "retail": true
      }
    ],
    "SetType": [
      {
        "name": "SetType",
        "count": 37,
        "confidence": 1.0,
        "sample": "self:SetType()",
        "retail": true
      }
    ],
    "SetTriState": [
      {
        "name": "SetTriState",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SetTriState(nil)",
        "retail": true
      }
    ],
    "SetDescription": [
      {
        "name": "SetDescription",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetDescription(nil)",
        "retail": true
      }
    ],
    "SetDesaturation": [
      {
        "name": "SetDesaturation",
        "count": 12,
        "confidence": 1.0,
        "sample": "SetDesaturation(self.check, true)",
        "retail": true
      }
    ],
    "SetDescriptionFontObject": [
      {
        "name": "SetDescriptionFontObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetDescriptionFontObject(self.descFont)",
        "retail": true
      }
    ],
    "GetButtonUniqueValue": [
      {
        "name": "GetButtonUniqueValue",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function GetButtonUniqueValue(line)",
        "retail": true
      }
    ],
    "ShouldDisplayLevel": [
      {
        "name": "ShouldDisplayLevel",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function ShouldDisplayLevel(tree)",
        "retail": true
      }
    ],
    "FirstFrameUpdate": [
      {
        "name": "FirstFrameUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function FirstFrameUpdate(frame)",
        "retail": true
      }
    ],
    "RefreshTree": [
      {
        "name": "RefreshTree",
        "count": 9,
        "confidence": 1.0,
        "sample": "self:RefreshTree(nil, true)",
        "retail": true
      }
    ],
    "BuildUniqueValue": [
      {
        "name": "BuildUniqueValue",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function BuildUniqueValue(...)",
        "retail": true
      }
    ],
    "Expand_OnClick": [
      {
        "name": "Expand_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Expand_OnClick(frame)",
        "retail": true
      }
    ],
    "Button_OnDoubleClick": [
      {
        "name": "Button_OnDoubleClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Button_OnDoubleClick(button)",
        "retail": true
      }
    ],
    "Tree_OnSizeChanged": [
      {
        "name": "Tree_OnSizeChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tree_OnSizeChanged(frame)",
        "retail": true
      }
    ],
    "Tree_OnMouseWheel": [
      {
        "name": "Tree_OnMouseWheel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tree_OnMouseWheel(frame, delta)",
        "retail": true
      }
    ],
    "GetMinMaxValues": [
      {
        "name": "GetMinMaxValues",
        "count": 23,
        "confidence": 1.0,
        "sample": "local min, max = scrollbar:GetMinMaxValues()",
        "retail": true
      }
    ],
    "Dragger_OnLeave": [
      {
        "name": "Dragger_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dragger_OnLeave(frame)",
        "retail": true
      }
    ],
    "Dragger_OnEnter": [
      {
        "name": "Dragger_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dragger_OnEnter(frame)",
        "retail": true
      }
    ],
    "Dragger_OnMouseDown": [
      {
        "name": "Dragger_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dragger_OnMouseDown(frame)",
        "retail": true
      }
    ],
    "Dragger_OnMouseUp": [
      {
        "name": "Dragger_OnMouseUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Dragger_OnMouseUp(frame)",
        "retail": true
      }
    ],
    "SetTreeWidth": [
      {
        "name": "SetTreeWidth",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetTreeWidth(DEFAULT_TREE_WIDTH, DEFAULT_TREE_SIZABLE)",
        "retail": true
      }
    ],
    "EnableButtonTooltips": [
      {
        "name": "EnableButtonTooltips",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:EnableButtonTooltips(true)",
        "retail": true
      }
    ],
    "BuildLevel": [
      {
        "name": "BuildLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:BuildLevel(v.children, level+1, line)",
        "retail": true
      }
    ],
    "ShowScroll": [
      {
        "name": "ShowScroll",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:ShowScroll(false)",
        "retail": true
      }
    ],
    "Select": [
      {
        "name": "Select",
        "count": 95,
        "confidence": 1.0,
        "sample": "self:Select(BuildUniqueValue(...), ...)",
        "retail": true
      }
    ],
    "UpdateLabels": [
      {
        "name": "UpdateLabels",
        "count": 11,
        "confidence": 1.0,
        "sample": "local function UpdateLabels(self)",
        "retail": true
      }
    ],
    "SetFormattedText": [
      {
        "name": "SetFormattedText",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.lowtext:SetFormattedText(\"%s%%\", (min_value * 100))",
        "retail": true
      }
    ],
    "Slider_OnValueChanged": [
      {
        "name": "Slider_OnValueChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Slider_OnValueChanged(frame, newvalue)",
        "retail": true
      }
    ],
    "Slider_OnMouseUp": [
      {
        "name": "Slider_OnMouseUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Slider_OnMouseUp(frame)",
        "retail": true
      }
    ],
    "Slider_OnMouseWheel": [
      {
        "name": "Slider_OnMouseWheel",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function Slider_OnMouseWheel(frame, v)",
        "retail": true
      }
    ],
    "EditBox_OnEnter": [
      {
        "name": "EditBox_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EditBox_OnEnter(frame)",
        "retail": true
      }
    ],
    "EditBox_OnLeave": [
      {
        "name": "EditBox_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function EditBox_OnLeave(frame)",
        "retail": true
      }
    ],
    "SetIsPercent": [
      {
        "name": "SetIsPercent",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetIsPercent(nil)",
        "retail": true
      }
    ],
    "SetSliderValues": [
      {
        "name": "SetSliderValues",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SetSliderValues(0,100,1)",
        "retail": true
      }
    ],
    "SetRangeFontObject": [
      {
        "name": "SetRangeFontObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetRangeFontObject()",
        "retail": true
      }
    ],
    "SetImageSize": [
      {
        "name": "SetImageSize",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SetImageSize(64, 64)",
        "retail": true
      }
    ],
    "SetFullWidth": [
      {
        "name": "SetFullWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetFullWidth()",
        "retail": true
      }
    ],
    "PanelTemplates_SetDisabledTabState": [
      {
        "name": "PanelTemplates_SetDisabledTabState",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function PanelTemplates_SetDisabledTabState(tab)",
        "retail": true
      }
    ],
    "UpdateTabLook": [
      {
        "name": "UpdateTabLook",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function UpdateTabLook(frame)",
        "retail": true
      }
    ],
    "Tab_SetText": [
      {
        "name": "Tab_SetText",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_SetText(frame, text)",
        "retail": true
      }
    ],
    "Tab_SetSelected": [
      {
        "name": "Tab_SetSelected",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_SetSelected(frame, selected)",
        "retail": true
      }
    ],
    "Tab_SetDisabled": [
      {
        "name": "Tab_SetDisabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_SetDisabled(frame, disabled)",
        "retail": true
      }
    ],
    "BuildTabsOnUpdate": [
      {
        "name": "BuildTabsOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function BuildTabsOnUpdate(frame)",
        "retail": true
      }
    ],
    "BuildTabs": [
      {
        "name": "BuildTabs",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:BuildTabs()",
        "retail": true
      }
    ],
    "Tab_OnClick": [
      {
        "name": "Tab_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_OnClick(frame)",
        "retail": true
      }
    ],
    "SelectTab": [
      {
        "name": "SelectTab",
        "count": 2,
        "confidence": 0.4,
        "sample": "frame.obj:SelectTab(frame.value)",
        "retail": true
      }
    ],
    "Tab_OnEnter": [
      {
        "name": "Tab_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_OnEnter(frame)",
        "retail": true
      }
    ],
    "Tab_OnLeave": [
      {
        "name": "Tab_OnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_OnLeave(frame)",
        "retail": true
      }
    ],
    "Tab_OnShow": [
      {
        "name": "Tab_OnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Tab_OnShow(frame)",
        "retail": true
      }
    ],
    "GetTextWidth": [
      {
        "name": "GetTextWidth",
        "count": 2,
        "confidence": 0.4,
        "sample": "_G[frame:GetName()..\"HighlightTexture\"]:SetWidth(frame:GetTextWidth() + 30)",
        "retail": true
      }
    ],
    "SetFontString": [
      {
        "name": "SetFontString",
        "count": 2,
        "confidence": 0.4,
        "sample": "tab:SetFontString(tab.Text)",
        "retail": true
      }
    ],
    "Keybinding_OnClick": [
      {
        "name": "Keybinding_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Keybinding_OnClick(frame, button)",
        "retail": true
      }
    ],
    "EnableKeyboard": [
      {
        "name": "EnableKeyboard",
        "count": 6,
        "confidence": 1.0,
        "sample": "frame:EnableKeyboard(false)",
        "retail": true
      }
    ],
    "Keybinding_OnKeyDown": [
      {
        "name": "Keybinding_OnKeyDown",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function Keybinding_OnKeyDown(frame, key)",
        "retail": true
      }
    ],
    "SetKey": [
      {
        "name": "SetKey",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetKey(keyPressed)",
        "retail": true
      }
    ],
    "Keybinding_OnMouseDown": [
      {
        "name": "Keybinding_OnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Keybinding_OnMouseDown(frame, button)",
        "retail": true
      }
    ],
    "Keybinding_OnMouseWheel": [
      {
        "name": "Keybinding_OnMouseWheel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Keybinding_OnMouseWheel(frame, direction)",
        "retail": true
      }
    ],
    "FindValueIndex": [
      {
        "name": "FindValueIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "local index = self:FindValueIndex(value)",
        "retail": true
      }
    ],
    "CreateLabel": [
      {
        "name": "CreateLabel",
        "count": 190,
        "confidence": 1.0,
        "sample": "local label = self.labels[index] or self:CreateLabel()",
        "retail": true
      }
    ],
    "SetObeyStepOnDrag": [
      {
        "name": "SetObeyStepOnDrag",
        "count": 3,
        "confidence": 0.6,
        "sample": "slider:SetObeyStepOnDrag(true)",
        "retail": true
      }
    ],
    "UpdateImageAnchor": [
      {
        "name": "UpdateImageAnchor",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function UpdateImageAnchor(self)",
        "retail": true
      }
    ],
    "IterateOptionsTables": [
      {
        "name": "IterateOptionsTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- :IterateOptionsTables() (and :GetOptionsTable() if only given one argument) return a function reference that the requesting config handling addon must call with valid \"uiType\", \"uiName\".",
        "retail": true
      }
    ],
    "ValidateOptionsTable": [
      {
        "name": "ValidateOptionsTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "error(MAJOR..\":ValidateOptionsTable(): \"..tconcat(t,\".\")..msg, errlvl+2)",
        "retail": true
      }
    ],
    "GetSubOption": [
      {
        "name": "GetSubOption",
        "count": 9,
        "confidence": 1.0,
        "sample": "local function GetSubOption(group, key)",
        "retail": true
      }
    ],
    "GetOptionsMemberValue": [
      {
        "name": "GetOptionsMemberValue",
        "count": 59,
        "confidence": 1.0,
        "sample": "local function GetOptionsMemberValue(membername, option, options, path, appName, ...)",
        "retail": true
      }
    ],
    "CallOptionsFunction": [
      {
        "name": "CallOptionsFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CallOptionsFunction(funcname ,option, options, path, appName, ...)",
        "retail": true
      }
    ],
    "BuildSortedOptionsTable": [
      {
        "name": "BuildSortedOptionsTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function BuildSortedOptionsTable(group, keySort, opts, options, path, appName)",
        "retail": true
      }
    ],
    "DelTree": [
      {
        "name": "DelTree",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function DelTree(tree)",
        "retail": true
      }
    ],
    "CleanUserData": [
      {
        "name": "CleanUserData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function CleanUserData(widget, event)",
        "retail": true
      }
    ],
    "GetUserDataTable": [
      {
        "name": "GetUserDataTable",
        "count": 11,
        "confidence": 1.0,
        "sample": "local user = widget:GetUserDataTable()",
        "retail": true
      }
    ],
    "SetTree": [
      {
        "name": "SetTree",
        "count": 2,
        "confidence": 0.4,
        "sample": "widget:SetTree(nil)",
        "retail": true
      }
    ],
    "SetTabs": [
      {
        "name": "SetTabs",
        "count": 2,
        "confidence": 0.4,
        "sample": "widget:SetTabs(nil)",
        "retail": true
      }
    ],
    "SetGroupList": [
      {
        "name": "SetGroupList",
        "count": 2,
        "confidence": 0.4,
        "sample": "widget:SetGroupList(nil)",
        "retail": true
      }
    ],
    "GetStatusTable": [
      {
        "name": "GetStatusTable",
        "count": 10,
        "confidence": 1.0,
        "sample": "function AceConfigDialog:GetStatusTable(appName, path)",
        "retail": true
      }
    ],
    "SelectGroup": [
      {
        "name": "SelectGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConfigDialog:SelectGroup(appName, ...)",
        "retail": true
      }
    ],
    "OptionOnMouseOver": [
      {
        "name": "OptionOnMouseOver",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OptionOnMouseOver(widget, event)",
        "retail": true
      }
    ],
    "OptionOnMouseLeave": [
      {
        "name": "OptionOnMouseLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OptionOnMouseLeave(widget, event)",
        "retail": true
      }
    ],
    "GetFuncName": [
      {
        "name": "GetFuncName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetFuncName(option)",
        "retail": true
      }
    ],
    "SetPropagateKeyboardInput": [
      {
        "name": "SetPropagateKeyboardInput",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetPropagateKeyboardInput(false)",
        "retail": true
      }
    ],
    "SetFixedFrameStrata": [
      {
        "name": "SetFixedFrameStrata",
        "count": 1,
        "confidence": 0.2,
        "sample": "frame:SetFixedFrameStrata(true)",
        "retail": true
      }
    ],
    "SetFixedFrameLevel": [
      {
        "name": "SetFixedFrameLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "frame:SetFixedFrameLevel(true)",
        "retail": true
      }
    ],
    "ActivateControl": [
      {
        "name": "ActivateControl",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function ActivateControl(widget, event, ...)",
        "retail": true
      }
    ],
    "ActivateSlider": [
      {
        "name": "ActivateSlider",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ActivateSlider(widget, event, value)",
        "retail": true
      }
    ],
    "ActivateSliderLabeled": [
      {
        "name": "ActivateSliderLabeled",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ActivateSliderLabeled(widget, event, value)",
        "retail": true
      }
    ],
    "ActivateMultiControl": [
      {
        "name": "ActivateMultiControl",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ActivateMultiControl(widget, event, ...)",
        "retail": true
      }
    ],
    "MultiControlOnClosed": [
      {
        "name": "MultiControlOnClosed",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function MultiControlOnClosed(widget, event, ...)",
        "retail": true
      }
    ],
    "FrameOnClose": [
      {
        "name": "FrameOnClose",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function FrameOnClose(widget, event)",
        "retail": true
      }
    ],
    "CheckOptionHidden": [
      {
        "name": "CheckOptionHidden",
        "count": 9,
        "confidence": 1.0,
        "sample": "local function CheckOptionHidden(option, options, path, appName)",
        "retail": true
      }
    ],
    "CheckOptionDisabled": [
      {
        "name": "CheckOptionDisabled",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function CheckOptionDisabled(option, options, path, appName)",
        "retail": true
      }
    ],
    "BuildSelect": [
      {
        "name": "BuildSelect",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function BuildSelect(group, options, path, appName)",
        "retail": true
      }
    ],
    "BuildSubGroups": [
      {
        "name": "BuildSubGroups",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function BuildSubGroups(group, tree, options, path, appName)",
        "retail": true
      }
    ],
    "BuildGroups": [
      {
        "name": "BuildGroups",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function BuildGroups(group, options, path, appName, recurse)",
        "retail": true
      }
    ],
    "InjectInfo": [
      {
        "name": "InjectInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function InjectInfo(control, options, option, path, rootframe, appName)",
        "retail": true
      }
    ],
    "CreateControl": [
      {
        "name": "CreateControl",
        "count": 10,
        "confidence": 1.0,
        "sample": "local function CreateControl(userControlType, fallbackControlType)",
        "retail": true
      }
    ],
    "FeedOptions": [
      {
        "name": "FeedOptions",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function FeedOptions(appName, options,container,rootframe,path,group,inline)",
        "retail": true
      }
    ],
    "SetButtonHeight": [
      {
        "name": "SetButtonHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "control:SetButtonHeight(v.buttonheight)",
        "retail": true
      }
    ],
    "SetAutoselect": [
      {
        "name": "SetAutoselect",
        "count": 1,
        "confidence": 0.2,
        "sample": "control:SetAutoselect(v.autoselect)",
        "retail": true
      }
    ],
    "SetPlusMinus": [
      {
        "name": "SetPlusMinus",
        "count": 1,
        "confidence": 0.2,
        "sample": "control:SetPlusMinus(v.plusminus)  --sinus@zygor",
        "retail": true
      }
    ],
    "SetIndent": [
      {
        "name": "SetIndent",
        "count": 1,
        "confidence": 0.2,
        "sample": "control:SetIndent(v.indent or 0)",
        "retail": true
      }
    ],
    "BuildPath": [
      {
        "name": "BuildPath",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function BuildPath(path, ...)",
        "retail": true
      }
    ],
    "TreeOnButtonEnter": [
      {
        "name": "TreeOnButtonEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function TreeOnButtonEnter(widget, event, uniquevalue, button)",
        "retail": true
      }
    ],
    "TreeOnButtonLeave": [
      {
        "name": "TreeOnButtonLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function TreeOnButtonLeave(widget, event, value, button)",
        "retail": true
      }
    ],
    "GroupExists": [
      {
        "name": "GroupExists",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GroupExists(appName, options, path, uniquevalue)",
        "retail": true
      }
    ],
    "GroupSelected": [
      {
        "name": "GroupSelected",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function GroupSelected(widget, event, uniquevalue)",
        "retail": true
      }
    ],
    "ReleaseChildren": [
      {
        "name": "ReleaseChildren",
        "count": 4,
        "confidence": 0.8,
        "sample": "widget:ReleaseChildren()",
        "retail": true
      }
    ],
    "FeedGroup": [
      {
        "name": "FeedGroup",
        "count": 3,
        "confidence": 0.6,
        "sample": "AceConfigDialog:FeedGroup(user.appName,options,widget,rootframe,feedpath)",
        "retail": true
      }
    ],
    "SetGroup": [
      {
        "name": "SetGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "selectGroup:SetGroup((GroupExists(appName, options, path,status.groups.selected) and status.groups.selected) or firstgroup)",
        "retail": true
      }
    ],
    "SelectByValue": [
      {
        "name": "SelectByValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "tree:SelectByValue((GroupExists(appName, options, path,status.groups.selected) and status.groups.selected) or entry.value)",
        "retail": true
      }
    ],
    "RefreshOnUpdate": [
      {
        "name": "RefreshOnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshOnUpdate(this)",
        "retail": true
      }
    ],
    "CloseAll": [
      {
        "name": "CloseAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AceConfigDialog:CloseAll()",
        "retail": true
      }
    ],
    "ConfigTableChanged": [
      {
        "name": "ConfigTableChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConfigDialog:ConfigTableChanged(event, appName)",
        "retail": true
      }
    ],
    "SetTitleFontObject": [
      {
        "name": "SetTitleFontObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "f:SetTitleFontObject(font)",
        "retail": true
      }
    ],
    "FeedToBlizPanel": [
      {
        "name": "FeedToBlizPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function FeedToBlizPanel(widget, event)",
        "retail": true
      }
    ],
    "ClearBlizPanel": [
      {
        "name": "ClearBlizPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function ClearBlizPanel(widget, event)",
        "retail": true
      }
    ],
    "OpenToCategory": [
      {
        "name": "Settings.OpenToCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- @return The category ID to pass to Settings.OpenToCategory (or InterfaceOptionsFrame_OpenToCategory)",
        "retail": true
      },
      {
        "name": "OpenToCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "--SettingsPanel:OpenToCategory(self.OptionsFrame1.name)",
        "retail": true
      }
    ],
    "GetCategory": [
      {
        "name": "Settings.GetCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "local category = Settings.GetCategory(parent)",
        "retail": true
      },
      {
        "name": "GetCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "local category = SettingsPanel:GetCategoryList():GetCategory(self.OptionsFrame1.name)",
        "retail": true
      }
    ],
    "RegisterCanvasLayoutSubcategory": [
      {
        "name": "Settings.RegisterCanvasLayoutSubcategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "local subcategory = Settings.RegisterCanvasLayoutSubcategory(category, group.frame, categoryName)",
        "retail": true
      }
    ],
    "RegisterCanvasLayoutCategory": [
      {
        "name": "Settings.RegisterCanvasLayoutCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "local category = Settings.RegisterCanvasLayoutCategory(group.frame, categoryName)",
        "retail": true
      }
    ],
    "RegisterAddOnCategory": [
      {
        "name": "Settings.RegisterAddOnCategory",
        "count": 1,
        "confidence": 0.2,
        "sample": "Settings.RegisterAddOnCategory(category)",
        "retail": true
      }
    ],
    "InterfaceOptions_AddCategory": [
      {
        "name": "InterfaceOptions_AddCategory",
        "count": 2,
        "confidence": 0.4,
        "sample": "InterfaceOptions_AddCategory(group.frame)",
        "retail": true
      }
    ],
    "ChatCommand": [
      {
        "name": "ChatCommand",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- function MyAddon:ChatCommand(input)",
        "retail": true
      }
    ],
    "GetChatCommandOptions": [
      {
        "name": "GetChatCommandOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AceConfigCmd:GetChatCommandOptions(slashcmd)",
        "retail": true
      }
    ],
    "Fleet": [
      {
        "name": "Fleet",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Brashtide Attack Fleet (Force Outdoors)\"] = \"Flotte d'attaque des Fiers-\u00e0-flot (Force \u00e0 l'ext\u00e9rieur)\",",
        "retail": true
      }
    ],
    "Pit": [
      {
        "name": "Pit",
        "count": 16,
        "confidence": 1.0,
        "sample": "[\"Darkmoon Deathmatch Pit (PH)\"] = \"Fosse des combats \u00e0 mort de Sombrelune [PH]\",",
        "retail": true
      }
    ],
    "Wrynn": [
      {
        "name": "Wrynn",
        "count": 18,
        "confidence": 1.0,
        "sample": "[\"Fort Wrynn (Alliance)\"] = \"Fort Wrynn (Alliance)\",",
        "retail": true
      }
    ],
    "Cognefort": [
      {
        "name": "Cognefort",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmaul Arena (Inside Raid)\"] = \"Ar\u00e8ne de Cognefort (en raid)\",",
        "retail": true
      }
    ],
    "Hautebrande": [
      {
        "name": "Hautebrande",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Hillsbrad Foothills (Southshore vs. Tarren Mill)\"] = \"Contreforts de Hautebrande (Austrivage contre Moulin-de-Tarren)\",",
        "retail": true
      }
    ],
    "Karazhan": [
      {
        "name": "Karazhan",
        "count": 9,
        "confidence": 1.0,
        "sample": "[\"Lower Return to Karazhan\"] = \"Retour \u00e0 Karazhan (bas)\",",
        "retail": true
      }
    ],
    "Lunarfall": [
      {
        "name": "Lunarfall",
        "count": 12,
        "confidence": 1.0,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Chutelune (Alliance)\",",
        "retail": true
      }
    ],
    "Chutelune": [
      {
        "name": "Chutelune",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Chutelune (Alliance)\",",
        "retail": true
      }
    ],
    "Nexus": [
      {
        "name": "Nexus",
        "count": 9,
        "confidence": 1.0,
        "sample": "[\"Nexus Legendary\"] = \"Nexus (l\u00e9gendaire)\",",
        "retail": true
      }
    ],
    "Ombrelune": [
      {
        "name": "Ombrelune",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Shadowmoon Valley (Outland)\"] = \"Vall\u00e9e d\u2019Ombrelune (Outreterre)\",",
        "retail": true
      }
    ],
    "Triumvirate": [
      {
        "name": "Triumvirate",
        "count": 17,
        "confidence": 1.0,
        "sample": "[\"The Seat of the Triumvirate (cin)\"] = \"Si\u00e8ge du triumvirat\",",
        "retail": true
      }
    ],
    "Caverns": [
      {
        "name": "Caverns",
        "count": 25,
        "confidence": 1.0,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Cavernes des Lamentations (donjon de combat de mascottes)\",",
        "retail": true
      }
    ],
    "Lamentations": [
      {
        "name": "Lamentations",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Cavernes des Lamentations (donjon de combat de mascottes)\",",
        "retail": true
      }
    ],
    "Gunship": [
      {
        "name": "Gunship",
        "count": 28,
        "confidence": 1.0,
        "sample": "[\"Transport: Alliance Gunship (IGB)\"] = \"Transport: canonni\u00e8re de l\u2019Alliance (IGB)\",",
        "retail": true
      }
    ],
    "Alliance": [
      {
        "name": "Alliance",
        "count": 3,
        "confidence": 0.6,
        "sample": "[\"Transport: Alliance Gunship (IGB)\"] = \"Transport: canonni\u00e8re de l\u2019Alliance (IGB)\",",
        "retail": true
      }
    ],
    "Horde": [
      {
        "name": "Horde",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Transport: Horde Gunship (IGB)\"] = \"Transport\u00a0: canonni\u00e8re de la Horde(IGB)\",",
        "retail": true
      }
    ],
    "Razziamarea": [
      {
        "name": "Razziamarea",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Brashtide Attack Fleet (Force Outdoors)\"] = \"Flotta d'Attacco dei Razziamarea (Forza Esterna)\",",
        "retail": true
      }
    ],
    "Colletorto": [
      {
        "name": "Colletorto",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Hillsbrad Foothills (Southshore vs. Tarren Mill)\"] = \"Alture di Colletorto (Riva del Sud contro Mulino di Tarren)\",",
        "retail": true
      }
    ],
    "Calaluna": [
      {
        "name": "Calaluna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Calaluna (Alleanza)\",",
        "retail": true
      }
    ],
    "Torvaluna": [
      {
        "name": "Torvaluna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Shadowmoon Valley (Outland)\"] = \"Valle di Torvaluna (Terre Esterne)\",",
        "retail": true
      }
    ],
    "Vento": [
      {
        "name": "Vento",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Stormshield (Alliance)\"] = \"Scudo del Vento (Alleanza)\",",
        "retail": true
      }
    ],
    "Lamenti": [
      {
        "name": "Lamenti",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Caverna dei Lamenti (Spedizione Scontri tra Mascotte)\",",
        "retail": true
      }
    ],
    "Mareforte": [
      {
        "name": "Mareforte",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Brashtide Attack Fleet (Force Outdoors)\"] = \"Esquadra de Assalto da Mareforte (For\u00e7a de Fora)\",",
        "retail": true
      }
    ],
    "Negraluna": [
      {
        "name": "Negraluna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Darkmoon Deathmatch Pit (PH)\"] = \"Ringue do Vale-tudo de Negraluna (PH)\",",
        "retail": true
      }
    ],
    "Imponente": [
      {
        "name": "Imponente",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmaul Arena (Inside Raid)\"] = \"Arena do Malho Imponente (Raide Interno)\",",
        "retail": true
      }
    ],
    "Montes": [
      {
        "name": "Montes",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Hillsbrad Foothills (Southshore vs. Tarren Mill)\"] = \"Contraforte de Eira dos Montes (Serraria Tarren vs Costa Sul)\",",
        "retail": true
      }
    ],
    "Quedaluna": [
      {
        "name": "Quedaluna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Quedaluna (Alian\u00e7a)\",",
        "retail": true
      }
    ],
    "Negra": [
      {
        "name": "Negra",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Shadowmoon Valley (Outland)\"] = \"Vale da Lua Negra (Terral\u00e9m)\",",
        "retail": true
      }
    ],
    "Tonante": [
      {
        "name": "Tonante",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Stormshield (Alliance)\"] = \"Escudo Tonante (Alian\u00e7a)\",",
        "retail": true
      }
    ],
    "Ululante": [
      {
        "name": "Ululante",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Caverna Ululante (Masmorra de Batalha de Mascotes)\",",
        "retail": true
      }
    ],
    "Horda": [
      {
        "name": "Horda",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Transport: Horde Gunship (IGB)\"] = \"Transporte: Belonave da Horda (IGB)\",",
        "retail": true
      }
    ],
    "Mondsturz": [
      {
        "name": "Mondsturz",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Mondsturz (Allianz)\",",
        "retail": true
      }
    ],
    "Schattenmondtal": [
      {
        "name": "Schattenmondtal",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Shadowmoon Valley (Outland)\"] = \"Schattenmondtal (Scherbenwelt)\",",
        "retail": true
      }
    ],
    "Sturmschild": [
      {
        "name": "Sturmschild",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Stormshield (Alliance)\"] = \"Sturmschild (Allianz)\",",
        "retail": true
      }
    ],
    "Wehklagens": [
      {
        "name": "Wehklagens",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Die H\u00f6hlen des Wehklagens (Haustierkampfdungeon)\",",
        "retail": true
      }
    ],
    "Allianz": [
      {
        "name": "Allianz",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Transport: Alliance Gunship (IGB)\"] = \"Transport: Kanonenboot der Allianz (IGB)\",",
        "retail": true
      }
    ],
    "Trabalomas": [
      {
        "name": "Trabalomas",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Hillsbrad Foothills (Southshore vs. Tarren Mill)\"] = \"Laderas de Trabalomas (Costasur contra Molino Tarren)\",",
        "retail": true
      }
    ],
    "Bajaluna": [
      {
        "name": "Bajaluna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Bajaluna (Alianza)\",",
        "retail": true
      }
    ],
    "Sombraluna": [
      {
        "name": "Sombraluna",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Shadowmoon Valley (Outland)\"] = \"Valle Sombraluna (Terrallende)\",",
        "retail": true
      }
    ],
    "Fuertemarea": [
      {
        "name": "Fuertemarea",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Brashtide Attack Fleet (Force Outdoors)\"] = \"Flota de Asalto Fuertemarea (Fuerzas de exterior)\",",
        "retail": true
      }
    ],
    "Magullador": [
      {
        "name": "Magullador",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Highmaul Arena (Inside Raid)\"] = \"Arena de Gran Magullador (asalto interno)\",",
        "retail": true
      }
    ],
    "Luna": [
      {
        "name": "Luna",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Lunarfall (Alliance)\"] = \"Ca\u00edda de la Luna (Alianza)\",",
        "retail": true
      }
    ],
    "Triunvirato": [
      {
        "name": "Triunvirato",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Seat of the Triumvirate (cin)\"] = \"El Trono del Triunvirato (cin)\",",
        "retail": true
      }
    ],
    "Lamentos": [
      {
        "name": "Lamentos",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"The Wailing Caverns (Pet Battle Dungeon)\"] = \"Cuevas de los Lamentos (Calabozo de Duelo de Mascotas)\",",
        "retail": true
      }
    ],
    "GY": [
      {
        "name": "GY",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"SM Cathedral/GY (TEMP)\"] = 6123,",
        "retail": true
      }
    ],
    "JT": [
      {
        "name": "JT",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"[TEMP] JT (copy)\"] = 7609,",
        "retail": true
      }
    ],
    "Tower": [
      {
        "name": "Tower",
        "count": 5,
        "confidence": 1.0,
        "sample": "[\"Warden Tower (PH)\"] = 8077,",
        "retail": true
      }
    ],
    "Elunaria": [
      {
        "name": "Elunaria",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Elunaria (cin)\"] = 9306,",
        "retail": true
      }
    ],
    "Lowlands": [
      {
        "name": "Lowlands",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"DEV Lowlands (DO NOT USE)\"] = 13416,",
        "retail": true
      }
    ],
    "GetAreaInfo": [
      {
        "name": "GetAreaInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetAreaInfo(zoneName)",
        "retail": true
      },
      {
        "name": "C_Map.GetAreaInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "return C_Map.GetAreaInfo(data[zoneName])",
        "retail": true
      }
    ],
    "PlayerLevel": [
      {
        "name": "PlayerLevel",
        "count": 93,
        "confidence": 1.0,
        "sample": "\"Mulgore 67.8,59.9 -x- Southern Barrens 39.8,48.0 {cond:PlayerLevel()>10} {title:Go around the side of the Great Gate}\",",
        "retail": true
      }
    ],
    "PlayerCompletedQuest": [
      {
        "name": "PlayerCompletedQuest",
        "count": 357,
        "confidence": 1.0,
        "sample": "\"Un'Goro Crater 50.4,7.9 <region:shapers_terrace> -x- Sholazar Basin 40.4,83.0 {mode:PORTAL} {template:portalauto} {cond:PlayerCompletedQuest(12613)}\", -- Only if the player completed quest 12613 \"Powering the Waygate - The Makers' Overlook\"",
        "retail": true
      }
    ],
    "ALGAR": [
      {
        "name": "ALGAR",
        "count": 3,
        "confidence": 0.6,
        "sample": "-----     KHAZ ALGAR (THE WAR WITHIN)     -----",
        "retail": true
      }
    ],
    "Algar": [
      {
        "name": "Algar",
        "count": 2,
        "confidence": 0.4,
        "sample": "[\"Dalaran TWW\"] = {[0]=2305,[1]=2306,[2]=2307},\t\t\t-- Pre-Khaz Algar (TWW Intro)",
        "retail": true
      }
    ],
    "Campaign": [
      {
        "name": "Campaign",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"Priory Scenario\"] = {[0]=2330},\t\t\t\t-- War Within Campaign (Priory of the Sacred Flame Scenario)",
        "retail": true
      }
    ],
    "Rookery": [
      {
        "name": "Rookery",
        "count": 8,
        "confidence": 1.0,
        "sample": "--[\"The Rookery (The Rookery Landing)\"] = {[0]=2315},",
        "retail": true
      }
    ],
    "EJ_GetInstanceInfo": [
      {
        "name": "EJ_GetInstanceInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- /run D={}  for i=1,1000 do pcall(EJ_SelectInstance,i) local _, _, _, _, _, _, dungeonMapId, _ = EJ_GetInstanceInfo()  D[dungeonMapId or 0]=true end  ZGV:ShowDump(ZGV:Serialize(D),\"\")",
        "retail": true
      },
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetInstanceInfo",
        "count": 10,
        "confidence": 1.0,
        "sample": "local name, description, bgImage, buttonImage, loreImage, dungeonAreaMapID, link = DetailsFramework.EncounterJournal.EJ_GetInstanceInfo (ejID)",
        "retail": true
      }
    ],
    "Vindicaar": [
      {
        "name": "Vindicaar",
        "count": 3,
        "confidence": 0.6,
        "sample": "{\"Krokuun/1\",\"Krokuun/2\"},\t\t\t-- Vindicaar (Krokuun)",
        "retail": true
      }
    ],
    "Lake": [
      {
        "name": "Lake",
        "count": 2,
        "confidence": 0.4,
        "sample": "{ 48.8,50.9, 50.8,50.7, 51.0,56.1, 48.2,56.4, \"loop\" }, -- Calston Lake (example)",
        "retail": true
      }
    ],
    "GetLogIndexForQuestID": [
      {
        "name": "C_QuestLog.GetLogIndexForQuestID",
        "count": 3,
        "confidence": 0.6,
        "sample": "{top=911.40002441406, bottom=533.79998779297, left=-4434.2001953125, right=-4767.3002929688, target=1, cond=function() return C_QuestLog.GetLogIndexForQuestID(56719) end },--Only if on quest 56719, Alliance",
        "retail": true
      }
    ],
    "Anguish": [
      {
        "name": "Anguish",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- Pit of Anguish (Upper) -x- Pit of Anguish (Lower)",
        "retail": true
      }
    ],
    "Outside": [
      {
        "name": "Outside",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\t\tSwamp of Sorrows 69.6,53.9 (Temple of Atal'Hakkar Outside (Entering Doorway Outside mini map))",
        "retail": true
      }
    ],
    "Inside": [
      {
        "name": "Inside",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\t\tSwamp of Sorrows 69.8,52.9 (Temple of Atal'Hakkar Inside (going downstairs Inside mini map))",
        "retail": true
      }
    ],
    "Halls": [
      {
        "name": "Halls",
        "count": 43,
        "confidence": 1.0,
        "sample": "--\t\tSwamp of Sorrows 70.2,50.4 (5 yds into Broken Halls (swimming across pool indoors))",
        "retail": true
      }
    ],
    "Hakkar": [
      {
        "name": "Hakkar",
        "count": 2,
        "confidence": 0.4,
        "sample": "--\t\tSwamp of Sorrows 71.1,45.4 (5 yds entering indoor The Temple of Atal'Hakkar (hallway L))",
        "retail": true
      }
    ],
    "Masks": [
      {
        "name": "Masks",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\t\tSwamp of Sorrows 74.3,44.5 (5 yds Entering Hall of Masks (exiting stairs hallway))",
        "retail": true
      }
    ],
    "Archives": [
      {
        "name": "Archives",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- The Eonian Archives (Bastion)",
        "retail": true
      }
    ],
    "Vortrexxis": [
      {
        "name": "Vortrexxis",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Vortrexxis (Maldraxxus)",
        "retail": true
      }
    ],
    "Secrets": [
      {
        "name": "Secrets",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Vault of Secrets (Korthia)",
        "retail": true
      }
    ],
    "Market": [
      {
        "name": "Market",
        "count": 4,
        "confidence": 0.8,
        "sample": "--Tazavesh, the Veiled Market (Shadowlands)--",
        "retail": true
      }
    ],
    "Sangua": [
      {
        "name": "Sangua",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Invasion Point: Sangua (Krokuun)",
        "retail": true
      }
    ],
    "Val": [
      {
        "name": "Val",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Invasion Point: Val (Krokuun)",
        "retail": true
      }
    ],
    "Naigtal": [
      {
        "name": "Naigtal",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Invasion Point: Naigtal (Eredath)",
        "retail": true
      }
    ],
    "Bonich": [
      {
        "name": "Bonich",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Invasion Point: Bonich (Eredath)",
        "retail": true
      }
    ],
    "Aurinor": [
      {
        "name": "Aurinor",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Invasion Point: Aurinor (Antoran Wastes)",
        "retail": true
      }
    ],
    "Stormwind": [
      {
        "name": "Stormwind",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Stormwind (The Eastern Earthshrine) - Elwynn Forest, Eastern Kingdoms --",
        "retail": true
      }
    ],
    "Portal": [
      {
        "name": "Portal",
        "count": 9,
        "confidence": 1.0,
        "sample": "-- Oribos Transport Portal (Downstairs to Upstairs) #1",
        "retail": true
      }
    ],
    "Pad": [
      {
        "name": "Pad",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Transport Pad (Enter the Vault of the Archon)",
        "retail": true
      }
    ],
    "Commons": [
      {
        "name": "Commons",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- Elysian Hold (Tamed Larion), Bastion -x- Everdrawn Commons (Tamed Larion), Bastion --",
        "retail": true
      }
    ],
    "Precipice": [
      {
        "name": "Precipice",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Elysian Hold (Tamed Larion), Bastion -x- Fate's Precipice (Tamed Larion), Bastion --",
        "retail": true
      }
    ],
    "Teleporter": [
      {
        "name": "Teleporter",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Necropolis Teleporter (Entering the Vortrexxis)",
        "retail": true
      }
    ],
    "QuestActiveOrComplete": [
      {
        "name": "QuestActiveOrComplete",
        "count": 15,
        "confidence": 1.0,
        "sample": "\"{cond:covenantnetwork() >= 2 and QuestActiveOrComplete(63543) and covenant('Necrolord')}\",",
        "retail": true
      }
    ],
    "Oribos": [
      {
        "name": "Oribos",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Ardenweald to Oribos (Portal non-existent on live)",
        "retail": true
      }
    ],
    "Chamber": [
      {
        "name": "Chamber",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Winter Queen's Audience Chamber (Entering)",
        "retail": true
      }
    ],
    "Mad": [
      {
        "name": "Mad",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Sanctuary of the Mad (Sinfall), Revendreth -x- The Shrouded Asylum, Revendreth",
        "retail": true
      }
    ],
    "Sinfall": [
      {
        "name": "Sinfall",
        "count": 4,
        "confidence": 0.8,
        "sample": "-- Sinfall (Entering)",
        "retail": true
      }
    ],
    "Guests": [
      {
        "name": "Guests",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Spire of the Unseen Guests (Ember Court) (Entering)",
        "retail": true
      }
    ],
    "SINFALL": [
      {
        "name": "SINFALL",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- SINFALL (VENTHYR COVENANT) --",
        "retail": true
      }
    ],
    "Flyer": [
      {
        "name": "Flyer",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Sinfall Surface Flyer (Bat to fly out of Sinfall)",
        "retail": true
      }
    ],
    "Kalimdor": [
      {
        "name": "Kalimdor",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Temple of the Moon - Darnassus, Kalimdor (Old Time) -to- Hellfire Peninsula, Outland (Portal Usable) --",
        "retail": true
      }
    ],
    "Kingdoms": [
      {
        "name": "Kingdoms",
        "count": 16,
        "confidence": 1.0,
        "sample": "-- Northern Stranglethorn Vale, Kalimdor -to- Tirisfal Glades, Eastern Kingdoms (After Destruction) --CHECKED",
        "retail": true
      }
    ],
    "Gnomeregan": [
      {
        "name": "Gnomeregan",
        "count": 6,
        "confidence": 1.0,
        "sample": "-- Dalaran (Legion) -to- Gnomeregan\t\t(Gnomeregan Pet Battle Dungeon Reward) --",
        "retail": true
      }
    ],
    "Stratholme": [
      {
        "name": "Stratholme",
        "count": 9,
        "confidence": 1.0,
        "sample": "-- Dalaran (Legion) -to- Stratholme\t\t(Stratholme Pet Battle Dungeon Reward) --",
        "retail": true
      }
    ],
    "Deadmines": [
      {
        "name": "Deadmines",
        "count": 14,
        "confidence": 1.0,
        "sample": "-- Dalaran (Legion) -to- Deadmines\t\t(Deadmines Pet Battle Dungeon Reward) --",
        "retail": true
      }
    ],
    "DK": [
      {
        "name": "DK",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- DK (DEATHGATE)",
        "retail": true
      }
    ],
    "MONKS": [
      {
        "name": "MONKS",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- MONKS (Zen Pilgrimage)",
        "retail": true
      }
    ],
    "Plaguefall": [
      {
        "name": "Plaguefall",
        "count": 7,
        "confidence": 1.0,
        "sample": "\"Maldraxxus/0 59.60,65.31\t\t\t<spell:354463>\",\t\t\t--Keystone Hero: Plaguefall (Path of the Plagued)",
        "retail": true
      }
    ],
    "Scithe": [
      {
        "name": "Scithe",
        "count": 7,
        "confidence": 1.0,
        "sample": "\"Ardenweald/0 35.41,54.11\t\t\t<spell:354464>\",\t\t\t--Keystone Hero: Mists of Tirna Scithe (Path of the Misty Forest)",
        "retail": true
      }
    ],
    "Atonement": [
      {
        "name": "Atonement",
        "count": 4,
        "confidence": 0.8,
        "sample": "\"Revendreth/0 78.58,49.22\t\t\t<spell:354465>\",\t\t\t--Keystone Hero: Halls of Atonement (Path of the Sinful Soul)",
        "retail": true
      }
    ],
    "Pain": [
      {
        "name": "Pain",
        "count": 27,
        "confidence": 1.0,
        "sample": "\"Maldraxxus/0 53.09,52.87\t\t\t<spell:354467>\",\t\t\t--Keystone Hero: Theater of Pain (Path of the Undefeated)",
        "retail": true
      }
    ],
    "Side": [
      {
        "name": "Side",
        "count": 7,
        "confidence": 1.0,
        "sample": "\"Ardenweald/0 68.66,66.71\t\t\t<spell:354468>\",\t\t\t--Keystone Hero: De Other Side (Path of the Scheming Loa)",
        "retail": true
      }
    ],
    "Docks": [
      {
        "name": "Docks",
        "count": 7,
        "confidence": 1.0,
        "sample": "\"Gorgrond/0 45.42,13.51\t\t\t\t<spell:159896>\",\t\t\t--Keystone Hero: Iron Docks (Path of the Iron Prow)",
        "retail": true
      }
    ],
    "Depot": [
      {
        "name": "Depot",
        "count": 9,
        "confidence": 1.0,
        "sample": "\"Gorgrond 55.01,31.30\t\t\t\t<spell:159900>\",\t\t\t--Keystone Hero: Grimrail Depot (Path of the Dark Rail)",
        "retail": true
      }
    ],
    "Raids": [
      {
        "name": "Raids",
        "count": 3,
        "confidence": 0.6,
        "sample": "\"Revendreth/0 46.37,41.50\t\t\t<spell:373190>\",\t\t\t--Mythic: Fates of the Shadowlands Raids (Path of the Sire)",
        "retail": true
      }
    ],
    "Freehold": [
      {
        "name": "Freehold",
        "count": 9,
        "confidence": 1.0,
        "sample": "\"Tiragarde Sound/0 84.45,78.88\t\t\t<spell:257701>\",\t\t\t--Keystone Hero: Freehold (Teleport to Freehold)",
        "retail": true
      }
    ],
    "Lair": [
      {
        "name": "Lair",
        "count": 19,
        "confidence": 1.0,
        "sample": "\"Highmountain/0 49.56,68.66\t\t\t<spell:205379>\",\t\t\t--Keystone Hero: Neltharion's Lair (Teleport: Neltharion's Lair)",
        "retail": true
      }
    ],
    "Underrot": [
      {
        "name": "Underrot",
        "count": 7,
        "confidence": 1.0,
        "sample": "\"Nazmir/0 51.38,64.83\t\t\t\t<spell:272269>\",\t\t\t--Keystone Hero: The Underrot (Teleport: The Underrot)",
        "retail": true
      }
    ],
    "Pinnacle": [
      {
        "name": "Pinnacle",
        "count": 14,
        "confidence": 1.0,
        "sample": "\"Uldum 76.81,84.55\t\t\t\t<spell:88775>\",\t\t\t\t--Keystone Hero: The Vortex Pinnacle (Teleport to The Vortex Pinnacle)",
        "retail": true
      }
    ],
    "Inn": [
      {
        "name": "Inn",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- Snug Harbor Inn (Tradewinds Market)",
        "retail": true
      }
    ],
    "Tale": [
      {
        "name": "Tale",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Dead Man's Tale (Freehold)",
        "retail": true
      }
    ],
    "Octopus": [
      {
        "name": "Octopus",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- The Curious Octopus (Mariner's Row)",
        "retail": true
      }
    ],
    "Flagon": [
      {
        "name": "Flagon",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- The Golden Flagon (Brennadam)",
        "retail": true
      }
    ],
    "Bar": [
      {
        "name": "Bar",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- The Drust Bar (Anyport)",
        "retail": true
      }
    ],
    "Roost": [
      {
        "name": "Roost",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Falcon's Roost (Falconhurst)",
        "retail": true
      }
    ],
    "Home": [
      {
        "name": "Home",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Northwood Home (Arom's Stand)",
        "retail": true
      }
    ],
    "Larder": [
      {
        "name": "Larder",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- The Swine's Larder (Fallhaven)",
        "retail": true
      }
    ],
    "Throne": [
      {
        "name": "Throne",
        "count": 27,
        "confidence": 1.0,
        "sample": "-- The Hozen Throne (Grand Bazaar)",
        "retail": true
      }
    ],
    "You": [
      {
        "name": "You",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Spirits Be With You (Port of Zandalar)",
        "retail": true
      }
    ],
    "Jani": [
      {
        "name": "Jani",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Atal'Jani (The Zocalo)",
        "retail": true
      }
    ],
    "Vines": [
      {
        "name": "Vines",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Village in the Vines (The Shrunken Head)",
        "retail": true
      }
    ],
    "Ruins": [
      {
        "name": "Ruins",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Zul'jan Ruins (Zul'jan)",
        "retail": true
      }
    ],
    "Fallen": [
      {
        "name": "Fallen",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Wayshrine of the Fallen (Zo'bal Ruins)",
        "retail": true
      }
    ],
    "Cottage": [
      {
        "name": "Cottage",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Thornton's Cottage (Bradensbrook)",
        "retail": true
      }
    ],
    "Compound": [
      {
        "name": "Compound",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Prepfoot Compound (Prepfoot)",
        "retail": true
      }
    ],
    "Barracks": [
      {
        "name": "Barracks",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Greywatch Barracks (Greywatch - Alliance Only)",
        "retail": true
      }
    ],
    "Nighthold": [
      {
        "name": "Nighthold",
        "count": 7,
        "confidence": 1.0,
        "sample": "-- The Nighthold (Nightborned Allied Race Default Hearthstone)",
        "retail": true
      }
    ],
    "KALIMDOR": [
      {
        "name": "KALIMDOR",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     KALIMDOR (VANILLA + CATACLYSM)     -----",
        "retail": true
      }
    ],
    "KINGDOMS": [
      {
        "name": "KINGDOMS",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     EASTERN KINGDOMS (VANILLA + CATACLYSM)     -----",
        "retail": true
      }
    ],
    "OUTLAND": [
      {
        "name": "OUTLAND",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     OUTLAND (THE BURNING CRUSADE)     -----",
        "retail": true
      }
    ],
    "NORTHREND": [
      {
        "name": "NORTHREND",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     NORTHREND (WRATH OF THE LICH KING)     -----",
        "retail": true
      }
    ],
    "PANDARIA": [
      {
        "name": "PANDARIA",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     PANDARIA (MISTS OF PANDARIA)     -----",
        "retail": true
      }
    ],
    "DRAENOR": [
      {
        "name": "DRAENOR",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     DRAENOR (WARLORDS OF DRAENOR)     -----",
        "retail": true
      }
    ],
    "ISLES": [
      {
        "name": "ISLES",
        "count": 4,
        "confidence": 0.8,
        "sample": "-----     BROKEN ISLES (LEGION)     -----",
        "retail": true
      }
    ],
    "ARGUS": [
      {
        "name": "ARGUS",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     ARGUS (LEGION)     -----",
        "retail": true
      }
    ],
    "ZANDALAR": [
      {
        "name": "ZANDALAR",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     ZANDALAR (BATTLE FOR AZEROTH)     -----",
        "retail": true
      }
    ],
    "TIRAS": [
      {
        "name": "TIRAS",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     KUL'TIRAS (BATTLE FOR AZEROTH)     -----",
        "retail": true
      }
    ],
    "NAZJATAR": [
      {
        "name": "NAZJATAR",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     NAZJATAR (BATTLE FOR AZEROTH)     -----",
        "retail": true
      }
    ],
    "SHADOWLANDS": [
      {
        "name": "SHADOWLANDS",
        "count": 2,
        "confidence": 0.4,
        "sample": "-----     THE SHADOWLANDS (SHADOWLANDS)     -----",
        "retail": true
      }
    ],
    "SetNonBlocking": [
      {
        "name": "SetNonBlocking",
        "count": 2,
        "confidence": 0.4,
        "sample": "if control.SetNonBlocking then control:SetNonBlocking(false) end",
        "retail": true
      }
    ],
    "ApplySkinToSteps": [
      {
        "name": "ApplySkinToSteps",
        "count": 2,
        "confidence": 0.4,
        "sample": "frame:ApplySkinToSteps()",
        "retail": true
      }
    ],
    "ApplyBackdrop": [
      {
        "name": "ApplyBackdrop",
        "count": 1,
        "confidence": 0.2,
        "sample": ":ApplyBackdrop()",
        "retail": true
      }
    ],
    "GenericDragStartHandler": [
      {
        "name": "ZGV.GenericDragStartHandler",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV.GenericDragStartHandler(source,button)",
        "retail": true
      }
    ],
    "GenericDragStopHandler": [
      {
        "name": "ZGV.GenericDragStopHandler",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV.GenericDragStopHandler()",
        "retail": true
      }
    ],
    "CreateLines": [
      {
        "name": "CreateLines",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:CreateLines()",
        "retail": true
      }
    ],
    "ApplySkinToLines": [
      {
        "name": "ApplySkinToLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ApplySkinToLines()",
        "retail": true
      }
    ],
    "ShowClickersIfFocused": [
      {
        "name": "ShowClickersIfFocused",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShowClickersIfFocused()",
        "retail": true
      }
    ],
    "ShowBorderIfCurrent": [
      {
        "name": "ShowBorderIfCurrent",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShowBorderIfCurrent()",
        "retail": true
      }
    ],
    "NextLine": [
      {
        "name": "NextLine",
        "count": 7,
        "confidence": 1.0,
        "sample": "lineframe = self:NextLine()",
        "retail": true
      }
    ],
    "ShowAsHeader": [
      {
        "name": "ShowAsHeader",
        "count": 2,
        "confidence": 0.4,
        "sample": "lineframe:ShowAsHeader((numbertext or \"\")..(leveltext or \"\")..(reqtext or \"\")..(titletext or \"\")..(betatext or \"\")..(prereqtext or \"\")..(devtext or \"\"))",
        "retail": true
      }
    ],
    "SetMultilineIndent": [
      {
        "name": "SetMultilineIndent",
        "count": 5,
        "confidence": 1.0,
        "sample": "--lineframe.label:SetMultilineIndent(1)",
        "retail": true
      }
    ],
    "ShowAsGrind": [
      {
        "name": "ShowAsGrind",
        "count": 2,
        "confidence": 0.4,
        "sample": "lineframe:ShowAsGrind(goal,indent..goaltxt,briefhidden)",
        "retail": true
      }
    ],
    "ShowAsGoal": [
      {
        "name": "ShowAsGoal",
        "count": 2,
        "confidence": 0.4,
        "sample": "lineframe:ShowAsGoal(goal,indent..goaltxt,briefhidden)",
        "retail": true
      }
    ],
    "ShowAsGoalTip": [
      {
        "name": "ShowAsGoalTip",
        "count": 2,
        "confidence": 0.4,
        "sample": "lineframe:ShowAsGoalTip(goal,indent..\"|cffeeeecc\".. goal.tooltip..\"|r\")",
        "retail": true
      }
    ],
    "ShowAsLoadguide": [
      {
        "name": "ShowAsLoadguide",
        "count": 2,
        "confidence": 0.4,
        "sample": "lineframe:ShowAsLoadguide(goal,indent..goaltxt)",
        "retail": true
      }
    ],
    "ShowAsSecText": [
      {
        "name": "ShowAsSecText",
        "count": 4,
        "confidence": 0.8,
        "sample": "lineframe:ShowAsSecText(indent..partystatus)",
        "retail": true
      }
    ],
    "SetBackColor": [
      {
        "name": "SetBackColor",
        "count": 9,
        "confidence": 1.0,
        "sample": "if color then lineframe:SetBackColor(ZGV.F.HTMLColor(color)) end",
        "retail": true
      }
    ],
    "SetBackgroundForStep": [
      {
        "name": "SetBackgroundForStep",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetBackgroundForStep()",
        "retail": true
      }
    ],
    "SetTextIndent": [
      {
        "name": "SetTextIndent",
        "count": 3,
        "confidence": 0.6,
        "sample": "lineframe:SetTextIndent()",
        "retail": true
      }
    ],
    "SetIconTexture": [
      {
        "name": "SetIconTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:SetIconTexture(tex)",
        "retail": true
      }
    ],
    "PlayFadeAnim": [
      {
        "name": "PlayFadeAnim",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:PlayFadeAnim(sr,sg,sb,sa,r,g,b,a)",
        "retail": true
      }
    ],
    "SetFadeAnimRGBA": [
      {
        "name": "SetFadeAnimRGBA",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:SetFadeAnimRGBA(r,g,b,a)",
        "retail": true
      }
    ],
    "GetBackdropColor": [
      {
        "name": "GetBackdropColor",
        "count": 15,
        "confidence": 1.0,
        "sample": "local oldr,oldg,oldb,olda = self.back:GetBackdropColor()",
        "retail": true
      }
    ],
    "HideBack": [
      {
        "name": "HideBack",
        "count": 5,
        "confidence": 1.0,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:HideBack()",
        "retail": true
      }
    ],
    "ShowAsStickySeparator": [
      {
        "name": "ShowAsStickySeparator",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:ShowAsStickySeparator(sr,sg,sb)  -- used only in inline sticky mode, thus unused",
        "retail": true
      }
    ],
    "ShowAsStickyLine": [
      {
        "name": "ShowAsStickyLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:ShowAsStickyLine(sr,sg,sb)  -- used only in inline sticky mode, thus unused",
        "retail": true
      }
    ],
    "ShowAsSubtitle": [
      {
        "name": "ShowAsSubtitle",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:ShowAsSubtitle()",
        "retail": true
      }
    ],
    "SetBackHighlight": [
      {
        "name": "SetBackHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:SetBackHighlight(highlight)  -- better, but unused",
        "retail": true
      }
    ],
    "AddHighlightToBack": [
      {
        "name": "AddHighlightToBack",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:AddHighlightToBack()",
        "retail": true
      }
    ],
    "ShowGoalBackground": [
      {
        "name": "ShowGoalBackground",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:ShowGoalBackground()",
        "retail": true
      }
    ],
    "ShowGoalIcon": [
      {
        "name": "ShowGoalIcon",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ShowGoalIcon()",
        "retail": true
      }
    ],
    "ShowAsPriText": [
      {
        "name": "ShowAsPriText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_StepLine_Mixin:ShowAsPriText(text)  --unused",
        "retail": true
      }
    ],
    "IsTruncated": [
      {
        "name": "IsTruncated",
        "count": 3,
        "confidence": 0.6,
        "sample": "--if text:IsTruncated() then textheight=textheight+self.db.profile.fontsize+6 end",
        "retail": true
      }
    ],
    "OnBackdropLoaded": [
      {
        "name": "OnBackdropLoaded",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self.SetBackdrop then self:OnBackdropLoaded() end",
        "retail": true
      }
    ],
    "SearchButton_OnClick": [
      {
        "name": "SearchButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "--function ZGV_DefaultSkin_Frame_Mixin:SearchButton_OnClick(button)",
        "retail": true
      }
    ],
    "ShowFindNearest": [
      {
        "name": "ShowFindNearest",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\tZGV.WhoWhere:ShowFindNearest()",
        "retail": true
      }
    ],
    "SearchButton_OnEnter": [
      {
        "name": "SearchButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "--function ZGV_DefaultSkin_Frame_Mixin:SearchButton_OnEnter(button)",
        "retail": true
      }
    ],
    "CreateProgressBar": [
      {
        "name": "CreateProgressBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateProgressBar(frame)",
        "retail": true
      }
    ],
    "GetRestState": [
      {
        "name": "GetRestState",
        "count": 1,
        "confidence": 0.2,
        "sample": "local rested = GetRestState()",
        "retail": true
      }
    ],
    "ProgressBar_OnClick": [
      {
        "name": "ProgressBar_OnClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ProgressBar_OnClick(self)",
        "retail": true
      }
    ],
    "ScrollByDelta": [
      {
        "name": "ScrollByDelta",
        "count": 3,
        "confidence": 0.6,
        "sample": "Scroll:SetScript(\"OnMouseWheel\",function(f,delta) Scroll:ScrollByDelta(-delta) end)",
        "retail": true
      }
    ],
    "OldSetVerticalScroll": [
      {
        "name": "OldSetVerticalScroll",
        "count": 1,
        "confidence": 0.2,
        "sample": "return self:OldSetVerticalScroll(self.Bar:GetValue())",
        "retail": true
      }
    ],
    "GetContentHeight": [
      {
        "name": "GetContentHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGV.db.profile.showcountsteps>0 then return max(0,self:GetContentHeight()-self:GetHeight()) or 0",
        "retail": true
      }
    ],
    "SetupBorderFlash": [
      {
        "name": "SetupBorderFlash",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetupBorderFlash()",
        "retail": true
      }
    ],
    "SetupDragWithAnything": [
      {
        "name": "SetupDragWithAnything",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetupDragWithAnything()",
        "retail": true
      }
    ],
    "CreateStepPools": [
      {
        "name": "CreateStepPools",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CreateStepPools()",
        "retail": true
      }
    ],
    "HookControlMessages": [
      {
        "name": "HookControlMessages",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:HookControlMessages()",
        "retail": true
      }
    ],
    "SetMaxFramerate": [
      {
        "name": "SetMaxFramerate",
        "count": 1,
        "confidence": 0.2,
        "sample": "if f.SetMaxFramerate then f:SetMaxFramerate(99) end  -- 4.1 PTR issue? is SetMaxFramerate gone?",
        "retail": true
      }
    ],
    "GetObjectType": [
      {
        "name": "GetObjectType",
        "count": 19,
        "confidence": 1.0,
        "sample": "if v.GetObjectType and v:GetObjectType()==\"Button\" then",
        "retail": true
      }
    ],
    "SetUp": [
      {
        "name": "SetUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "--ZGV.ProgressBar:SetUp()",
        "retail": true
      }
    ],
    "ZGVFSectionDropDown_Initialize": [
      {
        "name": "ZGVFSectionDropDown_Initialize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGVFSectionDropDown_Initialize(frame,level,menulist)",
        "retail": true
      }
    ],
    "ZGVFSectionDropDown_Func": [
      {
        "name": "ZGVFSectionDropDown_Func",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGVFSectionDropDown_Func()",
        "retail": true
      }
    ],
    "ToggleDropDownMenu": [
      {
        "name": "ToggleDropDownMenu",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\tToggleDropDownMenu(1, nil, ZygorGuidesViewerFrame_SectionDropDown, ZygorGuidesViewerFrame, 0, 0);",
        "retail": true
      }
    ],
    "ZGV_SetHeight": [
      {
        "name": "ZGV_SetHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_SetHeight(self,height)",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_HideTooltip": [
      {
        "name": "ZygorGuidesViewerFrame_HideTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_HideTooltip(self)",
        "retail": true
      }
    ],
    "LockButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.LockButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.LockButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "LockButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.LockButton_OnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV_DefaultSkin_Frame_Mixin.LockButton_OnEnter(self,button)",
        "retail": true
      }
    ],
    "HookMenuMessages": [
      {
        "name": "HookMenuMessages",
        "count": 3,
        "confidence": 0.6,
        "sample": "local function HookMenuMessages(menu,message)",
        "retail": true
      }
    ],
    "MenuSettingsButton_OnClick": [
      {
        "name": "MenuSettingsButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin:MenuSettingsButton_OnClick()",
        "retail": true
      }
    ],
    "MenuSettingsButton_OnEnter": [
      {
        "name": "MenuSettingsButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin:MenuSettingsButton_OnEnter()",
        "retail": true
      }
    ],
    "MenuAdditionalButton_OnClick": [
      {
        "name": "MenuAdditionalButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin:MenuAdditionalButton_OnClick()",
        "retail": true
      }
    ],
    "ShowGuideHelper": [
      {
        "name": "ShowGuideHelper",
        "count": 1,
        "confidence": 0.2,
        "sample": "func=function() ZGV.QuestDB:ShowGuideHelper() end,",
        "retail": true
      }
    ],
    "MenuAdditionalButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.MenuAdditionalButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.MenuAdditionalButton_OnEnter(self)",
        "retail": true
      }
    ],
    "PrevButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "PrevButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.PrevButton_OnEnter(self)",
        "retail": true
      }
    ],
    "NextButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.NextButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.NextButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "NextButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.NextButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.NextButton_OnEnter(self)",
        "retail": true
      }
    ],
    "NextButtonSpecial_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnClick(self)",
        "retail": true
      }
    ],
    "NextButtonSpecial_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.NextButtonSpecial_OnEnter(self)",
        "retail": true
      }
    ],
    "HelpButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "HelpButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.HelpButton_OnEnter(self)",
        "retail": true
      }
    ],
    "ReportButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "ReportButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.ReportButton_OnEnter(self)",
        "retail": true
      }
    ],
    "GuideShareButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.GuideShareButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "MiniButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "MiniButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnEnter",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV_DefaultSkin_Frame_Mixin.MiniButton_OnEnter(self,button)",
        "retail": true
      }
    ],
    "CloseButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.CloseButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.CloseButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "ReportStepButton_OnClick": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnClick(self,button)",
        "retail": true
      }
    ],
    "ReportStepButton_OnEnter": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.ReportStepButton_OnEnter(self)",
        "retail": true
      }
    ],
    "Scroll_OnUpdate": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.Scroll_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.Scroll_OnUpdate(self,elapsed)",
        "retail": true
      }
    ],
    "GetVerticalScrollRange": [
      {
        "name": "GetVerticalScrollRange",
        "count": 2,
        "confidence": 0.4,
        "sample": "if self:GetVerticalScrollRange()==0 then",
        "retail": true
      }
    ],
    "Scroll_Slider_OnValueChanged": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.Scroll_Slider_OnValueChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.Scroll_Slider_OnValueChanged(self,value)",
        "retail": true
      }
    ],
    "StepNum_OnMouseWheel": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.StepNum_OnMouseWheel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.StepNum_OnMouseWheel(self,delta)",
        "retail": true
      }
    ],
    "ThinFlash_OnLoad": [
      {
        "name": "ZGV_DefaultSkin_Frame_Mixin.ThinFlash_OnLoad",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_DefaultSkin_Frame_Mixin.ThinFlash_OnLoad(self)",
        "retail": true
      }
    ],
    "HighlightOn": [
      {
        "name": "HighlightOn",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_ResizerMixin:HighlightOn(button)",
        "retail": true
      }
    ],
    "HighlightOff": [
      {
        "name": "HighlightOff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_ResizerMixin:HighlightOff(button)",
        "retail": true
      }
    ],
    "SizeOff": [
      {
        "name": "SizeOff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZGV_ResizerMixin:SizeOff(button)",
        "retail": true
      }
    ],
    "AssignTextures": [
      {
        "name": "AssignTextures",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_TitleButton_Mixin:AssignTextures(set,key)",
        "retail": true
      }
    ],
    "SetSizeFromSkin": [
      {
        "name": "SetSizeFromSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_TitleButton_Mixin:SetSizeFromSkin()",
        "retail": true
      }
    ],
    "SetTextureInsetsFromSkin": [
      {
        "name": "SetTextureInsetsFromSkin",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ZGV_DefaultSkin_TitleButton_Mixin:SetTextureInsetsFromSkin()",
        "retail": true
      }
    ],
    "AssignTexture": [
      {
        "name": "AssignTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_MenuButton_Mixin:AssignTexture(set,key)",
        "retail": true
      }
    ],
    "SetLabelFont": [
      {
        "name": "SetLabelFont",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ZGV_DefaultSkin_MenuButton_Mixin:SetLabelFont()",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_OnKeyDown": [
      {
        "name": "ZygorGuidesViewerFrame_OnKeyDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_OnKeyDown(self,value)",
        "retail": true
      }
    ],
    "ZygorGuidesViewerFrame_OnKeyUp": [
      {
        "name": "ZygorGuidesViewerFrame_OnKeyUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ZygorGuidesViewerFrame_OnKeyUp(self,value)",
        "retail": true
      }
    ],
    "Starlight": [
      {
        "name": "Starlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "local STYLE = ZGV.Skins:GetSkin(\"default\"):AddStyle(\"starlight-glass\",\"Starlight (Glass)\", \"starlight\")",
        "retail": true
      }
    ],
    "CreateWorkFrame": [
      {
        "name": "CreateWorkFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "Scan:CreateWorkFrame()",
        "retail": true
      }
    ],
    "CreateUIFrame": [
      {
        "name": "CreateUIFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Scan:CreateUIFrame()",
        "retail": true
      }
    ],
    "ImportHourly": [
      {
        "name": "ImportHourly",
        "count": 2,
        "confidence": 0.4,
        "sample": "Scan:ImportHourly()",
        "retail": true
      }
    ],
    "ScanFast": [
      {
        "name": "ScanFast",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Scan:ScanFast()",
        "retail": true
      }
    ],
    "CanSendAuctionQuery": [
      {
        "name": "CanSendAuctionQuery",
        "count": 3,
        "confidence": 0.6,
        "sample": "--if not select(2,CanSendAuctionQuery()) then return false,\"can't scan yet\" end",
        "retail": true
      }
    ],
    "PerformQuery": [
      {
        "name": "PerformQuery",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.Proxy:PerformQuery(\"\", nil, nil, 0, false, -1, true) -- FULL SCAN!",
        "retail": true
      }
    ],
    "SetState": [
      {
        "name": "SetState",
        "count": 33,
        "confidence": 1.0,
        "sample": "self:SetState(\"SS_QUERYING\")",
        "retail": true
      }
    ],
    "ScanByName": [
      {
        "name": "ScanByName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Scan:ScanByName(name,itemid,dontanalyze)",
        "retail": true
      }
    ],
    "SendBrowseQuery": [
      {
        "name": "C_AuctionHouse.SendBrowseQuery",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_AuctionHouse.SendBrowseQuery(Scan.BrowseQuery);",
        "retail": true
      },
      {
        "name": "SendBrowseQuery",
        "count": 1,
        "confidence": 0.2,
        "sample": "AuctionHouseFrame:SendBrowseQuery(item.name,0,0,{4,5,6,7,8,10,9})",
        "retail": true
      }
    ],
    "ListenByKey": [
      {
        "name": "ListenByKey",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Scan:ListenByKey(itemkey)",
        "retail": true
      }
    ],
    "CanScanFast": [
      {
        "name": "CanScanFast",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Scan:CanScanFast()",
        "retail": true
      }
    ],
    "ResultsListComplete": [
      {
        "name": "ResultsListComplete",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:ResultsListComplete()",
        "retail": true
      }
    ],
    "GetAuctionCount": [
      {
        "name": "GetAuctionCount",
        "count": 3,
        "confidence": 0.6,
        "sample": "local count = self:GetAuctionCount(\"list\")",
        "retail": true
      }
    ],
    "GetAuctionItemInfo": [
      {
        "name": "GetAuctionItemInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local name, texture, count, quality,canUse,  level,levelColHeader,minBid,minIncrement,buyoutPrice,  bidAmount,ishighBidder,bidderFullName,ownerName,ownerFullName,  saleStatus,itemId,hasAllInfo = GetAuctionItemInfo(\"list\", row)",
        "retail": true
      }
    ],
    "DumpAuctionItems": [
      {
        "name": "DumpAuctionItems",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:DumpAuctionItems(focusrow)",
        "retail": true
      }
    ],
    "AH": [
      {
        "name": "AH",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV:Debug(\"Here's what's on the AH (%d rows):\",GetNumAuctionItems(\"list\"))",
        "retail": true
      }
    ],
    "GetNumAuctionItems": [
      {
        "name": "GetNumAuctionItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:Debug(\"Here's what's on the AH (%d rows):\",GetNumAuctionItems(\"list\"))",
        "retail": true
      }
    ],
    "RILU": [
      {
        "name": "RILU",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:Debug(\"RILU (auctions updated)\")",
        "retail": true
      }
    ],
    "SaveLastReplicateCount": [
      {
        "name": "SaveLastReplicateCount",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SaveLastReplicateCount()",
        "retail": true
      }
    ],
    "ScanAuctions": [
      {
        "name": "ScanAuctions",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ScanAuctions()",
        "retail": true
      }
    ],
    "HasFullBrowseResults": [
      {
        "name": "C_AuctionHouse.HasFullBrowseResults",
        "count": 3,
        "confidence": 0.6,
        "sample": "if C_AuctionHouse.HasFullBrowseResults() then",
        "retail": true
      }
    ],
    "GetBrowseResults": [
      {
        "name": "C_AuctionHouse.GetBrowseResults",
        "count": 4,
        "confidence": 0.8,
        "sample": "local browseresults = C_AuctionHouse.GetBrowseResults()",
        "retail": true
      }
    ],
    "ScanOne": [
      {
        "name": "ScanOne",
        "count": 8,
        "confidence": 1.0,
        "sample": "--Scan:ScanOne()",
        "retail": true
      }
    ],
    "HasFullCommoditySearchResults": [
      {
        "name": "C_AuctionHouse.HasFullCommoditySearchResults",
        "count": 2,
        "confidence": 0.4,
        "sample": "if C_AuctionHouse.HasFullCommoditySearchResults(Scan.ScannedItemID or Scan.ListenItemID) then",
        "retail": true
      }
    ],
    "HasFullItemSearchResults": [
      {
        "name": "C_AuctionHouse.HasFullItemSearchResults",
        "count": 3,
        "confidence": 0.6,
        "sample": "if Scan.ScannedItemKey and C_AuctionHouse.HasFullItemSearchResults(Scan.ScannedItemKey) then",
        "retail": true
      }
    ],
    "CanScanCallback": [
      {
        "name": "CanScanCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "if can_scan and self.CanScanCallback then self.CanScanCallback() self.CanScanCallback=nil end",
        "retail": true
      }
    ],
    "GetItemKeyInfo": [
      {
        "name": "C_AuctionHouse.GetItemKeyInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local keyinfo = C_AuctionHouse.GetItemKeyInfo(itemKey);",
        "retail": true
      }
    ],
    "HasSearchResults": [
      {
        "name": "C_AuctionHouse.HasSearchResults",
        "count": 2,
        "confidence": 0.4,
        "sample": "if not C_AuctionHouse.HasSearchResults(itemKey) then",
        "retail": true
      }
    ],
    "SendSearchQuery": [
      {
        "name": "C_AuctionHouse.SendSearchQuery",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_AuctionHouse.SendSearchQuery(itemKey, {}, false);",
        "retail": true
      }
    ],
    "GetNumItemSearchResults": [
      {
        "name": "C_AuctionHouse.GetNumItemSearchResults",
        "count": 3,
        "confidence": 0.6,
        "sample": "local searchresults = C_AuctionHouse.GetNumItemSearchResults(AuctionHouseFrame.ItemSellFrame.listDisplayedItemKey)",
        "retail": true
      }
    ],
    "GetItemSearchResultInfo": [
      {
        "name": "C_AuctionHouse.GetItemSearchResultInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local data = C_AuctionHouse.GetItemSearchResultInfo(AuctionHouseFrame.ItemSellFrame.listDisplayedItemKey,i)",
        "retail": true
      }
    ],
    "GetNumCommoditySearchResults": [
      {
        "name": "C_AuctionHouse.GetNumCommoditySearchResults",
        "count": 3,
        "confidence": 0.6,
        "sample": "local searchresults = C_AuctionHouse.GetNumCommoditySearchResults(desiredID)",
        "retail": true
      }
    ],
    "GetCommoditySearchResultInfo": [
      {
        "name": "C_AuctionHouse.GetCommoditySearchResultInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local data = C_AuctionHouse.GetCommoditySearchResultInfo(desiredID,i)",
        "retail": true
      }
    ],
    "AnalyzeAuctions": [
      {
        "name": "AnalyzeAuctions",
        "count": 7,
        "confidence": 1.0,
        "sample": "Scan:AnalyzeAuctions(\"reset\")",
        "retail": true
      }
    ],
    "Work": [
      {
        "name": "Work",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Scan:Work()",
        "retail": true
      }
    ],
    "GetNumReplicateItems": [
      {
        "name": "C_AuctionHouse.GetNumReplicateItems",
        "count": 9,
        "confidence": 1.0,
        "sample": "local GNRI = C_AuctionHouse.GetNumReplicateItems()",
        "retail": true
      }
    ],
    "IsFullScan": [
      {
        "name": "IsFullScan",
        "count": 5,
        "confidence": 1.0,
        "sample": "if self.Proxy:IsFullScan() then",
        "retail": true
      }
    ],
    "FailCallback": [
      {
        "name": "ZGVG.Scan.FailCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGVG.Scan.FailCallback then ZGVG.Scan.FailCallback() ZGVG.Scan.FailCallback=nil end",
        "retail": true
      }
    ],
    "PrepareBeforeScanning": [
      {
        "name": "PrepareBeforeScanning",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Scan:PrepareBeforeScanning()",
        "retail": true
      }
    ],
    "GetReplicateItemInfo": [
      {
        "name": "C_AuctionHouse.GetReplicateItemInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- C_AuctionHouse.GetReplicateItemInfo(row) causes RILU. GetReplicateItemLINK does NOT!! -- Does too, just maybe not in same frame.",
        "retail": true
      }
    ],
    "GetReplicateItemLink": [
      {
        "name": "C_AuctionHouse.GetReplicateItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "if name then link = C_AuctionHouse.GetReplicateItemLink(row) end",
        "retail": true
      }
    ],
    "GetAuctionItemLink": [
      {
        "name": "GetAuctionItemLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "link = GetAuctionItemLink(\"list\", row)",
        "retail": true
      }
    ],
    "ItemIDStrfromLink": [
      {
        "name": "ItemIDStrfromLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "local IDstring = zc.ItemIDStrfromLink (itemLink);",
        "retail": true
      }
    ],
    "Atr_ILevelHist_Update": [
      {
        "name": "Atr_ILevelHist_Update",
        "count": 1,
        "confidence": 0.2,
        "sample": "Atr_ILevelHist_Update(itemLink)",
        "retail": true
      }
    ],
    "StringSame": [
      {
        "name": "StringSame",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (self.exactMatchText == nil or zc.StringSame (name, self.exactMatchText)) then",
        "retail": true
      }
    ],
    "Atr_FindScanAndInit": [
      {
        "name": "Atr_FindScanAndInit",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.items[IDstring] = Atr_FindScanAndInit (IDstring, name)",
        "retail": true
      }
    ],
    "AddScanItem": [
      {
        "name": "AddScanItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "scn:AddScanItem (count, buyoutPrice, owner, 1, curpage)",
        "retail": true
      }
    ],
    "UpdateItemLink": [
      {
        "name": "UpdateItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "scn:UpdateItemLink (itemLink)",
        "retail": true
      }
    ],
    "DebugItem": [
      {
        "name": "DebugItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "if save_itemId then self:DebugItem(save_itemId) end",
        "retail": true
      }
    ],
    "ResultCallback": [
      {
        "name": "ZGVG.Scan.ResultCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "if ZGVG.Scan.ResultCallback then ZGVG.Scan.ResultCallback() ZGVG.Scan.ResultCallback=nil end",
        "retail": true
      }
    ],
    "QueryAuctionItems": [
      {
        "name": "QueryAuctionItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "--if not (self.queried_by_name or self.queried_by_partial_name or self.queried_by_link or self.WAITFORII_callbacks or ZGV.Gold.Appraiser.AttemptingToBuyout) then ZGV:Debug(\"&gold Scan: Sending abominable empty query\")  QueryAuctionItems(\"chrzaszcz brzmi w trzcinie\", nil, nil, 0, false, -1, false) end",
        "retail": true
      }
    ],
    "ReAnalyze": [
      {
        "name": "ReAnalyze",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:ReAnalyze()",
        "retail": true
      }
    ],
    "GetAnalysis": [
      {
        "name": "GetAnalysis",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:GetAnalysis(itemid)",
        "retail": true
      }
    ],
    "GetPrices": [
      {
        "name": "GetPrices",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:GetPrices(itemid)",
        "retail": true
      }
    ],
    "UIFrameOnUpdate": [
      {
        "name": "Scan.UIFrameOnUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Scan.UIFrameOnUpdate(frame,elapsed)",
        "retail": true
      }
    ],
    "Analyzing": [
      {
        "name": "Analyzing",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif Scan.state==\"SS_ANALYZING\" then  s=(\"Analyzing (%d%%)\"):format((Scan.analysis_progress or 0)*100)",
        "retail": true
      }
    ],
    "Scanning": [
      {
        "name": "Scanning",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif Scan.state==\"SS_SCANNING\" then  s=(\"Scanning (%d%%)\"):format((Scan.scan_progress  or 0)*100)",
        "retail": true
      }
    ],
    "UIFrameOnShow": [
      {
        "name": "Scan.UIFrameOnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan.UIFrameOnShow(frame)",
        "retail": true
      }
    ],
    "UIFrameOnEvent": [
      {
        "name": "Scan.UIFrameOnEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan.UIFrameOnEvent(frame,event,arg1,arg2)",
        "retail": true
      }
    ],
    "ShowScanButton": [
      {
        "name": "ShowScanButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "Scan:ShowScanButton()",
        "retail": true
      }
    ],
    "DebugL": [
      {
        "name": "DebugL",
        "count": 11,
        "confidence": 1.0,
        "sample": "local function DebugL(s,...) self:Debug(color..\":|r \"..s,...) end",
        "retail": true
      }
    ],
    "EstimateTimeUntilHourly": [
      {
        "name": "EstimateTimeUntilHourly",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Scan:EstimateTimeUntilHourly()",
        "retail": true
      }
    ],
    "GetLastReplicateCount": [
      {
        "name": "GetLastReplicateCount",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Scan:GetLastReplicateCount()",
        "retail": true
      }
    ],
    "ReplicateItems": [
      {
        "name": "C_AuctionHouse.ReplicateItems",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_AuctionHouse.ReplicateItems()",
        "retail": true
      }
    ],
    "GetInventoryItems": [
      {
        "name": "GetInventoryItems",
        "count": 5,
        "confidence": 1.0,
        "sample": "Appraiser:GetInventoryItems()",
        "retail": true
      }
    ],
    "UpdateItemInInventory": [
      {
        "name": "UpdateItemInInventory",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:UpdateItemInInventory(invItem)",
        "retail": true
      }
    ],
    "SelectNextShoppingItem": [
      {
        "name": "SelectNextShoppingItem",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZGV:ScheduleTimer(function() Appraiser:SelectNextShoppingItem() end,0)",
        "retail": true
      }
    ],
    "GetSellingItemIndex": [
      {
        "name": "GetSellingItemIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "local currow = self:GetSellingItemIndex(self.ActiveSellingItem)",
        "retail": true
      }
    ],
    "ScrollToSellingItem": [
      {
        "name": "ScrollToSellingItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZGV:ScheduleTimer(function() Appraiser:ScrollToSellingItem() end,0)",
        "retail": true
      }
    ],
    "RefreshSellingItem": [
      {
        "name": "RefreshSellingItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:RefreshSellingItem()",
        "retail": true
      }
    ],
    "ScanAll": [
      {
        "name": "ScanAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:ScanAll()",
        "retail": true
      }
    ],
    "Scan": [
      {
        "name": "Scan",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:Scan(\"scanfast\")",
        "retail": true
      }
    ],
    "UpdateScannedList": [
      {
        "name": "UpdateScannedList",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdateScannedList()",
        "retail": true
      }
    ],
    "UpdateProgressBar": [
      {
        "name": "UpdateProgressBar",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:UpdateProgressBar()",
        "retail": true
      }
    ],
    "CanScanByName": [
      {
        "name": "CanScanByName",
        "count": 3,
        "confidence": 0.6,
        "sample": "elseif mode==\"scannew\" and ZGVG.Scan:CanScanByName() then",
        "retail": true
      }
    ],
    "StartNewItemScan": [
      {
        "name": "StartNewItemScan",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:StartNewItemScan()",
        "retail": true
      }
    ],
    "StartManualScan": [
      {
        "name": "StartManualScan",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:StartManualScan()",
        "retail": true
      }
    ],
    "ScanNextItem": [
      {
        "name": "ScanNextItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ScanNextItem()",
        "retail": true
      }
    ],
    "ProcessBrowseResults": [
      {
        "name": "ProcessBrowseResults",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:ProcessBrowseResults()",
        "retail": true
      }
    ],
    "UpdateCoverFrame": [
      {
        "name": "UpdateCoverFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UpdateCoverFrame()",
        "retail": true
      }
    ],
    "AbortManualScan": [
      {
        "name": "AbortManualScan",
        "count": 3,
        "confidence": 0.6,
        "sample": "if self.manualScanning or self.manualBuyScanning then self:AbortManualScan() else ZGVG.Scan:Abort() end",
        "retail": true
      }
    ],
    "SaveScanTable": [
      {
        "name": "SaveScanTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:SaveScanTable()",
        "retail": true
      }
    ],
    "Appraiser_SetTooltipData": [
      {
        "name": "Appraiser_SetTooltipData",
        "count": 19,
        "confidence": 1.0,
        "sample": "local function Appraiser_SetTooltipData(tooltip, itemLink)",
        "retail": true
      }
    ],
    "AddDoubleLine": [
      {
        "name": "AddDoubleLine",
        "count": 31,
        "confidence": 1.0,
        "sample": "tooltip:AddDoubleLine(\"  |cffeeeeeeCurrent lowest price:|r \",minprice_g)",
        "retail": true
      }
    ],
    "Appraiser_ClearTooltipData": [
      {
        "name": "Appraiser_ClearTooltipData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function Appraiser_ClearTooltipData(tooltip, ...)",
        "retail": true
      }
    ],
    "OnAuctionSetMode": [
      {
        "name": "OnAuctionSetMode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Appraiser:OnAuctionSetMode(f,mode)",
        "retail": true
      }
    ],
    "MakeOptionsButton": [
      {
        "name": "MakeOptionsButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:MakeOptionsButton()",
        "retail": true
      }
    ],
    "GetDisplayMode": [
      {
        "name": "GetDisplayMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local mode = AuctionHouseFrame:GetDisplayMode()",
        "retail": true
      }
    ],
    "DisplayBuyItem": [
      {
        "name": "DisplayBuyItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:DisplayBuyItem()",
        "retail": true
      }
    ],
    "WipeSellHistoricalData": [
      {
        "name": "WipeSellHistoricalData",
        "count": 1,
        "confidence": 0.2,
        "sample": "--Appraiser:WipeSellHistoricalData()",
        "retail": true
      }
    ],
    "WipeSellPricingData": [
      {
        "name": "WipeSellPricingData",
        "count": 1,
        "confidence": 0.2,
        "sample": "--Appraiser:WipeSellPricingData()",
        "retail": true
      }
    ],
    "FocusOnSelectedAuction": [
      {
        "name": "FocusOnSelectedAuction",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:FocusOnSelectedAuction()",
        "retail": true
      }
    ],
    "PostMessageCallback": [
      {
        "name": "PostMessageCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.PostMessageCallback()",
        "retail": true
      }
    ],
    "ClearShoppingItemDetails": [
      {
        "name": "ClearShoppingItemDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "Appraiser:ClearShoppingItemDetails()",
        "retail": true
      }
    ],
    "ShowSearchFrame": [
      {
        "name": "ShowSearchFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "Appraiser:ShowSearchFrame(true)",
        "retail": true
      }
    ],
    "SelectBuyoutRow": [
      {
        "name": "SelectBuyoutRow",
        "count": 1,
        "confidence": 0.2,
        "sample": "--Appraiser:SelectBuyoutRow()",
        "retail": true
      }
    ],
    "GetBuyoutPrice": [
      {
        "name": "GetBuyoutPrice",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:GetBuyoutPrice(Appraiser.SelectedShoppingItem) -- refresh, but leave SelectedBuyAuction alone if it's set.",
        "retail": true
      }
    ],
    "GetShoppingAuctions": [
      {
        "name": "GetShoppingAuctions",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:GetShoppingAuctions()",
        "retail": true
      }
    ],
    "SetBuyoutLabels": [
      {
        "name": "SetBuyoutLabels",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:SetBuyoutLabels()",
        "retail": true
      }
    ],
    "GetTrueItemCount": [
      {
        "name": "Appraiser.GetTrueItemCount",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Appraiser.GetTrueItemCount(item)",
        "retail": true
      }
    ],
    "MarkActiveItem": [
      {
        "name": "MarkActiveItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:MarkActiveItem()",
        "retail": true
      }
    ],
    "UpdateButtonStates": [
      {
        "name": "UpdateButtonStates",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateButtonStates()",
        "retail": true
      }
    ],
    "FindNextBuyout": [
      {
        "name": "FindNextBuyout",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:FindNextBuyout(dfnb)",
        "retail": true
      }
    ],
    "GoToPage": [
      {
        "name": "GoToPage",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZGV.Gold.Scan.Proxy:GoToPage(Appraiser.GoToPage)",
        "retail": true
      }
    ],
    "SelectNextSellingItem": [
      {
        "name": "SelectNextSellingItem",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SelectNextSellingItem()",
        "retail": true
      }
    ],
    "CreateTrackerFrame": [
      {
        "name": "CreateTrackerFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:CreateTrackerFrame()",
        "retail": true
      }
    ],
    "ShowItemTooltip": [
      {
        "name": "ShowItemTooltip",
        "count": 3,
        "confidence": 0.6,
        "sample": "{ title=\"\", width=15, headerwidth=15, titlej=\"LEFT\", textj=\"LEFT\", name=\"icon\", type=\"icon\", onentertooltip=function(row) Appraiser:ShowItemTooltip(row.item) end},",
        "retail": true
      }
    ],
    "MakeInventoryTable": [
      {
        "name": "MakeInventoryTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.Inventory_Frame = self:MakeInventoryTable()",
        "retail": true
      }
    ],
    "MakeBuyTable": [
      {
        "name": "MakeBuyTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.Buy_Frame = self:MakeBuyTable()",
        "retail": true
      }
    ],
    "SetAuctionButtonDisabled": [
      {
        "name": "SetAuctionButtonDisabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Appraiser:SetAuctionButtonDisabled(disabled)",
        "retail": true
      }
    ],
    "ActivateSellItem": [
      {
        "name": "ActivateSellItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ActivateSellItem(row.item)",
        "retail": true
      }
    ],
    "InventoryRowMenu": [
      {
        "name": "InventoryRowMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:InventoryRowMenu(row)",
        "retail": true
      }
    ],
    "ActivateBuyItem": [
      {
        "name": "ActivateBuyItem",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ActivateBuyItem(row.item)",
        "retail": true
      }
    ],
    "ShoppingRowMenu": [
      {
        "name": "ShoppingRowMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShoppingRowMenu(row)",
        "retail": true
      }
    ],
    "BattlePetToolTip_Show": [
      {
        "name": "BattlePetToolTip_Show",
        "count": 1,
        "confidence": 0.2,
        "sample": "BattlePetToolTip_Show(tonumber(BattlePetId), tonumber(BattlePetLevel), tonumber(BattlePetRarity), tonumber(BattlePetHP), tonumber(BattlePetAtt), tonumber(BattlePetSpeed), BattlePetName)",
        "retail": true
      }
    ],
    "SetBagItem": [
      {
        "name": "SetBagItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip:SetBagItem(item.bag,item.slot)",
        "retail": true
      }
    ],
    "SetItemByID": [
      {
        "name": "SetItemByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip:SetItemByID(item.itemid)",
        "retail": true
      }
    ],
    "ShowDisabledTooltip": [
      {
        "name": "ShowDisabledTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Appraiser:ShowDisabledTooltip(object)",
        "retail": true
      }
    ],
    "TabKeyNavigation": [
      {
        "name": "TabKeyNavigation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Appraiser:TabKeyNavigation(parent,orderarray,field)",
        "retail": true
      }
    ],
    "ApplyDebugDisplay": [
      {
        "name": "ApplyDebugDisplay",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Appraiser:ApplyDebugDisplay()",
        "retail": true
      }
    ],
    "AddItemToInventory": [
      {
        "name": "AddItemToInventory",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:AddItemToInventory(bag,slot)",
        "retail": true
      }
    ],
    "SetSellFields": [
      {
        "name": "SetSellFields",
        "count": 1,
        "confidence": 0.2,
        "sample": "Appraiser:SetSellFields()",
        "retail": true
      }
    ],
    "SetSellHistoricalLabels": [
      {
        "name": "SetSellHistoricalLabels",
        "count": 1,
        "confidence": 0.2,
        "sample": "Appraiser:SetSellHistoricalLabels()",
        "retail": true
      }
    ],
    "GetItemKeyFromItem": [
      {
        "name": "C_AuctionHouse.GetItemKeyFromItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "local itemkey = C_AuctionHouse.GetItemKeyFromItem(location)",
        "retail": true
      }
    ],
    "OnOverlayClick": [
      {
        "name": "OnOverlayClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "AuctionHouseFrame.ItemSellFrame:OnOverlayClick()",
        "retail": true
      }
    ],
    "GetItemLocation": [
      {
        "name": "GetItemLocation",
        "count": 2,
        "confidence": 0.4,
        "sample": "location = AuctionHouseFrame.CommoditiesSellFrame.ItemDisplay:GetItemLocation()",
        "retail": true
      },
      {
        "name": "C_Item.GetItemLocation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemLocation() end",
        "retail": true
      }
    ],
    "Poppy": [
      {
        "name": "Poppy",
        "count": 1,
        "confidence": 0.2,
        "sample": "[72237]=ST_HERB,--Rain Poppy  ( or silkweed below )",
        "retail": true
      }
    ],
    "RemoveItemFromBuy": [
      {
        "name": "RemoveItemFromBuy",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:RemoveItemFromBuy(row)",
        "retail": true
      }
    ],
    "RemoveAllItemsFromBuy": [
      {
        "name": "RemoveAllItemsFromBuy",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:RemoveAllItemsFromBuy(row)",
        "retail": true
      }
    ],
    "SearchForBuyItem": [
      {
        "name": "SearchForBuyItem",
        "count": 2,
        "confidence": 0.4,
        "sample": "Appraiser:SearchForBuyItem(item)",
        "retail": true
      }
    ],
    "QueryItem": [
      {
        "name": "QueryItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "AuctionHouseFrame:QueryItem(15,selected.itemKey)",
        "retail": true
      }
    ],
    "SelectBrowseResult": [
      {
        "name": "SelectBrowseResult",
        "count": 1,
        "confidence": 0.2,
        "sample": "AuctionHouseFrame:SelectBrowseResult(selected)",
        "retail": true
      }
    ],
    "Mechanar": [
      {
        "name": "Mechanar",
        "count": 7,
        "confidence": 1.0,
        "sample": "|tip you'll have to complete the Mechanar (Fresh From the Mechanar) And Shadow Labyrinth (The Lexicon Demonica) portions of the dungeon guide in order to recive this quest",
        "retail": true
      }
    ],
    "Labyrinth": [
      {
        "name": "Labyrinth",
        "count": 7,
        "confidence": 1.0,
        "sample": "|tip you'll have to complete the Mechanar (Fresh From the Mechanar) And Shadow Labyrinth (The Lexicon Demonica) portions of the dungeon guide in order to recive this quest",
        "retail": true
      }
    ],
    "Honored": [
      {
        "name": "Honored",
        "count": 1,
        "confidence": 0.2,
        "sample": "If you are below Honored (5,999) you can grind Normal Hellfire Ramparts, Blood Furnace and Shattered Halls.",
        "retail": true
      }
    ],
    "VehicleExit": [
      {
        "name": "VehicleExit",
        "count": 74,
        "confidence": 1.0,
        "sample": "Click the red arrow to get off the bear|script VehicleExit()|outvehicle|c",
        "retail": true
      }
    ],
    "DAILIES": [
      {
        "name": "DAILIES",
        "count": 15,
        "confidence": 1.0,
        "sample": "|tip You must turn in the Up To The Challenge quest before you can accept this quest.  The Up To The Challenge quest is turned in at the end of the ARGENT TOURNAMENT GROUNDS DAILIES (ASPIRANT RANK) guide section.",
        "retail": true
      }
    ],
    "Uncommon": [
      {
        "name": "Uncommon",
        "count": 65,
        "confidence": 1.0,
        "sample": "|tip You can get these by Disenchanting item level 5-16 Uncommon (green) armor and weapons.",
        "retail": true
      }
    ],
    "Rare": [
      {
        "name": "Rare",
        "count": 30,
        "confidence": 1.0,
        "sample": "|tip You can get these by Disenchanting Rare (blue) items from any Outland zone.",
        "retail": true
      }
    ],
    "Epic": [
      {
        "name": "Epic",
        "count": 9,
        "confidence": 1.0,
        "sample": "|tip You can get these by Disenchanting Epic (purple) items from any Outland raids.",
        "retail": true
      }
    ],
    "Concealment": [
      {
        "name": "Concealment",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Potion of Concealment (Rank 1) |learn Potion of Concealment##252400 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Potion": [
      {
        "name": "Potion",
        "count": 13,
        "confidence": 1.0,
        "sample": "Train Coastal Healing Potion (Rank 2) |learn Coastal Healing Potion##252383 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Agility": [
      {
        "name": "Agility",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Battle Potion of Agility (Rank 1) |learn Battle Potion of Agility##279159 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Horizon": [
      {
        "name": "Horizon",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Flask of the Vast Horizon (Rank 1) |learn Flask of the Vast Horizon##252354 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Currents": [
      {
        "name": "Currents",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Flask of the Currents (Rank 1) |learn Flask of the Currents##252348 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Undertow": [
      {
        "name": "Undertow",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Flask of the Undertow (Rank 1) |learn Flask of the Undertow##252357 |goto Boralus/0 74.21,6.53",
        "retail": true
      }
    ],
    "Dagger": [
      {
        "name": "Dagger",
        "count": 6,
        "confidence": 1.0,
        "sample": "Train Stormsteel Dagger (Rank 1) |learn Stormsteel Dagger##253156 |goto Boralus/0 73.40,8.45",
        "retail": true
      }
    ],
    "Rissole": [
      {
        "name": "Rissole",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Abyssal-Fried Rissole (Rank 1) |learn Abyssal-Fried Rissole##297084 |goto Nazjatar/0 37.98,52.91",
        "retail": true
      }
    ],
    "Versatility": [
      {
        "name": "Versatility",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Seal of Versatility (Rank 2) |learn Seal of Versatility##255089 |goto Boralus/0 74.02,11.56",
        "retail": true
      }
    ],
    "Strike": [
      {
        "name": "Strike",
        "count": 43,
        "confidence": 1.0,
        "sample": "Train Pact of Critical Strike (Rank 2) |learn Pact of Critical Strike##255090 |goto Boralus/0 74.02,11.56",
        "retail": true
      }
    ],
    "Navigation": [
      {
        "name": "Navigation",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Weapon Enchant - Quick Navigation (Rank 1) |learn Weapon Enchant - Quick Navigation##268894 |goto Boralus/0 74.02,11.56",
        "retail": true
      }
    ],
    "Brilliance": [
      {
        "name": "Brilliance",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Machinist's Brilliance (Rank 1) |learn Machinist's Brilliance##298433 |goto Nazjatar/0 37.93,53.18",
        "retail": true
      }
    ],
    "War": [
      {
        "name": "War",
        "count": 9,
        "confidence": 1.0,
        "sample": "Train Darkmoon Card of War (Rank 1) |learn Darkmoon Card of War##278527 |goto Boralus/0 73.39,6.32",
        "retail": true
      }
    ],
    "Mittens": [
      {
        "name": "Mittens",
        "count": 6,
        "confidence": 1.0,
        "sample": "Train Notorious Combatant's Satin Mittens (Rank 1) |learn Notorious Combatant's Satin Mittens##294835 |goto Nazjatar/0 38.01,53.59",
        "retail": true
      }
    ],
    "Felslate": [
      {
        "name": "Felslate",
        "count": 29,
        "confidence": 1.0,
        "sample": "|tip Use the \"Leystone Ore & Felslate (Mining Route)\" guide to gather them, if you have Mining.",
        "retail": true
      }
    ],
    "Meat": [
      {
        "name": "Meat",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Cooking\\\\Farming Guides\\\\Aethereal Meat (Bastion)\",{",
        "retail": true
      }
    ],
    "Haunch": [
      {
        "name": "Haunch",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Cooking\\\\Farming Guides\\\\Phantasmal Haunch (Ardenweald)\",{",
        "retail": true
      }
    ],
    "Shank": [
      {
        "name": "Shank",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Cooking\\\\Farming Guides\\\\Shadowy Shank (Ardenweald)\",{",
        "retail": true
      }
    ],
    "Ribs": [
      {
        "name": "Ribs",
        "count": 9,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Cooking\\\\Farming Guides\\\\Tenebrous Ribs (Maldraxxus)\",{",
        "retail": true
      }
    ],
    "Bone": [
      {
        "name": "Bone",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Skinning\\\\Farming Guides\\\\Pallid Bone (Bastion)\",{",
        "retail": true
      }
    ],
    "Silk": [
      {
        "name": "Silk",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Tailoring\\\\Farming Guides\\\\Lightless Silk (Ardenweald)\",{",
        "retail": true
      }
    ],
    "Cloth": [
      {
        "name": "Cloth",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Profession Guides\\\\Tailoring\\\\Farming Guides\\\\Shrouded Cloth (Ardenweald)\",{",
        "retail": true
      }
    ],
    "Juice": [
      {
        "name": "Juice",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Artisanal Berry Juice (Vendor): 13",
        "retail": true
      }
    ],
    "Potato": [
      {
        "name": "Potato",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Ohn'ahran Potato (Vendor): 16",
        "retail": true
      }
    ],
    "Blend": [
      {
        "name": "Blend",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Three-Cheese Blend (Vendor): 14",
        "retail": true
      }
    ],
    "Ingredients": [
      {
        "name": "Ingredients",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Conveniently Packaged Ingredients (Vendor): 128",
        "retail": true
      }
    ],
    "Core": [
      {
        "name": "Core",
        "count": 6,
        "confidence": 1.0,
        "sample": "Click Here to Farm in Molten Core (Best) |confirm",
        "retail": true
      }
    ],
    "Skaggldrynk": [
      {
        "name": "Skaggldrynk",
        "count": 1,
        "confidence": 0.2,
        "sample": "Train Skaggldrynk (Rank 1) |learn Skaggldrynk##188316 |goto Dalaran L/10 42.18,32.31",
        "retail": true
      }
    ],
    "Grace": [
      {
        "name": "Grace",
        "count": 1,
        "confidence": 0.2,
        "sample": "Train Potion of Deadly Grace (Rank 1) |learn Potion of Deadly Grace##188325 |goto Dalaran L/10 42.18,32.30",
        "retail": true
      }
    ],
    "Demon": [
      {
        "name": "Demon",
        "count": 1,
        "confidence": 0.2,
        "sample": "Train Flask of the Seventh Demon (Rank 1) |learn Flask of the Seventh Demon##188340 |goto Dalaran L/10 42.18,32.30",
        "retail": true
      }
    ],
    "Armies": [
      {
        "name": "Armies",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Flask of the Countless Armies (Rank 1) |learn Flask of the Countless Armies##188343 |goto Dalaran L/10 42.18,32.30",
        "retail": true
      }
    ],
    "Scars": [
      {
        "name": "Scars",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Flask of Ten Thousand Scars (Rank 1) |learn Flask of Ten Thousand Scars##188346 |goto Dalaran L/10 42.18,32.30",
        "retail": true
      }
    ],
    "Darkbough": [
      {
        "name": "Darkbough",
        "count": 7,
        "confidence": 1.0,
        "sample": "|tip Use the \"Emerald Nightmare - Darkbough (LFR)\" guide to accomplish this.",
        "retail": true
      }
    ],
    "Waistguard": [
      {
        "name": "Waistguard",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Demonsteel Waistguard (Rank 1) |learn Demonsteel Waistguard##182945 |goto Suramar/0 30.11,53.26",
        "retail": true
      }
    ],
    "Charge": [
      {
        "name": "Charge",
        "count": 3,
        "confidence": 0.6,
        "sample": "Train Gunpowder Charge (Rank 2) |learn Gunpowder Charge##199000 |goto Dalaran L/11 72.19,24.44",
        "retail": true
      }
    ],
    "Aquaducts": [
      {
        "name": "Aquaducts",
        "count": 6,
        "confidence": 1.0,
        "sample": "|tip Use the \"Nighthold - Arcing Aquaducts (LFR)\" raid guide to accomplish this.",
        "retail": true
      }
    ],
    "Loop": [
      {
        "name": "Loop",
        "count": 4,
        "confidence": 0.8,
        "sample": "Train Skystone Loop (Rank 1) |learn Skystone Loop Rank 1##195857 |goto Dalaran L/10 39.82,34.09",
        "retail": true
      }
    ],
    "Pendant": [
      {
        "name": "Pendant",
        "count": 3,
        "confidence": 0.6,
        "sample": "Train Deep Amber Pendant (Rank 1) |learn Deep Amber Pendant Rank 1##195859 |goto Dalaran L/10 39.82,34.09",
        "retail": true
      }
    ],
    "Girdle": [
      {
        "name": "Girdle",
        "count": 2,
        "confidence": 0.4,
        "sample": "Train Gravenscale Girdle (Rank 2) |learn Gravenscale Girdle##194760",
        "retail": true
      }
    ],
    "Chimaera": [
      {
        "name": "Chimaera",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Chimaeras\\\\Green Chimaera (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Drakeadon": [
      {
        "name": "Drakeadon",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Core Hounds\\\\Drake Hounds\\\\Drakeadon (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Devilsaur": [
      {
        "name": "Devilsaur",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Devilsaurs\\\\Green Devilsaur (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Colossi": [
      {
        "name": "Colossi",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Silithids\\\\Silithid Colossi\\\\Damaged Blue Silithid Colossi (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Fox": [
      {
        "name": "Fox",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Spirit Beasts\\\\Spirit Foxes\\\\Lightning Spirit Fox (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Worm": [
      {
        "name": "Worm",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Worms\\\\Ghostly White Worm (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Scarab": [
      {
        "name": "Scarab",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Beetles\\\\Scarabs\\\\Turquoise-Spotted Plum Scarab (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Beetle": [
      {
        "name": "Beetle",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Beetles\\\\Green Beetle (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Boar": [
      {
        "name": "Boar",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Boars\\\\Ghostly Diseased Boar (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Lion": [
      {
        "name": "Lion",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Cats\\\\Lions\\\\White Lion (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Cat": [
      {
        "name": "Cat",
        "count": 29,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Cats\\\\Mystic Cats\\\\Brown and Tan Mystic Cat (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Dog": [
      {
        "name": "Dog",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Dogs\\\\Demon Dogs\\\\White Demon Dog (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Gorilla": [
      {
        "name": "Gorilla",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Gorillas\\\\White Gorilla (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Fez": [
      {
        "name": "Fez",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Monkeys\\\\Black Monkey with Fez (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Ravager": [
      {
        "name": "Ravager",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Ravagers\\\\Orange and Magenta Ravager (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Scorpion": [
      {
        "name": "Scorpion",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Scorpids\\\\Rugged Scorpions\\\\Blue Rugged Scorpion (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Worg": [
      {
        "name": "Worg",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Ground Pets\\\\Wolves\\\\Saber Worgs\\\\Ghostly Black Saber Worg (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Bat": [
      {
        "name": "Bat",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Bats\\\\Ghostly Tan Bat (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Owl": [
      {
        "name": "Owl",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Birds of Prey\\\\Owls\\\\Sapphire Owl (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Vulture": [
      {
        "name": "Vulture",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Carrion Birds\\\\Two-Headed Vultures\\\\Ghostly White Two-Headed Vulture (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Dragonhawk": [
      {
        "name": "Dragonhawk",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Dragonhawks\\\\Black Dragonhawk (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Moth": [
      {
        "name": "Moth",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Moths\\\\Green and Blue Moth (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Wasp": [
      {
        "name": "Wasp",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Wasps\\\\Black Wasp (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Serpent": [
      {
        "name": "Serpent",
        "count": 34,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Flying Pets\\\\Wind Serpents\\\\Spiked Wind Serpents\\\\Blue and White Spiked Wind Serpent (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Crab": [
      {
        "name": "Crab",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Water Pets\\\\Crabs\\\\Spiked Crabs\\\\Gem Crab (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Turtle": [
      {
        "name": "Turtle",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Water Pets\\\\Turtles\\\\Ancient Turtles\\\\Fiery Ancient Turtle (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Zara": [
      {
        "name": "Zara",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip Use the \"Que Zara(lek), Zara(lek)\" Achievement guide to accomplish this.",
        "retail": true
      }
    ],
    "Guide": [
      {
        "name": "Guide",
        "count": 7,
        "confidence": 1.0,
        "sample": "Click Here to Load {b}Dragonflight Full Zones Leveling Guide (Story + Side Quests){} |confirm |loadguide \"Leveling Guides\\\\Dragonflight (10-70)\\\\Full Zones (Story + Side Quests)\\\\Intro & The Waking Shores (Full Zone)\"",
        "retail": true
      }
    ],
    "Zone": [
      {
        "name": "Zone",
        "count": 64,
        "confidence": 1.0,
        "sample": "Click Here to Load the Full Zone (Story + Side Quests) Leveling Guide |confirm |loadguide \"Leveling Guides\\\\The War Within (70-80)\\\\Full Zones (Story + Side Quests)\\\\Intro & Isle of Dorn (Full Zone)\" |or",
        "retail": true
      }
    ],
    "Promotion": [
      {
        "name": "Promotion",
        "count": 1,
        "confidence": 0.2,
        "sample": "This mount is tied to a Steelseries Promotion (unknown if it's obtainable through other sources). |confirm |next",
        "retail": true
      }
    ],
    "Cartel": [
      {
        "name": "Cartel",
        "count": 2,
        "confidence": 0.4,
        "sample": "accept Exalted with the Bilgewater Cartel (Paragon) |only if questactive(85806) |or",
        "retail": true
      }
    ],
    "Dumpsters": [
      {
        "name": "Dumpsters",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Loot Trash Piles, Big Trash Dumpsters (at renown 13), and treasure chests, kill rares, complete world quests, and complete the Scrap Event to loot the Uncovered Strongbox.",
        "retail": true
      }
    ],
    "Basilisk": [
      {
        "name": "Basilisk",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Legion Pets\\\\Ground Pets\\\\Basilisks\\\\Spiny Basilisks\\\\Purple Spiny Basilisk (Legion)\",{",
        "retail": true
      }
    ],
    "Eagle": [
      {
        "name": "Eagle",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Legion Pets\\\\Flying Pets\\\\Birds of Prey\\\\Eagles\\\\Brown Eagle (Legion)\",{",
        "retail": true
      }
    ],
    "Hippogryph": [
      {
        "name": "Hippogryph",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Legion Pets\\\\Flying Pets\\\\Feathermanes\\\\Hippogryphs\\\\Pale Hippogryph (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Rider": [
      {
        "name": "Rider",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Legion Pets\\\\Flying Pets\\\\Feathermanes\\\\Wind Riders\\\\Blue Wind Rider (Rare Spawn)\",{",
        "retail": true
      }
    ],
    "Anniversary": [
      {
        "name": "Anniversary",
        "count": 2,
        "confidence": 0.4,
        "sample": "This pet is only attainable during WoW's 10th Anniversary (November 21, 2014 to January 6, 2015)",
        "retail": true
      }
    ],
    "Battleground": [
      {
        "name": "Battleground",
        "count": 4,
        "confidence": 0.8,
        "sample": "Win 40 Rated Battleground (10v10) Matches |achieve 9236/2 |or",
        "retail": true
      }
    ],
    "Kodo": [
      {
        "name": "Kodo",
        "count": 2,
        "confidence": 0.4,
        "sample": "description=\"This guide will help you acquire the Sunwalker Kodo (Paladin only) mount.\",",
        "retail": true
      }
    ],
    "Warhorse": [
      {
        "name": "Warhorse",
        "count": 2,
        "confidence": 0.4,
        "sample": "description=\"This guide will help you acquire the Thalassian Warhorse (Paladin only) mount.\",",
        "retail": true
      }
    ],
    "Charger": [
      {
        "name": "Charger",
        "count": 4,
        "confidence": 0.8,
        "sample": "description=\"This guide will help you acquire the Thalassian Charger (Paladin only) mount.\",",
        "retail": true
      }
    ],
    "Felsteed": [
      {
        "name": "Felsteed",
        "count": 2,
        "confidence": 0.4,
        "sample": "description=\"This guide will help you acquire the Felsteed (Warlock only) mount.\",",
        "retail": true
      }
    ],
    "Dreadsteed": [
      {
        "name": "Dreadsteed",
        "count": 2,
        "confidence": 0.4,
        "sample": "description=\"This guide will help you acquire the Dreadsteed (Warlock only) mount.\",",
        "retail": true
      }
    ],
    "Player": [
      {
        "name": "Player",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip To change an instance to heroic mode: right click your portait and hover over \"Dungeon Difficulty\", click on 5 Player (Heroic). You should see the entrance portal change into a giant skull.",
        "retail": true
      }
    ],
    "Crusader": [
      {
        "name": "Crusader",
        "count": 16,
        "confidence": 1.0,
        "sample": "The Swift Horde Wolf dropped from the Argent Crusader Tribute Chest in Trial of the Grand Crusader (10H) with all 50 attempts left",
        "retail": true
      }
    ],
    "Raider": [
      {
        "name": "Raider",
        "count": 46,
        "confidence": 1.0,
        "sample": "This mount is a reward for completing the _\"Glory of the Icecrown Raider (10 player)\"_ achievement.",
        "retail": true
      }
    ],
    "Control_": [
      {
        "name": "Control_",
        "count": 2,
        "confidence": 0.4,
        "sample": "The easiest way to attain this achievement is to have some form of _Crowd Control_ (Sheep Excluded).",
        "retail": true
      }
    ],
    "Container": [
      {
        "name": "Container",
        "count": 2,
        "confidence": 0.4,
        "sample": "Buy any Unclaimed Black Market Container(s) you wish.",
        "retail": true
      }
    ],
    "Commanders": [
      {
        "name": "Commanders",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip The best strategy to defeat the Boneguard Commanders is to always make sure your shield is up by using your Defend ability.  Make sure your shield is stacked to 3 charges before you begin the fights.  When the fights begin, immediately use your Charge ability on the Boneguard Commanders (use your Shield-Breaker ability as you circle around to come back to the Boneguard Commanders, if possible).  Stay in very close range and spam your Thrust ability.  Remember to keep your shield maxed at 3 charges, also.  Eventually, the Boneguard Commanders will try to run away to get into Charge range.  When they start to run away, start spamming your Charge ability until you charge them in the back (use your Shield-Breaker ability as you circle around to come back to the Boneguard Commanders, if possible), then get back into melee range and start spamming your Thrust ability again.  Keep repeating this process until you kill 3 Boneguard Commanders.  Also, it may help you try to party with other players while doing this quest, as it will get done much faster and there are always other players in this area doing this same daily quest.",
        "retail": true
      }
    ],
    "Flayedwing": [
      {
        "name": "Flayedwing",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Mounts\\\\Flying Mounts\\\\Covenant Mounts\\\\Kyrian Mounts\\\\Gruesome Flayedwing (Kyrian)\",{",
        "retail": true
      }
    ],
    "Dredwing": [
      {
        "name": "Dredwing",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Mounts\\\\Flying Mounts\\\\Covenant Mounts\\\\Kyrian Mounts\\\\Silvertip Dredwing (Kyrian)\",{",
        "retail": true
      }
    ],
    "Acidmaw": [
      {
        "name": "Acidmaw",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Mounts\\\\Ground Mounts\\\\Covenant Mounts\\\\Kyrian Mounts\\\\Pale Acidmaw (Kyrian)\",{",
        "retail": true
      }
    ],
    "Duskrunner": [
      {
        "name": "Duskrunner",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Mounts\\\\Flying Mounts\\\\Covenant Mounts\\\\Necrolord Mounts\\\\Dauntless Duskrunner (Necrolord)\",{",
        "retail": true
      }
    ],
    "Gorm": [
      {
        "name": "Gorm",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Pets & Mounts Guides\\\\Mounts\\\\Ground Mounts\\\\Miscellaneous Mounts\\\\Vicious War Gorm (Alliance)\",{",
        "retail": true
      }
    ],
    "Beams": [
      {
        "name": "Beams",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"_Suramar Beams (Requires Group)_\\n\"..",
        "retail": true
      }
    ],
    "Toy": [
      {
        "name": "Toy",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"_Lost Cat Toy (Requires Group)_\\n\"..",
        "retail": true
      }
    ],
    "Puzzle": [
      {
        "name": "Puzzle",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"_Jumping Puzzle (Requires Group)_\\n\"..",
        "retail": true
      }
    ],
    "Lava": [
      {
        "name": "Lava",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"_Arcane Lava (Requires Group)_\\n\"..",
        "retail": true
      }
    ],
    "Hivemind": [
      {
        "name": "Hivemind",
        "count": 2,
        "confidence": 0.4,
        "sample": "\"_Claiming The Hivemind (Requires Group)_\",",
        "retail": true
      }
    ],
    "Carrier": [
      {
        "name": "Carrier",
        "count": 123,
        "confidence": 1.0,
        "sample": "collect Cat Carrier (Black Tabby)##8491 |n",
        "retail": true
      }
    ],
    "Elekk": [
      {
        "name": "Elekk",
        "count": 2,
        "confidence": 0.4,
        "sample": "description=\"This guide will help you acquire the Exarch's Elekk (Paladin only) mount.\",",
        "retail": true
      }
    ],
    "Hellscream": [
      {
        "name": "Hellscream",
        "count": 2,
        "confidence": 0.4,
        "sample": "This mount used to be awarded for completing the achievement \"Ahead of the Curve: Garrosh Hellscream (10/25 player)\" in Siege of Orgrimmar",
        "retail": true
      }
    ],
    "Lure": [
      {
        "name": "Lure",
        "count": 2,
        "confidence": 0.4,
        "sample": "use the Beguiling Lure (Optional)##440025",
        "retail": true
      }
    ],
    "Crate": [
      {
        "name": "Crate",
        "count": 11,
        "confidence": 1.0,
        "sample": "buy 1 Rabbit Crate (Snowshoe)##8497 |goto Dun Morogh 70.60,49.00",
        "retail": true
      }
    ],
    "Herald": [
      {
        "name": "Herald",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Pets & Mounts Guides\\\\Battle Pets\\\\Humanoid Pets\\\\Guild Herald (Horde)\")",
        "retail": true
      }
    ],
    "Page": [
      {
        "name": "Page",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Pets & Mounts Guides\\\\Battle Pets\\\\Humanoid Pets\\\\Guild Page (Horde)\")",
        "retail": true
      }
    ],
    "Hatchling": [
      {
        "name": "Hatchling",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Pets & Mounts Guides\\\\Battle Pets\\\\Humanoid Pets\\\\Moonkin Hatchling (Horde)\")",
        "retail": true
      }
    ],
    "Silkworm": [
      {
        "name": "Silkworm",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Pets & Mounts Guides\\\\Hunter Pets\\\\Beast Mastery Exotic Pets\\\\Worms\\\\Silkworms\\\\Purple Silkworm (Rare Spawn)\")",
        "retail": true
      }
    ],
    "Intellect": [
      {
        "name": "Intellect",
        "count": 2,
        "confidence": 0.4,
        "sample": "You will also need a Scroll of Intellect (the level 1 version)",
        "retail": true
      }
    ],
    "Orphanage": [
      {
        "name": "Orphanage",
        "count": 26,
        "confidence": 1.0,
        "sample": "You may only get _three_ of these pets _per year_ from _completing_ the quest lines _Back to the Orphanage (Shattrath)_, _Warden of the Alliance_, and _Back to the Orphanage (Dalaran)_",
        "retail": true
      }
    ],
    "Atticus": [
      {
        "name": "Atticus",
        "count": 6,
        "confidence": 1.0,
        "sample": "|tip Use the \"Atticus (Abomination)\" guide to unlock this vendor if you already haven't.",
        "retail": true
      }
    ],
    "Cage": [
      {
        "name": "Cage",
        "count": 10,
        "confidence": 1.0,
        "sample": "buy Parrot Cage (Cockatiel)##8496 |n",
        "retail": true
      }
    ],
    "Ulduar": [
      {
        "name": "Ulduar",
        "count": 3,
        "confidence": 0.6,
        "sample": "|tip This is only be achieved in Ulduar (25 player) Hard Mode.",
        "retail": true
      }
    ],
    "Observed": [
      {
        "name": "Observed",
        "count": 1,
        "confidence": 0.2,
        "sample": "Earn the \"Observed (25 player)\" Achievement |achieve 3037",
        "retail": true
      }
    ],
    "Press": [
      {
        "name": "Press",
        "count": 4,
        "confidence": 0.8,
        "sample": "rare=[[Kafa Press (Frozen Trail Packer)]],",
        "retail": true
      }
    ],
    "Whelk": [
      {
        "name": "Whelk",
        "count": 4,
        "confidence": 0.8,
        "sample": "rare=[[Manipulator's Talisman on a Glinting Rapana Whelk (65552)]],",
        "retail": true
      }
    ],
    "Ancients": [
      {
        "name": "Ancients",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip When you click the Blade, you will have to fight the three Ancients (one at a time).",
        "retail": true
      }
    ],
    "Terror": [
      {
        "name": "Terror",
        "count": 11,
        "confidence": 1.0,
        "sample": "rare=[[Roardan the Sky Terror (Horde)]],",
        "retail": true
      }
    ],
    "Pools": [
      {
        "name": "Pools",
        "count": 8,
        "confidence": 1.0,
        "sample": "rare=[[Dessicus of the Dead Pools (Horde)]],",
        "retail": true
      }
    ],
    "Igneous": [
      {
        "name": "Igneous",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Crater Lord Igneous (Horde)]],",
        "retail": true
      }
    ],
    "Doomwing": [
      {
        "name": "Doomwing",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Charl Doomwing (Horde)]],",
        "retail": true
      }
    ],
    "Violent": [
      {
        "name": "Violent",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Erosian the Violent (Horde)]],",
        "retail": true
      }
    ],
    "Devourer": [
      {
        "name": "Devourer",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Khargax the Devourer (Horde)]],",
        "retail": true
      }
    ],
    "Praetorian": [
      {
        "name": "Praetorian",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Fungal Praetorian (Horde)]],",
        "retail": true
      }
    ],
    "Biolante": [
      {
        "name": "Biolante",
        "count": 2,
        "confidence": 0.4,
        "sample": "rare=[[Biolante (Horde)]],",
        "retail": true
      }
    ],
    "CancelSpellByName": [
      {
        "name": "CancelSpellByName",
        "count": 15,
        "confidence": 1.0,
        "sample": "|script local d=C_UnitAuras.GetPlayerAuraBySpellID(1214374) if d then CancelSpellByName(d.name) end |only if hasbuff(1214374)",
        "retail": true
      }
    ],
    "DRUID": [
      {
        "name": "DRUID",
        "count": 8,
        "confidence": 1.0,
        "sample": "//DRUID (BALANCE) - START",
        "retail": true
      }
    ],
    "Spellbook": [
      {
        "name": "Spellbook",
        "count": 26,
        "confidence": 1.0,
        "sample": "|tip Open your Spellbook (press P) and move the rest of your abilities to your action bars.",
        "retail": true
      }
    ],
    "Hodir": [
      {
        "name": "Hodir",
        "count": 3,
        "confidence": 0.6,
        "sample": "description=\"This guide section will walk you through completing the daily quests in the Brunnhildar Village region of The Storm Peaks. If you are not Revered with The Sons of Hodir, you will not be able to accept some of the quests in this guide section. To become Revered with The Sons of Hodir, use the The Sons of Hodir (Friendly), The Sons of Hodir (Honored) - Pre-Quest, and The Sons of Hodir (Honored) guide sections in the Reputation section of the Dailies guide.\",",
        "retail": true
      }
    ],
    "Wildercloth": [
      {
        "name": "Wildercloth",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"GOLD\\\\Farming\\\\Tattered Wildercloth/Wildercloth (Tailoring)\")",
        "retail": true
      }
    ],
    "Flesh": [
      {
        "name": "Flesh",
        "count": 34,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"GOLD\\\\Gathering\\\\Abyssal Gulper Eel Flesh/Crescent Saberfish Flesh (Garrison)\")",
        "retail": true
      }
    ],
    "Lotus": [
      {
        "name": "Lotus",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"GOLD\\\\Gathering\\\\Dreamfoil/Black Lotus (15-30)\",{",
        "retail": true
      }
    ],
    "Mushroom": [
      {
        "name": "Mushroom",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"GOLD\\\\Gathering\\\\Ghost Mushroom (Un'Goro Crater)\",{",
        "retail": true
      }
    ],
    "Stranglekelp": [
      {
        "name": "Stranglekelp",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"GOLD\\\\Gathering\\\\Stranglekelp (Speedbarge Diving Helm)\",{",
        "retail": true
      }
    ],
    "Wildvine": [
      {
        "name": "Wildvine",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"GOLD\\\\Gathering\\\\Wildvine (Kill Only)\",{",
        "retail": true
      }
    ],
    "Stone": [
      {
        "name": "Stone",
        "count": 9,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"GOLD\\\\Gathering\\\\Copper Ore/Rough Stone (Horde)\",{",
        "retail": true
      }
    ],
    "SelectGossipOption": [
      {
        "name": "SelectGossipOption",
        "count": 74,
        "confidence": 1.0,
        "sample": "|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex(\"player\", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff(\"player\", i) break end end end)",
        "retail": true
      }
    ],
    "GetBuffDataByIndex": [
      {
        "name": "C_UnitAuras.GetBuffDataByIndex",
        "count": 7,
        "confidence": 1.0,
        "sample": "|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex(\"player\", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff(\"player\", i) break end end end)",
        "retail": true
      }
    ],
    "CancelUnitBuff": [
      {
        "name": "CancelUnitBuff",
        "count": 6,
        "confidence": 1.0,
        "sample": "|script GossipFrame:SelectGossipOption(2); C_Timer.After(11.30, function() for i = 1, 40 do local buff = C_UnitAuras.GetBuffDataByIndex(\"player\", i) if buff and buff.name == 'Magic Wings' then CancelUnitBuff(\"player\", i) break end end end)",
        "retail": true
      }
    ],
    "Day": [
      {
        "name": "Day",
        "count": 2,
        "confidence": 0.4,
        "sample": "|tip These gifts only appear on Christmas Day (December 25th).",
        "retail": true
      }
    ],
    "GetCurrentTitle": [
      {
        "name": "GetCurrentTitle",
        "count": 1,
        "confidence": 0.2,
        "sample": "Equip the {o}Detective{} Title |complete _G.GetCurrentTitle() == 571 |goto Dornogal/0 55.03,28.96 |q 84685 |future",
        "retail": true
      }
    ],
    "Senses": [
      {
        "name": "Senses",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).",
        "retail": true
      }
    ],
    "Suppression": [
      {
        "name": "Suppression",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).",
        "retail": true
      }
    ],
    "Field": [
      {
        "name": "Field",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).",
        "retail": true
      }
    ],
    "Armor": [
      {
        "name": "Armor",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip The buffs are Focused Senses (red), Suppression (purple), Stasis Field (green), and Augmented Armor (blue).",
        "retail": true
      }
    ],
    "Threads": [
      {
        "name": "Threads",
        "count": 3,
        "confidence": 0.6,
        "sample": "|tip Click Gossamer Threads (small blue spools of thread) to get the Gossamer Laces buff.  Click Suspiciously Untouched Harps (light colored wooden statues with strings in them) while the buff is active.",
        "retail": true
      }
    ],
    "Harps": [
      {
        "name": "Harps",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Click Gossamer Threads (small blue spools of thread) to get the Gossamer Laces buff.  Click Suspiciously Untouched Harps (light colored wooden statues with strings in them) while the buff is active.",
        "retail": true
      }
    ],
    "Piles": [
      {
        "name": "Piles",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Click Shimmerdust Piles (purple piles of dirt) to get the Gossamer Laces buff.  Click Suspiciously Untouched Baskets (small grey wooden baskets) while the buff is active.",
        "retail": true
      }
    ],
    "Baskets": [
      {
        "name": "Baskets",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Click Shimmerdust Piles (purple piles of dirt) to get the Gossamer Laces buff.  Click Suspiciously Untouched Baskets (small grey wooden baskets) while the buff is active.",
        "retail": true
      }
    ],
    "Freshleaves": [
      {
        "name": "Freshleaves",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Click Freshleaves (small green leafy plants) to get the Minty Fresh Breath buff.  Click Suspiciously Untouched Soulweb (small grey spirals) while the buff is active.",
        "retail": true
      }
    ],
    "Soulweb": [
      {
        "name": "Soulweb",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Click Freshleaves (small green leafy plants) to get the Minty Fresh Breath buff.  Click Suspiciously Untouched Soulweb (small grey spirals) while the buff is active.",
        "retail": true
      }
    ],
    "Flytrap": [
      {
        "name": "Flytrap",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Leveling Guides\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Flytrap (Abomination)\",{",
        "retail": true
      }
    ],
    "Marz": [
      {
        "name": "Marz",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Leveling Guides\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Marz (Abomination)\",{",
        "retail": true
      }
    ],
    "Roseboil": [
      {
        "name": "Roseboil",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Leveling Guides\\\\Shadowlands (50-70)\\\\Necrolords Covenant\\\\Abomination Factory\\\\Roseboil (Abomination)\",{",
        "retail": true
      }
    ],
    "Information": [
      {
        "name": "Information",
        "count": 1,
        "confidence": 0.2,
        "sample": "Ask Lady Ilinca for More Information (Optional) |q 61704/2 |goto Revendreth/0 28.48,41.06",
        "retail": true
      }
    ],
    "Azsunica": [
      {
        "name": "Azsunica",
        "count": 4,
        "confidence": 0.8,
        "sample": "click Encyclopedia Azsunica (K-M)##250373",
        "retail": true
      }
    ],
    "Client": [
      {
        "name": "Client",
        "count": 2,
        "confidence": 0.4,
        "sample": "Use the Zygor Guides Client (desktop) to install Trend Data. |complete (ZGV.Gold.servertrends ~= nil)",
        "retail": true
      }
    ],
    "Flame": [
      {
        "name": "Flame",
        "count": 7,
        "confidence": 1.0,
        "sample": "|tip You must infuse your Heart of Azeroth with The Crucible of Flame (Rank 3) and relog if Kalecgos is not offering this quest.",
        "retail": true
      }
    ],
    "Waiver": [
      {
        "name": "Waiver",
        "count": 2,
        "confidence": 0.4,
        "sample": "use Tally's Waiver (Unsigned)##30540",
        "retail": true
      }
    ],
    "Difficulty": [
      {
        "name": "Difficulty",
        "count": 1,
        "confidence": 0.2,
        "sample": "Clear Zekvir on Tier ? Difficulty (Solo or in a Group)|achieve 40103",
        "retail": true
      }
    ],
    "Raid": [
      {
        "name": "Raid",
        "count": 25,
        "confidence": 1.0,
        "sample": "Inside the Liberation of Undermine Raid ({g}Normal or Higher Difficulty{}):",
        "retail": true
      }
    ],
    "Ruth": [
      {
        "name": "Ruth",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Achievement Guides\\\\Collections\\\\Appearances\\\\Legion\\\\Ruth(less) is More\")",
        "retail": true
      }
    ],
    "Male": [
      {
        "name": "Male",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Achievement Guides\\\\Collections\\\\Appearances\\\\Legion\\\\Why Male(volent) Models?\")",
        "retail": true
      }
    ],
    "Force": [
      {
        "name": "Force",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Achievement Guides\\\\Dungeons & Raids\\\\Legion Raids\\\\Use the Force(s)\")",
        "retail": true
      }
    ],
    "Gruul": [
      {
        "name": "Gruul",
        "count": 2,
        "confidence": 0.4,
        "sample": "Skulloc, Son of Gruul (Iron Docks) |achieve 9619/2",
        "retail": true
      }
    ],
    "Viryx": [
      {
        "name": "Viryx",
        "count": 2,
        "confidence": 0.4,
        "sample": "High Sage Viryx (Skyreach) |achieve 9619/4",
        "retail": true
      }
    ],
    "Yainu": [
      {
        "name": "Yainu",
        "count": 2,
        "confidence": 0.4,
        "sample": "Yainu (The Everbloom) |achieve 9619/5",
        "retail": true
      }
    ],
    "Tovra": [
      {
        "name": "Tovra",
        "count": 2,
        "confidence": 0.4,
        "sample": "Skylord Tovra (Grimrail Depot) |achieve 9619/6",
        "retail": true
      }
    ],
    "Zaela": [
      {
        "name": "Zaela",
        "count": 2,
        "confidence": 0.4,
        "sample": "Warlord Zaela (Upper Blackrock Spire) |achieve 9619/8",
        "retail": true
      }
    ],
    "Blackhand": [
      {
        "name": "Blackhand",
        "count": 2,
        "confidence": 0.4,
        "sample": "Warlord Blackhand (Blackrock Foundry) |achieve 9619/10",
        "retail": true
      }
    ],
    "Superior": [
      {
        "name": "Superior",
        "count": 7,
        "confidence": 1.0,
        "sample": "For this achievement you will need to simply equip a Superior (blue) item of at least _item level 608_ in all your Armor and Weapon slots",
        "retail": true
      }
    ],
    "Damage": [
      {
        "name": "Damage",
        "count": 6,
        "confidence": 1.0,
        "sample": "Choose _\"Start Basic Damage (Bronze)\"_",
        "retail": true
      }
    ],
    "Tank": [
      {
        "name": "Tank",
        "count": 8,
        "confidence": 1.0,
        "sample": "Choose _\"Start Basic Tank (Bronze)\"_",
        "retail": true
      }
    ],
    "Doubt": [
      {
        "name": "Doubt",
        "count": 4,
        "confidence": 0.8,
        "sample": "Sha of Doubt (Heroic) |achieve 6926/1",
        "retail": true
      }
    ],
    "Violence": [
      {
        "name": "Violence",
        "count": 4,
        "confidence": 0.8,
        "sample": "Sha of Violence (Heroic) |achieve 6926/3",
        "retail": true
      }
    ],
    "Fear": [
      {
        "name": "Fear",
        "count": 17,
        "confidence": 1.0,
        "sample": "Sha of Fear (Normal or Heroic) |achieve 6926/6",
        "retail": true
      }
    ],
    "Rage": [
      {
        "name": "Rage",
        "count": 9,
        "confidence": 1.0,
        "sample": "|tip Fel Rage (Player) is a 30 second debuff that increases armor, health, healing, damage, and size. Gurtogg will only attack the player that has this.",
        "retail": true
      }
    ],
    "Eye": [
      {
        "name": "Eye",
        "count": 18,
        "confidence": 1.0,
        "sample": "_The Mind's Eye (Inside)_",
        "retail": true
      }
    ],
    "Collection": [
      {
        "name": "Collection",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\World Events\\\\Brawler's Guild\\\\Deck Your Collection (Season 1)\",{",
        "retail": true
      }
    ],
    "Genesaur": [
      {
        "name": "Genesaur",
        "count": 1,
        "confidence": 0.2,
        "sample": "Power of the Genesaur (or Chains of Iron) |achieve 8923/3",
        "retail": true
      }
    ],
    "Iron": [
      {
        "name": "Iron",
        "count": 1,
        "confidence": 0.2,
        "sample": "Chains of Iron (or Power of the Genesaur) |achieve 8923/3",
        "retail": true
      }
    ],
    "Fel": [
      {
        "name": "Fel",
        "count": 2,
        "confidence": 0.4,
        "sample": "|tip So players with the Fire debuff must run into the Fire (Red) portal, players with the Fel debuff must run into the Fel (Green) portal, and players with the Shadow debuff must run into the Shadow (Purple) portal.",
        "retail": true
      }
    ],
    "Eat": [
      {
        "name": "Eat",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\All You Can Eat (10 player)\",{",
        "retail": true
      }
    ],
    "This": [
      {
        "name": "This",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Been Waiting a Long Time for This (10 player)\",{",
        "retail": true
      }
    ],
    "Boned": [
      {
        "name": "Boned",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Boned (10 player)\",{",
        "retail": true
      }
    ],
    "Hall": [
      {
        "name": "Hall",
        "count": 36,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Crimson Hall (10 player)\",{",
        "retail": true
      }
    ],
    "Oozes": [
      {
        "name": "Oozes",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Dances with Oozes(10 player)\",{",
        "retail": true
      }
    ],
    "Few": [
      {
        "name": "Few",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Dedicated Few (10 player)\",{",
        "retail": true
      }
    ],
    "Scion": [
      {
        "name": "Scion",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Denyin' the Scion (10 player)\",{",
        "retail": true
      }
    ],
    "Disk": [
      {
        "name": "Disk",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat a Scion of Eternity While Riding Hover Disk (10 player) |achieve 2148 |goto The Eye of Eternity 45.00,56.80",
        "retail": true
      }
    ],
    "Naxxramas": [
      {
        "name": "Naxxramas",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Fall of Naxxramas (10 player)\",{",
        "retail": true
      }
    ],
    "Quarter": [
      {
        "name": "Quarter",
        "count": 52,
        "confidence": 1.0,
        "sample": "The Arachnid Quarter (10 player) |achieve 576/1",
        "retail": true
      }
    ],
    "Demise": [
      {
        "name": "Demise",
        "count": 20,
        "confidence": 1.0,
        "sample": "Sapphiron's Demise (10 player) |achieve 576/5",
        "retail": true
      }
    ],
    "Defeat": [
      {
        "name": "Defeat",
        "count": 20,
        "confidence": 1.0,
        "sample": "Kel'Thuzad's Defeat (10 player) |achieve 576/6",
        "retail": true
      }
    ],
    "Shortage": [
      {
        "name": "Shortage",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Flu Shot Shortage (10 player)\",{",
        "retail": true
      }
    ],
    "Blows": [
      {
        "name": "Blows",
        "count": 24,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Gonna Go When the Volcano Blows (10 player)\",{",
        "retail": true
      }
    ],
    "Plagueworks": [
      {
        "name": "Plagueworks",
        "count": 28,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Heroic: The Plagueworks (10 player)\",{",
        "retail": true
      }
    ],
    "Club": [
      {
        "name": "Club",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Hundred Club (10 player)\",{",
        "retail": true
      }
    ],
    "Boat": [
      {
        "name": "Boat",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\I'm on a Boat (10 player)\",{",
        "retail": true
      }
    ],
    "Mess": [
      {
        "name": "Mess",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\I've Gone and Made a Mess (10 player)\",{",
        "retail": true
      }
    ],
    "Enough": [
      {
        "name": "Enough",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Just Can't Get Enough (10 player)\",{",
        "retail": true
      }
    ],
    "Thuzad": [
      {
        "name": "Thuzad",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat Kel'Thuzad (10 player) |achieve 574 |goto Naxxramas/6 36.50,22.30",
        "retail": true
      }
    ],
    "Him": [
      {
        "name": "Him",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Make Quick Werk of Him (10 player)\",{",
        "retail": true
      }
    ],
    "Out": [
      {
        "name": "Out",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Momma Said Knock You Out (10 player)\",{",
        "retail": true
      }
    ],
    "Faerlina": [
      {
        "name": "Faerlina",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat Grand Widow Faerlina (10 player) |achieve 1997 |goto Naxxramas/2 44.10,36.00",
        "retail": true
      }
    ],
    "Vile": [
      {
        "name": "Vile",
        "count": 18,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Neck-Deep in Vile (10 Player)\",{",
        "retail": true
      }
    ],
    "Explode": [
      {
        "name": "Explode",
        "count": 4,
        "confidence": 0.8,
        "sample": "Kill the Vile Spirits Before They Explode (10-player) |achieve 4581 |goto Icecrown Citadel/7 49.80,52.80",
        "retail": true
      }
    ],
    "Jormungars": [
      {
        "name": "Jormungars",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Not One, But Two Jormungars (10 player)\",{",
        "retail": true
      }
    ],
    "Shy": [
      {
        "name": "Shy",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Once Bitten, Twice Shy (10 player)\",{",
        "retail": true
      }
    ],
    "Whisperer": [
      {
        "name": "Whisperer",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Orb Whisperer (10 player)\",{",
        "retail": true
      }
    ],
    "Jockey": [
      {
        "name": "Jockey",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Portal Jockey (10 player)\",{",
        "retail": true
      }
    ],
    "It": [
      {
        "name": "It",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Resilience Will Fix It (10 player)\",{",
        "retail": true
      }
    ],
    "Dance": [
      {
        "name": "Dance",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Saftey Dance(10 player)\",{",
        "retail": true
      }
    ],
    "Pepper": [
      {
        "name": "Pepper",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Salt and Pepper (10 player)\",{",
        "retail": true
      }
    ],
    "Less": [
      {
        "name": "Less",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat the Twin Val'kyr in 3 Minutes or Less (10 player) |achieve 3799 |goto Trial of the Crusader 46.30,64.90",
        "retail": true
      }
    ],
    "Sapphiron": [
      {
        "name": "Sapphiron",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat Sapphiron (10 player) |achieve 572 |goto Naxxramas/6 56.50,67.50",
        "retail": true
      }
    ],
    "Thaddius": [
      {
        "name": "Thaddius",
        "count": 4,
        "confidence": 0.8,
        "sample": "Defeat Thaddius (10 player) |achieve 2178 |goto Naxxramas 26.50,14.50",
        "retail": true
      }
    ],
    "Leviathan": [
      {
        "name": "Leviathan",
        "count": 2,
        "confidence": 0.4,
        "sample": "|tip Just simply kill Flame Leviathan (without boarding it and destroying its two defense turrets).",
        "retail": true
      }
    ],
    "Downfall": [
      {
        "name": "Downfall",
        "count": 22,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\The Spellweaver's Downfall (10 player)\",{",
        "retail": true
      }
    ],
    "Malygos": [
      {
        "name": "Malygos",
        "count": 8,
        "confidence": 1.0,
        "sample": "Defeat Malygos (10 player) |achieve 622 |goto The Eye of Eternity 38.40,49.80",
        "retail": true
      }
    ],
    "Loser": [
      {
        "name": "Loser",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Spore Loser(10 player)\",{",
        "retail": true
      }
    ],
    "Subtraction": [
      {
        "name": "Subtraction",
        "count": 12,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Subtraction (10 player)\",{",
        "retail": true
      }
    ],
    "Spike": [
      {
        "name": "Spike",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Three Sixty Pain Spike (10 player)\",{",
        "retail": true
      }
    ],
    "Assist": [
      {
        "name": "Assist",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\Twilight Assist (10 player)\",{",
        "retail": true
      }
    ],
    "Eternity": [
      {
        "name": "Eternity",
        "count": 26,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Dungeons & Raids\\\\Northrend Raids\\\\You Don't Have an Eternity (10 player)\",{",
        "retail": true
      }
    ],
    "Shock": [
      {
        "name": "Shock",
        "count": 10,
        "confidence": 1.0,
        "sample": "No player hit by Static Shock (Electron) |achieve 5307/1",
        "retail": true
      }
    ],
    "Annihilator": [
      {
        "name": "Annihilator",
        "count": 2,
        "confidence": 0.4,
        "sample": "No player hit by Arcane Annihilator (Arcanotron) |achieve 5307/2",
        "retail": true
      }
    ],
    "Bomb": [
      {
        "name": "Bomb",
        "count": 13,
        "confidence": 1.0,
        "sample": "No player hit by Poison Bomb (Toxitron) |achieve 5307/3",
        "retail": true
      }
    ],
    "Flamthrower": [
      {
        "name": "Flamthrower",
        "count": 2,
        "confidence": 0.4,
        "sample": "No more than one player hit by each Flamthrower (Magmatron) |achieve 5307/4",
        "retail": true
      }
    ],
    "Mana": [
      {
        "name": "Mana",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip During phase 2, dealing damage will cause her to lose Mana (not health). After dealing some damage she will cast Twilight Extinction. After the cast, deal more damage to lower her Mana once again and then kill the two Pulsing Twilight Eggs that spawn to each side of her.",
        "retail": true
      }
    ],
    "Arachnophobia": [
      {
        "name": "Arachnophobia",
        "count": 4,
        "confidence": 0.8,
        "sample": "Arachnophobia (10 player) |achieve 2137/2",
        "retail": true
      }
    ],
    "Together": [
      {
        "name": "Together",
        "count": 4,
        "confidence": 0.8,
        "sample": "And They Would All Go Down Together (10 player) |achieve 2137/14",
        "retail": true
      }
    ],
    "Squirrels": [
      {
        "name": "Squirrels",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\General\\\\To All The Squirrels (Loved, Shared, Cared)/Pest Control\",{",
        "retail": true
      }
    ],
    "Lady": [
      {
        "name": "Lady",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Crazy Cat Lady (10 player)\",{",
        "retail": true
      }
    ],
    "Disarmed": [
      {
        "name": "Disarmed",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Disarmed (10 player)\",{",
        "retail": true
      }
    ],
    "Firefighter": [
      {
        "name": "Firefighter",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Firefighter (10 player)\",{",
        "retail": true
      }
    ],
    "Heartbreaker": [
      {
        "name": "Heartbreaker",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Heartbreaker (10 player)\",{",
        "retail": true
      }
    ],
    "Steelbreaker": [
      {
        "name": "Steelbreaker",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\I Choose You, Steelbreaker (10 player)\",{",
        "retail": true
      }
    ],
    "Morning": [
      {
        "name": "Morning",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\I Love the Smell of Saronite in the Morning (10 player)\",{",
        "retail": true
      }
    ],
    "Wood": [
      {
        "name": "Wood",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Knock, Knock, Knock on Wood (10 player)\",{",
        "retail": true
      }
    ],
    "Illusion": [
      {
        "name": "Illusion",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Lose Your Illusion (10 player)\",{",
        "retail": true
      }
    ],
    "Darkness": [
      {
        "name": "Darkness",
        "count": 9,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\One Light in the Darkness (10 player)\",{",
        "retail": true
      }
    ],
    "Furnace": [
      {
        "name": "Furnace",
        "count": 15,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Achievement Guides\\\\Legacy\\\\Raids\\\\Stokin' the Furnace (10 player)\",{",
        "retail": true
      }
    ],
    "Sentinels": [
      {
        "name": "Sentinels",
        "count": 1,
        "confidence": 0.2,
        "sample": "Feed Ribs to Sentinels (5) |q 29318/1 |goto Darnassus 52.20,35.60",
        "retail": true
      }
    ],
    "Mountain": [
      {
        "name": "Mountain",
        "count": 1,
        "confidence": 0.2,
        "sample": "Click here to load the \"Redridge Mountain (15-70)\" leveling guide |confirm |next \"Leveling Guides\\\\Classic (1-70)\\\\Eastern Kingdoms\\\\Redridge Mountains (7-70)\"",
        "retail": true
      }
    ],
    "Monastery": [
      {
        "name": "Monastery",
        "count": 13,
        "confidence": 1.0,
        "sample": "//Scarlet Monastery (6m 1s)",
        "retail": true
      }
    ],
    "Scholomance": [
      {
        "name": "Scholomance",
        "count": 11,
        "confidence": 1.0,
        "sample": "//Scholomance (7m 29s)",
        "retail": true
      }
    ],
    "Keep": [
      {
        "name": "Keep",
        "count": 19,
        "confidence": 1.0,
        "sample": "//Shadowfang Keep (9m 47s)",
        "retail": true
      }
    ],
    "Stockade": [
      {
        "name": "Stockade",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Stockade (4m 16s)",
        "retail": true
      }
    ],
    "Uldaman": [
      {
        "name": "Uldaman",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Uldaman (9m 20s)",
        "retail": true
      }
    ],
    "Spire": [
      {
        "name": "Spire",
        "count": 9,
        "confidence": 1.0,
        "sample": "//Blackrock Spire (12m 4s) 4.97",
        "retail": true
      }
    ],
    "Tides": [
      {
        "name": "Tides",
        "count": 7,
        "confidence": 1.0,
        "sample": "//Throne of Tides (11m 30s) 5.22",
        "retail": true
      }
    ],
    "Pens": [
      {
        "name": "Pens",
        "count": 5,
        "confidence": 1.0,
        "sample": "//The Slave Pens (7m 15s) 8.28",
        "retail": true
      }
    ],
    "Steamvault": [
      {
        "name": "Steamvault",
        "count": 5,
        "confidence": 1.0,
        "sample": "//The Steamvault (6m 50s) 8.78",
        "retail": true
      }
    ],
    "Underbog": [
      {
        "name": "Underbog",
        "count": 7,
        "confidence": 1.0,
        "sample": "//The Underbog (8m 26s) 7.11",
        "retail": true
      }
    ],
    "Tombs": [
      {
        "name": "Tombs",
        "count": 7,
        "confidence": 1.0,
        "sample": "//Mana-Tombs (5m 51s) 10.26",
        "retail": true
      }
    ],
    "Crypts": [
      {
        "name": "Crypts",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Auchenai Crypts (5m 58s) 10.06",
        "retail": true
      }
    ],
    "Arcatraz": [
      {
        "name": "Arcatraz",
        "count": 5,
        "confidence": 1.0,
        "sample": "//The Arcatraz (9m 2s) 6.64",
        "retail": true
      }
    ],
    "Botanica": [
      {
        "name": "Botanica",
        "count": 7,
        "confidence": 1.0,
        "sample": "//The Botanica (6m 7s) 9.81",
        "retail": true
      }
    ],
    "Oculus": [
      {
        "name": "Oculus",
        "count": 5,
        "confidence": 1.0,
        "sample": "//The Oculus (8m 24s) 7.14",
        "retail": true
      }
    ],
    "Nerub": [
      {
        "name": "Nerub",
        "count": 7,
        "confidence": 1.0,
        "sample": "//Azjol-Nerub (4m 4s) 14.75",
        "retail": true
      }
    ],
    "Kingdom": [
      {
        "name": "Kingdom",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Ahn'Kahet: The Old Kingdom (6m 57s) 8.63",
        "retail": true
      }
    ],
    "Saron": [
      {
        "name": "Saron",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Pit of Saron (8m 53s) 6.75",
        "retail": true
      }
    ],
    "Reflection": [
      {
        "name": "Reflection",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Halls of Reflection (10m 48s) 5.56",
        "retail": true
      }
    ],
    "Lightning": [
      {
        "name": "Lightning",
        "count": 9,
        "confidence": 1.0,
        "sample": "//Halls of Lightning (8m 8s) 7.38",
        "retail": true
      }
    ],
    "Batol": [
      {
        "name": "Batol",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Grim Batol (13m 31s) 4.44",
        "retail": true
      }
    ],
    "Stonecore": [
      {
        "name": "Stonecore",
        "count": 7,
        "confidence": 1.0,
        "sample": "//The Stonecore (13m 6s) 4.58",
        "retail": true
      }
    ],
    "Chasm": [
      {
        "name": "Chasm",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Ragefire Chasm (3m00s)",
        "retail": true
      }
    ],
    "Gundrak": [
      {
        "name": "Gundrak",
        "count": 7,
        "confidence": 1.0,
        "sample": "//Gundrak (8m43s) 6.88",
        "retail": true
      }
    ],
    "Kraul": [
      {
        "name": "Kraul",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Razorfen Kraul (7m 10s) 8.37",
        "retail": true
      }
    ],
    "Downs": [
      {
        "name": "Downs",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Razorfen Downs (8m 48s) 6.82",
        "retail": true
      }
    ],
    "Farrak": [
      {
        "name": "Farrak",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Zul'Farrak (10m 2s) 5.98",
        "retail": true
      }
    ],
    "Morass": [
      {
        "name": "Morass",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Caverns of Time The Black Morass (10m 20s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Ramparts": [
      {
        "name": "Ramparts",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Hellfire Ramparts (MISSING TIME)",
        "retail": true
      }
    ],
    "Champion": [
      {
        "name": "Champion",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Trial of the Champion (MISSING TIME)",
        "retail": true
      }
    ],
    "Purple": [
      {
        "name": "Purple",
        "count": 1,
        "confidence": 0.2,
        "sample": "//Maraudon Purple (4m 38s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Falls": [
      {
        "name": "Falls",
        "count": 3,
        "confidence": 0.6,
        "sample": "//Maraudon Falls (6m 37s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Orange": [
      {
        "name": "Orange",
        "count": 1,
        "confidence": 0.2,
        "sample": "//Maraudon Orange (3m 29s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Gardens": [
      {
        "name": "Gardens",
        "count": 5,
        "confidence": 1.0,
        "sample": "//Diremaul Gardens (9m 32s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Warpwood": [
      {
        "name": "Warpwood",
        "count": 1,
        "confidence": 0.2,
        "sample": "//Diremaul Warpwood (10m 40s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "Ogres": [
      {
        "name": "Ogres",
        "count": 1,
        "confidence": 0.2,
        "sample": "//Dire Maul Ogres (10m 35s) (MISSING NORMAL DROPS)",
        "retail": true
      }
    ],
    "PST": [
      {
        "name": "PST",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip It allegedly appears between 18:30 PST (6:30pm PST) and 20:30 (8:30pm PST).",
        "retail": true
      }
    ],
    "Sun": [
      {
        "name": "Sun",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Dungeons\\\\Gate of the Setting Sun (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Approach": [
      {
        "name": "Approach",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Heart of Fear LFR The Dread Approach (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Palace": [
      {
        "name": "Palace",
        "count": 20,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Dungeons\\\\Mogu'shan Palace (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Vaults": [
      {
        "name": "Vaults",
        "count": 14,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Mogu'shan Vaults (Normal 10)\"] = {",
        "retail": true
      }
    ],
    "Mysteries": [
      {
        "name": "Mysteries",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Mogu'shan Vaults LFR The Vault of Mysteries (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Underhold": [
      {
        "name": "Underhold",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Siege of Orgrimmar LFR The Underhold (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Brewery": [
      {
        "name": "Brewery",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Dungeons\\\\Stormstout Brewery (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Spring": [
      {
        "name": "Spring",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Terrace of Endless Spring (Normal 10)\"] = {",
        "retail": true
      }
    ],
    "LFR": [
      {
        "name": "LFR",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Terrace of Endless Spring LFR (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Shaping": [
      {
        "name": "Shaping",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Throne of Thunder LFR Halls of Flesh-Shaping (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Storms": [
      {
        "name": "Storms",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Mists of Pandaria Raids\\\\Throne of Thunder LFR Pinnacle of Storms (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Bolt": [
      {
        "name": "Bolt",
        "count": 20,
        "confidence": 1.0,
        "sample": "|tip Frost Bolt (single) inflicts 10,000-13,000 Frost damage and reduces movement speed by 50% for 4 seconds.",
        "retail": true
      }
    ],
    "Well_": [
      {
        "name": "Well_",
        "count": 4,
        "confidence": 0.8,
        "sample": "|tip She will need to be tanked and moved when she creates a _Gravity Well_ (purple circle with that deals shadow damage).",
        "retail": true
      }
    ],
    "Soul": [
      {
        "name": "Soul",
        "count": 13,
        "confidence": 1.0,
        "sample": "Click here if you are queueing for the First wing of Dragon Soul (Siege of Wyrmrest Temple) |next \"First_Wing_DS\"",
        "retail": true
      }
    ],
    "LeaveInstanceParty": [
      {
        "name": "LeaveInstanceParty",
        "count": 38,
        "confidence": 1.0,
        "sample": "'|script LeaveInstanceParty()",
        "retail": true
      }
    ],
    "Fall": [
      {
        "name": "Fall",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Theramore's Fall (10-70)\",{",
        "retail": true
      }
    ],
    "Landing": [
      {
        "name": "Landing",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Lion's Landing (20-70)\",{",
        "retail": true
      }
    ],
    "Seas": [
      {
        "name": "Seas",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Battle on the High Seas (40-70)\",{",
        "retail": true
      }
    ],
    "Snow": [
      {
        "name": "Snow",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Blood in the Snow (40-70)\",{",
        "retail": true
      }
    ],
    "Ragefire": [
      {
        "name": "Ragefire",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\The Secrets of Ragefire (40-70)\",{",
        "retail": true
      }
    ],
    "Dazar": [
      {
        "name": "Dazar",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Dungeons\\\\Atal'Dazar (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Devotion": [
      {
        "name": "Devotion",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Ny'alotha, the Waking City, Halls of Devotion (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Destiny": [
      {
        "name": "Destiny",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Ny'alotha, the Waking City, Vision of Destiny (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Dream": [
      {
        "name": "Dream",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Ny'alotha, the Waking City, The Waking Dream (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Sethraliss": [
      {
        "name": "Sethraliss",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Dungeons\\\\Temple of Sethraliss (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Devoted": [
      {
        "name": "Devoted",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Eternal Palace, Depths of the Devoted (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Reception": [
      {
        "name": "Reception",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Eternal Palace, The Grand Reception (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Dagor": [
      {
        "name": "Dagor",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Dungeons\\\\Tol Dagor (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Uldir": [
      {
        "name": "Uldir",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Uldir (Normal )\"] = {",
        "retail": true
      }
    ],
    "Containment": [
      {
        "name": "Containment",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Uldir, Halls of Containment (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Descent": [
      {
        "name": "Descent",
        "count": 16,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Uldir, Crimson Descent (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Corruption": [
      {
        "name": "Corruption",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Uldir, Heart of Corruption (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Manor": [
      {
        "name": "Manor",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Dungeons\\\\Waycrest Manor (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "HasFullControl": [
      {
        "name": "HasFullControl",
        "count": 6,
        "confidence": 1.0,
        "sample": "Jump down the hole |complete not _G.HasFullControl()",
        "retail": true
      }
    ],
    "Ain": [
      {
        "name": "Ain",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Emerald Nightmare - Rift of Ain (LFR)\",{",
        "retail": true
      }
    ],
    "Guardians": [
      {
        "name": "Guardians",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Emerald Nightmare - Tormented Guardians (LFR)\",{",
        "retail": true
      }
    ],
    "Rise": [
      {
        "name": "Rise",
        "count": 18,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Nighthold - Betrayer's Rise (LFR)\",{",
        "retail": true
      }
    ],
    "Nightspire": [
      {
        "name": "Nightspire",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Nighthold - Nightspire (LFR)\",{",
        "retail": true
      }
    ],
    "Athenaeum": [
      {
        "name": "Athenaeum",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Nighthold - Royal Athenaeum (LFR)\",{",
        "retail": true
      }
    ],
    "Suffusion": [
      {
        "name": "Suffusion",
        "count": 24,
        "confidence": 1.0,
        "sample": "|tip When standing on the Lunar Suffusion (when the floor is white), you will gain a stacking debuff, increasing damage taken by Lunar abilities. |grouprole EVERYONE",
        "retail": true
      }
    ],
    "Nathreza": [
      {
        "name": "Nathreza",
        "count": 8,
        "confidence": 1.0,
        "sample": "|tip When Eternal Flames appear on the main platform, a few raid members should take them inside the Nathreza (green) portal before its boss is active. |grouprole EVERYONE",
        "retail": true
      }
    ],
    "Xoroth": [
      {
        "name": "Xoroth",
        "count": 8,
        "confidence": 1.0,
        "sample": "|tip While inside the Xoroth (orange) portal at 90% health, use an interrupt rotation and move out of areas targeted on the ground. |grouprole DAMAGE",
        "retail": true
      }
    ],
    "Rancora": [
      {
        "name": "Rancora",
        "count": 8,
        "confidence": 1.0,
        "sample": "|tip While inside the Rancora (green) portal at 60% health, free players trapped in webs and avoid stepping in slime puddles. |grouprole DAMAGE",
        "retail": true
      }
    ],
    "Breach": [
      {
        "name": "Breach",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Antorus, the Burning Throne - Light's Breach (LFR)\",{",
        "retail": true
      }
    ],
    "End": [
      {
        "name": "End",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Antorus, the Burning Throne - Hope's End (LFR)\",{",
        "retail": true
      }
    ],
    "Pantheon": [
      {
        "name": "Pantheon",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer:RegisterGuide(\"Dungeon Guides\\\\Legion Raids\\\\Antorus, the Burning Throne - Seat of the Pantheon (LFR)\",{",
        "retail": true
      }
    ],
    "Auchindoun": [
      {
        "name": "Auchindoun",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Dungeons\\\\Auchindoun (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Foundry": [
      {
        "name": "Foundry",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Blackrock Foundry (Normal )\"] = {",
        "retail": true
      }
    ],
    "Assembly": [
      {
        "name": "Assembly",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Blackrock Foundry LFR Iron Assembly (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Slagworks": [
      {
        "name": "Slagworks",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Blackrock Foundry LFR Slagworks (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Forge": [
      {
        "name": "Forge",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Blackrock Foundry LFR The Black Forge (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Mines": [
      {
        "name": "Mines",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Dungeons\\\\Bloodmaul Slag Mines (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Hellbreach": [
      {
        "name": "Hellbreach",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Hellfire Citadel LFR Hellbreach (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Shadows": [
      {
        "name": "Shadows",
        "count": 7,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Hellfire Citadel LFR Bastion of Shadows (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Gate": [
      {
        "name": "Gate",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Hellfire Citadel LFR The Black Gate (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Highmaul": [
      {
        "name": "Highmaul",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Highmaul (Normal )\"] = {",
        "retail": true
      }
    ],
    "Sanctum": [
      {
        "name": "Sanctum",
        "count": 18,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Raids\\\\Highmaul LFR Arcane Sanctum (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Skyreach": [
      {
        "name": "Skyreach",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Dungeons\\\\Skyreach (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Everbloom": [
      {
        "name": "Everbloom",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Warlords of Draenor Dungeons\\\\The Everbloom (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Coommons": [
      {
        "name": "Coommons",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Classic Dungeons\\\\Dire Maul Gordok Coommons (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Deathwing": [
      {
        "name": "Deathwing",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Raids\\\\Dragon Soul LFR Fall of Deathwing (Raid Finder 25)\"] = {",
        "retail": true
      }
    ],
    "Time": [
      {
        "name": "Time",
        "count": 5,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Dungeons\\\\End Time (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Firelands": [
      {
        "name": "Firelands",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Raids\\\\Firelands (Normal )\"] = {",
        "retail": true
      }
    ],
    "Origination": [
      {
        "name": "Origination",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Dungeons\\\\Halls of Origination (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Twilight": [
      {
        "name": "Twilight",
        "count": 10,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Dungeons\\\\Hour of Twilight (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Qiraj": [
      {
        "name": "Qiraj",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Classic Raids\\\\Ruins of Ahn'Qiraj (Normal 10)\"] = {",
        "retail": true
      }
    ],
    "Living": [
      {
        "name": "Living",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Classic Dungeons\\\\Stratholme Living (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Plateau": [
      {
        "name": "Plateau",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Burning Crusade Raids\\\\Sunwell Plateau (Normal 25)\"] = {",
        "retail": true
      }
    ],
    "Archavon": [
      {
        "name": "Archavon",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Wrath of the Lich King Raids\\\\Vault of Archavon (Normal 10)\"] = {",
        "retail": true
      }
    ],
    "Aman": [
      {
        "name": "Aman",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Dungeons\\\\Zul'Aman (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Gurub": [
      {
        "name": "Gurub",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Cataclysm Dungeons\\\\Zul'Gurub (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "DPS": [
      {
        "name": "DPS",
        "count": 6,
        "confidence": 1.0,
        "sample": "|tip One tank, one healer, and three DPS (strong AoE).",
        "retail": true
      }
    ],
    "Gorefiend": [
      {
        "name": "Gorefiend",
        "count": 2,
        "confidence": 0.4,
        "sample": "|tip Some bosses are easier than others, and this is the suggested route to take for progression, going from easiest to hardest: Hellfire Assault, Iron Reaver, Kormrok, Hellfire High Council, Kilrogg Deadeye, Gorefiend(this is a very hard boss but is required to advance), Shadow-Lord Iskar, Socrethar the Eternal, Fel Lord Zakuun, Tyrant Velhari, Xhul'horac, Mannoroth, and Archimonde.",
        "retail": true
      }
    ],
    "Point": [
      {
        "name": "Point",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer:RegisterGuidePlaceholder(\"Dungeon Guides\\\\Pandaria (10-70)\\\\Pandaria Scenarios\\\\Domination Point (20-70)\")",
        "retail": true
      }
    ],
    "Energy": [
      {
        "name": "Energy",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip During \"Siphon Energy (Conduit)\", group up and avoid Shadow Lines while dodging the boss damage until his energy reaches zero. |grouprole EVERYONE",
        "retail": true
      }
    ],
    "Bargain": [
      {
        "name": "Bargain",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Dazar'alor, Death's Bargain (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Death": [
      {
        "name": "Death",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Battle for Azeroth Raids\\\\Dazar'alor, Victory or Death (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Opulence": [
      {
        "name": "Opulence",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Castle Nathria, Reliquary of Opulence (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Arrogance": [
      {
        "name": "Arrogance",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Castle Nathria, An Audience with Arrogance (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Reckoning": [
      {
        "name": "Reckoning",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sanctum of Domination: The Reckoning (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Fate": [
      {
        "name": "Fate",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sanctum of Domination: Shackles of Fate (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Bastille": [
      {
        "name": "Bastille",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sanctum of Domination: The Dark Bastille (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Vanguard": [
      {
        "name": "Vanguard",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sanctum of Domination: The Jailer's Vanguard (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Grasp": [
      {
        "name": "Grasp",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sepulcher of the First Ones: Domination's Grasp (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Creation": [
      {
        "name": "Creation",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sepulcher of the First Ones: Cornerstone of Creation (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Design": [
      {
        "name": "Design",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Shadowlands Raids\\\\Sepulcher of the First Ones: The Grand Design (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Night": [
      {
        "name": "Night",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Dungeons\\\\Cathedral of Eternal Night (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Thicket": [
      {
        "name": "Thicket",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Dungeons\\\\Darkheart Thicket (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Points": [
      {
        "name": "Points",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\Invasion Points (Normal )\"] = {",
        "retail": true
      }
    ],
    "Arcway": [
      {
        "name": "Arcway",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Dungeons\\\\The Arcway (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Nightmare": [
      {
        "name": "Nightmare",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\The Emerald Nightmare (Normal )\"] = {",
        "retail": true
      }
    ],
    "Aln": [
      {
        "name": "Aln",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\Emeral Nightmare LFR Rift of Aln (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Aqueducts": [
      {
        "name": "Aqueducts",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\The Nighthold LFR Arcing Aqueducts (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Sargeras": [
      {
        "name": "Sargeras",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\Tomb of Sargeras (Normal )\"] = {",
        "retail": true
      }
    ],
    "Avatar": [
      {
        "name": "Avatar",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\Tomb of Sargeras Chamber of the Avatar (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Hell": [
      {
        "name": "Hell",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Legion Raids\\\\Tomb of Sargeras The Gates of Hell (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Void": [
      {
        "name": "Void",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Aberrus, the Shadowed Crucible: Edge of the Void (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Works": [
      {
        "name": "Works",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Aberrus, the Shadowed Crucible: Discarded Works (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Academy": [
      {
        "name": "Academy",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\Algeth'ar Academy (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Hope": [
      {
        "name": "Hope",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Amirdrassil, the Dream's Hope (Normal )\"] = {",
        "retail": true
      }
    ],
    "Weave": [
      {
        "name": "Weave",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Amirdrassil, the Dream's Hope: The Viridian Weave (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Amirdrassil": [
      {
        "name": "Amirdrassil",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Amirdrassil, the Dream's Hope: Fate of Amirdrassil (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Incursion": [
      {
        "name": "Incursion",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Amirdrassil, the Dream's Hope: Molten Incursion (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Infinite": [
      {
        "name": "Infinite",
        "count": 4,
        "confidence": 0.8,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\Dawn of the Infinite (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Infusion": [
      {
        "name": "Infusion",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\Halls of Infusion (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Neltharus": [
      {
        "name": "Neltharus",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\Neltharus (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Offensive": [
      {
        "name": "Offensive",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\The Nokhud Offensive (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Tyr": [
      {
        "name": "Tyr",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Dungeons\\\\Uldaman: Legacy of Tyr (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Incarnates": [
      {
        "name": "Incarnates",
        "count": 6,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Vault of the Incarnates (Normal )\"] = {",
        "retail": true
      }
    ],
    "Bulwark": [
      {
        "name": "Bulwark",
        "count": 8,
        "confidence": 1.0,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Dragonflight Raids\\\\Vault of the Incarnates: The Primal Bulwark (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Echoes": [
      {
        "name": "Echoes",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Dungeons\\\\Ara-Kara, City of Echoes (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Omega": [
      {
        "name": "Omega",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Raids\\\\Manaforge Omega (Normal )\"] = {",
        "retail": true
      }
    ],
    "Sands": [
      {
        "name": "Sands",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Raids\\\\Manaforge Omega: Monsters of the Sands (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Shadowguard": [
      {
        "name": "Shadowguard",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Raids\\\\Manaforge Omega: Might of the Shadowguard (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Floodgate": [
      {
        "name": "Floodgate",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Dungeons\\\\Operation: Floodgate (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Gambit": [
      {
        "name": "Gambit",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Dungeons\\\\Tazavesh: So'leah's Gambit (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Wonder": [
      {
        "name": "Wonder",
        "count": 1,
        "confidence": 0.2,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Dungeons\\\\Tazavesh: Streets of Wonder (Heroic 5)\"] = {",
        "retail": true
      }
    ],
    "Dawnbreaker": [
      {
        "name": "Dawnbreaker",
        "count": 3,
        "confidence": 0.6,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"Current Season Dungeons\\\\The Dawnbreaker (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Meadery": [
      {
        "name": "Meadery",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Dungeons\\\\Cinderbrew Meadery (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Better": [
      {
        "name": "Better",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Raids\\\\Liberation of Undermine: Two Heads Are Better (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Machinist": [
      {
        "name": "Machinist",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Raids\\\\Liberation of Undermine: Maniacal Machinist (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Awesome": [
      {
        "name": "Awesome",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Raids\\\\Liberation of Undermine: Shock and Awesome (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Battlements": [
      {
        "name": "Battlements",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Raids\\\\Nerub-ar Palace: The Skittering Battlements (Raid Finder )\"] = {",
        "retail": true
      }
    ],
    "Stonevault": [
      {
        "name": "Stonevault",
        "count": 2,
        "confidence": 0.4,
        "sample": "ZygorGuidesViewer.ItemScore.Items[\"The War Within Dungeons\\\\The Stonevault (Normal 5)\"] = {",
        "retail": true
      }
    ],
    "Ooze": [
      {
        "name": "Ooze",
        "count": 1,
        "confidence": 0.2,
        "sample": "|tip Kill the Erupting Ooze(s) that spawns after \"Slime Injection\" is removed. |grouprole DAMAGE",
        "retail": true
      }
    ],
    "GetCoreVersion": [
      {
        "name": "GetCoreVersion",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetCoreVersion()",
        "retail": true
      }
    ],
    "GetVersionString": [
      {
        "name": "Details.GetVersionString",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details.GetVersionString()",
        "retail": true
      }
    ],
    "GetColorFor": [
      {
        "name": "Details222.ColorScheme.GetColorFor",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.ColorScheme.GetColorFor(colorScheme)",
        "retail": true
      }
    ],
    "DebugMsg": [
      {
        "name": "Details222.DebugMsg",
        "count": 18,
        "confidence": 1.0,
        "sample": "function Details222.DebugMsg(...)",
        "retail": true
      },
      {
        "name": "DebugMsg",
        "count": 4,
        "confidence": 0.8,
        "sample": "function pluginContainerFrame.DebugMsg(...)",
        "retail": true
      }
    ],
    "CheckContextInterest": [
      {
        "name": "CheckContextInterest",
        "count": 3,
        "confidence": 0.6,
        "sample": "---start a new context, this is called from the CheckContextInterest() function",
        "retail": true
      }
    ],
    "CreateEventListener": [
      {
        "name": "CreateEventListener",
        "count": 20,
        "confidence": 1.0,
        "sample": "self.DetailsEventListener = Details:CreateEventListener()",
        "retail": true
      }
    ],
    "FinishContext": [
      {
        "name": "FinishContext",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_Timer.After(1.1, function() self:FinishContext() end)",
        "retail": true
      }
    ],
    "IsDragonflightAndBeyond": [
      {
        "name": "DetailsFramework.IsDragonflightAndBeyond",
        "count": 7,
        "confidence": 1.0,
        "sample": "if (DetailsFramework.IsDragonflightAndBeyond()) then",
        "retail": true
      },
      {
        "name": "IsDragonflightAndBeyond",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (detailsFramework.IsDragonflightAndBeyond()) then",
        "retail": true
      },
      {
        "name": "DF.IsDragonflightAndBeyond",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF.IsDragonflightAndBeyond()",
        "retail": true
      }
    ],
    "GetCurrentCombat": [
      {
        "name": "GetCurrentCombat",
        "count": 102,
        "confidence": 1.0,
        "sample": "local currentCombat = Details:GetCurrentCombat()",
        "retail": true
      }
    ],
    "GetActiveChallengeMapID": [
      {
        "name": "C_ChallengeMode.GetActiveChallengeMapID",
        "count": 7,
        "confidence": 1.0,
        "sample": "if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then",
        "retail": true
      }
    ],
    "GetActiveKeystoneInfo": [
      {
        "name": "C_ChallengeMode.GetActiveKeystoneInfo",
        "count": 15,
        "confidence": 1.0,
        "sample": "if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then",
        "retail": true
      },
      {
        "name": "GetActiveKeystoneInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local level, affixes, wasEnergized = GetActiveKeystoneInfo()",
        "retail": true
      }
    ],
    "IsChallengeModeActive": [
      {
        "name": "C_ChallengeMode.IsChallengeModeActive",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (C_ChallengeMode.GetActiveChallengeMapID() or C_ChallengeMode.GetActiveKeystoneInfo() or C_ChallengeMode.IsChallengeModeActive()) then",
        "retail": true
      }
    ],
    "GetCombatSegments": [
      {
        "name": "GetCombatSegments",
        "count": 54,
        "confidence": 1.0,
        "sample": "local segments = Details:GetCombatSegments()",
        "retail": true
      }
    ],
    "StartCombat": [
      {
        "name": "Details222.StartCombat",
        "count": 15,
        "confidence": 1.0,
        "sample": "Details222.StartCombat()",
        "retail": true
      },
      {
        "name": "StartCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:StartCombat(...)",
        "retail": true
      }
    ],
    "AddCombat": [
      {
        "name": "AddCombat",
        "count": 4,
        "confidence": 0.8,
        "sample": "currentCombat:AddCombat(interestCombat, i == 1, i == #interestCombats)",
        "retail": true
      },
      {
        "name": "Details222.Combat.AddCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.Combat.AddCombat(combatToBeAdded)",
        "retail": true
      }
    ],
    "GetCombatTime": [
      {
        "name": "GetCombatTime",
        "count": 160,
        "confidence": 1.0,
        "sample": "Details222.DebugMsg(\"combat time:\", currentCombat:GetCombatTime())",
        "retail": true
      }
    ],
    "EndCombat": [
      {
        "name": "EndCombat",
        "count": 10,
        "confidence": 1.0,
        "sample": "Details:EndCombat()",
        "retail": true
      }
    ],
    "StartContext": [
      {
        "name": "StartContext",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:StartContext(instanceId, instanceName, instanceType, difficultyId, contextEventTable, fOnCombatFinished, fOnContextFinished, fHasLostInterest)",
        "retail": true
      }
    ],
    "UnpackAuraData": [
      {
        "name": "AuraUtil.UnpackAuraData",
        "count": 2,
        "confidence": 0.4,
        "sample": "return AuraUtil.UnpackAuraData(auraData)",
        "retail": true
      }
    ],
    "UnitDebuff": [
      {
        "name": "UnitDebuff",
        "count": 2,
        "confidence": 0.4,
        "sample": "local auraData = UnitDebuff(unitToken, index, filter)",
        "retail": true
      }
    ],
    "OpenPlayerDetails": [
      {
        "name": "OpenPlayerDetails",
        "count": 18,
        "confidence": 1.0,
        "sample": "{Name = \"Click on Your Own Bar\", Desc = \"To open the player details window on your character, like if you click on your bar in the damage window. The number '1' is the window number where it'll click.\", MacroText = \"/script Details:OpenPlayerDetails(1)\"},",
        "retail": true
      }
    ],
    "Breakdown": [
      {
        "name": "Breakdown",
        "count": 2,
        "confidence": 0.4,
        "sample": "{Name = \"Open Encounter Breakdown\", Desc = \"Open the encounter breakdown plugin. Details! Encounter Breakdown (plugin) must be enabled.\", MacroText = \"/script Details:OpenPlugin ('Encounter Breakdown')\"},",
        "retail": true
      }
    ],
    "OpenPlugin": [
      {
        "name": "OpenPlugin",
        "count": 14,
        "confidence": 1.0,
        "sample": "{Name = \"Open Encounter Breakdown\", Desc = \"Open the encounter breakdown plugin. Details! Encounter Breakdown (plugin) must be enabled.\", MacroText = \"/script Details:OpenPlugin ('Encounter Breakdown')\"},",
        "retail": true
      },
      {
        "name": "DetailsPluginContainerWindow.OpenPlugin",
        "count": 12,
        "confidence": 1.0,
        "sample": "DetailsPluginContainerWindow.OpenPlugin(DetailsAPI2Frame)",
        "retail": true
      }
    ],
    "ResetSegmentData": [
      {
        "name": "ResetSegmentData",
        "count": 5,
        "confidence": 1.0,
        "sample": "{Name = \"Reset Data\", Desc = \"Reset the overall and regular segments data. Use 'ResetSegmentOverallData' to reset only the overall.\", MacroText = \"/script Details:ResetSegmentData()\"},",
        "retail": true
      }
    ],
    "GetWindow": [
      {
        "name": "GetWindow",
        "count": 12,
        "confidence": 1.0,
        "sample": "{Name = \"Change What the Window Shows\", Desc = \"Make a window show different data. SetDisplay uses (segment, displayGroup, displayID), the menu from the sword icon is in order (damage = group 1, overheal is: displayGroup 2 displayID 3.\", MacroText = \"/script Details:GetWindow(1):SetDisplay( DETAILS_SEGMENTID_CURRENT, 4, 5 )\"},",
        "retail": true
      }
    ],
    "SetDisplay": [
      {
        "name": "SetDisplay",
        "count": 10,
        "confidence": 1.0,
        "sample": "{Name = \"Change What the Window Shows\", Desc = \"Make a window show different data. SetDisplay uses (segment, displayGroup, displayID), the menu from the sword icon is in order (damage = group 1, overheal is: displayGroup 2 displayID 3.\", MacroText = \"/script Details:GetWindow(1):SetDisplay( DETAILS_SEGMENTID_CURRENT, 4, 5 )\"},",
        "retail": true
      }
    ],
    "ToggleMaxSize": [
      {
        "name": "ToggleMaxSize",
        "count": 3,
        "confidence": 0.6,
        "sample": "{Name = \"Toggle Window Height to Max Size\", Desc = \"Make a window be 450 pixel height, pressing the macro again toggle back to the original size. The number '1' if the window number. Hold a click in any window to show their number.\", MacroText = \"/script Details:GetWindow(1):ToggleMaxSize()\"},",
        "retail": true
      }
    ],
    "FastReportWindow": [
      {
        "name": "FastReportWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "{Name = \"Report What is Shown In the Window\", Desc = \"Report the current data shown in the window, the number 1 is the window number, replace it to report another window.\", MacroText = \"/script Details:FastReportWindow(1)\"},",
        "retail": true
      }
    ],
    "GetFramework": [
      {
        "name": "GetFramework",
        "count": 8,
        "confidence": 1.0,
        "sample": "function _detalhes:GetFramework()",
        "retail": true
      }
    ],
    "GetMenuTextColor": [
      {
        "name": "Details.Colors.GetMenuTextColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Colors.GetMenuTextColor()",
        "retail": true
      }
    ],
    "GetTextureAtlasTable": [
      {
        "name": "GetTextureAtlasTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetTextureAtlasTable()",
        "retail": true
      }
    ],
    "GetArenaInfo": [
      {
        "name": "GetArenaInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "function _detalhes:GetArenaInfo (mapid)",
        "retail": true
      }
    ],
    "GetBattlegroundInfo": [
      {
        "name": "GetBattlegroundInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function _detalhes:GetBattlegroundInfo(mapid)",
        "retail": true
      }
    ],
    "SafeRun": [
      {
        "name": "Details.SafeRun",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details.SafeRun(func, executionName, ...)",
        "retail": true
      }
    ],
    "Msg": [
      {
        "name": "Msg",
        "count": 397,
        "confidence": 1.0,
        "sample": "Details:Msg(\"Safe run failed:\", executionName, errorText)",
        "retail": true
      },
      {
        "name": "DetailsFramework.Msg",
        "count": 22,
        "confidence": 1.0,
        "sample": "DetailsFramework.Msg({__name = \"DetailsFramework\"}, \"Spell not found: \" .. (spellName or \"\"))",
        "retail": true
      }
    ],
    "GetAttributeIcon": [
      {
        "name": "GetAttributeIcon",
        "count": 3,
        "confidence": 0.6,
        "sample": "function _detalhes:GetAttributeIcon (attribute)",
        "retail": true
      }
    ],
    "NewColor": [
      {
        "name": "NewColor",
        "count": 10,
        "confidence": 1.0,
        "sample": "DetailsFramework:NewColor(\"DETAILS_PLUGIN_BUTTONTEXT_COLOR\", 0.9999, 0.8196, 0, 1)",
        "retail": true
      }
    ],
    "InstallTemplate": [
      {
        "name": "InstallTemplate",
        "count": 22,
        "confidence": 1.0,
        "sample": "DetailsFramework:InstallTemplate(\"button\", \"DETAILS_PLUGINPANEL_BUTTON_TEMPLATE\",",
        "retail": true
      }
    ],
    "IsWotLKWow": [
      {
        "name": "DetailsFramework.IsWotLKWow",
        "count": 6,
        "confidence": 1.0,
        "sample": "if (DetailsFramework.IsWotLKWow()) then",
        "retail": true
      },
      {
        "name": "IsWotLKWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isWOTLK = detailsFramework.IsWotLKWow()",
        "retail": true
      },
      {
        "name": "DF.IsWotLKWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsWotLKWow()",
        "retail": true
      }
    ],
    "Healthstone": [
      {
        "name": "Healthstone",
        "count": 13,
        "confidence": 1.0,
        "sample": "--[[global]] DETAILS_HEALTHSTONE2_ID = 47876 --Warlock's Healthstone (1/2 Talent)",
        "retail": true
      }
    ],
    "SendHighFive": [
      {
        "name": "Details.SendHighFive",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.SendHighFive()",
        "retail": true
      }
    ],
    "SendRaidData": [
      {
        "name": "SendRaidData",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:SendRaidData(Details.network.ids.HIGHFIVE_REQUEST)",
        "retail": true
      }
    ],
    "SendPartyData": [
      {
        "name": "SendPartyData",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:SendPartyData(Details.network.ids.HIGHFIVE_REQUEST)",
        "retail": true
      }
    ],
    "GetPluginDefaultBackdrop": [
      {
        "name": "Details.GetPluginDefaultBackdrop",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.GetPluginDefaultBackdrop()",
        "retail": true
      }
    ],
    "CreateWelcomePanel": [
      {
        "name": "CreateWelcomePanel",
        "count": 5,
        "confidence": 1.0,
        "sample": "function _detalhes:CreateWelcomePanel(name, parent, width, height, makeMovable)",
        "retail": true
      }
    ],
    "ApplyStandardBackdrop": [
      {
        "name": "ApplyStandardBackdrop",
        "count": 116,
        "confidence": 1.0,
        "sample": "DetailsFramework:ApplyStandardBackdrop(newWelcomePanel)",
        "retail": true
      }
    ],
    "VarDump": [
      {
        "name": "Details.VarDump",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details.VarDump(t)",
        "retail": true
      }
    ],
    "GetAtlasInfo": [
      {
        "name": "C_Texture.GetAtlasInfo",
        "count": 10,
        "confidence": 1.0,
        "sample": "atlas = C_Texture.GetAtlasInfo(value)",
        "retail": true
      }
    ],
    "GetAtlas": [
      {
        "name": "GetAtlas",
        "count": 4,
        "confidence": 0.8,
        "sample": "local atlas = icon:GetAtlas()",
        "retail": true
      }
    ],
    "FindSpellByName": [
      {
        "name": "FindSpellByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FindSpellByName(spellName) --[[GLOBAL]]",
        "retail": true
      }
    ],
    "GSI": [
      {
        "name": "GSI",
        "count": 2,
        "confidence": 0.4,
        "sample": "local thisSpellName = GSI(i)",
        "retail": true
      }
    ],
    "CopyTable": [
      {
        "name": "Details.CopyTable",
        "count": 65,
        "confidence": 1.0,
        "sample": "function Details.CopyTable(orig)",
        "retail": true
      }
    ],
    "DelayMsg": [
      {
        "name": "DelayMsg",
        "count": 3,
        "confidence": 0.6,
        "sample": "function _detalhes:DelayMsg(msg)",
        "retail": true
      }
    ],
    "ShowDelayMsg": [
      {
        "name": "ShowDelayMsg",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:ShowDelayMsg()",
        "retail": true
      }
    ],
    "WelcomeMsgLogon": [
      {
        "name": "WelcomeMsgLogon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:WelcomeMsgLogon()",
        "retail": true
      }
    ],
    "CreateNewSegmentDatabase": [
      {
        "name": "CreateNewSegmentDatabase",
        "count": 6,
        "confidence": 1.0,
        "sample": "_detalhes.tabela_historico = _detalhes.historico:CreateNewSegmentDatabase()",
        "retail": true
      }
    ],
    "NovaTabela": [
      {
        "name": "NovaTabela",
        "count": 26,
        "confidence": 1.0,
        "sample": "_detalhes.tabela_overall = _detalhes.combate:NovaTabela()",
        "retail": true
      }
    ],
    "NewTimer": [
      {
        "name": "C_Timer.NewTimer",
        "count": 29,
        "confidence": 1.0,
        "sample": "Details.failed_to_load = C_Timer.NewTimer(1, function() Details.Schedules.NewTimer(20, _detalhes.WelcomeMsgLogon) end)",
        "retail": true
      },
      {
        "name": "Details.Schedules.NewTimer",
        "count": 22,
        "confidence": 1.0,
        "sample": "Details.failed_to_load = C_Timer.NewTimer(1, function() Details.Schedules.NewTimer(20, _detalhes.WelcomeMsgLogon) end)",
        "retail": true
      },
      {
        "name": "Schedules.NewTimer",
        "count": 7,
        "confidence": 1.0,
        "sample": "detailsFramework.Schedules.NewTimer (10, function()",
        "retail": true
      },
      {
        "name": "DetailsFramework.Schedules.NewTimer",
        "count": 9,
        "confidence": 1.0,
        "sample": "DetailsFramework.Schedules.NewTimer(0, function() SetSpecialization(1) end)",
        "retail": true
      },
      {
        "name": "DF.Schedules.NewTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.Schedules.NewTimer(0.2, DF.RefreshImageEditor)",
        "retail": true
      }
    ],
    "GetClassFromCache": [
      {
        "name": "Details222.ClassCache.GetClassFromCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.ClassCache.GetClassFromCache(value)",
        "retail": true
      }
    ],
    "AddClassToCache": [
      {
        "name": "Details222.ClassCache.AddClassToCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.ClassCache.AddClassToCache(value, whichCache)",
        "retail": true
      }
    ],
    "GetClass": [
      {
        "name": "Details222.ClassCache.GetClass",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.ClassCache.GetClass(value)",
        "retail": true
      },
      {
        "name": "GetClass",
        "count": 14,
        "confidence": 1.0,
        "sample": "function Details:GetClass(actorName)",
        "retail": true
      }
    ],
    "MakeCache": [
      {
        "name": "Details222.ClassCache.MakeCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.ClassCache.MakeCache()",
        "retail": true
      }
    ],
    "GetContainer": [
      {
        "name": "GetContainer",
        "count": 98,
        "confidence": 1.0,
        "sample": "for _, actorObject in combatObject:GetContainer(DETAILS_ATTRIBUTE_DAMAGE):ListActors() do",
        "retail": true
      }
    ],
    "ListActors": [
      {
        "name": "ListActors",
        "count": 66,
        "confidence": 1.0,
        "sample": "for _, actorObject in combatObject:GetContainer(DETAILS_ATTRIBUTE_DAMAGE):ListActors() do",
        "retail": true
      }
    ],
    "IsPlayer": [
      {
        "name": "IsPlayer",
        "count": 50,
        "confidence": 1.0,
        "sample": "if (actorObject:IsPlayer()) then",
        "retail": true
      }
    ],
    "MakeWeakTable": [
      {
        "name": "Details222.Tables.MakeWeakTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Tables.MakeWeakTable(mode)",
        "retail": true
      }
    ],
    "AddStat": [
      {
        "name": "AddStat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.PlayerStats:AddStat(statName, value)",
        "retail": true
      }
    ],
    "GetStat": [
      {
        "name": "GetStat",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.PlayerStats:GetStat(statName)",
        "retail": true
      }
    ],
    "SetStat": [
      {
        "name": "SetStat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.PlayerStats:SetStat(statName, value)",
        "retail": true
      }
    ],
    "ProfileStart": [
      {
        "name": "Details222.Profiling.ProfileStart",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details222.Profiling.ProfileStart()end",
        "retail": true
      }
    ],
    "ProfileStop": [
      {
        "name": "Details222.Profiling.ProfileStop",
        "count": 13,
        "confidence": 1.0,
        "sample": "function Details222.Profiling.ProfileStop()end",
        "retail": true
      }
    ],
    "EnableProfiler": [
      {
        "name": "Details222.Profiling.EnableProfiler",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.Profiling.EnableProfiler()",
        "retail": true
      }
    ],
    "DisableProfiler": [
      {
        "name": "Details222.Profiling.DisableProfiler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Profiling.DisableProfiler()",
        "retail": true
      }
    ],
    "ResetProfiler": [
      {
        "name": "Details222.Profiling.ResetProfiler",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Profiling.ResetProfiler()",
        "retail": true
      }
    ],
    "ProfilerResult": [
      {
        "name": "ProfilerResult",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ProfilerResult()",
        "retail": true
      }
    ],
    "ResetProfilerResult": [
      {
        "name": "ResetProfilerResult",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ResetProfilerResult()",
        "retail": true
      }
    ],
    "Destroy": [
      {
        "name": "Destroy",
        "count": 187,
        "confidence": 1.0,
        "sample": "function Details:Destroy(object, key)",
        "retail": true
      }
    ],
    "DestroyCombat": [
      {
        "name": "DestroyCombat",
        "count": 14,
        "confidence": 1.0,
        "sample": "function Details:DestroyCombat(combatObject)",
        "retail": true
      }
    ],
    "DestroyActor": [
      {
        "name": "DestroyActor",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:DestroyActor(actorObject, actorContainer, combatObject, 3)",
        "retail": true
      }
    ],
    "RemoveActor": [
      {
        "name": "RemoveActor",
        "count": 2,
        "confidence": 0.4,
        "sample": "---destroy the actor, also calls container:RemoveActor(actor)",
        "retail": true
      },
      {
        "name": "Details222.TimeMachine.RemoveActor",
        "count": 13,
        "confidence": 1.0,
        "sample": "Details222.TimeMachine.RemoveActor(actorObject)",
        "retail": true
      }
    ],
    "GetParserCacheTables": [
      {
        "name": "Details222.Cache.GetParserCacheTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "local c1, c2, c3, c4 = Details222.Cache.GetParserCacheTables()",
        "retail": true
      }
    ],
    "Name": [
      {
        "name": "Name",
        "count": 80,
        "confidence": 1.0,
        "sample": "local actorName = actorObject:Name()",
        "retail": true
      }
    ],
    "RemoveActorFromSpellCastTable": [
      {
        "name": "RemoveActorFromSpellCastTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "combatObject:RemoveActorFromSpellCastTable(actorName)",
        "retail": true
      }
    ],
    "StartMeUp": [
      {
        "name": "Details222.StartUp.StartMeUp",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.StartUp.StartMeUp()",
        "retail": true
      },
      {
        "name": "StartMeUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "--custom displays - if there's no saved custom display, they will be filled from the StartMeUp() when a new version is installed",
        "retail": true
      }
    ],
    "IsWarWow": [
      {
        "name": "IsWarWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (PVPMatchResults and detailsFramework.IsWarWow()) then",
        "retail": true
      },
      {
        "name": "DetailsFramework.IsWarWow",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (DetailsFramework.IsWarWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsWarWow",
        "count": 5,
        "confidence": 1.0,
        "sample": "function DF.IsWarWow()",
        "retail": true
      }
    ],
    "OpenArenaSummaryWindow": [
      {
        "name": "OpenArenaSummaryWindow",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:OpenArenaSummaryWindow()",
        "retail": true
      }
    ],
    "GetStartupTime": [
      {
        "name": "Details.GetStartupTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.GetStartupTime()",
        "retail": true
      }
    ],
    "FillUserCustomSpells": [
      {
        "name": "FillUserCustomSpells",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:FillUserCustomSpells()",
        "retail": true
      }
    ],
    "ReplaceRowSingleClickFunction": [
      {
        "name": "ReplaceRowSingleClickFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ReplaceRowSingleClickFunction(attribute, subAttribute, func)",
        "retail": true
      }
    ],
    "CreatePluginWindowContainer": [
      {
        "name": "CreatePluginWindowContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CreatePluginWindowContainer()",
        "retail": true
      }
    ],
    "InitializeForge": [
      {
        "name": "InitializeForge",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeForge() --to install into the container plugin",
        "retail": true
      }
    ],
    "InitializeRaidHistoryWindow": [
      {
        "name": "InitializeRaidHistoryWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeRaidHistoryWindow()",
        "retail": true
      }
    ],
    "InitializeOptionsWindow": [
      {
        "name": "InitializeOptionsWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Details:InitializeOptionsWindow() --debug, uncoment to open options window on startup",
        "retail": true
      },
      {
        "name": "Details222.OptionsPanel.InitializeOptionsWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Details222.OptionsPanel.InitializeOptionsWindow(instance)",
        "retail": true
      }
    ],
    "InitializeAuraCreationWindow": [
      {
        "name": "InitializeAuraCreationWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeAuraCreationWindow()",
        "retail": true
      }
    ],
    "InitializeCustomDisplayWindow": [
      {
        "name": "InitializeCustomDisplayWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeCustomDisplayWindow()",
        "retail": true
      }
    ],
    "InitializeAPIWindow": [
      {
        "name": "InitializeAPIWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeAPIWindow()",
        "retail": true
      }
    ],
    "InitializeRunCodeWindow": [
      {
        "name": "InitializeRunCodeWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeRunCodeWindow()",
        "retail": true
      }
    ],
    "InitializePlaterIntegrationWindow": [
      {
        "name": "InitializePlaterIntegrationWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializePlaterIntegrationWindow()",
        "retail": true
      }
    ],
    "InitializeMacrosWindow": [
      {
        "name": "InitializeMacrosWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeMacrosWindow()",
        "retail": true
      }
    ],
    "InitializeEncounterSwapper": [
      {
        "name": "InitializeEncounterSwapper",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeEncounterSwapper()",
        "retail": true
      }
    ],
    "CreateAllDisplaysFrame": [
      {
        "name": "Details222.CreateAllDisplaysFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.CreateAllDisplaysFrame()",
        "retail": true
      }
    ],
    "LoadCommentatorFunctions": [
      {
        "name": "Details222.LoadCommentatorFunctions",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Details222.LoadCommentatorFunctions()",
        "retail": true
      }
    ],
    "FindAndIgnoreWorldAuras": [
      {
        "name": "Details222.AuraScan.FindAndIgnoreWorldAuras",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.AuraScan.FindAndIgnoreWorldAuras()",
        "retail": true
      },
      {
        "name": "AuraScan.FindAndIgnoreWorldAuras",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.FindAndIgnoreWorldAuras()",
        "retail": true
      }
    ],
    "RegisterForOpenRaidNotes": [
      {
        "name": "Details222.Notes.RegisterForOpenRaidNotes",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.Notes.RegisterForOpenRaidNotes()",
        "retail": true
      }
    ],
    "InitializeCDTrackerWindow": [
      {
        "name": "InitializeCDTrackerWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:InitializeCDTrackerWindow()",
        "retail": true
      }
    ],
    "InitRecap": [
      {
        "name": "Details222.InitRecap",
        "count": 1,
        "confidence": 0.2,
        "sample": "--Details222.InitRecap()",
        "retail": true
      }
    ],
    "CreateBreakdownWindow": [
      {
        "name": "CreateBreakdownWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.BreakdownWindowFrame = Details:CreateBreakdownWindow()",
        "retail": true
      }
    ],
    "Fader": [
      {
        "name": "Details.FadeHandler.Fader",
        "count": 116,
        "confidence": 1.0,
        "sample": "Details.FadeHandler.Fader(Details.BreakdownWindowFrame, 1)",
        "retail": true
      }
    ],
    "CreateCopyPasteWindow": [
      {
        "name": "CreateCopyPasteWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CreateCopyPasteWindow()",
        "retail": true
      }
    ],
    "GetNumInstancesAmount": [
      {
        "name": "GetNumInstancesAmount",
        "count": 6,
        "confidence": 1.0,
        "sample": "if (Details:GetNumInstancesAmount() == 0) then",
        "retail": true
      }
    ],
    "CreateInstance": [
      {
        "name": "CreateInstance",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:CreateInstance()",
        "retail": true
      }
    ],
    "GetLowerInstanceNumber": [
      {
        "name": "GetLowerInstanceNumber",
        "count": 36,
        "confidence": 1.0,
        "sample": "Details:GetLowerInstanceNumber()",
        "retail": true
      }
    ],
    "UpdateSelectedToKFunction": [
      {
        "name": "UpdateSelectedToKFunction",
        "count": 30,
        "confidence": 1.0,
        "sample": "Details.atributo_damage:UpdateSelectedToKFunction()",
        "retail": true
      }
    ],
    "CheckSwitchOnLogon": [
      {
        "name": "CheckSwitchOnLogon",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:CheckSwitchOnLogon()",
        "retail": true
      }
    ],
    "ScheduledWindowUpdate": [
      {
        "name": "ScheduledWindowUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ScheduledWindowUpdate(bIsForced)",
        "retail": true
      }
    ],
    "RefreshMainWindow": [
      {
        "name": "RefreshMainWindow",
        "count": 34,
        "confidence": 1.0,
        "sample": "Details:RefreshMainWindow(-1, bForceRefresh)",
        "retail": true
      }
    ],
    "ScheduleWindowUpdate": [
      {
        "name": "ScheduleWindowUpdate",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:ScheduleWindowUpdate(time, bIsForced)",
        "retail": true
      }
    ],
    "RefreshUpdater": [
      {
        "name": "RefreshUpdater",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:RefreshUpdater()",
        "retail": true
      }
    ],
    "GetNumInstances": [
      {
        "name": "GetNumInstances",
        "count": 4,
        "confidence": 0.8,
        "sample": "for instanceId = 1, Details:GetNumInstances() do",
        "retail": true
      }
    ],
    "GetInstance": [
      {
        "name": "GetInstance",
        "count": 144,
        "confidence": 1.0,
        "sample": "local instance = Details:GetInstance(instanceId)",
        "retail": true
      }
    ],
    "RefreshAfterStartup": [
      {
        "name": "RefreshAfterStartup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RefreshAfterStartup()",
        "retail": true
      }
    ],
    "GetNickname": [
      {
        "name": "GetNickname",
        "count": 5,
        "confidence": 1.0,
        "sample": "local nickname = Details:GetNickname(actorObject:Name(), false, true)",
        "retail": true
      }
    ],
    "SetDisplayName": [
      {
        "name": "SetDisplayName",
        "count": 2,
        "confidence": 0.4,
        "sample": "actorObject:SetDisplayName(nickname)",
        "retail": true
      }
    ],
    "InstanceWallpaper": [
      {
        "name": "InstanceWallpaper",
        "count": 9,
        "confidence": 1.0,
        "sample": "instance:InstanceWallpaper(true)",
        "retail": true
      }
    ],
    "DesaturateMenu": [
      {
        "name": "DesaturateMenu",
        "count": 4,
        "confidence": 0.8,
        "sample": "instance:DesaturateMenu()",
        "retail": true
      }
    ],
    "SetAutoHideMenu": [
      {
        "name": "SetAutoHideMenu",
        "count": 7,
        "confidence": 1.0,
        "sample": "instance:SetAutoHideMenu(nil, nil, true)",
        "retail": true
      }
    ],
    "ReorganizeIcons": [
      {
        "name": "ReorganizeIcons",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details.ToolBar:ReorganizeIcons()",
        "retail": true
      }
    ],
    "ChangeSkin": [
      {
        "name": "ChangeSkin",
        "count": 25,
        "confidence": 1.0,
        "sample": "instance:ChangeSkin()",
        "retail": true
      }
    ],
    "CheckWallpaperAfterStartup": [
      {
        "name": "CheckWallpaperAfterStartup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CheckWallpaperAfterStartup()",
        "retail": true
      }
    ],
    "CaptureRefresh": [
      {
        "name": "CaptureRefresh",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:CaptureRefresh()",
        "retail": true
      }
    ],
    "IsTimewalkWoW": [
      {
        "name": "DetailsFramework.IsTimewalkWoW",
        "count": 13,
        "confidence": 1.0,
        "sample": "if (not DetailsFramework.IsTimewalkWoW()) then --C_EventUtils.IsEventValid",
        "retail": true
      },
      {
        "name": "IsTimewalkWoW",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (detailsFramework.IsTimewalkWoW()) then",
        "retail": true
      },
      {
        "name": "DF.IsTimewalkWoW",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF.IsTimewalkWoW()",
        "retail": true
      }
    ],
    "SchedulePetUpdate": [
      {
        "name": "SchedulePetUpdate",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:SchedulePetUpdate(1)",
        "retail": true
      }
    ],
    "ListInstances": [
      {
        "name": "ListInstances",
        "count": 25,
        "confidence": 1.0,
        "sample": "for id, instancia in Details:ListInstances() do",
        "retail": true
      }
    ],
    "SendEvent": [
      {
        "name": "SendEvent",
        "count": 101,
        "confidence": 1.0,
        "sample": "Details:SendEvent(\"DETAILS_INSTANCE_OPEN\", nil, instancia)",
        "retail": true
      }
    ],
    "AnnounceStartup": [
      {
        "name": "AnnounceStartup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AnnounceStartup()",
        "retail": true
      }
    ],
    "AnnounceVersion": [
      {
        "name": "AnnounceVersion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AnnounceVersion()",
        "retail": true
      }
    ],
    "CheckVersion": [
      {
        "name": "CheckVersion",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CheckVersion(true)",
        "retail": true
      }
    ],
    "Restore": [
      {
        "name": "Restore",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsTooltipAnchor:Restore()",
        "retail": true
      }
    ],
    "AddDefaultCustomDisplays": [
      {
        "name": "AddDefaultCustomDisplays",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:AddDefaultCustomDisplays()",
        "retail": true
      }
    ],
    "OpenNewsWindow": [
      {
        "name": "Details.OpenNewsWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.OpenNewsWindow()",
        "retail": true
      },
      {
        "name": "OpenNewsWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:OpenNewsWindow()",
        "retail": true
      }
    ],
    "InstanceAlert": [
      {
        "name": "InstanceAlert",
        "count": 15,
        "confidence": 1.0,
        "sample": "lowerInstanceId:InstanceAlert(Loc[\"STRING_VERSION_UPDATE\"],",
        "retail": true
      }
    ],
    "CanUseVoidStorage": [
      {
        "name": "CanUseVoidStorage",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not CanUseVoidStorage()) then",
        "retail": true
      }
    ],
    "SwitchBack": [
      {
        "name": "SwitchBack",
        "count": 6,
        "confidence": 1.0,
        "sample": "instance:SwitchBack()",
        "retail": true
      }
    ],
    "FadeStartVersion": [
      {
        "name": "FadeStartVersion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FadeStartVersion()",
        "retail": true
      }
    ],
    "OnUnitUpdate": [
      {
        "name": "OnUnitUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function t.OnUnitUpdate(unitId, unitInfo)",
        "retail": true
      }
    ],
    "GetSpellIdsFromTalentString": [
      {
        "name": "GetSpellIdsFromTalentString",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local unitTalents = openRaidLib.GetSpellIdsFromTalentString(talents)",
        "retail": true
      }
    ],
    "GetUnitInfo": [
      {
        "name": "GetUnitInfo",
        "count": 9,
        "confidence": 1.0,
        "sample": "local unitInfo = openRaidLib.GetUnitInfo(\"player\")",
        "retail": true
      },
      {
        "name": "UnitInfoManager.GetUnitInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "return openRaidLib.UnitInfoManager.GetUnitInfo(unitName)",
        "retail": true
      }
    ],
    "OpenOptionsWindowAtStart": [
      {
        "name": "OpenOptionsWindowAtStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:OpenOptionsWindowAtStart()",
        "retail": true
      }
    ],
    "OpenOptionsWindow": [
      {
        "name": "OpenOptionsWindow",
        "count": 27,
        "confidence": 1.0,
        "sample": "--Details:OpenOptionsWindow (Details.tabela_instancias[1])",
        "retail": true
      }
    ],
    "OpenCustomDisplayWindow": [
      {
        "name": "OpenCustomDisplayWindow",
        "count": 4,
        "confidence": 0.8,
        "sample": "--Details:OpenCustomDisplayWindow()",
        "retail": true
      }
    ],
    "OpenWelcomeWindow": [
      {
        "name": "OpenWelcomeWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "--Details:OpenWelcomeWindow()",
        "retail": true
      }
    ],
    "RestoreState_CurrentMythicDungeonRun": [
      {
        "name": "RestoreState_CurrentMythicDungeonRun",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:RestoreState_CurrentMythicDungeonRun()",
        "retail": true
      }
    ],
    "OpenProfiler": [
      {
        "name": "OpenProfiler",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:OpenProfiler()",
        "retail": true
      }
    ],
    "StartAnnouncers": [
      {
        "name": "StartAnnouncers",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:StartAnnouncers()",
        "retail": true
      }
    ],
    "LoadFramesForBroadcastTools": [
      {
        "name": "LoadFramesForBroadcastTools",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:LoadFramesForBroadcastTools()",
        "retail": true
      }
    ],
    "BrokerTick": [
      {
        "name": "BrokerTick",
        "count": 8,
        "confidence": 1.0,
        "sample": "Details:BrokerTick()",
        "retail": true
      }
    ],
    "GetTrinketData": [
      {
        "name": "GetTrinketData",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetTrinketData()",
        "retail": true
      }
    ],
    "GetDefaultCustomItemList": [
      {
        "name": "GetDefaultCustomItemList",
        "count": 2,
        "confidence": 0.4,
        "sample": "local customSpellList = Details:GetDefaultCustomItemList()",
        "retail": true
      }
    ],
    "GetItemNameByID": [
      {
        "name": "C_Item.GetItemNameByID",
        "count": 3,
        "confidence": 0.6,
        "sample": "itemName = C_Item.GetItemNameByID(trinketTable.itemId),",
        "retail": true
      }
    ],
    "GetPool": [
      {
        "name": "GetPool",
        "count": 2,
        "confidence": 0.4,
        "sample": "for guid, ilevelTable in pairs(Details.ilevel:GetPool()) do",
        "retail": true
      }
    ],
    "ClearIlvl": [
      {
        "name": "ClearIlvl",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.ilevel:ClearIlvl(guid)",
        "retail": true
      }
    ],
    "CheckChatEmbed": [
      {
        "name": "CheckChatEmbed",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.chat_embed:CheckChatEmbed(true)",
        "retail": true
      }
    ],
    "InstallRaidInfo": [
      {
        "name": "Details.InstallRaidInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.InstallRaidInfo()",
        "retail": true
      }
    ],
    "RefreshPlaterIntegration": [
      {
        "name": "RefreshPlaterIntegration",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:RefreshPlaterIntegration()",
        "retail": true
      }
    ],
    "IsClassicWow": [
      {
        "name": "DetailsFramework.IsClassicWow",
        "count": 6,
        "confidence": 1.0,
        "sample": "if (not DetailsFramework.IsClassicWow()) then",
        "retail": true
      },
      {
        "name": "IsClassicWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isERA = detailsFramework.IsClassicWow()",
        "retail": true
      },
      {
        "name": "DF.IsClassicWow",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF.IsClassicWow()",
        "retail": true
      }
    ],
    "Discord": [
      {
        "name": "Discord",
        "count": 1,
        "confidence": 0.2,
        "sample": "--print(\"|CFFFFFF00[Details!]: you're using Details! for RETAIL on Classic WOW, please get the classic version (Details! Damage Meter Classic WoW), if you need help see our Discord (/details discord).\")",
        "retail": true
      }
    ],
    "InstallHook": [
      {
        "name": "InstallHook",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:InstallHook(\"HOOK_DEATH\", Details.Coach.Client.SendMyDeath)",
        "retail": true
      }
    ],
    "InitializeSpellBreakdownTab": [
      {
        "name": "Details.InitializeSpellBreakdownTab",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.InitializeSpellBreakdownTab()",
        "retail": true
      }
    ],
    "BuildSpecsNameCache": [
      {
        "name": "BuildSpecsNameCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:BuildSpecsNameCache()",
        "retail": true
      }
    ],
    "DoMaintenance": [
      {
        "name": "Details222.Cache.DoMaintenance",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.Cache.DoMaintenance()",
        "retail": true
      },
      {
        "name": "Details222.PetContainer.DoMaintenance",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.PetContainer.DoMaintenance()",
        "retail": true
      },
      {
        "name": "DoMaintenance",
        "count": 2,
        "confidence": 0.4,
        "sample": "function petContainer.DoMaintenance()",
        "retail": true
      }
    ],
    "InstallOkey": [
      {
        "name": "InstallOkey",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:InstallOkey()",
        "retail": true
      }
    ],
    "IsNearlyEqual": [
      {
        "name": "IsNearlyEqual",
        "count": 9,
        "confidence": 1.0,
        "sample": "if (DetailsFramework:IsNearlyEqual(Details.class_coords.ROGUE[4], 0.25)) then",
        "retail": true
      },
      {
        "name": "Math.IsNearlyEqual",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (previousEvent[1] == 4 and previousEvent[2] == spellId and detailsFramework.Math.IsNearlyEqual(time, previousEvent[4], 0.01)) then",
        "retail": true
      },
      {
        "name": "DF.Math.IsNearlyEqual",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.IsNearlyEqual(value1, value2, tolerance)",
        "retail": true
      }
    ],
    "SetHelpTipsEnabled": [
      {
        "name": "SetHelpTipsEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HelpTip:SetHelpTipsEnabled(flag, enabled)",
        "retail": true
      }
    ],
    "Usage": [
      {
        "name": "Usage",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- Usage (for developers)",
        "retail": true
      }
    ],
    "GetMaxBytes": [
      {
        "name": "GetMaxBytes",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.oldMaxBytes = editbox:GetMaxBytes()",
        "retail": true
      }
    ],
    "GetMaxLetters": [
      {
        "name": "GetMaxLetters",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.oldMaxLetters = editbox:GetMaxLetters()",
        "retail": true
      }
    ],
    "SetMaxBytes": [
      {
        "name": "SetMaxBytes",
        "count": 3,
        "confidence": 0.6,
        "sample": "editbox:SetMaxBytes(0)",
        "retail": true
      }
    ],
    "GetTextureAtlas": [
      {
        "name": "GetTextureAtlas",
        "count": 21,
        "confidence": 1.0,
        "sample": "function Details:GetTextureAtlas(atlasName)",
        "retail": true
      }
    ],
    "PreviewTexture": [
      {
        "name": "PreviewTexture",
        "count": 3,
        "confidence": 0.6,
        "sample": "--DetailsFramework:PreviewTexture(Details.TextureAtlas[\"segment-icon-arena\"])",
        "retail": true
      }
    ],
    "DoesCombatWithUIDExists": [
      {
        "name": "DoesCombatWithUIDExists",
        "count": 3,
        "confidence": 0.6,
        "sample": "---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()",
        "retail": true
      }
    ],
    "GetCombatByUID": [
      {
        "name": "GetCombatByUID",
        "count": 3,
        "confidence": 0.6,
        "sample": "---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()",
        "retail": true
      }
    ],
    "GetCombatUID": [
      {
        "name": "GetCombatUID",
        "count": 9,
        "confidence": 1.0,
        "sample": "---@alias uniquecombatid number a unique ID to point to a single combat, each character has its ID counter, use with Details:DoesCombatWithUIDExists(); Details:GetCombatByUID(); retrive with combat:GetCombatUID()",
        "retail": true
      }
    ],
    "Remap": [
      {
        "name": "Remap",
        "count": 11,
        "confidence": 1.0,
        "sample": "---@field _NameIndexTable table<string, number> [actorName] = actorIndex in the _ActorTable, actorcontainer:Remap() refreshes the _NameIndexTable",
        "retail": true
      }
    ],
    "ParseColors": [
      {
        "name": "ParseColors",
        "count": 209,
        "confidence": 1.0,
        "sample": "---@alias red number color value representing the red component of a color, the value must be between 0 and 1. To retrieve a color from a string or table use: local red, green, blue, alpha = DetailsFramework:ParseColors(color)",
        "retail": true
      }
    ],
    "CompressString": [
      {
        "name": "C_EncodingUtil.CompressString",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.CompressString(source, method, level) return \"\" end",
        "retail": true
      }
    ],
    "DecodeBase64": [
      {
        "name": "C_EncodingUtil.DecodeBase64",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.DecodeBase64(source, variant) return \"\" end",
        "retail": true
      }
    ],
    "DecodeHex": [
      {
        "name": "C_EncodingUtil.DecodeHex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_EncodingUtil.DecodeHex(source) return \"\" end",
        "retail": true
      }
    ],
    "DecompressString": [
      {
        "name": "C_EncodingUtil.DecompressString",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.DecompressString(source, method) return \"\" end",
        "retail": true
      }
    ],
    "DeserializeCBOR": [
      {
        "name": "C_EncodingUtil.DeserializeCBOR",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.DeserializeCBOR(source) return nil end",
        "retail": true
      }
    ],
    "DeserializeJSON": [
      {
        "name": "C_EncodingUtil.DeserializeJSON",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_EncodingUtil.DeserializeJSON(source) return nil end",
        "retail": true
      }
    ],
    "EncodeBase64": [
      {
        "name": "C_EncodingUtil.EncodeBase64",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.EncodeBase64(source, variant) return \"\" end",
        "retail": true
      }
    ],
    "EncodeHex": [
      {
        "name": "C_EncodingUtil.EncodeHex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_EncodingUtil.EncodeHex(source) return \"\" end",
        "retail": true
      }
    ],
    "SerializeCBOR": [
      {
        "name": "C_EncodingUtil.SerializeCBOR",
        "count": 2,
        "confidence": 0.4,
        "sample": "function C_EncodingUtil.SerializeCBOR(value, options) return \"\" end",
        "retail": true
      }
    ],
    "SerializeJSON": [
      {
        "name": "C_EncodingUtil.SerializeJSON",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_EncodingUtil.SerializeJSON(value, options) return \"\" end",
        "retail": true
      }
    ],
    "GetMouseFoci": [
      {
        "name": "GetMouseFoci",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetMouseFoci()",
        "retail": true
      }
    ],
    "IsBoundToAccountUntilEquip": [
      {
        "name": "C_Item.IsBoundToAccountUntilEquip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsBoundToAccountUntilEquip() end",
        "retail": true
      }
    ],
    "LockItem": [
      {
        "name": "C_Item.LockItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.LockItem() end",
        "retail": true
      }
    ],
    "DoesItemMatchTargetEnchantingSpell": [
      {
        "name": "C_Item.DoesItemMatchTargetEnchantingSpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemMatchTargetEnchantingSpell() end",
        "retail": true
      }
    ],
    "IsItemCorruptionRelated": [
      {
        "name": "C_Item.IsItemCorruptionRelated",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemCorruptionRelated() end",
        "retail": true
      }
    ],
    "GetItemIconByID": [
      {
        "name": "C_Item.GetItemIconByID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function C_Item.GetItemIconByID(itemInfo) return 0 end",
        "retail": true
      }
    ],
    "GetItemIcon": [
      {
        "name": "C_Item.GetItemIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemIcon(itemLocation) return 0 end",
        "retail": true
      }
    ],
    "ConfirmOnUse": [
      {
        "name": "C_Item.ConfirmOnUse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ConfirmOnUse() end",
        "retail": true
      }
    ],
    "GetItemIDForItemInfo": [
      {
        "name": "C_Item.GetItemIDForItemInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemIDForItemInfo() end",
        "retail": true
      }
    ],
    "IsCorruptedItem": [
      {
        "name": "C_Item.IsCorruptedItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsCorruptedItem() end",
        "retail": true
      }
    ],
    "GetBaseItemTransmogInfo": [
      {
        "name": "C_Item.GetBaseItemTransmogInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetBaseItemTransmogInfo() end",
        "retail": true
      }
    ],
    "GetItemMaxStackSize": [
      {
        "name": "C_Item.GetItemMaxStackSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemMaxStackSize() end",
        "retail": true
      }
    ],
    "ConfirmNoRefundOnUse": [
      {
        "name": "C_Item.ConfirmNoRefundOnUse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ConfirmNoRefundOnUse() end",
        "retail": true
      }
    ],
    "GetFirstTriggeredSpellForItem": [
      {
        "name": "C_Item.GetFirstTriggeredSpellForItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetFirstTriggeredSpellForItem() end",
        "retail": true
      }
    ],
    "GetItemInventorySlotInfo": [
      {
        "name": "C_Item.GetItemInventorySlotInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemInventorySlotInfo() end",
        "retail": true
      }
    ],
    "IsItemCorrupted": [
      {
        "name": "C_Item.IsItemCorrupted",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemCorrupted() end",
        "retail": true
      }
    ],
    "ActionBindsItem": [
      {
        "name": "C_Item.ActionBindsItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ActionBindsItem() end",
        "retail": true
      }
    ],
    "GetCurrentItemTransmogInfo": [
      {
        "name": "C_Item.GetCurrentItemTransmogInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetCurrentItemTransmogInfo() end",
        "retail": true
      }
    ],
    "RequestLoadItemDataByID": [
      {
        "name": "C_Item.RequestLoadItemDataByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.RequestLoadItemDataByID() end",
        "retail": true
      }
    ],
    "GetItemSetInfo": [
      {
        "name": "C_Item.GetItemSetInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemSetInfo() end",
        "retail": true
      }
    ],
    "GetItemCreationContext": [
      {
        "name": "C_Item.GetItemCreationContext",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemCreationContext() end",
        "retail": true
      }
    ],
    "IsItemDataCachedByID": [
      {
        "name": "C_Item.IsItemDataCachedByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemDataCachedByID() end",
        "retail": true
      }
    ],
    "ItemHasRange": [
      {
        "name": "C_Item.ItemHasRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ItemHasRange() end",
        "retail": true
      }
    ],
    "ConfirmBindOnUse": [
      {
        "name": "C_Item.ConfirmBindOnUse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ConfirmBindOnUse() end",
        "retail": true
      }
    ],
    "GetItemSpecInfo": [
      {
        "name": "C_Item.GetItemSpecInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemSpecInfo() end",
        "retail": true
      }
    ],
    "EndBoundTradeable": [
      {
        "name": "C_Item.EndBoundTradeable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.EndBoundTradeable() end",
        "retail": true
      }
    ],
    "EndRefund": [
      {
        "name": "C_Item.EndRefund",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.EndRefund() end",
        "retail": true
      }
    ],
    "UseItemByName": [
      {
        "name": "C_Item.UseItemByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.UseItemByName() end",
        "retail": true
      }
    ],
    "IsDressableItemByID": [
      {
        "name": "C_Item.IsDressableItemByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsDressableItemByID() end",
        "retail": true
      }
    ],
    "GetItemGUID": [
      {
        "name": "C_Item.GetItemGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemGUID() end",
        "retail": true
      }
    ],
    "GetItemInventoryTypeByID": [
      {
        "name": "C_Item.GetItemInventoryTypeByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemInventoryTypeByID() end",
        "retail": true
      }
    ],
    "UnlockItem": [
      {
        "name": "C_Item.UnlockItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.UnlockItem() end",
        "retail": true
      }
    ],
    "RequestLoadItemData": [
      {
        "name": "C_Item.RequestLoadItemData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.RequestLoadItemData() end",
        "retail": true
      }
    ],
    "IsItemInRange": [
      {
        "name": "C_Item.IsItemInRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemInRange() end",
        "retail": true
      }
    ],
    "IsItemConvertibleAndValidForPlayer": [
      {
        "name": "C_Item.IsItemConvertibleAndValidForPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemConvertibleAndValidForPlayer() end",
        "retail": true
      }
    ],
    "DoesItemExist": [
      {
        "name": "C_Item.DoesItemExist",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemExist() end",
        "retail": true
      }
    ],
    "ReplaceTradeEnchant": [
      {
        "name": "C_Item.ReplaceTradeEnchant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ReplaceTradeEnchant() end",
        "retail": true
      },
      {
        "name": "ReplaceTradeEnchant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ReplaceTradeEnchant(slotId) end",
        "retail": true
      }
    ],
    "UnlockItemByGUID": [
      {
        "name": "C_Item.UnlockItemByGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.UnlockItemByGUID() end",
        "retail": true
      }
    ],
    "DoesItemExistByID": [
      {
        "name": "C_Item.DoesItemExistByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemExistByID() end",
        "retail": true
      }
    ],
    "LockItemByGUID": [
      {
        "name": "C_Item.LockItemByGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.LockItemByGUID() end",
        "retail": true
      }
    ],
    "GetItemIDByGUID": [
      {
        "name": "C_Item.GetItemIDByGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemIDByGUID() end",
        "retail": true
      }
    ],
    "IsLocked": [
      {
        "name": "C_Item.IsLocked",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsLocked() end",
        "retail": true
      }
    ],
    "IsItemSpecificToPlayerClass": [
      {
        "name": "C_Item.IsItemSpecificToPlayerClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemSpecificToPlayerClass() end",
        "retail": true
      }
    ],
    "GetItemNumAddedSockets": [
      {
        "name": "C_Item.GetItemNumAddedSockets",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemNumAddedSockets() end",
        "retail": true
      }
    ],
    "IsItemKeystoneByID": [
      {
        "name": "C_Item.IsItemKeystoneByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemKeystoneByID() end",
        "retail": true
      }
    ],
    "IsConsumableItem": [
      {
        "name": "C_Item.IsConsumableItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsConsumableItem() end",
        "retail": true
      }
    ],
    "IsCurioItem": [
      {
        "name": "C_Item.IsCurioItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsCurioItem() end",
        "retail": true
      }
    ],
    "GetItemStatDelta": [
      {
        "name": "C_Item.GetItemStatDelta",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemStatDelta() end",
        "retail": true
      }
    ],
    "IsItemDataCached": [
      {
        "name": "C_Item.IsItemDataCached",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemDataCached() end",
        "retail": true
      }
    ],
    "IsItemConduit": [
      {
        "name": "C_Item.IsItemConduit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemConduit() end",
        "retail": true
      }
    ],
    "GetItemNumSockets": [
      {
        "name": "C_Item.GetItemNumSockets",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemNumSockets() end",
        "retail": true
      }
    ],
    "GetAppliedItemTransmogInfo": [
      {
        "name": "C_Item.GetAppliedItemTransmogInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetAppliedItemTransmogInfo() end",
        "retail": true
      }
    ],
    "IsHelpfulItem": [
      {
        "name": "C_Item.IsHelpfulItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsHelpfulItem() end",
        "retail": true
      }
    ],
    "GetItemUniquenessByID": [
      {
        "name": "C_Item.GetItemUniquenessByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemUniquenessByID() end",
        "retail": true
      }
    ],
    "GetItemGemID": [
      {
        "name": "C_Item.GetItemGemID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemGemID() end",
        "retail": true
      }
    ],
    "IsHarmfulItem": [
      {
        "name": "C_Item.IsHarmfulItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsHarmfulItem() end",
        "retail": true
      }
    ],
    "DropItemOnUnit": [
      {
        "name": "C_Item.DropItemOnUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DropItemOnUnit() end",
        "retail": true
      },
      {
        "name": "DropItemOnUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropItemOnUnit(itemName, unit) end",
        "retail": true
      }
    ],
    "IsEquippedItemType": [
      {
        "name": "C_Item.IsEquippedItemType",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsEquippedItemType() end",
        "retail": true
      }
    ],
    "GetItemFamily": [
      {
        "name": "C_Item.GetItemFamily",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemFamily() end",
        "retail": true
      }
    ],
    "GetLimitedCurrencyItemInfo": [
      {
        "name": "C_Item.GetLimitedCurrencyItemInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetLimitedCurrencyItemInfo() end",
        "retail": true
      }
    ],
    "GetItemInventorySlotKey": [
      {
        "name": "C_Item.GetItemInventorySlotKey",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemInventorySlotKey() end",
        "retail": true
      }
    ],
    "IsEquippableItem": [
      {
        "name": "C_Item.IsEquippableItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsEquippableItem() end",
        "retail": true
      }
    ],
    "GetItemConversionOutputIcon": [
      {
        "name": "C_Item.GetItemConversionOutputIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemConversionOutputIcon() end",
        "retail": true
      }
    ],
    "ReplaceEnchant": [
      {
        "name": "C_Item.ReplaceEnchant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ReplaceEnchant() end",
        "retail": true
      }
    ],
    "GetItemLearnTransmogSet": [
      {
        "name": "C_Item.GetItemLearnTransmogSet",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemLearnTransmogSet() end",
        "retail": true
      }
    ],
    "IsCurrentItem": [
      {
        "name": "C_Item.IsCurrentItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsCurrentItem() end",
        "retail": true
      }
    ],
    "IsItemGUIDInInventory": [
      {
        "name": "C_Item.IsItemGUIDInInventory",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemGUIDInInventory() end",
        "retail": true
      }
    ],
    "GetItemGem": [
      {
        "name": "C_Item.GetItemGem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemGem() end",
        "retail": true
      }
    ],
    "IsCosmeticItem": [
      {
        "name": "C_Item.IsCosmeticItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsCosmeticItem() end",
        "retail": true
      }
    ],
    "IsArtifactPowerItem": [
      {
        "name": "C_Item.IsArtifactPowerItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsArtifactPowerItem() end",
        "retail": true
      }
    ],
    "ReplaceTradeskillEnchant": [
      {
        "name": "C_Item.ReplaceTradeskillEnchant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.ReplaceTradeskillEnchant() end",
        "retail": true
      }
    ],
    "GetSetBonusesForSpecializationByItemID": [
      {
        "name": "C_Item.GetSetBonusesForSpecializationByItemID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetSetBonusesForSpecializationByItemID() end",
        "retail": true
      }
    ],
    "GetItemSpell": [
      {
        "name": "C_Item.GetItemSpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemSpell() end",
        "retail": true
      }
    ],
    "DoesItemMatchBonusTreeReplacement": [
      {
        "name": "C_Item.DoesItemMatchBonusTreeReplacement",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemMatchBonusTreeReplacement() end",
        "retail": true
      }
    ],
    "GetCurrentItemLevel": [
      {
        "name": "C_Item.GetCurrentItemLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetCurrentItemLevel() end",
        "retail": true
      }
    ],
    "DoesItemContainSpec": [
      {
        "name": "C_Item.DoesItemContainSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemContainSpec() end",
        "retail": true
      }
    ],
    "CanItemTransmogAppearance": [
      {
        "name": "C_Item.CanItemTransmogAppearance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.CanItemTransmogAppearance() end",
        "retail": true
      }
    ],
    "GetItemQualityByID": [
      {
        "name": "C_Item.GetItemQualityByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemQualityByID() end",
        "retail": true
      }
    ],
    "GetItemLinkByGUID": [
      {
        "name": "C_Item.GetItemLinkByGUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemLinkByGUID() end",
        "retail": true
      }
    ],
    "BindEnchant": [
      {
        "name": "C_Item.BindEnchant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.BindEnchant() end",
        "retail": true
      }
    ],
    "IsItemCorruptionResistant": [
      {
        "name": "C_Item.IsItemCorruptionResistant",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.IsItemCorruptionResistant() end",
        "retail": true
      }
    ],
    "CanViewItemPowers": [
      {
        "name": "C_Item.CanViewItemPowers",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.CanViewItemPowers() end",
        "retail": true
      }
    ],
    "GetItemChildInfo": [
      {
        "name": "C_Item.GetItemChildInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemChildInfo() end",
        "retail": true
      }
    ],
    "GetItemLink": [
      {
        "name": "C_Item.GetItemLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemLink() end",
        "retail": true
      }
    ],
    "CanScrapItem": [
      {
        "name": "C_Item.CanScrapItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.CanScrapItem() end",
        "retail": true
      }
    ],
    "GetItemName": [
      {
        "name": "C_Item.GetItemName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemName() end",
        "retail": true
      }
    ],
    "GetItemInventoryType": [
      {
        "name": "C_Item.GetItemInventoryType",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemInventoryType() end",
        "retail": true
      }
    ],
    "GetItemMaxStackSizeByID": [
      {
        "name": "C_Item.GetItemMaxStackSizeByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetItemMaxStackSizeByID() end",
        "retail": true
      }
    ],
    "DoesItemMatchTrackJump": [
      {
        "name": "C_Item.DoesItemMatchTrackJump",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.DoesItemMatchTrackJump() end",
        "retail": true
      }
    ],
    "GetStackCount": [
      {
        "name": "C_Item.GetStackCount",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Item.GetStackCount() end",
        "retail": true
      }
    ],
    "GetGuildFactionData": [
      {
        "name": "C_Reputation.GetGuildFactionData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_Reputation.GetGuildFactionData() return {} end",
        "retail": true
      }
    ],
    "AddPrivateAuraAnchor": [
      {
        "name": "C_UnitAuras.AddPrivateAuraAnchor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.AddPrivateAuraAnchor(privateAuraAnchor)end",
        "retail": true
      }
    ],
    "AddPrivateAuraAppliedSound": [
      {
        "name": "C_UnitAuras.AddPrivateAuraAppliedSound",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.AddPrivateAuraAppliedSound(privateAuraAnchor) return 0 end",
        "retail": true
      }
    ],
    "AuraIsPrivate": [
      {
        "name": "C_UnitAuras.AuraIsPrivate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.AuraIsPrivate(spellID) return true end",
        "retail": true
      }
    ],
    "SetPrivateWarningTextAnchor": [
      {
        "name": "C_UnitAuras.SetPrivateWarningTextAnchor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.SetPrivateWarningTextAnchor(parent, anchor) end",
        "retail": true
      }
    ],
    "RemovePrivateAuraAnchor": [
      {
        "name": "C_UnitAuras.RemovePrivateAuraAnchor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.RemovePrivateAuraAnchor(anchorID) end",
        "retail": true
      }
    ],
    "RemovePrivateAuraAppliedSound": [
      {
        "name": "C_UnitAuras.RemovePrivateAuraAppliedSound",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.RemovePrivateAuraAppliedSound(privateAuraSoundID) end",
        "retail": true
      }
    ],
    "GetAuraDataByAuraInstanceID": [
      {
        "name": "C_UnitAuras.GetAuraDataByAuraInstanceID",
        "count": 6,
        "confidence": 1.0,
        "sample": "function C_UnitAuras.GetAuraDataByAuraInstanceID(unitToken, auraInstanceID) return {} end",
        "retail": true
      }
    ],
    "GetAuraDataBySlot": [
      {
        "name": "C_UnitAuras.GetAuraDataBySlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.GetAuraDataBySlot(unitToken, auraSlot) return {} end",
        "retail": true
      }
    ],
    "GetAuraDataBySpellName": [
      {
        "name": "C_UnitAuras.GetAuraDataBySpellName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.GetAuraDataBySpellName(unitToken, spellName, filter) return {} end",
        "retail": true
      }
    ],
    "GetAuraSlots": [
      {
        "name": "C_UnitAuras.GetAuraSlots",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.GetAuraSlots(unitToken, filter, maxSlots, continuationToken) return 0, 0 end",
        "retail": true
      }
    ],
    "GetDebuffDataByIndex": [
      {
        "name": "C_UnitAuras.GetDebuffDataByIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.GetDebuffDataByIndex(unitToken, index, filter) return {} end",
        "retail": true
      }
    ],
    "GetCooldownAuraBySpellID": [
      {
        "name": "C_UnitAuras.GetCooldownAuraBySpellID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.GetCooldownAuraBySpellID(spellID) return 0 end",
        "retail": true
      }
    ],
    "IsAuraFilteredOutByInstanceID": [
      {
        "name": "C_UnitAuras.IsAuraFilteredOutByInstanceID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.IsAuraFilteredOutByInstanceID(unitToken, auraInstanceID, filterString) return true end",
        "retail": true
      }
    ],
    "WantsAlteredForm": [
      {
        "name": "C_UnitAuras.WantsAlteredForm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_UnitAuras.WantsAlteredForm(unitToken) return true end",
        "retail": true
      }
    ],
    "Clamp": [
      {
        "name": "Clamp",
        "count": 12,
        "confidence": 1.0,
        "sample": "---clamps a value between a minimum and maximum range. Example: Clamp(17, 13, 15) return 15",
        "retail": true
      },
      {
        "name": "DF.Math.Clamp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.Clamp(minValue, maxValue, value)",
        "retail": true
      }
    ],
    "Saturate": [
      {
        "name": "Saturate",
        "count": 17,
        "confidence": 1.0,
        "sample": "--lock a value to be between 0 and 1. Example: Saturate(1.324) return 1, Saturate(-0.324) return 0",
        "retail": true
      }
    ],
    "Wrap": [
      {
        "name": "Wrap",
        "count": 2,
        "confidence": 0.4,
        "sample": "---wraps a value within a specified range. Example: Wrap(17, 13) return 4",
        "retail": true
      }
    ],
    "ClampMod": [
      {
        "name": "ClampMod",
        "count": 2,
        "confidence": 0.4,
        "sample": "---wraps a value within a specified range using modular arithmetic. Example: ClampMod(11, 3) return 2 (11 % 3 = 2)",
        "retail": true
      }
    ],
    "ClampDegrees": [
      {
        "name": "ClampDegrees",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ClampDegrees(value) return 0 end",
        "retail": true
      }
    ],
    "NegateIf": [
      {
        "name": "NegateIf",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NegateIf(value, condition) return 0 end",
        "retail": true
      }
    ],
    "RandomFloatInRange": [
      {
        "name": "RandomFloatInRange",
        "count": 9,
        "confidence": 1.0,
        "sample": "function RandomFloatInRange(minValue, maxValue) return 0 end",
        "retail": true
      }
    ],
    "PercentageBetween": [
      {
        "name": "PercentageBetween",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PercentageBetween(value, startValue, endValue) return 0 end",
        "retail": true
      }
    ],
    "ClampedPercentageBetween": [
      {
        "name": "ClampedPercentageBetween",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ClampedPercentageBetween(value, startValue, endValue) return 0 end",
        "retail": true
      }
    ],
    "GetTickTime": [
      {
        "name": "GetTickTime",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetTickTime() return 0 end",
        "retail": true
      }
    ],
    "DeltaLerp": [
      {
        "name": "DeltaLerp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DeltaLerp(startValue, endValue, amount, timeSec) return 0 end",
        "retail": true
      }
    ],
    "FrameDeltaLerp": [
      {
        "name": "FrameDeltaLerp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FrameDeltaLerp(startValue, endValue, amount) return 0 end",
        "retail": true
      }
    ],
    "RoundToSignificantDigits": [
      {
        "name": "RoundToSignificantDigits",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RoundToSignificantDigits(value, numDigits) return 0 end",
        "retail": true
      }
    ],
    "Square": [
      {
        "name": "Square",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Square(value) return 0 end",
        "retail": true
      }
    ],
    "Sign": [
      {
        "name": "Sign",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Sign(value) return 0 end",
        "retail": true
      }
    ],
    "WithinRange": [
      {
        "name": "WithinRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WithinRange(value, min, max) return true end",
        "retail": true
      }
    ],
    "WithinRangeExclusive": [
      {
        "name": "WithinRangeExclusive",
        "count": 1,
        "confidence": 0.2,
        "sample": "function WithinRangeExclusive(value, min, max) return true end",
        "retail": true
      }
    ],
    "ApproximatelyEqual": [
      {
        "name": "ApproximatelyEqual",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ApproximatelyEqual(v1, v2, epsilon) return true end",
        "retail": true
      }
    ],
    "CalculateDistanceSq": [
      {
        "name": "CalculateDistanceSq",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CalculateDistanceSq(x1, y1, x2, y2) return 0 end",
        "retail": true
      }
    ],
    "CalculateDistance": [
      {
        "name": "CalculateDistance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CalculateDistance(x1, y1, x2, y2) return 0 end",
        "retail": true
      }
    ],
    "CalculateAngleBetween": [
      {
        "name": "CalculateAngleBetween",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CalculateAngleBetween(x1, y1, x2, y2) return 0 end",
        "retail": true
      }
    ],
    "Round": [
      {
        "name": "Round",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Round(value) return 0 end",
        "retail": true
      },
      {
        "name": "DF.Math.Round",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.Round(num, numDecimalPlaces)",
        "retail": true
      }
    ],
    "SetRGBA": [
      {
        "name": "SetRGBA",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:SetRGBA(r, g, b, a) end",
        "retail": true
      }
    ],
    "SetRGB": [
      {
        "name": "SetRGB",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:SetRGB(r, g, b) end",
        "retail": true
      }
    ],
    "GetRGBAsBytes": [
      {
        "name": "GetRGBAsBytes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:GetRGBAsBytes() return 0, 0, 0 end",
        "retail": true
      }
    ],
    "GetRGBA": [
      {
        "name": "GetRGBA",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:GetRGBA() return 0, 0, 0, 0 end",
        "retail": true
      }
    ],
    "GetRGBAAsBytes": [
      {
        "name": "GetRGBAAsBytes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:GetRGBAAsBytes() return 0, 0, 0, 0 end",
        "retail": true
      }
    ],
    "IsRGBEqualTo": [
      {
        "name": "IsRGBEqualTo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:IsRGBEqualTo(otherColor) return true end",
        "retail": true
      }
    ],
    "IsEqualTo": [
      {
        "name": "IsEqualTo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:IsEqualTo(otherColor) return true end",
        "retail": true
      }
    ],
    "GenerateHexColor": [
      {
        "name": "GenerateHexColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ColorMixin:GenerateHexColor() return \"\" end",
        "retail": true
      }
    ],
    "GenerateHexColorNoAlpha": [
      {
        "name": "GenerateHexColorNoAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:GenerateHexColorNoAlpha() return \"\" end",
        "retail": true
      }
    ],
    "GenerateHexColorMarkup": [
      {
        "name": "GenerateHexColorMarkup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ColorMixin:GenerateHexColorMarkup() return \"\" end",
        "retail": true
      }
    ],
    "WrapTextInColorCode": [
      {
        "name": "WrapTextInColorCode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ColorMixin:WrapTextInColorCode(text) return \"\" end",
        "retail": true
      }
    ],
    "GetChallengeCompletionInfo": [
      {
        "name": "C_ChallengeMode.GetChallengeCompletionInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "function C_ChallengeMode.GetChallengeCompletionInfo() return {} end",
        "retail": true
      },
      {
        "name": "GetChallengeCompletionInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.MythicPlus.LogStep(\"GetChallengeCompletionInfo() Found, Time: \" .. Details222.MythicPlus.time)",
        "retail": true
      }
    ],
    "GetDeathCount": [
      {
        "name": "C_ChallengeMode.GetDeathCount",
        "count": 3,
        "confidence": 0.6,
        "sample": "function C_ChallengeMode.GetDeathCount() return 0, 0 end",
        "retail": true
      }
    ],
    "GetDungeonScoreRarityColor": [
      {
        "name": "C_ChallengeMode.GetDungeonScoreRarityColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "function C_ChallengeMode.GetDungeonScoreRarityColor(dungeonScore) return {} end",
        "retail": true
      }
    ],
    "GetGuildLeaders": [
      {
        "name": "C_ChallengeMode.GetGuildLeaders",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetGuildLeaders() return {} end",
        "retail": true
      }
    ],
    "GetKeystoneLevelRarityColor": [
      {
        "name": "C_ChallengeMode.GetKeystoneLevelRarityColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetKeystoneLevelRarityColor(level) return {} end",
        "retail": true
      }
    ],
    "GetMapScoreInfo": [
      {
        "name": "C_ChallengeMode.GetMapScoreInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetMapScoreInfo() return {} end",
        "retail": true
      }
    ],
    "GetMapUIInfo": [
      {
        "name": "C_ChallengeMode.GetMapUIInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "function C_ChallengeMode.GetMapUIInfo(mapChallengeModeID) return \"\", 0, 0, 0, 0 end",
        "retail": true
      }
    ],
    "CanUseKeystoneInCurrentMap": [
      {
        "name": "C_ChallengeMode.CanUseKeystoneInCurrentMap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.CanUseKeystoneInCurrentMap(itemLocation) return true end",
        "retail": true
      }
    ],
    "ClearKeystone": [
      {
        "name": "C_ChallengeMode.ClearKeystone",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.ClearKeystone() end",
        "retail": true
      }
    ],
    "CloseKeystoneFrame": [
      {
        "name": "C_ChallengeMode.CloseKeystoneFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.CloseKeystoneFrame() end",
        "retail": true
      }
    ],
    "HasSlottedKeystone": [
      {
        "name": "C_ChallengeMode.HasSlottedKeystone",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.HasSlottedKeystone() return true end",
        "retail": true
      }
    ],
    "RemoveKeystone": [
      {
        "name": "C_ChallengeMode.RemoveKeystone",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.RemoveKeystone() return true end",
        "retail": true
      }
    ],
    "RequestLeaders": [
      {
        "name": "C_ChallengeMode.RequestLeaders",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.RequestLeaders(mapChallengeModeID) end",
        "retail": true
      }
    ],
    "SlotKeystone": [
      {
        "name": "C_ChallengeMode.SlotKeystone",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.SlotKeystone() end",
        "retail": true
      }
    ],
    "StartChallengeMode": [
      {
        "name": "C_ChallengeMode.StartChallengeMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.StartChallengeMode() return true end",
        "retail": true
      }
    ],
    "GetPowerLevelDamageHealthMod": [
      {
        "name": "C_ChallengeMode.GetPowerLevelDamageHealthMod",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetPowerLevelDamageHealthMod(powerLevel) return 0, 0 end",
        "retail": true
      }
    ],
    "GetOverallDungeonScore": [
      {
        "name": "C_ChallengeMode.GetOverallDungeonScore",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetOverallDungeonScore() return 0 end",
        "retail": true
      }
    ],
    "GetSlottedKeystoneInfo": [
      {
        "name": "C_ChallengeMode.GetSlottedKeystoneInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetSlottedKeystoneInfo() return 0, {}, 0 end",
        "retail": true
      }
    ],
    "GetSpecificDungeonOverallScoreRarityColor": [
      {
        "name": "C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor(specificDungeonOverallScore) return {} end",
        "retail": true
      }
    ],
    "GetSpecificDungeonScoreRarityColor": [
      {
        "name": "C_ChallengeMode.GetSpecificDungeonScoreRarityColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetSpecificDungeonScoreRarityColor(specificDungeonScore) return {} end",
        "retail": true
      }
    ],
    "GetOverallDungeonScoreRarityColor": [
      {
        "name": "C_ChallengeMode.GetOverallDungeonScoreRarityColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function C_ChallengeMode.GetOverallDungeonScoreRarityColor(overallDungeonScore) return {} end",
        "retail": true
      }
    ],
    "GetSpellCharges": [
      {
        "name": "C_Spell.GetSpellCharges",
        "count": 5,
        "confidence": 1.0,
        "sample": "function C_Spell.GetSpellCharges(spellID) return {} end",
        "retail": true
      },
      {
        "name": "GetSpellCharges",
        "count": 2,
        "confidence": 0.4,
        "sample": "local chargesAvailable, chargesTotal, start, duration = GetSpellCharges(spellId)",
        "retail": true
      }
    ],
    "GetSpecializationInfoForSpecID": [
      {
        "name": "GetSpecializationInfoForSpecID",
        "count": 1,
        "confidence": 0.2,
        "sample": "--make here the documentation for the function GetSpecializationInfoForSpecID() following the same pattern as the other functions",
        "retail": true
      }
    ],
    "SetupFullscreenScale": [
      {
        "name": "SetupFullscreenScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SetupFullscreenScale(scale) end",
        "retail": true
      }
    ],
    "UpdateMapHighlight": [
      {
        "name": "UpdateMapHighlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UpdateMapHighlight(highlightType, texturePath, textureX, textureY, pulseTexturePath, pulseTextureX, pulseTextureY) end",
        "retail": true
      }
    ],
    "CreateWorldMapArrowFrame": [
      {
        "name": "CreateWorldMapArrowFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CreateWorldMapArrowFrame() return {} end",
        "retail": true
      }
    ],
    "UpdateWorldMapArrowFrames": [
      {
        "name": "UpdateWorldMapArrowFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UpdateWorldMapArrowFrames(arrowFrame, playerX, playerY) end",
        "retail": true
      }
    ],
    "ShowWorldMapArrowFrame": [
      {
        "name": "ShowWorldMapArrowFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ShowWorldMapArrowFrame(arrowFrame) end",
        "retail": true
      }
    ],
    "IsMacClient": [
      {
        "name": "IsMacClient",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsMacClient() return true end",
        "retail": true
      }
    ],
    "IsRightAltKeyDown": [
      {
        "name": "IsRightAltKeyDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsRightAltKeyDown() return true end",
        "retail": true
      }
    ],
    "IsRightControlKeyDown": [
      {
        "name": "IsRightControlKeyDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsRightControlKeyDown() return true end",
        "retail": true
      }
    ],
    "IsRightShiftKeyDown": [
      {
        "name": "IsRightShiftKeyDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsRightShiftKeyDown() return true end",
        "retail": true
      }
    ],
    "IsStereoVideoAvailable": [
      {
        "name": "IsStereoVideoAvailable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsStereoVideoAvailable() return true end",
        "retail": true
      }
    ],
    "IsWindowsClient": [
      {
        "name": "IsWindowsClient",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsWindowsClient() return true end",
        "retail": true
      }
    ],
    "OpeningCinematic": [
      {
        "name": "OpeningCinematic",
        "count": 1,
        "confidence": 0.2,
        "sample": "function OpeningCinematic(cinematicIndex) end",
        "retail": true
      }
    ],
    "PlayMusic": [
      {
        "name": "PlayMusic",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PlayMusic(musicFile) end",
        "retail": true
      }
    ],
    "StopSound": [
      {
        "name": "StopSound",
        "count": 2,
        "confidence": 0.4,
        "sample": "function StopSound(soundHandle, fadeOutTime) end",
        "retail": true
      }
    ],
    "MuteSoundFile": [
      {
        "name": "MuteSoundFile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function MuteSoundFile(soundId) end",
        "retail": true
      }
    ],
    "UnmuteSoundFile": [
      {
        "name": "UnmuteSoundFile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnmuteSoundFile(soundId) end",
        "retail": true
      }
    ],
    "RepopMe": [
      {
        "name": "RepopMe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RepopMe() end",
        "retail": true
      }
    ],
    "RestartGx": [
      {
        "name": "RestartGx",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RestartGx() end",
        "retail": true
      }
    ],
    "RunScript": [
      {
        "name": "RunScript",
        "count": 1,
        "confidence": 0.2,
        "sample": "function RunScript(script) end",
        "retail": true
      }
    ],
    "SetAutoDeclineGuildInvites": [
      {
        "name": "SetAutoDeclineGuildInvites",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SetAutoDeclineGuildInvites(autoDecline) end",
        "retail": true
      }
    ],
    "StopCinematic": [
      {
        "name": "StopCinematic",
        "count": 1,
        "confidence": 0.2,
        "sample": "function StopCinematic() end",
        "retail": true
      }
    ],
    "StopMusic": [
      {
        "name": "StopMusic",
        "count": 1,
        "confidence": 0.2,
        "sample": "function StopMusic() end",
        "retail": true
      }
    ],
    "UIParentLoadAddOn": [
      {
        "name": "UIParentLoadAddOn",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UIParentLoadAddOn(addonName) end",
        "retail": true
      }
    ],
    "TakeScreenshot": [
      {
        "name": "TakeScreenshot",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TakeScreenshot(delay) end",
        "retail": true
      }
    ],
    "BuyTrainerService": [
      {
        "name": "BuyTrainerService",
        "count": 1,
        "confidence": 0.2,
        "sample": "function BuyTrainerService(trainerIndex, talentIndex) end",
        "retail": true
      }
    ],
    "CheckTalentMasterDist": [
      {
        "name": "CheckTalentMasterDist",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CheckTalentMasterDist() return 0, 0 end",
        "retail": true
      }
    ],
    "ConfirmTalentWipe": [
      {
        "name": "ConfirmTalentWipe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ConfirmTalentWipe() end",
        "retail": true
      }
    ],
    "GetActiveTalentGroup": [
      {
        "name": "GetActiveTalentGroup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GetActiveTalentGroup() return 0 end",
        "retail": true
      }
    ],
    "GetNumTalentTabs": [
      {
        "name": "GetNumTalentTabs",
        "count": 3,
        "confidence": 0.6,
        "sample": "function GetNumTalentTabs() return 0 end",
        "retail": true
      }
    ],
    "GetNumTalents": [
      {
        "name": "GetNumTalents",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GetNumTalents(tabIndex) return 0 end",
        "retail": true
      }
    ],
    "GetTalentLink": [
      {
        "name": "GetTalentLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetTalentLink(tabIndex, talentIndex, isInspect) return \"\" end",
        "retail": true
      }
    ],
    "GetTalentPrereqs": [
      {
        "name": "GetTalentPrereqs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetTalentPrereqs(tabIndex, talentIndex, isInspect) return 0 end",
        "retail": true
      }
    ],
    "LearnTalent": [
      {
        "name": "LearnTalent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LearnTalent(tabIndex, talentIndex) end",
        "retail": true
      }
    ],
    "SetActiveTalentGroup": [
      {
        "name": "SetActiveTalentGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SetActiveTalentGroup(talentGroup) end",
        "retail": true
      }
    ],
    "GetNumTalentGroups": [
      {
        "name": "GetNumTalentGroups",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetNumTalentGroups() return 0 end",
        "retail": true
      }
    ],
    "AddPreviewTalentPoints": [
      {
        "name": "AddPreviewTalentPoints",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AddPreviewTalentPoints(amount) end",
        "retail": true
      }
    ],
    "GetGroupPreviewTalentPointsSpent": [
      {
        "name": "GetGroupPreviewTalentPointsSpent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetGroupPreviewTalentPointsSpent(talentGroup) return 0 end",
        "retail": true
      }
    ],
    "GetPreviewTalentPointsSpent": [
      {
        "name": "GetPreviewTalentPointsSpent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetPreviewTalentPointsSpent() return 0 end",
        "retail": true
      }
    ],
    "GetUnspentTalentPoints": [
      {
        "name": "GetUnspentTalentPoints",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetUnspentTalentPoints() return 0 end",
        "retail": true
      }
    ],
    "LearnPreviewTalents": [
      {
        "name": "LearnPreviewTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "function LearnPreviewTalents() end",
        "retail": true
      }
    ],
    "ResetGroupPreviewTalentPoints": [
      {
        "name": "ResetGroupPreviewTalentPoints",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ResetGroupPreviewTalentPoints(talentGroup) end",
        "retail": true
      }
    ],
    "ResetPreviewTalentPoints": [
      {
        "name": "ResetPreviewTalentPoints",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ResetPreviewTalentPoints() end",
        "retail": true
      }
    ],
    "AssistUnit": [
      {
        "name": "AssistUnit",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AssistUnit(unit) end",
        "retail": true
      }
    ],
    "AttackTarget": [
      {
        "name": "AttackTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AttackTarget() end",
        "retail": true
      }
    ],
    "ClearTarget": [
      {
        "name": "ClearTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ClearTarget() end",
        "retail": true
      }
    ],
    "ClickTargetTradeButton": [
      {
        "name": "ClickTargetTradeButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ClickTargetTradeButton() end",
        "retail": true
      }
    ],
    "TargetLastEnemy": [
      {
        "name": "TargetLastEnemy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetLastEnemy() end",
        "retail": true
      }
    ],
    "TargetLastTarget": [
      {
        "name": "TargetLastTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetLastTarget() end",
        "retail": true
      }
    ],
    "TargetNearestEnemy": [
      {
        "name": "TargetNearestEnemy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestEnemy() end",
        "retail": true
      }
    ],
    "TargetNearestEnemyPlayer": [
      {
        "name": "TargetNearestEnemyPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestEnemyPlayer() end",
        "retail": true
      }
    ],
    "TargetNearestFriend": [
      {
        "name": "TargetNearestFriend",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestFriend() end",
        "retail": true
      }
    ],
    "TargetNearestFriendPlayer": [
      {
        "name": "TargetNearestFriendPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestFriendPlayer() end",
        "retail": true
      }
    ],
    "TargetNearestPartyMember": [
      {
        "name": "TargetNearestPartyMember",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestPartyMember() end",
        "retail": true
      }
    ],
    "TargetNearestRaidMember": [
      {
        "name": "TargetNearestRaidMember",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TargetNearestRaidMember() end",
        "retail": true
      }
    ],
    "TargetUnit": [
      {
        "name": "TargetUnit",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TargetUnit(unit) end",
        "retail": true
      }
    ],
    "ToggleBackpack": [
      {
        "name": "ToggleBackpack",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ToggleBackpack() end",
        "retail": true
      }
    ],
    "ToggleBag": [
      {
        "name": "ToggleBag",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ToggleBag() end",
        "retail": true
      }
    ],
    "ToggleFriendsFrame": [
      {
        "name": "ToggleFriendsFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ToggleFriendsFrame() end",
        "retail": true
      }
    ],
    "ToggleSpellBook": [
      {
        "name": "ToggleSpellBook",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ToggleSpellBook() end",
        "retail": true
      }
    ],
    "TradeSkill": [
      {
        "name": "TradeSkill",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TradeSkill() end",
        "retail": true
      }
    ],
    "CloseTradeSkill": [
      {
        "name": "CloseTradeSkill",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CloseTradeSkill() end",
        "retail": true
      }
    ],
    "CollapseTradeSkillSubClass": [
      {
        "name": "CollapseTradeSkillSubClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CollapseTradeSkillSubClass(index) end",
        "retail": true
      }
    ],
    "PickupPlayerMoney": [
      {
        "name": "PickupPlayerMoney",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PickupPlayerMoney(amount) end",
        "retail": true
      }
    ],
    "PickupTradeMoney": [
      {
        "name": "PickupTradeMoney",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PickupTradeMoney(amount) end",
        "retail": true
      }
    ],
    "SetTradeMoney": [
      {
        "name": "SetTradeMoney",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SetTradeMoney(money) end",
        "retail": true
      }
    ],
    "CheckInteractDistance": [
      {
        "name": "CheckInteractDistance",
        "count": 4,
        "confidence": 0.8,
        "sample": "function CheckInteractDistance(unit, maxDistance) return true end",
        "retail": true
      }
    ],
    "FollowUnit": [
      {
        "name": "FollowUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FollowUnit(unit) end",
        "retail": true
      }
    ],
    "FocusUnit": [
      {
        "name": "FocusUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function FocusUnit(unit) end",
        "retail": true
      }
    ],
    "GetUnitPitch": [
      {
        "name": "GetUnitPitch",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetUnitPitch(unit) return 0 end",
        "retail": true
      }
    ],
    "InviteUnit": [
      {
        "name": "InviteUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function InviteUnit(unit) end",
        "retail": true
      }
    ],
    "IsUnitOnQuest": [
      {
        "name": "IsUnitOnQuest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function IsUnitOnQuest(unit, questID) return true end",
        "retail": true
      }
    ],
    "SpellCanTargetUnit": [
      {
        "name": "SpellCanTargetUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SpellCanTargetUnit(spellNameOrID, unit) return true end",
        "retail": true
      }
    ],
    "SpellTargetUnit": [
      {
        "name": "SpellTargetUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SpellTargetUnit(unit) end",
        "retail": true
      }
    ],
    "UnitArmor": [
      {
        "name": "UnitArmor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitArmor(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitAttackBothHands": [
      {
        "name": "UnitAttackBothHands",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitAttackBothHands(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitAttackPower": [
      {
        "name": "UnitAttackPower",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitAttackPower(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitAttackSpeed": [
      {
        "name": "UnitAttackSpeed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitAttackSpeed(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitCanAssist": [
      {
        "name": "UnitCanAssist",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitCanAssist(unit) return true end",
        "retail": true
      }
    ],
    "UnitCanCooperate": [
      {
        "name": "UnitCanCooperate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitCanCooperate(unit) return true end",
        "retail": true
      }
    ],
    "UnitClassification": [
      {
        "name": "UnitClassification",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitClassification(unit) return \"\" end",
        "retail": true
      }
    ],
    "UnitCreatureFamily": [
      {
        "name": "UnitCreatureFamily",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitCreatureFamily(unit) return \"\" end",
        "retail": true
      }
    ],
    "UnitDamage": [
      {
        "name": "UnitDamage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitDamage(unit) return 0, 0, 0, 0 end",
        "retail": true
      },
      {
        "name": "Details.UnitDamage",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details.UnitDamage (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDefense": [
      {
        "name": "UnitDefense",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitDefense(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitDetailedThreatSituation": [
      {
        "name": "UnitDetailedThreatSituation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function UnitDetailedThreatSituation(unit, mobUnit) return 0, \"\", 0, 0, 0 end",
        "retail": true
      }
    ],
    "GetPlayerInfoByGUID": [
      {
        "name": "GetPlayerInfoByGUID",
        "count": 5,
        "confidence": 1.0,
        "sample": "function GetPlayerInfoByGUID(guid) return \"\", \"\", \"\", \"\" end",
        "retail": true
      }
    ],
    "UnitHasLFGDeserter": [
      {
        "name": "UnitHasLFGDeserter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitHasLFGDeserter(unit) return true end",
        "retail": true
      }
    ],
    "UnitHasLFGRandomCooldown": [
      {
        "name": "UnitHasLFGRandomCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitHasLFGRandomCooldown(unit) return true end",
        "retail": true
      }
    ],
    "UnitHasRelicSlot": [
      {
        "name": "UnitHasRelicSlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitHasRelicSlot(unit) return true end",
        "retail": true
      }
    ],
    "UnitInParty": [
      {
        "name": "UnitInParty",
        "count": 6,
        "confidence": 1.0,
        "sample": "function UnitInParty(unit) return true end",
        "retail": true
      }
    ],
    "UnitInRaid": [
      {
        "name": "UnitInRaid",
        "count": 8,
        "confidence": 1.0,
        "sample": "function UnitInRaid(unit) return true end",
        "retail": true
      }
    ],
    "UnitInBattleground": [
      {
        "name": "UnitInBattleground",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInBattleground(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsInMyGuild": [
      {
        "name": "UnitIsInMyGuild",
        "count": 4,
        "confidence": 0.8,
        "sample": "function UnitIsInMyGuild(unit) return true end",
        "retail": true
      }
    ],
    "UnitInRange": [
      {
        "name": "UnitInRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInRange(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsAFK": [
      {
        "name": "UnitIsAFK",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsAFK(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsCharmed": [
      {
        "name": "UnitIsCharmed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsCharmed(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsCorpse": [
      {
        "name": "UnitIsCorpse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsCorpse(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsDND": [
      {
        "name": "UnitIsDND",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsDND(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsEnemy": [
      {
        "name": "UnitIsEnemy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsEnemy(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsFeignDeath": [
      {
        "name": "UnitIsFeignDeath",
        "count": 2,
        "confidence": 0.4,
        "sample": "function UnitIsFeignDeath(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsPVP": [
      {
        "name": "UnitIsPVP",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsPVP(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsPVPFreeForAll": [
      {
        "name": "UnitIsPVPFreeForAll",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsPVPFreeForAll(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsPVPSanctuary": [
      {
        "name": "UnitIsPVPSanctuary",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsPVPSanctuary(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsPartyLeader": [
      {
        "name": "UnitIsPartyLeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsPartyLeader(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsPossessed": [
      {
        "name": "UnitIsPossessed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsPossessed(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsRaidOfficer": [
      {
        "name": "UnitIsRaidOfficer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsRaidOfficer(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsSameServer": [
      {
        "name": "UnitIsSameServer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsSameServer(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsTapped": [
      {
        "name": "UnitIsTapped",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsTapped(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsTappedByPlayer": [
      {
        "name": "UnitIsTappedByPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsTappedByPlayer(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsTappedByAllThreatList": [
      {
        "name": "UnitIsTappedByAllThreatList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsTappedByAllThreatList(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsTrivial": [
      {
        "name": "UnitIsTrivial",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsTrivial(unit) return true end",
        "retail": true
      }
    ],
    "UnitIsVisible": [
      {
        "name": "UnitIsVisible",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitIsVisible(unit) return true end",
        "retail": true
      }
    ],
    "UnitMana": [
      {
        "name": "UnitMana",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitMana(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitManaMax": [
      {
        "name": "UnitManaMax",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitManaMax(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitPlayerControlled": [
      {
        "name": "UnitPlayerControlled",
        "count": 5,
        "confidence": 1.0,
        "sample": "function UnitPlayerControlled(unit) return true end",
        "retail": true
      }
    ],
    "UnitPlayerOrPetInParty": [
      {
        "name": "UnitPlayerOrPetInParty",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitPlayerOrPetInParty(unit) return true end",
        "retail": true
      }
    ],
    "UnitPlayerOrPetInRaid": [
      {
        "name": "UnitPlayerOrPetInRaid",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitPlayerOrPetInRaid(unit) return true end",
        "retail": true
      }
    ],
    "UnitPVPName": [
      {
        "name": "UnitPVPName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitPVPName(unit) return \"\" end",
        "retail": true
      }
    ],
    "UnitPVPRank": [
      {
        "name": "UnitPVPRank",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitPVPRank(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitPower": [
      {
        "name": "UnitPower",
        "count": 4,
        "confidence": 0.8,
        "sample": "function UnitPower(unit, powerType) return 0 end",
        "retail": true
      }
    ],
    "UnitPowerMax": [
      {
        "name": "UnitPowerMax",
        "count": 3,
        "confidence": 0.6,
        "sample": "function UnitPowerMax(unit, powerType) return 0 end",
        "retail": true
      }
    ],
    "UnitPowerType": [
      {
        "name": "UnitPowerType",
        "count": 3,
        "confidence": 0.6,
        "sample": "function UnitPowerType(unit, powerType) return 0 end",
        "retail": true
      }
    ],
    "UnitRangedAttack": [
      {
        "name": "UnitRangedAttack",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitRangedAttack(unit) end",
        "retail": true
      }
    ],
    "UnitRangedAttackPower": [
      {
        "name": "UnitRangedAttackPower",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitRangedAttackPower(unit) return 0 end",
        "retail": true
      }
    ],
    "UnitRangedDamage": [
      {
        "name": "UnitRangedDamage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitRangedDamage(unit) return 0, 0 end",
        "retail": true
      }
    ],
    "UnitReaction": [
      {
        "name": "UnitReaction",
        "count": 5,
        "confidence": 1.0,
        "sample": "function UnitReaction(unit, otherUnit) return 0 end",
        "retail": true
      }
    ],
    "UnitResistance": [
      {
        "name": "UnitResistance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitResistance(unit, school) return 0 end",
        "retail": true
      }
    ],
    "UnitSelectionColor": [
      {
        "name": "UnitSelectionColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function UnitSelectionColor(unit) return 0, 0, 0, 0 end",
        "retail": true
      }
    ],
    "UnitStat": [
      {
        "name": "UnitStat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitStat(unit, index) return 0 end",
        "retail": true
      }
    ],
    "UnitThreatSituation": [
      {
        "name": "UnitThreatSituation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitThreatSituation(unit, mobUnit) return 0, \"\", 0, 0, 0 end",
        "retail": true
      }
    ],
    "UnitUsingVehicle": [
      {
        "name": "UnitUsingVehicle",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitUsingVehicle(unit) return true end",
        "retail": true
      }
    ],
    "GetThreatStatusColor": [
      {
        "name": "GetThreatStatusColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GetThreatStatusColor(status) return 0, 0, 0 end",
        "retail": true
      }
    ],
    "SetPortraitTexture": [
      {
        "name": "SetPortraitTexture",
        "count": 5,
        "confidence": 1.0,
        "sample": "function SetPortraitTexture(frame, texture) end",
        "retail": true
      }
    ],
    "SetPortraitToTexture": [
      {
        "name": "SetPortraitToTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SetPortraitToTexture(frame, texture) end",
        "retail": true
      }
    ],
    "GetCombat": [
      {
        "name": "GetCombat",
        "count": 75,
        "confidence": 1.0,
        "sample": "@CODElocal combat = Details:GetCombat(segmentID = DETAILS_SEGMENTID_CURRENT)@",
        "retail": true
      }
    ],
    "GetActor": [
      {
        "name": "GetActor",
        "count": 121,
        "confidence": 1.0,
        "sample": "@CODElocal player = Details:GetActor(segmentID = DETAILS_SEGMENTID_CURRENT, attributeID = DETAILS_ATTRIBUTE_DAMAGE, \"PlayerName\")@",
        "retail": true
      }
    ],
    "GetPlayer": [
      {
        "name": "GetPlayer",
        "count": 4,
        "confidence": 0.8,
        "sample": "there is an alias which receives the player name as the first parameter: Details:GetPlayer(playerName, segmentID, attributeID), combat also accept GetActor(): combat:GetActor(attributeID, playerName).",
        "retail": true
      }
    ],
    "Tempo": [
      {
        "name": "Tempo",
        "count": 37,
        "confidence": 1.0,
        "sample": "@COMMENT--player:Tempo() returns the activity time@",
        "retail": true
      }
    ],
    "GetActorList": [
      {
        "name": "GetActorList",
        "count": 21,
        "confidence": 1.0,
        "sample": "characterList = combat:GetActorList ( attribute )",
        "retail": true
      }
    ],
    "GetCombatName": [
      {
        "name": "GetCombatName",
        "count": 24,
        "confidence": 1.0,
        "sample": "combatName = combat:GetCombatName( try_to_find )",
        "retail": true
      }
    ],
    "GetBossInfo": [
      {
        "name": "GetBossInfo",
        "count": 31,
        "confidence": 1.0,
        "sample": "bossInfo = combat:GetBossInfo()",
        "retail": true
      }
    ],
    "GetPvPInfo": [
      {
        "name": "GetPvPInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "battlegroudInfo = combat:GetPvPInfo()",
        "retail": true
      }
    ],
    "GetMSTime": [
      {
        "name": "GetMSTime",
        "count": 5,
        "confidence": 1.0,
        "sample": "minutes, seconds = GetMSTime()",
        "retail": true
      }
    ],
    "GetDate": [
      {
        "name": "GetDate",
        "count": 28,
        "confidence": 1.0,
        "sample": "startDate, endDate = combat:GetDate()",
        "retail": true
      }
    ],
    "IsTrash": [
      {
        "name": "IsTrash",
        "count": 3,
        "confidence": 0.6,
        "sample": "isTrash = combat:IsTrash()",
        "retail": true
      }
    ],
    "GetDifficulty": [
      {
        "name": "GetDifficulty",
        "count": 8,
        "confidence": 1.0,
        "sample": "encounterDiff = combat:GetDifficulty()",
        "retail": true
      }
    ],
    "GetDeaths": [
      {
        "name": "GetDeaths",
        "count": 7,
        "confidence": 1.0,
        "sample": "deaths = combat:GetDeaths()",
        "retail": true
      }
    ],
    "GetCombatNumber": [
      {
        "name": "GetCombatNumber",
        "count": 2,
        "confidence": 0.4,
        "sample": "combatNumber = combat:GetCombatNumber()",
        "retail": true
      }
    ],
    "GetCombatId": [
      {
        "name": "GetCombatId",
        "count": 4,
        "confidence": 0.8,
        "sample": "combatId = combat:GetCombatId()",
        "retail": true
      }
    ],
    "GetRoster": [
      {
        "name": "GetRoster",
        "count": 2,
        "confidence": 0.4,
        "sample": "roster = combat:GetRoster()",
        "retail": true
      }
    ],
    "GetTimeData": [
      {
        "name": "GetTimeData",
        "count": 2,
        "confidence": 0.4,
        "sample": "chartData = combat:GetTimeData ( chart_data_name )",
        "retail": true
      }
    ],
    "GetStartTime": [
      {
        "name": "GetStartTime",
        "count": 7,
        "confidence": 1.0,
        "sample": "start_at = GetStartTime()",
        "retail": true
      }
    ],
    "GetEndTime": [
      {
        "name": "GetEndTime",
        "count": 5,
        "confidence": 1.0,
        "sample": "ended_at = GetEndTime()",
        "retail": true
      }
    ],
    "GetTotal": [
      {
        "name": "GetTotal",
        "count": 7,
        "confidence": 1.0,
        "sample": "total = combat:GetTotal ( attribute, subAttribute [, onlyGroup] )",
        "retail": true
      }
    ],
    "GetMythicDungeonInfo": [
      {
        "name": "GetMythicDungeonInfo",
        "count": 11,
        "confidence": 1.0,
        "sample": "mythictInfo = combat:GetMythicDungeonInfo()",
        "retail": true
      }
    ],
    "IsMythicDungeon": [
      {
        "name": "IsMythicDungeon",
        "count": 9,
        "confidence": 1.0,
        "sample": "isMythicDungeonSegment = combat:IsMythicDungeon()",
        "retail": true
      }
    ],
    "IsMythicDungeonOverall": [
      {
        "name": "IsMythicDungeonOverall",
        "count": 3,
        "confidence": 0.6,
        "sample": "isMythicDungeonOverallSegment = combat:IsMythicDungeonOverall()",
        "retail": true
      }
    ],
    "GetCombatType": [
      {
        "name": "GetCombatType",
        "count": 19,
        "confidence": 1.0,
        "sample": "combatType = combat:GetCombatType()",
        "retail": true
      }
    ],
    "GetAlteranatePower": [
      {
        "name": "GetAlteranatePower",
        "count": 2,
        "confidence": 0.4,
        "sample": "alternatePowerTable = combat:GetAlteranatePower()",
        "retail": true
      }
    ],
    "GetSpell": [
      {
        "name": "GetSpell",
        "count": 27,
        "confidence": 1.0,
        "sample": "container:GetSpell (spellid)",
        "retail": true
      }
    ],
    "GetAmount": [
      {
        "name": "GetAmount",
        "count": 4,
        "confidence": 0.8,
        "sample": "amount = container:GetAmount (actorName [, key = \"total\"])",
        "retail": true
      }
    ],
    "SortByKey": [
      {
        "name": "SortByKey",
        "count": 7,
        "confidence": 1.0,
        "sample": "container:SortByKey (keyname)",
        "retail": true
      }
    ],
    "GetSpellSource": [
      {
        "name": "GetSpellSource",
        "count": 2,
        "confidence": 0.4,
        "sample": "sourceName = container:GetSpellSource (spellid)",
        "retail": true
      }
    ],
    "GetTotalOnRaid": [
      {
        "name": "GetTotalOnRaid",
        "count": 2,
        "confidence": 0.4,
        "sample": "total = container:GetTotalOnRaid (key = \"total\", combat)",
        "retail": true
      }
    ],
    "GetDisplayName": [
      {
        "name": "GetDisplayName",
        "count": 2,
        "confidence": 0.4,
        "sample": "displayName = actor:GetDisplayName()",
        "retail": true
      }
    ],
    "GetOnlyName": [
      {
        "name": "GetOnlyName",
        "count": 42,
        "confidence": 1.0,
        "sample": "name = actor:GetOnlyName()",
        "retail": true
      }
    ],
    "IsGroupPlayer": [
      {
        "name": "IsGroupPlayer",
        "count": 22,
        "confidence": 1.0,
        "sample": "isGroupMember = actor:IsGroupPlayer()",
        "retail": true
      }
    ],
    "IsNeutralOrEnemy": [
      {
        "name": "IsNeutralOrEnemy",
        "count": 9,
        "confidence": 1.0,
        "sample": "IsneutralOrEnemy = actor:IsNeutralOrEnemy()",
        "retail": true
      }
    ],
    "IsEnemy": [
      {
        "name": "IsEnemy",
        "count": 8,
        "confidence": 1.0,
        "sample": "isEnemy = actor:IsEnemy()",
        "retail": true
      }
    ],
    "IsPetOrGuardian": [
      {
        "name": "IsPetOrGuardian",
        "count": 6,
        "confidence": 1.0,
        "sample": "isPet = actor:IsPetOrGuardian()",
        "retail": true
      }
    ],
    "GetSpellList": [
      {
        "name": "GetSpellList",
        "count": 18,
        "confidence": 1.0,
        "sample": "list = actor:GetSpellList()",
        "retail": true
      }
    ],
    "GetBarColor": [
      {
        "name": "GetBarColor",
        "count": 14,
        "confidence": 1.0,
        "sample": "r, g, b = actor:GetBarColor()",
        "retail": true
      }
    ],
    "GetClassColor": [
      {
        "name": "GetClassColor",
        "count": 5,
        "confidence": 1.0,
        "sample": "r, g, b = Details:GetClassColor()",
        "retail": true
      },
      {
        "name": "C_ClassColor.GetClassColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local classColor = C_ClassColor.GetClassColor(cooldownLine.class or \"PRIEST\")",
        "retail": true
      }
    ],
    "GetClassIcon": [
      {
        "name": "GetClassIcon",
        "count": 19,
        "confidence": 1.0,
        "sample": "texture, left, right, top, bottom = actor:GetClassIcon()",
        "retail": true
      }
    ],
    "Dispel": [
      {
        "name": "Dispel",
        "count": 1,
        "confidence": 0.2,
        "sample": "- Dispel (members has 2 \"L\" instead of 1)",
        "retail": true
      }
    ],
    "GetSourceFromNpcId": [
      {
        "name": "GetSourceFromNpcId",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:GetSourceFromNpcId (npcId)",
        "retail": true
      }
    ],
    "GetBestFromPlayer": [
      {
        "name": "GetBestFromPlayer",
        "count": 6,
        "confidence": 1.0,
        "sample": "bestResult, encounterTable = Details222.storage.GetBestFromPlayer (encounterDiff, encounterId, playerRole, playerName)",
        "retail": true
      }
    ],
    "ID": [
      {
        "name": "ID",
        "count": 2,
        "confidence": 0.4,
        "sample": "encounterDiff = raid difficult ID (15 for heroic, 16 for mythic).",
        "retail": true
      }
    ],
    "GetUnitData": [
      {
        "name": "GetUnitData",
        "count": 2,
        "confidence": 0.4,
        "sample": "heal_or_damage_done = Details222.storage.GetUnitData (encounterDiff, encounterId, role, playerName)",
        "retail": true
      }
    ],
    "GetIlvl": [
      {
        "name": "GetIlvl",
        "count": 5,
        "confidence": 1.0,
        "sample": "itemLevel = Details.ilevel:GetIlvl (guid)",
        "retail": true
      }
    ],
    "GetTalents": [
      {
        "name": "GetTalents",
        "count": 2,
        "confidence": 0.4,
        "sample": "talentsTable = Details:GetTalents (guid)",
        "retail": true
      }
    ],
    "GetTalentInfoByID": [
      {
        "name": "GetTalentInfoByID",
        "count": 4,
        "confidence": 0.8,
        "sample": "use with GetTalentInfoByID()",
        "retail": true
      }
    ],
    "GetSpec": [
      {
        "name": "GetSpec",
        "count": 10,
        "confidence": 1.0,
        "sample": "spec = Details:GetSpec(guid)",
        "retail": true
      }
    ],
    "GetSpecializationInfoByID": [
      {
        "name": "GetSpecializationInfoByID",
        "count": 10,
        "confidence": 1.0,
        "sample": "if available, return the spec id of the actor, use with GetSpecializationInfoByID()",
        "retail": true
      },
      {
        "name": "DetailsFramework.GetSpecializationInfoByID",
        "count": 5,
        "confidence": 1.0,
        "sample": "local specId, specName, specDescription, specIcon, specRole, specClass = DetailsFramework.GetSpecializationInfoByID(self.spec)",
        "retail": true
      },
      {
        "name": "DF.GetSpecializationInfoByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.GetSpecializationInfoByID(specId)",
        "retail": true
      }
    ],
    "SetDeathLogLimit": [
      {
        "name": "SetDeathLogLimit",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:SetDeathLogLimit (limit)",
        "retail": true
      }
    ],
    "GetNpcIdFromGuid": [
      {
        "name": "GetNpcIdFromGuid",
        "count": 26,
        "confidence": 1.0,
        "sample": "npcId = Details:GetNpcIdFromGuid (guid)",
        "retail": true
      }
    ],
    "CODEif": [
      {
        "name": "CODEif",
        "count": 1,
        "confidence": 0.2,
        "sample": "@CODEif (actor:IsPetOrGuardian()) then",
        "retail": true
      }
    ],
    "AddValue": [
      {
        "name": "AddValue",
        "count": 29,
        "confidence": 1.0,
        "sample": "@CODECustomContainer:AddValue (petOwner, petDamage)@",
        "retail": true
      }
    ],
    "GetTotalAndHighestValue": [
      {
        "name": "GetTotalAndHighestValue",
        "count": 9,
        "confidence": 1.0,
        "sample": "@CODEtotal, top = CustomContainer:GetTotalAndHighestValue()",
        "retail": true
      }
    ],
    "GetNumActors": [
      {
        "name": "GetNumActors",
        "count": 9,
        "confidence": 1.0,
        "sample": "amount = CustomContainer:GetNumActors()",
        "retail": true
      }
    ],
    "GetCurrentToKFunction": [
      {
        "name": "GetCurrentToKFunction",
        "count": 16,
        "confidence": 1.0,
        "sample": "local Format = Details:GetCurrentToKFunction()",
        "retail": true
      }
    ],
    "Combat": [
      {
        "name": "Combat",
        "count": 4,
        "confidence": 0.8,
        "sample": "local petActor = Combat( DETAILS_ATTRIBUTE_DAMAGE, petName)",
        "retail": true
      }
    ],
    "Format": [
      {
        "name": "Format",
        "count": 42,
        "confidence": 1.0,
        "sample": "GameCooltip:AddLine( petName, Format( nil, petActor.total ) )",
        "retail": true
      }
    ],
    "AddTooltipBackgroundStatusbar": [
      {
        "name": "AddTooltipBackgroundStatusbar",
        "count": 92,
        "confidence": 1.0,
        "sample": "Details:AddTooltipBackgroundStatusbar()",
        "retail": true
      }
    ],
    "HasActor": [
      {
        "name": "HasActor",
        "count": 2,
        "confidence": 0.4,
        "sample": "container:HasActor (actor)",
        "retail": true
      }
    ],
    "WipeCustomActorContainer": [
      {
        "name": "WipeCustomActorContainer",
        "count": 4,
        "confidence": 0.8,
        "sample": "container:WipeCustomActorContainer()",
        "retail": true
      }
    ],
    "RestoreOverallMetatables": [
      {
        "name": "RestoreOverallMetatables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RestoreOverallMetatables()",
        "retail": true
      }
    ],
    "RestoreMetatables": [
      {
        "name": "RestoreMetatables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RestoreMetatables() --called from Details222.LoadSavedVariables.CombatSegments() --restore actor containers indexes e metatables",
        "retail": true
      }
    ],
    "CombatSegments": [
      {
        "name": "Details222.LoadSavedVariables.CombatSegments",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:RestoreMetatables() --called from Details222.LoadSavedVariables.CombatSegments() --restore actor containers indexes e metatables",
        "retail": true
      }
    ],
    "SetDate": [
      {
        "name": "SetDate",
        "count": 11,
        "confidence": 1.0,
        "sample": "overallCombatObject:SetDate(thisCombatObject:GetDate() or 0)",
        "retail": true
      }
    ],
    "AddToCombat": [
      {
        "name": "AddToCombat",
        "count": 6,
        "confidence": 1.0,
        "sample": "classDamage:AddToCombat(actorObject, bRefreshActor, overallCombatObject)",
        "retail": true
      }
    ],
    "DoInstanceCleanup": [
      {
        "name": "DoInstanceCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DoInstanceCleanup()",
        "retail": true
      }
    ],
    "RemoveOwnerFromPets": [
      {
        "name": "RemoveOwnerFromPets",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RemoveOwnerFromPets()",
        "retail": true
      }
    ],
    "DoClassesCleanup": [
      {
        "name": "DoClassesCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DoClassesCleanup()",
        "retail": true
      }
    ],
    "DoContainerCleanup": [
      {
        "name": "DoContainerCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DoContainerCleanup()",
        "retail": true
      }
    ],
    "DoContainerIndexCleanup": [
      {
        "name": "DoContainerIndexCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DoContainerIndexCleanup()",
        "retail": true
      }
    ],
    "PrepareTablesForSave": [
      {
        "name": "PrepareTablesForSave",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:PrepareTablesForSave()",
        "retail": true
      }
    ],
    "GetActorTable": [
      {
        "name": "GetActorTable",
        "count": 13,
        "confidence": 1.0,
        "sample": "local actorTable = actorContainer:GetActorTable()",
        "retail": true
      }
    ],
    "IsDisposable": [
      {
        "name": "Details222.Actors.IsDisposable",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (Details222.Actors.IsDisposable(actorObject) and not actorObject.owner) then",
        "retail": true
      }
    ],
    "LogEvent": [
      {
        "name": "Details222.SaveVariables.LogEvent",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details222.SaveVariables.LogEvent(\"actor removed \" .. actorObject.nome .. \" (disposable)\")",
        "retail": true
      }
    ],
    "ResetaGump": [
      {
        "name": "ResetaGump",
        "count": 16,
        "confidence": 1.0,
        "sample": "instancia:ResetaGump()",
        "retail": true
      }
    ],
    "RestartInternalGarbageCollector": [
      {
        "name": "Details222.GarbageCollector.RestartInternalGarbageCollector",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.GarbageCollector.RestartInternalGarbageCollector(bShouldForceCollect, lastEvent)",
        "retail": true
      }
    ],
    "ClearParserCache": [
      {
        "name": "ClearParserCache",
        "count": 12,
        "confidence": 1.0,
        "sample": "Details:ClearParserCache()",
        "retail": true
      }
    ],
    "RunGarbageCollector": [
      {
        "name": "RunGarbageCollector",
        "count": 2,
        "confidence": 0.4,
        "sample": "--print(\"d! debug: RunGarbageCollector() Start\")",
        "retail": true
      },
      {
        "name": "Details222.GarbageCollector.RunGarbageCollector",
        "count": 2,
        "confidence": 0.4,
        "sample": "local amountActorRemoved = Details222.GarbageCollector.RunGarbageCollector(lastEvent)",
        "retail": true
      }
    ],
    "InstanceCallDetailsFunc": [
      {
        "name": "InstanceCallDetailsFunc",
        "count": 35,
        "confidence": 1.0,
        "sample": "Details:InstanceCallDetailsFunc(Details.reset_window)",
        "retail": true
      }
    ],
    "ClearCCPetsBlackList": [
      {
        "name": "ClearCCPetsBlackList",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ClearCCPetsBlackList()",
        "retail": true
      }
    ],
    "ResetSpecCache": [
      {
        "name": "ResetSpecCache",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:ResetSpecCache()",
        "retail": true
      }
    ],
    "RefreshPlayerScroll": [
      {
        "name": "Details222.BreakdownWindow.RefreshPlayerScroll",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.BreakdownWindow.RefreshPlayerScroll()",
        "retail": true
      }
    ],
    "UpdateSolo": [
      {
        "name": "UpdateSolo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:UpdateSolo()",
        "retail": true
      }
    ],
    "GetOrSetCombatId": [
      {
        "name": "GetOrSetCombatId",
        "count": 6,
        "confidence": 1.0,
        "sample": "_detalhes.SoloTables.CombatID = _detalhes:GetOrSetCombatId()",
        "retail": true
      }
    ],
    "CreateSoloCloseButton": [
      {
        "name": "CreateSoloCloseButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:CreateSoloCloseButton()",
        "retail": true
      }
    ],
    "CreateSimplePanel": [
      {
        "name": "CreateSimplePanel",
        "count": 37,
        "confidence": 1.0,
        "sample": "button.close_confirmation = gump:CreateSimplePanel(button, 296, 60, \"\", plugin.real_name .. \"CloseConfirmation\")",
        "retail": true
      }
    ],
    "GetPluginInstance": [
      {
        "name": "GetPluginInstance",
        "count": 5,
        "confidence": 1.0,
        "sample": "local instance = plugin:GetPluginInstance()",
        "retail": true
      }
    ],
    "ShutDown": [
      {
        "name": "ShutDown",
        "count": 10,
        "confidence": 1.0,
        "sample": "instance:ShutDown()",
        "retail": true
      }
    ],
    "NewButton": [
      {
        "name": "NewButton",
        "count": 84,
        "confidence": 1.0,
        "sample": "local close_window = gump:NewButton(button.close_confirmation, nil, \"$parentCloseWindowButton\", \"CloseWindowButton\", 140, 20, close_func, nil, nil, nil, Loc [\"STRING_MENU_CLOSE_INSTANCE\"], 1, gump:GetTemplate(\"dropdown\", \"OPTIONS_DROPDOWN_TEMPLATE\"))",
        "retail": true
      }
    ],
    "GetTemplate": [
      {
        "name": "GetTemplate",
        "count": 320,
        "confidence": 1.0,
        "sample": "local close_window = gump:NewButton(button.close_confirmation, nil, \"$parentCloseWindowButton\", \"CloseWindowButton\", 140, 20, close_func, nil, nil, nil, Loc [\"STRING_MENU_CLOSE_INSTANCE\"], 1, gump:GetTemplate(\"dropdown\", \"OPTIONS_DROPDOWN_TEMPLATE\"))",
        "retail": true
      }
    ],
    "SoloMode": [
      {
        "name": "SoloMode",
        "count": 10,
        "confidence": 1.0,
        "sample": "function _detalhes:SoloMode (show)",
        "retail": true
      }
    ],
    "SaveMainWindowPosition": [
      {
        "name": "SaveMainWindowPosition",
        "count": 37,
        "confidence": 1.0,
        "sample": "self:SaveMainWindowPosition()",
        "retail": true
      }
    ],
    "EsconderScrollBar": [
      {
        "name": "EsconderScrollBar",
        "count": 20,
        "confidence": 1.0,
        "sample": "self:EsconderScrollBar() --hida a scrollbar",
        "retail": true
      }
    ],
    "PrepareSoloMode": [
      {
        "name": "PrepareSoloMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "gump:PrepareSoloMode (self)",
        "retail": true
      }
    ],
    "AtualizaSliderSolo": [
      {
        "name": "AtualizaSliderSolo",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self:AtualizaSliderSolo (0)",
        "retail": true
      }
    ],
    "RestoreMainWindowPosition": [
      {
        "name": "RestoreMainWindowPosition",
        "count": 21,
        "confidence": 1.0,
        "sample": "self:RestoreMainWindowPosition()",
        "retail": true
      }
    ],
    "WaitForSoloPlugin": [
      {
        "name": "WaitForSoloPlugin",
        "count": 3,
        "confidence": 0.6,
        "sample": "_detalhes:WaitForSoloPlugin (self)",
        "retail": true
      }
    ],
    "CancelWaitForPlugin": [
      {
        "name": "CancelWaitForPlugin",
        "count": 4,
        "confidence": 0.8,
        "sample": "_detalhes:CancelWaitForPlugin()",
        "retail": true
      }
    ],
    "MostrarScrollBar": [
      {
        "name": "MostrarScrollBar",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:MostrarScrollBar (true)",
        "retail": true
      }
    ],
    "ReajustaGump": [
      {
        "name": "ReajustaGump",
        "count": 29,
        "confidence": 1.0,
        "sample": "self:ReajustaGump()",
        "retail": true
      }
    ],
    "CriaNovaBarra": [
      {
        "name": "CriaNovaBarra",
        "count": 1,
        "confidence": 0.2,
        "sample": "local nova_barra = gump:CriaNovaBarra (self, i, 30) --cria nova barra",
        "retail": true
      }
    ],
    "EnableSoloMode": [
      {
        "name": "EnableSoloMode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function _detalhes.SoloTables:EnableSoloMode (instance, plugin_name, from_cooltip)",
        "retail": true
      }
    ],
    "GetActiveIndex": [
      {
        "name": "GetActiveIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SoloTables:GetActiveIndex()",
        "retail": true
      }
    ],
    "ChangeIcon": [
      {
        "name": "ChangeIcon",
        "count": 19,
        "confidence": 1.0,
        "sample": "_detalhes.SoloTables.instancia:ChangeIcon (_detalhes.SoloTables.Menu [_detalhes.SoloTables.Mode] [2])",
        "retail": true
      }
    ],
    "GetId": [
      {
        "name": "GetId",
        "count": 42,
        "confidence": 1.0,
        "sample": "_detalhes.SoloTables.Plugins [_detalhes.SoloTables.Mode].instance_id = _detalhes.SoloTables.instancia:GetId()",
        "retail": true
      }
    ],
    "CloseSoloDebuffs": [
      {
        "name": "CloseSoloDebuffs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:CloseSoloDebuffs()",
        "retail": true
      },
      {
        "name": "Details.CloseSoloDebuffs",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.CloseSoloDebuffs()",
        "retail": true
      }
    ],
    "CatchBuffs": [
      {
        "name": "CatchBuffs",
        "count": 3,
        "confidence": 0.6,
        "sample": "function _detalhes.SoloTables:CatchBuffs()",
        "retail": true
      }
    ],
    "Active": [
      {
        "name": "Active",
        "count": 2,
        "confidence": 0.4,
        "sample": "--BuffEntryTable.backgroundFrame:Active()",
        "retail": true
      }
    ],
    "Desactive": [
      {
        "name": "Desactive",
        "count": 1,
        "confidence": 0.2,
        "sample": "--BuffEntryTable.backgroundFrame:Desactive()",
        "retail": true
      }
    ],
    "InstanciaCheckForDisabledSolo": [
      {
        "name": "InstanciaCheckForDisabledSolo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:InstanciaCheckForDisabledSolo(instance)",
        "retail": true
      }
    ],
    "AtualizaSoloMode_AfertReset": [
      {
        "name": "AtualizaSoloMode_AfertReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:AtualizaSoloMode_AfertReset (instancia)",
        "retail": true
      }
    ],
    "IsCataWow": [
      {
        "name": "IsCataWow",
        "count": 3,
        "confidence": 0.6,
        "sample": "local isCATA = detailsFramework.IsCataWow()",
        "retail": true
      },
      {
        "name": "DetailsFramework.IsCataWow",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (DetailsFramework.IsWotLKWow() or DetailsFramework.IsCataWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsCataWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsCataWow()",
        "retail": true
      }
    ],
    "IsPandaWow": [
      {
        "name": "IsPandaWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "local isPANDA = detailsFramework.IsPandaWow()",
        "retail": true
      },
      {
        "name": "DetailsFramework.IsPandaWow",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (DetailsFramework.IsPandaWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsPandaWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsPandaWow()",
        "retail": true
      }
    ],
    "Stormstrike": [
      {
        "name": "Stormstrike",
        "count": 1,
        "confidence": 0.2,
        "sample": "[32175] = 17364, -- shaman Stormstrike (from Turkar on github)",
        "retail": true
      }
    ],
    "GetStorage": [
      {
        "name": "Details.GetStorage",
        "count": 2,
        "confidence": 0.4,
        "sample": "local db = Details.GetStorage()",
        "retail": true
      }
    ],
    "GetUnitGuildRank": [
      {
        "name": "GetUnitGuildRank",
        "count": 4,
        "confidence": 0.8,
        "sample": "local rankPosition = Details222.storage.GetUnitGuildRank(diffNumberToName[diff], encounterID, isDamage and \"DAMAGER\" or \"HEALER\", Details.playername, true)",
        "retail": true
      }
    ],
    "ToK2": [
      {
        "name": "ToK2",
        "count": 46,
        "confidence": 1.0,
        "sample": "Details:Msg(\"|cFFFFBB00Your Best Score|r:\", Details:ToK2 ((value) / combatTime) .. \" [|cFFFFFF00Guild Rank: \" .. rank .. \"|r]\") --localize-me",
        "retail": true
      }
    ],
    "MonkStagger_damage": [
      {
        "name": "MonkStagger_damage",
        "count": 2,
        "confidence": 0.4,
        "sample": "return parser:MonkStagger_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)",
        "retail": true
      }
    ],
    "SLT_damage": [
      {
        "name": "SLT_damage",
        "count": 2,
        "confidence": 0.4,
        "sample": "return parser:SLT_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)",
        "retail": true
      }
    ],
    "AkaarisSoulOwner": [
      {
        "name": "Details222.Pets.AkaarisSoulOwner",
        "count": 2,
        "confidence": 0.4,
        "sample": "local ownerName, ownerGUID, ownerFlags = Details222.Pets.AkaarisSoulOwner(sourceSerial, sourceName)",
        "retail": true
      }
    ],
    "LOTM_damage": [
      {
        "name": "LOTM_damage",
        "count": 2,
        "confidence": 0.4,
        "sample": "return parser:LOTM_damage(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overkill, school, resisted, blocked, absorbed, critical, glacing, crushing, isoffhand)",
        "retail": true
      }
    ],
    "GetOrCreateActor": [
      {
        "name": "GetOrCreateActor",
        "count": 50,
        "confidence": 1.0,
        "sample": "sourceActor, ownerActor, sourceName = _current_damage_container:GetOrCreateActor(sourceSerial, sourceName, sourceFlags, true)",
        "retail": true
      }
    ],
    "GetPetInfo": [
      {
        "name": "GetPetInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local petData = petContainer.GetPetInfo(sourceSerial)",
        "retail": true
      }
    ],
    "CreateActorAvoidanceTable": [
      {
        "name": "CreateActorAvoidanceTable",
        "count": 9,
        "confidence": 1.0,
        "sample": "targetActor.avoidance = Details:CreateActorAvoidanceTable()",
        "retail": true
      }
    ],
    "CreateLastEventsTable": [
      {
        "name": "CreateLastEventsTable",
        "count": 13,
        "confidence": 1.0,
        "sample": "actorLatestEvents = _current_combat:CreateLastEventsTable(targetName)",
        "retail": true
      }
    ],
    "GuessArenaEnemyUnitId": [
      {
        "name": "GuessArenaEnemyUnitId",
        "count": 5,
        "confidence": 1.0,
        "sample": "unitId = Details:GuessArenaEnemyUnitId(targetName)",
        "retail": true
      }
    ],
    "GetOrChangeActivityStatus": [
      {
        "name": "GetOrChangeActivityStatus",
        "count": 12,
        "confidence": 1.0,
        "sample": "sourceActor:GetOrChangeActivityStatus(true)",
        "retail": true
      }
    ],
    "CreateFFTable": [
      {
        "name": "CreateFFTable",
        "count": 7,
        "confidence": 1.0,
        "sample": "local friend = sourceActor.friendlyfire[targetName] or sourceActor:CreateFFTable(targetName)",
        "retail": true
      }
    ],
    "CreateSpellContainer": [
      {
        "name": "CreateSpellContainer",
        "count": 22,
        "confidence": 1.0,
        "sample": "evokerActor.augmentedSpellsContainer = evokerActor.augmentedSpellsContainer or spellContainerClass:CreateSpellContainer(Details.container_type.CONTAINER_DAMAGE_CLASS)",
        "retail": true
      }
    ],
    "GetOrCreateSpell": [
      {
        "name": "GetOrCreateSpell",
        "count": 41,
        "confidence": 1.0,
        "sample": "augmentedSpell = evokerActor.augmentedSpellsContainer:GetOrCreateSpell(extraSpellId, true, token)",
        "retail": true
      }
    ],
    "BlinkIcon": [
      {
        "name": "BlinkIcon",
        "count": 6,
        "confidence": 1.0,
        "sample": "DetailsParserDebugFrame:BlinkIcon(extraSpellId, 1)",
        "retail": true
      }
    ],
    "AddPet": [
      {
        "name": "AddPet",
        "count": 5,
        "confidence": 1.0,
        "sample": "petContainer.AddPet(petGuid:gsub(\"%-15439%-\", \"%-15438%-\"), \"Greater Fire Elemental\", petFlags, sourceSerial, sourceName, sourceFlags, summonSpellId)",
        "retail": true
      }
    ],
    "GetPetNameFromCustomSpells": [
      {
        "name": "Details222.Pets.GetPetNameFromCustomSpells",
        "count": 3,
        "confidence": 0.6,
        "sample": "local newPetName = Details222.Pets.GetPetNameFromCustomSpells(petName, summonSpellId, npcId)",
        "retail": true
      }
    ],
    "Barrier": [
      {
        "name": "Barrier",
        "count": 25,
        "confidence": 1.0,
        "sample": "[142862] = true, -- Ancient Barrier (Malkorok)",
        "retail": true
      }
    ],
    "Purgatory": [
      {
        "name": "Purgatory",
        "count": 2,
        "confidence": 0.4,
        "sample": "[114556] = true, -- Purgatory (DK)",
        "retail": true
      }
    ],
    "Ox": [
      {
        "name": "Ox",
        "count": 1,
        "confidence": 0.2,
        "sample": "[115069] = true, -- Stance of the Sturdy Ox (Monk)",
        "retail": true
      }
    ],
    "Redemption": [
      {
        "name": "Redemption",
        "count": 1,
        "confidence": 0.2,
        "sample": "[20711] = true, -- Spirit of Redemption (Priest)",
        "retail": true
      }
    ],
    "SLT_healing": [
      {
        "name": "SLT_healing",
        "count": 2,
        "confidence": 0.4,
        "sample": "return parser:SLT_healing(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, spellId, spellName, spellType, amount, overHealing, absorbed, critical, bIsShield)",
        "retail": true
      }
    ],
    "BuffIn": [
      {
        "name": "BuffIn",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.SpecHelpers[1473].BuffIn(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellschool, auraType, amount)",
        "retail": true
      }
    ],
    "FindBuffCastedByUnitName": [
      {
        "name": "FindBuffCastedByUnitName",
        "count": 8,
        "confidence": 1.0,
        "sample": "local auraName, texture, count, auraType, duration, expirationTime, sourceUnit, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossAura, isFromPlayerOrPlayerPet, nameplateShowAll, timeMod, v1, v2, v3, v4, v5 = Details:FindBuffCastedByUnitName(sourceName, spellId, sourceName)",
        "retail": true
      }
    ],
    "CanOverride": [
      {
        "name": "CanOverride",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (overrideTable.CanOverride(auraName, texture, count, auraType, duration, expirationTime, sourceUnit, isStealable, nameplateShowPersonal, spellId, canApplyAura, isBossAura, isFromPlayerOrPlayerPet, nameplateShowAll, timeMod, v1, v2, v3, v4, v5)) then",
        "retail": true
      }
    ],
    "BuffRefresh": [
      {
        "name": "BuffRefresh",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.SpecHelpers[1473].BuffRefresh(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellschool, tipo, amount)",
        "retail": true
      }
    ],
    "BuffOut": [
      {
        "name": "BuffOut",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.SpecHelpers[1473].BuffOut(token, time, sourceSerial, sourceName, sourceFlags, targetSerial, targetName, targetFlags, targetFlags2, spellId, spellName, spellSchool, tipo, amount)",
        "retail": true
      }
    ],
    "GetOrderNumber": [
      {
        "name": "GetOrderNumber",
        "count": 21,
        "confidence": 1.0,
        "sample": "sourceActor.cc_done = Details:GetOrderNumber()",
        "retail": true
      }
    ],
    "CreateBuffTargetObject": [
      {
        "name": "CreateBuffTargetObject",
        "count": 5,
        "confidence": 1.0,
        "sample": "este_alvo = Details.atributo_misc:CreateBuffTargetObject()",
        "retail": true
      }
    ],
    "GetFullName": [
      {
        "name": "GetFullName",
        "count": 45,
        "confidence": 1.0,
        "sample": "local actorName = Details:GetFullName(unitID)",
        "retail": true
      }
    ],
    "CreateAlternatePowerTable": [
      {
        "name": "CreateAlternatePowerTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "power = _current_combat:CreateAlternatePowerTable(actorName)",
        "retail": true
      }
    ],
    "RemovePet": [
      {
        "name": "RemovePet",
        "count": 5,
        "confidence": 1.0,
        "sample": "petContainer.RemovePet(targetSerial)",
        "retail": true
      }
    ],
    "WA_OnPlayerDeath": [
      {
        "name": "WA_OnPlayerDeath",
        "count": 1,
        "confidence": 0.2,
        "sample": "--run a script in the aura which receives interesting data from the WA_OnPlayerDeath()",
        "retail": true
      }
    ],
    "WipeSourceCache": [
      {
        "name": "WipeSourceCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function parser:WipeSourceCache()",
        "retail": true
      }
    ],
    "CaptureIsAllEnabled": [
      {
        "name": "CaptureIsAllEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CaptureIsAllEnabled()",
        "retail": true
      }
    ],
    "CaptureIsEnabled": [
      {
        "name": "CaptureIsEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CaptureIsEnabled(capture)",
        "retail": true
      }
    ],
    "CaptureEnable": [
      {
        "name": "CaptureEnable",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CaptureEnable(thisType)",
        "retail": true
      }
    ],
    "CaptureDisable": [
      {
        "name": "CaptureDisable",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CaptureDisable(thisType)",
        "retail": true
      }
    ],
    "CaptureGet": [
      {
        "name": "CaptureGet",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:CaptureGet(captureType)",
        "retail": true
      }
    ],
    "CaptureReset": [
      {
        "name": "CaptureReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CaptureReset()",
        "retail": true
      }
    ],
    "CancelAllCaptureSchedules": [
      {
        "name": "CancelAllCaptureSchedules",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CancelAllCaptureSchedules()",
        "retail": true
      }
    ],
    "CaptureSet": [
      {
        "name": "CaptureSet",
        "count": 44,
        "confidence": 1.0,
        "sample": "Details:CaptureSet(true, thisType, true)",
        "retail": true
      }
    ],
    "CaptureTimeout": [
      {
        "name": "CaptureTimeout",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CaptureTimeout (table3)",
        "retail": true
      }
    ],
    "RefreshFunctions": [
      {
        "name": "RefreshFunctions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function parser:RefreshFunctions()",
        "retail": true
      }
    ],
    "CallWipe": [
      {
        "name": "CallWipe",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CallWipe (from_slash)",
        "retail": true
      }
    ],
    "ENCOUNTER_END": [
      {
        "name": "ENCOUNTER_END",
        "count": 2,
        "confidence": 0.4,
        "sample": "local successful_ended = Details.parser_functions:ENCOUNTER_END (eTable.id, eTable.name, eTable.diff, eTable.size, 0)",
        "retail": true
      }
    ],
    "SendHomeRaidData": [
      {
        "name": "SendHomeRaidData",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:SendHomeRaidData (\"WI\")",
        "retail": true
      }
    ],
    "FlagNewCombat_PVPState": [
      {
        "name": "FlagNewCombat_PVPState",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:FlagNewCombat_PVPState()",
        "retail": true
      }
    ],
    "GetZoneType": [
      {
        "name": "GetZoneType",
        "count": 15,
        "confidence": 1.0,
        "sample": "function Details:GetZoneType()",
        "retail": true
      }
    ],
    "UNIT_FLAGS": [
      {
        "name": "UNIT_FLAGS",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:UNIT_FLAGS(...)",
        "retail": true
      }
    ],
    "SCENARIO_COMPLETED": [
      {
        "name": "SCENARIO_COMPLETED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:SCENARIO_COMPLETED(...)",
        "retail": true
      }
    ],
    "Check_ZONE_CHANGED_NEW_AREA": [
      {
        "name": "Check_ZONE_CHANGED_NEW_AREA",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:Check_ZONE_CHANGED_NEW_AREA()",
        "retail": true
      }
    ],
    "SetDeathLogTemporaryLimit": [
      {
        "name": "SetDeathLogTemporaryLimit",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:SetDeathLogTemporaryLimit(nil) --reset the temp amount",
        "retail": true
      }
    ],
    "IsResting": [
      {
        "name": "IsResting",
        "count": 2,
        "confidence": 0.4,
        "sample": "_in_resting_zone = IsResting()",
        "retail": true
      }
    ],
    "AdjustAlphaByContext": [
      {
        "name": "AdjustAlphaByContext",
        "count": 9,
        "confidence": 1.0,
        "sample": "instancia:AdjustAlphaByContext(true)",
        "retail": true
      }
    ],
    "ClearAugmentationCache": [
      {
        "name": "Details222.Cache.ClearAugmentationCache",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.Cache.ClearAugmentationCache()",
        "retail": true
      }
    ],
    "LeftArena": [
      {
        "name": "LeftArena",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:LeftArena()",
        "retail": true
      }
    ],
    "StopBgUpdater": [
      {
        "name": "StopBgUpdater",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.pvp_parser_frame:StopBgUpdater()",
        "retail": true
      }
    ],
    "ResetOverallData": [
      {
        "name": "ResetOverallData",
        "count": 8,
        "confidence": 1.0,
        "sample": "Details.tabela_historico:ResetOverallData()",
        "retail": true
      }
    ],
    "SairDoCombate": [
      {
        "name": "SairDoCombate",
        "count": 16,
        "confidence": 1.0,
        "sample": "Details:SairDoCombate()",
        "retail": true
      }
    ],
    "StartBgUpdater": [
      {
        "name": "StartBgUpdater",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.pvp_parser_frame:StartBgUpdater()",
        "retail": true
      }
    ],
    "EnteredInArena": [
      {
        "name": "EnteredInArena",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:EnteredInArena()",
        "retail": true
      }
    ],
    "CheckForAutoErase": [
      {
        "name": "CheckForAutoErase",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CheckForAutoErase(zoneMapID)",
        "retail": true
      }
    ],
    "IsZoneIdFromCurrentExpansion": [
      {
        "name": "IsZoneIdFromCurrentExpansion",
        "count": 8,
        "confidence": 1.0,
        "sample": "if (Details:IsZoneIdFromCurrentExpansion(zoneMapID)) then",
        "retail": true
      }
    ],
    "ScheduleLoadStorage": [
      {
        "name": "Details.ScheduleLoadStorage",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details.ScheduleLoadStorage()",
        "retail": true
      }
    ],
    "DispatchAutoRunCode": [
      {
        "name": "Details222.AutoRunCode.DispatchAutoRunCode",
        "count": 13,
        "confidence": 1.0,
        "sample": "Details222.AutoRunCode.DispatchAutoRunCode(\"on_zonechanged\")",
        "retail": true
      }
    ],
    "CheckForPerformanceProfile": [
      {
        "name": "CheckForPerformanceProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CheckForPerformanceProfile()",
        "retail": true
      }
    ],
    "ENCOUNTER_START": [
      {
        "name": "ENCOUNTER_START",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:ENCOUNTER_START(...)",
        "retail": true
      }
    ],
    "SendPlayerKeystoneInfoToParty": [
      {
        "name": "KeystoneInfoManager.SendPlayerKeystoneInfoToParty",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.KeystoneInfoManager.SendPlayerKeystoneInfoToParty()",
        "retail": true
      }
    ],
    "GetBossEncounterDetailsFromEncounterId": [
      {
        "name": "GetBossEncounterDetailsFromEncounterId",
        "count": 8,
        "confidence": 1.0,
        "sample": "local encounterTable, bossIndex = Details:GetBossEncounterDetailsFromEncounterId(zoneMapID, encounterID)",
        "retail": true
      }
    ],
    "CacheKeystoneForAllGroupMembers": [
      {
        "name": "Details222.CacheKeystoneForAllGroupMembers",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.CacheKeystoneForAllGroupMembers()",
        "retail": true
      }
    ],
    "GetCurrentEncounterInfo": [
      {
        "name": "GetCurrentEncounterInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetCurrentEncounterInfo()",
        "retail": true
      }
    ],
    "GetBossEncounterTexture": [
      {
        "name": "GetBossEncounterTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "local bossIcon = Details:GetBossEncounterTexture(encounterName)",
        "retail": true
      }
    ],
    "SetStartTime": [
      {
        "name": "SetStartTime",
        "count": 12,
        "confidence": 1.0,
        "sample": "Details.tabela_vigente:SetStartTime(Details.encounter_table [\"start\"])",
        "retail": true
      }
    ],
    "SetEndTime": [
      {
        "name": "SetEndTime",
        "count": 12,
        "confidence": 1.0,
        "sample": "Details.tabela_vigente:SetEndTime(Details.encounter_table [\"end\"])",
        "retail": true
      }
    ],
    "PetScan": [
      {
        "name": "PetScan",
        "count": 5,
        "confidence": 1.0,
        "sample": "C_Timer.After(1, function() petContainer.PetScan(\"ENCOUNTER_END\") end)",
        "retail": true
      },
      {
        "name": "Details222.PetContainer.PetScan",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.PetContainer.PetScan(\"CombatStart\")",
        "retail": true
      }
    ],
    "GetAllUnitsGear": [
      {
        "name": "GetAllUnitsGear",
        "count": 3,
        "confidence": 0.6,
        "sample": "local allPlayersGear = openRaidLib and openRaidLib.GetAllUnitsGear()",
        "retail": true
      },
      {
        "name": "GearManager.GetAllUnitsGear",
        "count": 4,
        "confidence": 0.8,
        "sample": "return openRaidLib.GearManager.GetAllUnitsGear()",
        "retail": true
      }
    ],
    "UNIT_PET": [
      {
        "name": "UNIT_PET",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.parser_functions:UNIT_PET(unitId)",
        "retail": true
      }
    ],
    "GetDisplay": [
      {
        "name": "GetDisplay",
        "count": 41,
        "confidence": 1.0,
        "sample": "local mainDisplayGroup, subDisplay = instance:GetDisplay()",
        "retail": true
      }
    ],
    "GetSegment": [
      {
        "name": "GetSegment",
        "count": 13,
        "confidence": 1.0,
        "sample": "local segment = instance:GetSegment()",
        "retail": true
      }
    ],
    "GetCustomDisplayIDByName": [
      {
        "name": "Details222.GetCustomDisplayIDByName",
        "count": 6,
        "confidence": 1.0,
        "sample": "local dynamicOverallDataCustomID = Details222.GetCustomDisplayIDByName(Loc[\"STRING_CUSTOM_DYNAMICOVERAL\"])",
        "retail": true
      }
    ],
    "ExpansionHasEvoker": [
      {
        "name": "ExpansionHasEvoker",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (detailsFramework.ExpansionHasEvoker()) then",
        "retail": true
      },
      {
        "name": "DF.ExpansionHasEvoker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.ExpansionHasEvoker()",
        "retail": true
      }
    ],
    "InstanceCall": [
      {
        "name": "InstanceCall",
        "count": 18,
        "confidence": 1.0,
        "sample": "Details:InstanceCall(autoSwapDynamicOverallData, true)",
        "retail": true
      }
    ],
    "GetUnitGear": [
      {
        "name": "GetUnitGear",
        "count": 6,
        "confidence": 1.0,
        "sample": "local unitGearInfo = openRaidLib.GetUnitGear(unitId)",
        "retail": true
      },
      {
        "name": "GearManager.GetUnitGear",
        "count": 4,
        "confidence": 0.8,
        "sample": "return openRaidLib.GearManager.GetUnitGear(unitName)",
        "retail": true
      }
    ],
    "RunScheduledEventsAfterCombat": [
      {
        "name": "RunScheduledEventsAfterCombat",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:RunScheduledEventsAfterCombat(OnRegenEnabled)",
        "retail": true
      }
    ],
    "StoreEncounter": [
      {
        "name": "Details.Database.StoreEncounter",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:Msg(\"error occurred on Details.Database.StoreEncounter():\", errortext)",
        "retail": true
      }
    ],
    "StoreWipe": [
      {
        "name": "Details.Database.StoreWipe",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:Msg(\"error occurred on Details.Database.StoreWipe():\", errortext)",
        "retail": true
      }
    ],
    "CHALLENGE_MODE_END": [
      {
        "name": "CHALLENGE_MODE_END",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:CHALLENGE_MODE_END(...) --doesn't exists",
        "retail": true
      }
    ],
    "IsCancelled": [
      {
        "name": "IsCancelled",
        "count": 25,
        "confidence": 1.0,
        "sample": "if (DetailsMythicPlusFrame.ZoneLeftTimer and not DetailsMythicPlusFrame.ZoneLeftTimer:IsCancelled()) then",
        "retail": true
      }
    ],
    "CHALLENGE_MODE_START": [
      {
        "name": "CHALLENGE_MODE_START",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:CHALLENGE_MODE_START(...) --~challenge ~mythic+ ~m+",
        "retail": true
      }
    ],
    "LogStep": [
      {
        "name": "Details222.MythicPlus.LogStep",
        "count": 25,
        "confidence": 1.0,
        "sample": "Details222.MythicPlus.LogStep(\"CHALLENGE_MODE_START, starting 10 seconds timer.\")",
        "retail": true
      }
    ],
    "GetKeystoneInfo": [
      {
        "name": "GetKeystoneInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "local unitKeystoneInfo = libOpenRaid.GetKeystoneInfo(unitId)",
        "retail": true
      },
      {
        "name": "KeystoneInfoManager.GetKeystoneInfo",
        "count": 10,
        "confidence": 1.0,
        "sample": "local keystoneInfo = openRaidLib.KeystoneInfoManager.GetKeystoneInfo(unitName, true)",
        "retail": true
      }
    ],
    "CHALLENGE_MODE_COMPLETED": [
      {
        "name": "CHALLENGE_MODE_COMPLETED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:CHALLENGE_MODE_COMPLETED(...) --~complete ~finish ~mythic ~m+",
        "retail": true
      }
    ],
    "IntegerToTimer": [
      {
        "name": "IntegerToTimer",
        "count": 45,
        "confidence": 1.0,
        "sample": "Details:Msg(\"run elapsed time:\", DetailsFramework:IntegerToTimer(completionTime / 1000))",
        "retail": true
      }
    ],
    "PLAYER_TALENT_UPDATE": [
      {
        "name": "PLAYER_TALENT_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PLAYER_TALENT_UPDATE()",
        "retail": true
      }
    ],
    "SendCharacterData": [
      {
        "name": "SendCharacterData",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:SendCharacterData()",
        "retail": true
      }
    ],
    "RefreshPlayerSpecialization": [
      {
        "name": "RefreshPlayerSpecialization",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RefreshPlayerSpecialization()",
        "retail": true
      }
    ],
    "PLAYER_SPECIALIZATION_CHANGED": [
      {
        "name": "PLAYER_SPECIALIZATION_CHANGED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PLAYER_SPECIALIZATION_CHANGED()",
        "retail": true
      }
    ],
    "UNIT_FACTION": [
      {
        "name": "UNIT_FACTION",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:UNIT_FACTION(unit)",
        "retail": true
      }
    ],
    "ROLE_CHANGED_INFORM": [
      {
        "name": "ROLE_CHANGED_INFORM",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:ROLE_CHANGED_INFORM(...)",
        "retail": true
      }
    ],
    "PLAYER_ROLES_ASSIGNED": [
      {
        "name": "PLAYER_ROLES_ASSIGNED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PLAYER_ROLES_ASSIGNED(...)",
        "retail": true
      }
    ],
    "InGroup": [
      {
        "name": "InGroup",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:InGroup()",
        "retail": true
      }
    ],
    "GROUP_ROSTER_UPDATE": [
      {
        "name": "GROUP_ROSTER_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:GROUP_ROSTER_UPDATE(...)",
        "retail": true
      }
    ],
    "START_TIMER": [
      {
        "name": "START_TIMER",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:START_TIMER(...) --~timer",
        "retail": true
      }
    ],
    "StartArenaSegment": [
      {
        "name": "StartArenaSegment",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:StartArenaSegment(...)",
        "retail": true
      }
    ],
    "CreateBattlegroundSegment": [
      {
        "name": "CreateBattlegroundSegment",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CreateBattlegroundSegment()",
        "retail": true
      }
    ],
    "CreatePanicWarning": [
      {
        "name": "CreatePanicWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CreatePanicWarning()",
        "retail": true
      }
    ],
    "DefaultProfile": [
      {
        "name": "Details222.LoadSavedVariables.DefaultProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.LoadSavedVariables.DefaultProfile()",
        "retail": true
      }
    ],
    "CharacterData": [
      {
        "name": "Details222.LoadSavedVariables.CharacterData",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.LoadSavedVariables.CharacterData()",
        "retail": true
      }
    ],
    "SharedData": [
      {
        "name": "Details222.LoadSavedVariables.SharedData",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.LoadSavedVariables.SharedData()",
        "retail": true
      }
    ],
    "LoadConfig": [
      {
        "name": "LoadConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:LoadConfig()",
        "retail": true
      }
    ],
    "UpdateParserGears": [
      {
        "name": "UpdateParserGears",
        "count": 19,
        "confidence": 1.0,
        "sample": "Details:UpdateParserGears()",
        "retail": true
      }
    ],
    "StartAutoRun": [
      {
        "name": "Details222.AutoRunCode.StartAutoRun",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.AutoRunCode.StartAutoRun()",
        "retail": true
      }
    ],
    "IsLoaded": [
      {
        "name": "Details.IsLoaded",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.IsLoaded()",
        "retail": true
      }
    ],
    "ADDON_LOADED": [
      {
        "name": "ADDON_LOADED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:ADDON_LOADED(...)",
        "retail": true
      }
    ],
    "TurnTheSpeakersOn": [
      {
        "name": "TurnTheSpeakersOn",
        "count": 1,
        "confidence": 0.2,
        "sample": "TurnTheSpeakersOn()",
        "retail": true
      }
    ],
    "PET_BATTLE_OPENING_START": [
      {
        "name": "PET_BATTLE_OPENING_START",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PET_BATTLE_OPENING_START(...)",
        "retail": true
      }
    ],
    "SetWindowAlphaForCombat": [
      {
        "name": "SetWindowAlphaForCombat",
        "count": 41,
        "confidence": 1.0,
        "sample": "instance:SetWindowAlphaForCombat(true, true, 0)",
        "retail": true
      }
    ],
    "PET_BATTLE_CLOSE": [
      {
        "name": "PET_BATTLE_CLOSE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PET_BATTLE_CLOSE(...)",
        "retail": true
      }
    ],
    "UNIT_NAME_UPDATE": [
      {
        "name": "UNIT_NAME_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:UNIT_NAME_UPDATE(unitId)",
        "retail": true
      }
    ],
    "PLAYER_TARGET_CHANGED": [
      {
        "name": "PLAYER_TARGET_CHANGED",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:PLAYER_TARGET_CHANGED(...)",
        "retail": true
      }
    ],
    "GetBackupLogs": [
      {
        "name": "Details222.SaveVariables.GetBackupLogs",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.SaveVariables.GetBackupLogs()",
        "retail": true
      }
    ],
    "GetDateForLogs": [
      {
        "name": "Details222.Date.GetDateForLogs",
        "count": 5,
        "confidence": 1.0,
        "sample": "local currentDate = Details222.Date.GetDateForLogs()",
        "retail": true
      }
    ],
    "SavePlayTimeOnClass": [
      {
        "name": "Details.SavePlayTimeOnClass",
        "count": 2,
        "confidence": 0.4,
        "sample": "local savePlayTimeClass, savePlayTimeErrorText = pcall(function() Details.SavePlayTimeOnClass() end)",
        "retail": true
      }
    ],
    "SetDontSavePosition": [
      {
        "name": "SetDontSavePosition",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance.baseframe:SetDontSavePosition(true)",
        "retail": true
      }
    ],
    "OnLogout": [
      {
        "name": "Details222.AutoRunCode.OnLogout",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.AutoRunCode.OnLogout()",
        "retail": true
      }
    ],
    "OnParserEvent": [
      {
        "name": "Details222.Parser.OnParserEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Parser.OnParserEvent()",
        "retail": true
      },
      {
        "name": "OnParserEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details:OnParserEvent (",
        "retail": true
      }
    ],
    "CombatLogGetCurrentEventInfo": [
      {
        "name": "CombatLogGetCurrentEventInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local time, token, hidding, who_serial, who_name, who_flags, who_flags2, target_serial, target_name, target_flags, target_flags2, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 = CombatLogGetCurrentEventInfo()",
        "retail": true
      }
    ],
    "OnParserEventPVP": [
      {
        "name": "Details222.Parser.OnParserEventPVP",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Parser.OnParserEventPVP()",
        "retail": true
      }
    ],
    "OnParserEventOutOfCombat": [
      {
        "name": "Details222.Parser.OnParserEventOutOfCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.Parser.OnParserEventOutOfCombat()",
        "retail": true
      }
    ],
    "OnParserEventDebug": [
      {
        "name": "Details.OnParserEventDebug",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.OnParserEventDebug()\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    --buffs: spellschool, auraType, amount, arg1, arg2, arg3",
        "retail": true
      }
    ],
    "UpdateParser": [
      {
        "name": "UpdateParser",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UpdateParser()",
        "retail": true
      }
    ],
    "GetActorFromCache": [
      {
        "name": "GetActorFromCache",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:GetActorFromCache(value)",
        "retail": true
      }
    ],
    "PrintParserCacheIndexes": [
      {
        "name": "PrintParserCacheIndexes",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:PrintParserCacheIndexes()",
        "retail": true
      }
    ],
    "GetActorsOnDamageCache": [
      {
        "name": "GetActorsOnDamageCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetActorsOnDamageCache()",
        "retail": true
      }
    ],
    "GetActorsOnHealingCache": [
      {
        "name": "GetActorsOnHealingCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetActorsOnHealingCache()",
        "retail": true
      }
    ],
    "RevomeActorFromCache": [
      {
        "name": "RevomeActorFromCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function parser:RevomeActorFromCache(actor_serial, actor_name)",
        "retail": true
      }
    ],
    "UptadeRaidMembersCache": [
      {
        "name": "UptadeRaidMembersCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UptadeRaidMembersCache()",
        "retail": true
      }
    ],
    "GetSpecializationRole": [
      {
        "name": "GetSpecializationRole",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (detailsFramework.GetSpecializationRole (spec) == \"TANK\") then",
        "retail": true
      },
      {
        "name": "DetailsFramework.GetSpecializationRole",
        "count": 3,
        "confidence": 0.6,
        "sample": "role = spec and DetailsFramework.GetSpecializationRole (spec) or role",
        "retail": true
      },
      {
        "name": "DF.GetSpecializationRole",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.GetSpecializationRole(...)",
        "retail": true
      }
    ],
    "GetCrowdControlSpells": [
      {
        "name": "GetCrowdControlSpells",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetCrowdControlSpells()",
        "retail": true
      }
    ],
    "IsATank": [
      {
        "name": "IsATank",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsATank(unitGUID)",
        "retail": true
      }
    ],
    "IsInCache": [
      {
        "name": "IsInCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsInCache(unitGUID)",
        "retail": true
      }
    ],
    "GetParserPlayerCache": [
      {
        "name": "GetParserPlayerCache",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:GetParserPlayerCache()",
        "retail": true
      }
    ],
    "DumpIgnoredNpcs": [
      {
        "name": "Details.DumpIgnoredNpcs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.DumpIgnoredNpcs()",
        "retail": true
      }
    ],
    "IsInCombat": [
      {
        "name": "IsInCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsInCombat()",
        "retail": true
      }
    ],
    "IsInEncounter": [
      {
        "name": "IsInEncounter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsInEncounter()",
        "retail": true
      }
    ],
    "GetAllActors": [
      {
        "name": "GetAllActors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetAllActors(_combat, _actorname)",
        "retail": true
      }
    ],
    "GetUnitID": [
      {
        "name": "GetUnitID",
        "count": 16,
        "confidence": 1.0,
        "sample": "local unitId = openRaidLib.GetUnitID(unitName)",
        "retail": true
      }
    ],
    "ReadPvPData": [
      {
        "name": "ReadPvPData",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ReadPvPData()",
        "retail": true
      }
    ],
    "BgScoreUpdate": [
      {
        "name": "BgScoreUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:BgScoreUpdate()",
        "retail": true
      }
    ],
    "RequestBattlefieldScoreData": [
      {
        "name": "RequestBattlefieldScoreData",
        "count": 1,
        "confidence": 0.2,
        "sample": "RequestBattlefieldScoreData()",
        "retail": true
      }
    ],
    "GetNumBattlefieldScores": [
      {
        "name": "GetNumBattlefieldScores",
        "count": 3,
        "confidence": 0.6,
        "sample": "local players = GetNumBattlefieldScores()",
        "retail": true
      }
    ],
    "UnitFullName": [
      {
        "name": "UnitFullName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local _player, realmName = UnitFullName(\"player\")",
        "retail": true
      }
    ],
    "GetBattlefieldScore": [
      {
        "name": "GetBattlefieldScore",
        "count": 2,
        "confidence": 0.4,
        "sample": "name, killingBlows, honorableKills, deaths, honorGained, faction, rank, race, class, classToken, damageDone, healingDone, bgRating, ratingChange, preMatchMMR, mmrChange, talentSpec = GetBattlefieldScore(i)",
        "retail": true
      }
    ],
    "AnimarSplit": [
      {
        "name": "AnimarSplit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AnimarSplit(barra, goal)",
        "retail": true
      }
    ],
    "FazerAnimacaoSplit": [
      {
        "name": "FazerAnimacaoSplit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FazerAnimacaoSplit(elapsed)",
        "retail": true
      }
    ],
    "PerformAnimations": [
      {
        "name": "PerformAnimations",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:PerformAnimations(amtLines)",
        "retail": true
      }
    ],
    "AnimarBarra": [
      {
        "name": "AnimarBarra",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:AnimarBarra (row, row.animacao_fim)",
        "retail": true
      }
    ],
    "RefreshAnimationFunctions": [
      {
        "name": "RefreshAnimationFunctions",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:RefreshAnimationFunctions()",
        "retail": true
      }
    ],
    "FazerAnimacao_Esquerda": [
      {
        "name": "FazerAnimacao_Esquerda",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FazerAnimacao_Esquerda (deltaTime)",
        "retail": true
      }
    ],
    "FazerAnimacao_Direita": [
      {
        "name": "FazerAnimacao_Direita",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FazerAnimacao_Direita (deltaTime)",
        "retail": true
      }
    ],
    "AtualizaPontos": [
      {
        "name": "AtualizaPontos",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:AtualizaPontos()",
        "retail": true
      }
    ],
    "GetPositionOnScreen": [
      {
        "name": "GetPositionOnScreen",
        "count": 8,
        "confidence": 1.0,
        "sample": "local _x, _y = self:GetPositionOnScreen()",
        "retail": true
      }
    ],
    "GetRealSize": [
      {
        "name": "GetRealSize",
        "count": 2,
        "confidence": 0.4,
        "sample": "local _w, _h = self:GetRealSize()",
        "retail": true
      }
    ],
    "RestoreLibWindow": [
      {
        "name": "RestoreLibWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RestoreLibWindow()",
        "retail": true
      }
    ],
    "SaveLibWindow": [
      {
        "name": "SaveLibWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SaveLibWindow()",
        "retail": true
      }
    ],
    "SaveMainWindowSize": [
      {
        "name": "SaveMainWindowSize",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SaveMainWindowSize()",
        "retail": true
      }
    ],
    "RestoreMainWindowPositionNoResize": [
      {
        "name": "RestoreMainWindowPositionNoResize",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:RestoreMainWindowPositionNoResize (pre_defined, x, y)",
        "retail": true
      }
    ],
    "CreatePositionTable": [
      {
        "name": "CreatePositionTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:CreatePositionTable()",
        "retail": true
      }
    ],
    "RestorePositionFromPositionTable": [
      {
        "name": "RestorePositionFromPositionTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:RestorePositionFromPositionTable (t)",
        "retail": true
      }
    ],
    "BaseFrameSnap": [
      {
        "name": "BaseFrameSnap",
        "count": 7,
        "confidence": 1.0,
        "sample": "instancia:BaseFrameSnap()",
        "retail": true
      }
    ],
    "StretchButtonAnchor": [
      {
        "name": "StretchButtonAnchor",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:StretchButtonAnchor(2)",
        "retail": true
      }
    ],
    "Freeze": [
      {
        "name": "Freeze",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:Freeze(self)",
        "retail": true
      }
    ],
    "CreateNewLine": [
      {
        "name": "CreateNewLine",
        "count": 3,
        "confidence": 0.6,
        "sample": "gump:CreateNewLine(self, i) --cria nova barra",
        "retail": true
      }
    ],
    "RefreshBarra": [
      {
        "name": "RefreshBarra",
        "count": 25,
        "confidence": 1.0,
        "sample": "tabela:RefreshBarra(esta_barra, self, true)",
        "retail": true
      }
    ],
    "CooltipPreset": [
      {
        "name": "CooltipPreset",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:CooltipPreset(preset)",
        "retail": true
      }
    ],
    "NewPanel": [
      {
        "name": "NewPanel",
        "count": 21,
        "confidence": 1.0,
        "sample": "Details.yesNo = Details.gump:NewPanel(UIParent, _, \"DetailsYesNoWindow\", _, 500, 80)",
        "retail": true
      }
    ],
    "NewLabel": [
      {
        "name": "NewLabel",
        "count": 138,
        "confidence": 1.0,
        "sample": "Details.gump:NewLabel(Details.yesNo, _, \"$parentAsk\", \"ask\", \"\")",
        "retail": true
      }
    ],
    "InstallCustomTexture": [
      {
        "name": "InstallCustomTexture",
        "count": 16,
        "confidence": 1.0,
        "sample": "Details.yesNo [\"no\"]:InstallCustomTexture()",
        "retail": true
      }
    ],
    "SetHook": [
      {
        "name": "SetHook",
        "count": 151,
        "confidence": 1.0,
        "sample": "Details.yesNo [\"yes\"]:SetHook(\"OnMouseUp\", function() Details.yesNo:Hide() end)",
        "retail": true
      }
    ],
    "Ask": [
      {
        "name": "Ask",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:Ask (msg, func, ...)",
        "retail": true
      }
    ],
    "SetClickFunction": [
      {
        "name": "SetClickFunction",
        "count": 26,
        "confidence": 1.0,
        "sample": "Details.yesNo [\"yes\"]:SetClickFunction(func, p1, p2)",
        "retail": true
      }
    ],
    "CreateWaitForPlugin": [
      {
        "name": "CreateWaitForPlugin",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:CreateWaitForPlugin()",
        "retail": true
      }
    ],
    "SetFromAlpha": [
      {
        "name": "SetFromAlpha",
        "count": 27,
        "confidence": 1.0,
        "sample": "rotate:SetFromAlpha(0.8)",
        "retail": true
      }
    ],
    "SetToAlpha": [
      {
        "name": "SetToAlpha",
        "count": 28,
        "confidence": 1.0,
        "sample": "rotate:SetToAlpha(1)",
        "retail": true
      }
    ],
    "SetTarget": [
      {
        "name": "SetTarget",
        "count": 29,
        "confidence": 1.0,
        "sample": "rotate:SetTarget(WaitTexture)",
        "retail": true
      }
    ],
    "WaitForPlugin": [
      {
        "name": "WaitForPlugin",
        "count": 5,
        "confidence": 1.0,
        "sample": "function self:WaitForPlugin()",
        "retail": true
      }
    ],
    "ExecDelayedPlugin1": [
      {
        "name": "ExecDelayedPlugin1",
        "count": 1,
        "confidence": 0.2,
        "sample": "function self:ExecDelayedPlugin1()",
        "retail": true
      }
    ],
    "EnableRaidMode": [
      {
        "name": "EnableRaidMode",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details.RaidTables:EnableRaidMode (self)",
        "retail": true
      }
    ],
    "ExecDelayedPlugin": [
      {
        "name": "ExecDelayedPlugin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ExecDelayedPlugin(instancia)",
        "retail": true
      }
    ],
    "OpenFeedbackWindow": [
      {
        "name": "OpenFeedbackWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:OpenFeedbackWindow()",
        "retail": true
      },
      {
        "name": "Details.OpenFeedbackWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.OpenFeedbackWindow()",
        "retail": true
      }
    ],
    "NewImage": [
      {
        "name": "NewImage",
        "count": 58,
        "confidence": 1.0,
        "sample": "local wowi = gump:NewImage(panel, [[Interface\\AddOns\\Details\\images\\icons2]], 101, 34, \"artwork\", {0/512, 101/512, 163/512, 200/512})",
        "retail": true
      }
    ],
    "CopyPaste": [
      {
        "name": "CopyPaste",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:CopyPaste ([[http://www.wowinterface.com/downloads/addcomment.php?action=addcomment&fileid=23056]])",
        "retail": true
      }
    ],
    "CriarInstancia": [
      {
        "name": "CriarInstancia",
        "count": 8,
        "confidence": 1.0,
        "sample": "instance1 = Details:CriarInstancia(_, true)",
        "retail": true
      },
      {
        "name": "Details.CriarInstancia",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details.CriarInstancia (_, _, 1)",
        "retail": true
      }
    ],
    "OpenUpdateWindow": [
      {
        "name": "OpenUpdateWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:OpenUpdateWindow()",
        "retail": true
      }
    ],
    "NewTextEntry": [
      {
        "name": "NewTextEntry",
        "count": 19,
        "confidence": 1.0,
        "sample": "local editbox = Details.gump:NewTextEntry(updatewindow_frame, nil, \"$parentTextEntry\", \"text\", 387, 14)",
        "retail": true
      }
    ],
    "UpdateDialogSetFocus": [
      {
        "name": "UpdateDialogSetFocus",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UpdateDialogSetFocus()",
        "retail": true
      }
    ],
    "RegisterMinimap": [
      {
        "name": "RegisterMinimap",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RegisterMinimap()",
        "retail": true
      }
    ],
    "ToggleWindows": [
      {
        "name": "ToggleWindows",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:ToggleWindows()",
        "retail": true
      }
    ],
    "ResetAllCombatData": [
      {
        "name": "ResetAllCombatData",
        "count": 13,
        "confidence": 1.0,
        "sample": "Details.tabela_historico:ResetAllCombatData()",
        "retail": true
      }
    ],
    "GetOpenedWindowsAmount": [
      {
        "name": "GetOpenedWindowsAmount",
        "count": 2,
        "confidence": 0.4,
        "sample": "local opened = Details:GetOpenedWindowsAmount()",
        "retail": true
      }
    ],
    "ReabrirTodasInstancias": [
      {
        "name": "ReabrirTodasInstancias",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:ReabrirTodasInstancias()",
        "retail": true
      }
    ],
    "ShutDownAllInstances": [
      {
        "name": "ShutDownAllInstances",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:ShutDownAllInstances()",
        "retail": true
      }
    ],
    "AddMenu": [
      {
        "name": "AddMenu",
        "count": 65,
        "confidence": 1.0,
        "sample": "GameCooltip:AddMenu (1, Details.tabela_historico.ResetAllCombatData, true, nil, nil, Loc [\"STRING_ERASE_DATA\"], nil, true)",
        "retail": true
      }
    ],
    "AddIcon": [
      {
        "name": "AddIcon",
        "count": 302,
        "confidence": 1.0,
        "sample": "GameCooltip:AddIcon ([[Interface\\COMMON\\VOICECHAT-MUTED]], 1, 1, 14, 14)",
        "retail": true
      }
    ],
    "SetWallpaper": [
      {
        "name": "SetWallpaper",
        "count": 46,
        "confidence": 1.0,
        "sample": "GameCooltip:SetWallpaper (1, [[Interface\\SPELLBOOK\\Spellbook-Page-1]], {.6, 0.1, 0.64453125, 0}, {.8, .8, .8, 0.2}, true)",
        "retail": true
      }
    ],
    "ShowCooltip": [
      {
        "name": "ShowCooltip",
        "count": 41,
        "confidence": 1.0,
        "sample": "GameCooltip:ShowCooltip()",
        "retail": true
      }
    ],
    "IsRegistered": [
      {
        "name": "IsRegistered",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (databroker and not LDBIcon:IsRegistered (\"Details\")) then",
        "retail": true
      }
    ],
    "DoRegisterHotCorner": [
      {
        "name": "DoRegisterHotCorner",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DoRegisterHotCorner()",
        "retail": true
      }
    ],
    "RegisterHotCornerButton": [
      {
        "name": "RegisterHotCornerButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "_G.HotCorners:RegisterHotCornerButton (",
        "retail": true
      }
    ],
    "EmbedPlugin": [
      {
        "name": "DetailsPluginContainerWindow.EmbedPlugin",
        "count": 10,
        "confidence": 1.0,
        "sample": "DetailsPluginContainerWindow.EmbedPlugin(DetailsAPI2Frame, DetailsAPI2Frame, true)",
        "retail": true
      },
      {
        "name": "EmbedPlugin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function pluginContainerFrame.EmbedPlugin(pluginObject, frame, bIsUtility, callback)",
        "retail": true
      }
    ],
    "RefreshWindow": [
      {
        "name": "DetailsAPI2Frame.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsAPI2Frame.RefreshWindow()",
        "retail": true
      },
      {
        "name": "RefreshWindow",
        "count": 33,
        "confidence": 1.0,
        "sample": "self:RefreshWindow(true)",
        "retail": true
      },
      {
        "name": "DetailsAuraPanel.RefreshWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "_G.DetailsAuraPanel.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsForgePanel.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsForgePanel.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsCDTrackerWindow.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsCDTrackerWindow.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsCustomPanel.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsCustomPanel.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsMacrosPanel.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsMacrosPanel.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsPlaterIntegrationPanel.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsPlaterIntegrationPanel.RefreshWindow()",
        "retail": true
      },
      {
        "name": "DetailsRaidHistoryWindow.RefreshWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsRaidHistoryWindow.RefreshWindow()",
        "retail": true
      }
    ],
    "OpenAPI": [
      {
        "name": "Details.OpenAPI",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.OpenAPI()",
        "retail": true
      }
    ],
    "CreateAPI2Frame": [
      {
        "name": "CreateAPI2Frame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CreateAPI2Frame()",
        "retail": true
      }
    ],
    "CreateEventTrackerFrame": [
      {
        "name": "CreateEventTrackerFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CreateEventTrackerFrame(UIParent, \"DetailsEventTracker\")",
        "retail": true
      }
    ],
    "UpdateEventTrackerFrame": [
      {
        "name": "UpdateEventTrackerFrame",
        "count": 15,
        "confidence": 1.0,
        "sample": "Details:UpdateEventTrackerFrame()",
        "retail": true
      }
    ],
    "CreateCurrentDpsFrame": [
      {
        "name": "CreateCurrentDpsFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CreateCurrentDpsFrame(UIParent, \"DetailsCurrentDpsMeter\")",
        "retail": true
      }
    ],
    "StartForMythicDungeon": [
      {
        "name": "StartForMythicDungeon",
        "count": 3,
        "confidence": 0.6,
        "sample": "_G.DetailsCurrentDpsMeter:StartForMythicDungeon()",
        "retail": true
      }
    ],
    "StartForArenaMatch": [
      {
        "name": "StartForArenaMatch",
        "count": 6,
        "confidence": 1.0,
        "sample": "_G.DetailsCurrentDpsMeter:StartForArenaMatch()",
        "retail": true
      }
    ],
    "FormatBackground": [
      {
        "name": "FormatBackground",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FormatBackground(frame) --deprecated I guess",
        "retail": true
      }
    ],
    "ShowCopyValueFrame": [
      {
        "name": "Details.ShowCopyValueFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.ShowCopyValueFrame(textToShow)",
        "retail": true
      }
    ],
    "UpdateGears": [
      {
        "name": "UpdateGears",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UpdateGears()",
        "retail": true
      }
    ],
    "UpdateControl": [
      {
        "name": "UpdateControl",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:UpdateControl()",
        "retail": true
      }
    ],
    "UpdateCombat": [
      {
        "name": "UpdateCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:UpdateCombat()",
        "retail": true
      }
    ],
    "TrackSpecsNow": [
      {
        "name": "TrackSpecsNow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:TrackSpecsNow(bTrackEverything)",
        "retail": true
      }
    ],
    "SetSpecId": [
      {
        "name": "SetSpecId",
        "count": 44,
        "confidence": 1.0,
        "sample": "actor:SetSpecId(specSpellList[spellTable.id])",
        "retail": true
      }
    ],
    "GetOverallCombat": [
      {
        "name": "GetOverallCombat",
        "count": 9,
        "confidence": 1.0,
        "sample": "local combatOverall = Details:GetOverallCombat()",
        "retail": true
      }
    ],
    "SetWindowUpdateSpeed": [
      {
        "name": "SetWindowUpdateSpeed",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Details:SetWindowUpdateSpeed(newInterval, bNoSave)",
        "retail": true
      }
    ],
    "SetUseAnimations": [
      {
        "name": "SetUseAnimations",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:SetUseAnimations(bEnableAnimations, bNoSave)",
        "retail": true
      }
    ],
    "HavePerformanceProfileEnabled": [
      {
        "name": "HavePerformanceProfileEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:HavePerformanceProfileEnabled()",
        "retail": true
      }
    ],
    "GetPerformanceRaidType": [
      {
        "name": "GetPerformanceRaidType",
        "count": 2,
        "confidence": 0.4,
        "sample": "local performanceType = Details:GetPerformanceRaidType()",
        "retail": true
      }
    ],
    "RegisterBackgroundTask": [
      {
        "name": "RegisterBackgroundTask",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RegisterBackgroundTask(name, func, priority, ...)",
        "retail": true
      }
    ],
    "UnregisterBackgroundTask": [
      {
        "name": "UnregisterBackgroundTask",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UnregisterBackgroundTask(name)",
        "retail": true
      }
    ],
    "DoBackgroundTasks": [
      {
        "name": "DoBackgroundTasks",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DoBackgroundTasks()",
        "retail": true
      }
    ],
    "GetState": [
      {
        "name": "Details222.Parser.GetState",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (Details222.Parser.GetState() == \"STATE_RESTRICTED\") then",
        "retail": true
      }
    ],
    "HasQueuedInspec": [
      {
        "name": "HasQueuedInspec",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ilvl_core:HasQueuedInspec(unitName)",
        "retail": true
      }
    ],
    "IlvlFromNetwork": [
      {
        "name": "IlvlFromNetwork",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IlvlFromNetwork(unitName, realmName, coreVersion, unitGUID, itemLevel, talentsSelected, currentSpec)",
        "retail": true
      }
    ],
    "CalcItemLevel": [
      {
        "name": "CalcItemLevel",
        "count": 3,
        "confidence": 0.6,
        "sample": "--/run _detalhes.ilevel:CalcItemLevel(\"player\", UnitGUID(\"player\"), true)",
        "retail": true
      }
    ],
    "CanInspect": [
      {
        "name": "CanInspect",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not InCombatLockdown() and unitid and UnitPlayerControlled(unitid) and CheckInteractDistance(unitid, CONST_INSPECT_ACHIEVEMENT_DISTANCE) and CanInspect(unitid)) then",
        "retail": true
      }
    ],
    "GetInspectSpecialization": [
      {
        "name": "GetInspectSpecialization",
        "count": 1,
        "confidence": 0.2,
        "sample": "spec = GetInspectSpecialization(unitid)",
        "retail": true
      }
    ],
    "InspectTimeOut": [
      {
        "name": "InspectTimeOut",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ilvl_core:InspectTimeOut(guid)",
        "retail": true
      }
    ],
    "ReGetItemLevel": [
      {
        "name": "ReGetItemLevel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ilvl_core:ReGetItemLevel(t)",
        "retail": true
      }
    ],
    "GetItemLevel": [
      {
        "name": "GetItemLevel",
        "count": 4,
        "confidence": 0.8,
        "sample": "return ilvl_core:GetItemLevel(unitid, guid, is_forced, try_number)",
        "retail": true
      }
    ],
    "NotifyInspect": [
      {
        "name": "NotifyInspect",
        "count": 1,
        "confidence": 0.2,
        "sample": "--NotifyInspect(unitid)",
        "retail": true
      }
    ],
    "QueryInspect": [
      {
        "name": "QueryInspect",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ilvl_core:QueryInspect(unitName, callback, param1)",
        "retail": true
      }
    ],
    "ClearQueryInspectQueue": [
      {
        "name": "ClearQueryInspectQueue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ilvl_core:ClearQueryInspectQueue()",
        "retail": true
      }
    ],
    "EnterCombat": [
      {
        "name": "EnterCombat",
        "count": 3,
        "confidence": 0.6,
        "sample": "function ilvl_core:EnterCombat()",
        "retail": true
      }
    ],
    "LeaveCombat": [
      {
        "name": "LeaveCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ilvl_core:LeaveCombat()",
        "retail": true
      }
    ],
    "ZoneChanged": [
      {
        "name": "ZoneChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ilvl_core:ZoneChanged(zone_type)",
        "retail": true
      }
    ],
    "IsTrackerEnabled": [
      {
        "name": "IsTrackerEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.ilevel:IsTrackerEnabled()",
        "retail": true
      }
    ],
    "TrackItemLevel": [
      {
        "name": "TrackItemLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.ilevel:TrackItemLevel(bool)",
        "retail": true
      }
    ],
    "GetItemLevelFromGuid": [
      {
        "name": "GetItemLevelFromGuid",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetItemLevelFromGuid(guid)",
        "retail": true
      }
    ],
    "GetInOrder": [
      {
        "name": "GetInOrder",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.ilevel:GetInOrder()",
        "retail": true
      }
    ],
    "GetSpecFromSerial": [
      {
        "name": "GetSpecFromSerial",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetSpecFromSerial(guid)",
        "retail": true
      }
    ],
    "CompressData": [
      {
        "name": "CompressData",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:CompressData(data, dataType)",
        "retail": true
      }
    ],
    "DecompressData": [
      {
        "name": "DecompressData",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:DecompressData(data, dataType)",
        "retail": true
      }
    ],
    "Deserialize": [
      {
        "name": "Deserialize",
        "count": 13,
        "confidence": 1.0,
        "sample": "local okay, data = LibAceSerializer:Deserialize(dataSerialized)",
        "retail": true
      }
    ],
    "GetOldSchoolTalentInformation": [
      {
        "name": "GetOldSchoolTalentInformation",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details:GetOldSchoolTalentInformation()",
        "retail": true
      },
      {
        "name": "Details.GetOldSchoolTalentInformation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.GetOldSchoolTalentInformation()",
        "retail": true
      }
    ],
    "GetClassicSpecByTalentTexture": [
      {
        "name": "Details.GetClassicSpecByTalentTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.playerClassicSpec.specs = Details.GetClassicSpecByTalentTexture(specTexture)",
        "retail": true
      }
    ],
    "GetRoleFromSpec": [
      {
        "name": "GetRoleFromSpec",
        "count": 2,
        "confidence": 0.4,
        "sample": "local role = Details:GetRoleFromSpec(Details.playerClassicSpec.specs, UnitGUID(\"player\"))",
        "retail": true
      }
    ],
    "IsValidSpecId": [
      {
        "name": "Details.IsValidSpecId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.IsValidSpecId(specId)",
        "retail": true
      },
      {
        "name": "IsValidSpecId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:IsValidSpecId(specId)",
        "retail": true
      }
    ],
    "GetDragonflightTalentsAsHashTable": [
      {
        "name": "Details.GetDragonflightTalentsAsHashTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.GetDragonflightTalentsAsHashTable()",
        "retail": true
      }
    ],
    "GetActiveConfigID": [
      {
        "name": "C_ClassTalents.GetActiveConfigID",
        "count": 11,
        "confidence": 1.0,
        "sample": "local configId = C_ClassTalents.GetActiveConfigID()",
        "retail": true
      }
    ],
    "GetConfigInfo": [
      {
        "name": "C_Traits.GetConfigInfo",
        "count": 9,
        "confidence": 1.0,
        "sample": "local configInfo = C_Traits.GetConfigInfo(configId)",
        "retail": true
      }
    ],
    "GetTreeNodes": [
      {
        "name": "C_Traits.GetTreeNodes",
        "count": 7,
        "confidence": 1.0,
        "sample": "local treeNodes = C_Traits.GetTreeNodes(treeId)",
        "retail": true
      }
    ],
    "GetNodeInfo": [
      {
        "name": "C_Traits.GetNodeInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "local traitNodeInfo = C_Traits.GetNodeInfo(configId, treeNodeID)",
        "retail": true
      }
    ],
    "GetDefinitionInfo": [
      {
        "name": "C_Traits.GetDefinitionInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local traitDefinitionInfo = C_Traits.GetDefinitionInfo(definitionId)",
        "retail": true
      }
    ],
    "GenerateSpecSpellList": [
      {
        "name": "Details.GenerateSpecSpellList",
        "count": 3,
        "confidence": 0.6,
        "sample": "--called from inside the function Details.GenerateSpecSpellList()",
        "retail": true
      }
    ],
    "GetNumSpellTabs": [
      {
        "name": "GetNumSpellTabs",
        "count": 8,
        "confidence": 1.0,
        "sample": "for i = 1, GetNumSpellTabs() do",
        "retail": true
      }
    ],
    "GetSpellTabInfo": [
      {
        "name": "GetSpellTabInfo",
        "count": 18,
        "confidence": 1.0,
        "sample": "local tabName, tabTexture, offset, numSpells, isGuild, offspecId = GetSpellTabInfo(i)",
        "retail": true
      }
    ],
    "GetSpellBookItemInfo": [
      {
        "name": "GetSpellBookItemInfo",
        "count": 16,
        "confidence": 1.0,
        "sample": "local spellType, spellId = GetSpellBookItemInfo(entryOffset, \"player\")",
        "retail": true
      },
      {
        "name": "C_SpellBook.GetSpellBookItemInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local GetSpellBookItemInfo = GetSpellBookItemInfo or function(...) local si = C_SpellBook.GetSpellBookItemInfo(...) if si then return SpellBookItemTypeMap[si.itemType] or \"NONE\", (si.itemType == Enum.SpellBookItemType.Flyout or si.itemType == Enum.SpellBookItemType.PetAction) and si.actionID or si.spellID or si.actionID, si end end",
        "retail": true
      }
    ],
    "GetOverrideSpell": [
      {
        "name": "C_SpellBook.GetOverrideSpell",
        "count": 3,
        "confidence": 0.6,
        "sample": "spellId = C_SpellBook.GetOverrideSpell(spellId)",
        "retail": true
      },
      {
        "name": "GetOverrideSpell",
        "count": 16,
        "confidence": 1.0,
        "sample": "spellId = GetOverrideSpell(spellId)",
        "retail": true
      },
      {
        "name": "C_Spell.GetOverrideSpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "spellId = C_Spell.GetOverrideSpell(spellId)",
        "retail": true
      }
    ],
    "IsPassiveSpell": [
      {
        "name": "IsPassiveSpell",
        "count": 19,
        "confidence": 1.0,
        "sample": "local isPassive = IsPassiveSpell(entryOffset, \"player\")",
        "retail": true
      }
    ],
    "GetNumSpecializationsForClassID": [
      {
        "name": "C_SpecializationInfo.GetNumSpecializationsForClassID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local amountSpecs = C_SpecializationInfo.GetNumSpecializationsForClassID(classId)",
        "retail": true
      }
    ],
    "SetSpecialization": [
      {
        "name": "SetSpecialization",
        "count": 4,
        "confidence": 0.8,
        "sample": "DetailsFramework.Schedules.NewTimer(0, function() SetSpecialization(1) end)",
        "retail": true
      }
    ],
    "GenerateRacialSpellList": [
      {
        "name": "Details.GenerateRacialSpellList",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.GenerateRacialSpellList()",
        "retail": true
      }
    ],
    "GetSpellSubtext": [
      {
        "name": "GetSpellSubtext",
        "count": 1,
        "confidence": 0.2,
        "sample": "local subSpellName = spell:GetSpellSubtext()",
        "retail": true
      }
    ],
    "GetSpellBaseCooldown": [
      {
        "name": "GetSpellBaseCooldown",
        "count": 4,
        "confidence": 0.8,
        "sample": "local cooldownTime = floor(GetSpellBaseCooldown(spellId) / 1000)",
        "retail": true
      }
    ],
    "FillTableWithPlayerSpells": [
      {
        "name": "Details.FillTableWithPlayerSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.FillTableWithPlayerSpells(completeListOfSpells)",
        "retail": true
      }
    ],
    "GetSpellBookSkillLineInfo": [
      {
        "name": "C_SpellBook.GetSpellBookSkillLineInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "local skillLine = C_SpellBook.GetSpellBookSkillLineInfo(tabLine)",
        "retail": true
      }
    ],
    "HasPetSpells": [
      {
        "name": "HasPetSpells",
        "count": 4,
        "confidence": 0.8,
        "sample": "return HasPetSpells()",
        "retail": true
      }
    ],
    "GetSpellBookItemName": [
      {
        "name": "GetSpellBookItemName",
        "count": 4,
        "confidence": 0.8,
        "sample": "local spellName, _, unmaskedSpellId = GetSpellBookItemName(i, spellBookPetEnum)",
        "retail": true
      }
    ],
    "GetPlayTimeOnClass": [
      {
        "name": "Details.GetPlayTimeOnClass",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.GetPlayTimeOnClass()",
        "retail": true
      }
    ],
    "GetPlayTimeOnClassString": [
      {
        "name": "Details.GetPlayTimeOnClassString",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.GetPlayTimeOnClassString()",
        "retail": true
      }
    ],
    "UpdateAddOnMemoryUsage_Original": [
      {
        "name": "UpdateAddOnMemoryUsage_Original",
        "count": 1,
        "confidence": 0.2,
        "sample": "UpdateAddOnMemoryUsage_Original()",
        "retail": true
      }
    ],
    "HandleRogueCombatSpecIconByGameVersion": [
      {
        "name": "HandleRogueCombatSpecIconByGameVersion",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:HandleRogueCombatSpecIconByGameVersion()",
        "retail": true
      }
    ],
    "CopyText": [
      {
        "name": "CopyText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function CopyText(text) --[[GLOBAL]]",
        "retail": true
      }
    ],
    "NewPluginToolbarButton": [
      {
        "name": "NewPluginToolbarButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.ToolBar:NewPluginToolbarButton (func, icon, pluginname, tooltip, w, h, framename, menu_function)",
        "retail": true
      }
    ],
    "ShowToolbarIcon": [
      {
        "name": "ShowToolbarIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:ShowToolbarIcon (Button, Effect)",
        "retail": true
      }
    ],
    "ToolbarMenuButtons": [
      {
        "name": "ToolbarMenuButtons",
        "count": 6,
        "confidence": 1.0,
        "sample": "instance:ToolbarMenuButtons()",
        "retail": true
      }
    ],
    "HideToolbarIcon": [
      {
        "name": "HideToolbarIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:HideToolbarIcon (Button)",
        "retail": true
      }
    ],
    "SetFontColor": [
      {
        "name": "SetFontColor",
        "count": 107,
        "confidence": 1.0,
        "sample": "_detalhes:SetFontColor(desc, \"white\")",
        "retail": true
      }
    ],
    "DetailsToolbarButtonOnEnter": [
      {
        "name": "DetailsToolbarButtonOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "--[[global]] function DetailsToolbarButtonOnEnter (button)",
        "retail": true
      }
    ],
    "OnEnterMainWindow": [
      {
        "name": "OnEnterMainWindow",
        "count": 17,
        "confidence": 1.0,
        "sample": "_detalhes.OnEnterMainWindow(_detalhes:GetInstance(lower_instance), button, 3)",
        "retail": true
      },
      {
        "name": "Details.OnEnterMainWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.OnEnterMainWindow(instance)",
        "retail": true
      }
    ],
    "QuickDispatch": [
      {
        "name": "QuickDispatch",
        "count": 35,
        "confidence": 1.0,
        "sample": "_detalhes.gump:QuickDispatch(button.menu)",
        "retail": true
      }
    ],
    "GetPlugin": [
      {
        "name": "GetPlugin",
        "count": 29,
        "confidence": 1.0,
        "sample": "local plugin_object = _detalhes:GetPlugin (button.__name)",
        "retail": true
      }
    ],
    "GetPluginDescription": [
      {
        "name": "GetPluginDescription",
        "count": 3,
        "confidence": 0.6,
        "sample": "f.desc:SetText(plugin_object:GetPluginDescription())",
        "retail": true
      }
    ],
    "SetFontFace": [
      {
        "name": "SetFontFace",
        "count": 44,
        "confidence": 1.0,
        "sample": "_detalhes:SetFontFace (f.desc, _detalhes.font_faces.menus)",
        "retail": true
      }
    ],
    "Fetch": [
      {
        "name": "Fetch",
        "count": 43,
        "confidence": 1.0,
        "sample": "--SharedMedia:Fetch (\"font\", \"Friz Quadrata TT\")",
        "retail": true
      }
    ],
    "DetailsToolbarButtonOnLeave": [
      {
        "name": "DetailsToolbarButtonOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "--[[global]] function DetailsToolbarButtonOnLeave (button)",
        "retail": true
      }
    ],
    "OnLeaveMainWindow": [
      {
        "name": "OnLeaveMainWindow",
        "count": 15,
        "confidence": 1.0,
        "sample": "_detalhes.OnLeaveMainWindow(_detalhes:GetInstance(lower_instance), button, 3)",
        "retail": true
      },
      {
        "name": "Details.OnLeaveMainWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.OnLeaveMainWindow(frame.child.instance)",
        "retail": true
      }
    ],
    "OnInstanceOpen": [
      {
        "name": "OnInstanceOpen",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.ToolBar:OnInstanceOpen()",
        "retail": true
      }
    ],
    "OnInstanceClose": [
      {
        "name": "OnInstanceClose",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.ToolBar:OnInstanceClose()",
        "retail": true
      }
    ],
    "IsAtiva": [
      {
        "name": "IsAtiva",
        "count": 12,
        "confidence": 1.0,
        "sample": "if (instancia.baseframe and instancia:IsAtiva()) then",
        "retail": true
      }
    ],
    "IsTBCWow": [
      {
        "name": "DetailsFramework.IsTBCWow",
        "count": 3,
        "confidence": 0.6,
        "sample": "elseif (DetailsFramework.IsTBCWow()) then --burning crusade",
        "retail": true
      },
      {
        "name": "DF.IsTBCWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsTBCWow()",
        "retail": true
      }
    ],
    "IsWarlordsWow": [
      {
        "name": "DetailsFramework.IsWarlordsWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif (DetailsFramework.IsWarlordsWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsWarlordsWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsWarlordsWow()",
        "retail": true
      }
    ],
    "IsLegionWow": [
      {
        "name": "DetailsFramework.IsLegionWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif (DetailsFramework.IsLegionWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsLegionWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsLegionWow()",
        "retail": true
      }
    ],
    "IsBFAWow": [
      {
        "name": "DetailsFramework.IsBFAWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif (DetailsFramework.IsBFAWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsBFAWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsBFAWow()",
        "retail": true
      }
    ],
    "IsShadowlandsWow": [
      {
        "name": "DetailsFramework.IsShadowlandsWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "elseif (DetailsFramework.IsShadowlandsWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsShadowlandsWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsShadowlandsWow()",
        "retail": true
      }
    ],
    "GetDragonlightTalentString": [
      {
        "name": "GetDragonlightTalentString",
        "count": 3,
        "confidence": 0.6,
        "sample": "talentsAsString = detailsFramework:GetDragonlightTalentString()",
        "retail": true
      }
    ],
    "ItemLevel_Received": [
      {
        "name": "ItemLevel_Received",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.ItemLevel_Received(player, realm, coreVersion, serial, itemlevel, talents, spec)",
        "retail": true
      }
    ],
    "HighFive_Request": [
      {
        "name": "HighFive_Request",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.HighFive_Request()",
        "retail": true
      }
    ],
    "HighFive_DataReceived": [
      {
        "name": "HighFive_DataReceived",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.HighFive_DataReceived(player, realm, coreVersion, userVersion)",
        "retail": true
      }
    ],
    "Update_VersionReceived": [
      {
        "name": "Update_VersionReceived",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Update_VersionReceived(player, realm, coreVersion, buildNumber)",
        "retail": true
      }
    ],
    "Cloud_Request": [
      {
        "name": "Cloud_Request",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_Request(player, realm, coreVersion, ...)",
        "retail": true
      }
    ],
    "Cloud_Found": [
      {
        "name": "Cloud_Found",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_Found(player, realm, coreVersion, ...)",
        "retail": true
      }
    ],
    "Cloud_DataRequest": [
      {
        "name": "Cloud_DataRequest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_DataRequest(player, realm, coreVersion, ...)",
        "retail": true
      }
    ],
    "Cloud_DataReceived": [
      {
        "name": "Cloud_DataReceived",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_DataReceived(player, realm, coreVersion, ...)",
        "retail": true
      }
    ],
    "Cloud_Equalize": [
      {
        "name": "Cloud_Equalize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_Equalize(player, realm, coreVersion, data)",
        "retail": true
      }
    ],
    "Wipe_Call": [
      {
        "name": "Wipe_Call",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Wipe_Call(player, realm, coreVersion, ...)",
        "retail": true
      }
    ],
    "Cloud_SharedData": [
      {
        "name": "Cloud_SharedData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Cloud_SharedData(player, realm, coreVersion, data)",
        "retail": true
      }
    ],
    "TBCData": [
      {
        "name": "TBCData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.TBCData(player, realm, coreVersion, data)",
        "retail": true
      }
    ],
    "Response": [
      {
        "name": "Response",
        "count": 2,
        "confidence": 0.4,
        "sample": "--\"CIER\" Coach Is Enabled Response (server > client)",
        "retail": true
      }
    ],
    "Coach": [
      {
        "name": "Coach",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.Coach(player, realm, coreVersion, msgType, data)",
        "retail": true
      }
    ],
    "CoachIsEnabled_Answer": [
      {
        "name": "Details.Coach.Server.CoachIsEnabled_Answer",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.Server.CoachIsEnabled_Answer(sourcePlayer)",
        "retail": true
      }
    ],
    "CoachIsEnabled_Response": [
      {
        "name": "Details.Coach.Client.CoachIsEnabled_Response",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.Client.CoachIsEnabled_Response(isEnabled, sourcePlayer)",
        "retail": true
      }
    ],
    "CombatStarted": [
      {
        "name": "Details.Coach.Server.CombatStarted",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.Server.CombatStarted()",
        "retail": true
      }
    ],
    "CombatEnded": [
      {
        "name": "Details.Coach.Server.CombatEnded",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.Server.CombatEnded()",
        "retail": true
      }
    ],
    "EnableCoach": [
      {
        "name": "Details.Coach.Client.EnableCoach",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.Coach.Client.EnableCoach(sourcePlayer)",
        "retail": true
      },
      {
        "name": "Details.Coach.Server.EnableCoach",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.Coach.Server.EnableCoach(true)",
        "retail": true
      }
    ],
    "CoachEnd": [
      {
        "name": "Details.Coach.Client.CoachEnd",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.Coach.Client.CoachEnd()",
        "retail": true
      }
    ],
    "Data": [
      {
        "name": "Data",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif (msgType == \"CDT\") then --Coach Data (a player in the raid sent to raid leader combat data)",
        "retail": true
      }
    ],
    "DeployPackedCombatData": [
      {
        "name": "DeployPackedCombatData",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details.packFunctions.DeployPackedCombatData(data)",
        "retail": true
      }
    ],
    "AddPlayerDeath": [
      {
        "name": "Details.Coach.Server.AddPlayerDeath",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Coach.Server.AddPlayerDeath(sourcePlayer, data)",
        "retail": true
      }
    ],
    "GuildSync": [
      {
        "name": "GuildSync",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.GuildSync(sourceName, realm, coreVersion, type, data)",
        "retail": true
      }
    ],
    "GetIDsToGuildSync": [
      {
        "name": "GetIDsToGuildSync",
        "count": 2,
        "confidence": 0.4,
        "sample": "local IDs = Details222.storage.GetIDsToGuildSync()",
        "retail": true
      }
    ],
    "CheckMissingIDsToGuildSync": [
      {
        "name": "CheckMissingIDsToGuildSync",
        "count": 2,
        "confidence": 0.4,
        "sample": "local missingIds = Details222.storage.CheckMissingIDsToGuildSync(data)",
        "retail": true
      }
    ],
    "BuildEncounterDataToGuildSync": [
      {
        "name": "BuildEncounterDataToGuildSync",
        "count": 2,
        "confidence": 0.4,
        "sample": "local encounterData = Details222.storage.BuildEncounterDataToGuildSync(data)",
        "retail": true
      }
    ],
    "AddGuildSyncData": [
      {
        "name": "AddGuildSyncData",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.storage.AddGuildSyncData(data, player)",
        "retail": true
      }
    ],
    "ReceivedEnemyPlayer": [
      {
        "name": "ReceivedEnemyPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.network.ReceivedEnemyPlayer(player, realm, coreVersion, data)",
        "retail": true
      }
    ],
    "CommReceived": [
      {
        "name": "CommReceived",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CommReceived(commPrefix, data, channel, source)",
        "retail": true
      }
    ],
    "RegisterPluginComm": [
      {
        "name": "RegisterPluginComm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RegisterPluginComm(prefix, func)",
        "retail": true
      }
    ],
    "UnregisterPluginComm": [
      {
        "name": "UnregisterPluginComm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UnregisterPluginComm(prefix)",
        "retail": true
      }
    ],
    "GetChannelId": [
      {
        "name": "GetChannelId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetChannelId(channel)",
        "retail": true
      }
    ],
    "CHAT_MSG_CHANNEL": [
      {
        "name": "CHAT_MSG_CHANNEL",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.parser_functions:CHAT_MSG_CHANNEL(...)",
        "retail": true
      }
    ],
    "SendPluginCommMessage": [
      {
        "name": "SendPluginCommMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SendPluginCommMessage(prefix, channel, ...)",
        "retail": true
      }
    ],
    "SendRaidDataAs": [
      {
        "name": "SendRaidDataAs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SendRaidDataAs(type, player, realm, ...)",
        "retail": true
      }
    ],
    "SendRaidOrPartyData": [
      {
        "name": "SendRaidOrPartyData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SendRaidOrPartyData(type, ...)",
        "retail": true
      }
    ],
    "SendGuildData": [
      {
        "name": "SendGuildData",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SendGuildData(type, ...)",
        "retail": true
      }
    ],
    "SendCloudRequest": [
      {
        "name": "SendCloudRequest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SendCloudRequest()",
        "retail": true
      }
    ],
    "ScheduleSendCloudRequest": [
      {
        "name": "ScheduleSendCloudRequest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ScheduleSendCloudRequest()",
        "retail": true
      }
    ],
    "RequestCloudData": [
      {
        "name": "RequestCloudData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RequestCloudData()",
        "retail": true
      }
    ],
    "CheckForOneHourBuffs": [
      {
        "name": "AuraScan.CheckForOneHourBuffs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.CheckForOneHourBuffs()",
        "retail": true
      },
      {
        "name": "Details222.AuraScan.CheckForOneHourBuffs",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.AuraScan.CheckForOneHourBuffs()",
        "retail": true
      }
    ],
    "ListSpells": [
      {
        "name": "ListSpells",
        "count": 17,
        "confidence": 1.0,
        "sample": "for spellId, spellTable in buffUptimeContainer:ListSpells() do",
        "retail": true
      }
    ],
    "UnregisterCallback": [
      {
        "name": "AuraScan.UnregisterCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.UnregisterCallback(callback)",
        "retail": true
      },
      {
        "name": "UnregisterCallback",
        "count": 7,
        "confidence": 1.0,
        "sample": "openRaidLib.UnregisterCallback(DetailsKeystoneInfoFrame, \"KeystoneUpdate\", \"OnKeystoneUpdate\")",
        "retail": true
      },
      {
        "name": "DF.Language.UnregisterCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.UnregisterCallback(addonId, callback)",
        "retail": true
      }
    ],
    "GetOrCreateUnitAuraTable": [
      {
        "name": "AuraScan.GetOrCreateUnitAuraTable",
        "count": 9,
        "confidence": 1.0,
        "sample": "function AuraScan.GetOrCreateUnitAuraTable(unitGUID)",
        "retail": true
      }
    ],
    "WipeAllUnitAuraTables": [
      {
        "name": "AuraScan.WipeAllUnitAuraTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AuraScan.WipeAllUnitAuraTables()",
        "retail": true
      }
    ],
    "WipeUnitAuraTable": [
      {
        "name": "AuraScan.WipeUnitAuraTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AuraScan.WipeUnitAuraTable(unitGUID)",
        "retail": true
      }
    ],
    "GetAura": [
      {
        "name": "AuraScan.GetAura",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.GetAura(unitGUID, spellId)",
        "retail": true
      }
    ],
    "AddAura": [
      {
        "name": "AuraScan.AddAura",
        "count": 3,
        "confidence": 0.6,
        "sample": "function AuraScan.AddAura(spellId, bAddToTimeLine)",
        "retail": true
      },
      {
        "name": "Details.AuraTracker.AddAura",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AuraTracker.AddAura(auraType, spellid)",
        "retail": true
      }
    ],
    "IsAuraAdded": [
      {
        "name": "AuraScan.IsAuraAdded",
        "count": 3,
        "confidence": 0.6,
        "sample": "function AuraScan.IsAuraAdded(spellId)",
        "retail": true
      }
    ],
    "RemoveAura": [
      {
        "name": "AuraScan.RemoveAura",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AuraScan.RemoveAura(spellId)",
        "retail": true
      }
    ],
    "RemoveAllAuras": [
      {
        "name": "AuraScan.RemoveAllAuras",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AuraScan.RemoveAllAuras()",
        "retail": true
      }
    ],
    "ForEachAura": [
      {
        "name": "AuraUtil.ForEachAura",
        "count": 7,
        "confidence": 1.0,
        "sample": "AuraUtil.ForEachAura(unitId, \"HELPFUL\", maxCount, fAddAura, bUsePackedAura)",
        "retail": true
      }
    ],
    "SetCooltipForPlugins": [
      {
        "name": "SetCooltipForPlugins",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetCooltipForPlugins()",
        "retail": true
      }
    ],
    "Preset": [
      {
        "name": "Preset",
        "count": 28,
        "confidence": 1.0,
        "sample": "gameCooltip:Preset(2)",
        "retail": true
      }
    ],
    "SetTooltipMinWidth": [
      {
        "name": "SetTooltipMinWidth",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:SetTooltipMinWidth()",
        "retail": true
      }
    ],
    "GetPluginSavedTable": [
      {
        "name": "GetPluginSavedTable",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:GetPluginSavedTable(pluginAbsoluteName)",
        "retail": true
      }
    ],
    "UpdatePluginBarsConfig": [
      {
        "name": "UpdatePluginBarsConfig",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UpdatePluginBarsConfig()",
        "retail": true
      }
    ],
    "SetBarGrowDirection": [
      {
        "name": "SetBarGrowDirection",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:SetBarGrowDirection()",
        "retail": true
      }
    ],
    "AttachToInstance": [
      {
        "name": "AttachToInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AttachToInstance()",
        "retail": true
      }
    ],
    "IsPluginEnabled": [
      {
        "name": "IsPluginEnabled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsPluginEnabled(pluginAbsoluteName)",
        "retail": true
      }
    ],
    "SetPluginDescription": [
      {
        "name": "SetPluginDescription",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetPluginDescription(desc)",
        "retail": true
      }
    ],
    "DisablePlugin": [
      {
        "name": "DisablePlugin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DisablePlugin(pluginAbsoluteName)",
        "retail": true
      }
    ],
    "DelayOptionsRefresh": [
      {
        "name": "DelayOptionsRefresh",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:DelayOptionsRefresh()",
        "retail": true
      }
    ],
    "CheckDefaultTable": [
      {
        "name": "CheckDefaultTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:CheckDefaultTable(savedTable, defaultSavedTable)",
        "retail": true
      }
    ],
    "InstallPlugin": [
      {
        "name": "InstallPlugin",
        "count": 12,
        "confidence": 1.0,
        "sample": "function Details:InstallPlugin(pluginType, pluginName, pluginIcon, pluginObject, pluginAbsoluteName, minVersion, authorName, version, defaultSavedTable)",
        "retail": true
      }
    ],
    "NewError": [
      {
        "name": "NewError",
        "count": 8,
        "confidence": 1.0,
        "sample": "return Details:NewError(\"Details version is out of date.\")",
        "retail": true
      }
    ],
    "OpenOptionsForChild": [
      {
        "name": "OpenOptionsForChild",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.StatusBar:OpenOptionsForChild(self)",
        "retail": true
      }
    ],
    "OnDetailsEvent": [
      {
        "name": "OnDetailsEvent",
        "count": 14,
        "confidence": 1.0,
        "sample": "print(\"function PluginObject:OnDetailsEvent(event, ...) end\")",
        "retail": true
      },
      {
        "name": "DetailsMythicPlusFrame.EventListener.OnDetailsEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsMythicPlusFrame.EventListener.OnDetailsEvent(contextObject, event, ...)",
        "retail": true
      }
    ],
    "NewPluginObject": [
      {
        "name": "NewPluginObject",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Details:NewPluginObject(frameName, pluginFlag, pluginType)",
        "retail": true
      }
    ],
    "CreatePluginOptionsFrame": [
      {
        "name": "CreatePluginOptionsFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CreatePluginOptionsFrame(name, title, template,  pluginIcon, pluginIconCoords)",
        "retail": true
      }
    ],
    "AddRoundedCornersToFrame": [
      {
        "name": "AddRoundedCornersToFrame",
        "count": 36,
        "confidence": 1.0,
        "sample": "detailsFramework:AddRoundedCornersToFrame(optionsFrame, Details.PlayerBreakdown.RoundedCornerPreset)",
        "retail": true
      }
    ],
    "RegisterFrameToColor": [
      {
        "name": "RegisterFrameToColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:RegisterFrameToColor(optionsFrame)",
        "retail": true
      }
    ],
    "CreateCloseButton": [
      {
        "name": "CreateCloseButton",
        "count": 10,
        "confidence": 1.0,
        "sample": "local closeButton = detailsFramework:CreateCloseButton(optionsFrame)",
        "retail": true
      }
    ],
    "CreateTitleBar": [
      {
        "name": "CreateTitleBar",
        "count": 18,
        "confidence": 1.0,
        "sample": "detailsFramework:CreateTitleBar(optionsFrame, title)",
        "retail": true
      }
    ],
    "CreateRightClickToCloseLabel": [
      {
        "name": "CreateRightClickToCloseLabel",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:CreateRightClickToCloseLabel(parent)",
        "retail": true
      }
    ],
    "CreateAtlasString": [
      {
        "name": "CreateAtlasString",
        "count": 5,
        "confidence": 1.0,
        "sample": "local mouseIcon = detailsFramework:CreateAtlasString(Details:GetTextureAtlas(\"right-mouse-click\"), 12, 9)",
        "retail": true
      }
    ],
    "RegisterConfig": [
      {
        "name": "LibWindow.RegisterConfig",
        "count": 24,
        "confidence": 1.0,
        "sample": "LibWindow.RegisterConfig(pluginContainerFrame, Details.plugin_window_pos)",
        "retail": true
      },
      {
        "name": "RegisterConfig",
        "count": 4,
        "confidence": 0.8,
        "sample": "libWindow.RegisterConfig(anchorFrame, Details.ocd_tracker.frames[\"anchor_frame\"])",
        "retail": true
      }
    ],
    "RestorePosition": [
      {
        "name": "LibWindow.RestorePosition",
        "count": 24,
        "confidence": 1.0,
        "sample": "LibWindow.RestorePosition(pluginContainerFrame)",
        "retail": true
      },
      {
        "name": "RestorePosition",
        "count": 4,
        "confidence": 0.8,
        "sample": "libWindow.RestorePosition(anchorFrame)",
        "retail": true
      }
    ],
    "MakeDraggable": [
      {
        "name": "LibWindow.MakeDraggable",
        "count": 22,
        "confidence": 1.0,
        "sample": "LibWindow.MakeDraggable(pluginContainerFrame)",
        "retail": true
      },
      {
        "name": "MakeDraggable",
        "count": 4,
        "confidence": 0.8,
        "sample": "libWindow.MakeDraggable(anchorFrame)",
        "retail": true
      }
    ],
    "CreateScaleBar": [
      {
        "name": "CreateScaleBar",
        "count": 13,
        "confidence": 1.0,
        "sample": "local scaleBar = DetailsFramework:CreateScaleBar(pluginContainerFrame, Details.options_window, true)",
        "retail": true
      }
    ],
    "BuildStatusbarAuthorInfo": [
      {
        "name": "BuildStatusbarAuthorInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "DetailsFramework:BuildStatusbarAuthorInfo(statusBar)",
        "retail": true
      }
    ],
    "ClosePlugin": [
      {
        "name": "ClosePlugin",
        "count": 2,
        "confidence": 0.4,
        "sample": "pluginContainerFrame.ClosePlugin()",
        "retail": true
      },
      {
        "name": "DetailsPluginContainerWindow.ClosePlugin",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsPluginContainerWindow.ClosePlugin()",
        "retail": true
      }
    ],
    "IsPluginShown": [
      {
        "name": "Details222.BreakdownWindow.IsPluginShown",
        "count": 2,
        "confidence": 0.4,
        "sample": "local bIsShowingAPlugin = Details222.BreakdownWindow.IsPluginShown()",
        "retail": true
      }
    ],
    "GetShownPluginObject": [
      {
        "name": "GetShownPluginObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "local pluginShownInBreakdownWindow = breakdownWindowFrame.GetShownPluginObject()",
        "retail": true
      }
    ],
    "SetTemplate": [
      {
        "name": "SetTemplate",
        "count": 213,
        "confidence": 1.0,
        "sample": "button:SetTemplate(detailsFramework:GetTemplate(\"button\", \"DETAILS_PLUGINPANEL_BUTTONSELECTED_TEMPLATE\"))",
        "retail": true
      }
    ],
    "OnMenuClick": [
      {
        "name": "OnMenuClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function pluginContainerFrame.OnMenuClick(_, _, pluginAbsoluteName, callRefresh)",
        "retail": true
      },
      {
        "name": "DetailsPluginContainerWindow.OnMenuClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsPluginContainerWindow.OnMenuClick (nil, nil, \"DETAILS_PLUGIN_DEATH_GRAPHICS\", true)",
        "retail": true
      }
    ],
    "RefreshFrame": [
      {
        "name": "RefreshFrame",
        "count": 4,
        "confidence": 0.8,
        "sample": "pluginContainerFrame.RefreshFrame(pluginObject.__var_Frame)",
        "retail": true
      }
    ],
    "CreatePluginMenuButton": [
      {
        "name": "CreatePluginMenuButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CreatePluginMenuButton(pluginObject, bIsUtility, parent, onClickFunc, width, height)",
        "retail": true
      }
    ],
    "ShowPluginOnBreakdown": [
      {
        "name": "ShowPluginOnBreakdown",
        "count": 5,
        "confidence": 1.0,
        "sample": "breakdownWindowFrame.ShowPluginOnBreakdown(pluginObject)",
        "retail": true
      }
    ],
    "DisableRaidMode": [
      {
        "name": "DisableRaidMode",
        "count": 4,
        "confidence": 0.8,
        "sample": "function _detalhes.RaidTables:DisableRaidMode (instance)",
        "retail": true
      }
    ],
    "SetInUse": [
      {
        "name": "SetInUse",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SetInUse (instance.current_raid_plugin, nil)",
        "retail": true
      }
    ],
    "RaidPluginInstalled": [
      {
        "name": "RaidPluginInstalled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:RaidPluginInstalled (plugin_name)",
        "retail": true
      }
    ],
    "IsAvailable": [
      {
        "name": "IsAvailable",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (self:IsAvailable (last_plugin_used, instance)) then",
        "retail": true
      }
    ],
    "GetAvailablePlugins": [
      {
        "name": "GetAvailablePlugins",
        "count": 8,
        "confidence": 1.0,
        "sample": "local available = self:GetAvailablePlugins()",
        "retail": true
      }
    ],
    "ExecFunc": [
      {
        "name": "ExecFunc",
        "count": 9,
        "confidence": 1.0,
        "sample": "GameCooltip:ExecFunc (instance.baseframe.cabecalho.atributo)",
        "retail": true
      }
    ],
    "SendMsgToChannel": [
      {
        "name": "SendMsgToChannel",
        "count": 9,
        "confidence": 1.0,
        "sample": "function _detalhes:SendMsgToChannel (msg, channel, towho)",
        "retail": true
      }
    ],
    "BNSendWhisper": [
      {
        "name": "BNSendWhisper",
        "count": 3,
        "confidence": 0.6,
        "sample": "BNSendWhisper (towho, msg)",
        "retail": true
      }
    ],
    "BNGetNumFriends": [
      {
        "name": "BNGetNumFriends",
        "count": 3,
        "confidence": 0.6,
        "sample": "--local BnetFriends = BNGetNumFriends()",
        "retail": true
      }
    ],
    "BNGetFriendInfo": [
      {
        "name": "BNGetFriendInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "--\tlocal presenceID, presenceName, battleTag, isBattleTagPresence, toonName, toonID, client, isOnline, lastOnline, isAFK, isDND, messageText, noteText, isRIDFriend, broadcastTime, canSoR = BNGetFriendInfo (i)",
        "retail": true
      }
    ],
    "GetChannelName": [
      {
        "name": "GetChannelName",
        "count": 2,
        "confidence": 0.4,
        "sample": "SendChatMessage (msg, channel, nil, GetChannelName (towho))",
        "retail": true
      }
    ],
    "GetSpellLink": [
      {
        "name": "GetSpellLink",
        "count": 24,
        "confidence": 1.0,
        "sample": "spellname = GetSpellLink(extraSpellID)",
        "retail": true
      }
    ],
    "GetUnitClass": [
      {
        "name": "GetUnitClass",
        "count": 10,
        "confidence": 1.0,
        "sample": "local class = Details:GetUnitClass(who_name)",
        "retail": true
      }
    ],
    "EnableInterruptAnnouncer": [
      {
        "name": "EnableInterruptAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:EnableInterruptAnnouncer()",
        "retail": true
      }
    ],
    "DisableInterruptAnnouncer": [
      {
        "name": "DisableInterruptAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:DisableInterruptAnnouncer()",
        "retail": true
      }
    ],
    "UnInstallHook": [
      {
        "name": "UnInstallHook",
        "count": 4,
        "confidence": 0.8,
        "sample": "_detalhes:UnInstallHook (DETAILS_HOOK_INTERRUPT, _detalhes.interrupt_announcer)",
        "retail": true
      }
    ],
    "EnableCooldownAnnouncer": [
      {
        "name": "EnableCooldownAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:EnableCooldownAnnouncer()",
        "retail": true
      }
    ],
    "DisableCooldownAnnouncer": [
      {
        "name": "DisableCooldownAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:DisableCooldownAnnouncer()",
        "retail": true
      }
    ],
    "EnableDeathAnnouncer": [
      {
        "name": "EnableDeathAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:EnableDeathAnnouncer()",
        "retail": true
      }
    ],
    "DisableDeathAnnouncer": [
      {
        "name": "DisableDeathAnnouncer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:DisableDeathAnnouncer()",
        "retail": true
      }
    ],
    "SetOrGetPauseState": [
      {
        "name": "Details222.TimeMachine.SetOrGetPauseState",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details222.TimeMachine.SetOrGetPauseState(actorObject, false)",
        "retail": true
      }
    ],
    "Ticker": [
      {
        "name": "Details222.TimeMachine.Ticker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.TimeMachine.Ticker()",
        "retail": true
      }
    ],
    "AddActor": [
      {
        "name": "Details222.TimeMachine.AddActor",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details222.TimeMachine.AddActor(actorObject)",
        "retail": true
      }
    ],
    "Restart": [
      {
        "name": "Details222.TimeMachine.Restart",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.TimeMachine.Restart()",
        "retail": true
      }
    ],
    "StopTime": [
      {
        "name": "Details222.TimeMachine.StopTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.TimeMachine.StopTime(actorObject)",
        "retail": true
      }
    ],
    "LockDisplays": [
      {
        "name": "LockDisplays",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.StatusBar:LockDisplays(instance, locked)",
        "retail": true
      }
    ],
    "CreateStatusBarChildForInstance": [
      {
        "name": "CreateStatusBarChildForInstance",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details.StatusBar:CreateStatusBarChildForInstance(instance, pluginName)",
        "retail": true
      }
    ],
    "CreateChildObject": [
      {
        "name": "CreateChildObject",
        "count": 11,
        "confidence": 1.0,
        "sample": "local newChild = PluginObject:CreateChildObject(instance)",
        "retail": true
      }
    ],
    "SetCenterPlugin": [
      {
        "name": "SetCenterPlugin",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.StatusBar:SetCenterPlugin(instance, childObject, fromStartup)",
        "retail": true
      }
    ],
    "SetLeftPlugin": [
      {
        "name": "SetLeftPlugin",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.StatusBar:SetLeftPlugin(instance, childObject, fromStartup)",
        "retail": true
      }
    ],
    "SetRightPlugin": [
      {
        "name": "SetRightPlugin",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.StatusBar:SetRightPlugin(instance, childObject, fromStartup)",
        "retail": true
      }
    ],
    "ReloadAnchors": [
      {
        "name": "ReloadAnchors",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details.StatusBar:ReloadAnchors(instance)",
        "retail": true
      }
    ],
    "ApplyOptions": [
      {
        "name": "ApplyOptions",
        "count": 84,
        "confidence": 1.0,
        "sample": "Details.StatusBar:ApplyOptions(childObject, \"hidden\", true)",
        "retail": true
      }
    ],
    "UpdateOptions": [
      {
        "name": "UpdateOptions",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.StatusBar:UpdateOptions(instance)",
        "retail": true
      }
    ],
    "SetPlugin": [
      {
        "name": "SetPlugin",
        "count": 10,
        "confidence": 1.0,
        "sample": "function Details.StatusBar:SetPlugin(instance, absoluteName, anchor)",
        "retail": true
      }
    ],
    "ChoosePlugin": [
      {
        "name": "ChoosePlugin",
        "count": 5,
        "confidence": 1.0,
        "sample": "ChoosePlugin(nil, nil, -1, instance.StatusBar[anchor], anchor)",
        "retail": true
      }
    ],
    "GetIndexFromAbsoluteName": [
      {
        "name": "GetIndexFromAbsoluteName",
        "count": 5,
        "confidence": 1.0,
        "sample": "local index = Details.StatusBar:GetIndexFromAbsoluteName(absoluteName)",
        "retail": true
      }
    ],
    "AddFromTable": [
      {
        "name": "AddFromTable",
        "count": 5,
        "confidence": 1.0,
        "sample": "GameCooltip:AddFromTable(onEnterCooltipTexts)",
        "retail": true
      }
    ],
    "SetLastSelected": [
      {
        "name": "SetLastSelected",
        "count": 18,
        "confidence": 1.0,
        "sample": "GameCooltip:SetLastSelected(1, currentIndex)",
        "retail": true
      }
    ],
    "UpdateChilds": [
      {
        "name": "UpdateChilds",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.StatusBar:UpdateChilds(instance)",
        "retail": true
      }
    ],
    "CreateChildFrame": [
      {
        "name": "CreateChildFrame",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Details.StatusBar:CreateChildFrame(instance, frameName, width, height)",
        "retail": true
      }
    ],
    "GetInstanceId": [
      {
        "name": "GetInstanceId",
        "count": 15,
        "confidence": 1.0,
        "sample": "--local frame = _detalhes.gump:NewPanel(instance.baseframe.cabecalho.fechar, nil, name..instance:GetInstanceId(), nil, w or DEFAULT_CHILD_WIDTH, h or DEFAULT_CHILD_HEIGHT, false)",
        "retail": true
      }
    ],
    "CreateChildTable": [
      {
        "name": "CreateChildTable",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Details.StatusBar:CreateChildTable(instance, mainObject, frame)",
        "retail": true
      }
    ],
    "PlayerEnterCombat": [
      {
        "name": "PlayerEnterCombat",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PDps:PlayerEnterCombat()",
        "retail": true
      }
    ],
    "PlayerLeaveCombat": [
      {
        "name": "PlayerLeaveCombat",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PDps:PlayerLeaveCombat()",
        "retail": true
      }
    ],
    "ChangeSegment": [
      {
        "name": "ChangeSegment",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PDps:ChangeSegment(instance, segment)",
        "retail": true
      }
    ],
    "PluginDpsUpdate": [
      {
        "name": "PluginDpsUpdate",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:PluginDpsUpdate(child)",
        "retail": true
      }
    ],
    "DataReset": [
      {
        "name": "DataReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PDps:DataReset()",
        "retail": true
      }
    ],
    "ToK": [
      {
        "name": "ToK",
        "count": 53,
        "confidence": 1.0,
        "sample": "child.text:SetText(Details:ToK(dps))",
        "retail": true
      }
    ],
    "CommaValue": [
      {
        "name": "CommaValue",
        "count": 23,
        "confidence": 1.0,
        "sample": "child.text:SetText(Details:CommaValue(dps))",
        "retail": true
      }
    ],
    "NewCombat": [
      {
        "name": "NewCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PSegment:NewCombat()",
        "retail": true
      }
    ],
    "Change": [
      {
        "name": "Change",
        "count": 8,
        "confidence": 1.0,
        "sample": "PSegment:Change()",
        "retail": true
      }
    ],
    "OnSegmentChange": [
      {
        "name": "OnSegmentChange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PSegment:OnSegmentChange()",
        "retail": true
      }
    ],
    "SchduleGetName": [
      {
        "name": "SchduleGetName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PSegment:SchduleGetName()",
        "retail": true
      }
    ],
    "GetSegmentId": [
      {
        "name": "GetSegmentId",
        "count": 19,
        "confidence": 1.0,
        "sample": "if (child.instance:GetSegmentId() == DETAILS_SEGMENTID_OVERALL) then",
        "retail": true
      }
    ],
    "ExtraOptions": [
      {
        "name": "ExtraOptions",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PSegment:ExtraOptions()",
        "retail": true
      }
    ],
    "NewDropDown": [
      {
        "name": "NewDropDown",
        "count": 27,
        "confidence": 1.0,
        "sample": "detailsFramework:NewDropDown(window, nil, \"$parentSegmentTypeDropdown\", \"segmentTypeDropdown\", 200, 20, function() return segmentTypes end, 1) --func, default",
        "retail": true
      }
    ],
    "ExtraOptionsOnOpen": [
      {
        "name": "ExtraOptionsOnOpen",
        "count": 4,
        "confidence": 0.8,
        "sample": "function PSegment:ExtraOptionsOnOpen(child)",
        "retail": true
      }
    ],
    "SetFixedParameter": [
      {
        "name": "SetFixedParameter",
        "count": 36,
        "confidence": 1.0,
        "sample": "_G.DetailsStatusBarOptions2SegmentTypeDropdown.MyObject:SetFixedParameter(child)",
        "retail": true
      }
    ],
    "Frames": [
      {
        "name": "Frames",
        "count": 3,
        "confidence": 0.6,
        "sample": "--Create Plugin Frames(must have)",
        "retail": true
      }
    ],
    "GetInstanceAttributeText": [
      {
        "name": "GetInstanceAttributeText",
        "count": 4,
        "confidence": 0.8,
        "sample": "local sName = child.instance:GetInstanceAttributeText()",
        "retail": true
      }
    ],
    "ClockPluginTickOnSegment": [
      {
        "name": "ClockPluginTickOnSegment",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:ClockPluginTickOnSegment()",
        "retail": true
      }
    ],
    "ClockPluginTick": [
      {
        "name": "ClockPluginTick",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ClockPluginTick(true)",
        "retail": true
      }
    ],
    "ThreatPluginTick": [
      {
        "name": "ThreatPluginTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ThreatPluginTick()",
        "retail": true
      }
    ],
    "UpdateFps": [
      {
        "name": "UpdateFps",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PFps:UpdateFps()",
        "retail": true
      }
    ],
    "UpdateLatency": [
      {
        "name": "UpdateLatency",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PLatency:UpdateLatency()",
        "retail": true
      }
    ],
    "GetNetStats": [
      {
        "name": "GetNetStats",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _, _, _, lagWorld = GetNetStats()",
        "retail": true
      }
    ],
    "UpdateDurability": [
      {
        "name": "UpdateDurability",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PDurability:UpdateDurability()",
        "retail": true
      }
    ],
    "GoldPluginTick": [
      {
        "name": "GoldPluginTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function PGold:GoldPluginTick()",
        "retail": true
      }
    ],
    "UpdateGold": [
      {
        "name": "UpdateGold",
        "count": 3,
        "confidence": 0.6,
        "sample": "child:UpdateGold()",
        "retail": true
      }
    ],
    "UpdateClock": [
      {
        "name": "UpdateClock",
        "count": 3,
        "confidence": 0.6,
        "sample": "function PTime:UpdateClock()",
        "retail": true
      }
    ],
    "NewSlider": [
      {
        "name": "NewSlider",
        "count": 17,
        "confidence": 1.0,
        "sample": "detailsFramework:NewSlider(window, _, \"$parentSliderFontSize\", \"fonsizeSlider\", 170, 20, 7, 20, 1, 1)",
        "retail": true
      }
    ],
    "SetThumbSize": [
      {
        "name": "SetThumbSize",
        "count": 7,
        "confidence": 1.0,
        "sample": "window.fonsizeSlider:SetThumbSize(50)",
        "retail": true
      }
    ],
    "HashTable": [
      {
        "name": "HashTable",
        "count": 16,
        "confidence": 1.0,
        "sample": "local fontObjects = SharedMedia:HashTable(\"font\")",
        "retail": true
      }
    ],
    "CreateRightClickLabel": [
      {
        "name": "CreateRightClickLabel",
        "count": 2,
        "confidence": 0.4,
        "sample": "local rightClickLabel = window:CreateRightClickLabel(\"short\")",
        "retail": true
      }
    ],
    "HideWidgets": [
      {
        "name": "HideWidgets",
        "count": 2,
        "confidence": 0.4,
        "sample": "extraWindow:HideWidgets()",
        "retail": true
      }
    ],
    "FindEnemy": [
      {
        "name": "FindEnemy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FindEnemy()",
        "retail": true
      }
    ],
    "GetBossNames": [
      {
        "name": "GetBossNames",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (Details:GetBossNames(Details.zone_id)) then",
        "retail": true
      }
    ],
    "GetInstanceEJID": [
      {
        "name": "GetInstanceEJID",
        "count": 5,
        "confidence": 1.0,
        "sample": "local encounterJournalId = Details:GetInstanceEJID(mapID, name, encounterid)",
        "retail": true
      },
      {
        "name": "Ejc.GetInstanceEJID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.GetInstanceEJID(...)",
        "retail": true
      }
    ],
    "GetEncounterInfo": [
      {
        "name": "GetEncounterInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "local encounterInfo = Details:GetEncounterInfo(name)",
        "retail": true
      },
      {
        "name": "Ejc.GetEncounterInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.GetEncounterInfo(id)",
        "retail": true
      },
      {
        "name": "DetailsFramework.Ejc.GetEncounterInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "value = encounterInfo.journalEncounterId, --use with DetailsFramework.Ejc.GetEncounterInfo(value)",
        "retail": true
      }
    ],
    "CheckFor_SuppressedWindowsOnEncounterFound": [
      {
        "name": "CheckFor_SuppressedWindowsOnEncounterFound",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CheckFor_SuppressedWindowsOnEncounterFound()",
        "retail": true
      }
    ],
    "ReadBossFrames": [
      {
        "name": "ReadBossFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ReadBossFrames()",
        "retail": true
      }
    ],
    "GetBossIds": [
      {
        "name": "GetBossIds",
        "count": 3,
        "confidence": 0.6,
        "sample": "local bossIds = Details:GetBossIds(zoneMapID)",
        "retail": true
      }
    ],
    "GetBossName": [
      {
        "name": "GetBossName",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:Msg(\"(debug) boss found:\", Details:GetBossName(zoneMapID, bossIndex))",
        "retail": true
      }
    ],
    "FindBoss": [
      {
        "name": "FindBoss",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:FindBoss(noJournalSearch)",
        "retail": true
      }
    ],
    "GetCurrentDungeonBossListFromEJ": [
      {
        "name": "GetCurrentDungeonBossListFromEJ",
        "count": 2,
        "confidence": 0.4,
        "sample": "local bossList = Details:GetCurrentDungeonBossListFromEJ()",
        "retail": true
      }
    ],
    "GetTutorialCVar": [
      {
        "name": "GetTutorialCVar",
        "count": 10,
        "confidence": 1.0,
        "sample": "local hasSeenTutorial = Details:GetTutorialCVar(\"MIN_COMBAT_TIME\")",
        "retail": true
      }
    ],
    "SetTutorialCVar": [
      {
        "name": "SetTutorialCVar",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:SetTutorialCVar(\"MIN_COMBAT_TIME\", true)",
        "retail": true
      }
    ],
    "GetEncounterIDInOrder": [
      {
        "name": "GetEncounterIDInOrder",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetEncounterIDInOrder()",
        "retail": true
      }
    ],
    "EntrarEmCombate": [
      {
        "name": "EntrarEmCombate",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:EntrarEmCombate(...)",
        "retail": true
      }
    ],
    "LockActivityTime": [
      {
        "name": "LockActivityTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "pastCombatObject:LockActivityTime()",
        "retail": true
      }
    ],
    "SetCurrentCombat": [
      {
        "name": "SetCurrentCombat",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details:SetCurrentCombat(newCombatObject)",
        "retail": true
      }
    ],
    "SetDateToNow": [
      {
        "name": "SetDateToNow",
        "count": 4,
        "confidence": 0.8,
        "sample": "newCombatObject:SetDateToNow(bSetStartTime)",
        "retail": true
      }
    ],
    "StartCombatTicker": [
      {
        "name": "StartCombatTicker",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:StartCombatTicker()",
        "retail": true
      }
    ],
    "CatchRaidBuffUptime": [
      {
        "name": "CatchRaidBuffUptime",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CatchRaidBuffUptime(\"BUFF_UPTIME_IN\")",
        "retail": true
      }
    ],
    "CatchRaidDebuffUptime": [
      {
        "name": "CatchRaidDebuffUptime",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CatchRaidDebuffUptime(\"DEBUFF_UPTIME_IN\")",
        "retail": true
      }
    ],
    "GetAllInstances": [
      {
        "name": "GetAllInstances",
        "count": 36,
        "confidence": 1.0,
        "sample": "for index, instancia in ipairs(Details:GetAllInstances()) do",
        "retail": true
      }
    ],
    "CheckSwitchOnCombatStart": [
      {
        "name": "CheckSwitchOnCombatStart",
        "count": 2,
        "confidence": 0.4,
        "sample": "instancia:CheckSwitchOnCombatStart(true)",
        "retail": true
      }
    ],
    "CheckSwitchToCurrent": [
      {
        "name": "CheckSwitchToCurrent",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CheckSwitchToCurrent()",
        "retail": true
      }
    ],
    "CheckForTextTimeCounter": [
      {
        "name": "CheckForTextTimeCounter",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:CheckForTextTimeCounter(true)",
        "retail": true
      }
    ],
    "StopTestBarUpdate": [
      {
        "name": "StopTestBarUpdate",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:StopTestBarUpdate()",
        "retail": true
      }
    ],
    "ScheduleSyncPlayerActorData": [
      {
        "name": "ScheduleSyncPlayerActorData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ScheduleSyncPlayerActorData()",
        "retail": true
      }
    ],
    "CloseEnemyDebuffsUptime": [
      {
        "name": "CloseEnemyDebuffsUptime",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CloseEnemyDebuffsUptime()",
        "retail": true
      }
    ],
    "ClearSchedules": [
      {
        "name": "Details222.GuessSpecSchedules.ClearSchedules",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.GuessSpecSchedules.ClearSchedules()",
        "retail": true
      }
    ],
    "StopCombat": [
      {
        "name": "Details222.TimeCapture.StopCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "--Details222.TimeCapture.StopCombat() --it did not start",
        "retail": true
      }
    ],
    "GetRaidBossFindFunction": [
      {
        "name": "GetRaidBossFindFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "local findboss = Details:GetRaidBossFindFunction(zoneMapID)",
        "retail": true
      }
    ],
    "OnCombatPhaseChanged": [
      {
        "name": "OnCombatPhaseChanged",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:OnCombatPhaseChanged()",
        "retail": true
      }
    ],
    "StopCombatTicker": [
      {
        "name": "StopCombatTicker",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:StopCombatTicker()",
        "retail": true
      }
    ],
    "CutDeathEventsByTime": [
      {
        "name": "CutDeathEventsByTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "currentCombat:CutDeathEventsByTime()",
        "retail": true
      }
    ],
    "CloseShields": [
      {
        "name": "CloseShields",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CloseShields(currentCombat)",
        "retail": true
      }
    ],
    "EJ_GetInstanceForMap": [
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetInstanceForMap",
        "count": 3,
        "confidence": 0.6,
        "sample": "local ejid = DetailsFramework.EncounterJournal.EJ_GetInstanceForMap(mapID)",
        "retail": true
      }
    ],
    "FlagActorsOnPvPCombat": [
      {
        "name": "FlagActorsOnPvPCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:FlagActorsOnPvPCombat()",
        "retail": true
      }
    ],
    "FindEnemyName": [
      {
        "name": "FindEnemyName",
        "count": 3,
        "confidence": 0.6,
        "sample": "local enemyName = currentCombat:FindEnemyName()",
        "retail": true
      }
    ],
    "FlagActorsOnCommonFight": [
      {
        "name": "FlagActorsOnCommonFight",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:FlagActorsOnCommonFight()",
        "retail": true
      }
    ],
    "FlagActorsOnBossFight": [
      {
        "name": "FlagActorsOnBossFight",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:FlagActorsOnBossFight()",
        "retail": true
      }
    ],
    "CheckFor_TrashSuppressionOnEncounterEnd": [
      {
        "name": "CheckFor_TrashSuppressionOnEncounterEnd",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CheckFor_TrashSuppressionOnEncounterEnd()",
        "retail": true
      }
    ],
    "GetEncounterEqualize": [
      {
        "name": "GetEncounterEqualize",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (Details:GetEncounterEqualize(currentCombat.is_boss.mapid, currentCombat.is_boss.index)) then",
        "retail": true
      }
    ],
    "StoreTalents": [
      {
        "name": "StoreTalents",
        "count": 2,
        "confidence": 0.4,
        "sample": "currentCombat:StoreTalents()",
        "retail": true
      }
    ],
    "RefreshSolo": [
      {
        "name": "RefreshSolo",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details:RefreshSolo()",
        "retail": true
      }
    ],
    "CheckSwitchOnCombatEnd": [
      {
        "name": "CheckSwitchOnCombatEnd",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance:CheckSwitchOnCombatEnd()",
        "retail": true
      }
    ],
    "StoreSpells": [
      {
        "name": "Details.StoreSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.StoreSpells()",
        "retail": true
      }
    ],
    "GetPlayersInArena": [
      {
        "name": "GetPlayersInArena",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetPlayersInArena() --ARENA_OPPONENT_UPDATE",
        "retail": true
      }
    ],
    "GetNumArenaOpponentSpecs": [
      {
        "name": "GetNumArenaOpponentSpecs",
        "count": 3,
        "confidence": 0.6,
        "sample": "local enemiesAmount = GetNumArenaOpponentSpecs and GetNumArenaOpponentSpecs() or 5",
        "retail": true
      }
    ],
    "ArenaPlayerCreated": [
      {
        "name": "ArenaPlayerCreated",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ArenaPlayerCreated(actorObject)",
        "retail": true
      }
    ],
    "NewPlayer": [
      {
        "name": "Details222.ArenaSummary.NewPlayer",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.NewPlayer(actorObject, true, unitId)",
        "retail": true
      },
      {
        "name": "ArenaSummary.NewPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.NewPlayer(actorObject, isFriendly, unitId)",
        "retail": true
      }
    ],
    "CreateArenaSegment": [
      {
        "name": "CreateArenaSegment",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CreateArenaSegment()",
        "retail": true
      }
    ],
    "TimeDataRegister": [
      {
        "name": "TimeDataRegister",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:TimeDataRegister(\"Your Team Damage\", string_arena_myteam_damage, nil, \"Details!\", \"v1.0\", [[Interface\\ICONS\\Ability_DualWield]], true, true)",
        "retail": true
      }
    ],
    "CanSortByRealTimeDps": [
      {
        "name": "Details.CurrentDps.CanSortByRealTimeDps",
        "count": 5,
        "confidence": 1.0,
        "sample": "local bOrderDpsByRealTime = Details.CurrentDps.CanSortByRealTimeDps()",
        "retail": true
      }
    ],
    "OnArenaStart": [
      {
        "name": "Details222.ArenaSummary.OnArenaStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.ArenaSummary.OnArenaStart()",
        "retail": true
      },
      {
        "name": "ArenaSummary.OnArenaStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.OnArenaStart() --~start",
        "retail": true
      }
    ],
    "IsMatchActive": [
      {
        "name": "C_PvP.IsMatchActive",
        "count": 4,
        "confidence": 0.8,
        "sample": "--C_PvP.IsMatchActive() is true even before the arena match starts",
        "retail": true
      }
    ],
    "GetArenaStartTime": [
      {
        "name": "GetArenaStartTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetArenaStartTime()",
        "retail": true
      }
    ],
    "GetBattlegroundStartTime": [
      {
        "name": "GetBattlegroundStartTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetBattlegroundStartTime()",
        "retail": true
      }
    ],
    "TimeDataUnregister": [
      {
        "name": "TimeDataUnregister",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:TimeDataUnregister(\"Your Team Damage\")",
        "retail": true
      }
    ],
    "OnArenaEnd": [
      {
        "name": "Details222.ArenaSummary.OnArenaEnd",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.ArenaSummary.OnArenaEnd()",
        "retail": true
      },
      {
        "name": "ArenaSummary.OnArenaEnd",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.OnArenaEnd() --~end",
        "retail": true
      }
    ],
    "UpdateWindow": [
      {
        "name": "UpdateWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:UpdateWindow(instance, segmentId)",
        "retail": true
      }
    ],
    "TrocaTabela": [
      {
        "name": "TrocaTabela",
        "count": 29,
        "confidence": 1.0,
        "sample": "instance:TrocaTabela(instance, instance:GetSegment(), displayId, subDisplayId, true)",
        "retail": true
      }
    ],
    "PostponeInstanceToCurrent": [
      {
        "name": "PostponeInstanceToCurrent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:PostponeInstanceToCurrent(instance)",
        "retail": true
      }
    ],
    "TrocaSegmentoAtual": [
      {
        "name": "TrocaSegmentoAtual",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Details:TrocaSegmentoAtual(instance)",
        "retail": true
      }
    ],
    "SetTrashSuppression": [
      {
        "name": "SetTrashSuppression",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetTrashSuppression(n)",
        "retail": true
      }
    ],
    "CheckFor_EnabledTrashSuppression": [
      {
        "name": "CheckFor_EnabledTrashSuppression",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CheckFor_EnabledTrashSuppression()",
        "retail": true
      }
    ],
    "SetTrashSuppressionAfterEncounter": [
      {
        "name": "SetTrashSuppressionAfterEncounter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetTrashSuppressionAfterEncounter()",
        "retail": true
      }
    ],
    "AddTooltipReportLineText": [
      {
        "name": "AddTooltipReportLineText",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:AddTooltipReportLineText()",
        "retail": true
      }
    ],
    "AddStatusBar": [
      {
        "name": "AddStatusBar",
        "count": 66,
        "confidence": 1.0,
        "sample": "GameCooltip:AddStatusBar(100, 1, 0, 0, 0, 0.8)",
        "retail": true
      }
    ],
    "AddTooltipHeaderStatusbar": [
      {
        "name": "AddTooltipHeaderStatusbar",
        "count": 66,
        "confidence": 1.0,
        "sample": "function Details:AddTooltipHeaderStatusbar(r, g, b, a)",
        "retail": true
      }
    ],
    "AddTooltipSpellHeaderText": [
      {
        "name": "AddTooltipSpellHeaderText",
        "count": 56,
        "confidence": 1.0,
        "sample": "function Details:AddTooltipSpellHeaderText(headerText, headerColor, amount, iconTexture, L, R, T, B, separator, iconSize)",
        "retail": true
      }
    ],
    "FormatCooltipForSpells": [
      {
        "name": "FormatCooltipForSpells",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:FormatCooltipForSpells()",
        "retail": true
      }
    ],
    "BuildInstanceBarTooltip": [
      {
        "name": "BuildInstanceBarTooltip",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:BuildInstanceBarTooltip(frame)",
        "retail": true
      }
    ],
    "SetHost": [
      {
        "name": "SetHost",
        "count": 11,
        "confidence": 1.0,
        "sample": "GameCooltip:SetHost(frame, myPoint, anchorPoint, x_Offset, y_Offset)",
        "retail": true
      }
    ],
    "MontaTooltip": [
      {
        "name": "MontaTooltip",
        "count": 13,
        "confidence": 1.0,
        "sample": "function Details:MontaTooltip(frame, whichRowLine, keydown)",
        "retail": true
      }
    ],
    "ToolTipDead": [
      {
        "name": "ToolTipDead",
        "count": 4,
        "confidence": 0.8,
        "sample": "return Details:ToolTipDead(self, object, thisLine, keydown) --inst\ufffdncia, [morte], barra",
        "retail": true
      }
    ],
    "ToolTipBySpell": [
      {
        "name": "ToolTipBySpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:ToolTipBySpell(self, object, thisLine, keydown)",
        "retail": true
      }
    ],
    "ToolTipFrags": [
      {
        "name": "ToolTipFrags",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:ToolTipFrags(self, object, thisLine, keydown)",
        "retail": true
      }
    ],
    "ToolTipVoidZones": [
      {
        "name": "ToolTipVoidZones",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:ToolTipVoidZones(self, object, thisLine, keydown)",
        "retail": true
      }
    ],
    "ToolTip": [
      {
        "name": "ToolTip",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:Msg(\"object:ToolTip() is invalid.\", object.__destroyedBy)",
        "retail": true
      }
    ],
    "GetNicknameTable": [
      {
        "name": "GetNicknameTable",
        "count": 13,
        "confidence": 1.0,
        "sample": "local avatar = NickTag:GetNicknameTable(object:Name(), true)",
        "retail": true
      }
    ],
    "SetBannerImage": [
      {
        "name": "SetBannerImage",
        "count": 6,
        "confidence": 1.0,
        "sample": "GameCooltip:SetBannerImage(1, 1, avatar [2], 80, 40, avatarPoint, avatarTexCoord, nil) --overlay [2] avatar path",
        "retail": true
      }
    ],
    "SetBannerText": [
      {
        "name": "SetBannerText",
        "count": 4,
        "confidence": 0.8,
        "sample": "GameCooltip:SetBannerText(1, 1, (not Details.ignore_nicktag and avatar[1]) or object.nome, textPoint, avatarTextColor, 14, SharedMedia:Fetch(\"font\", Details.tooltip.fontface)) --text [1] nickname",
        "retail": true
      }
    ],
    "AddRoundedCornerToTooltip": [
      {
        "name": "AddRoundedCornerToTooltip",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:AddRoundedCornerToTooltip()",
        "retail": true
      }
    ],
    "ShowRoundedCorner": [
      {
        "name": "ShowRoundedCorner",
        "count": 4,
        "confidence": 0.8,
        "sample": "GameCooltip:ShowRoundedCorner()",
        "retail": true
      }
    ],
    "UpdateTooltip": [
      {
        "name": "UpdateTooltip",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details.gump:UpdateTooltip(whichRowLine, esta_barra, instancia)",
        "retail": true
      }
    ],
    "EndRefresh": [
      {
        "name": "EndRefresh",
        "count": 27,
        "confidence": 1.0,
        "sample": "function Details:EndRefresh(instancia, total, combatTable, showing)",
        "retail": true
      }
    ],
    "HideBarsNotInUse": [
      {
        "name": "HideBarsNotInUse",
        "count": 9,
        "confidence": 1.0,
        "sample": "Details:HideBarsNotInUse(instancia, showing)",
        "retail": true
      }
    ],
    "IsShowingOverallDataWarning": [
      {
        "name": "IsShowingOverallDataWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (not instance:IsShowingOverallDataWarning()) then",
        "retail": true
      }
    ],
    "ShowOverallDataWarning": [
      {
        "name": "ShowOverallDataWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance:ShowOverallDataWarning (true)",
        "retail": true
      }
    ],
    "RefreshAllMainWindows": [
      {
        "name": "RefreshAllMainWindows",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:RefreshAllMainWindows(bForceRefresh) --getting deprecated soon",
        "retail": true
      }
    ],
    "DumpPerf": [
      {
        "name": "DumpPerf",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DumpPerf()",
        "retail": true
      }
    ],
    "ForceRefresh": [
      {
        "name": "ForceRefresh",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ForceRefresh() --getting deprecated soon",
        "retail": true
      }
    ],
    "RefreshAllMainWindowsTemp": [
      {
        "name": "RefreshAllMainWindowsTemp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RefreshAllMainWindowsTemp()",
        "retail": true
      }
    ],
    "GetMode": [
      {
        "name": "GetMode",
        "count": 15,
        "confidence": 1.0,
        "sample": "if (thisInstance:GetMode() == DETAILS_MODE_GROUP or thisInstance:GetMode() == DETAILS_MODE_ALL) then",
        "retail": true
      }
    ],
    "RefreshData": [
      {
        "name": "RefreshData",
        "count": 11,
        "confidence": 1.0,
        "sample": "thisInstance:RefreshData(bForceRefresh)",
        "retail": true
      },
      {
        "name": "DetailsKeystoneInfoFrame.RefreshData",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsKeystoneInfoFrame.RefreshData()",
        "retail": true
      }
    ],
    "GetActorObjectFromBreakdownWindow": [
      {
        "name": "GetActorObjectFromBreakdownWindow",
        "count": 12,
        "confidence": 1.0,
        "sample": "local actorObject = Details:GetActorObjectFromBreakdownWindow()",
        "retail": true
      }
    ],
    "MontaInfo": [
      {
        "name": "MontaInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "return actorObject:MontaInfo()",
        "retail": true
      }
    ],
    "AutoEraseConfirm": [
      {
        "name": "AutoEraseConfirm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AutoEraseConfirm()",
        "retail": true
      }
    ],
    "Environnement": [
      {
        "name": "Environnement",
        "count": 6,
        "confidence": 1.0,
        "sample": "L[\"STRING_ENVIRONMENTAL_DROWNING\"] = \"Environnement (noyade)\"",
        "retail": true
      }
    ],
    "Recadrage": [
      {
        "name": "Recadrage",
        "count": 4,
        "confidence": 0.8,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Recadrage (|cFFC0C0C0bas|r) :\"",
        "retail": true
      }
    ],
    "TGA": [
      {
        "name": "TGA",
        "count": 5,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_LOAD_EXCLAMATION\"] = \"L'image doit : - \u00catre au format Truevision TGA (extension .tga). - \u00catre dans le dossier racine WOW/ Interface/ . - \u00catre de 256 x 256 pixels. - Le jeu doit \u00eatre ferm\u00e9 avant de copier le fichier.\"",
        "retail": true
      }
    ],
    "Environment": [
      {
        "name": "Environment",
        "count": 12,
        "confidence": 1.0,
        "sample": "L[\"STRING_ENVIRONMENTAL_DROWNING\"] = \"Environment (Drowning)\"",
        "retail": true
      }
    ],
    "Default": [
      {
        "name": "Default",
        "count": 6,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_BAR_ICONFILE3\"] = \"Default (black white)\"",
        "retail": true
      }
    ],
    "Profile": [
      {
        "name": "Profile",
        "count": 3,
        "confidence": 0.6,
        "sample": "L[\"STRING_OPTIONS_IMPORT_PROFILE_PASTE\"] = \"Details! Import Profile (paste string)\"",
        "retail": true
      }
    ],
    "Crop": [
      {
        "name": "Crop",
        "count": 8,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Crop (|cFFC0C0C0bottom|r):\"",
        "retail": true
      }
    ],
    "Control": [
      {
        "name": "Control",
        "count": 5,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_WC_ANCHOR\"] = \"Quick Window Control (#%s):\"",
        "retail": true
      }
    ],
    "GUID": [
      {
        "name": "GUID",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_FORGE_HEADER_GUID\"] = \"GUID (\uae00\ub85c\ubc8c \uc720\ub2db ID)\"",
        "retail": true
      }
    ],
    "Entorno": [
      {
        "name": "Entorno",
        "count": 12,
        "confidence": 1.0,
        "sample": "L[\"STRING_ENVIRONMENTAL_DROWNING\"] = \"Entorno (Ahogamiento)\"",
        "retail": true
      }
    ],
    "Defecto": [
      {
        "name": "Defecto",
        "count": 6,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_BAR_ICONFILE3\"] = \"Defecto (negro y blanco)\"",
        "retail": true
      }
    ],
    "Cortar": [
      {
        "name": "Cortar",
        "count": 8,
        "confidence": 1.0,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Cortar (|cFFC0C0C0inferior|r):\"",
        "retail": true
      }
    ],
    "Standard": [
      {
        "name": "Standard",
        "count": 3,
        "confidence": 0.6,
        "sample": "L[\"STRING_OPTIONS_BAR_ICONFILE3\"] = \"Standard (schwarz/wei\u00df)\"",
        "retail": true
      }
    ],
    "Charaktere": [
      {
        "name": "Charaktere",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_PROFILES_SELECT_DESC\"] = \"L\u00e4dt ein existierendes Profil. Wenn du dasselbe Profil f\u00fcr alle Charaktere (Option 'Bei allen Charakteren benutzen') verwendest, wird eine Ausnahme f\u00fcr diesen Charakter erstellt.\"",
        "retail": true
      }
    ],
    "Chatfenster": [
      {
        "name": "Chatfenster",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_RT_FIRST_HIT_DESC\"] = \"Schreibt per Chatfenster (|cFFFFFF00nur f\u00fcr dich|r), wer den ersten Treffer ausf\u00fchrte - in der Regel der Kampfbeginner.\"",
        "retail": true
      }
    ],
    "Chat": [
      {
        "name": "Chat",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_RT_INFOS_PREPOTION_DESC\"] = \"Aktiviert: Schreibt nach einer Begegnung in deinen Chat (|cFFFFFF00nur f\u00fcr dich|r), wer vor dem Pull einen Trank benutzte.\"",
        "retail": true
      }
    ],
    "Segmente": [
      {
        "name": "Segmente",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_TRASH_SUPPRESSION_DESC\"] = \"Deaktiviert f\u00fcr |cFFFFFF00X|r Sekunden das automatische Umschalten auf Trash-Segmente (|cFFFFFF00nur nach erfolgreichem Bosskampf|r).\"",
        "retail": true
      }
    ],
    "Abschneiden": [
      {
        "name": "Abschneiden",
        "count": 4,
        "confidence": 0.8,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Abschneiden (|cFFC0C0C0unten|r):\"",
        "retail": true
      }
    ],
    "Dateiendung": [
      {
        "name": "Dateiendung",
        "count": 1,
        "confidence": 0.2,
        "sample": "- \u00fcberpr\u00fcfe die Dateiendung (*.tga) und die Farbtiefe (32bit/pixel).",
        "retail": true
      }
    ],
    "Farbtiefe": [
      {
        "name": "Farbtiefe",
        "count": 1,
        "confidence": 0.2,
        "sample": "- \u00fcberpr\u00fcfe die Dateiendung (*.tga) und die Farbtiefe (32bit/pixel).",
        "retail": true
      }
    ],
    "Fensterkontrolle": [
      {
        "name": "Fensterkontrolle",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_WC_ANCHOR\"] = \"Schnelle Fensterkontrolle (#%s):\"",
        "retail": true
      }
    ],
    "Ambiente": [
      {
        "name": "Ambiente",
        "count": 12,
        "confidence": 1.0,
        "sample": "L[\"STRING_ENVIRONMENTAL_DROWNING\"] = \"Ambiente (Afogar)\"",
        "retail": true
      }
    ],
    "Pele": [
      {
        "name": "Pele",
        "count": 2,
        "confidence": 0.4,
        "sample": "L[\"STRING_OPTIONS_INSTANCE_SKIN\"] = \"Pele (skin)\"",
        "retail": true
      }
    ],
    "Combate": [
      {
        "name": "Combate",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_MENU_ATTRIBUTE_ENCOUNTERTIMER\"] = \"Tempo de Combate (raid)\"",
        "retail": true
      }
    ],
    "I": [
      {
        "name": "I",
        "count": 2,
        "confidence": 0.4,
        "sample": "L[\"STRING_OPTIONS_PS_ABBREVIATE_TOK\"] = \"Centena I (caixa alta)\"",
        "retail": true
      }
    ],
    "II": [
      {
        "name": "II",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_PS_ABBREVIATE_TOK2\"] = \"Centena II (caixa alta)\"",
        "retail": true
      }
    ],
    "Trash": [
      {
        "name": "Trash",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_TRASH_SUPPRESSION_DESC\"] = \"Por |cFFFFFF00X|r segundos, suprimir a troca autom\u00e1tica de segmento para mostrar segmentos de Trash (|cFFFFFF00apenas depois de derrotar um chefe de raide|r).\"",
        "retail": true
      }
    ],
    "Recorte": [
      {
        "name": "Recorte",
        "count": 4,
        "confidence": 0.8,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Recorte (|cFFC0C0C0baixo|r):\"",
        "retail": true
      }
    ],
    "Janela": [
      {
        "name": "Janela",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_WC_ANCHOR\"] = \"Controle R\u00e1pido da Janela (#%s):\"",
        "retail": true
      }
    ],
    "Atalho": [
      {
        "name": "Atalho",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_SHORTCUT_RIGHTCLICK\"] = \"Menu de Atalho (bot\u00e3o direito para fechar)\"",
        "retail": true
      }
    ],
    "API": [
      {
        "name": "API",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_SLASH_API_DESC\"] = \"abre o painel da API (em ingl\u00eas) para construir plugins, displays customizados, auras, etc.\"",
        "retail": true
      }
    ],
    "Predefinito": [
      {
        "name": "Predefinito",
        "count": 3,
        "confidence": 0.6,
        "sample": "L[\"STRING_OPTIONS_BAR_ICONFILE3\"] = \"Predefinito (nero bianco)\"",
        "retail": true
      }
    ],
    "Ritaglia": [
      {
        "name": "Ritaglia",
        "count": 4,
        "confidence": 0.8,
        "sample": "L[\"STRING_OPTIONS_WALLPAPER_CBOTTOM\"] = \"Ritaglia (|cFFC0C0C0sotto|r):\"",
        "retail": true
      }
    ],
    "Finestra": [
      {
        "name": "Finestra",
        "count": 1,
        "confidence": 0.2,
        "sample": "L[\"STRING_OPTIONS_WC_ANCHOR\"] = \"Controllo Rapido della Finestra (#%s):\"",
        "retail": true
      }
    ],
    "InstallSkin": [
      {
        "name": "InstallSkin",
        "count": 12,
        "confidence": 1.0,
        "sample": "function _detalhes:InstallSkin (skin_name, skin_table)",
        "retail": true
      }
    ],
    "SetTooltipBackdrop": [
      {
        "name": "SetTooltipBackdrop",
        "count": 5,
        "confidence": 1.0,
        "sample": "_detalhes:SetTooltipBackdrop(\"Blizzard Tooltip\", 16, {1, 1, 1, 1})",
        "retail": true
      }
    ],
    "ToolbarMenuSetButtonsOptions": [
      {
        "name": "ToolbarMenuSetButtonsOptions",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance:ToolbarMenuSetButtonsOptions (nil, true)",
        "retail": true
      }
    ],
    "AttributeMenu": [
      {
        "name": "AttributeMenu",
        "count": 9,
        "confidence": 1.0,
        "sample": "instance:AttributeMenu (nil, nil, nil, nil, nil, nil, nil, true)",
        "retail": true
      }
    ],
    "GetInstanceGroup": [
      {
        "name": "GetInstanceGroup",
        "count": 11,
        "confidence": 1.0,
        "sample": "for _, this_instance in ipairs(instance:GetInstanceGroup()) do",
        "retail": true
      }
    ],
    "SendOptionsModifiedEvent": [
      {
        "name": "SendOptionsModifiedEvent",
        "count": 4,
        "confidence": 0.8,
        "sample": "_detalhes:SendOptionsModifiedEvent (DetailsOptionsWindow.instance)",
        "retail": true
      }
    ],
    "AtivarInstancia": [
      {
        "name": "AtivarInstancia",
        "count": 16,
        "confidence": 1.0,
        "sample": "instance2:AtivarInstancia()",
        "retail": true
      }
    ],
    "UngroupInstance": [
      {
        "name": "UngroupInstance",
        "count": 10,
        "confidence": 1.0,
        "sample": "instance1:UngroupInstance()",
        "retail": true
      }
    ],
    "LockInstance": [
      {
        "name": "LockInstance",
        "count": 16,
        "confidence": 1.0,
        "sample": "instance1:LockInstance (true)",
        "retail": true
      }
    ],
    "GetActorIcon": [
      {
        "name": "GetActorIcon",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:GetActorIcon(actorObject)",
        "retail": true
      }
    ],
    "Spec": [
      {
        "name": "Spec",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spec = actorObject:Spec()",
        "retail": true
      }
    ],
    "Class": [
      {
        "name": "Class",
        "count": 13,
        "confidence": 1.0,
        "sample": "local class = actorObject:Class() or \"UNKNOW\"",
        "retail": true
      }
    ],
    "GetUnknownClassIcon": [
      {
        "name": "GetUnknownClassIcon",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetUnknownClassIcon()",
        "retail": true
      }
    ],
    "GetIconTexture": [
      {
        "name": "GetIconTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetIconTexture(iconType, bWithAlpha)",
        "retail": true
      }
    ],
    "GetSpecFromActorName": [
      {
        "name": "GetSpecFromActorName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetSpecFromActorName(actorName)",
        "retail": true
      }
    ],
    "GetSpecByGUID": [
      {
        "name": "GetSpecByGUID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local spec = Details:GetSpecByGUID(GUID)",
        "retail": true
      }
    ],
    "GetRoleIcon": [
      {
        "name": "GetRoleIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetRoleIcon(role)",
        "retail": true
      }
    ],
    "GetSpecIcon": [
      {
        "name": "GetSpecIcon",
        "count": 16,
        "confidence": 1.0,
        "sample": "function Details:GetSpecIcon(spec, useAlpha)",
        "retail": true
      }
    ],
    "GetPlayerIcon": [
      {
        "name": "GetPlayerIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetPlayerIcon(playerName, combatObject)",
        "retail": true
      }
    ],
    "GuessClass": [
      {
        "name": "GuessClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GuessClass(payload)",
        "retail": true
      }
    ],
    "GetSpellContainerNames": [
      {
        "name": "GetSpellContainerNames",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spellContainerNames = actorObject:GetSpellContainerNames() --1x Details/functions/playerclass.lua:293: attempt to call method 'GetSpellContainerNames' (a nil value)",
        "retail": true
      }
    ],
    "GetSpellContainer": [
      {
        "name": "GetSpellContainer",
        "count": 23,
        "confidence": 1.0,
        "sample": "local spellContainer = actorObject:GetSpellContainer(spellContainerNames[i])",
        "retail": true
      }
    ],
    "GuessSpec": [
      {
        "name": "GuessSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GuessSpec(payload)",
        "retail": true
      }
    ],
    "ReGuessSpec": [
      {
        "name": "ReGuessSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ReGuessSpec(t) --deprecated",
        "retail": true
      }
    ],
    "GetSpellCastTable": [
      {
        "name": "GetSpellCastTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spellCastTable = combatObject:GetSpellCastTable(actorObject.nome)",
        "retail": true
      }
    ],
    "OnClickEncounterJournalLink": [
      {
        "name": "Details222.EJCache.OnClickEncounterJournalLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.OnClickEncounterJournalLink(tag, journalTypeString, idString) --not in use",
        "retail": true
      }
    ],
    "EJ_HandleLinkPath": [
      {
        "name": "EJ_HandleLinkPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "local instanceId, encounterId, sectionId, tierIndex = EJ_HandleLinkPath(journalType, id)",
        "retail": true
      }
    ],
    "GetSectionInfo": [
      {
        "name": "C_EncounterJournal.GetSectionInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local sectionInfo = C_EncounterJournal.GetSectionInfo(sectionId)",
        "retail": true
      }
    ],
    "GetDamageDoneToPlayersBySpell": [
      {
        "name": "Details222.DamageSpells.GetDamageDoneToPlayersBySpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "local damageDoneTable = Details222.DamageSpells.GetDamageDoneToPlayersBySpell(spellId)",
        "retail": true
      }
    ],
    "RemoveRealmName": [
      {
        "name": "RemoveRealmName",
        "count": 22,
        "confidence": 1.0,
        "sample": "local nameWithoutRealm = DF:RemoveRealmName(targetName)",
        "retail": true
      }
    ],
    "MakeStringFromSpellId": [
      {
        "name": "MakeStringFromSpellId",
        "count": 2,
        "confidence": 0.4,
        "sample": "local abilityString = DF:MakeStringFromSpellId(spellId)",
        "retail": true
      }
    ],
    "SetPetData": [
      {
        "name": "Details222.PetContainer.SetPetData",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.PetContainer.SetPetData(currentCharacterData.saved_pet_cache)",
        "retail": true
      },
      {
        "name": "SetPetData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function petContainer.SetPetData(petData)",
        "retail": true
      }
    ],
    "NickTagSetCache": [
      {
        "name": "NickTagSetCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:NickTagSetCache (_detalhes_database.nick_tag_cache)",
        "retail": true
      }
    ],
    "CountDataOnLoad": [
      {
        "name": "CountDataOnLoad",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CountDataOnLoad()",
        "retail": true
      }
    ],
    "BuildTables": [
      {
        "name": "BuildTables",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.Buffs:BuildTables()",
        "retail": true
      }
    ],
    "ClearSpellCache": [
      {
        "name": "ClearSpellCache",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ClearSpellCache()",
        "retail": true
      }
    ],
    "GetProfile": [
      {
        "name": "GetProfile",
        "count": 15,
        "confidence": 1.0,
        "sample": "if (profile_name and profile_name ~= \"\" and Details:GetProfile (profile_name)) then",
        "retail": true
      },
      {
        "name": "WarcraftLogs.GetProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "playerProfile = WarcraftLogs.GetProfile(playerName, playerRealm, factionId)",
        "retail": true
      },
      {
        "name": "RaiderIO.GetProfile",
        "count": 3,
        "confidence": 0.6,
        "sample": "rioProfile = RaiderIO.GetProfile(playerName, playerRealm, faction == \"Horde\" and 2 or 1)",
        "retail": true
      },
      {
        "name": "SavedVars.GetProfile",
        "count": 4,
        "confidence": 0.8,
        "sample": "function detailsFramework.SavedVars.GetProfile(addonObject, bCreateIfNotFound, profileToCopyFrom)",
        "retail": true
      }
    ],
    "GetCurrentProfileName": [
      {
        "name": "GetCurrentProfileName",
        "count": 15,
        "confidence": 1.0,
        "sample": "local current_profile_name = Details:GetCurrentProfileName()",
        "retail": true
      },
      {
        "name": "SavedVars.GetCurrentProfileName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function detailsFramework.SavedVars.GetCurrentProfileName(addonObject)",
        "retail": true
      }
    ],
    "SaveProfileSpecial": [
      {
        "name": "SaveProfileSpecial",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:SaveProfileSpecial()",
        "retail": true
      }
    ],
    "ApplyProfile": [
      {
        "name": "ApplyProfile",
        "count": 12,
        "confidence": 1.0,
        "sample": "Details:ApplyProfile(current_profile_name, true)",
        "retail": true
      }
    ],
    "TimeDataUpdate": [
      {
        "name": "TimeDataUpdate",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:TimeDataUpdate (index_or_name, name, func, matrix, author, version, icon, is_enabled)",
        "retail": true
      }
    ],
    "TimeDataCleanUpTemporary": [
      {
        "name": "TimeDataCleanUpTemporary",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:TimeDataCleanUpTemporary()",
        "retail": true
      }
    ],
    "TimeDataCreateChartTables": [
      {
        "name": "TimeDataCreateChartTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:TimeDataCreateChartTables()",
        "retail": true
      }
    ],
    "SetEnvironment": [
      {
        "name": "SetEnvironment",
        "count": 12,
        "confidence": 1.0,
        "sample": "DetailsFramework:SetEnvironment(func)",
        "retail": true
      }
    ],
    "TimeDataTick": [
      {
        "name": "TimeDataTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:TimeDataTick()",
        "retail": true
      }
    ],
    "SetDataBrokerText": [
      {
        "name": "SetDataBrokerText",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetDataBrokerText (text)",
        "retail": true
      }
    ],
    "StartCombatTimer": [
      {
        "name": "Details222.TimeCapture.StartCombatTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.TimeCapture.StartCombatTimer(combatObject)",
        "retail": true
      }
    ],
    "StopAllUnitTimers": [
      {
        "name": "Details222.TimeCapture.StopAllUnitTimers",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.TimeCapture.StopAllUnitTimers()",
        "retail": true
      }
    ],
    "GetChartDataFromSpell": [
      {
        "name": "Details222.TimeCapture.GetChartDataFromSpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.TimeCapture.GetChartDataFromSpell(spellTable)",
        "retail": true
      }
    ],
    "GetDisplayClassByDisplayId": [
      {
        "name": "GetDisplayClassByDisplayId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetDisplayClassByDisplayId(displayId)",
        "retail": true
      }
    ],
    "GetNameNoRealm": [
      {
        "name": "GetNameNoRealm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetNameNoRealm(actor)",
        "retail": true
      }
    ],
    "RemoveOwnerName": [
      {
        "name": "RemoveOwnerName",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:RemoveOwnerName(string)",
        "retail": true
      }
    ],
    "GetCLName": [
      {
        "name": "GetCLName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetCLName(id)",
        "retail": true
      }
    ],
    "GetUnitClassFull": [
      {
        "name": "GetUnitClassFull",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetUnitClassFull(unitId)",
        "retail": true
      }
    ],
    "GetUnitNameForAPI": [
      {
        "name": "GetUnitNameForAPI",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetUnitNameForAPI(unitId)",
        "retail": true
      }
    ],
    "IsValidActor": [
      {
        "name": "IsValidActor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsValidActor(actor)",
        "retail": true
      }
    ],
    "GetActorClass": [
      {
        "name": "GetActorClass",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetActorClass(actor)",
        "retail": true
      }
    ],
    "GetGUID": [
      {
        "name": "GetGUID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetGUID(actor)",
        "retail": true
      }
    ],
    "GetFlag": [
      {
        "name": "GetFlag",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetFlag(actor)",
        "retail": true
      }
    ],
    "GetSpells": [
      {
        "name": "GetSpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetSpells()",
        "retail": true
      }
    ],
    "GetActorSpells": [
      {
        "name": "GetActorSpells",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:GetActorSpells()",
        "retail": true
      }
    ],
    "GetPets": [
      {
        "name": "GetPets",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:GetPets()",
        "retail": true
      },
      {
        "name": "Details222.PetContainer.GetPets",
        "count": 1,
        "confidence": 0.2,
        "sample": "_detalhes_database.saved_pet_cache = Details222.PetContainer.GetPets()",
        "retail": true
      }
    ],
    "Pets": [
      {
        "name": "Pets",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:Pets()",
        "retail": true
      }
    ],
    "AddColorString": [
      {
        "name": "AddColorString",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:AddColorString(thisString, class)",
        "retail": true
      }
    ],
    "AddRoleIcon": [
      {
        "name": "AddRoleIcon",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:AddRoleIcon(thisString, role, size)",
        "retail": true
      }
    ],
    "AddClassOrSpecIcon": [
      {
        "name": "AddClassOrSpecIcon",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:AddClassOrSpecIcon(thisString, class, spec, iconSize, useAlphaIcons)",
        "retail": true
      }
    ],
    "GetParseColor": [
      {
        "name": "Details222.WarcraftLogs.GetParseColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.WarcraftLogs.GetParseColor(percent)",
        "retail": true
      }
    ],
    "GetPlayerProfile": [
      {
        "name": "Details222.WarcraftLogs.GetPlayerProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.WarcraftLogs.GetPlayerProfile(actorObject)",
        "retail": true
      }
    ],
    "GetClassPercentileFromBossProfile": [
      {
        "name": "Details222.WarcraftLogs.GetClassPercentileFromBossProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.WarcraftLogs.GetClassPercentileFromBossProfile(bossProfile)",
        "retail": true
      }
    ],
    "GetEncounterProfile": [
      {
        "name": "Details222.WarcraftLogs.GetEncounterProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.WarcraftLogs.GetEncounterProfile(cleuBossId, difficultyId)",
        "retail": true
      },
      {
        "name": "WarcraftLogs.GetEncounterProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "return WarcraftLogs.GetEncounterProfile(cleuBossId, difficultyId) or {} --wrapped",
        "retail": true
      }
    ],
    "GetClassPercentileForEncounterID": [
      {
        "name": "Details222.WarcraftLogs.GetClassPercentileForEncounterID",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.WarcraftLogs.GetClassPercentileForEncounterID(cleuBossId, difficultyId, classId)",
        "retail": true
      }
    ],
    "GetSpecPercentileFromClassPercentile": [
      {
        "name": "Details222.WarcraftLogs.GetSpecPercentileFromClassPercentile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.WarcraftLogs.GetSpecPercentileFromClassPercentile(classPercentile, specId)",
        "retail": true
      }
    ],
    "GetDamageParsePercent": [
      {
        "name": "Details222.WarcraftLogs.GetDamageParsePercent",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.WarcraftLogs.GetDamageParsePercent(encounterId, difficultyId, specId, amount)",
        "retail": true
      }
    ],
    "MapRangeClamped": [
      {
        "name": "MapRangeClamped",
        "count": 8,
        "confidence": 1.0,
        "sample": "local percentScalar = detailsFramework:MapRangeClamped(minDamage, maxDamage, 0, 100, amount)",
        "retail": true
      },
      {
        "name": "DF.Math.MapRangeClamped",
        "count": 5,
        "confidence": 1.0,
        "sample": "return DF.Math.MapRangeClamped(0, 1, minValue, maxValue, math.random())",
        "retail": true
      },
      {
        "name": "Math.MapRangeClamped",
        "count": 1,
        "confidence": 0.2,
        "sample": "scaleSlider:SetValue(detailsFramework.Math.MapRangeClamped(minValue, maxValue, 0, 1, scale))",
        "retail": true
      }
    ],
    "GetPercent": [
      {
        "name": "Details222.ParsePercent.GetPercent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.ParsePercent.GetPercent(attribute, difficultyId, encounterId, specId, amount)",
        "retail": true
      }
    ],
    "GetSpellInfoClassic": [
      {
        "name": "GetSpellInfoClassic",
        "count": 1,
        "confidence": 0.2,
        "sample": "spellInfo = {GetSpellInfoClassic(key)}",
        "retail": true
      }
    ],
    "CreateTextureMarkup": [
      {
        "name": "CreateTextureMarkup",
        "count": 1,
        "confidence": 0.2,
        "sample": "result = \"\" .. CreateTextureMarkup(itemIcon, iconSize, iconSize, iconSize, iconSize, unpack(coords)) .. \" \" .. itemName .. \"\"",
        "retail": true
      }
    ],
    "IsTWWWow": [
      {
        "name": "DetailsFramework.IsTWWWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "elseif (DetailsFramework.IsTWWWow()) then",
        "retail": true
      },
      {
        "name": "DF.IsTWWWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsTWWWow()",
        "retail": true
      }
    ],
    "Anvil": [
      {
        "name": "Anvil",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[401306] = {itemId = 202617} --trinket: Elementium Pocket Anvil (use)",
        "retail": true
      }
    ],
    "Flare": [
      {
        "name": "Flare",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[384290] = {itemId = 193672, isPassive = true} --trinket: Frenzying Signoll Flare (dot)",
        "retail": true
      }
    ],
    "Scale": [
      {
        "name": "Scale",
        "count": 2,
        "confidence": 0.4,
        "sample": "customItemList[381760] = {itemId = 193786, isPassive = true} --trinket: Mutated Magmammoth Scale (melee)",
        "retail": true
      }
    ],
    "Essence": [
      {
        "name": "Essence",
        "count": 2,
        "confidence": 0.4,
        "sample": "customItemList[426431] = {itemId = 210494, isPassive = true} --enchant: Incandescent Essence (ranged dps)",
        "retail": true
      }
    ],
    "Dreamcarver": [
      {
        "name": "Dreamcarver",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[425127] = {itemId = 207783, isPassive = true} --weapon: Cruel Dreamcarver (heal)",
        "retail": true
      }
    ],
    "Embersoul": [
      {
        "name": "Embersoul",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[423611] = {itemId = 207167, isPassive = true, nameExtra = \"*proc*\"} --trinket: Ashes of the Embersoul (extra proc)",
        "retail": true
      }
    ],
    "Ancient": [
      {
        "name": "Ancient",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[422441] = {itemId = 207169, isPassive = true} --trinket: Branch of the Tormented Ancient (buff)",
        "retail": true
      }
    ],
    "Sandglass": [
      {
        "name": "Sandglass",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[417452] = {itemId = 207566, isPassive = true} --trinket: Accelerating Sandglass (buff)",
        "retail": true
      }
    ],
    "Branch": [
      {
        "name": "Branch",
        "count": 2,
        "confidence": 0.4,
        "sample": "customItemList[429262] = {itemId = 109999, isPassive = true} --trinket: Witherbark's Branch (buff)",
        "retail": true
      }
    ],
    "Tomorrows": [
      {
        "name": "Tomorrows",
        "count": 1,
        "confidence": 0.2,
        "sample": "customItemList[418527] = {itemId = 207581, isPassive = true} --trinket: Mirror of Fractured Tomorrows (buff)",
        "retail": true
      }
    ],
    "GetDefaultCustomSpellsList": [
      {
        "name": "GetDefaultCustomSpellsList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetDefaultCustomSpellsList()",
        "retail": true
      }
    ],
    "UserCustomSpellUpdate": [
      {
        "name": "UserCustomSpellUpdate",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:UserCustomSpellUpdate(index, spellName, spellIcon) --called from the options panel > rename spells",
        "retail": true
      }
    ],
    "UserCustomSpellReset": [
      {
        "name": "UserCustomSpellReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UserCustomSpellReset(index)",
        "retail": true
      }
    ],
    "UserCustomSpellAdd": [
      {
        "name": "UserCustomSpellAdd",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:UserCustomSpellAdd(spellId, spellTable.name or spellName or \"Unknown\", spellTable.icon or spellIcon or [[Interface\\InventoryItems\\WoWUnknownItem01]])",
        "retail": true
      }
    ],
    "UserCustomSpellRemove": [
      {
        "name": "UserCustomSpellRemove",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UserCustomSpellRemove(index)",
        "retail": true
      }
    ],
    "GetCustomSpellInfo": [
      {
        "name": "Details.GetCustomSpellInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.GetCustomSpellInfo(spellId)",
        "retail": true
      }
    ],
    "GetItemSpellInfo": [
      {
        "name": "Details.GetItemSpellInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.GetItemSpellInfo(spellId)",
        "retail": true
      }
    ],
    "SetAsDotSpell": [
      {
        "name": "SetAsDotSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetAsDotSpell(spellId)",
        "retail": true
      }
    ],
    "AskRLForCoachStatus": [
      {
        "name": "Details.Coach.AskRLForCoachStatus",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.Coach.AskRLForCoachStatus()",
        "retail": true
      }
    ],
    "SendRLCombatStartNotify": [
      {
        "name": "Details.Coach.SendRLCombatStartNotify",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.Coach.SendRLCombatStartNotify(coachName)",
        "retail": true
      }
    ],
    "SendRLCombatEndNotify": [
      {
        "name": "Details.Coach.SendRLCombatEndNotify",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Coach.SendRLCombatEndNotify(coachName)",
        "retail": true
      }
    ],
    "SendRaidCoachEndNotify": [
      {
        "name": "Details.Coach.SendRaidCoachEndNotify",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Coach.SendRaidCoachEndNotify()",
        "retail": true
      }
    ],
    "SendRaidCoachStartNotify": [
      {
        "name": "Details.Coach.SendRaidCoachStartNotify",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Coach.SendRaidCoachStartNotify()",
        "retail": true
      }
    ],
    "SendDeathToRL": [
      {
        "name": "Details.Coach.SendDeathToRL",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Coach.SendDeathToRL(deathTable)",
        "retail": true
      }
    ],
    "SendDataToRL": [
      {
        "name": "Details.Coach.Client.SendDataToRL",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Coach.Client.SendDataToRL()",
        "retail": true
      }
    ],
    "GetAllData": [
      {
        "name": "GetAllData",
        "count": 3,
        "confidence": 0.6,
        "sample": "--local data = Details.packFunctions.GetAllData()",
        "retail": true
      }
    ],
    "OnEnterGroup": [
      {
        "name": "OnEnterGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener.OnEnterGroup() --client",
        "retail": true
      }
    ],
    "OnLeaveGroup": [
      {
        "name": "OnLeaveGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener.OnLeaveGroup()",
        "retail": true
      }
    ],
    "OnEnterCombat": [
      {
        "name": "OnEnterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener.OnEnterCombat()",
        "retail": true
      }
    ],
    "UnitIsGroupAssistant": [
      {
        "name": "UnitIsGroupAssistant",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (UnitIsGroupAssistant(\"player\")) then",
        "retail": true
      }
    ],
    "OnLeaveCombat": [
      {
        "name": "OnLeaveCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener.OnLeaveCombat()",
        "retail": true
      },
      {
        "name": "UnitInfoManager.OnLeaveCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.OnLeaveCombat()",
        "retail": true
      },
      {
        "name": "GearManager.OnLeaveCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.OnLeaveCombat()",
        "retail": true
      }
    ],
    "GetLeaderName": [
      {
        "name": "Details.Coach.Client.GetLeaderName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local raidLeaderName = Details.Coach.Client.GetLeaderName()",
        "retail": true
      }
    ],
    "OnZoneChanged": [
      {
        "name": "OnZoneChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener.OnZoneChanged()",
        "retail": true
      }
    ],
    "SendMyDeath": [
      {
        "name": "Details.Coach.Client.SendMyDeath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Coach.Client.SendMyDeath(_, _, _, _, _, _, playerGUID, _, playerFlag, deathTable)",
        "retail": true
      }
    ],
    "WelcomePanel": [
      {
        "name": "Details.Coach.WelcomePanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Coach.WelcomePanel()",
        "retail": true
      }
    ],
    "CreateImage": [
      {
        "name": "CreateImage",
        "count": 32,
        "confidence": 1.0,
        "sample": "local detailsLogo = DetailsFramework:CreateImage(welcomePanel, [[Interface\\AddOns\\Details\\images\\logotipo]])",
        "retail": true
      }
    ],
    "GetGuildInfo": [
      {
        "name": "GetGuildInfo",
        "count": 17,
        "confidence": 1.0,
        "sample": "local guildName = GetGuildInfo(\"player\")",
        "retail": true
      }
    ],
    "GetRaidRosterInfo": [
      {
        "name": "GetRaidRosterInfo",
        "count": 6,
        "confidence": 1.0,
        "sample": "local name, rank = GetRaidRosterInfo(i)",
        "retail": true
      }
    ],
    "GetPortraitTextureForNpcID": [
      {
        "name": "GetPortraitTextureForNpcID",
        "count": 1,
        "confidence": 0.2,
        "sample": "--@texture: the texture from GetPortraitTextureForNpcID()",
        "retail": true
      },
      {
        "name": "Details222.Textures.GetPortraitTextureForNpcID",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (npcId and not Details222.Textures.GetPortraitTextureForNpcID(npcId)) then",
        "retail": true
      }
    ],
    "FormatPortraitAsTexture": [
      {
        "name": "Details222.Textures.FormatPortraitAsTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.Textures.FormatPortraitAsTexture(texture, fromTexture)",
        "retail": true
      }
    ],
    "SavePortraitTextureForUnitID": [
      {
        "name": "Details222.Textures.SavePortraitTextureForUnitID",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details222.Textures.SavePortraitTextureForUnitID(unitId)",
        "retail": true
      }
    ],
    "TestBarsUpdate": [
      {
        "name": "TestBarsUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:TestBarsUpdate()",
        "retail": true
      }
    ],
    "StartTestBarUpdate": [
      {
        "name": "StartTestBarUpdate",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:StartTestBarUpdate()",
        "retail": true
      }
    ],
    "CreateTestBars": [
      {
        "name": "CreateTestBars",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:CreateTestBars (alphabet, isArena)",
        "retail": true
      },
      {
        "name": "Details.CreateTestBars",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.CreateTestBars()",
        "retail": true
      }
    ],
    "PegarCombatente": [
      {
        "name": "PegarCombatente",
        "count": 38,
        "confidence": 1.0,
        "sample": "local robot = current_combat[1]:PegarCombatente (\"0x0000-0000-0000\", who[1], 0x114, true)",
        "retail": true
      }
    ],
    "PegaHabilidade": [
      {
        "name": "PegaHabilidade",
        "count": 45,
        "confidence": 1.0,
        "sample": "robot.spells:PegaHabilidade (56488, true, \"SPELL_DAMAGE\")",
        "retail": true
      }
    ],
    "InstanceReset": [
      {
        "name": "InstanceReset",
        "count": 22,
        "confidence": 1.0,
        "sample": "instance:InstanceReset()",
        "retail": true
      }
    ],
    "UnitAuraBySpellName": [
      {
        "name": "UnitAuraBySpellName",
        "count": 1,
        "confidence": 0.2,
        "sample": "if UnitAuraBySpellName(unitId, spellName) then",
        "retail": true
      }
    ],
    "ExpansionHasAugEvoker": [
      {
        "name": "ExpansionHasAugEvoker",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not detailsFramework.ExpansionHasAugEvoker()) then",
        "retail": true
      },
      {
        "name": "DF.ExpansionHasAugEvoker",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.ExpansionHasAugEvoker()",
        "retail": true
      }
    ],
    "FindUnitIDByUnitSerial": [
      {
        "name": "FindUnitIDByUnitSerial",
        "count": 2,
        "confidence": 0.4,
        "sample": "local unitIDAffected = Details:FindUnitIDByUnitSerial(targetSerial)",
        "retail": true
      }
    ],
    "FindDebuffDuration": [
      {
        "name": "FindDebuffDuration",
        "count": 3,
        "confidence": 0.6,
        "sample": "local duration, expirationTime = Details:FindDebuffDuration(unitIDAffected, spellId, Details:Ambiguate(sourceName))",
        "retail": true
      }
    ],
    "RecompileAutoRunCode": [
      {
        "name": "Details222.AutoRunCode.RecompileAutoRunCode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.AutoRunCode.RecompileAutoRunCode()",
        "retail": true
      }
    ],
    "IsInMythicPlus": [
      {
        "name": "IsInMythicPlus",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsInMythicPlus()",
        "retail": true
      }
    ],
    "FindAura": [
      {
        "name": "AuraUtil.FindAura",
        "count": 4,
        "confidence": 0.8,
        "sample": "local name, texture, count, debuffType, duration, expirationTime = AuraUtil.FindAura(predicateFunc, unitId, \"HARMFUL\", spellId, casterName)",
        "retail": true
      }
    ],
    "FindDebuffDurationByUnitName": [
      {
        "name": "FindDebuffDurationByUnitName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FindDebuffDurationByUnitName(targetString, spellId, casterString)",
        "retail": true
      }
    ],
    "FindBuffDuration": [
      {
        "name": "FindBuffDuration",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:FindBuffDuration(unitId, spellId, casterName) --not called anywhere else except the function below",
        "retail": true
      },
      {
        "name": "AuraTracker.FindBuffDuration",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.AuraTracker.FindBuffDuration(unitId, casterName, spellId)",
        "retail": true
      }
    ],
    "FindBuffDurationByUnitName": [
      {
        "name": "FindBuffDurationByUnitName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FindBuffDurationByUnitName(targetString, spellId, casterString)",
        "retail": true
      },
      {
        "name": "AuraTracker.FindBuffDurationByUnitName",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.AuraTracker.FindBuffDurationByUnitName(targetString, casterString, spellId)",
        "retail": true
      }
    ],
    "FindBuffCastedBy": [
      {
        "name": "FindBuffCastedBy",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:FindBuffCastedBy(unitId, buffSpellId, casterName) --not called anywhere else except the function below",
        "retail": true
      }
    ],
    "GetRaidLeader": [
      {
        "name": "GetRaidLeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetRaidLeader()",
        "retail": true
      }
    ],
    "UnpackDeathTable": [
      {
        "name": "UnpackDeathTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:UnpackDeathTable(deathTable)",
        "retail": true
      }
    ],
    "UnpackDeathEvent": [
      {
        "name": "UnpackDeathEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UnpackDeathEvent(deathEvent)",
        "retail": true
      }
    ],
    "LowerizeKeys": [
      {
        "name": "LowerizeKeys",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:LowerizeKeys (_table)",
        "retail": true
      }
    ],
    "UseEastAsianNumericalSystem": [
      {
        "name": "UseEastAsianNumericalSystem",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:UseEastAsianNumericalSystem()",
        "retail": true
      }
    ],
    "SetNumericalSystemOverride": [
      {
        "name": "SetNumericalSystemOverride",
        "count": 2,
        "confidence": 0.4,
        "sample": "--usage: _detalhes:SetNumericalSystemOverride (language)  language can be:  \"kr\", \"cn\", \"tw\"",
        "retail": true
      }
    ],
    "ToK0": [
      {
        "name": "ToK0",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ToK0 (numero)",
        "retail": true
      }
    ],
    "ToKMin": [
      {
        "name": "ToKMin",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:ToKMin (numero)",
        "retail": true
      }
    ],
    "ToK2Min": [
      {
        "name": "ToK2Min",
        "count": 22,
        "confidence": 1.0,
        "sample": "function Details:ToK2Min (numero)",
        "retail": true
      }
    ],
    "ToK0Min": [
      {
        "name": "ToK0Min",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ToK0Min (numero)",
        "retail": true
      }
    ],
    "ToKReport": [
      {
        "name": "ToKReport",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:ToKReport (numero)",
        "retail": true
      }
    ],
    "NoToK": [
      {
        "name": "NoToK",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:NoToK (numero)",
        "retail": true
      }
    ],
    "UseWestNumericalSystem": [
      {
        "name": "UseWestNumericalSystem",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:UseWestNumericalSystem()",
        "retail": true
      }
    ],
    "SelectNumericalSystem": [
      {
        "name": "SelectNumericalSystem",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:SelectNumericalSystem()",
        "retail": true
      }
    ],
    "GetNumericalSystem": [
      {
        "name": "GetNumericalSystem",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetNumericalSystem()",
        "retail": true
      }
    ],
    "UpdateToKFunctions": [
      {
        "name": "UpdateToKFunctions",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:UpdateToKFunctions()",
        "retail": true
      }
    ],
    "GetFontSize": [
      {
        "name": "GetFontSize",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetFontSize (fontString)",
        "retail": true
      }
    ],
    "GetFontFace": [
      {
        "name": "GetFontFace",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetFontFace (fontString)",
        "retail": true
      }
    ],
    "SetFontOutline": [
      {
        "name": "SetFontOutline",
        "count": 39,
        "confidence": 1.0,
        "sample": "function Details:SetFontOutline (fontString, outline)",
        "retail": true
      }
    ],
    "UseOutline": [
      {
        "name": "UseOutline",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UseOutline (outline)",
        "retail": true
      }
    ],
    "RefreshBars": [
      {
        "name": "RefreshBars",
        "count": 9,
        "confidence": 1.0,
        "sample": "instance:RefreshBars()",
        "retail": true
      }
    ],
    "HealthTick": [
      {
        "name": "HealthTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:HealthTick()",
        "retail": true
      }
    ],
    "PlayerHealthTick": [
      {
        "name": "PlayerHealthTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:PlayerHealthTick()",
        "retail": true
      }
    ],
    "FindGUIDFromName": [
      {
        "name": "FindGUIDFromName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FindGUIDFromName (name) --deprecated? couldn't find any usage at november 2023",
        "retail": true
      }
    ],
    "GradientEffect": [
      {
        "name": "GradientEffect",
        "count": 11,
        "confidence": 1.0,
        "sample": "gump:GradientEffect ( barra.textura, \"texture\", red, green, blue, alpha, grayscale, grayscale, grayscale, alpha, 1)",
        "retail": true
      }
    ],
    "SetEndDelay": [
      {
        "name": "SetEndDelay",
        "count": 24,
        "confidence": 1.0,
        "sample": "fadeIn:SetEndDelay (flashInHoldTime or 0)",
        "retail": true
      }
    ],
    "CreateFlashAnimation": [
      {
        "name": "CreateFlashAnimation",
        "count": 11,
        "confidence": 1.0,
        "sample": "function gump:CreateFlashAnimation (frame, onFinishFunc, onLoopFunc)",
        "retail": true
      }
    ],
    "SetOrder": [
      {
        "name": "SetOrder",
        "count": 35,
        "confidence": 1.0,
        "sample": "FlashAnimation.fadeOut:SetOrder (1)",
        "retail": true
      }
    ],
    "AddCustomIconSet": [
      {
        "name": "AddCustomIconSet",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:AddCustomIconSet(path, dropdownLabel, isSpecIcons, dropdownIcon, dropdownIconTexCoords, dropdownIconSize, dropdownIconColor)",
        "retail": true
      }
    ],
    "IsDragonflight": [
      {
        "name": "DetailsFramework.IsDragonflight",
        "count": 2,
        "confidence": 0.4,
        "sample": "elseif (DetailsFramework.IsDragonflight()) then",
        "retail": true
      },
      {
        "name": "DF.IsDragonflight",
        "count": 4,
        "confidence": 0.8,
        "sample": "local isDragonflight = DF.IsDragonflight()",
        "retail": true
      },
      {
        "name": "IsDragonflight",
        "count": 3,
        "confidence": 0.6,
        "sample": "--if (IsDragonflight()) then",
        "retail": true
      }
    ],
    "Typhoon": [
      {
        "name": "Typhoon",
        "count": 5,
        "confidence": 1.0,
        "sample": "[50516]\t\t\t= \t102, -- Typhoon (rank 1)",
        "retail": true
      }
    ],
    "Starfall": [
      {
        "name": "Starfall",
        "count": 4,
        "confidence": 0.8,
        "sample": "[48505] \t\t=\t102, -- Starfall (rank 1)",
        "retail": true
      }
    ],
    "Bear": [
      {
        "name": "Bear",
        "count": 5,
        "confidence": 1.0,
        "sample": "[33878] \t\t= \t104, -- Mangle Bear (rank 1)",
        "retail": true
      }
    ],
    "Growth": [
      {
        "name": "Growth",
        "count": 4,
        "confidence": 0.8,
        "sample": "[48438]\t\t\t=\t105, -- Wild Growth (rank 1)",
        "retail": true
      }
    ],
    "Sting": [
      {
        "name": "Sting",
        "count": 6,
        "confidence": 1.0,
        "sample": "[19386]\t\t\t=\t255, -- Wyvern Sting (rank 1)",
        "retail": true
      }
    ],
    "Arrow": [
      {
        "name": "Arrow",
        "count": 6,
        "confidence": 1.0,
        "sample": "[3674]\t\t\t= \t255, -- Black Arrow (rank 1)",
        "retail": true
      }
    ],
    "Shot": [
      {
        "name": "Shot",
        "count": 26,
        "confidence": 1.0,
        "sample": "[53301]\t\t\t=\t255, -- Explosive Shot (rank 1)",
        "retail": true
      }
    ],
    "Barrage": [
      {
        "name": "Barrage",
        "count": 5,
        "confidence": 1.0,
        "sample": "[44425]\t\t\t=\t62, -- Arcane Barrage (rank 1)",
        "retail": true
      }
    ],
    "Breath": [
      {
        "name": "Breath",
        "count": 6,
        "confidence": 1.0,
        "sample": "[31661]\t\t\t=\t63, -- Dragon's Breath (rank 1)",
        "retail": true
      }
    ],
    "Shield": [
      {
        "name": "Shield",
        "count": 20,
        "confidence": 1.0,
        "sample": "[20925]\t\t\t=\t66, -- Holy Shield (rank 1)",
        "retail": true
      }
    ],
    "Penance": [
      {
        "name": "Penance",
        "count": 4,
        "confidence": 0.8,
        "sample": "[47540]\t\t\t=\t256, -- Penance (rank 1)",
        "retail": true
      }
    ],
    "Lightwell": [
      {
        "name": "Lightwell",
        "count": 6,
        "confidence": 1.0,
        "sample": "[724]\t\t\t=\t257, -- Lightwell (rank 1)",
        "retail": true
      }
    ],
    "Healing": [
      {
        "name": "Healing",
        "count": 8,
        "confidence": 1.0,
        "sample": "[34861]\t\t\t=\t257, -- Circle of Healing (rank 1)",
        "retail": true
      }
    ],
    "Touch": [
      {
        "name": "Touch",
        "count": 5,
        "confidence": 1.0,
        "sample": "[34914]\t\t\t=\t258, -- Vampiric Touch (rank 1)",
        "retail": true
      }
    ],
    "Mutilate": [
      {
        "name": "Mutilate",
        "count": 6,
        "confidence": 1.0,
        "sample": "[1329]\t\t\t=\t259, -- Mutilate (rank 1)",
        "retail": true
      }
    ],
    "Tables": [
      {
        "name": "Tables",
        "count": 3,
        "confidence": 0.6,
        "sample": "[52914]\t\t\t=\t259, -- Turn the Tables (rank 1)",
        "retail": true
      }
    ],
    "Rogue": [
      {
        "name": "Rogue",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- Combat Rogue (Outlaw Rogue):",
        "retail": true
      }
    ],
    "Wrath": [
      {
        "name": "Wrath",
        "count": 6,
        "confidence": 1.0,
        "sample": "[30706]\t\t\t=\t262, -- Totem of Wrath (rank 1)",
        "retail": true
      }
    ],
    "Thunderstorm": [
      {
        "name": "Thunderstorm",
        "count": 4,
        "confidence": 0.8,
        "sample": "[51490]\t\t\t=\t262, -- Thunderstorm (rank 1)",
        "retail": true
      }
    ],
    "Riptide": [
      {
        "name": "Riptide",
        "count": 4,
        "confidence": 0.8,
        "sample": "[61295]\t\t\t=\t264, -- Riptide (rank 1)",
        "retail": true
      }
    ],
    "Pact": [
      {
        "name": "Pact",
        "count": 23,
        "confidence": 1.0,
        "sample": "[18220]\t\t\t=\t265, -- Dark Pact (rank 1)",
        "retail": true
      }
    ],
    "Haunt": [
      {
        "name": "Haunt",
        "count": 4,
        "confidence": 0.8,
        "sample": "[48181]\t\t\t=\t265, -- Haunt (rank 1)",
        "retail": true
      }
    ],
    "Decimation": [
      {
        "name": "Decimation",
        "count": 2,
        "confidence": 0.4,
        "sample": "[63165]\t\t\t=\t266, -- Decimation (rank 1)",
        "retail": true
      }
    ],
    "Shadowfury": [
      {
        "name": "Shadowfury",
        "count": 5,
        "confidence": 1.0,
        "sample": "[30283]\t\t\t=\t267, -- Shadowfury (rank 1)",
        "retail": true
      }
    ],
    "Trauma": [
      {
        "name": "Trauma",
        "count": 2,
        "confidence": 0.4,
        "sample": "[46856]\t\t\t=\t71, -- Trauma (rank 1)",
        "retail": true
      }
    ],
    "Devastate": [
      {
        "name": "Devastate",
        "count": 5,
        "confidence": 1.0,
        "sample": "[20243]\t\t\t=\t73, -- Devastate (rank 1)",
        "retail": true
      }
    ],
    "Might": [
      {
        "name": "Might",
        "count": 4,
        "confidence": 0.8,
        "sample": "[53137]\t\t\t=\t250, -- Abomination's Might (rank 1)",
        "retail": true
      }
    ],
    "Blast": [
      {
        "name": "Blast",
        "count": 4,
        "confidence": 0.8,
        "sample": "[49184]\t\t\t=\t251, -- Howling Blast (rank 1)",
        "retail": true
      }
    ],
    "Desolation": [
      {
        "name": "Desolation",
        "count": 5,
        "confidence": 1.0,
        "sample": "[63583]\t\t\t=\t252, -- Desolation (rank 1)",
        "retail": true
      }
    ],
    "Plague": [
      {
        "name": "Plague",
        "count": 3,
        "confidence": 0.6,
        "sample": "[51726]\t\t\t=\t252, -- Ebon Plague (rank 1)",
        "retail": true
      }
    ],
    "Strength": [
      {
        "name": "Strength",
        "count": 9,
        "confidence": 1.0,
        "sample": "[53365]\t=\t\"DEATHKNIGHT\", --Unholy Strength (heal)",
        "retail": true
      }
    ],
    "Shell": [
      {
        "name": "Shell",
        "count": 9,
        "confidence": 1.0,
        "sample": "[48707]\t=\t\"DEATHKNIGHT\", -- Anti-Magic Shell (heal)",
        "retail": true
      }
    ],
    "Rejuvenation": [
      {
        "name": "Rejuvenation",
        "count": 1,
        "confidence": 0.2,
        "sample": "[155777]\t=\t\"DRUID\", -- \"Rejuvenation (Germination)\"",
        "retail": true
      }
    ],
    "Flay": [
      {
        "name": "Flay",
        "count": 2,
        "confidence": 0.4,
        "sample": "[129197]\t=\t\"PRIEST\", -- Mind Flay (Insanity)",
        "retail": true
      }
    ],
    "Recuperate": [
      {
        "name": "Recuperate",
        "count": 2,
        "confidence": 0.4,
        "sample": "[73651]\t=\t\"ROGUE\", --Recuperate (heal)",
        "retail": true
      }
    ],
    "Aegis": [
      {
        "name": "Aegis",
        "count": 1,
        "confidence": 0.2,
        "sample": "[47753]\t=\ttrue,  --Divine Aegis (discipline)",
        "retail": true
      }
    ],
    "Will": [
      {
        "name": "Will",
        "count": 1,
        "confidence": 0.2,
        "sample": "[152118]\t=\ttrue,  --Clarity of Will (talent)",
        "retail": true
      }
    ],
    "Cocoon": [
      {
        "name": "Cocoon",
        "count": 1,
        "confidence": 0.2,
        "sample": "[116849]\t=\ttrue, --Life Cocoon (mistweaver)",
        "retail": true
      }
    ],
    "Guard": [
      {
        "name": "Guard",
        "count": 2,
        "confidence": 0.4,
        "sample": "[115295]\t=\ttrue, --Guard (brewmaster)",
        "retail": true
      }
    ],
    "Leech": [
      {
        "name": "Leech",
        "count": 2,
        "confidence": 0.4,
        "sample": "[108366]\t=\ttrue, --Soul Leech (talent)",
        "retail": true
      }
    ],
    "Ward": [
      {
        "name": "Ward",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1463]\t=\ttrue, --Incanter's Ward (talent)",
        "retail": true
      }
    ],
    "Winter": [
      {
        "name": "Winter",
        "count": 1,
        "confidence": 0.2,
        "sample": "[57330]\t=\ttrue, -- Horn of Winter (buff)",
        "retail": true
      }
    ],
    "Advance": [
      {
        "name": "Advance",
        "count": 1,
        "confidence": 0.2,
        "sample": "[96268]\t=\ttrue, -- Death's Advance (walk faster)",
        "retail": true
      }
    ],
    "Swiftness": [
      {
        "name": "Swiftness",
        "count": 1,
        "confidence": 0.2,
        "sample": "[132158]\t=\t true, -- Nature's Swiftness (misc)",
        "retail": true
      }
    ],
    "Wild": [
      {
        "name": "Wild",
        "count": 11,
        "confidence": 1.0,
        "sample": "[1126]\t=\t true, -- Mark of the Wild (buff)",
        "retail": true
      }
    ],
    "Roll": [
      {
        "name": "Roll",
        "count": 1,
        "confidence": 0.2,
        "sample": "[109132]\t=\ttrue, -- Roll (neutral)",
        "retail": true
      }
    ],
    "Speed": [
      {
        "name": "Speed",
        "count": 1,
        "confidence": 0.2,
        "sample": "[108212]\t=\ttrue, -- Burst of Speed (misc)",
        "retail": true
      }
    ],
    "Elements": [
      {
        "name": "Elements",
        "count": 1,
        "confidence": 0.2,
        "sample": "[73680]\t=\ttrue, -- Unleash Elements (misc)",
        "retail": true
      }
    ],
    "Frenzy": [
      {
        "name": "Frenzy",
        "count": 1,
        "confidence": 0.2,
        "sample": "--[49016]\t=\ttrue, -- Unholy Frenzy (attack cd)",
        "retail": true
      }
    ],
    "Gargoyle": [
      {
        "name": "Gargoyle",
        "count": 7,
        "confidence": 1.0,
        "sample": "[49206]\t=\ttrue, -- Summon Gargoyle (attack cd)",
        "retail": true
      }
    ],
    "Weapon": [
      {
        "name": "Weapon",
        "count": 1,
        "confidence": 0.2,
        "sample": "[49028]\t=\ttrue, -- Dancing Rune Weapon (attack cd)",
        "retail": true
      }
    ],
    "Transformation": [
      {
        "name": "Transformation",
        "count": 1,
        "confidence": 0.2,
        "sample": "[63560]\t=\ttrue, -- Dark Transformation (pet)",
        "retail": true
      }
    ],
    "Berserk": [
      {
        "name": "Berserk",
        "count": 1,
        "confidence": 0.2,
        "sample": "[106951]\t=\t true, -- Berserk (attack cd)",
        "retail": true
      }
    ],
    "Vigil": [
      {
        "name": "Vigil",
        "count": 1,
        "confidence": 0.2,
        "sample": "[124974]\t=\t true, -- Nature's Vigil (attack cd)",
        "retail": true
      }
    ],
    "Crows": [
      {
        "name": "Crows",
        "count": 1,
        "confidence": 0.2,
        "sample": "[131894]\t=\ttrue,-- A Murder of Crows (attack cd)",
        "retail": true
      }
    ],
    "Stampede": [
      {
        "name": "Stampede",
        "count": 7,
        "confidence": 1.0,
        "sample": "[121818]\t=\ttrue,-- Stampede (attack cd)",
        "retail": true
      }
    ],
    "Brew": [
      {
        "name": "Brew",
        "count": 1,
        "confidence": 0.2,
        "sample": "[116740]\t=\ttrue, -- Tigereye Brew (attack cd?)",
        "retail": true
      }
    ],
    "Rush": [
      {
        "name": "Rush",
        "count": 4,
        "confidence": 0.8,
        "sample": "[13750]\t=\ttrue, -- Adrenaline Rush (attack cd)",
        "retail": true
      }
    ],
    "Misery": [
      {
        "name": "Misery",
        "count": 7,
        "confidence": 1.0,
        "sample": "[113860]\t=\ttrue, -- Dark Soul: Misery (attack cd)",
        "retail": true
      }
    ],
    "Recklessness": [
      {
        "name": "Recklessness",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1719]\t=\ttrue, -- Recklessness (attack cd)",
        "retail": true
      }
    ],
    "Conversion": [
      {
        "name": "Conversion",
        "count": 1,
        "confidence": 0.2,
        "sample": "[119975]\t=\ttrue, -- Conversion (heal)",
        "retail": true
      }
    ],
    "Swiftmend": [
      {
        "name": "Swiftmend",
        "count": 1,
        "confidence": 0.2,
        "sample": "[18562]\t=\t true, --Swiftmend (heal)",
        "retail": true
      }
    ],
    "Lifebloom": [
      {
        "name": "Lifebloom",
        "count": 1,
        "confidence": 0.2,
        "sample": "[33763]\t=\t true, -- Lifebloom (heal)",
        "retail": true
      }
    ],
    "Exhilaration": [
      {
        "name": "Exhilaration",
        "count": 1,
        "confidence": 0.2,
        "sample": "[109304]\t=\ttrue,-- Exhilaration (heal)",
        "retail": true
      }
    ],
    "Mist": [
      {
        "name": "Mist",
        "count": 1,
        "confidence": 0.2,
        "sample": "[124682]\t=\ttrue, -- Enveloping Mist (helpful)",
        "retail": true
      }
    ],
    "Glory": [
      {
        "name": "Glory",
        "count": 7,
        "confidence": 1.0,
        "sample": "[85673]\t=\ttrue,-- Word of Glory (heal)",
        "retail": true
      }
    ],
    "Feint": [
      {
        "name": "Feint",
        "count": 1,
        "confidence": 0.2,
        "sample": "[1966]\t=\ttrue, -- Feint (helpful)",
        "retail": true
      }
    ],
    "Regeneration": [
      {
        "name": "Regeneration",
        "count": 1,
        "confidence": 0.2,
        "sample": "[108359]\t=\ttrue, -- Dark Regeneration (helpful)",
        "retail": true
      }
    ],
    "GetSpellSchool": [
      {
        "name": "GetSpellSchool",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetSpellSchool(spellID)",
        "retail": true
      }
    ],
    "GetSpellSchoolName": [
      {
        "name": "GetSpellSchoolName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetSpellSchoolName(school)",
        "retail": true
      }
    ],
    "GetSpellSchoolFormatedName": [
      {
        "name": "GetSpellSchoolFormatedName",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:GetSpellSchoolFormatedName(school)",
        "retail": true
      }
    ],
    "GetSpellSchoolColor": [
      {
        "name": "GetSpellSchoolColor",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:GetSpellSchoolColor(school)",
        "retail": true
      }
    ],
    "GetCooldownList": [
      {
        "name": "GetCooldownList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetCooldownList(class)",
        "retail": true
      }
    ],
    "PackCombatData": [
      {
        "name": "PackCombatData",
        "count": 4,
        "confidence": 0.8,
        "sample": "local packedData = Details.packFunctions.PackCombatData(combat, 0x1B)",
        "retail": true
      }
    ],
    "GetAllDataDebug": [
      {
        "name": "GetAllDataDebug",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.packFunctions.GetAllDataDebug()",
        "retail": true
      }
    ],
    "PackDamage": [
      {
        "name": "PackDamage",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details.packFunctions.PackDamage(combatObject)",
        "retail": true
      }
    ],
    "PackHeal": [
      {
        "name": "PackHeal",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details.packFunctions.PackHeal(combatObject)",
        "retail": true
      }
    ],
    "PackUtility": [
      {
        "name": "PackUtility",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details.packFunctions.PackUtility(combatObject)",
        "retail": true
      }
    ],
    "WowAddonChannel": [
      {
        "name": "WowAddonChannel",
        "count": 1,
        "confidence": 0.2,
        "sample": "--print(\"encoded for WowAddonChannel (debug):\", format(\"%.2f\", #dataEncoded/1024), \"KBytes\")",
        "retail": true
      }
    ],
    "GenerateSerialNumber": [
      {
        "name": "GenerateSerialNumber",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.packFunctions.GenerateSerialNumber()",
        "retail": true
      }
    ],
    "C12345": [
      {
        "name": "C12345",
        "count": 1,
        "confidence": 0.2,
        "sample": "creature: C12345 (numbers are the npcId)",
        "retail": true
      }
    ],
    "AddActorInformation": [
      {
        "name": "AddActorInformation",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.packFunctions.AddActorInformation(actor)",
        "retail": true
      }
    ],
    "RetriveActorInformation": [
      {
        "name": "RetriveActorInformation",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.packFunctions.RetriveActorInformation(combatData, index)",
        "retail": true
      }
    ],
    "CountTableEntriesValid": [
      {
        "name": "CountTableEntriesValid",
        "count": 11,
        "confidence": 1.0,
        "sample": "local targetsSize = Details.packFunctions.CountTableEntriesValid(spellTargets) * 2",
        "retail": true
      }
    ],
    "UnPackDamage": [
      {
        "name": "UnPackDamage",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details.packFunctions.UnPackDamage(currentCombat, combatData, tablePosition)",
        "retail": true
      }
    ],
    "UnpackTable": [
      {
        "name": "UnpackTable",
        "count": 20,
        "confidence": 1.0,
        "sample": "local targetTable = Details.packFunctions.UnpackTable(combatData, spellIndex+3, true)",
        "retail": true
      }
    ],
    "UnPackHeal": [
      {
        "name": "UnPackHeal",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details.packFunctions.UnPackHeal(currentCombat, combatData, tablePosition)",
        "retail": true
      }
    ],
    "UnPackUtility": [
      {
        "name": "UnPackUtility",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details.packFunctions.UnPackUtility(currentCombat, combatData, tablePosition)",
        "retail": true
      }
    ],
    "UnPackUtiliyu": [
      {
        "name": "UnPackUtiliyu",
        "count": 1,
        "confidence": 0.2,
        "sample": "print(\"UnPackUtiliyu(): break | Utility loop has been stopped\", \"index:\", i, \"tablePosition:\", tablePosition, \"value:\", combatData[tablePosition])",
        "retail": true
      }
    ],
    "NovoContainer": [
      {
        "name": "NovoContainer",
        "count": 43,
        "confidence": 1.0,
        "sample": "actorObject.cooldowns_defensive_spells = Details.container_habilidades:NovoContainer(Details.container_type.CONTAINER_MISC_CLASS)",
        "retail": true
      }
    ],
    "CountTableEntries": [
      {
        "name": "CountTableEntries",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.packFunctions.CountTableEntries(hasTable)",
        "retail": true
      }
    ],
    "QuickDispatchEvent": [
      {
        "name": "QuickDispatchEvent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:QuickDispatchEvent(func, event, ...)",
        "retail": true
      }
    ],
    "QuickDispatchEventWithContext": [
      {
        "name": "QuickDispatchEventWithContext",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:QuickDispatchEventWithContext(context, func, event, ...)",
        "retail": true
      }
    ],
    "IsRegistred": [
      {
        "name": "IsRegistred",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.Buffs:IsRegistred (buff)",
        "retail": true
      }
    ],
    "NewBuff": [
      {
        "name": "NewBuff",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes.Buffs:NewBuff (BuffName, BuffId)",
        "retail": true
      }
    ],
    "BuildBuffTable": [
      {
        "name": "BuildBuffTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "_detalhes.Buffs.BuffsTable [BuffName] = _detalhes.Buffs:BuildBuffTable (BuffName, BuffId)",
        "retail": true
      }
    ],
    "RemoveBuff": [
      {
        "name": "RemoveBuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.Buffs:RemoveBuff (BuffName)",
        "retail": true
      }
    ],
    "GetBuffList": [
      {
        "name": "GetBuffList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.Buffs:GetBuffList()",
        "retail": true
      }
    ],
    "GetBuffListIds": [
      {
        "name": "GetBuffListIds",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes.Buffs:GetBuffListIds()",
        "retail": true
      }
    ],
    "UpdateBuff": [
      {
        "name": "UpdateBuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.Buffs:UpdateBuff (method)",
        "retail": true
      }
    ],
    "SaveBuffs": [
      {
        "name": "SaveBuffs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.Buffs:SaveBuffs()",
        "retail": true
      }
    ],
    "CheckIfCanEnableImmersion": [
      {
        "name": "CheckIfCanEnableImmersion",
        "count": 3,
        "confidence": 0.6,
        "sample": "function immersionFrame.CheckIfCanEnableImmersion()",
        "retail": true
      }
    ],
    "IsNpcInteresting": [
      {
        "name": "Details.Immersion.IsNpcInteresting",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Immersion.IsNpcInteresting(aID)",
        "retail": true
      }
    ],
    "OpenEncounterBreakdown": [
      {
        "name": "OpenEncounterBreakdown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsOnDeathMenu.OpenEncounterBreakdown()",
        "retail": true
      }
    ],
    "OpenPlayerEndurance": [
      {
        "name": "OpenPlayerEndurance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsOnDeathMenu.OpenPlayerEndurance()",
        "retail": true
      }
    ],
    "OpenPlayerSpells": [
      {
        "name": "OpenPlayerSpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsOnDeathMenu.OpenPlayerSpells()",
        "retail": true
      }
    ],
    "CoolTipInject": [
      {
        "name": "CoolTipInject",
        "count": 7,
        "confidence": 1.0,
        "sample": "GameCooltip2:CoolTipInject (detailsOnDeathMenu.breakdownButton)",
        "retail": true
      }
    ],
    "CanShowPanel": [
      {
        "name": "CanShowPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsOnDeathMenu.CanShowPanel()",
        "retail": true
      }
    ],
    "StaticPopup_Visible": [
      {
        "name": "StaticPopup_Visible",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (StaticPopup_Visible (\"DEATH\")) then",
        "retail": true
      }
    ],
    "ShowPanel": [
      {
        "name": "ShowPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsOnDeathMenu.ShowPanel()",
        "retail": true
      }
    ],
    "InstallRowAnimation": [
      {
        "name": "InstallRowAnimation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:InstallRowAnimation (name, desc, func, options)",
        "retail": true
      }
    ],
    "SelectRowAnimation": [
      {
        "name": "SelectRowAnimation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:SelectRowAnimation (name)",
        "retail": true
      }
    ],
    "GetRowAnimationList": [
      {
        "name": "GetRowAnimationList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:GetRowAnimationList()",
        "retail": true
      }
    ],
    "PLAYEDCLASS": [
      {
        "name": "SlashCmdList.PLAYEDCLASS",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.PLAYEDCLASS(msg, editbox)",
        "retail": true
      }
    ],
    "DUMPTABLE": [
      {
        "name": "SlashCmdList.DUMPTABLE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.DUMPTABLE(msg, editbox)",
        "retail": true
      }
    ],
    "DETAILS": [
      {
        "name": "SlashCmdList.DETAILS",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.DETAILS (msg, editbox)",
        "retail": true
      }
    ],
    "OpenRaidHistoryWindow": [
      {
        "name": "OpenRaidHistoryWindow",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:OpenRaidHistoryWindow()",
        "retail": true
      }
    ],
    "ToggleWindow": [
      {
        "name": "ToggleWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:ToggleWindow (instance)",
        "retail": true
      }
    ],
    "SplitTextInLines": [
      {
        "name": "SplitTextInLines",
        "count": 4,
        "confidence": 0.8,
        "sample": "local callStackTable = detailsFramework:SplitTextInLines(callStack)",
        "retail": true
      }
    ],
    "EnableInstance": [
      {
        "name": "EnableInstance",
        "count": 3,
        "confidence": 0.6,
        "sample": "instanceObject:EnableInstance()",
        "retail": true
      }
    ],
    "WipeConfig": [
      {
        "name": "WipeConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:WipeConfig()",
        "retail": true
      }
    ],
    "OpenForge": [
      {
        "name": "Details.OpenForge",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.OpenForge()",
        "retail": true
      },
      {
        "name": "OpenForge",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:OpenForge()",
        "retail": true
      }
    ],
    "SelectModule": [
      {
        "name": "DetailsForgePanel.SelectModule",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsForgePanel.SelectModule (_, _, 4)",
        "retail": true
      }
    ],
    "CreateAnimationHub": [
      {
        "name": "CreateAnimationHub",
        "count": 43,
        "confidence": 1.0,
        "sample": "local A = detailsFramework:CreateAnimationHub (texture)",
        "retail": true
      }
    ],
    "LoadAddOn": [
      {
        "name": "LoadAddOn",
        "count": 3,
        "confidence": 0.6,
        "sample": "local loaded, reason = LoadAddOn (\"Details_DataStorage\")",
        "retail": true
      },
      {
        "name": "C_AddOns.LoadAddOn",
        "count": 9,
        "confidence": 1.0,
        "sample": "local loaded, reason = C_AddOns.LoadAddOn(CONST_ADDONNAME_DATASTORAGE)",
        "retail": true
      }
    ],
    "DebugPets": [
      {
        "name": "Details.DebugPets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.DebugPets()",
        "retail": true
      }
    ],
    "DebugMyPets": [
      {
        "name": "Details.DebugMyPets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.DebugMyPets()",
        "retail": true
      }
    ],
    "ImageEditor": [
      {
        "name": "ImageEditor",
        "count": 12,
        "confidence": 1.0,
        "sample": "Details.gump:ImageEditor (callback, \"Interface\\\\TALENTFRAME\\\\bg-paladin-holy\", nil, {1, 1, 1, 1}) -- {0.25, 0.25, 0.25, 0.25}",
        "retail": true
      }
    ],
    "FCF_GetChatWindowInfo": [
      {
        "name": "FCF_GetChatWindowInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local name, fontSize, r, g, b, a, shown, locked = FCF_GetChatWindowInfo (1);",
        "retail": true
      }
    ],
    "GetBackdropBorderColor": [
      {
        "name": "GetBackdropBorderColor",
        "count": 9,
        "confidence": 1.0,
        "sample": "print(\"bordercolor\",f:GetBackdropBorderColor())",
        "retail": true
      }
    ],
    "RefreshUserList": [
      {
        "name": "Details.RefreshUserList",
        "count": 10,
        "confidence": 1.0,
        "sample": "Details.RefreshUserList()",
        "retail": true
      }
    ],
    "CreateListPanel": [
      {
        "name": "CreateListPanel",
        "count": 3,
        "confidence": 0.6,
        "sample": "f = Details:CreateListPanel()",
        "retail": true
      }
    ],
    "SetMythicPlusDebugState": [
      {
        "name": "Details222.Debug.SetMythicPlusDebugState",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.Debug.SetMythicPlusDebugState() --passing nothing will toggle the debug state",
        "retail": true
      }
    ],
    "SetMythicPlusLootDebugState": [
      {
        "name": "Details222.Debug.SetMythicPlusLootDebugState",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.Debug.SetMythicPlusLootDebugState() --passing nothing will toggle the debug state",
        "retail": true
      }
    ],
    "ShowDebugOptionsPanel": [
      {
        "name": "Details.ShowDebugOptionsPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.ShowDebugOptionsPanel()",
        "retail": true
      }
    ],
    "LoggingCombat": [
      {
        "name": "LoggingCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "LoggingCombat (false)",
        "retail": true
      }
    ],
    "GetBossModule": [
      {
        "name": "GetBossModule",
        "count": 2,
        "confidence": 0.4,
        "sample": "local mod = BigWigs:GetBossModule(\"Imperator Mar'gok\")",
        "retail": true
      }
    ],
    "Message": [
      {
        "name": "Message",
        "count": 1,
        "confidence": 0.2,
        "sample": "mod:Message(\"stages\", \"Neutral\", \"Long\", \"Phase 2\", false)",
        "retail": true
      }
    ],
    "BigWigs_Message": [
      {
        "name": "BigWigs_Message",
        "count": 1,
        "confidence": 0.2,
        "sample": "function addon:BigWigs_Message(event, module, key, text)",
        "retail": true
      }
    ],
    "CreateTextEntry": [
      {
        "name": "CreateTextEntry",
        "count": 75,
        "confidence": 1.0,
        "sample": "Details.gump:CreateTextEntry(UIParent, function()end, 200, 20, nil, \"DetailsPosBox\")",
        "retail": true
      }
    ],
    "GetCoinText": [
      {
        "name": "GetCoinText",
        "count": 1,
        "confidence": 0.2,
        "sample": "print(GetCoinText(c))",
        "retail": true
      }
    ],
    "CreateBar": [
      {
        "name": "CreateBar",
        "count": 9,
        "confidence": 1.0,
        "sample": "bar = Details.gump:CreateBar (UIParent, nil, 600, 200, 100, nil, \"DetailsTestBar\")",
        "retail": true
      }
    ],
    "SetTimer": [
      {
        "name": "SetTimer",
        "count": 8,
        "confidence": 1.0,
        "sample": "bar:SetTimer (start, fim)",
        "retail": true
      }
    ],
    "CancelTimerBar": [
      {
        "name": "CancelTimerBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "--C_Timer.After(5, function() bar:CancelTimerBar() end)",
        "retail": true
      }
    ],
    "ScrollDamage": [
      {
        "name": "ScrollDamage",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ScrollDamage()",
        "retail": true
      }
    ],
    "EJ_SelectInstance": [
      {
        "name": "EncounterJournal.EJ_SelectInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.EncounterJournal.EJ_SelectInstance (1031)",
        "retail": true
      },
      {
        "name": "DetailsFramework.EncounterJournal.EJ_SelectInstance",
        "count": 6,
        "confidence": 1.0,
        "sample": "DetailsFramework.EncounterJournal.EJ_SelectInstance (EJID) --11ms per call",
        "retail": true
      },
      {
        "name": "EJ_SelectInstance",
        "count": 4,
        "confidence": 0.8,
        "sample": "EJ_SelectInstance(raidInstanceID)",
        "retail": true
      }
    ],
    "DumpTable": [
      {
        "name": "DumpTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:DumpTable (result)",
        "retail": true
      }
    ],
    "OpenSurveyPanel": [
      {
        "name": "Details.Survey.OpenSurveyPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Survey.OpenSurveyPanel()",
        "retail": true
      }
    ],
    "UpdateUserPanel": [
      {
        "name": "UpdateUserPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:UpdateUserPanel (newList)",
        "retail": true
      }
    ],
    "CreateHeader": [
      {
        "name": "CreateHeader",
        "count": 21,
        "confidence": 1.0,
        "sample": "DetailsUserPanel.Header = detailsFramework:CreateHeader(DetailsUserPanel, headerTable, headerOptions)",
        "retail": true
      }
    ],
    "AddFrameToHeaderAlignment": [
      {
        "name": "AddFrameToHeaderAlignment",
        "count": 112,
        "confidence": 1.0,
        "sample": "line:AddFrameToHeaderAlignment (userNameText)",
        "retail": true
      }
    ],
    "AlignWithHeader": [
      {
        "name": "AlignWithHeader",
        "count": 20,
        "confidence": 1.0,
        "sample": "line:AlignWithHeader (DetailsUserPanel.Header, \"left\")",
        "retail": true
      }
    ],
    "CreateScrollBox": [
      {
        "name": "CreateScrollBox",
        "count": 33,
        "confidence": 1.0,
        "sample": "local usersScroll = detailsFramework:CreateScrollBox (DetailsUserPanel, \"$parentUsersScroll\", scrollRefresh, DetailsUserPanel.Data, scroll_width, scroll_height, scroll_lines, scroll_line_height)",
        "retail": true
      }
    ],
    "ReskinSlider": [
      {
        "name": "ReskinSlider",
        "count": 49,
        "confidence": 1.0,
        "sample": "detailsFramework:ReskinSlider(usersScroll)",
        "retail": true
      }
    ],
    "CreateLine": [
      {
        "name": "CreateLine",
        "count": 38,
        "confidence": 1.0,
        "sample": "usersScroll:CreateLine (scroll_createline)",
        "retail": true
      }
    ],
    "NewScrollBar": [
      {
        "name": "NewScrollBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details.gump:NewScrollBar (container_barras_window, container_barras, -10, -17)",
        "retail": true
      }
    ],
    "Altura": [
      {
        "name": "Altura",
        "count": 4,
        "confidence": 0.8,
        "sample": "container_barras_window.slider:Altura(550)",
        "retail": true
      }
    ],
    "ReplaceKeystoneCommand": [
      {
        "name": "ReplaceKeystoneCommand",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ReplaceKeystoneCommand(addonObject, memberName, ...)",
        "retail": true
      }
    ],
    "SetMask": [
      {
        "name": "SetMask",
        "count": 11,
        "confidence": 1.0,
        "sample": "detailsFramework:SetMask(teleportButton.Icon, [[Interface\\AddOns\\Details\\images\\masks\\portal_mask.tga]])",
        "retail": true
      }
    ],
    "CreateCastBar": [
      {
        "name": "CreateCastBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "teleportButton.CastBar = detailsFramework:CreateCastBar(teleportButton, \"DetailsMythicPlusKeysCastBar\" .. i, {DontUpdateAlpha=true,FillOnInterrupt=false, NoFadeEffects=true})",
        "retail": true
      }
    ],
    "Keystones": [
      {
        "name": "Keystones",
        "count": 1,
        "confidence": 0.2,
        "sample": "local detailsKeystoneInfoFrame = detailsFramework:CreateSimplePanel(UIParent, CONST_WINDOW_WIDTH, CONST_WINDOW_HEIGHT, \"M+ Keystones (/key, /keys, /keystone)\", \"DetailsKeystoneInfoFrame\")",
        "retail": true
      }
    ],
    "IntegerToCooldownTime": [
      {
        "name": "IntegerToCooldownTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "cooldownBlocker.cooldownText:SetText(detailsFramework:IntegerToCooldownTime((start + duration) - GetTime()) .. \"\\n remaining\")",
        "retail": true
      }
    ],
    "IsSpellInSpellBook": [
      {
        "name": "C_SpellBook.IsSpellInSpellBook",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (C_SpellBook.IsSpellInSpellBook(spellId)) then",
        "retail": true
      }
    ],
    "KEYSTONE": [
      {
        "name": "SlashCmdList.KEYSTONE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.KEYSTONE(msg, editbox)",
        "retail": true
      }
    ],
    "ChatEdit_SendText": [
      {
        "name": "ChatEdit_SendText",
        "count": 2,
        "confidence": 0.4,
        "sample": "--DEFAULT_CHAT_FRAME.editBox:SetText(\"/bwkey\") ChatEdit_SendText(DEFAULT_CHAT_FRAME.editBox, 0)",
        "retail": true
      }
    ],
    "CreateSwitch": [
      {
        "name": "CreateSwitch",
        "count": 20,
        "confidence": 1.0,
        "sample": "local dndCheckbox = detailsFramework:CreateSwitch(f, function(_, _, checked) Details.slashk_dnd = checked; LIB_OPEN_RAID_MYTHIC_PLUS_DND = checked end, Details.slashk_dnd)",
        "retail": true
      }
    ],
    "SetAsCheckBox": [
      {
        "name": "SetAsCheckBox",
        "count": 40,
        "confidence": 1.0,
        "sample": "dndCheckbox:SetAsCheckBox()",
        "retail": true
      }
    ],
    "GetAllCheckboxes": [
      {
        "name": "GetAllCheckboxes",
        "count": 11,
        "confidence": 1.0,
        "sample": "local radioCheckboxes = radioGroup:GetAllCheckboxes()",
        "retail": true
      }
    ],
    "CreateRadioGroup": [
      {
        "name": "CreateRadioGroup",
        "count": 4,
        "confidence": 0.8,
        "sample": "local selectAddonRadioGroup = detailsFramework:CreateRadioGroup(selectAddonFrame, mainTabSelectorRadioOptions, \"$parentSelector\", radioGroupSettings, radioGroupLayout)",
        "retail": true
      }
    ],
    "CreateStatusBar": [
      {
        "name": "CreateStatusBar",
        "count": 9,
        "confidence": 1.0,
        "sample": "local statusBar = detailsFramework:CreateStatusBar(f)",
        "retail": true
      }
    ],
    "GuildRoster": [
      {
        "name": "C_GuildInfo.GuildRoster",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_GuildInfo.GuildRoster()",
        "retail": true
      }
    ],
    "RequestKeystoneDataFromGuild": [
      {
        "name": "RequestKeystoneDataFromGuild",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.RequestKeystoneDataFromGuild()",
        "retail": true
      }
    ],
    "FriendsFrameAddFriendButton_OnClick": [
      {
        "name": "FriendsFrameAddFriendButton_OnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "FriendsFrameAddFriendButton_OnClick()",
        "retail": true
      }
    ],
    "GetFriendInfo": [
      {
        "name": "C_FriendList.GetFriendInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local info = C_FriendList.GetFriendInfo(dfButton.playerName)",
        "retail": true
      }
    ],
    "FormatDateByLocale": [
      {
        "name": "FormatDateByLocale",
        "count": 3,
        "confidence": 0.6,
        "sample": "local timeWhen = detailsFramework.string.FormatDateByLocale(dfButton.recentPlayerTable[2], false)",
        "retail": true
      }
    ],
    "Acronym": [
      {
        "name": "Acronym",
        "count": 3,
        "confidence": 0.6,
        "sample": "local shortName = detailsFramework.string.Acronym(zoneName)",
        "retail": true
      }
    ],
    "SetFriendNotes": [
      {
        "name": "C_FriendList.SetFriendNotes",
        "count": 1,
        "confidence": 0.2,
        "sample": "C_FriendList.SetFriendNotes(dfButton.playerName, \"Added from Details! /keys.\\n\" .. timeWhen .. \" Key: \" .. finalText)",
        "retail": true
      }
    ],
    "UnpackRecentPlayerTable": [
      {
        "name": "UnpackRecentPlayerTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "local activityType, timeWhen, playerName, classId, specId, mapId, playedTogetherAmount, param1, param2, param3, param4 = Details:UnpackRecentPlayerTable(recentPlayerTable)",
        "retail": true
      }
    ],
    "AddClassColorToText": [
      {
        "name": "AddClassColorToText",
        "count": 8,
        "confidence": 1.0,
        "sample": "dfButton.playerName:SetText(detailsFramework:AddClassColorToText(detailsFramework:RemoveRealmName(playerName), detailsFramework.ClassIndexToFileName[classId]))",
        "retail": true
      }
    ],
    "GetRoleIconAndCoords": [
      {
        "name": "GetRoleIconAndCoords",
        "count": 5,
        "confidence": 1.0,
        "sample": "local texture L, R, T, B = detailsFramework:GetRoleIconAndCoords(role)",
        "retail": true
      }
    ],
    "CreateTextureInfo": [
      {
        "name": "CreateTextureInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local textureInfo = detailsFramework:CreateTextureInfo(texture, 18, 18, 0, 1, 0, 1, 256, 128)",
        "retail": true
      }
    ],
    "AddTextureToText": [
      {
        "name": "AddTextureToText",
        "count": 3,
        "confidence": 0.6,
        "sample": "finalText = detailsFramework:AddTextureToText(finalText, textureInfo, bAddSpace, bAddAfterText)",
        "retail": true
      }
    ],
    "CreateGridScrollBox": [
      {
        "name": "CreateGridScrollBox",
        "count": 4,
        "confidence": 0.8,
        "sample": "local gridScrollBox = detailsFramework:CreateGridScrollBox(recentPlayersFrame, \"DetailsMythicPlusRecentPlayersGrid\", refreshRecentFriends, tbdData, createRecentPlayerButton, gridScrollBoxOptions)",
        "retail": true
      }
    ],
    "GetNumGuildMembers": [
      {
        "name": "GetNumGuildMembers",
        "count": 2,
        "confidence": 0.4,
        "sample": "--for i = 1, GetNumGuildMembers() do",
        "retail": true
      }
    ],
    "TruncateText": [
      {
        "name": "TruncateText",
        "count": 12,
        "confidence": 1.0,
        "sample": "detailsFramework:TruncateText(line.dungeonNameText, 150)",
        "retail": true
      }
    ],
    "GetRunIdLikesGivenByPlayerSelf": [
      {
        "name": "DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf",
        "count": 3,
        "confidence": 0.6,
        "sample": "local likesGiven = DetailsMythicPlus and DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf and DetailsMythicPlus.GetRunIdLikesGivenByPlayerSelf(unitName) or {}",
        "retail": true
      }
    ],
    "GetSimpleDescription": [
      {
        "name": "DetailsMythicPlus.GetSimpleDescription",
        "count": 1,
        "confidence": 0.2,
        "sample": "label = DetailsMythicPlus.GetSimpleDescription(runId),",
        "retail": true
      }
    ],
    "IsOpen": [
      {
        "name": "IsOpen",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (not line.selectRunDropdown:IsOpen()) then",
        "retail": true
      }
    ],
    "SetFunction": [
      {
        "name": "SetFunction",
        "count": 9,
        "confidence": 1.0,
        "sample": "line.selectRunDropdown:SetFunction(refreshRunDropdown)",
        "retail": true
      }
    ],
    "GetHeaderColumnByName": [
      {
        "name": "GetHeaderColumnByName",
        "count": 5,
        "confidence": 1.0,
        "sample": "local likesGivenHeader = f.Header:GetHeaderColumnByName(\"likesGiven\")",
        "retail": true
      }
    ],
    "AdjustPointsOffset": [
      {
        "name": "AdjustPointsOffset",
        "count": 2,
        "confidence": 0.4,
        "sample": "scrollFrame.ScrollBar:AdjustPointsOffset(-23, -1)",
        "retail": true
      }
    ],
    "CreateDropDown": [
      {
        "name": "CreateDropDown",
        "count": 20,
        "confidence": 1.0,
        "sample": "local selectRunDropdown = detailsFramework:CreateDropDown(line, refreshDropdown, 1, 100, 20, \"selectRunDropdown\", nil, detailsFramework:GetTemplate(\"dropdown\", \"OPTIONS_DROPDOWN_TEMPLATE\"))",
        "retail": true
      }
    ],
    "GetRecentPlayers": [
      {
        "name": "GetRecentPlayers",
        "count": 4,
        "confidence": 0.8,
        "sample": "local recentPlayers = Details:GetRecentPlayers()",
        "retail": true
      }
    ],
    "GetAllKeystonesInfo": [
      {
        "name": "GetAllKeystonesInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local keystoneData = openRaidLib.GetAllKeystonesInfo()",
        "retail": true
      },
      {
        "name": "KeystoneInfoManager.GetAllKeystonesInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "return openRaidLib.KeystoneInfoManager.GetAllKeystonesInfo()",
        "retail": true
      }
    ],
    "GetLines": [
      {
        "name": "GetLines",
        "count": 16,
        "confidence": 1.0,
        "sample": "local lines = scrollFrame:GetLines()",
        "retail": true
      }
    ],
    "GetGuildRosterInfo": [
      {
        "name": "GetGuildRosterInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "--create a string to use into the gsub call when removing the realm name from the player name, by default all player names returned from GetGuildRosterInfo() has PlayerName-RealmName format",
        "retail": true
      }
    ],
    "GetSelectedColumn": [
      {
        "name": "GetSelectedColumn",
        "count": 10,
        "confidence": 1.0,
        "sample": "local columnIndex, order = f.Header:GetSelectedColumn()",
        "retail": true
      }
    ],
    "OnKeystoneUpdate": [
      {
        "name": "OnKeystoneUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function f.OnKeystoneUpdate(unitId, keystoneInfo, allKeystonesInfo)",
        "retail": true
      }
    ],
    "WipeKeystoneData": [
      {
        "name": "WipeKeystoneData",
        "count": 2,
        "confidence": 0.4,
        "sample": "--openRaidLib.WipeKeystoneData()",
        "retail": true
      }
    ],
    "RequestKeystoneDataFromRaid": [
      {
        "name": "RequestKeystoneDataFromRaid",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.RequestKeystoneDataFromRaid()",
        "retail": true
      }
    ],
    "RequestKeystoneDataFromParty": [
      {
        "name": "RequestKeystoneDataFromParty",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.RequestKeystoneDataFromParty()",
        "retail": true
      }
    ],
    "ReplaceNoteCommand": [
      {
        "name": "ReplaceNoteCommand",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ReplaceNoteCommand(addonObject, memberName, noteCommandToReplace, ...)",
        "retail": true
      }
    ],
    "Notes": [
      {
        "name": "Notes",
        "count": 7,
        "confidence": 1.0,
        "sample": "local mainFrame = detailsFramework:CreateSimplePanel(UIParent, 600, 400, \"Notes (/note) Options\", \"DetailsNoteOptionsFrame\")",
        "retail": true
      }
    ],
    "RefreshFrameSettings": [
      {
        "name": "DetailsNoteScreenFrame.RefreshFrameSettings",
        "count": 12,
        "confidence": 1.0,
        "sample": "DetailsNoteScreenFrame.RefreshFrameSettings()",
        "retail": true
      },
      {
        "name": "RefreshFrameSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "function screenFrame.RefreshFrameSettings()",
        "retail": true
      }
    ],
    "RefreshNoteTextSettings": [
      {
        "name": "DetailsNoteScreenFrame.RefreshNoteTextSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsNoteScreenFrame.RefreshNoteTextSettings()",
        "retail": true
      },
      {
        "name": "RefreshNoteTextSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "function screenFrame.RefreshNoteTextSettings()",
        "retail": true
      }
    ],
    "GetDefaultBackdropColor": [
      {
        "name": "GetDefaultBackdropColor",
        "count": 12,
        "confidence": 1.0,
        "sample": "local red, green, blue = detailsFramework:GetDefaultBackdropColor()",
        "retail": true
      }
    ],
    "BuildMenu": [
      {
        "name": "BuildMenu",
        "count": 31,
        "confidence": 1.0,
        "sample": "detailsFramework:BuildMenu(mainFrame, options, 3, -57, 580, false, options_text_template, options_dropdown_template, options_switch_template, true, options_slider_template, options_button_template)",
        "retail": true
      }
    ],
    "OpenNoteScreenPanel": [
      {
        "name": "OpenNoteScreenPanel",
        "count": 3,
        "confidence": 0.6,
        "sample": "noteEditor.OpenNoteScreenPanel(UnitName(\"player\"), testText, invalidCommId, bIsSimulateOnClient)",
        "retail": true
      }
    ],
    "NewSpecialLuaEditorEntry": [
      {
        "name": "NewSpecialLuaEditorEntry",
        "count": 15,
        "confidence": 1.0,
        "sample": "local editboxNotes = detailsFramework:NewSpecialLuaEditorEntry(mainFrame, CONST_WINDOW_WIDTH - 10, CONST_WINDOW_HEIGHT - 30, \"editboxNotes\", \"$parentAPIEditbox\", true)",
        "retail": true
      }
    ],
    "SetPlayerNote": [
      {
        "name": "SetPlayerNote",
        "count": 5,
        "confidence": 1.0,
        "sample": "openRaidLib.SetPlayerNote(noteText)",
        "retail": true
      }
    ],
    "SendPlayerNote": [
      {
        "name": "SendPlayerNote",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.SendPlayerNote()",
        "retail": true
      }
    ],
    "PrepareUnitRoleTables": [
      {
        "name": "PrepareUnitRoleTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function noteEditor.PrepareUnitRoleTables(unitIds)",
        "retail": true
      }
    ],
    "FindAndColorUnitNames": [
      {
        "name": "FindAndColorUnitNames",
        "count": 2,
        "confidence": 0.4,
        "sample": "function noteEditor.FindAndColorUnitNames(text)",
        "retail": true
      }
    ],
    "ParseNoteText": [
      {
        "name": "ParseNoteText",
        "count": 3,
        "confidence": 0.6,
        "sample": "function noteEditor.ParseNoteText(text, bNoColoring)",
        "retail": true
      }
    ],
    "HasAnyNoteSaved": [
      {
        "name": "HasAnyNoteSaved",
        "count": 1,
        "confidence": 0.2,
        "sample": "function mainFrame.HasAnyNoteSaved()",
        "retail": true
      }
    ],
    "GenerateNewNoteName": [
      {
        "name": "GenerateNewNoteName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function mainFrame.GenerateNewNoteName()",
        "retail": true
      }
    ],
    "SaveNote": [
      {
        "name": "SaveNote",
        "count": 5,
        "confidence": 1.0,
        "sample": "function mainFrame.SaveNote(noteIndex)",
        "retail": true
      }
    ],
    "SetNoteName": [
      {
        "name": "SetNoteName",
        "count": 2,
        "confidence": 0.4,
        "sample": "function mainFrame.SetNoteName(noteIndex, newName)",
        "retail": true
      }
    ],
    "SelectNote": [
      {
        "name": "SelectNote",
        "count": 3,
        "confidence": 0.6,
        "sample": "function mainFrame.SelectNote(noteIndex)",
        "retail": true
      }
    ],
    "CreateEmptyNote": [
      {
        "name": "CreateEmptyNote",
        "count": 2,
        "confidence": 0.4,
        "sample": "function mainFrame.CreateEmptyNote()",
        "retail": true
      }
    ],
    "EraseNote": [
      {
        "name": "EraseNote",
        "count": 2,
        "confidence": 0.4,
        "sample": "function mainFrame.EraseNote(noteIndex)",
        "retail": true
      }
    ],
    "CreateHighlightTexture": [
      {
        "name": "CreateHighlightTexture",
        "count": 12,
        "confidence": 1.0,
        "sample": "detailsFramework:CreateHighlightTexture(newButton)",
        "retail": true
      }
    ],
    "CreatePool": [
      {
        "name": "CreatePool",
        "count": 4,
        "confidence": 0.8,
        "sample": "local playerSelectionPool = detailsFramework:CreatePool(createNewPlayerSelectionButton)",
        "retail": true
      }
    ],
    "RefreshPickPlayer": [
      {
        "name": "RefreshPickPlayer",
        "count": 4,
        "confidence": 0.8,
        "sample": "function mainFrame.RefreshPickPlayer()",
        "retail": true
      }
    ],
    "SetTextTruncated": [
      {
        "name": "SetTextTruncated",
        "count": 3,
        "confidence": 0.6,
        "sample": "selectPlayerButton:SetTextTruncated(unitName, columnWidth - 30)",
        "retail": true
      }
    ],
    "ShowErrorMsg": [
      {
        "name": "ShowErrorMsg",
        "count": 3,
        "confidence": 0.6,
        "sample": "mainFrame.ShowErrorMsg(msg)",
        "retail": true
      }
    ],
    "OpenNoteOptionsPanel": [
      {
        "name": "OpenNoteOptionsPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "noteEditor.OpenNoteOptionsPanel()",
        "retail": true
      }
    ],
    "CreateFrameShake": [
      {
        "name": "CreateFrameShake",
        "count": 6,
        "confidence": 1.0,
        "sample": "local shake = detailsFramework:CreateFrameShake(errorMsg, 0.4, 6, 20, false, true, 0, 1, 0, 0.3)",
        "retail": true
      }
    ],
    "PlayFrameShake": [
      {
        "name": "PlayFrameShake",
        "count": 5,
        "confidence": 1.0,
        "sample": "mainFrame.ErrorMsg:PlayFrameShake(shake)",
        "retail": true
      }
    ],
    "SetNote": [
      {
        "name": "SetNote",
        "count": 2,
        "confidence": 0.4,
        "sample": "function screenFrame.SetNote(sender, text)",
        "retail": true
      }
    ],
    "AddRoleIconToText": [
      {
        "name": "AddRoleIconToText",
        "count": 2,
        "confidence": 0.4,
        "sample": "sender = detailsFramework:AddRoleIconToText(sender, unitRole, size)",
        "retail": true
      }
    ],
    "RegisterForMouse": [
      {
        "name": "RegisterForMouse",
        "count": 3,
        "confidence": 0.6,
        "sample": "rightClickFrame:RegisterForMouse(\"RightButtonDown\")",
        "retail": true
      }
    ],
    "SetPassThroughButtons": [
      {
        "name": "SetPassThroughButtons",
        "count": 3,
        "confidence": 0.6,
        "sample": "rightClickFrame:SetPassThroughButtons(\"LeftButton\")",
        "retail": true
      }
    ],
    "InvertInRange": [
      {
        "name": "Math.InvertInRange",
        "count": 2,
        "confidence": 0.4,
        "sample": "screenFrame:SetColor(screenRed, screenGreen, screenBlue, detailsFramework.Math.InvertInRange(0, 1, config[\"transparency\"]))",
        "retail": true
      },
      {
        "name": "InvertInRange",
        "count": 8,
        "confidence": 1.0,
        "sample": "---@field InvertInRange fun(minValue: number, maxValue: number, value: number) : number invert the value in a range, example: InvertInRange(0, 1, 0.75) return 0.25, InvertInRange(0, 100, 75) return 25, InvertInRange(-1, 1, 0.5) return -0.5, InvertInRange(-3, 1, -0.75) return -2.25",
        "retail": true
      },
      {
        "name": "DF.Math.InvertInRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.InvertInRange(minValue, maxValue, value)",
        "retail": true
      }
    ],
    "CreateReportInfoFromType": [
      {
        "name": "CreateReportInfoFromType",
        "count": 1,
        "confidence": 0.2,
        "sample": "local reportInfo = ReportInfo:CreateReportInfoFromType(reportType)",
        "retail": true
      }
    ],
    "SetReportTarget": [
      {
        "name": "SetReportTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "reportInfo:SetReportTarget(currentSenderName)",
        "retail": true
      }
    ],
    "SetMajorType": [
      {
        "name": "SetMajorType",
        "count": 1,
        "confidence": 0.2,
        "sample": "ReportFrame:SetMajorType(Enum.ReportMajorCategory.InappropriateCommunication)",
        "retail": true
      }
    ],
    "InitiateReport": [
      {
        "name": "InitiateReport",
        "count": 1,
        "confidence": 0.2,
        "sample": "ReportFrame:InitiateReport(reportInfo, currentSenderName, playerLocation, bIsBnetReport, bSendReportWithoutDialog)",
        "retail": true
      }
    ],
    "MajorTypeSelected": [
      {
        "name": "MajorTypeSelected",
        "count": 1,
        "confidence": 0.2,
        "sample": "ReportFrame:MajorTypeSelected(reportType, Enum.ReportMajorCategory.InappropriateCommunication)",
        "retail": true
      }
    ],
    "SetOffset": [
      {
        "name": "SetOffset",
        "count": 10,
        "confidence": 1.0,
        "sample": "screenFrame.FlashTexture.FadeInAnimation.transInAnim:SetOffset(0, -screenFrameHeight/2)",
        "retail": true
      }
    ],
    "NOTE": [
      {
        "name": "SlashCmdList.NOTE",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.NOTE(msg, editbox)",
        "retail": true
      }
    ],
    "OpenNoteEditor": [
      {
        "name": "OpenNoteEditor",
        "count": 4,
        "confidence": 0.8,
        "sample": "noteEditor.OpenNoteEditor()",
        "retail": true
      }
    ],
    "NOTES": [
      {
        "name": "SlashCmdList.NOTES",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.NOTES(msg, editbox)",
        "retail": true
      }
    ],
    "NOTEPAD": [
      {
        "name": "SlashCmdList.NOTEPAD",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SlashCmdList.NOTEPAD(msg, editbox)",
        "retail": true
      }
    ],
    "ShowBestInShowFrame": [
      {
        "name": "Details.Commentator.ShowBestInShowFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "--atm the moment using \"/run Details.Commentator.ShowBestInShowFrame(secondsToHide, height)\"",
        "retail": true
      }
    ],
    "GetBestInShowFrame": [
      {
        "name": "Details.Commentator.GetBestInShowFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Commentator.GetBestInShowFrame()",
        "retail": true
      }
    ],
    "GetTimeSample": [
      {
        "name": "Details222.CurrentDPS.GetTimeSample",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.CurrentDPS.GetTimeSample()",
        "retail": true
      }
    ],
    "GetCurrentDps": [
      {
        "name": "Details.CurrentDps.GetCurrentDps",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.CurrentDps.GetCurrentDps(serial)",
        "retail": true
      }
    ],
    "StartCurrentDpsTracker": [
      {
        "name": "Details.CurrentDps.StartCurrentDpsTracker",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.CurrentDps.StartCurrentDpsTracker()",
        "retail": true
      }
    ],
    "StopCurrentDpsTracker": [
      {
        "name": "Details.CurrentDps.StopCurrentDpsTracker",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.CurrentDps.StopCurrentDpsTracker()",
        "retail": true
      }
    ],
    "RegisterDragonFlightEditMode": [
      {
        "name": "Details.RegisterDragonFlightEditMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.RegisterDragonFlightEditMode()",
        "retail": true
      }
    ],
    "BossModsLink": [
      {
        "name": "BossModsLink",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:BossModsLink()",
        "retail": true
      }
    ],
    "BigWigs_SetStage": [
      {
        "name": "BigWigs_SetStage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:BigWigs_SetStage (event, module, phase)",
        "retail": true
      }
    ],
    "CreateCallbackListeners": [
      {
        "name": "CreateCallbackListeners",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:CreateCallbackListeners()",
        "retail": true
      }
    ],
    "RegisterBigWigsCallBack": [
      {
        "name": "RegisterBigWigsCallBack",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RegisterBigWigsCallBack()",
        "retail": true
      }
    ],
    "BigWigs_StartBar": [
      {
        "name": "BigWigs_StartBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:BigWigs_StartBar(event, module, spellid, bar_text, time, icon, ...)",
        "retail": true
      }
    ],
    "GetAttributeName": [
      {
        "name": "GetAttributeName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:GetAttributeName (attribute)",
        "retail": true
      }
    ],
    "GetSubAttributeName": [
      {
        "name": "GetSubAttributeName",
        "count": 7,
        "confidence": 1.0,
        "sample": "function _detalhes:GetSubAttributeName (attribute, subAttribute, customName)",
        "retail": true
      }
    ],
    "GetInternalSubAttributeName": [
      {
        "name": "GetInternalSubAttributeName",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:GetInternalSubAttributeName (attribute, subAttribute)",
        "retail": true
      }
    ],
    "AddDamageToGUID": [
      {
        "name": "AddDamageToGUID",
        "count": 3,
        "confidence": 0.6,
        "sample": "function plater_integration_frame.AddDamageToGUID (sourceGUID, targetGUID, time, amount)",
        "retail": true
      }
    ],
    "CreateProfile": [
      {
        "name": "CreateProfile",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:CreateProfile(profileName)",
        "retail": true
      }
    ],
    "GetProfileList": [
      {
        "name": "GetProfileList",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:GetProfileList()",
        "retail": true
      }
    ],
    "EraseProfile": [
      {
        "name": "EraseProfile",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:EraseProfile(profileName)",
        "retail": true
      }
    ],
    "SetProfileCProp": [
      {
        "name": "SetProfileCProp",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetProfileCProp (name, cprop, value)",
        "retail": true
      }
    ],
    "ExportSkin": [
      {
        "name": "ExportSkin",
        "count": 4,
        "confidence": 0.8,
        "sample": "local exported = instance:ExportSkin()",
        "retail": true
      }
    ],
    "GetPosition": [
      {
        "name": "GetPosition",
        "count": 4,
        "confidence": 0.8,
        "sample": "exported.__pos = Details.CopyTable(instance:GetPosition())",
        "retail": true
      }
    ],
    "SaveProfile": [
      {
        "name": "SaveProfile",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:SaveProfile()",
        "retail": true
      },
      {
        "name": "SavedVars.SaveProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "detailsFramework.SavedVars.SaveProfile(addonObject)",
        "retail": true
      }
    ],
    "SaveLocalInstanceConfig": [
      {
        "name": "SaveLocalInstanceConfig",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:SaveLocalInstanceConfig()",
        "retail": true
      }
    ],
    "IsStarted": [
      {
        "name": "IsStarted",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (instance:IsStarted()) then",
        "retail": true
      }
    ],
    "ResetInstanceConfig": [
      {
        "name": "ResetInstanceConfig",
        "count": 5,
        "confidence": 1.0,
        "sample": "instance1:ResetInstanceConfig()",
        "retail": true
      }
    ],
    "LoadLocalInstanceConfig": [
      {
        "name": "LoadLocalInstanceConfig",
        "count": 4,
        "confidence": 0.8,
        "sample": "instance1:LoadLocalInstanceConfig()",
        "retail": true
      }
    ],
    "CreateDisabledInstance": [
      {
        "name": "CreateDisabledInstance",
        "count": 2,
        "confidence": 0.4,
        "sample": "instance = Details:CreateDisabledInstance (index, skin)",
        "retail": true
      }
    ],
    "LoadInstanceConfig": [
      {
        "name": "LoadInstanceConfig",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance:LoadInstanceConfig()",
        "retail": true
      }
    ],
    "X": [
      {
        "name": "X",
        "count": 1,
        "confidence": 0.2,
        "sample": "--tinsert(Details.resize_debug, #Details.resize_debug+1, \"libwindow X (427): \" .. (instance.libwindow.x or 0))",
        "retail": true
      }
    ],
    "SaveState_CurrentMythicDungeonRun": [
      {
        "name": "SaveState_CurrentMythicDungeonRun",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SaveState_CurrentMythicDungeonRun(runID, zoneName, zoneID, startAt, segmentID, level, ejID, latestBossAt)",
        "retail": true
      }
    ],
    "UpdateState_CurrentMythicDungeonRun": [
      {
        "name": "UpdateState_CurrentMythicDungeonRun",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:UpdateState_CurrentMythicDungeonRun(stillOngoing, segmentID, latestBossAt)",
        "retail": true
      }
    ],
    "ExportCurrentProfile": [
      {
        "name": "ExportCurrentProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ExportCurrentProfile()",
        "retail": true
      }
    ],
    "ImportProfile": [
      {
        "name": "ImportProfile",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:ImportProfile (profileString, newProfileName, bImportAutoRunCode, bIsFromImportPrompt, overwriteExisting)",
        "retail": true
      }
    ],
    "ShowImportProfileConfirmation": [
      {
        "name": "Details.ShowImportProfileConfirmation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.ShowImportProfileConfirmation(message, callback)",
        "retail": true
      }
    ],
    "SegmentInfo": [
      {
        "name": "Details.SegmentInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentInfo (segment)",
        "retail": true
      }
    ],
    "SegmentElapsedTime": [
      {
        "name": "Details.SegmentElapsedTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentElapsedTime (segment)",
        "retail": true
      }
    ],
    "SegmentDamagingUnits": [
      {
        "name": "Details.SegmentDamagingUnits",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentDamagingUnits (segment)",
        "retail": true
      }
    ],
    "SegmentHealingUnits": [
      {
        "name": "Details.SegmentHealingUnits",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentHealingUnits (segment)",
        "retail": true
      }
    ],
    "SegmentTotalDamage": [
      {
        "name": "Details.SegmentTotalDamage",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentTotalDamage (segment)",
        "retail": true
      }
    ],
    "SegmentTotalHealing": [
      {
        "name": "Details.SegmentTotalHealing",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentTotalHealing (segment)",
        "retail": true
      }
    ],
    "SegmentPhases": [
      {
        "name": "Details.SegmentPhases",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SegmentPhases (segment)",
        "retail": true
      },
      {
        "name": "SegmentPhases",
        "count": 1,
        "confidence": 0.2,
        "sample": "desc = \"The phase number of an encounter. Some encounters has transition phases considered 'phase 1.5'. You may query SegmentPhases() to know which phases the encounter has.\",",
        "retail": true
      }
    ],
    "UnitDamageByPhase": [
      {
        "name": "UnitDamageByPhase",
        "count": 1,
        "confidence": 0.2,
        "sample": "desc = \"A table containing numbers representing phases of the encounter, these numbers can used with UnitDamageByPhase().\",",
        "retail": true
      },
      {
        "name": "Details.UnitDamageByPhase",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageByPhase (unitId, phaseNumber, segment)",
        "retail": true
      }
    ],
    "UnitInfo": [
      {
        "name": "Details.UnitInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitInfo (unitId, segment)",
        "retail": true
      }
    ],
    "UnitTexture": [
      {
        "name": "Details.UnitTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitTexture (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDamageInfo": [
      {
        "name": "Details.UnitDamageInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageInfo (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDamageBySpell": [
      {
        "name": "Details.UnitDamageBySpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageBySpell (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitDamageSpellInfo": [
      {
        "name": "Details.UnitDamageSpellInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageSpellInfo (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "GetSpellCastAmount": [
      {
        "name": "GetSpellCastAmount",
        "count": 14,
        "confidence": 1.0,
        "sample": "spellInfo.casted = combatObject:GetSpellCastAmount(unitName, spellName)",
        "retail": true
      }
    ],
    "UnitDamageSpellOnUnit": [
      {
        "name": "Details.UnitDamageSpellOnUnit",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageSpellOnUnit (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitDamageTaken": [
      {
        "name": "Details.UnitDamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageTaken (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDamageOnUnit": [
      {
        "name": "Details.UnitDamageOnUnit",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.UnitDamageOnUnit (unitId, targetUnitId, segment)",
        "retail": true
      }
    ],
    "UnitDamageTakenFromSpell": [
      {
        "name": "Details.UnitDamageTakenFromSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamageTakenFromSpell (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitDamagingSpells": [
      {
        "name": "Details.UnitDamagingSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamagingSpells (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDamagingTargets": [
      {
        "name": "Details.UnitDamagingTargets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamagingTargets (unitId, segment)",
        "retail": true
      }
    ],
    "UnitDamagingPets": [
      {
        "name": "Details.UnitDamagingPets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitDamagingPets (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealing": [
      {
        "name": "Details.UnitHealing",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.UnitHealing (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingInfo": [
      {
        "name": "Details.UnitHealingInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingInfo (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingBySpell": [
      {
        "name": "Details.UnitHealingBySpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingBySpell (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitHealingSpellInfo": [
      {
        "name": "Details.UnitHealingSpellInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingSpellInfo (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitHealingSpellOnUnit": [
      {
        "name": "Details.UnitHealingSpellOnUnit",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingSpellOnUnit (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitHealingTaken": [
      {
        "name": "Details.UnitHealingTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingTaken (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingOnUnit": [
      {
        "name": "Details.UnitHealingOnUnit",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.UnitHealingOnUnit (unitId, targetUnitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingTakenFromSpell": [
      {
        "name": "Details.UnitHealingTakenFromSpell",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingTakenFromSpell (unitId, spellId, segment)",
        "retail": true
      }
    ],
    "UnitHealingSpells": [
      {
        "name": "Details.UnitHealingSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingSpells (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingTargets": [
      {
        "name": "Details.UnitHealingTargets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingTargets (unitId, segment)",
        "retail": true
      }
    ],
    "UnitHealingPets": [
      {
        "name": "Details.UnitHealingPets",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.UnitHealingPets (unitId, segment)",
        "retail": true
      }
    ],
    "GetRaidInfoFromEncounterID": [
      {
        "name": "GetRaidInfoFromEncounterID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetRaidInfoFromEncounterID (encounterID, encounterEJID)",
        "retail": true
      }
    ],
    "GetInstanceTrashInfo": [
      {
        "name": "GetInstanceTrashInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetInstanceTrashInfo (mapid)",
        "retail": true
      }
    ],
    "GetInstanceIdFromEncounterId": [
      {
        "name": "GetInstanceIdFromEncounterId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetInstanceIdFromEncounterId (encounterId)",
        "retail": true
      }
    ],
    "GetEncounterIdFromBossIndex": [
      {
        "name": "GetEncounterIdFromBossIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetEncounterIdFromBossIndex (mapid, index)",
        "retail": true
      }
    ],
    "GetEncounterStartInfo": [
      {
        "name": "GetEncounterStartInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetEncounterStartInfo (mapid, encounterid)",
        "retail": true
      }
    ],
    "GetBossDetails": [
      {
        "name": "GetBossDetails",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetBossDetails (mapid, bossindex)",
        "retail": true
      }
    ],
    "GetEncounterActors": [
      {
        "name": "GetEncounterActors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetEncounterActors (mapid, bossindex)",
        "retail": true
      }
    ],
    "GetEncounterSpells": [
      {
        "name": "GetEncounterSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetEncounterSpells (mapid, bossindex)",
        "retail": true
      },
      {
        "name": "Ejc.GetEncounterSpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.GetEncounterSpells(journalInstanceId, journalEncounterId, difficulty)",
        "retail": true
      }
    ],
    "InstanceIsRaid": [
      {
        "name": "InstanceIsRaid",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:InstanceIsRaid (mapid)",
        "retail": true
      }
    ],
    "InstanceisRaid": [
      {
        "name": "InstanceisRaid",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Details:InstanceisRaid (mapid)",
        "retail": true
      }
    ],
    "GetBossEncounterDetails": [
      {
        "name": "GetBossEncounterDetails",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetBossEncounterDetails (mapid, bossindex)",
        "retail": true
      }
    ],
    "GetEncounterInfoFromEncounterName": [
      {
        "name": "GetEncounterInfoFromEncounterName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetEncounterInfoFromEncounterName (EJID, encountername)",
        "retail": true
      }
    ],
    "EJ_GetEncounterInfoByIndex": [
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetEncounterInfoByIndex",
        "count": 4,
        "confidence": 0.8,
        "sample": "local name = DetailsFramework.EncounterJournal.EJ_GetEncounterInfoByIndex (i, EJID)",
        "retail": true
      },
      {
        "name": "EJ_GetEncounterInfoByIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "local name, description, journalEncounterID, rootSectionID, link, journalInstanceID, dungeonEncounterID, UiMapID = EJ_GetEncounterInfoByIndex(i, raidInstanceID)",
        "retail": true
      }
    ],
    "GetRaidBackground": [
      {
        "name": "GetRaidBackground",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetRaidBackground (mapid)",
        "retail": true
      }
    ],
    "GetRaidIcon": [
      {
        "name": "GetRaidIcon",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:GetRaidIcon (mapid, ejID, instanceType)",
        "retail": true
      }
    ],
    "GetBossIndex": [
      {
        "name": "GetBossIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetBossIndex (mapid, encounterCLID, encounterEJID, encounterName)",
        "retail": true
      }
    ],
    "GetBossIcon": [
      {
        "name": "GetBossIcon",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:GetBossIcon (mapid, bossindex)",
        "retail": true
      }
    ],
    "GetBossPortrait": [
      {
        "name": "GetBossPortrait",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:GetBossPortrait(mapid, bossindex, encounterName, ejID)",
        "retail": true
      }
    ],
    "EJ_GetCreatureInfo": [
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetCreatureInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local id, name, description, displayInfo, iconImage = DetailsFramework.EncounterJournal.EJ_GetCreatureInfo (1, encounterID)",
        "retail": true
      },
      {
        "name": "EJ_GetCreatureInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local id, creatureName, creatureDescription, displayInfo, iconImage = EJ_GetCreatureInfo(1, journalEncounterID)",
        "retail": true
      }
    ],
    "GetEncounterActorsName": [
      {
        "name": "GetEncounterActorsName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetEncounterActorsName (EJ_EncounterID)",
        "retail": true
      }
    ],
    "EJ_GetSectionInfo": [
      {
        "name": "DetailsFramework.EncounterJournal.EJ_GetSectionInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "local title, description, depth, abilityIcon, displayInfo, siblingID, nextSectionID, filteredByDifficulty, link, startsOpen, flag1, flag2, flag3, flag4 = DetailsFramework.EncounterJournal.EJ_GetSectionInfo (curSectionID)",
        "retail": true
      }
    ],
    "IsRaidRegistered": [
      {
        "name": "IsRaidRegistered",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsRaidRegistered(mapId)",
        "retail": true
      }
    ],
    "GetExpansionBossList": [
      {
        "name": "GetExpansionBossList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetExpansionBossList() --~bosslist - load on demand from gears-gsync and statistics-valid boss for exp",
        "retail": true
      }
    ],
    "EJ_GetInstanceByIndex": [
      {
        "name": "EJ_GetInstanceByIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "local raidInstanceID, instanceName, description, bgImage, buttonImage1, loreImage, buttonImage2, dungeonAreaMapID = EJ_GetInstanceByIndex(instanceIndex, true)",
        "retail": true
      }
    ],
    "EncounterJournal_DisplayInstance": [
      {
        "name": "EncounterJournal_DisplayInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "--EncounterJournal_DisplayInstance(raidInstanceID)",
        "retail": true
      }
    ],
    "EncounterJournal_ResetDisplay": [
      {
        "name": "EncounterJournal_ResetDisplay",
        "count": 1,
        "confidence": 0.2,
        "sample": "EncounterJournal_ResetDisplay(nil, \"none\")",
        "retail": true
      }
    ],
    "GetInstanceData": [
      {
        "name": "Details222.EJCache.GetInstanceData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.EJCache.GetInstanceData(...)",
        "retail": true
      }
    ],
    "GetInstanceDataByName": [
      {
        "name": "Details222.EJCache.GetInstanceDataByName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)",
        "retail": true
      }
    ],
    "GetInstanceDataByInstanceId": [
      {
        "name": "Details222.EJCache.GetInstanceDataByInstanceId",
        "count": 2,
        "confidence": 0.4,
        "sample": "local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)",
        "retail": true
      }
    ],
    "GetInstanceDataByMapId": [
      {
        "name": "Details222.EJCache.GetInstanceDataByMapId",
        "count": 2,
        "confidence": 0.4,
        "sample": "local instanceData = Details222.EJCache.GetInstanceDataByName(value) or Details222.EJCache.GetInstanceDataByInstanceId(value) or Details222.EJCache.GetInstanceDataByMapId(value)",
        "retail": true
      }
    ],
    "GetEncounterDataFromInstanceData": [
      {
        "name": "Details222.EJCache.GetEncounterDataFromInstanceData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.EJCache.GetEncounterDataFromInstanceData(instanceData, ...)",
        "retail": true
      }
    ],
    "GetRaidDataByName": [
      {
        "name": "Details222.EJCache.GetRaidDataByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetRaidDataByName(instanceName)",
        "retail": true
      }
    ],
    "GetRaidDataByInstanceId": [
      {
        "name": "Details222.EJCache.GetRaidDataByInstanceId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetRaidDataByInstanceId(instanceId)",
        "retail": true
      }
    ],
    "GetRaidDataByMapId": [
      {
        "name": "Details222.EJCache.GetRaidDataByMapId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetRaidDataByMapId(instanceId)",
        "retail": true
      }
    ],
    "GetDungeonDataByName": [
      {
        "name": "Details222.EJCache.GetDungeonDataByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetDungeonDataByName(instanceName)",
        "retail": true
      }
    ],
    "GetDungeonDataByInstanceId": [
      {
        "name": "Details222.EJCache.GetDungeonDataByInstanceId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetDungeonDataByInstanceId(instanceId)",
        "retail": true
      }
    ],
    "GetDungeonDataByMapId": [
      {
        "name": "Details222.EJCache.GetDungeonDataByMapId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.EJCache.GetDungeonDataByMapId(instanceId)",
        "retail": true
      }
    ],
    "InstallEncounter": [
      {
        "name": "InstallEncounter",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:InstallEncounter(InstanceTable)",
        "retail": true
      }
    ],
    "CreateEncounterJournalDump": [
      {
        "name": "Details222.EJCache.CreateEncounterJournalDump",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.EJCache.CreateEncounterJournalDump()",
        "retail": true
      },
      {
        "name": "Ejc.CreateEncounterJournalDump",
        "count": 7,
        "confidence": 1.0,
        "sample": "Ejc.CreateEncounterJournalDump()",
        "retail": true
      }
    ],
    "DumpInstanceInfo": [
      {
        "name": "DumpInstanceInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DumpInstanceInfo()",
        "retail": true
      }
    ],
    "IsCurrentContent": [
      {
        "name": "Details222.EJCache.IsCurrentContent",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details222.EJCache.IsCurrentContent(id)",
        "retail": true
      },
      {
        "name": "Ejc.IsCurrentContent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.IsCurrentContent(id)",
        "retail": true
      },
      {
        "name": "DF.Ejc.IsCurrentContent",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not DF.Ejc.IsCurrentContent(default)) then",
        "retail": true
      }
    ],
    "EJ_GetNumTiers": [
      {
        "name": "EJ_GetNumTiers",
        "count": 2,
        "confidence": 0.4,
        "sample": "local tierAmount = EJ_GetNumTiers() --return 11 for dragonisles, is returning 11 for wow11 as well",
        "retail": true
      }
    ],
    "EJ_GetCurrentTier": [
      {
        "name": "EJ_GetCurrentTier",
        "count": 2,
        "confidence": 0.4,
        "sample": "local currentTierId = tierAmount --EJ_GetCurrentTier(), for some unknown reason, this function is returning 3 on retail",
        "retail": true
      }
    ],
    "EJ_SelectTier": [
      {
        "name": "EJ_SelectTier",
        "count": 4,
        "confidence": 0.8,
        "sample": "EJ_SelectTier(currentTierId) --print(\"tier selected:\", currentTierId - 1, \"raids\") --debug: was (currentTierId - 1), but was selecting wow10 content",
        "retail": true
      }
    ],
    "IsDragonflightWow": [
      {
        "name": "DetailsFramework.IsDragonflightWow",
        "count": 1,
        "confidence": 0.2,
        "sample": "if not DetailsFramework.IsDragonflightWow() then return end --In Cata, EJ_SelectInstance will fail due to instance not existing. This file only contains dragonflight raids anyways. Best keep it on DF only.",
        "retail": true
      },
      {
        "name": "DF.IsDragonflightWow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsDragonflightWow()",
        "retail": true
      }
    ],
    "CreateStorageDB": [
      {
        "name": "CreateStorageDB",
        "count": 3,
        "confidence": 0.6,
        "sample": "storageDatabase = Details:CreateStorageDB()",
        "retail": true
      }
    ],
    "OpenRaidStorage": [
      {
        "name": "OpenRaidStorage",
        "count": 13,
        "confidence": 1.0,
        "sample": "function Details222.storage.OpenRaidStorage()",
        "retail": true
      }
    ],
    "IsAddOnLoaded": [
      {
        "name": "C_AddOns.IsAddOnLoaded",
        "count": 10,
        "confidence": 1.0,
        "sample": "if (not C_AddOns.IsAddOnLoaded(CONST_ADDONNAME_DATASTORAGE)) then",
        "retail": true
      }
    ],
    "HaveDataForEncounter": [
      {
        "name": "HaveDataForEncounter",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.storage.HaveDataForEncounter(difficulty, encounterId, guildName)",
        "retail": true
      }
    ],
    "GetBestFromGuild": [
      {
        "name": "GetBestFromGuild",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.storage.GetBestFromGuild(difficulty, encounterId, role, dps, guildName)",
        "retail": true
      }
    ],
    "DBGuildSync": [
      {
        "name": "DBGuildSync",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.storage.DBGuildSync()",
        "retail": true
      }
    ],
    "IsBossIdFromCurrentExpansion": [
      {
        "name": "IsBossIdFromCurrentExpansion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsBossIdFromCurrentExpansion(bossId)",
        "retail": true
      }
    ],
    "UpdateDropdowns": [
      {
        "name": "UpdateDropdowns",
        "count": 5,
        "confidence": 1.0,
        "sample": "_G.DetailsRaidHistoryWindow:UpdateDropdowns()",
        "retail": true
      }
    ],
    "ListEncounters": [
      {
        "name": "ListEncounters",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.storage.ListEncounters(difficulty)",
        "retail": true
      }
    ],
    "GetEncounterData": [
      {
        "name": "GetEncounterData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.storage.GetEncounterData(difficulty, dungeonEncounterID, guildName)",
        "retail": true
      }
    ],
    "OpenStorage": [
      {
        "name": "Details.OpenStorage",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.OpenStorage()",
        "retail": true
      }
    ],
    "LoadDB": [
      {
        "name": "Details.Database.LoadDB",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.Database.LoadDB()",
        "retail": true
      }
    ],
    "GetBossKillsDB": [
      {
        "name": "Details.Database.GetBossKillsDB",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.Database.GetBossKillsDB(savedData)",
        "retail": true
      }
    ],
    "OpenBreakdownWindow": [
      {
        "name": "OpenBreakdownWindow",
        "count": 16,
        "confidence": 1.0,
        "sample": "Details:OpenBreakdownWindow(instance, Details:GetPlayer(false, 1))",
        "retail": true
      }
    ],
    "SaveConfig": [
      {
        "name": "SaveConfig",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SaveConfig()",
        "retail": true
      }
    ],
    "ReleaseEmbed": [
      {
        "name": "ReleaseEmbed",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details.chat_embed:ReleaseEmbed()",
        "retail": true
      }
    ],
    "SetTabSettings": [
      {
        "name": "SetTabSettings",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details.chat_embed:SetTabSettings(tab_name, bNewStateEnabled, is_single)",
        "retail": true
      }
    ],
    "GetTab": [
      {
        "name": "GetTab",
        "count": 4,
        "confidence": 0.8,
        "sample": "local ChatFrame = Details.chat_embed:GetTab(current_name)",
        "retail": true
      }
    ],
    "FCF_SetWindowName": [
      {
        "name": "FCF_SetWindowName",
        "count": 5,
        "confidence": 1.0,
        "sample": "FCF_SetWindowName(ChatFrame, tab_name, false)",
        "retail": true
      }
    ],
    "DoEmbed": [
      {
        "name": "DoEmbed",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details.chat_embed:DoEmbed()",
        "retail": true
      }
    ],
    "DelayedChatEmbed": [
      {
        "name": "DelayedChatEmbed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.chat_embed:DelayedChatEmbed()",
        "retail": true
      }
    ],
    "FCF_OpenNewWindow": [
      {
        "name": "FCF_OpenNewWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "FCF_OpenNewWindow(tabname)",
        "retail": true
      }
    ],
    "ChatFrame_RemoveMessageGroup": [
      {
        "name": "ChatFrame_RemoveMessageGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "ChatFrame_RemoveMessageGroup(chatFrame, t)",
        "retail": true
      }
    ],
    "SetChatWindowName": [
      {
        "name": "SetChatWindowName",
        "count": 1,
        "confidence": 0.2,
        "sample": "--API SetChatWindowName(frame:GetID(), name); -- set when doNotSave is false",
        "retail": true
      }
    ],
    "SortGroupHeal": [
      {
        "name": "SortGroupHeal",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes.SortGroupHeal (container, keyName2)",
        "retail": true
      }
    ],
    "SortKeyGroupHeal": [
      {
        "name": "SortKeyGroupHeal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SortKeyGroupHeal (table1, table2)",
        "retail": true
      }
    ],
    "SortKeySimpleHeal": [
      {
        "name": "SortKeySimpleHeal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SortKeySimpleHeal (table1, table2)",
        "retail": true
      }
    ],
    "ContainerSortHeal": [
      {
        "name": "ContainerSortHeal",
        "count": 4,
        "confidence": 0.8,
        "sample": "function _detalhes:ContainerSortHeal (container, amount, keyName2)",
        "retail": true
      }
    ],
    "ContainerRefreshHps": [
      {
        "name": "ContainerRefreshHps",
        "count": 4,
        "confidence": 0.8,
        "sample": "function healingClass:ContainerRefreshHps (container, combat_time)",
        "retail": true
      }
    ],
    "ReportSingleDamagePreventedLine": [
      {
        "name": "ReportSingleDamagePreventedLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function healingClass:ReportSingleDamagePreventedLine (actor, instancia)",
        "retail": true
      }
    ],
    "GetNumLines": [
      {
        "name": "GetNumLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "for i = 2, GameCooltip:GetNumLines()-2 do",
        "retail": true
      }
    ],
    "T": [
      {
        "name": "T",
        "count": 1,
        "confidence": 0.2,
        "sample": "texto_left = texto_left:gsub((\"|T(.*)|t \"), \"\")",
        "retail": true
      }
    ],
    "Reportar": [
      {
        "name": "Reportar",
        "count": 13,
        "confidence": 1.0,
        "sample": "return _detalhes:Reportar (reportar, {_no_current = true, _no_inverse = true, _custom = true})",
        "retail": true
      }
    ],
    "RefreshScrollBar": [
      {
        "name": "RefreshScrollBar",
        "count": 13,
        "confidence": 1.0,
        "sample": "instancia:RefreshScrollBar (amount)",
        "retail": true
      }
    ],
    "GetBarBracket": [
      {
        "name": "GetBarBracket",
        "count": 10,
        "confidence": 1.0,
        "sample": "local bars_brackets = instancia:GetBarBracket()",
        "retail": true
      }
    ],
    "GetBarSeparator": [
      {
        "name": "GetBarSeparator",
        "count": 8,
        "confidence": 1.0,
        "sample": "local bars_separator = instancia:GetBarSeparator()",
        "retail": true
      }
    ],
    "SetInLineTexts": [
      {
        "name": "SetInLineTexts",
        "count": 28,
        "confidence": 1.0,
        "sample": "instancia:SetInLineTexts(row1, \"\", _detalhes:ToK2 (total), _detalhes:ToK (total / combat_time))",
        "retail": true
      }
    ],
    "RefreshLine": [
      {
        "name": "RefreshLine",
        "count": 43,
        "confidence": 1.0,
        "sample": "conteudo[i]:RefreshLine(instancia, barras_container, whichRowLine, i, total, sub_atributo, forcar, keyName, combat_time, percentage_type, use_animations, bars_show_data, bars_brackets, bars_separator)",
        "retail": true
      }
    ],
    "AutoAlignInLineFontStrings": [
      {
        "name": "AutoAlignInLineFontStrings",
        "count": 4,
        "confidence": 0.8,
        "sample": "instancia:AutoAlignInLineFontStrings()",
        "retail": true
      }
    ],
    "SelectedToKFunction": [
      {
        "name": "SelectedToKFunction",
        "count": 24,
        "confidence": 1.0,
        "sample": "local formated_heal = SelectedToKFunction (_, healing_total)",
        "retail": true
      }
    ],
    "RefreshBarra2": [
      {
        "name": "RefreshBarra2",
        "count": 8,
        "confidence": 1.0,
        "sample": "return self:RefreshBarra2 (thisLine, instancia, tabela_anterior, forcar, esta_porcentagem, whichRowLine, barras_container, use_animations)",
        "retail": true
      }
    ],
    "SetClassIcon": [
      {
        "name": "SetClassIcon",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:SetClassIcon (thisLine.icone_classe, instancia, class)",
        "retail": true
      },
      {
        "name": "Details.SetClassIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details.SetClassIcon(targetActorObject, targetBar.Icon, spellsTab.GetInstance(), targetActorObject:Class())",
        "retail": true
      }
    ],
    "GetTexCoord": [
      {
        "name": "GetTexCoord",
        "count": 12,
        "confidence": 1.0,
        "sample": "thisLine.iconHighlight:SetTexCoord(classIcon:GetTexCoord())",
        "retail": true
      }
    ],
    "SetBarLeftText": [
      {
        "name": "SetBarLeftText",
        "count": 8,
        "confidence": 1.0,
        "sample": "self:SetBarLeftText (thisLine, instancia, enemy, arena_enemy, arena_ally, UsingCustomLeftText)",
        "retail": true
      }
    ],
    "TooltipForCustom": [
      {
        "name": "TooltipForCustom",
        "count": 3,
        "confidence": 0.6,
        "sample": "return self:TooltipForCustom (barra)",
        "retail": true
      }
    ],
    "ToolTip_HealingDone": [
      {
        "name": "ToolTip_HealingDone",
        "count": 4,
        "confidence": 0.8,
        "sample": "return self:ToolTip_HealingDone (instancia, numero, barra, keydown)",
        "retail": true
      }
    ],
    "ToolTip_HealingTaken": [
      {
        "name": "ToolTip_HealingTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTip_HealingTaken (instancia, numero, barra, keydown)",
        "retail": true
      }
    ],
    "ToolTip_HealingDenied": [
      {
        "name": "ToolTip_HealingDenied",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTip_HealingDenied (instancia, numero, barra, keydown)",
        "retail": true
      }
    ],
    "FormatTooltipNumber": [
      {
        "name": "FormatTooltipNumber",
        "count": 34,
        "confidence": 1.0,
        "sample": "GameCooltip:AddLine(spellName .. \": \", FormatTooltipNumber (_, spellTotal) .. \" (\" .. _cstr (\"%.1f\", spellTotal / totalDenied) ..\"%)\")",
        "retail": true
      }
    ],
    "Vardex": [
      {
        "name": "Vardex",
        "count": 6,
        "confidence": 1.0,
        "sample": "--translate cyrillic alphabet to western alphabet by Vardex (https://github.com/Vardex May 22, 2019)",
        "retail": true
      }
    ],
    "Transliterate": [
      {
        "name": "Transliterate",
        "count": 7,
        "confidence": 1.0,
        "sample": "onyName = Translit:Transliterate(onyName, \"!\")",
        "retail": true
      }
    ],
    "GetShowingCombat": [
      {
        "name": "GetShowingCombat",
        "count": 17,
        "confidence": 1.0,
        "sample": "local segment = instancia:GetShowingCombat()",
        "retail": true
      }
    ],
    "GetPhases": [
      {
        "name": "GetPhases",
        "count": 4,
        "confidence": 0.8,
        "sample": "local phasesInfo = segment:GetPhases()",
        "retail": true
      }
    ],
    "MontaInfoHealingDone": [
      {
        "name": "MontaInfoHealingDone",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:MontaInfoHealingDone()",
        "retail": true
      }
    ],
    "GetSpellScrollFrame": [
      {
        "name": "DetailsSpellBreakdownTab.GetSpellScrollFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spellsHeader = DetailsSpellBreakdownTab.GetSpellScrollFrame().Header",
        "retail": true
      },
      {
        "name": "GetSpellScrollFrame",
        "count": 10,
        "confidence": 1.0,
        "sample": "function spellsTab.GetSpellScrollFrame()",
        "retail": true
      }
    ],
    "GetTargetScrollFrame": [
      {
        "name": "DetailsSpellBreakdownTab.GetTargetScrollFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "local targetsHeader = DetailsSpellBreakdownTab.GetTargetScrollFrame().Header",
        "retail": true
      },
      {
        "name": "GetTargetScrollFrame",
        "count": 9,
        "confidence": 1.0,
        "sample": "function spellsTab.GetTargetScrollFrame()",
        "retail": true
      }
    ],
    "MontaInfoHealTaken": [
      {
        "name": "MontaInfoHealTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:MontaInfoHealTaken()",
        "retail": true
      }
    ],
    "GetTargets": [
      {
        "name": "GetTargets",
        "count": 5,
        "confidence": 1.0,
        "sample": "local targets = sourceActorObject:GetTargets()",
        "retail": true
      }
    ],
    "SendGenericData": [
      {
        "name": "Details222.BreakdownWindow.SendGenericData",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details222.BreakdownWindow.SendGenericData(resultTable, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "JI_AtualizaContainerBarras": [
      {
        "name": "JI_AtualizaContainerBarras",
        "count": 8,
        "confidence": 1.0,
        "sample": "gump:JI_AtualizaContainerBarras (amt)",
        "retail": true
      }
    ],
    "CriaNovaBarraInfo1": [
      {
        "name": "CriaNovaBarraInfo1",
        "count": 8,
        "confidence": 1.0,
        "sample": "barra = gump:CriaNovaBarraInfo1 (instancia, index)",
        "retail": true
      }
    ],
    "FocusLock": [
      {
        "name": "FocusLock",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:FocusLock(barra, tabela[1])",
        "retail": true
      }
    ],
    "UpdadeInfoBar": [
      {
        "name": "UpdadeInfoBar",
        "count": 9,
        "confidence": 1.0,
        "sample": "--hes:UpdadeInfoBar(row, index, spellid, name, value, max, percent, icon, detalhes)",
        "retail": true
      }
    ],
    "MontaInfoOverHealing": [
      {
        "name": "MontaInfoOverHealing",
        "count": 1,
        "confidence": 0.2,
        "sample": "function healingClass:MontaInfoOverHealing() --this should be deprecated now",
        "retail": true
      }
    ],
    "MontaDetalhes": [
      {
        "name": "MontaDetalhes",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:MontaDetalhes (self.detalhes, barra)",
        "retail": true
      }
    ],
    "JI_AtualizaContainerAlvos": [
      {
        "name": "JI_AtualizaContainerAlvos",
        "count": 7,
        "confidence": 1.0,
        "sample": "gump:JI_AtualizaContainerAlvos (amt_alvos)",
        "retail": true
      }
    ],
    "CriaNovaBarraInfo2": [
      {
        "name": "CriaNovaBarraInfo2",
        "count": 7,
        "confidence": 1.0,
        "sample": "barra = gump:CriaNovaBarraInfo2 (instancia, index)",
        "retail": true
      }
    ],
    "IsSpellExpanded": [
      {
        "name": "Details222.BreakdownWindow.IsSpellExpanded",
        "count": 7,
        "confidence": 1.0,
        "sample": "bIsExpanded = Details222.BreakdownWindow.IsSpellExpanded(spellId),",
        "retail": true
      }
    ],
    "SumSpellTables": [
      {
        "name": "Details.SpellTableMixin.SumSpellTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.SpellTableMixin.SumSpellTables(bkSpellData.spellTables, bkSpellData)",
        "retail": true
      }
    ],
    "SendSpellData": [
      {
        "name": "Details222.BreakdownWindow.SendSpellData",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.BreakdownWindow.SendSpellData(actorSpellsSorted, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "SendTargetData": [
      {
        "name": "Details222.BreakdownWindow.SendTargetData",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.BreakdownWindow.SendTargetData(targetList, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "SetStatusbarText": [
      {
        "name": "SetStatusbarText",
        "count": 8,
        "confidence": 1.0,
        "sample": "breakdownWindowFrame:SetStatusbarText()",
        "retail": true
      }
    ],
    "MontaTooltipAlvos": [
      {
        "name": "MontaTooltipAlvos",
        "count": 7,
        "confidence": 1.0,
        "sample": "function healingClass:MontaTooltipAlvos (thisLine, index, instancia)",
        "retail": true
      }
    ],
    "MontaDetalhesHealingDone": [
      {
        "name": "MontaDetalhesHealingDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesHealingDone (spellid, barra)",
        "retail": true
      }
    ],
    "MontaDetalhesHealingTaken": [
      {
        "name": "MontaDetalhesHealingTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "healingClass:MontaDetalhesHealingTaken (spellid, barra)",
        "retail": true
      }
    ],
    "CriaNovaBarraInfo3": [
      {
        "name": "CriaNovaBarraInfo3",
        "count": 6,
        "confidence": 1.0,
        "sample": "barra = gump:CriaNovaBarraInfo3 (instancia, index)",
        "retail": true
      }
    ],
    "SetaDetalheInfoTexto": [
      {
        "name": "SetaDetalheInfoTexto",
        "count": 2,
        "confidence": 0.4,
        "sample": "gump:SetaDetalheInfoTexto( index, 100,",
        "retail": true
      }
    ],
    "HidaDetalheInfo": [
      {
        "name": "HidaDetalheInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "gump:HidaDetalheInfo (index+1)",
        "retail": true
      }
    ],
    "GetRawSpellTable": [
      {
        "name": "GetRawSpellTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "for spellId, spellTable in pairs(actorObject.spells._ActorTable) do --same as overallSpellsContainer:GetRawSpellTable()",
        "retail": true
      }
    ],
    "UpdateDamageDoneBracket": [
      {
        "name": "UpdateDamageDoneBracket",
        "count": 2,
        "confidence": 0.4,
        "sample": "function atributo_custom:UpdateDamageDoneBracket()",
        "retail": true
      }
    ],
    "SortOrder": [
      {
        "name": "SortOrder",
        "count": 8,
        "confidence": 1.0,
        "sample": "local function SortOrder (main_table, func, ...)",
        "retail": true
      }
    ],
    "GetCustomObject": [
      {
        "name": "GetCustomObject",
        "count": 8,
        "confidence": 1.0,
        "sample": "if (instance:GetCustomObject():IsSpellTarget()) then",
        "retail": true
      }
    ],
    "IsSpellTarget": [
      {
        "name": "IsSpellTarget",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (instance:GetCustomObject():IsSpellTarget()) then",
        "retail": true
      }
    ],
    "ToolTip_DamageDone": [
      {
        "name": "ToolTip_DamageDone",
        "count": 3,
        "confidence": 0.6,
        "sample": "actor:ToolTip_DamageDone (instance)",
        "retail": true
      }
    ],
    "GetSpellTableFuncCreator": [
      {
        "name": "GetSpellTableFuncCreator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function spellContainerClass:GetSpellTableFuncCreator(containerType)",
        "retail": true
      }
    ],
    "HasTwoOrMoreSpells": [
      {
        "name": "HasTwoOrMoreSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function spellContainerClass:HasTwoOrMoreSpells()",
        "retail": true
      }
    ],
    "CreateActorLastEventTable": [
      {
        "name": "CreateActorLastEventTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CreateActorLastEventTable() --[[exported]]",
        "retail": true
      }
    ],
    "SortGroup": [
      {
        "name": "Details.SortGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortGroup(container, keyName2) --[[exported]]",
        "retail": true
      }
    ],
    "SortKeyGroup": [
      {
        "name": "Details.SortKeyGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortKeyGroup(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "SortKeySimple": [
      {
        "name": "Details.SortKeySimple",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortKeySimple(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "SortByRealTimeDps": [
      {
        "name": "Details.SortByRealTimeDps",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortByRealTimeDps(actor1, actor2)",
        "retail": true
      }
    ],
    "ContainerSort": [
      {
        "name": "ContainerSort",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ContainerSort(container, amount, keyName2) --[[exported]]",
        "retail": true
      }
    ],
    "IsFriendlyNpc": [
      {
        "name": "IsFriendlyNpc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsFriendlyNpc() --[[exported]]",
        "retail": true
      }
    ],
    "GetTimeInCombat": [
      {
        "name": "GetTimeInCombat",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetTimeInCombat(petOwner) --[[exported]]",
        "retail": true
      }
    ],
    "ContainerSortEnemies": [
      {
        "name": "ContainerSortEnemies",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ContainerSortEnemies(container, amount, keyName2) --[[exported]]",
        "retail": true
      }
    ],
    "Sort1": [
      {
        "name": "Details.Sort1",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Sort1(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "Sort2": [
      {
        "name": "Details.Sort2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Sort2(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "Sort3": [
      {
        "name": "Details.Sort3",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Sort3(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "Sort4": [
      {
        "name": "Details.Sort4",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Sort4(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "Sort4Reverse": [
      {
        "name": "Details.Sort4Reverse",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Sort4Reverse(table1, table2) --[[exported]]",
        "retail": true
      }
    ],
    "GameTooltipSetSpellByID": [
      {
        "name": "GameTooltipSetSpellByID",
        "count": 12,
        "confidence": 1.0,
        "sample": "function Details:GameTooltipSetSpellByID(spellId) --[[exported]]",
        "retail": true
      }
    ],
    "RefreshDpsRealTime": [
      {
        "name": "RefreshDpsRealTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:RefreshDpsRealTime(tableWithActors)",
        "retail": true
      }
    ],
    "ContainerRefreshDps": [
      {
        "name": "ContainerRefreshDps",
        "count": 4,
        "confidence": 0.8,
        "sample": "function damageClass:ContainerRefreshDps(tableWithActors, combatTime)",
        "retail": true
      }
    ],
    "RefreshBarraBySpell": [
      {
        "name": "RefreshBarraBySpell",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshBarraBySpell(tabela, barra, instancia)",
        "retail": true
      }
    ],
    "AtualizarBySpell": [
      {
        "name": "AtualizarBySpell",
        "count": 3,
        "confidence": 0.6,
        "sample": "damageClass:AtualizarBySpell(tabela, tabela.minha_barra, barra.colocacao, instancia)",
        "retail": true
      }
    ],
    "ShowDTBSInWindow": [
      {
        "name": "ShowDTBSInWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ShowDTBSInWindow(spell, instance) --for hold shift key and click, show players which took damage from this spell",
        "retail": true
      }
    ],
    "ReportSingleDTBSLine": [
      {
        "name": "ReportSingleDTBSLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function damageClass:ReportSingleDTBSLine(spell, instance, ShiftKeyDown, ControlKeyDown)",
        "retail": true
      }
    ],
    "OpenAuraPanel": [
      {
        "name": "OpenAuraPanel",
        "count": 9,
        "confidence": 1.0,
        "sample": "return Details:OpenAuraPanel(spell[1], spellname, spellicon)",
        "retail": true
      }
    ],
    "FormatReportLines": [
      {
        "name": "FormatReportLines",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details:FormatReportLines(report_table, bs_tooltip_table, DTBS_format_name, DTBS_format_amount)",
        "retail": true
      }
    ],
    "RefreshBarraFrags": [
      {
        "name": "RefreshBarraFrags",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshBarraFrags(tabela, barra, instancia)",
        "retail": true
      }
    ],
    "AtualizarFrags": [
      {
        "name": "AtualizarFrags",
        "count": 3,
        "confidence": 0.6,
        "sample": "damageClass:AtualizarFrags(tabela, tabela.minha_barra, barra.colocacao, instancia)",
        "retail": true
      }
    ],
    "ShowVoidZonesInWindow": [
      {
        "name": "ShowVoidZonesInWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function ShowVoidZonesInWindow(actor, instance)",
        "retail": true
      }
    ],
    "ReportSingleVoidZoneLine": [
      {
        "name": "ReportSingleVoidZoneLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function damageClass:ReportSingleVoidZoneLine(actor, instance, ShiftKeyDown, ControlKeyDown)",
        "retail": true
      }
    ],
    "RefreshBarraVoidZone": [
      {
        "name": "RefreshBarraVoidZone",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshBarraVoidZone(tabela, barra, instancia)",
        "retail": true
      }
    ],
    "AtualizarVoidZone": [
      {
        "name": "AtualizarVoidZone",
        "count": 3,
        "confidence": 0.6,
        "sample": "tabela:AtualizarVoidZone(tabela.minha_barra, barra.colocacao, instancia)",
        "retail": true
      }
    ],
    "GetNumLinesShown": [
      {
        "name": "GetNumLinesShown",
        "count": 5,
        "confidence": 1.0,
        "sample": "for lineId = 1, self:GetNumLinesShown() do",
        "retail": true
      }
    ],
    "TruncateTextSafe": [
      {
        "name": "TruncateTextSafe",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsFramework:TruncateTextSafe(playerNameFontString, self.cached_bar_width - totalWidth) --this avoid truncated strings with ...",
        "retail": true
      }
    ],
    "GetRunTime": [
      {
        "name": "GetRunTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "combatTime = currentCombat:GetRunTime()",
        "retail": true
      }
    ],
    "RefreshLineValue": [
      {
        "name": "RefreshLineValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:RefreshLineValue(thisLine, instanceObject, previousData, bForceRefresh, percentNumber, bUseAnimations, total, instanceObject.top)",
        "retail": true
      }
    ],
    "ShowExtraStatusbar": [
      {
        "name": "ShowExtraStatusbar",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:ShowExtraStatusbar(thisLine, amount, extraAmount, totalAmount, topAmount, instanceObject, onEnterFunc, onLeaveFunc)",
        "retail": true
      }
    ],
    "GenerateActorInfo": [
      {
        "name": "GenerateActorInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "--[[GLOBAL]] DETAILS_FAILED_ACTOR = Details:GenerateActorInfo(self, sResult, bIncludeStackTrace) --avoid the game gc and details gc from destroying the actor info",
        "retail": true
      }
    ],
    "PredictedAugSpellsOnEnter": [
      {
        "name": "PredictedAugSpellsOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function damageClass.PredictedAugSpellsOnEnter(self)",
        "retail": true
      }
    ],
    "AddClassIconToText": [
      {
        "name": "AddClassIconToText",
        "count": 7,
        "confidence": 1.0,
        "sample": "targetName = detailsFramework:AddClassIconToText(targetName, targetName, targetClass)",
        "retail": true
      }
    ],
    "GetSpellTexture": [
      {
        "name": "GetSpellTexture",
        "count": 4,
        "confidence": 0.8,
        "sample": "local spellIcon = GetSpellTexture(372571)",
        "retail": true
      },
      {
        "name": "C_Spell.GetSpellTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "local GetSpellTexture = GetSpellTexture or function(...) return C_Spell.GetSpellTexture(...) end",
        "retail": true
      }
    ],
    "PredictedAugSpellsOnLeave": [
      {
        "name": "PredictedAugSpellsOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function damageClass.PredictedAugSpellsOnLeave(self)",
        "retail": true
      }
    ],
    "ToolTip_DamageTaken": [
      {
        "name": "ToolTip_DamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTip_DamageTaken(instance, numero, barra, keydown)",
        "retail": true
      }
    ],
    "ToolTip_Enemies": [
      {
        "name": "ToolTip_Enemies",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTip_Enemies(instance, numero, barra, keydown)",
        "retail": true
      }
    ],
    "ToolTip_FriendlyFire": [
      {
        "name": "ToolTip_FriendlyFire",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTip_FriendlyFire(instance, numero, barra, keydown)",
        "retail": true
      }
    ],
    "ReportEnemyDamageTaken": [
      {
        "name": "ReportEnemyDamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:ReportEnemyDamageTaken(actor, instance, ShiftKeyDown, ControlKeyDown, fromFrags)",
        "retail": true
      }
    ],
    "ReportSingleFragsLine": [
      {
        "name": "ReportSingleFragsLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function damageClass:ReportSingleFragsLine(frag, instance, ShiftKeyDown, ControlKeyDown)",
        "retail": true
      }
    ],
    "GetSkinTexture": [
      {
        "name": "GetSkinTexture",
        "count": 5,
        "confidence": 1.0,
        "sample": "GameCooltip:AddIcon(instanceObject:GetSkinTexture(), 1, 1, 14, 14, 0.005859375 + half, 0.025390625 - half, 0.3623046875, 0.3818359375)",
        "retail": true
      }
    ],
    "MontaInfoDamageDone": [
      {
        "name": "MontaInfoDamageDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaInfoDamageDone() --has new code for the new destails window | left scroll and 6 blocks implemented",
        "retail": true
      }
    ],
    "MontaInfoDamageTaken": [
      {
        "name": "MontaInfoDamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaInfoDamageTaken() --has new code for the new destails window | left and right scrolls implemented",
        "retail": true
      }
    ],
    "MontaInfoFriendlyFire": [
      {
        "name": "MontaInfoFriendlyFire",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaInfoFriendlyFire() --has new code for the new destails window | left scroll implemeneted(need to implemente the right scroll yet)",
        "retail": true
      }
    ],
    "MontaDetalhesDamageDone": [
      {
        "name": "MontaDetalhesDamageDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesDamageDone(spellid, barra, instancia) --deprecated",
        "retail": true
      }
    ],
    "MontaDetalhesDamageTaken": [
      {
        "name": "MontaDetalhesDamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesDamageTaken(spellid, barra, instancia)",
        "retail": true
      }
    ],
    "MontaDetalhesFriendlyFire": [
      {
        "name": "MontaDetalhesFriendlyFire",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesFriendlyFire(spellid, barra, instancia)",
        "retail": true
      }
    ],
    "MontaDetalhesEnemy": [
      {
        "name": "MontaDetalhesEnemy",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesEnemy(spellid, barra, instancia)",
        "retail": true
      }
    ],
    "BuildFriendlySpellListFromAgressor": [
      {
        "name": "BuildFriendlySpellListFromAgressor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass.BuildFriendlySpellListFromAgressor(friendlyFireAggressorActor, targetName)",
        "retail": true
      }
    ],
    "GetCombatFromBreakdownWindow": [
      {
        "name": "GetCombatFromBreakdownWindow",
        "count": 9,
        "confidence": 1.0,
        "sample": "local combatObject = Details:GetCombatFromBreakdownWindow()",
        "retail": true
      }
    ],
    "BuildDamageTakenSpellListFromAgressor": [
      {
        "name": "BuildDamageTakenSpellListFromAgressor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:BuildDamageTakenSpellListFromAgressor(aggressorActor)",
        "retail": true
      }
    ],
    "BuildDamageTakenSpellList": [
      {
        "name": "BuildDamageTakenSpellList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:BuildDamageTakenSpellList()",
        "retail": true
      }
    ],
    "CreateSpellTable": [
      {
        "name": "Details222.DamageSpells.CreateSpellTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "local newSpellTable = Details222.DamageSpells.CreateSpellTable(spellId)",
        "retail": true
      },
      {
        "name": "Details.CreateSpellTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.CreateSpellTable(spellId, cleuToken)",
        "retail": true
      }
    ],
    "MontaTooltipDamageTaken": [
      {
        "name": "MontaTooltipDamageTaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not thisLine.minha_tabela:MontaTooltipDamageTaken(thisLine, index)) then",
        "retail": true
      }
    ],
    "BuildSpellDetails": [
      {
        "name": "BuildSpellDetails",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:BuildSpellDetails(spellBar, spellBlockContainer, blockIndex, summaryBlock, spellId, combatTime, actorName, spellTable, trinketData, combatObject)",
        "retail": true
      }
    ],
    "GetTrinketProcsForPlayer": [
      {
        "name": "GetTrinketProcsForPlayer",
        "count": 2,
        "confidence": 0.4,
        "sample": "local trinketProcs = combatObject:GetTrinketProcsForPlayer(actorName)",
        "retail": true
      }
    ],
    "GetBlock": [
      {
        "name": "GetBlock",
        "count": 11,
        "confidence": 1.0,
        "sample": "local empowerBlock = spellBlockContainer:GetBlock(blockIndex)",
        "retail": true
      }
    ],
    "GetCritPercent": [
      {
        "name": "Details.SpellTableMixin.GetCritPercent",
        "count": 2,
        "confidence": 0.4,
        "sample": "local percent = Details.SpellTableMixin.GetCritPercent(spellTable)",
        "retail": true
      }
    ],
    "GetCritAverage": [
      {
        "name": "Details.SpellTableMixin.GetCritAverage",
        "count": 1,
        "confidence": 0.2,
        "sample": "local critAverage = Details.SpellTableMixin.GetCritAverage(spellTable)",
        "retail": true
      }
    ],
    "BuildPlayerDetailsSpellChart": [
      {
        "name": "BuildPlayerDetailsSpellChart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:BuildPlayerDetailsSpellChart()",
        "retail": true
      }
    ],
    "ShowChart": [
      {
        "name": "ShowChart",
        "count": 5,
        "confidence": 1.0,
        "sample": "function playerDetailSmallChart.ShowChart(parent, combatObject, cleuData, playerName, targetName, spellId, ...)",
        "retail": true
      },
      {
        "name": "DetailsMythicDungeonChartHandler.ShowChart",
        "count": 3,
        "confidence": 0.6,
        "sample": "-- /run _G.DetailsMythicDungeonChartHandler.ShowChart(); DetailsMythicDungeonChartFrame.ShowChartFrame()",
        "retail": true
      }
    ],
    "ClearCacheTables": [
      {
        "name": "ClearCacheTables",
        "count": 2,
        "confidence": 0.4,
        "sample": "function damageClass:ClearCacheTables()",
        "retail": true
      }
    ],
    "SumDamageActors": [
      {
        "name": "Details.SumDamageActors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SumDamageActors(actor1, actor2, actorContainer) --not called anywhere, can be deprecated",
        "retail": true
      }
    ],
    "SortIfHaveKey": [
      {
        "name": "Details.SortIfHaveKey",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortIfHaveKey(table1, table2)",
        "retail": true
      }
    ],
    "SortGroupIfHaveKey": [
      {
        "name": "Details.SortGroupIfHaveKey",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortGroupIfHaveKey(table1, table2)",
        "retail": true
      }
    ],
    "SortGroupMisc": [
      {
        "name": "Details.SortGroupMisc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortGroupMisc(container, keyName2)",
        "retail": true
      }
    ],
    "SortKeyGroupMisc": [
      {
        "name": "Details.SortKeyGroupMisc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortKeyGroupMisc(table1, table2)",
        "retail": true
      }
    ],
    "SortKeySimpleMisc": [
      {
        "name": "Details.SortKeySimpleMisc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.SortKeySimpleMisc(table1, table2)",
        "retail": true
      }
    ],
    "ContainerSortMisc": [
      {
        "name": "ContainerSortMisc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ContainerSortMisc(container, amount, keyName2)",
        "retail": true
      }
    ],
    "ShowDeathTooltip": [
      {
        "name": "Details.ShowDeathTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.ShowDeathTooltip(instance, lineFrame, combatObject, deathTable) --~death",
        "retail": true
      }
    ],
    "ShowDeathTooltipFunction": [
      {
        "name": "Details.ShowDeathTooltipFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "local builtTooltip = Details.ShowDeathTooltipFunction(instance, barFrame, instance:GetShowingCombat(), deathTable)",
        "retail": true
      }
    ],
    "RefreshBarraMorte": [
      {
        "name": "RefreshBarraMorte",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshBarraMorte(morte, barra, instancia)",
        "retail": true
      }
    ],
    "UpdateDeathRow": [
      {
        "name": "UpdateDeathRow",
        "count": 4,
        "confidence": 0.8,
        "sample": "atributo_misc:UpdateDeathRow(morte, morte.minha_barra, barra.colocacao, instancia)",
        "retail": true
      }
    ],
    "SendReportLines": [
      {
        "name": "SendReportLines",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:SendReportLines(t)",
        "retail": true
      }
    ],
    "ReportSingleDeadLine": [
      {
        "name": "ReportSingleDeadLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function atributo_misc:ReportSingleDeadLine(morte, instancia)",
        "retail": true
      }
    ],
    "SendReportWindow": [
      {
        "name": "SendReportWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:SendReportWindow(ReportSingleDeathFunc, nil, nil, true)",
        "retail": true
      }
    ],
    "ReportSingleCooldownLine": [
      {
        "name": "ReportSingleCooldownLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function atributo_misc:ReportSingleCooldownLine(misc_actor, instancia)",
        "retail": true
      }
    ],
    "ReportSingleBuffUptimeLine": [
      {
        "name": "ReportSingleBuffUptimeLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function atributo_misc:ReportSingleBuffUptimeLine(misc_actor, instance)",
        "retail": true
      }
    ],
    "ReportSingleDebuffUptimeLine": [
      {
        "name": "ReportSingleDebuffUptimeLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function atributo_misc:ReportSingleDebuffUptimeLine(misc_actor, instance)",
        "retail": true
      }
    ],
    "ToolTipInterrupt": [
      {
        "name": "ToolTipInterrupt",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipInterrupt(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "ToolTipCC": [
      {
        "name": "ToolTipCC",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipCC(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "ToolTipRess": [
      {
        "name": "ToolTipRess",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipRess(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "ToolTipDispell": [
      {
        "name": "ToolTipDispell",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipDispell(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "ToolTipDefensiveCooldowns": [
      {
        "name": "ToolTipDefensiveCooldowns",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipDefensiveCooldowns(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "ToolTipBuffUptime": [
      {
        "name": "ToolTipBuffUptime",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipBuffUptime(instance, barFrame)",
        "retail": true
      }
    ],
    "ToolTipDebuffUptime": [
      {
        "name": "ToolTipDebuffUptime",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipDebuffUptime(instance, numero, barFrame, keydown)",
        "retail": true
      }
    ],
    "MontaInfoInterrupt": [
      {
        "name": "MontaInfoInterrupt",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaInfoInterrupt()",
        "retail": true
      }
    ],
    "MontaDetalhesInterrupt": [
      {
        "name": "MontaDetalhesInterrupt",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesInterrupt(spellid, barra)",
        "retail": true
      }
    ],
    "IgnorePet": [
      {
        "name": "IgnorePet",
        "count": 2,
        "confidence": 0.4,
        "sample": "function petContainer.IgnorePet(petGuid)",
        "retail": true
      }
    ],
    "RemovePetFrom_UNITPET": [
      {
        "name": "RemovePetFrom_UNITPET",
        "count": 2,
        "confidence": 0.4,
        "sample": "petContainer.RemovePetFrom_UNITPET(petGuid)",
        "retail": true
      }
    ],
    "IsPetInCache": [
      {
        "name": "IsPetInCache",
        "count": 7,
        "confidence": 1.0,
        "sample": "function petContainer.IsPetInCache(petGuid)",
        "retail": true
      }
    ],
    "AddPetByTable": [
      {
        "name": "AddPetByTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "function petContainer.AddPetByTable(petData)",
        "retail": true
      }
    ],
    "GetPetOwner": [
      {
        "name": "Details222.Pets.GetPetOwner",
        "count": 2,
        "confidence": 0.4,
        "sample": "local ownerName, ownerGuid, ownerFlags = Details222.Pets.GetPetOwner(petGuid, petName)",
        "retail": true
      }
    ],
    "SavePetFrom_UNITPET": [
      {
        "name": "SavePetFrom_UNITPET",
        "count": 2,
        "confidence": 0.4,
        "sample": "function petContainer.SavePetFrom_UNITPET(unitGuid, petGuid)",
        "retail": true
      }
    ],
    "IsPetFrom_UNITPET": [
      {
        "name": "IsPetFrom_UNITPET",
        "count": 2,
        "confidence": 0.4,
        "sample": "function petContainer.IsPetFrom_UNITPET(unitGuid)",
        "retail": true
      }
    ],
    "GetUnitPetFrom_UNITPET": [
      {
        "name": "GetUnitPetFrom_UNITPET",
        "count": 2,
        "confidence": 0.4,
        "sample": "function petContainer.GetUnitPetFrom_UNITPET(unitGuid)",
        "retail": true
      }
    ],
    "UpdatePets": [
      {
        "name": "UpdatePets",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UpdatePets()",
        "retail": true
      }
    ],
    "AddMiss": [
      {
        "name": "AddMiss",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classDamageSpellTable:AddMiss(serial, targetName, targetFlags, sourceName, missType)",
        "retail": true
      }
    ],
    "RestartInstances": [
      {
        "name": "RestartInstances",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:RestartInstances()",
        "retail": true
      }
    ],
    "ReativarInstancias": [
      {
        "name": "ReativarInstancias",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:ReativarInstancias()",
        "retail": true
      }
    ],
    "RestauraJanela": [
      {
        "name": "RestauraJanela",
        "count": 5,
        "confidence": 1.0,
        "sample": "instancia:RestauraJanela(index, nil, true)",
        "retail": true
      }
    ],
    "InstanciaCallFunctionOffline": [
      {
        "name": "InstanciaCallFunctionOffline",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:InstanciaCallFunctionOffline(func, ...)",
        "retail": true
      }
    ],
    "InstanceGroupCall": [
      {
        "name": "InstanceGroupCall",
        "count": 11,
        "confidence": 1.0,
        "sample": "function Details:InstanceGroupCall(instance, funcName, ...)",
        "retail": true
      }
    ],
    "InstanceGroupEditSetting": [
      {
        "name": "InstanceGroupEditSetting",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:InstanceGroupEditSetting(instance, keyName, value)",
        "retail": true
      }
    ],
    "InstanceGroupEditSettingOnTable": [
      {
        "name": "InstanceGroupEditSettingOnTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:InstanceGroupEditSettingOnTable(instance, table1Key, table2Key, table3Key, value)",
        "retail": true
      }
    ],
    "SetSegmentId": [
      {
        "name": "SetSegmentId",
        "count": 2,
        "confidence": 0.4,
        "sample": "instance:SetSegmentId(DETAILS_SEGMENTID_CURRENT)",
        "retail": true
      }
    ],
    "RefreshCombat": [
      {
        "name": "RefreshCombat",
        "count": 7,
        "confidence": 1.0,
        "sample": "instance:RefreshCombat()",
        "retail": true
      }
    ],
    "SetSegment": [
      {
        "name": "SetSegment",
        "count": 7,
        "confidence": 1.0,
        "sample": "instance:SetSegment(DETAILS_SEGMENTID_CURRENT, bForceChange)",
        "retail": true
      }
    ],
    "IsBreakdownWindowOpen": [
      {
        "name": "IsBreakdownWindowOpen",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (Details:IsBreakdownWindowOpen()) then",
        "retail": true
      }
    ],
    "CheckIntegrity": [
      {
        "name": "CheckIntegrity",
        "count": 1,
        "confidence": 0.2,
        "sample": "instance:CheckIntegrity()",
        "retail": true
      }
    ],
    "OnModeChanged": [
      {
        "name": "Details222.Instances.OnModeChanged",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.Instances.OnModeChanged(instance)",
        "retail": true
      }
    ],
    "UnFreeze": [
      {
        "name": "UnFreeze",
        "count": 6,
        "confidence": 1.0,
        "sample": "instance:UnFreeze()",
        "retail": true
      }
    ],
    "ValidateAttribute": [
      {
        "name": "Details222.Instances.ValidateAttribute",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (Details222.Instances.ValidateAttribute(attributeId, subAttributeId)) then",
        "retail": true
      }
    ],
    "CloseBreakdownWindow": [
      {
        "name": "CloseBreakdownWindow",
        "count": 16,
        "confidence": 1.0,
        "sample": "Details:CloseBreakdownWindow()",
        "retail": true
      }
    ],
    "DumpActorInfo": [
      {
        "name": "DumpActorInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:DumpActorInfo(actor)",
        "retail": true
      }
    ],
    "GetSoloMode": [
      {
        "name": "GetSoloMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetSoloMode()",
        "retail": true
      }
    ],
    "GetRaidMode": [
      {
        "name": "GetRaidMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetRaidMode()",
        "retail": true
      }
    ],
    "IsSoloMode": [
      {
        "name": "IsSoloMode",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:IsSoloMode(offline)",
        "retail": true
      }
    ],
    "IsRaidMode": [
      {
        "name": "IsRaidMode",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:IsRaidMode()",
        "retail": true
      }
    ],
    "IsGroupMode": [
      {
        "name": "IsGroupMode",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:IsGroupMode()",
        "retail": true
      }
    ],
    "IsNormalMode": [
      {
        "name": "IsNormalMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsNormalMode()",
        "retail": true
      }
    ],
    "ResetAttribute": [
      {
        "name": "ResetAttribute",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:ResetAttribute()",
        "retail": true
      }
    ],
    "IsShowing": [
      {
        "name": "IsShowing",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsShowing(segmentId, displayId, subDisplayId)",
        "retail": true
      }
    ],
    "GetMaxInstancesAmount": [
      {
        "name": "GetMaxInstancesAmount",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetMaxInstancesAmount()",
        "retail": true
      }
    ],
    "SetMaxInstancesAmount": [
      {
        "name": "SetMaxInstancesAmount",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetMaxInstancesAmount (amount)",
        "retail": true
      }
    ],
    "GetFreeInstancesAmount": [
      {
        "name": "GetFreeInstancesAmount",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetFreeInstancesAmount()",
        "retail": true
      }
    ],
    "GetNumRows": [
      {
        "name": "GetNumRows",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:GetNumRows()",
        "retail": true
      }
    ],
    "GetRow": [
      {
        "name": "GetRow",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetRow (index)",
        "retail": true
      }
    ],
    "GetAllLines": [
      {
        "name": "GetAllLines",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:GetAllLines()",
        "retail": true
      }
    ],
    "GetTop5Actors": [
      {
        "name": "GetTop5Actors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetTop5Actors(displayId)",
        "retail": true
      }
    ],
    "GetActorBySubDisplayAndRank": [
      {
        "name": "GetActorBySubDisplayAndRank",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetActorBySubDisplayAndRank(displayId, subDisplayId, rankIndex)",
        "retail": true
      }
    ],
    "GetActorByRank": [
      {
        "name": "GetActorByRank",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetActorByRank(displayId, rankIndex)",
        "retail": true
      }
    ],
    "DesativarInstancia": [
      {
        "name": "DesativarInstancia",
        "count": 5,
        "confidence": 1.0,
        "sample": "return self:DesativarInstancia(all)",
        "retail": true
      }
    ],
    "Shutdown": [
      {
        "name": "Shutdown",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:Shutdown(all)",
        "retail": true
      }
    ],
    "GetNumWindows": [
      {
        "name": "GetNumWindows",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetNumWindows()",
        "retail": true
      }
    ],
    "CloseMe": [
      {
        "name": "CloseMe",
        "count": 10,
        "confidence": 1.0,
        "sample": "Details.switch:CloseMe()",
        "retail": true
      }
    ],
    "Desagrupar": [
      {
        "name": "Desagrupar",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:Desagrupar (-1)",
        "retail": true
      }
    ],
    "InstanciaFadeBarras": [
      {
        "name": "InstanciaFadeBarras",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:InstanciaFadeBarras (instancia, segmento)",
        "retail": true
      }
    ],
    "CheckCoupleWindows": [
      {
        "name": "CheckCoupleWindows",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CheckCoupleWindows (instance1, instance2)",
        "retail": true
      }
    ],
    "VPL": [
      {
        "name": "Details.VPL",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)",
        "retail": true
      },
      {
        "name": "VPL",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function VPL(instance, esta_instancia)",
        "retail": true
      }
    ],
    "VPB": [
      {
        "name": "Details.VPB",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)",
        "retail": true
      },
      {
        "name": "VPB",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function VPB(instance, esta_instancia)",
        "retail": true
      }
    ],
    "VPR": [
      {
        "name": "Details.VPR",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)",
        "retail": true
      },
      {
        "name": "VPR",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function VPR(instance, esta_instancia)",
        "retail": true
      }
    ],
    "VPT": [
      {
        "name": "Details.VPT",
        "count": 1,
        "confidence": 0.2,
        "sample": "local _R, _T, _L, _B = Details.VPL (instance2, instance1), Details.VPB (instance2, instance1), Details.VPR (instance2, instance1), Details.VPT (instance2, instance1)",
        "retail": true
      },
      {
        "name": "VPT",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function VPT(instance, esta_instancia)",
        "retail": true
      }
    ],
    "MakeInstanceGroup": [
      {
        "name": "MakeInstanceGroup",
        "count": 4,
        "confidence": 0.8,
        "sample": "instance2:MakeInstanceGroup ({false, false, 1, false})",
        "retail": true
      }
    ],
    "ReopenAllWindows": [
      {
        "name": "ReopenAllWindows",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ReopenAllWindows(...)",
        "retail": true
      }
    ],
    "TravasInstancias": [
      {
        "name": "TravasInstancias",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:TravasInstancias()",
        "retail": true
      }
    ],
    "DestravarInstancias": [
      {
        "name": "DestravarInstancias",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DestravarInstancias()",
        "retail": true
      }
    ],
    "SetMenuAlpha": [
      {
        "name": "SetMenuAlpha",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:SetMenuAlpha()",
        "retail": true
      }
    ],
    "ToolbarSide": [
      {
        "name": "ToolbarSide",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:ToolbarSide()",
        "retail": true
      }
    ],
    "ApagarInstancia": [
      {
        "name": "ApagarInstancia",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ApagarInstancia (ID)",
        "retail": true
      }
    ],
    "QuantasInstancias": [
      {
        "name": "QuantasInstancias",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:QuantasInstancias()",
        "retail": true
      }
    ],
    "DeleteInstance": [
      {
        "name": "DeleteInstance",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DeleteInstance (id)",
        "retail": true
      }
    ],
    "CreateNewInstance": [
      {
        "name": "CreateNewInstance",
        "count": 3,
        "confidence": 0.6,
        "sample": "local new_instance = Details:CreateNewInstance (next_id)",
        "retail": true
      }
    ],
    "EstaAgrupada": [
      {
        "name": "EstaAgrupada",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:EstaAgrupada(esta_instancia, lado) --lado //// 1 = encostou na esquerda // 2 = escostou emaixo // 3 = encostou na direita // 4 = encostou em cima",
        "retail": true
      }
    ],
    "SetWindowScale": [
      {
        "name": "SetWindowScale",
        "count": 4,
        "confidence": 0.8,
        "sample": "instance:SetWindowScale (scale)",
        "retail": true
      }
    ],
    "ShowMe": [
      {
        "name": "ShowMe",
        "count": 29,
        "confidence": 1.0,
        "sample": "Details.popup:ShowMe(instancia.break_snap_button, \"tooltip\", \"Interface\\\\Buttons\\\\LockButton-Unlocked-Up\", Loc [\"STRING_UNLOCK\"], 150, Details.temp_table1)",
        "retail": true
      }
    ],
    "UIFrameFlash": [
      {
        "name": "UIFrameFlash",
        "count": 1,
        "confidence": 0.2,
        "sample": "--UIFrameFlash (instancia.break_snap_button, .5, .5, 5, false, 0, 0)",
        "retail": true
      }
    ],
    "SnapTextures": [
      {
        "name": "SnapTextures",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SnapTextures (remove)",
        "retail": true
      }
    ],
    "CriaJanelaPrincipal": [
      {
        "name": "CriaJanelaPrincipal",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _baseframe, _bgframe, _bgframe_display, _scrollframe = gump:CriaJanelaPrincipal(instanceId, newInstance, true)",
        "retail": true
      }
    ],
    "ShowSideBars": [
      {
        "name": "ShowSideBars",
        "count": 5,
        "confidence": 1.0,
        "sample": "newInstance:ShowSideBars()",
        "retail": true
      }
    ],
    "RestoreWindow": [
      {
        "name": "RestoreWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RestoreWindow(index, temp, loadOnly)",
        "retail": true
      }
    ],
    "InstanceColor": [
      {
        "name": "InstanceColor",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:InstanceColor (self.color)",
        "retail": true
      }
    ],
    "SwitchTo": [
      {
        "name": "SwitchTo",
        "count": 9,
        "confidence": 1.0,
        "sample": "function Details:SwitchTo (switch_table, nosave)",
        "retail": true
      }
    ],
    "GetRaidPluginName": [
      {
        "name": "GetRaidPluginName",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.auto_switch_to_old = {self.modo, self.atributo, self.sub_atributo, self.segmento, self:GetRaidPluginName(), Details.SoloTables.Mode}",
        "retail": true
      }
    ],
    "CheckSegmentForSwitchOnCombatStart": [
      {
        "name": "CheckSegmentForSwitchOnCombatStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CheckSegmentForSwitchOnCombatStart()",
        "retail": true
      }
    ],
    "ApplySavedSkin": [
      {
        "name": "ApplySavedSkin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ApplySavedSkin (style)",
        "retail": true
      }
    ],
    "UpdateCombatObjectInUse": [
      {
        "name": "UpdateCombatObjectInUse",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdateCombatObjectInUse(self)",
        "retail": true
      }
    ],
    "InstanceRefreshRows": [
      {
        "name": "InstanceRefreshRows",
        "count": 14,
        "confidence": 1.0,
        "sample": "self:InstanceRefreshRows(instance)",
        "retail": true
      }
    ],
    "SetBackgroundColor": [
      {
        "name": "SetBackgroundColor",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:SetBackgroundColor(...)",
        "retail": true
      }
    ],
    "SetBackgroundAlpha": [
      {
        "name": "SetBackgroundAlpha",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SetBackgroundAlpha (alpha)",
        "retail": true
      }
    ],
    "PostponeSwitchToCurrent": [
      {
        "name": "PostponeSwitchToCurrent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:PostponeSwitchToCurrent(instance)",
        "retail": true
      }
    ],
    "InstanceMsg": [
      {
        "name": "InstanceMsg",
        "count": 3,
        "confidence": 0.6,
        "sample": "instancia:InstanceMsg(Loc [\"STRING_FREEZE\"], [[Interface\\CHARACTERFRAME\\Disconnect-Icon]], \"silver\")",
        "retail": true
      }
    ],
    "AtualizaSegmentos_AfterCombat": [
      {
        "name": "AtualizaSegmentos_AfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AtualizaSegmentos_AfterCombat(instancia)",
        "retail": true
      }
    ],
    "MontaRaidOption": [
      {
        "name": "MontaRaidOption",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:MontaRaidOption (instancia)",
        "retail": true
      }
    ],
    "MontaSoloOption": [
      {
        "name": "MontaSoloOption",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:MontaSoloOption (instancia)",
        "retail": true
      }
    ],
    "MontaAtributosOption": [
      {
        "name": "MontaAtributosOption",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:MontaAtributosOption (instancia, func)",
        "retail": true
      }
    ],
    "GetDpsHps": [
      {
        "name": "GetDpsHps",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function GetDpsHps (_thisActor, key)",
        "retail": true
      }
    ],
    "GetChecked": [
      {
        "name": "GetChecked",
        "count": 5,
        "confidence": 1.0,
        "sample": "local is_current = _G [\"Details_Report_CB_1\"]:GetChecked()",
        "retail": true
      }
    ],
    "UnpackMythicDungeonInfo": [
      {
        "name": "UnpackMythicDungeonInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "local isMythicOverallSegment, segmentID, mythicLevel, EJID, mapID, zoneName, encounterID, encounterName, startedAt, endedAt, runID = Details:UnpackMythicDungeonInfo (mythicDungeonInfo)",
        "retail": true
      }
    ],
    "AddHistoryLine": [
      {
        "name": "AddHistoryLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "editbox:AddHistoryLine (texto)",
        "retail": true
      }
    ],
    "DelayUpdateReportWindowRecentlyReported": [
      {
        "name": "DelayUpdateReportWindowRecentlyReported",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:DelayUpdateReportWindowRecentlyReported()",
        "retail": true
      }
    ],
    "SendReportTextWindow": [
      {
        "name": "SendReportTextWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:SendReportTextWindow (linhas)",
        "retail": true
      }
    ],
    "ResetSegmentOverallData": [
      {
        "name": "ResetSegmentOverallData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ResetSegmentOverallData()",
        "retail": true
      }
    ],
    "RemoveSegment": [
      {
        "name": "RemoveSegment",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:RemoveSegment(segmentIndex)",
        "retail": true
      }
    ],
    "RemoveSegmentByCombatObject": [
      {
        "name": "RemoveSegmentByCombatObject",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:RemoveSegmentByCombatObject(combatObject)",
        "retail": true
      }
    ],
    "AddToOverallData": [
      {
        "name": "AddToOverallData",
        "count": 6,
        "confidence": 1.0,
        "sample": "function segmentClass:AddToOverallData(combatObject)",
        "retail": true
      }
    ],
    "CanAddCombatToOverall": [
      {
        "name": "CanAddCombatToOverall",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:CanAddCombatToOverall(combatObject)",
        "retail": true
      }
    ],
    "GetInstanceType": [
      {
        "name": "GetInstanceType",
        "count": 6,
        "confidence": 1.0,
        "sample": "if (combatObject.is_boss and combatObject:GetInstanceType() == \"raid\" and not combatObject.is_pvp) then",
        "retail": true
      }
    ],
    "GetWipeCounter": [
      {
        "name": "GetWipeCounter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetWipeCounter(guildName, encounterId, difficultyId)",
        "retail": true
      }
    ],
    "GetBossHealth": [
      {
        "name": "GetBossHealth",
        "count": 5,
        "confidence": 1.0,
        "sample": "table.sort(allWipeSegmentsInThisBoss, function(a, b) return a:GetBossHealth() < b:GetBossHealth() end)",
        "retail": true
      }
    ],
    "CheckFreeze": [
      {
        "name": "CheckFreeze",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:CheckFreeze(instanceObject, segmentId, combatObject)",
        "retail": true
      }
    ],
    "SetOverallResetOptions": [
      {
        "name": "SetOverallResetOptions",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:SetOverallResetOptions(resetOnNewBoss, resetOnNewChallenge, resetOnLogoff, resetOnNewPVP)",
        "retail": true
      }
    ],
    "ResetDataByCombatType": [
      {
        "name": "ResetDataByCombatType",
        "count": 4,
        "confidence": 0.8,
        "sample": "function segmentClass:ResetDataByCombatType(combatType)",
        "retail": true
      }
    ],
    "ResetInstanceConfigKeepingValues": [
      {
        "name": "ResetInstanceConfigKeepingValues",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:ResetInstanceConfigKeepingValues (maintainsnap)",
        "retail": true
      }
    ],
    "EraseTimeData": [
      {
        "name": "EraseTimeData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCombat:EraseTimeData(name)",
        "retail": true
      }
    ],
    "GetEncounterCleuID": [
      {
        "name": "GetEncounterCleuID",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetEncounterCleuID()",
        "retail": true
      }
    ],
    "GetPlayerDeaths": [
      {
        "name": "GetPlayerDeaths",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetPlayerDeaths(deadPlayerName)",
        "retail": true
      }
    ],
    "GetEncounterName": [
      {
        "name": "GetEncounterName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function classCombat:GetEncounterName()",
        "retail": true
      }
    ],
    "GetBossImage": [
      {
        "name": "GetBossImage",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetBossImage()",
        "retail": true
      }
    ],
    "GetCCCastAmount": [
      {
        "name": "GetCCCastAmount",
        "count": 2,
        "confidence": 0.4,
        "sample": "local amountOfCCCastsByThisActor = self:GetCCCastAmount(actorName)",
        "retail": true
      }
    ],
    "GetDamageTakenBySpells": [
      {
        "name": "GetDamageTakenBySpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCombat:GetDamageTakenBySpells(actorName)",
        "retail": true
      }
    ],
    "GetInterruptCastAmount": [
      {
        "name": "GetInterruptCastAmount",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetInterruptCastAmount(actorName)",
        "retail": true
      }
    ],
    "GetSpellUptime": [
      {
        "name": "GetSpellUptime",
        "count": 3,
        "confidence": 0.6,
        "sample": "function classCombat:GetSpellUptime(actorName, spellId, auraType)",
        "retail": true
      }
    ],
    "GetSegmentSlotId": [
      {
        "name": "GetSegmentSlotId",
        "count": 5,
        "confidence": 1.0,
        "sample": "function classCombat:GetSegmentSlotId()",
        "retail": true
      }
    ],
    "GetCombatIcon": [
      {
        "name": "GetCombatIcon",
        "count": 13,
        "confidence": 1.0,
        "sample": "function classCombat:GetCombatIcon()",
        "retail": true
      }
    ],
    "GetFormattedCombatTime": [
      {
        "name": "GetFormattedCombatTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "local formattedTime = self:GetFormattedCombatTime()",
        "retail": true
      }
    ],
    "GetTryNumber": [
      {
        "name": "GetTryNumber",
        "count": 3,
        "confidence": 0.6,
        "sample": "local tryNumber = self:GetTryNumber()",
        "retail": true
      }
    ],
    "GetCombatTypeName": [
      {
        "name": "GetCombatTypeName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCombat:GetCombatTypeName()",
        "retail": true
      }
    ],
    "GetRunTimeNoDefault": [
      {
        "name": "GetRunTimeNoDefault",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetRunTimeNoDefault()",
        "retail": true
      }
    ],
    "GetBossHealthString": [
      {
        "name": "GetBossHealthString",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetBossHealthString()",
        "retail": true
      }
    ],
    "GetCurrentPhase": [
      {
        "name": "GetCurrentPhase",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCombat:GetCurrentPhase()",
        "retail": true
      }
    ],
    "CopyDeathsFrom": [
      {
        "name": "CopyDeathsFrom",
        "count": 5,
        "confidence": 1.0,
        "sample": "function classCombat.CopyDeathsFrom(combat1, combat2, bMythicPlus)",
        "retail": true
      }
    ],
    "DeleteActor": [
      {
        "name": "DeleteActor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCombat:DeleteActor(attribute, actorName, removeDamageTaken, cannotRemap)",
        "retail": true
      }
    ],
    "CreateNewCombatTable": [
      {
        "name": "CreateNewCombatTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCombat:CreateNewCombatTable()",
        "retail": true
      }
    ],
    "GetNumDeclensionSets": [
      {
        "name": "GetNumDeclensionSets",
        "count": 1,
        "confidence": 0.2,
        "sample": "for declensionSet = 1, GetNumDeclensionSets(playerName, gender) do",
        "retail": true
      }
    ],
    "DeclineName": [
      {
        "name": "DeclineName",
        "count": 1,
        "confidence": 0.2,
        "sample": "local genitive = DeclineName(playerName, gender, declensionSet)",
        "retail": true
      }
    ],
    "FuncaoDeCriacao": [
      {
        "name": "FuncaoDeCriacao",
        "count": 3,
        "confidence": 0.6,
        "sample": "funcao_de_criacao = actorContainer:FuncaoDeCriacao(containerType),",
        "retail": true
      }
    ],
    "GetPlayerMythicPlusRatingSummary": [
      {
        "name": "C_PlayerInfo.GetPlayerMythicPlusRatingSummary",
        "count": 6,
        "confidence": 1.0,
        "sample": "local dungeonPlayerInfo = C_PlayerInfo.GetPlayerMythicPlusRatingSummary(actorName) or {}",
        "retail": true
      }
    ],
    "GetBattlefieldArenaFaction": [
      {
        "name": "GetBattlefieldArenaFaction",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local my_team_color = GetBattlefieldArenaFaction and GetBattlefieldArenaFaction() or 0",
        "retail": true
      }
    ],
    "GetArenaOpponentSpec": [
      {
        "name": "GetArenaOpponentSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "local spec = GetArenaOpponentSpec and GetArenaOpponentSpec(i)",
        "retail": true
      }
    ],
    "AddUnique": [
      {
        "name": "AddUnique",
        "count": 4,
        "confidence": 0.8,
        "sample": "AddUnique(petOwnerObject.pets, actorName)",
        "retail": true
      }
    ],
    "AddToNpcIdCache": [
      {
        "name": "AddToNpcIdCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AddToNpcIdCache(actor) --not called anywhere",
        "retail": true
      }
    ],
    "SortGroupResource": [
      {
        "name": "SortGroupResource",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SortGroupResource (container, keyName2)",
        "retail": true
      }
    ],
    "SortKeyGroupResources": [
      {
        "name": "SortKeyGroupResources",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SortKeyGroupResources (table1, table2)",
        "retail": true
      }
    ],
    "SortKeySimpleResources": [
      {
        "name": "SortKeySimpleResources",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.SortKeySimpleResources (table1, table2)",
        "retail": true
      }
    ],
    "ContainerSortResources": [
      {
        "name": "ContainerSortResources",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:ContainerSortResources (container, amount, keyName2)",
        "retail": true
      }
    ],
    "RefreshBarraResources": [
      {
        "name": "RefreshBarraResources",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function RefreshBarraResources (tabela, barra, instancia)",
        "retail": true
      }
    ],
    "AtualizarResources": [
      {
        "name": "AtualizarResources",
        "count": 3,
        "confidence": 0.6,
        "sample": "tabela:AtualizarResources (tabela.minha_barra, barra.colocacao, instancia)",
        "retail": true
      }
    ],
    "KeyNames": [
      {
        "name": "KeyNames",
        "count": 1,
        "confidence": 0.2,
        "sample": "function atributo_energy:KeyNames (sub_atributo)",
        "retail": true
      }
    ],
    "ToolTipRegenRecebido": [
      {
        "name": "ToolTipRegenRecebido",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:ToolTipRegenRecebido (instancia, numero, barra, keydown)",
        "retail": true
      }
    ],
    "MontaInfoRegenRecebido": [
      {
        "name": "MontaInfoRegenRecebido",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaInfoRegenRecebido()",
        "retail": true
      }
    ],
    "MontaDetalhesRegenRecebido": [
      {
        "name": "MontaDetalhesRegenRecebido",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MontaDetalhesRegenRecebido (spellid, barra)",
        "retail": true
      }
    ],
    "GetCustomClass": [
      {
        "name": "GetCustomClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetCustomClass()",
        "retail": true
      }
    ],
    "DoesCustomDisplayExists": [
      {
        "name": "DoesCustomDisplayExists",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:DoesCustomDisplayExists(customDisplayName)",
        "retail": true
      }
    ],
    "CreateCustomDisplayObject": [
      {
        "name": "CreateCustomDisplayObject",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:CreateCustomDisplayObject(name, icon, searchScript, tooltipScript, totalScript, percentScript)",
        "retail": true
      }
    ],
    "GetNumCustomDisplays": [
      {
        "name": "GetNumCustomDisplays",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetNumCustomDisplays()",
        "retail": true
      }
    ],
    "GetCustomDisplay": [
      {
        "name": "GetCustomDisplay",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetCustomDisplay(index)",
        "retail": true
      }
    ],
    "GetCombatContainerIndex": [
      {
        "name": "GetCombatContainerIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "function classCustom:GetCombatContainerIndex (attribute)",
        "retail": true
      }
    ],
    "GetInstanceCustomActorContainer": [
      {
        "name": "GetInstanceCustomActorContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "local instance_container = classCustom:GetInstanceCustomActorContainer (instanceObject)",
        "retail": true
      }
    ],
    "IsScripted": [
      {
        "name": "IsScripted",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (customObject:IsScripted()) then",
        "retail": true
      }
    ],
    "ResetCustomActorContainer": [
      {
        "name": "ResetCustomActorContainer",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance_container:ResetCustomActorContainer()",
        "retail": true
      }
    ],
    "BuildActorList": [
      {
        "name": "BuildActorList",
        "count": 2,
        "confidence": 0.4,
        "sample": "total, top, amount = classCustom:BuildActorList (func, customObject.source, customObject.target, customObject.spellid, combatObject, combat_container, container_index, instance_container, instanceObject, customObject)",
        "retail": true
      }
    ],
    "Sort": [
      {
        "name": "Sort",
        "count": 3,
        "confidence": 0.6,
        "sample": "instance_container:Sort()",
        "retail": true
      }
    ],
    "UpdateBar": [
      {
        "name": "UpdateBar",
        "count": 5,
        "confidence": 1.0,
        "sample": "instance_container._ActorTable[i]:UpdateBar (barContainer, whichRowLine, percentageType, i, total, top, instance, force, percent_script, total_script, combat, bars_show_data, bars_brackets, bars_separator)",
        "retail": true
      }
    ],
    "CreateCustomActorContainer": [
      {
        "name": "CreateCustomActorContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:CreateCustomActorContainer()",
        "retail": true
      }
    ],
    "UpdateClass": [
      {
        "name": "UpdateClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:UpdateClass(actors)",
        "retail": true
      }
    ],
    "GetAuthor": [
      {
        "name": "GetAuthor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetAuthor()",
        "retail": true
      }
    ],
    "GetDesc": [
      {
        "name": "GetDesc",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetDesc()",
        "retail": true
      }
    ],
    "GetSource": [
      {
        "name": "GetSource",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetSource()",
        "retail": true
      }
    ],
    "GetTarget": [
      {
        "name": "GetTarget",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetTarget()",
        "retail": true
      }
    ],
    "GetSpellId": [
      {
        "name": "GetSpellId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetSpellId()",
        "retail": true
      }
    ],
    "GetScriptToolip": [
      {
        "name": "GetScriptToolip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetScriptToolip()",
        "retail": true
      }
    ],
    "GetScriptTotal": [
      {
        "name": "GetScriptTotal",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetScriptTotal()",
        "retail": true
      }
    ],
    "GetScriptPercent": [
      {
        "name": "GetScriptPercent",
        "count": 2,
        "confidence": 0.4,
        "sample": "function classCustom:GetScriptPercent()",
        "retail": true
      }
    ],
    "SetAuthor": [
      {
        "name": "SetAuthor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:SetAuthor (author)",
        "retail": true
      }
    ],
    "SetDesc": [
      {
        "name": "SetDesc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:SetDesc (desc)",
        "retail": true
      }
    ],
    "SetSource": [
      {
        "name": "SetSource",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:SetSource (source)",
        "retail": true
      }
    ],
    "SetSpellId": [
      {
        "name": "SetSpellId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:SetSpellId (spellid)",
        "retail": true
      }
    ],
    "SetScriptToolip": [
      {
        "name": "SetScriptToolip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function classCustom:SetScriptToolip (code)",
        "retail": true
      }
    ],
    "RemoveCustom": [
      {
        "name": "RemoveCustom",
        "count": 3,
        "confidence": 0.6,
        "sample": "function classCustom:RemoveCustom (index)",
        "retail": true
      }
    ],
    "OnRemoveCustom": [
      {
        "name": "OnRemoveCustom",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details.switch:OnRemoveCustom (index)",
        "retail": true
      }
    ],
    "RemoveCustomObject": [
      {
        "name": "RemoveCustomObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RemoveCustomObject (object_name)",
        "retail": true
      }
    ],
    "ResetCustomFunctionsCache": [
      {
        "name": "ResetCustomFunctionsCache",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:ResetCustomFunctionsCache()",
        "retail": true
      }
    ],
    "UpdateHealingDoneBracket": [
      {
        "name": "UpdateHealingDoneBracket",
        "count": 2,
        "confidence": 0.4,
        "sample": "classCustom:UpdateHealingDoneBracket()",
        "retail": true
      }
    ],
    "InstallCustomObject": [
      {
        "name": "InstallCustomObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:InstallCustomObject (object)",
        "retail": true
      }
    ],
    "Nh": [
      {
        "name": "Nh",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "N3": [
      {
        "name": "N3",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "QPGXwp84IXUt9cgVyX3DVB5Ihd": [
      {
        "name": "QPGXwp84IXUt9cgVyX3DVB5Ihd",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs": [
      {
        "name": "BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "GBMidlVgmGrt3cffPOTaX1l": [
      {
        "name": "GBMidlVgmGrt3cffPOTaX1l",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq": [
      {
        "name": "Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th": [
      {
        "name": "SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th",
        "count": 1,
        "confidence": 0.2,
        "sample": "import_string = \"1EvBVnkoq4FlxKwDWDjCn6Q0kfD7kL(YwruUMOLK7JaoGPX3rSrgZwLV4F73yJ5LMxjPDfBBzHXZZZmEMhg7p0FHVxoRGhH9x57HkeRzCFVhWcejn)x89YWWROIG8iojt47LYIqPYWFGslW9LHcwM(3cuk83i2MvibCdHMlq0iSm8lYqhhh5e5e9s0pydsS2jjLX4w6hAREnhlk4uzyVEYWbdYfCc9fNeghm2Q3NCgM0RVb2)qd3Vn8MBSvohwYN6P8GCIVxmopY3ZBn7vz4RRzkMid3cXNmKJiXYWICm8BKmmJjim4LXfkKGyynqomnIvqfyUJVNgLpG4UkW2pQljV6Fg2tIyu)Nh(N3(5H367rrBW(EZn8CjqCyRkdNMsIv7vce)fSqD3oCSKnZw9V4ifNIkYfSn3ZOWwkfZBXYstA4Qz9vrvzmI2OYiAJUPV5hfBhmaq3K22qYJalJemUcEds1omLKlMLSuqsjITJvwLR9xBIo6jSq)QPGXwp84IXUt9cgVyX3DVB5Ihd(BxV7TlXnMzGfYLzJKtsuOg03qGQGsTXtYqeEU1bWhs(GBMidlVgmGrt3cffPOTaX1l(foRiRXesIm0QfcJCZFszXC9sSST1KI2SGQltsy13G8yC1Uje9jO0C8(MV)tANP17)a3XRksacvKjiBWVjNFe4lxXsT911cAE0oMGnbpfc1wy1RCH9S33Z6mYb97rZfnHuv7hdCscdQrbFfHO)Qq3IcScEqghBSd2CZzQkxrEtfjrDF6ROTWFhECSmjaniTs)hK41jG6kWVn7(LEbZNTWD2ZbUpyFCC0PJwOC2Kq1LUFtZjZD)(jJNQR9kOe8c85xMMMqRTm8Vay6mjBiBMgSoqqmn(8gnyakoUzpvu1BB6ep763rDB0444)rPU2UvTVoqNCr88WKVl9MxAN5v2xEYUYRPNulJQJb34(vFFCo71k9WsT0PU3fmB(Jph89XUpemE6utVH3okQNPBuJZc0Q0YpvEYwrdNS7yTDJRV4IBd5kNr4lTzPdSBq(bogTr0D3PPJzGdA9ShFf(a6fZStPvOD7f7PRu(4eX4x1QdxDOTRcZ1fwDs05891)SLTUszmvoXU7EVtjJtA07rBSujQvz2zlnAnRz1Th(BHVHb6)t5tGPdlh3EuZC3hCCw942ibCkJvfc9rFemwQGKvpf9Bt87mt9XMGUEK33POENfX)5iA)HksFPIYVtr4par32H)ZWHW6xE8IYqmYixwf5U0e2f8jQNqQ0NUut1KpfYIwTbQJD474gfRSQ5NAEhZpMdY7yQUDsb8cwJjVSwC632boywTc)fLo4ou0)Po2engoDQOiFfcoy07rCPQ12x47))d\",",
        "retail": true
      }
    ],
    "Ranking": [
      {
        "name": "Ranking",
        "count": 1,
        "confidence": 0.2,
        "sample": "--PVPMatchResults.content.earningsContainer.progressContainer .honor{.button{.Ring .Icon .CircleMask} .text .legacyButton} .conquest{.button{.Ring .Icon .CircleMask} .text .legacyButton} .rating{.button{.Icon .RankingShadow .Ranking(fontstring)} .text}",
        "retail": true
      }
    ],
    "OpenWindow": [
      {
        "name": "ArenaSummary.OpenWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "return ArenaSummary.OpenWindow()",
        "retail": true
      }
    ],
    "CreateWindow": [
      {
        "name": "ArenaSummary.CreateWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "ArenaSummary.window = ArenaSummary.CreateWindow()",
        "retail": true
      }
    ],
    "RefreshScroll": [
      {
        "name": "RefreshScroll",
        "count": 10,
        "confidence": 1.0,
        "sample": "ArenaSummary.window.ArenaPlayersScroll:RefreshScroll()",
        "retail": true
      },
      {
        "name": "Details.AuraTracker.RefreshScroll",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AuraTracker.RefreshScroll(self, data, offset, totalLines)",
        "retail": true
      }
    ],
    "GetDampeningPercent": [
      {
        "name": "C_Commentator.GetDampeningPercent",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.ArenaSummary.arenaData.dampening = C_Commentator.GetDampeningPercent()",
        "retail": true
      }
    ],
    "NewLooper": [
      {
        "name": "NewLooper",
        "count": 1,
        "confidence": 0.2,
        "sample": "--signature: NewLooper(time: number, callback: function, loopAmount: number, loopEndCallback: function?, checkPointCallback: function?, ...: any): timer",
        "retail": true
      },
      {
        "name": "Schedules.NewLooper",
        "count": 4,
        "confidence": 0.8,
        "sample": "ArenaSummary.LoopTicker = detailsFramework.Schedules.NewLooper(time, arenaTicker, loopAmount, loopEndCallback)",
        "retail": true
      }
    ],
    "GetPlayerDamageSpells": [
      {
        "name": "ArenaSummary.GetPlayerDamageSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ArenaSummary.GetPlayerDamageSpells(actorObject)",
        "retail": true
      }
    ],
    "GetPlayerHealingSpells": [
      {
        "name": "ArenaSummary.GetPlayerHealingSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ArenaSummary.GetPlayerHealingSpells(actorObject)",
        "retail": true
      }
    ],
    "GetTeamInfo": [
      {
        "name": "C_PvP.GetTeamInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "C_PvP.GetTeamInfo and C_PvP.GetTeamInfo(0) or {},",
        "retail": true
      }
    ],
    "IsArenaSkirmish": [
      {
        "name": "IsArenaSkirmish",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.isArenaSkirmish = IsArenaSkirmish()",
        "retail": true
      }
    ],
    "IsRatedSoloShuffle": [
      {
        "name": "C_PvP.IsRatedSoloShuffle",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.ArenaSummary.arenaData.isRatedSoloShuffle = C_PvP.IsRatedSoloShuffle and C_PvP.IsRatedSoloShuffle() or false",
        "retail": true
      }
    ],
    "IsMatchFactional": [
      {
        "name": "C_PvP.IsMatchFactional",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.isFactionalMatch = C_PvP.IsMatchFactional and C_PvP.IsMatchFactional() or false",
        "retail": true
      }
    ],
    "IsBrawlSoloShuffle": [
      {
        "name": "C_PvP.IsBrawlSoloShuffle",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.isBrawlSoloShuffle = C_PvP.IsBrawlSoloShuffle and C_PvP.IsBrawlSoloShuffle() or false",
        "retail": true
      }
    ],
    "IsBrawlSoloRBG": [
      {
        "name": "C_PvP.IsBrawlSoloRBG",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.isBrawlSoloRBG = C_PvP.IsBrawlSoloRBG and C_PvP.IsBrawlSoloRBG() or false",
        "retail": true
      }
    ],
    "IsSoloShuffle": [
      {
        "name": "C_PvP.IsSoloShuffle",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.isSoloShuffle = C_PvP.IsSoloShuffle and C_PvP.IsSoloShuffle() or false",
        "retail": true
      }
    ],
    "GetScoreInfoByPlayerGuid": [
      {
        "name": "C_PvP.GetScoreInfoByPlayerGuid",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details222.ArenaSummary.arenaData.playerScoreInfo = C_PvP.GetScoreInfoByPlayerGuid and C_PvP.GetScoreInfoByPlayerGuid(UnitGUID(\"player\")) or 0",
        "retail": true
      }
    ],
    "DoesMatchOutcomeAffectRating": [
      {
        "name": "C_PvP.DoesMatchOutcomeAffectRating",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.doesMatchOutcomeAffectRating = C_PvP.DoesMatchOutcomeAffectRating and C_PvP.DoesMatchOutcomeAffectRating() or false",
        "retail": true
      }
    ],
    "GetMatchPVPStatColumns": [
      {
        "name": "C_PvP.GetMatchPVPStatColumns",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.ArenaSummary.arenaData.statColumns = C_PvP.GetMatchPVPStatColumns and C_PvP.GetMatchPVPStatColumns() or {}",
        "retail": true
      }
    ],
    "GetPVPActiveMatchPersonalRatedInfo": [
      {
        "name": "C_PvP.GetPVPActiveMatchPersonalRatedInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local personalRatedInfo = C_PvP.GetPVPActiveMatchPersonalRatedInfo and C_PvP.GetPVPActiveMatchPersonalRatedInfo()",
        "retail": true
      }
    ],
    "GetPostMatchItemRewards": [
      {
        "name": "C_PvP.GetPostMatchItemRewards",
        "count": 1,
        "confidence": 0.2,
        "sample": "for k, item in pairs(C_PvP.GetPostMatchItemRewards()) do",
        "retail": true
      }
    ],
    "GetPostMatchCurrencyRewards": [
      {
        "name": "C_PvP.GetPostMatchCurrencyRewards",
        "count": 1,
        "confidence": 0.2,
        "sample": "for k, currency in pairs(C_PvP.GetPostMatchCurrencyRewards()) do",
        "retail": true
      }
    ],
    "GetCCSpellIdBySpellName": [
      {
        "name": "GetCCSpellIdBySpellName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local spellId = spellInfo and spellInfo.spellID or openRaidLib.GetCCSpellIdBySpellName(spellName)",
        "retail": true
      }
    ],
    "GetCustomVictoryStatID": [
      {
        "name": "C_PvP.GetCustomVictoryStatID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local victoryStatID = C_PvP.GetCustomVictoryStatID and C_PvP.GetCustomVictoryStatID() or 0",
        "retail": true
      }
    ],
    "GetActiveMatchWinner": [
      {
        "name": "C_PvP.GetActiveMatchWinner",
        "count": 1,
        "confidence": 0.2,
        "sample": "local winner = C_PvP.GetActiveMatchWinner and C_PvP.GetActiveMatchWinner()",
        "retail": true
      }
    ],
    "GetScoreInfo": [
      {
        "name": "C_PvP.GetScoreInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "scoresTable[index] = C_PvP.GetScoreInfo and C_PvP.GetScoreInfo(index) or {}",
        "retail": true
      }
    ],
    "GetPlayerGuid": [
      {
        "name": "GetPlayerGuid",
        "count": 1,
        "confidence": 0.2,
        "sample": "playerScoreInfo = C_PvP.GetScoreInfoByPlayerGuid and C_PvP.GetScoreInfoByPlayerGuid(GetPlayerGuid()) or {},",
        "retail": true
      }
    ],
    "CompressArena": [
      {
        "name": "ArenaSummary.CompressArena",
        "count": 2,
        "confidence": 0.4,
        "sample": "local thisArenaDataCompressed = ArenaSummary.CompressArena(thisArenaData)",
        "retail": true
      }
    ],
    "GetClassTCoordsAndTexture": [
      {
        "name": "GetClassTCoordsAndTexture",
        "count": 4,
        "confidence": 0.8,
        "sample": "iconLeft, iconRight, iconTop, iconBottom, iconTexture = detailsFramework:GetClassTCoordsAndTexture(playerData.class)",
        "retail": true
      }
    ],
    "GetPlayerInfoFromCurrentSelectedArenaData": [
      {
        "name": "ArenaSummary.GetPlayerInfoFromCurrentSelectedArenaData",
        "count": 3,
        "confidence": 0.6,
        "sample": "local enemyPlayerInfo = ArenaSummary.GetPlayerInfoFromCurrentSelectedArenaData(enemyName)",
        "retail": true
      }
    ],
    "SetFontSettings": [
      {
        "name": "ArenaSummary.SetFontSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.SetFontSettings()",
        "retail": true
      }
    ],
    "GetObject": [
      {
        "name": "GetObject",
        "count": 8,
        "confidence": 1.0,
        "sample": "local button = self:GetObject()",
        "retail": true
      }
    ],
    "SetPropagateMouseMotion": [
      {
        "name": "SetPropagateMouseMotion",
        "count": 1,
        "confidence": 0.2,
        "sample": "button:SetPropagateMouseMotion(true)",
        "retail": true
      }
    ],
    "SetSelectedArenaIndex": [
      {
        "name": "ArenaSummary.SetSelectedArenaIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.SetSelectedArenaIndex(index)",
        "retail": true
      }
    ],
    "GetSelectedArenaIndex": [
      {
        "name": "ArenaSummary.GetSelectedArenaIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ArenaSummary.GetSelectedArenaIndex()",
        "retail": true
      }
    ],
    "UncompressArena": [
      {
        "name": "ArenaSummary.UncompressArena",
        "count": 2,
        "confidence": 0.4,
        "sample": "local arenaData = ArenaSummary.UncompressArena(index)",
        "retail": true
      }
    ],
    "RequeueSkirmish": [
      {
        "name": "RequeueSkirmish",
        "count": 1,
        "confidence": 0.2,
        "sample": "RequeueSkirmish()",
        "retail": true
      }
    ],
    "IsInLFDBattlefield": [
      {
        "name": "IsInLFDBattlefield",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (IsInLFDBattlefield()) then",
        "retail": true
      }
    ],
    "ConfirmOrLeaveLFGParty": [
      {
        "name": "ConfirmOrLeaveLFGParty",
        "count": 1,
        "confidence": 0.2,
        "sample": "ConfirmOrLeaveLFGParty()",
        "retail": true
      }
    ],
    "ConfirmOrLeaveBattlefield": [
      {
        "name": "ConfirmOrLeaveBattlefield",
        "count": 1,
        "confidence": 0.2,
        "sample": "ConfirmOrLeaveBattlefield()",
        "retail": true
      }
    ],
    "UncompressedArena": [
      {
        "name": "UncompressedArena",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(headerIndex) == \"number\", \"UncompressedArena(headerIndex): headerIndex must be a number.\")",
        "retail": true
      }
    ],
    "UncompressedRun": [
      {
        "name": "UncompressedRun",
        "count": 3,
        "confidence": 0.6,
        "sample": "print(\"UncompressedRun(headerIndex): C_EncodingUtil.DecodeBase64 failed\")",
        "retail": true
      }
    ],
    "OpenEventTrackerOptions": [
      {
        "name": "OpenEventTrackerOptions",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:OpenEventTrackerOptions(bFromOptionsPanel)",
        "retail": true
      }
    ],
    "BuildDropDownFontList": [
      {
        "name": "BuildDropDownFontList",
        "count": 4,
        "confidence": 0.8,
        "sample": "values = function() return DF:BuildDropDownFontList (on_select_text_font) end,",
        "retail": true
      }
    ],
    "IsNonRetailWowWithRetailAPI": [
      {
        "name": "DetailsFramework.IsNonRetailWowWithRetailAPI",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not DetailsFramework.IsDragonflightAndBeyond() and not DetailsFramework.IsNonRetailWowWithRetailAPI()) then",
        "retail": true
      },
      {
        "name": "DF.IsNonRetailWowWithRetailAPI",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.IsNonRetailWowWithRetailAPI()",
        "retail": true
      },
      {
        "name": "IsNonRetailWowWithRetailAPI",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (detailsFramework.IsDragonflight() or detailsFramework.IsNonRetailWowWithRetailAPI() or detailsFramework.IsWarWow()) then",
        "retail": true
      }
    ],
    "CreateResizeGrips": [
      {
        "name": "CreateResizeGrips",
        "count": 6,
        "confidence": 1.0,
        "sample": "local leftResize, rightResize = DF:CreateResizeGrips(screenFrame)",
        "retail": true
      }
    ],
    "UpdateWorldTrackerLines": [
      {
        "name": "UpdateWorldTrackerLines",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:UpdateWorldTrackerLines (line)",
        "retail": true
      }
    ],
    "DetectLanguageId": [
      {
        "name": "DF.Language.DetectLanguageId",
        "count": 5,
        "confidence": 1.0,
        "sample": "local languageId = DF.Language.DetectLanguageId(sourceNameNoRealm)",
        "retail": true
      }
    ],
    "GetFontForLanguageID": [
      {
        "name": "DF.Language.GetFontForLanguageID",
        "count": 9,
        "confidence": 1.0,
        "sample": "local fontPath = DF.Language.GetFontForLanguageID(languageId)",
        "retail": true
      }
    ],
    "GetFrames": [
      {
        "name": "GetFrames",
        "count": 2,
        "confidence": 0.4,
        "sample": "for index, line in ipairs(scrollframe:GetFrames()) do",
        "retail": true
      }
    ],
    "SetFramesHeight": [
      {
        "name": "SetFramesHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "scrollframe:SetFramesHeight (Details.event_tracker.line_height)",
        "retail": true
      }
    ],
    "GetNumFramesShown": [
      {
        "name": "GetNumFramesShown",
        "count": 2,
        "confidence": 0.4,
        "sample": "local amountOfLines = scrollframe:GetNumFramesShown()",
        "retail": true
      }
    ],
    "InstallModule": [
      {
        "name": "InstallModule",
        "count": 9,
        "confidence": 1.0,
        "sample": "function f:InstallModule (module)",
        "retail": true
      }
    ],
    "NewFillPanel": [
      {
        "name": "NewFillPanel",
        "count": 6,
        "confidence": 1.0,
        "sample": "fillpanel = fw:NewFillPanel (f, module.header, module.fill_name, nil, 740, 481, module.fill_gettotal, module.fill_fillrows, false)",
        "retail": true
      }
    ],
    "CreateProFile": [
      {
        "name": "CreateProFile",
        "count": 2,
        "confidence": 0.4,
        "sample": "--proFile:CreateProFile()",
        "retail": true
      }
    ],
    "DumpInline": [
      {
        "name": "DumpInline",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DumpInline(t)",
        "retail": true
      }
    ],
    "DumpString": [
      {
        "name": "DumpString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DumpString (text)",
        "retail": true
      }
    ],
    "ShowImportWindow": [
      {
        "name": "ShowImportWindow",
        "count": 6,
        "confidence": 1.0,
        "sample": "Details:ShowImportWindow (text)",
        "retail": true
      }
    ],
    "IsCooldownIgnored": [
      {
        "name": "Details222.CooldownTracking.IsCooldownIgnored",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.CooldownTracking.IsCooldownIgnored(spellId)",
        "retail": true
      }
    ],
    "GetAllCooldownFrames": [
      {
        "name": "Details222.CooldownTracking.GetAllCooldownFrames",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details222.CooldownTracking.GetAllCooldownFrames()",
        "retail": true
      }
    ],
    "GetCooldownFrame": [
      {
        "name": "Details222.CooldownTracking.GetCooldownFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.GetCooldownFrame(filterName)",
        "retail": true
      }
    ],
    "HideAllBars": [
      {
        "name": "Details222.CooldownTracking.HideAllBars",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.HideAllBars(filterName)",
        "retail": true
      }
    ],
    "HideAllLines": [
      {
        "name": "Details222.CooldownTracking.HideAllLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.HideAllLines(cooldownFrame)",
        "retail": true
      }
    ],
    "GetOrCreateNewCooldownLine": [
      {
        "name": "Details222.CooldownTracking.GetOrCreateNewCooldownLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.GetOrCreateNewCooldownLine(cooldownFrame, lineId)",
        "retail": true
      }
    ],
    "CreateTimeBar": [
      {
        "name": "CreateTimeBar",
        "count": 3,
        "confidence": 0.6,
        "sample": "cooldownLine = DF:CreateTimeBar(cooldownFrame, [[Interface\\AddOns\\Details\\images\\bar_serenity]], Details.ocd_tracker.width-2, Details.ocd_tracker.height-2, 100, nil, cooldownFrame:GetName() .. \"CDFrame\" .. lineId)",
        "retail": true
      }
    ],
    "EnableTracker": [
      {
        "name": "Details222.CooldownTracking.EnableTracker",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.CooldownTracking.EnableTracker()",
        "retail": true
      }
    ],
    "RefreshAllCooldownFrames": [
      {
        "name": "Details222.CooldownTracking.RefreshAllCooldownFrames",
        "count": 26,
        "confidence": 1.0,
        "sample": "Details222.CooldownTracking.RefreshAllCooldownFrames()",
        "retail": true
      }
    ],
    "DisableTracker": [
      {
        "name": "Details222.CooldownTracking.DisableTracker",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.CooldownTracking.DisableTracker()",
        "retail": true
      }
    ],
    "OnReceiveUnitFullCooldownList": [
      {
        "name": "Details222.CooldownTracking.OnReceiveUnitFullCooldownList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.OnReceiveUnitFullCooldownList(unitId, unitCooldows, allUnitsCooldowns)",
        "retail": true
      }
    ],
    "OnReceiveSingleCooldownUpdate": [
      {
        "name": "Details222.CooldownTracking.OnReceiveSingleCooldownUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.OnReceiveSingleCooldownUpdate(unitId, spellId, cooldownInfo, unitCooldows, allUnitsCooldowns)",
        "retail": true
      }
    ],
    "GetSpellFilters": [
      {
        "name": "CooldownManager.GetSpellFilters",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spellFilters = openRaidLib.CooldownManager.GetSpellFilters(spellId)",
        "retail": true
      },
      {
        "name": "GetSpellFilters",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GetSpellFilters(spellId, defaultFilterOnly, customFiltersOnly)",
        "retail": true
      }
    ],
    "GetCooldownStatusFromCooldownInfo": [
      {
        "name": "GetCooldownStatusFromCooldownInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "isReady, normalizedPercent, timeLeft, charges, minValue, maxValue, currentValue = openRaidLib.GetCooldownStatusFromCooldownInfo(cooldownInfo)",
        "retail": true
      }
    ],
    "OnCooldownListWipe": [
      {
        "name": "Details222.CooldownTracking.OnCooldownListWipe",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.OnCooldownListWipe(allUnitsCooldowns)",
        "retail": true
      }
    ],
    "OnCooldownAdded": [
      {
        "name": "Details222.CooldownTracking.OnCooldownAdded",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.OnCooldownAdded(unitId, spellId, cooldownInfo, unitCooldows, allUnitsCooldowns)",
        "retail": true
      }
    ],
    "OnCooldownRemoved": [
      {
        "name": "Details222.CooldownTracking.OnCooldownRemoved",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.CooldownTracking.OnCooldownRemoved(unitId, spellId, unitCooldows, allUnitsCooldowns)",
        "retail": true
      }
    ],
    "CreateCooldownFrame": [
      {
        "name": "Details222.CooldownTracking.CreateCooldownFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.CreateCooldownFrame(filterName)",
        "retail": true
      }
    ],
    "SetupCooldownLine": [
      {
        "name": "Details222.CooldownTracking.SetupCooldownLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.SetupCooldownLine(cooldownLine)",
        "retail": true
      }
    ],
    "SetLeftText": [
      {
        "name": "SetLeftText",
        "count": 4,
        "confidence": 0.8,
        "sample": "cooldownLine:SetLeftText(DF:RemoveRealmName(cooldownLine.unitName))",
        "retail": true
      }
    ],
    "ProcessUnitCooldowns": [
      {
        "name": "Details222.CooldownTracking.ProcessUnitCooldowns",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details222.CooldownTracking.ProcessUnitCooldowns(cooldownFrame, unitId, unitCooldowns, cooldownsOrganized)",
        "retail": true
      }
    ],
    "RefreshSingleCooldownFrame": [
      {
        "name": "Details222.CooldownTracking.RefreshSingleCooldownFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.CooldownTracking.RefreshSingleCooldownFrame(cooldownFrame)",
        "retail": true
      }
    ],
    "GetUnitCooldowns": [
      {
        "name": "GetUnitCooldowns",
        "count": 20,
        "confidence": 1.0,
        "sample": "local unitCooldowns = openRaidLib.GetUnitCooldowns(unitId, filterName)",
        "retail": true
      }
    ],
    "OpenCDTrackerWindow": [
      {
        "name": "Details222.CooldownTracking.OpenCDTrackerWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.CooldownTracking.OpenCDTrackerWindow()",
        "retail": true
      }
    ],
    "ClearAllCDsAnchorFrames": [
      {
        "name": "ClearAllCDsAnchorFrames",
        "count": 2,
        "confidence": 0.4,
        "sample": "function cooldownSelectionFrame.ClearAllCDsAnchorFrames()",
        "retail": true
      }
    ],
    "BuildMenuVolatile": [
      {
        "name": "BuildMenuVolatile",
        "count": 9,
        "confidence": 1.0,
        "sample": "--use DetailsFramework:BuildMenuVolatile() to build the each list",
        "retail": true
      }
    ],
    "CloseCustomDisplayWindow": [
      {
        "name": "CloseCustomDisplayWindow",
        "count": 5,
        "confidence": 1.0,
        "sample": "function _detalhes:CloseCustomDisplayWindow()",
        "retail": true
      }
    ],
    "CancelFunc": [
      {
        "name": "CancelFunc",
        "count": 4,
        "confidence": 0.8,
        "sample": "DetailsCustomPanel:CancelFunc()",
        "retail": true
      }
    ],
    "RemoveDisplay": [
      {
        "name": "RemoveDisplay",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsCustomPanel:RemoveDisplay (custom_object, index)",
        "retail": true
      }
    ],
    "StartEdit": [
      {
        "name": "StartEdit",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DetailsCustomPanel:StartEdit (custom_object, import)",
        "retail": true
      }
    ],
    "SetAcceptButtonText": [
      {
        "name": "SetAcceptButtonText",
        "count": 12,
        "confidence": 1.0,
        "sample": "DetailsCustomPanel:SetAcceptButtonText (Loc [\"STRING_CUSTOM_IMPORT_BUTTON\"])",
        "retail": true
      }
    ],
    "CreateNewCustom": [
      {
        "name": "CreateNewCustom",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DetailsCustomPanel:CreateNewCustom()",
        "retail": true
      }
    ],
    "AcceptFunc": [
      {
        "name": "AcceptFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsCustomPanel:AcceptFunc()",
        "retail": true
      },
      {
        "name": "DetailsCustomPanel.AcceptFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsCustomPanel.AcceptFunc()",
        "retail": true
      }
    ],
    "StartEditCode": [
      {
        "name": "DetailsCustomPanel.StartEditCode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsCustomPanel.StartEditCode (_, _, code)",
        "retail": true
      }
    ],
    "CreateMenuButton": [
      {
        "name": "CreateMenuButton",
        "count": 11,
        "confidence": 1.0,
        "sample": "function customWindow:CreateMenuButton (label, icon, clickfunc, param1, param2, tooltip, name, coords)",
        "retail": true
      }
    ],
    "IconPick": [
      {
        "name": "IconPick",
        "count": 7,
        "confidence": 1.0,
        "sample": "gump:IconPick (pickicon_callback, true)",
        "retail": true
      }
    ],
    "BuildEncounterMenu": [
      {
        "name": "BuildEncounterMenu",
        "count": 3,
        "confidence": 0.6,
        "sample": "BuildEncounterMenu()",
        "retail": true
      }
    ],
    "NewSpellEntry": [
      {
        "name": "NewSpellEntry",
        "count": 3,
        "confidence": 0.6,
        "sample": "local spellid_entry = gump:NewSpellEntry (box1, function()end, 178, 20, nil, nil, \"spellidentry\", \"$parentSpellIdEntry\")",
        "retail": true
      }
    ],
    "CreateOrOpenNewsWindow": [
      {
        "name": "CreateOrOpenNewsWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "local newsFrame = Details:CreateOrOpenNewsWindow()",
        "retail": true
      }
    ],
    "SetStartDelay": [
      {
        "name": "SetStartDelay",
        "count": 24,
        "confidence": 1.0,
        "sample": "fadeInAnim2:SetStartDelay(1.3)",
        "retail": true
      }
    ],
    "Text": [
      {
        "name": "Text",
        "count": 6,
        "confidence": 1.0,
        "sample": "newsFrame:Text (Loc [\"STRING_VERSION_LOG\"])",
        "retail": true
      }
    ],
    "Title": [
      {
        "name": "Title",
        "count": 1,
        "confidence": 0.2,
        "sample": "function frame:Title (title)",
        "retail": true
      }
    ],
    "OpenClassColorsConfig": [
      {
        "name": "OpenClassColorsConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:OpenClassColorsConfig()",
        "retail": true
      }
    ],
    "ColorPick": [
      {
        "name": "ColorPick",
        "count": 5,
        "confidence": 1.0,
        "sample": "DF:ColorPick (self, r, g, b, 1, callback)",
        "retail": true
      }
    ],
    "GetDefaultColorList": [
      {
        "name": "GetDefaultColorList",
        "count": 3,
        "confidence": 0.6,
        "sample": "for colorName, colorTable in pairs(DF:GetDefaultColorList()) do",
        "retail": true
      }
    ],
    "CreateWeakAura": [
      {
        "name": "CreateWeakAura",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:CreateWeakAura (aura_type, spellid, use_spellid, spellname, name, icon_texture, target, stacksize, sound, chat, icon_text, icon_glow, encounter_id, group, icon_size, other_values, in_combat, cooldown_animation)",
        "retail": true
      }
    ],
    "OptionsFrame": [
      {
        "name": "WeakAuras.OptionsFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "local options_frame = WeakAuras.OptionsFrame and WeakAuras.OptionsFrame()",
        "retail": true
      }
    ],
    "ToggleOptions": [
      {
        "name": "WeakAuras.ToggleOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "WeakAuras.ToggleOptions()",
        "retail": true
      }
    ],
    "NewDisplayButton": [
      {
        "name": "WeakAuras.NewDisplayButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "WeakAuras.NewDisplayButton (new_aura)",
        "retail": true
      }
    ],
    "SetTriggerState": [
      {
        "name": "SetTriggerState",
        "count": 1,
        "confidence": 0.2,
        "sample": "SetTriggerState (triggerID)",
        "retail": true
      },
      {
        "name": "DetailsAuraPanel.SetTriggerState",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsAuraPanel.SetTriggerState (DetailsAuraPanel.TriggerList [triggertype].value) --passed by index not by the trigger ID",
        "retail": true
      }
    ],
    "OnSelectAuraType": [
      {
        "name": "DetailsAuraPanel.OnSelectAuraType",
        "count": 3,
        "confidence": 0.6,
        "sample": "DetailsAuraPanel.OnSelectAuraType (nil, nil, 2, true)",
        "retail": true
      }
    ],
    "CriaJanelaReport": [
      {
        "name": "CriaJanelaReport",
        "count": 7,
        "confidence": 1.0,
        "sample": "gump:CriaJanelaReport()",
        "retail": true
      }
    ],
    "GetNumSubgroupMembers": [
      {
        "name": "GetNumSubgroupMembers",
        "count": 4,
        "confidence": 0.8,
        "sample": "elseif (GetNumSubgroupMembers() > 0) then",
        "retail": true
      }
    ],
    "ReportFromLatest": [
      {
        "name": "Details.ReportFromLatest",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.ReportFromLatest(_, _, index)",
        "retail": true
      }
    ],
    "Flash": [
      {
        "name": "Flash",
        "count": 11,
        "confidence": 1.0,
        "sample": "Details.janela_report:Flash(0.2, 0.2, 0.4, true, 0, 0, \"NONE\")",
        "retail": true
      }
    ],
    "GetReportIconAndColor": [
      {
        "name": "Details.GetReportIconAndColor",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.GetReportIconAndColor(reportWhere)",
        "retail": true
      }
    ],
    "GetChannelList": [
      {
        "name": "GetChannelList",
        "count": 1,
        "confidence": 0.2,
        "sample": "local channels = {GetChannelList()} --coloca o resultado em uma tabela .. {id1, canal1, id2, canal2}",
        "retail": true
      }
    ],
    "GetFriendAccountInfo": [
      {
        "name": "C_BattleNet.GetFriendAccountInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local accountInfo = C_BattleNet.GetFriendAccountInfo(i)",
        "retail": true
      }
    ],
    "CheckValid": [
      {
        "name": "CheckValid",
        "count": 2,
        "confidence": 0.4,
        "sample": "function selectOutputChannel:CheckValid()",
        "retail": true
      }
    ],
    "UpdateRecentlyReported": [
      {
        "name": "UpdateRecentlyReported",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UpdateRecentlyReported()",
        "retail": true
      }
    ],
    "RefreshRecentlyReported": [
      {
        "name": "RefreshRecentlyReported",
        "count": 3,
        "confidence": 0.6,
        "sample": "DetailsReportWindow:RefreshRecentlyReported()",
        "retail": true
      }
    ],
    "CheckLastReportsIntegrity": [
      {
        "name": "CheckLastReportsIntegrity",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:CheckLastReportsIntegrity()",
        "retail": true
      }
    ],
    "InstallRPSkin": [
      {
        "name": "InstallRPSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InstallRPSkin(\"defaultSkin\", defaultSkin)",
        "retail": true
      }
    ],
    "ApplyRPSkin": [
      {
        "name": "ApplyRPSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:ApplyRPSkin()",
        "retail": true
      }
    ],
    "UpdateFontStrings": [
      {
        "name": "UpdateFontStrings",
        "count": 5,
        "confidence": 1.0,
        "sample": "function allDisplaysFrame:UpdateFontStrings()",
        "retail": true
      }
    ],
    "ApplyFontSettings": [
      {
        "name": "Details222.BreakdownWindow.ApplyFontSettings",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details222.BreakdownWindow.ApplyFontSettings(button.text)",
        "retail": true
      }
    ],
    "ShowAllSwitch": [
      {
        "name": "ShowAllSwitch",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:ShowAllSwitch()",
        "retail": true
      }
    ],
    "StatusBarAlert": [
      {
        "name": "StatusBarAlert",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.switch.current_instancia:StatusBarAlert(nil)",
        "retail": true
      }
    ],
    "NewDetailsButton": [
      {
        "name": "NewDetailsButton",
        "count": 6,
        "confidence": 1.0,
        "sample": "bookmarkFrame.close = gump:NewDetailsButton(bookmarkFrame, bookmarkFrame, _, function() end, nil, nil, 1, 1, \"\", \"\", \"\", \"\", {rightFunc = {func = Details.switch.CloseMe, param1 = nil, param2 = nil}}, \"DetailsSwitchPanelClose\")",
        "retail": true
      }
    ],
    "HideAllBookmarks": [
      {
        "name": "HideAllBookmarks",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.switch:HideAllBookmarks()",
        "retail": true
      }
    ],
    "CreateSegmentBlock": [
      {
        "name": "CreateSegmentBlock",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.switch:CreateSegmentBlock()",
        "retail": true
      }
    ],
    "GetSegmentBlock": [
      {
        "name": "GetSegmentBlock",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details.switch:GetSegmentBlock (index)",
        "retail": true
      }
    ],
    "ClearSegmentBlocks": [
      {
        "name": "ClearSegmentBlocks",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.switch:ClearSegmentBlocks()",
        "retail": true
      }
    ],
    "HideMe": [
      {
        "name": "HideMe",
        "count": 2,
        "confidence": 0.4,
        "sample": "block:HideMe()",
        "retail": true
      }
    ],
    "ResizeSegmentBlocks": [
      {
        "name": "ResizeSegmentBlocks",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.switch:ResizeSegmentBlocks()",
        "retail": true
      }
    ],
    "GetSegmentInfo": [
      {
        "name": "GetSegmentInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local enemy, color, raid_type, killed, is_trash, portrait, background, background_coords = Details:GetSegmentInfo(segmentIndex)",
        "retail": true
      }
    ],
    "OnSwitchShow": [
      {
        "name": "OnSwitchShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "local interrupt = custom_object.OnSwitchShow (instancia)",
        "retail": true
      }
    ],
    "Config": [
      {
        "name": "Config",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.switch:Config(_, _, atributo, sub_atributo)",
        "retail": true
      }
    ],
    "DetailsChangeDisplayFromBookmark": [
      {
        "name": "DetailsChangeDisplayFromBookmark",
        "count": 1,
        "confidence": 0.2,
        "sample": "--[[global]] function DetailsChangeDisplayFromBookmark(number, instance)",
        "retail": true
      }
    ],
    "FastSwitch": [
      {
        "name": "FastSwitch",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:FastSwitch(nil, bookmark, number)",
        "retail": true
      }
    ],
    "InitSwitch": [
      {
        "name": "InitSwitch",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.switch:InitSwitch()",
        "retail": true
      }
    ],
    "FauxScrollFrame_GetOffset": [
      {
        "name": "FauxScrollFrame_GetOffset",
        "count": 6,
        "confidence": 1.0,
        "sample": "local offset = FauxScrollFrame_GetOffset(DetailsSwitchPanelScroll)",
        "retail": true
      }
    ],
    "NewSwitchButton": [
      {
        "name": "NewSwitchButton",
        "count": 3,
        "confidence": 0.6,
        "sample": "button = Details.switch:NewSwitchButton (Details.switch.frame, i, x, y, jump)",
        "retail": true
      }
    ],
    "FauxScrollFrame_Update": [
      {
        "name": "FauxScrollFrame_Update",
        "count": 6,
        "confidence": 1.0,
        "sample": "FauxScrollFrame_Update(DetailsSwitchPanelScroll, ceil (40 / Details.switch.vertical_amt) , Details.switch.horizontal_amt, 20)",
        "retail": true
      }
    ],
    "FauxScrollFrame_OnVerticalScroll": [
      {
        "name": "FauxScrollFrame_OnVerticalScroll",
        "count": 6,
        "confidence": 1.0,
        "sample": "scroll:SetScript(\"OnVerticalScroll\", function(self, offset) FauxScrollFrame_OnVerticalScroll (self, offset, 20, Details.switch.Update) end) --altura",
        "retail": true
      }
    ],
    "IsTooltip": [
      {
        "name": "IsTooltip",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (gameCooltip:IsTooltip()) then",
        "retail": true
      }
    ],
    "IsMenu": [
      {
        "name": "IsMenu",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (gameCooltip:IsMenu()) then",
        "retail": true
      }
    ],
    "HandleAuraBuff": [
      {
        "name": "HandleAuraBuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HandleAuraBuff(aura)",
        "retail": true
      }
    ],
    "HandleAuraDebuff": [
      {
        "name": "HandleAuraDebuff",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function HandleAuraDebuff(aura)",
        "retail": true
      }
    ],
    "RefreshScrollData": [
      {
        "name": "Details.AuraTracker.RefreshScrollData",
        "count": 5,
        "confidence": 1.0,
        "sample": "Details.AuraTracker.RefreshScrollData()",
        "retail": true
      }
    ],
    "OnShowAuraTrackerFrame": [
      {
        "name": "Details.AuraTracker.OnShowAuraTrackerFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.AuraTracker.OnShowAuraTrackerFrame(auraTrackerFrame)",
        "retail": true
      }
    ],
    "RegisterUnitEvent": [
      {
        "name": "RegisterUnitEvent",
        "count": 8,
        "confidence": 1.0,
        "sample": "auraTrackerFrame.EventFrame:RegisterUnitEvent(\"UNIT_AURA\", \"player\")",
        "retail": true
      }
    ],
    "OnHideAuraTrackerFrame": [
      {
        "name": "Details.AuraTracker.OnHideAuraTrackerFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.AuraTracker.OnHideAuraTrackerFrame(auraTrackerFrame)",
        "retail": true
      }
    ],
    "CreatePanel": [
      {
        "name": "Details.AuraTracker.CreatePanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.AuraTracker.CreatePanel()",
        "retail": true
      },
      {
        "name": "CreatePanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreatePanel (parent, w, h, backdrop, backdropcolor, bordercolor, member, name)",
        "retail": true
      }
    ],
    "Payload": [
      {
        "name": "Payload",
        "count": 1,
        "confidence": 0.2,
        "sample": "{text = \"Payload (Points)\", width = 296},",
        "retail": true
      }
    ],
    "OnUnitAuraEvent": [
      {
        "name": "Details.AuraTracker.OnUnitAuraEvent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AuraTracker.OnUnitAuraEvent(self, event, unit, unitAuraUpdateInfo)",
        "retail": true
      }
    ],
    "CreateScrollLine": [
      {
        "name": "Details.AuraTracker.CreateScrollLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AuraTracker.CreateScrollLine(self, lineId)",
        "retail": true
      }
    ],
    "SetColorStripe": [
      {
        "name": "SetColorStripe",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsFramework.BackdropUtil:SetColorStripe(line, lineId)",
        "retail": true
      }
    ],
    "GetColumnWidth": [
      {
        "name": "GetColumnWidth",
        "count": 13,
        "confidence": 1.0,
        "sample": "local auraNameTextField = DetailsFramework:CreateTextEntry(line, function()end, header:GetColumnWidth(2), scrollLineHeight, _, _, _, dropdownTemplate)",
        "retail": true
      }
    ],
    "SetAutoSelectTextOnFocus": [
      {
        "name": "SetAutoSelectTextOnFocus",
        "count": 6,
        "confidence": 1.0,
        "sample": "auraNameTextField:SetAutoSelectTextOnFocus(true)",
        "retail": true
      }
    ],
    "OpenDetailsDeathRecap": [
      {
        "name": "Details.OpenDetailsDeathRecap",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details.OpenDetailsDeathRecap(segment, RecapID)",
        "retail": true
      }
    ],
    "BuildDeathTableFromRecap": [
      {
        "name": "Details.BuildDeathTableFromRecap",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.BuildDeathTableFromRecap(recapID)",
        "retail": true
      }
    ],
    "DeathRecap_GetEvents": [
      {
        "name": "DeathRecap_GetEvents",
        "count": 2,
        "confidence": 0.4,
        "sample": "local events = DeathRecap_GetEvents(recapID)",
        "retail": true
      }
    ],
    "DeathRecapFrame_GetEventInfo": [
      {
        "name": "DeathRecapFrame_GetEventInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local spellId, spellName, texture = DeathRecapFrame_GetEventInfo( evtData )",
        "retail": true
      }
    ],
    "GetDeathRecapFromChat": [
      {
        "name": "Details.GetDeathRecapFromChat",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.GetDeathRecapFromChat()",
        "retail": true
      }
    ],
    "GetNumMessages": [
      {
        "name": "GetNumMessages",
        "count": 1,
        "confidence": 0.2,
        "sample": "local numLines = chat1:GetNumMessages()",
        "retail": true
      }
    ],
    "GetMessageInfo": [
      {
        "name": "GetMessageInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local text = chat1:GetMessageInfo(i)",
        "retail": true
      }
    ],
    "OpenDetailsDeathRecapAtSegment": [
      {
        "name": "OpenDetailsDeathRecapAtSegment",
        "count": 1,
        "confidence": 0.2,
        "sample": "OpenDetailsDeathRecapAtSegment(i)",
        "retail": true
      }
    ],
    "Recap": [
      {
        "name": "Recap",
        "count": 1,
        "confidence": 0.2,
        "sample": "local msgText = \"|cFFAAAAFFDeath Recap(Blizzard):\"",
        "retail": true
      }
    ],
    "GetTargetCharacterForRealm": [
      {
        "name": "Details.Survey.GetTargetCharacterForRealm",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.Survey.GetTargetCharacterForRealm()",
        "retail": true
      }
    ],
    "GetCategorySpellListForClass": [
      {
        "name": "Details.Survey.GetCategorySpellListForClass",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details.Survey.GetCategorySpellListForClass()",
        "retail": true
      }
    ],
    "ExportSpellCatogeryData": [
      {
        "name": "Details.Survey.ExportSpellCatogeryData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Survey.ExportSpellCatogeryData()",
        "retail": true
      }
    ],
    "ExportSingleSpellCatogeryData": [
      {
        "name": "Details.Survey.ExportSingleSpellCatogeryData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details.Survey.ExportSingleSpellCatogeryData(line)",
        "retail": true
      }
    ],
    "SendSpellCatogeryDataToTargetCharacter": [
      {
        "name": "Details.Survey.SendSpellCatogeryDataToTargetCharacter",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details.Survey.SendSpellCatogeryDataToTargetCharacter()",
        "retail": true
      }
    ],
    "DoAttemptToAskSurvey": [
      {
        "name": "Details.Survey.DoAttemptToAskSurvey",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Survey.DoAttemptToAskSurvey()",
        "retail": true
      }
    ],
    "AskForOpeningSpellCategoryScreen": [
      {
        "name": "Details.Survey.AskForOpeningSpellCategoryScreen",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.Survey.AskForOpeningSpellCategoryScreen()",
        "retail": true
      }
    ],
    "OpenSpellCategoryScreen": [
      {
        "name": "Details.Survey.OpenSpellCategoryScreen",
        "count": 3,
        "confidence": 0.6,
        "sample": "return Details.Survey.OpenSpellCategoryScreen()",
        "retail": true
      }
    ],
    "InitializeSpellCategoryFeedback": [
      {
        "name": "Details.Survey.InitializeSpellCategoryFeedback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.Survey.InitializeSpellCategoryFeedback()",
        "retail": true
      }
    ],
    "ChatFrame_AddMessageEventFilter": [
      {
        "name": "ChatFrame_AddMessageEventFilter",
        "count": 2,
        "confidence": 0.4,
        "sample": "ChatFrame_AddMessageEventFilter(\"CHAT_MSG_CHANNEL\", myChatFilter)",
        "retail": true
      }
    ],
    "ShowPromptPanel": [
      {
        "name": "ShowPromptPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:ShowPromptPanel(\"Fill the Spell Survey to Help Cooldown Tracker Addons?\", function() Details.Survey.OpenSpellCategoryScreen() end, function() Details:Msg(\"FINE! won't ask again for another week...\") end)",
        "retail": true
      }
    ],
    "SetOptions": [
      {
        "name": "SetOptions",
        "count": 4,
        "confidence": 0.8,
        "sample": "radioGroup:SetOptions(radioGroupOptions)",
        "retail": true
      }
    ],
    "SetNumeric": [
      {
        "name": "SetNumeric",
        "count": 2,
        "confidence": 0.4,
        "sample": "durationEntry:SetNumeric(true)",
        "retail": true
      }
    ],
    "SetCurrentInstanceAndRefresh": [
      {
        "name": "Details222.OptionsPanel.SetCurrentInstanceAndRefresh",
        "count": 17,
        "confidence": 1.0,
        "sample": "Details222.OptionsPanel.SetCurrentInstanceAndRefresh(instanceObject)",
        "retail": true
      }
    ],
    "SetAsSearchBox": [
      {
        "name": "SetAsSearchBox",
        "count": 3,
        "confidence": 0.6,
        "sample": "searchBox:SetAsSearchBox()",
        "retail": true
      }
    ],
    "GetBestFontForLanguage": [
      {
        "name": "GetBestFontForLanguage",
        "count": 13,
        "confidence": 1.0,
        "sample": "options[#options+1] = {type = \"label\", get = function() return optionData.header end, text_template = {color = \"silver\", size = 14, font = detailsFramework:GetBestFontForLanguage()}}",
        "retail": true
      }
    ],
    "SelectOptionsSection": [
      {
        "name": "Details222.OptionsPanel.SelectOptionsSection",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details222.OptionsPanel.SelectOptionsSection(sectionId)",
        "retail": true
      }
    ],
    "SetCurrentInstance": [
      {
        "name": "Details222.OptionsPanel.SetCurrentInstance",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.OptionsPanel.SetCurrentInstance(instance)",
        "retail": true
      }
    ],
    "GetOptionsSection": [
      {
        "name": "Details222.OptionsPanel.GetOptionsSection",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.OptionsPanel.GetOptionsSection(sectionId)",
        "retail": true
      }
    ],
    "OpenOptionsPanel": [
      {
        "name": "OpenOptionsPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:OpenOptionsPanel(instance, bNoReopen, section) --alias",
        "retail": true
      },
      {
        "name": "StreamerPlugin.OpenOptionsPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "StreamerPlugin.OpenOptionsPanel(true)",
        "retail": true
      },
      {
        "name": "Plater.OpenOptionsPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "--/run Plater.OpenOptionsPanel()PlaterOptionsPanelContainer:SelectIndex(Plater, 14)",
        "retail": true
      }
    ],
    "UpdateAutoHideSettings": [
      {
        "name": "Details222.OptionsPanel.UpdateAutoHideSettings",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details222.OptionsPanel.UpdateAutoHideSettings(instance)",
        "retail": true
      }
    ],
    "RefreshInstances": [
      {
        "name": "Details222.OptionsPanel.RefreshInstances",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.OptionsPanel.RefreshInstances(instance)",
        "retail": true
      }
    ],
    "GetCurrentInstanceInOptionsPanel": [
      {
        "name": "Details222.OptionsPanel.GetCurrentInstanceInOptionsPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.OptionsPanel.GetCurrentInstanceInOptionsPanel()",
        "retail": true
      }
    ],
    "GetAsianNumberSymbols": [
      {
        "name": "GetAsianNumberSymbols",
        "count": 3,
        "confidence": 0.6,
        "sample": "local asian1K, asian10K, asian1B = DF:GetAsianNumberSymbols()",
        "retail": true
      }
    ],
    "GetClientRegion": [
      {
        "name": "GetClientRegion",
        "count": 3,
        "confidence": 0.6,
        "sample": "local clientRegion = DF:GetClientRegion()",
        "retail": true
      }
    ],
    "Performance": [
      {
        "name": "Performance",
        "count": 1,
        "confidence": 0.2,
        "sample": "name = \"Keep Best Performance (boss wipes)\",",
        "retail": true
      }
    ],
    "OpenBookmarkConfig": [
      {
        "name": "OpenBookmarkConfig",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:OpenBookmarkConfig()",
        "retail": true
      }
    ],
    "SetNickname": [
      {
        "name": "SetNickname",
        "count": 5,
        "confidence": 1.0,
        "sample": "local accepted, errortext = Details:SetNickname(text)",
        "retail": true
      }
    ],
    "ResetPlayerPersona": [
      {
        "name": "ResetPlayerPersona",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ResetPlayerPersona()",
        "retail": true
      }
    ],
    "OptionPanelOnChangeSkin": [
      {
        "name": "OptionPanelOnChangeSkin",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:OptionPanelOnChangeSkin(skinName)",
        "retail": true
      }
    ],
    "Embed_Details": [
      {
        "name": "Embed_Details",
        "count": 1,
        "confidence": 0.2,
        "sample": "AS:Embed_Details()",
        "retail": true
      }
    ],
    "LoadSkinFromOptionsPanel": [
      {
        "name": "LoadSkinFromOptionsPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:LoadSkinFromOptionsPanel(skinObject)",
        "retail": true
      }
    ],
    "Skin": [
      {
        "name": "Skin",
        "count": 1,
        "confidence": 0.2,
        "sample": "end, \"Details! Import Skin (paste string)\") --localize-me",
        "retail": true
      }
    ],
    "SetTitleBarSettings": [
      {
        "name": "SetTitleBarSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "--SetTitleBarSettings(shown, height, texture, color)",
        "retail": true
      }
    ],
    "GetWidgetById": [
      {
        "name": "GetWidgetById",
        "count": 7,
        "confidence": 1.0,
        "sample": "local windowDropdown = self.MyObject.container:GetWidgetById('deleteWindow')",
        "retail": true
      }
    ],
    "NewSwitch": [
      {
        "name": "NewSwitch",
        "count": 22,
        "confidence": 1.0,
        "sample": "DF:NewSwitch (bframe, _, \"$parentToolbarSlider\"..i, \"toolbarPluginsSlider\"..i, 60, 20, _, _, plugin_stable.enabled, nil, nil, nil, nil, options_switch_template)",
        "retail": true
      }
    ],
    "ShowTextPromptPanel": [
      {
        "name": "ShowTextPromptPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:ShowTextPromptPanel(Loc[\"STRING_OPTIONS_IMPORT_PROFILE_NAME\"] .. \":\", function(newProfileName)",
        "retail": true
      }
    ],
    "MoveAnchor": [
      {
        "name": "MoveAnchor",
        "count": 3,
        "confidence": 0.6,
        "sample": "_G.DetailsTooltipAnchor:MoveAnchor()",
        "retail": true
      }
    ],
    "OpenBrokerTextEditor": [
      {
        "name": "OpenBrokerTextEditor",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:OpenBrokerTextEditor()",
        "retail": true
      }
    ],
    "UpdateWallpaperInfo": [
      {
        "name": "UpdateWallpaperInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "sectionFrame:UpdateWallpaperInfo()",
        "retail": true
      }
    ],
    "CreateSlider": [
      {
        "name": "CreateSlider",
        "count": 5,
        "confidence": 1.0,
        "sample": "local alphaSlider = DetailsFramework:CreateSlider(line, 138, 20, 0, 100, 1, 100, false, nil, nil, nil, options_slider_template)",
        "retail": true
      }
    ],
    "OpenCurrentRealDPSOptions": [
      {
        "name": "OpenCurrentRealDPSOptions",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:OpenCurrentRealDPSOptions(true)",
        "retail": true
      }
    ],
    "Log": [
      {
        "name": "Log",
        "count": 6,
        "confidence": 1.0,
        "sample": "name = \"Invert Death Log (Raid)\",",
        "retail": true
      }
    ],
    "MoveBarrasTo": [
      {
        "name": "MoveBarrasTo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:MoveBarrasTo(destino)",
        "retail": true
      }
    ],
    "RefreshAttributeTextSize": [
      {
        "name": "RefreshAttributeTextSize",
        "count": 7,
        "confidence": 1.0,
        "sample": "instancia:RefreshAttributeTextSize()",
        "retail": true
      }
    ],
    "InstanciasHorizontais": [
      {
        "name": "InstanciasHorizontais",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _, ClampLeft, ClampRight = instancia:InstanciasHorizontais()",
        "retail": true
      }
    ],
    "InstanciasVerticais": [
      {
        "name": "InstanciasVerticais",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _, ClampBottom, ClampTop = instancia:InstanciasVerticais()",
        "retail": true
      }
    ],
    "BGFrame_scripts": [
      {
        "name": "BGFrame_scripts",
        "count": 7,
        "confidence": 1.0,
        "sample": "local function BGFrame_scripts(BG, baseframe, instancia)",
        "retail": true
      }
    ],
    "RegisterForDetailsMove": [
      {
        "name": "RegisterForDetailsMove",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gump:RegisterForDetailsMove(frame, instancia)",
        "retail": true
      }
    ],
    "BFrame_scripts": [
      {
        "name": "BFrame_scripts",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function BFrame_scripts (baseframe, instancia)",
        "retail": true
      }
    ],
    "RefreshLockedState": [
      {
        "name": "RefreshLockedState",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:RefreshLockedState()",
        "retail": true
      }
    ],
    "HandleTextsOnMouseClick": [
      {
        "name": "HandleTextsOnMouseClick",
        "count": 3,
        "confidence": 0.6,
        "sample": "self._instance:HandleTextsOnMouseClick (self, \"down\")",
        "retail": true
      }
    ],
    "ReportSingleLine": [
      {
        "name": "ReportSingleLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "return Details:ReportSingleLine(instanceObject, self)",
        "retail": true
      }
    ],
    "CancelAnim": [
      {
        "name": "CancelAnim",
        "count": 1,
        "confidence": 0.2,
        "sample": "function icon_frame_events:CancelAnim(anim)",
        "retail": true
      }
    ],
    "HideBarQuestionIcon": [
      {
        "name": "HideBarQuestionIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:HideBarQuestionIcon(frame)",
        "retail": true
      }
    ],
    "StretchButtonAlwaysOnTop": [
      {
        "name": "StretchButtonAlwaysOnTop",
        "count": 4,
        "confidence": 0.8,
        "sample": "thisInstance:StretchButtonAlwaysOnTop()",
        "retail": true
      }
    ],
    "DetailsKeyBindScrollUp": [
      {
        "name": "DetailsKeyBindScrollUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsKeyBindScrollUp() --[[GLOBAL]]",
        "retail": true
      }
    ],
    "DetailsKeyBindScrollDown": [
      {
        "name": "DetailsKeyBindScrollDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsKeyBindScrollDown() --[[GLOBAL]]",
        "retail": true
      }
    ],
    "HaveInstanceAlert": [
      {
        "name": "HaveInstanceAlert",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:HaveInstanceAlert()",
        "retail": true
      }
    ],
    "InstanceAlertTime": [
      {
        "name": "InstanceAlertTime",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:InstanceAlertTime(instance)",
        "retail": true
      }
    ],
    "DoFlash": [
      {
        "name": "DoFlash",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.alert:DoFlash()",
        "retail": true
      }
    ],
    "CreateAlertFrame": [
      {
        "name": "CreateAlertFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function CreateAlertFrame(baseframe, instancia)",
        "retail": true
      }
    ],
    "CreateGlowOverlay": [
      {
        "name": "CreateGlowOverlay",
        "count": 2,
        "confidence": 0.4,
        "sample": "local glowAnimation = gump:CreateGlowOverlay(tooltipAnchor, \"yellow\", \"white\")",
        "retail": true
      }
    ],
    "CreateFullBorder": [
      {
        "name": "CreateFullBorder",
        "count": 6,
        "confidence": 1.0,
        "sample": "local baseframeBorder = DetailsFramework:CreateFullBorder(baseframe:GetName() .. \"BaseBorder\", baseframe)",
        "retail": true
      }
    ],
    "SetBorderSizes": [
      {
        "name": "SetBorderSizes",
        "count": 6,
        "confidence": 1.0,
        "sample": "baseframeBorder:SetBorderSizes(1, 1, 1, 1)",
        "retail": true
      }
    ],
    "UpdateSizes": [
      {
        "name": "UpdateSizes",
        "count": 6,
        "confidence": 1.0,
        "sample": "baseframeBorder:UpdateSizes()",
        "retail": true
      }
    ],
    "SetFrameAlpha": [
      {
        "name": "SetFrameAlpha",
        "count": 7,
        "confidence": 1.0,
        "sample": "function rowframe:SetFrameAlpha(value)",
        "retail": true
      }
    ],
    "CriaCabecalho": [
      {
        "name": "CriaCabecalho",
        "count": 2,
        "confidence": 0.4,
        "sample": "gump:CriaCabecalho(baseframe, instancia)",
        "retail": true
      }
    ],
    "CriaRodape": [
      {
        "name": "CriaRodape",
        "count": 2,
        "confidence": 0.4,
        "sample": "gump:CriaRodape(baseframe, instancia)",
        "retail": true
      }
    ],
    "SetBarFollowPlayer": [
      {
        "name": "SetBarFollowPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarFollowPlayer(follow)",
        "retail": true
      }
    ],
    "SetBarOrientationDirection": [
      {
        "name": "SetBarOrientationDirection",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarOrientationDirection(orientation)",
        "retail": true
      }
    ],
    "Gump": [
      {
        "name": "Gump",
        "count": 1,
        "confidence": 0.2,
        "sample": "--width also set on windows.lua > Reajusta Gump ()",
        "retail": true
      }
    ],
    "NewRow": [
      {
        "name": "NewRow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gump:NewRow(instancia, index)",
        "retail": true
      }
    ],
    "SetNonSpaceWrap": [
      {
        "name": "SetNonSpaceWrap",
        "count": 8,
        "confidence": 1.0,
        "sample": "newLine.lineText1:SetNonSpaceWrap (true)",
        "retail": true
      }
    ],
    "SetBarTextSettings": [
      {
        "name": "SetBarTextSettings",
        "count": 15,
        "confidence": 1.0,
        "sample": "function Details:SetBarTextSettings(size, font, fixedcolor, leftcolorbyclass, rightcolorbyclass, leftoutline, rightoutline, customrighttextenabled, customrighttext, percentage_type, showposition, customlefttextenabled, customlefttext, smalloutline_left, smalloutlinecolor_left, smalloutline_right, smalloutlinecolor_right, translittext, yoffset, leftoffset)",
        "retail": true
      }
    ],
    "SetBarBackdropSettings": [
      {
        "name": "SetBarBackdropSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetBarBackdropSettings(enabled, size, color, use_class_colors)",
        "retail": true
      }
    ],
    "RefreshTitleBar": [
      {
        "name": "RefreshTitleBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RefreshTitleBar()",
        "retail": true
      }
    ],
    "SetBarModel": [
      {
        "name": "SetBarModel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarModel(upper_enabled, upper_model, upper_alpha, lower_enabled, lower_model, lower_alpha)",
        "retail": true
      }
    ],
    "SetBarSpecIconSettings": [
      {
        "name": "SetBarSpecIconSettings",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SetBarSpecIconSettings(enabled, iconfile, fulltrack)",
        "retail": true
      }
    ],
    "SetBarArenaRoleIconSettings": [
      {
        "name": "SetBarArenaRoleIconSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarArenaRoleIconSettings(show_icon, icon_size_offset)",
        "retail": true
      }
    ],
    "SetBarFactionIconSettings": [
      {
        "name": "SetBarFactionIconSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarFactionIconSettings(show_faction_icon, faction_icon_size_offset)",
        "retail": true
      }
    ],
    "SetBarSettings": [
      {
        "name": "SetBarSettings",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:SetBarSettings(height, texture, colorclass, fixedcolor, backgroundtexture, backgroundcolorclass, backgroundfixedcolor, alpha, iconfile, barstart, spacement, texture_custom, icon_size_offset)",
        "retail": true
      }
    ],
    "SetBarRightTextSettings": [
      {
        "name": "SetBarRightTextSettings",
        "count": 8,
        "confidence": 1.0,
        "sample": "function Details:SetBarRightTextSettings(total, persecond, percent, bracket, separator)",
        "retail": true
      }
    ],
    "CheckPsUpdate": [
      {
        "name": "CheckPsUpdate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CheckPsUpdate()",
        "retail": true
      }
    ],
    "FastPSUpdate": [
      {
        "name": "FastPSUpdate",
        "count": 3,
        "confidence": 0.6,
        "sample": "--\t/run _detalhes:GetInstance(1):FastPSUpdate (true)",
        "retail": true
      }
    ],
    "AdjustInLineTextPadding": [
      {
        "name": "AdjustInLineTextPadding",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:AdjustInLineTextPadding()",
        "retail": true
      }
    ],
    "CreateMaskTexture": [
      {
        "name": "CreateMaskTexture",
        "count": 9,
        "confidence": 1.0,
        "sample": "row.icone_classe.maskTexture = row:CreateMaskTexture(\"$parentClassIconMask\", \"overlay\")",
        "retail": true
      }
    ],
    "SetShadowColor": [
      {
        "name": "SetShadowColor",
        "count": 19,
        "confidence": 1.0,
        "sample": "row.lineText1:SetShadowColor(color[1], color[2], color[3], color[4])",
        "retail": true
      }
    ],
    "SetReverseFill": [
      {
        "name": "SetReverseFill",
        "count": 4,
        "confidence": 0.8,
        "sample": "row.statusbar:SetReverseFill(true)",
        "retail": true
      }
    ],
    "UpdateClickThrough": [
      {
        "name": "UpdateClickThrough",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:UpdateClickThrough()",
        "retail": true
      }
    ],
    "SetBarOverlaySettings": [
      {
        "name": "SetBarOverlaySettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:SetBarOverlaySettings(overlayTexture, overlayColor)",
        "retail": true
      }
    ],
    "SetInstanceWallpaperLevel": [
      {
        "name": "SetInstanceWallpaperLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SetInstanceWallpaperLevel(wallpaperLevel)",
        "retail": true
      }
    ],
    "GetTextures": [
      {
        "name": "GetTextures",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetTextures()",
        "retail": true
      }
    ],
    "SetWindowAlphaForInteract": [
      {
        "name": "SetWindowAlphaForInteract",
        "count": 7,
        "confidence": 1.0,
        "sample": "function Details:SetWindowAlphaForInteract(alpha)",
        "retail": true
      }
    ],
    "InstanceAlpha": [
      {
        "name": "InstanceAlpha",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:InstanceAlpha(alpha)",
        "retail": true
      }
    ],
    "SetIconAlpha": [
      {
        "name": "SetIconAlpha",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:SetIconAlpha(alpha, nil, true)",
        "retail": true
      }
    ],
    "InstanceButtonsColors": [
      {
        "name": "InstanceButtonsColors",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:InstanceButtonsColors(red, green, blue, alpha, noSave, onlyLeft, onlyRight)",
        "retail": true
      }
    ],
    "IsLowerInstance": [
      {
        "name": "IsLowerInstance",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (self:IsLowerInstance()) then",
        "retail": true
      }
    ],
    "StatusBarColor": [
      {
        "name": "StatusBarColor",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:StatusBarColor(red, green, blue, alpha)",
        "retail": true
      }
    ],
    "WaitForSkin": [
      {
        "name": "WaitForSkin",
        "count": 3,
        "confidence": 0.6,
        "sample": "local tempSkin = self:WaitForSkin()",
        "retail": true
      }
    ],
    "StatusBarAlertTime": [
      {
        "name": "StatusBarAlertTime",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:StatusBarAlertTime(instance)",
        "retail": true
      }
    ],
    "GetMenuAnchorPoint": [
      {
        "name": "GetMenuAnchorPoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetMenuAnchorPoint()",
        "retail": true
      }
    ],
    "ToolbarMenuButtonsSize": [
      {
        "name": "ToolbarMenuButtonsSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:ToolbarMenuButtonsSize(size)",
        "retail": true
      }
    ],
    "ToolbarMenuSetButtons": [
      {
        "name": "ToolbarMenuSetButtons",
        "count": 3,
        "confidence": 0.6,
        "sample": "return self:ToolbarMenuSetButtons()",
        "retail": true
      }
    ],
    "FormatCooltipBackdrop": [
      {
        "name": "FormatCooltipBackdrop",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:FormatCooltipBackdrop()",
        "retail": true
      }
    ],
    "SetMenuOwner": [
      {
        "name": "SetMenuOwner",
        "count": 7,
        "confidence": 1.0,
        "sample": "Details:SetMenuOwner (self, instance)",
        "retail": true
      }
    ],
    "SetUserCustomSkinFile": [
      {
        "name": "SetUserCustomSkinFile",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SetUserCustomSkinFile (file)",
        "retail": true
      }
    ],
    "RefreshMicroDisplays": [
      {
        "name": "RefreshMicroDisplays",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RefreshMicroDisplays()",
        "retail": true
      }
    ],
    "HideSideBars": [
      {
        "name": "HideSideBars",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:HideSideBars()",
        "retail": true
      }
    ],
    "MicroDisplaysSide": [
      {
        "name": "MicroDisplaysSide",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:MicroDisplaysSide()",
        "retail": true
      }
    ],
    "MicroDisplaysLock": [
      {
        "name": "MicroDisplaysLock",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:MicroDisplaysLock()",
        "retail": true
      }
    ],
    "ShowStatusBar": [
      {
        "name": "ShowStatusBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShowStatusBar()",
        "retail": true
      }
    ],
    "HideStatusBar": [
      {
        "name": "HideStatusBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:HideStatusBar()",
        "retail": true
      }
    ],
    "SetBackdropTexture": [
      {
        "name": "SetBackdropTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetBackdropTexture()",
        "retail": true
      }
    ],
    "LeftMenuAnchorSide": [
      {
        "name": "LeftMenuAnchorSide",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:LeftMenuAnchorSide()",
        "retail": true
      }
    ],
    "UpdateFullBorder": [
      {
        "name": "UpdateFullBorder",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateFullBorder()",
        "retail": true
      }
    ],
    "UpdateRowAreaBorder": [
      {
        "name": "UpdateRowAreaBorder",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateRowAreaBorder()",
        "retail": true
      }
    ],
    "EnableRoundedCorners": [
      {
        "name": "EnableRoundedCorners",
        "count": 3,
        "confidence": 0.6,
        "sample": "fullWindowFrame:EnableRoundedCorners()",
        "retail": true
      }
    ],
    "DisableRoundedCorners": [
      {
        "name": "DisableRoundedCorners",
        "count": 4,
        "confidence": 0.8,
        "sample": "fullWindowFrame:DisableRoundedCorners()",
        "retail": true
      }
    ],
    "UpdateClickThroughSettings": [
      {
        "name": "UpdateClickThroughSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:UpdateClickThroughSettings (inCombat, window, bars, toolbaricons)",
        "retail": true
      }
    ],
    "DelayedCheckCombatAlpha": [
      {
        "name": "DelayedCheckCombatAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DelayedCheckCombatAlpha (instance, alpha)",
        "retail": true
      }
    ],
    "DelayedCheckOutOfCombatAlpha": [
      {
        "name": "DelayedCheckOutOfCombatAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DelayedCheckOutOfCombatAlpha (instance, alpha)",
        "retail": true
      }
    ],
    "DelayedCheckOutOfCombatAndGroupAlpha": [
      {
        "name": "DelayedCheckOutOfCombatAndGroupAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:DelayedCheckOutOfCombatAndGroupAlpha (instance, alpha)",
        "retail": true
      }
    ],
    "MenuAnchor": [
      {
        "name": "MenuAnchor",
        "count": 2,
        "confidence": 0.4,
        "sample": "return self:MenuAnchor()",
        "retail": true
      }
    ],
    "GetTitleBarText": [
      {
        "name": "GetTitleBarText",
        "count": 3,
        "confidence": 0.6,
        "sample": "local currentText = instance:GetTitleBarText()",
        "retail": true
      }
    ],
    "SetTitleBarText": [
      {
        "name": "SetTitleBarText",
        "count": 5,
        "confidence": 1.0,
        "sample": "instance:SetTitleBarText(currentText)",
        "retail": true
      }
    ],
    "TitleTextTickTimer": [
      {
        "name": "TitleTextTickTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:TitleTextTickTimer(instance)",
        "retail": true
      }
    ],
    "IsEncounterInProgress": [
      {
        "name": "IsEncounterInProgress",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (IsEncounterInProgress()) then",
        "retail": true
      }
    ],
    "RefreshTitleBarText": [
      {
        "name": "RefreshTitleBarText",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:RefreshTitleBarText()",
        "retail": true
      }
    ],
    "GetInstanceCurrentAlpha": [
      {
        "name": "GetInstanceCurrentAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetInstanceCurrentAlpha()",
        "retail": true
      }
    ],
    "IsInteracting": [
      {
        "name": "IsInteracting",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (self:IsInteracting()) then",
        "retail": true
      }
    ],
    "GetInstanceIconsCurrentAlpha": [
      {
        "name": "GetInstanceIconsCurrentAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetInstanceIconsCurrentAlpha()",
        "retail": true
      }
    ],
    "IsGroupedWith": [
      {
        "name": "IsGroupedWith",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:IsGroupedWith(instance)",
        "retail": true
      }
    ],
    "HideMainIcon": [
      {
        "name": "HideMainIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:HideMainIcon() --attribute menu reseting value",
        "retail": true
      }
    ],
    "Create1PxPanel": [
      {
        "name": "Create1PxPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "local panel = gump:Create1PxPanel(UIParent, 600, 100, \"|cFFFFFFFFDetails!, the window hit the ground, bang bang...|r\", nil, nil, nil, nil)",
        "retail": true
      }
    ],
    "GetTextHighlight": [
      {
        "name": "GetTextHighlight",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function GetTextHighlight ( self )",
        "retail": true
      }
    ],
    "StripCodeGsub": [
      {
        "name": "StripCodeGsub",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function StripCodeGsub ( Escapes, Code, End )",
        "retail": true
      }
    ],
    "StripCode": [
      {
        "name": "StripCode",
        "count": 6,
        "confidence": 1.0,
        "sample": "local function StripCode ( Pattern, Text, OldCursor )",
        "retail": true
      }
    ],
    "StripColors": [
      {
        "name": "StripColors",
        "count": 4,
        "confidence": 0.8,
        "sample": "function StripColors ( Text, Cursor )",
        "retail": true
      }
    ],
    "ColorSelection": [
      {
        "name": "ColorSelection",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function ColorSelection ( self, ColorCode )",
        "retail": true
      }
    ],
    "NewColorPickButton": [
      {
        "name": "NewColorPickButton",
        "count": 5,
        "confidence": 1.0,
        "sample": "local color_button = DF:NewColorPickButton (panel, \"$parentButton5\", nil, color_func)",
        "retail": true
      }
    ],
    "UpdateTheRealCurrentDPSFrame": [
      {
        "name": "UpdateTheRealCurrentDPSFrame",
        "count": 17,
        "confidence": 1.0,
        "sample": "Details:UpdateTheRealCurrentDPSFrame(testUsing)",
        "retail": true
      }
    ],
    "CreateSplitBar": [
      {
        "name": "CreateSplitBar",
        "count": 3,
        "confidence": 0.6,
        "sample": "barFrame.splitBar = DF:CreateSplitBar(barFrame, 400, 20)",
        "retail": true
      }
    ],
    "SetBackgroundTexture": [
      {
        "name": "SetBackgroundTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "barFrame.splitBar:SetBackgroundTexture([[Interface/AddOns/Details/images/bar_textures/chess]])",
        "retail": true
      }
    ],
    "SwapArenaTeamColors": [
      {
        "name": "SwapArenaTeamColors",
        "count": 2,
        "confidence": 0.4,
        "sample": "function f.SwapArenaTeamColors()",
        "retail": true
      }
    ],
    "EnableAnimations": [
      {
        "name": "EnableAnimations",
        "count": 2,
        "confidence": 0.4,
        "sample": "barFrame.splitBar:EnableAnimations()",
        "retail": true
      }
    ],
    "SetValueWithAnimation": [
      {
        "name": "SetValueWithAnimation",
        "count": 3,
        "confidence": 0.6,
        "sample": "DetailsArenaDpsBars.splitBar:SetValueWithAnimation(percentValue)",
        "retail": true
      }
    ],
    "GetLeftColor": [
      {
        "name": "GetLeftColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "local cR, cG, cB, cA = dpsBarFrame:GetLeftColor()",
        "retail": true
      }
    ],
    "LerpLinearColor": [
      {
        "name": "LerpLinearColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "local alphaTeam1Value = DF:LerpLinearColor(deltaTime, 1, cA, 0, 0, team1Alpha, 0, 0)",
        "retail": true
      },
      {
        "name": "DF.Math.LerpLinearColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.LerpLinearColor(deltaTime, interpSpeed, r1, g1, b1, r2, g2, b2)",
        "retail": true
      },
      {
        "name": "Math.LerpLinearColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local r, g, b = detailsFramework.Math.LerpLinearColor(percent, 1, r1, g1, b1, r2, g2, b2)",
        "retail": true
      }
    ],
    "SetLeftColor": [
      {
        "name": "SetLeftColor",
        "count": 4,
        "confidence": 0.8,
        "sample": "dpsBarFrame:SetLeftColor(r, g, b, alphaTeam1Value)",
        "retail": true
      }
    ],
    "GetRightColor": [
      {
        "name": "GetRightColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "local cR, cG, cB, cA = dpsBarFrame:GetRightColor()",
        "retail": true
      }
    ],
    "SetRightColor": [
      {
        "name": "SetRightColor",
        "count": 4,
        "confidence": 0.8,
        "sample": "dpsBarFrame:SetRightColor(r, g, b, alphaTeam2Value)",
        "retail": true
      }
    ],
    "ArenaStarted": [
      {
        "name": "ArenaStarted",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:ArenaStarted()",
        "retail": true
      }
    ],
    "MythicDungeonStarted": [
      {
        "name": "MythicDungeonStarted",
        "count": 2,
        "confidence": 0.4,
        "sample": "function eventListener:MythicDungeonStarted()",
        "retail": true
      },
      {
        "name": "DetailsMythicPlusFrame.MythicDungeonStarted",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsMythicPlusFrame.MythicDungeonStarted()",
        "retail": true
      }
    ],
    "ArenaEnded": [
      {
        "name": "ArenaEnded",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:ArenaEnded()",
        "retail": true
      }
    ],
    "MythicDungeonEnded": [
      {
        "name": "MythicDungeonEnded",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:MythicDungeonEnded()",
        "retail": true
      }
    ],
    "ResetBuffer": [
      {
        "name": "ResetBuffer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:ResetBuffer()",
        "retail": true
      }
    ],
    "DetailsTestSplitBar": [
      {
        "name": "DetailsTestSplitBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsTestSplitBar()",
        "retail": true
      }
    ],
    "WelcomeSetLoc": [
      {
        "name": "WelcomeSetLoc",
        "count": 2,
        "confidence": 0.4,
        "sample": "function _detalhes:WelcomeSetLoc()",
        "retail": true
      }
    ],
    "CalcCpuPower": [
      {
        "name": "CalcCpuPower",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:CalcCpuPower()",
        "retail": true
      }
    ],
    "StopPlayStretchAlert": [
      {
        "name": "StopPlayStretchAlert",
        "count": 4,
        "confidence": 0.8,
        "sample": "function _detalhes:StopPlayStretchAlert()",
        "retail": true
      }
    ],
    "FreeTutorialFrame3": [
      {
        "name": "FreeTutorialFrame3",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:FreeTutorialFrame3()",
        "retail": true
      }
    ],
    "NewLabel2": [
      {
        "name": "NewLabel2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gump:NewLabel2 (parent, container, member, text, font, size, color)",
        "retail": true
      }
    ],
    "ChangeOptions": [
      {
        "name": "ChangeOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function new_button:ChangeOptions (_table)",
        "retail": true
      }
    ],
    "IsMovable": [
      {
        "name": "IsMovable",
        "count": 11,
        "confidence": 1.0,
        "sample": "if (container:IsMovable() and not container.isLocked) then",
        "retail": true
      }
    ],
    "MouseOnEnterHook": [
      {
        "name": "MouseOnEnterHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "new_button.MouseOnEnterHook (new_button)",
        "retail": true
      }
    ],
    "MouseOnLeaveHook": [
      {
        "name": "MouseOnLeaveHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "new_button.MouseOnLeaveHook (new_button)",
        "retail": true
      }
    ],
    "NewTextBox": [
      {
        "name": "NewTextBox",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gump:NewTextBox (parent, container, member, func, param1, param2, w, h, options)",
        "retail": true
      }
    ],
    "SetPointAndSpace": [
      {
        "name": "SetPointAndSpace",
        "count": 2,
        "confidence": 0.4,
        "sample": "function editbox:SetPointAndSpace (MyAnchor, SnapTo, HisAnchor, x, y, Width)",
        "retail": true
      }
    ],
    "SetLabelText": [
      {
        "name": "SetLabelText",
        "count": 2,
        "confidence": 0.4,
        "sample": "function editbox:SetLabelText (text)",
        "retail": true
      }
    ],
    "EnterHook": [
      {
        "name": "EnterHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.EnterHook()",
        "retail": true
      }
    ],
    "PressEnter": [
      {
        "name": "PressEnter",
        "count": 4,
        "confidence": 0.8,
        "sample": "function editbox:PressEnter(byScript)",
        "retail": true
      }
    ],
    "EnterPress": [
      {
        "name": "EnterPress",
        "count": 2,
        "confidence": 0.4,
        "sample": "EnterPress (byScript)",
        "retail": true
      }
    ],
    "OnEscapeHook": [
      {
        "name": "OnEscapeHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.OnEscapeHook()",
        "retail": true
      }
    ],
    "OnEnterHook": [
      {
        "name": "OnEnterHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox:OnEnterHook()",
        "retail": true
      }
    ],
    "OnLeaveHook": [
      {
        "name": "OnLeaveHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox:OnLeaveHook()",
        "retail": true
      }
    ],
    "OnFocusGainedHook": [
      {
        "name": "OnFocusGainedHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.OnFocusGainedHook()",
        "retail": true
      }
    ],
    "OnFocusLostHook": [
      {
        "name": "OnFocusLostHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox.OnFocusLostHook()",
        "retail": true
      }
    ],
    "InputHook": [
      {
        "name": "InputHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox:InputHook (text)",
        "retail": true
      }
    ],
    "TextChangeedHook": [
      {
        "name": "TextChangeedHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "editbox:TextChangeedHook (userChanged)",
        "retail": true
      }
    ],
    "Blink": [
      {
        "name": "Blink",
        "count": 2,
        "confidence": 0.4,
        "sample": "function editbox:Blink()",
        "retail": true
      }
    ],
    "NewScrollBar2": [
      {
        "name": "NewScrollBar2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gump:NewScrollBar2 (master, slave, x, y)",
        "retail": true
      }
    ],
    "GetMythicPlusDebugState": [
      {
        "name": "Details222.Debug.GetMythicPlusDebugState",
        "count": 3,
        "confidence": 0.6,
        "sample": "local debugState = Details222.Debug.GetMythicPlusDebugState()",
        "retail": true
      }
    ],
    "ShowCleuDebugWindow": [
      {
        "name": "ShowCleuDebugWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "Details:ShowCleuDebugWindow(function(token, who_serial, who_name, who_flags, target_serial, target_name, target_flags, A1, A2, A3)",
        "retail": true
      }
    ],
    "GetActorInfoFromLineIndex": [
      {
        "name": "GetActorInfoFromLineIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "--/run Details:GetWindow(1):GetActorInfoFromLineIndex(3)",
        "retail": true
      }
    ],
    "OpenRunCodeWindow": [
      {
        "name": "Details222.AutoRunCode.OpenRunCodeWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.AutoRunCode.OpenRunCodeWindow()",
        "retail": true
      }
    ],
    "CodeEditorSetText": [
      {
        "name": "Details222.AutoRunCode.CodeEditorSetText",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details222.AutoRunCode.CodeEditorSetText(codeKey)",
        "retail": true
      }
    ],
    "OpenMacrosWindow": [
      {
        "name": "Details.OpenMacrosWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.OpenMacrosWindow()",
        "retail": true
      }
    ],
    "UpdateLine": [
      {
        "name": "UpdateLine",
        "count": 3,
        "confidence": 0.6,
        "sample": "line:UpdateLine (index, macro.Name, macro.Desc, macro.MacroText)",
        "retail": true
      }
    ],
    "PlayGlow": [
      {
        "name": "PlayGlow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes:PlayGlow (frame)",
        "retail": true
      }
    ],
    "DetailsTutorialAlertFrame_OnFinishSlideIn": [
      {
        "name": "DetailsTutorialAlertFrame_OnFinishSlideIn",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function DetailsTutorialAlertFrame_OnFinishSlideIn (frame)",
        "retail": true
      }
    ],
    "DetailsTutorialAlertFrame_OnUpdate": [
      {
        "name": "DetailsTutorialAlertFrame_OnUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function DetailsTutorialAlertFrame_OnUpdate (frame, timestep)",
        "retail": true
      }
    ],
    "UpdateScrollChildRect": [
      {
        "name": "UpdateScrollChildRect",
        "count": 1,
        "confidence": 0.2,
        "sample": "frame:UpdateScrollChildRect();",
        "retail": true
      }
    ],
    "DetailsTutorialAlertFrame_SlideInFrame": [
      {
        "name": "DetailsTutorialAlertFrame_SlideInFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsTutorialAlertFrame_SlideInFrame (frame, animType)",
        "retail": true
      }
    ],
    "PlayBestDamageOnGuild": [
      {
        "name": "PlayBestDamageOnGuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "function _detalhes.PlayBestDamageOnGuild (damage)",
        "retail": true
      }
    ],
    "SetScaleFrom": [
      {
        "name": "SetScaleFrom",
        "count": 2,
        "confidence": 0.4,
        "sample": "Portrait.scale:SetScaleFrom (0, 0)",
        "retail": true
      }
    ],
    "SetScaleTo": [
      {
        "name": "SetScaleTo",
        "count": 2,
        "confidence": 0.4,
        "sample": "Portrait.scale:SetScaleTo (1, 1)",
        "retail": true
      }
    ],
    "SetFromScale": [
      {
        "name": "SetFromScale",
        "count": 2,
        "confidence": 0.4,
        "sample": "Portrait.scale:SetFromScale (0, 0)",
        "retail": true
      }
    ],
    "SetToScale": [
      {
        "name": "SetToScale",
        "count": 2,
        "confidence": 0.4,
        "sample": "Portrait.scale:SetToScale (1, 1)",
        "retail": true
      }
    ],
    "SetOrigin": [
      {
        "name": "SetOrigin",
        "count": 8,
        "confidence": 1.0,
        "sample": "Portrait.scale:SetOrigin (\"center\", 0, 0)",
        "retail": true
      }
    ],
    "OpenPlaterIntegrationWindow": [
      {
        "name": "Details.OpenPlaterIntegrationWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.OpenPlaterIntegrationWindow()",
        "retail": true
      }
    ],
    "UpdateAllPlates": [
      {
        "name": "Plater.UpdateAllPlates",
        "count": 16,
        "confidence": 1.0,
        "sample": "Plater.UpdateAllPlates()",
        "retail": true
      }
    ],
    "RefreshDBUpvalues": [
      {
        "name": "Plater.RefreshDBUpvalues",
        "count": 3,
        "confidence": 0.6,
        "sample": "Plater.RefreshDBUpvalues()",
        "retail": true
      }
    ],
    "Dps": [
      {
        "name": "Dps",
        "count": 2,
        "confidence": 0.4,
        "sample": "name = \"Show Real Time Dps (From You)\",",
        "retail": true
      }
    ],
    "GetAllSettings": [
      {
        "name": "Details.AllInOneWindow.GetAllSettings",
        "count": 5,
        "confidence": 1.0,
        "sample": "return #Details.AllInOneWindow.GetAllSettings()",
        "retail": true
      }
    ],
    "GetAllFrames": [
      {
        "name": "Details.AllInOneWindow.GetAllFrames",
        "count": 2,
        "confidence": 0.4,
        "sample": "return #Details.AllInOneWindow.GetAllFrames()",
        "retail": true
      }
    ],
    "GetNumFrames": [
      {
        "name": "Details.AllInOneWindow.GetNumFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "local numFramesCreated = Details.AllInOneWindow.GetNumFrames()",
        "retail": true
      }
    ],
    "GetFrameByID": [
      {
        "name": "Details.AllInOneWindow.GetFrameByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local window = Details.AllInOneWindow.GetFrameByID(id)",
        "retail": true
      }
    ],
    "GetSettingsID": [
      {
        "name": "GetSettingsID",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (window:GetSettingsID() == settingId) then",
        "retail": true
      }
    ],
    "GetSettings": [
      {
        "name": "GetSettings",
        "count": 7,
        "confidence": 1.0,
        "sample": "return window:GetSettings()",
        "retail": true
      }
    ],
    "GetFrameBySettingID": [
      {
        "name": "Details.AllInOneWindow.GetFrameBySettingID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local window = Details.AllInOneWindow.GetFrameBySettingID(settingId)",
        "retail": true
      }
    ],
    "GetNumSettings": [
      {
        "name": "Details.AllInOneWindow.GetNumSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "local numSettings = Details.AllInOneWindow.GetNumSettings()",
        "retail": true
      }
    ],
    "GetSettingsByID": [
      {
        "name": "Details.AllInOneWindow.GetSettingsByID",
        "count": 4,
        "confidence": 0.8,
        "sample": "local windowSetting = Details.AllInOneWindow.GetSettingsByID(settingId)",
        "retail": true
      }
    ],
    "GetNumButtons": [
      {
        "name": "GetNumButtons",
        "count": 1,
        "confidence": 0.2,
        "sample": "for i = 1, supportFrame:GetNumButtons() do",
        "retail": true
      }
    ],
    "GetButtonByIndex": [
      {
        "name": "GetButtonByIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local button = supportFrame:GetButtonByIndex(i)",
        "retail": true
      }
    ],
    "GetSettingName": [
      {
        "name": "GetSettingName",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (settings[button:GetSettingName()]) then",
        "retail": true
      }
    ],
    "SetRegularButtonTexture": [
      {
        "name": "SetRegularButtonTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "df:SetRegularButtonTexture(button, settings.texture_file, textureCoords[button:GetSettingName()])",
        "retail": true
      }
    ],
    "SetRegularButtonVertexColor": [
      {
        "name": "SetRegularButtonVertexColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "df:SetRegularButtonVertexColor(button, settings.color)",
        "retail": true
      }
    ],
    "CreateMenuSupportFrame": [
      {
        "name": "CreateMenuSupportFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "titleBar:CreateMenuSupportFrame()",
        "retail": true
      }
    ],
    "CreateCombatTimeString": [
      {
        "name": "CreateCombatTimeString",
        "count": 1,
        "confidence": 0.2,
        "sample": "titleBar:CreateCombatTimeString()",
        "retail": true
      }
    ],
    "SetCombatTimeText": [
      {
        "name": "SetCombatTimeText",
        "count": 1,
        "confidence": 0.2,
        "sample": "titleBar:SetCombatTimeText(\"02:36\") --debug",
        "retail": true
      }
    ],
    "SetTitleBarHeight": [
      {
        "name": "SetTitleBarHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(height) == \"number\", \"Invalid height, usage: TitleBar:SetTitleBarHeight(height)\")",
        "retail": true
      }
    ],
    "SetSetting": [
      {
        "name": "SetSetting",
        "count": 1,
        "confidence": 0.2,
        "sample": "titleBar:SetSetting(height, \"titlebar\", \"height\")",
        "retail": true
      }
    ],
    "ParseColor": [
      {
        "name": "ParseColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "local r, g, b, a = df:ParseColor(color)",
        "retail": true
      }
    ],
    "GetCombatTimeString": [
      {
        "name": "GetCombatTimeString",
        "count": 1,
        "confidence": 0.2,
        "sample": "local combatTimeString = titleBar:GetCombatTimeString()",
        "retail": true
      }
    ],
    "GetHeader": [
      {
        "name": "GetHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "local header = titleBar:GetHeader()",
        "retail": true
      }
    ],
    "GetMenuSupportFrame": [
      {
        "name": "GetMenuSupportFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "local menuSupportFrame = titleBar:GetMenuSupportFrame()",
        "retail": true
      }
    ],
    "GetTitleBar": [
      {
        "name": "GetTitleBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "local titleBar = window:GetTitleBar()",
        "retail": true
      }
    ],
    "AddFrame": [
      {
        "name": "Details.AllInOneWindow.AddFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "local frameId = Details.AllInOneWindow.AddFrame(newFrame)",
        "retail": true
      }
    ],
    "CreateNew": [
      {
        "name": "Details.AllInOneWindow.CreateNew",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.AllInOneWindow.CreateNew()",
        "retail": true
      }
    ],
    "AddSetting": [
      {
        "name": "Details.AllInOneWindow.AddSetting",
        "count": 1,
        "confidence": 0.2,
        "sample": "local settingId = Details.AllInOneWindow.AddSetting(newSettings)",
        "retail": true
      }
    ],
    "ReloadAll": [
      {
        "name": "Details.AllInOneWindow.ReloadAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.AllInOneWindow.ReloadAll()",
        "retail": true
      }
    ],
    "SetSettingID": [
      {
        "name": "SetSettingID",
        "count": 1,
        "confidence": 0.2,
        "sample": "windowFrame:SetSettingID(settingId)",
        "retail": true
      }
    ],
    "CreateTooltipFrame": [
      {
        "name": "DetailsPrivite.WindowTooltip.CreateTooltipFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsPrivite.WindowTooltip.CreateTooltipFrame()",
        "retail": true
      }
    ],
    "OpenDpsBenchmark": [
      {
        "name": "Details.OpenDpsBenchmark",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.OpenDpsBenchmark()",
        "retail": true
      }
    ],
    "CreateCombatObject": [
      {
        "name": "CreateCombatObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "function f.CreateCombatObject()",
        "retail": true
      }
    ],
    "StartNewBenchmark": [
      {
        "name": "StartNewBenchmark",
        "count": 2,
        "confidence": 0.4,
        "sample": "function f.StartNewBenchmark()",
        "retail": true
      }
    ],
    "StopCurrentBenchmark": [
      {
        "name": "StopCurrentBenchmark",
        "count": 2,
        "confidence": 0.4,
        "sample": "function f.StopCurrentBenchmark()",
        "retail": true
      }
    ],
    "UpdateOnTick": [
      {
        "name": "UpdateOnTick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function f.UpdateOnTick (self, deltaTime)",
        "retail": true
      }
    ],
    "StartUpdateOnTick": [
      {
        "name": "StartUpdateOnTick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function f.StartUpdateOnTick()",
        "retail": true
      }
    ],
    "OpenDB": [
      {
        "name": "OpenDB",
        "count": 3,
        "confidence": 0.6,
        "sample": "function statisticsFrame.OpenDB()",
        "retail": true
      }
    ],
    "OnCommReceived": [
      {
        "name": "OnCommReceived",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:OnCommReceived(event, length, prefix, playerName, realmName, detailsVersion, guildSyncID, data)",
        "retail": true
      }
    ],
    "OnCommSent": [
      {
        "name": "OnCommSent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function eventListener:OnCommSent(event, length, prefix, playerName, realmName, detailsVersion, guildSyncID, missingIDs, arg8, arg9)",
        "retail": true
      }
    ],
    "BuildReport": [
      {
        "name": "BuildReport",
        "count": 1,
        "confidence": 0.2,
        "sample": "function statisticsFrame.BuildReport()",
        "retail": true
      }
    ],
    "SetBackgroundImage": [
      {
        "name": "SetBackgroundImage",
        "count": 2,
        "confidence": 0.4,
        "sample": "function statisticsFrame:SetBackgroundImage(encounterId)",
        "retail": true
      }
    ],
    "BuildPlayerTable": [
      {
        "name": "BuildPlayerTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "statisticsFrame:BuildPlayerTable(player)",
        "retail": true
      }
    ],
    "UpdateBossDropdown": [
      {
        "name": "UpdateBossDropdown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function statisticsFrame.UpdateBossDropdown()",
        "retail": true
      }
    ],
    "CreateGFrame": [
      {
        "name": "CreateGFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "statisticsFrame.gframe = DF:CreateGFrame(statisticsFrame, 650, 400, 35, onenter, onleave, \"gframe\", \"$parentGF\")",
        "retail": true
      }
    ],
    "UpdateLines": [
      {
        "name": "UpdateLines",
        "count": 1,
        "confidence": 0.2,
        "sample": "statisticsFrame.gframe:UpdateLines(data)",
        "retail": true
      }
    ],
    "BuildGuildRankTable": [
      {
        "name": "BuildGuildRankTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function statisticsFrame:BuildGuildRankTable(encounterKillsTable, selectedGuildName, role)",
        "retail": true
      }
    ],
    "SetFillFunction": [
      {
        "name": "SetFillFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "fillpanel:SetFillFunction(function(index) return sortTable [index] end)",
        "retail": true
      }
    ],
    "SetTotalFunction": [
      {
        "name": "SetTotalFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "fillpanel:SetTotalFunction(function() return #sortTable end)",
        "retail": true
      }
    ],
    "UpdateRows": [
      {
        "name": "UpdateRows",
        "count": 2,
        "confidence": 0.4,
        "sample": "fillpanel:UpdateRows(header)",
        "retail": true
      }
    ],
    "BuildRaidTable": [
      {
        "name": "BuildRaidTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function statisticsFrame:BuildRaidTable(encounterKillsTable, selectedGuildName, role)",
        "retail": true
      }
    ],
    "Mikk": [
      {
        "name": "Mikk",
        "count": 1,
        "confidence": 0.2,
        "sample": "Author(s): Mikk (dpsgnome@mail.com)",
        "retail": true
      }
    ],
    "EnableMouseWheelScaling": [
      {
        "name": "EnableMouseWheelScaling",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib.EnableMouseWheelScaling(frame)",
        "retail": true
      }
    ],
    "EnableMouseOnAlt": [
      {
        "name": "EnableMouseOnAlt",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib.EnableMouseOnAlt(frame)",
        "retail": true
      }
    ],
    "DataObjectIterator": [
      {
        "name": "DataObjectIterator",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:DataObjectIterator()",
        "retail": true
      }
    ],
    "GetDataObjectByName": [
      {
        "name": "GetDataObjectByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetDataObjectByName(dataobjectname)",
        "retail": true
      }
    ],
    "GetNameByDataObject": [
      {
        "name": "GetNameByDataObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetNameByDataObject(dataobject)",
        "retail": true
      }
    ],
    "Elkano": [
      {
        "name": "Elkano",
        "count": 1,
        "confidence": 0.2,
        "sample": "Author: Elkano (elkano@gmx.de)",
        "retail": true
      }
    ],
    "Otravi": [
      {
        "name": "Otravi",
        "count": 1,
        "confidence": 0.2,
        "sample": "Inspired By: SurfaceLib by Haste/Otravi (troeks@gmail.com)",
        "retail": true
      }
    ],
    "FontForge": [
      {
        "name": "FontForge",
        "count": 1,
        "confidence": 0.2,
        "sample": "Fonts were checked using langcover.pl from DejaVu fonts (http://sourceforge.net/projects/dejavu/) and FontForge (http://fontforge.org/)",
        "retail": true
      }
    ],
    "Medium": [
      {
        "name": "Medium",
        "count": 3,
        "confidence": 0.6,
        "sample": "ARKai_C.ttf\t\t\tAR ZhongkaiGBK Medium (Combat)\tX\t\t-\t\tX\t\tX\t\tX",
        "retail": true
      }
    ],
    "List": [
      {
        "name": "List",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:List(mediatype)",
        "retail": true
      }
    ],
    "GetGlobal": [
      {
        "name": "GetGlobal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetGlobal(mediatype)",
        "retail": true
      }
    ],
    "SetGlobal": [
      {
        "name": "SetGlobal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:SetGlobal(mediatype, key)",
        "retail": true
      }
    ],
    "GetDefault": [
      {
        "name": "GetDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetDefault(mediatype)",
        "retail": true
      }
    ],
    "SetDefault": [
      {
        "name": "SetDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:SetDefault(mediatype, key)",
        "retail": true
      }
    ],
    "SerializeStringHelper": [
      {
        "name": "SerializeStringHelper",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function SerializeStringHelper(ch)\t-- Used by SerializeValue for strings",
        "retail": true
      }
    ],
    "SerializeValue": [
      {
        "name": "SerializeValue",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function SerializeValue(v, res, nres)",
        "retail": true
      }
    ],
    "DeserializeStringHelper": [
      {
        "name": "DeserializeStringHelper",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function DeserializeStringHelper(escape)",
        "retail": true
      }
    ],
    "DeserializeNumberHelper": [
      {
        "name": "DeserializeNumberHelper",
        "count": 2,
        "confidence": 0.4,
        "sample": "local function DeserializeNumberHelper(number)",
        "retail": true
      }
    ],
    "Main": [
      {
        "name": "Main",
        "count": 1,
        "confidence": 0.2,
        "sample": "--   Main (top-level) mode: Deserialize a list of values and return them all",
        "retail": true
      }
    ],
    "Recursive": [
      {
        "name": "Recursive",
        "count": 1,
        "confidence": 0.2,
        "sample": "--   Recursive (table) mode: Deserialize only a single value (_may_ of course be another table with lots of subvalues in it)",
        "retail": true
      }
    ],
    "DeserializeValue": [
      {
        "name": "DeserializeValue",
        "count": 4,
        "confidence": 0.8,
        "sample": "local function DeserializeValue(iter,single,ctl,data)",
        "retail": true
      }
    ],
    "DeprecatedMessage": [
      {
        "name": "DeprecatedMessage",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.DeprecatedMessage(\"|cFFEEEEEE\" .. deprecatedCall .. \"|r is deprecated|cFFEEEEEE, please use \" .. newCall .. \"\\nFrom a weakaura named: \" .. auraName .. \"\")",
        "retail": true
      }
    ],
    "RequestAllPlayersInfo": [
      {
        "name": "RequestAllPlayersInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.RequestAllPlayersInfo()",
        "retail": true
      }
    ],
    "RequestAllData": [
      {
        "name": "RequestAllData",
        "count": 3,
        "confidence": 0.6,
        "sample": "showDeprecatedMessage(\"openRaidLib.RequestAllPlayersInfo()\", \"openRaidLib.RequestAllData()\")",
        "retail": true
      }
    ],
    "GetPlayerInfo": [
      {
        "name": "GetPlayerInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.playerInfoManager.GetPlayerInfo()",
        "retail": true
      }
    ],
    "GetAllPlayersInfo": [
      {
        "name": "GetAllPlayersInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.playerInfoManager.GetAllPlayersInfo()",
        "retail": true
      }
    ],
    "GetAllUnitsInfo": [
      {
        "name": "GetAllUnitsInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "showDeprecatedMessage(\"openRaidLib.playerInfoManager.GetAllPlayersInfo()\", \"openRaidLib.GetAllUnitsInfo()\")",
        "retail": true
      },
      {
        "name": "UnitInfoManager.GetAllUnitsInfo",
        "count": 5,
        "confidence": 1.0,
        "sample": "return openRaidLib.UnitInfoManager.GetAllUnitsInfo()",
        "retail": true
      }
    ],
    "GetAllPlayersGear": [
      {
        "name": "GetAllPlayersGear",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.gearManager.GetAllPlayersGear()",
        "retail": true
      }
    ],
    "GetPlayerGear": [
      {
        "name": "GetPlayerGear",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.gearManager.GetPlayerGear()",
        "retail": true
      }
    ],
    "GetAllPlayersCooldown": [
      {
        "name": "GetAllPlayersCooldown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.cooldownManager.GetAllPlayersCooldown()",
        "retail": true
      }
    ],
    "GetAllUnitsCooldown": [
      {
        "name": "GetAllUnitsCooldown",
        "count": 3,
        "confidence": 0.6,
        "sample": "showDeprecatedMessage(\"openRaidLib.cooldownManager.GetAllPlayersCooldown()\", \"openRaidLib.GetAllUnitsCooldown()\")",
        "retail": true
      }
    ],
    "GetPlayerCooldowns": [
      {
        "name": "GetPlayerCooldowns",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.cooldownManager.GetPlayerCooldowns()",
        "retail": true
      }
    ],
    "GetHeroTalentId": [
      {
        "name": "GetHeroTalentId",
        "count": 4,
        "confidence": 0.8,
        "sample": "function openRaidLib.GetHeroTalentId()",
        "retail": true
      }
    ],
    "IsTWWExpansion": [
      {
        "name": "IsTWWExpansion",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (IsTWWExpansion()) then",
        "retail": true
      }
    ],
    "GetTalentVersion": [
      {
        "name": "GetTalentVersion",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.GetTalentVersion()",
        "retail": true
      }
    ],
    "GetBorrowedTalentVersion": [
      {
        "name": "GetBorrowedTalentVersion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetBorrowedTalentVersion()",
        "retail": true
      }
    ],
    "IsShadowlands": [
      {
        "name": "IsShadowlands",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (IsShadowlands()) then",
        "retail": true
      }
    ],
    "MakeExportDataStream": [
      {
        "name": "ExportUtil.MakeExportDataStream",
        "count": 2,
        "confidence": 0.4,
        "sample": "local exportStream = ExportUtil.MakeExportDataStream()",
        "retail": true
      }
    ],
    "GetCurrentSpecID": [
      {
        "name": "PlayerUtil.GetCurrentSpecID",
        "count": 2,
        "confidence": 0.4,
        "sample": "local currentSpecID = PlayerUtil.GetCurrentSpecID()",
        "retail": true
      }
    ],
    "GetTreeInfo": [
      {
        "name": "C_Traits.GetTreeInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local treeInfo = C_Traits.GetTreeInfo(configId, configInfo.treeIDs[1])",
        "retail": true
      },
      {
        "name": "GetTreeInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local treeInfo = talentsFrame:GetTreeInfo()",
        "retail": true
      }
    ],
    "GetTreeHash": [
      {
        "name": "C_Traits.GetTreeHash",
        "count": 2,
        "confidence": 0.4,
        "sample": "local treeHash = C_Traits.GetTreeHash(treeInfo.ID)",
        "retail": true
      }
    ],
    "GetLoadoutSerializationVersion": [
      {
        "name": "C_Traits.GetLoadoutSerializationVersion",
        "count": 3,
        "confidence": 0.6,
        "sample": "local serializationVersion = C_Traits.GetLoadoutSerializationVersion()",
        "retail": true
      }
    ],
    "GenerateImportString": [
      {
        "name": "C_Traits.GenerateImportString",
        "count": 2,
        "confidence": 0.4,
        "sample": "return C_Traits.GenerateImportString(activeConfigID)",
        "retail": true
      }
    ],
    "MakeImportDataStream": [
      {
        "name": "ExportUtil.MakeImportDataStream",
        "count": 1,
        "confidence": 0.2,
        "sample": "local importStream = ExportUtil.MakeImportDataStream(talentString)",
        "retail": true
      }
    ],
    "ReadLoadoutHeader": [
      {
        "name": "ReadLoadoutHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "local headerValid, serializationVersion, specID, treeHash = talentsFrame:ReadLoadoutHeader(importStream)",
        "retail": true
      }
    ],
    "GetConfigID": [
      {
        "name": "GetConfigID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local configID = talentsFrame:GetConfigID()",
        "retail": true
      }
    ],
    "ReadLoadoutContent": [
      {
        "name": "ReadLoadoutContent",
        "count": 1,
        "confidence": 0.2,
        "sample": "local loadoutContent = talentsFrame:ReadLoadoutContent(importStream, treeInfo.ID)",
        "retail": true
      }
    ],
    "ConvertToImportLoadoutEntryInfo": [
      {
        "name": "ConvertToImportLoadoutEntryInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local loadoutEntryInfo = talentsFrame:ConvertToImportLoadoutEntryInfo(configID, treeInfo.ID, loadoutContent)",
        "retail": true
      }
    ],
    "GetDragonFlightTalentsAsString": [
      {
        "name": "GetDragonFlightTalentsAsString",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.GetDragonFlightTalentsAsString()",
        "retail": true
      }
    ],
    "ParseTalentString": [
      {
        "name": "ParseTalentString",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.ParseTalentString(talentString)",
        "retail": true
      }
    ],
    "HT": [
      {
        "name": "HT",
        "count": 1,
        "confidence": 0.2,
        "sample": "local heroTalentId = talentString:match(\"@HT(%d+)\")",
        "retail": true
      }
    ],
    "GetPlayerTalentsAsPairsTable": [
      {
        "name": "UnitInfoManager.GetPlayerTalentsAsPairsTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.UnitInfoManager.GetPlayerTalentsAsPairsTable()",
        "retail": true
      }
    ],
    "GetPlayerTalents": [
      {
        "name": "UnitInfoManager.GetPlayerTalents",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.UnitInfoManager.GetPlayerTalents()",
        "retail": true
      }
    ],
    "GetPlayerPvPTalents": [
      {
        "name": "UnitInfoManager.GetPlayerPvPTalents",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.UnitInfoManager.GetPlayerPvPTalents()",
        "retail": true
      }
    ],
    "GetAllSelectedPvpTalentIDs": [
      {
        "name": "C_SpecializationInfo.GetAllSelectedPvpTalentIDs",
        "count": 2,
        "confidence": 0.4,
        "sample": "local talentList = C_SpecializationInfo.GetAllSelectedPvpTalentIDs()",
        "retail": true
      }
    ],
    "GetPvpTalentInfoByID": [
      {
        "name": "GetPvpTalentInfoByID",
        "count": 4,
        "confidence": 0.8,
        "sample": "local doesExists = GetPvpTalentInfoByID(talentId)",
        "retail": true
      }
    ],
    "GetPlayerSpecId": [
      {
        "name": "GetPlayerSpecId",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.GetPlayerSpecId()",
        "retail": true
      }
    ],
    "GetPlayerConduits": [
      {
        "name": "UnitInfoManager.GetPlayerConduits",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.UnitInfoManager.GetPlayerConduits()",
        "retail": true
      }
    ],
    "GetActiveSoulbindID": [
      {
        "name": "C_Soulbinds.GetActiveSoulbindID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local soulbindID = C_Soulbinds.GetActiveSoulbindID()",
        "retail": true
      }
    ],
    "GetSoulbindData": [
      {
        "name": "C_Soulbinds.GetSoulbindData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local soulbindData = C_Soulbinds.GetSoulbindData(soulbindID)",
        "retail": true
      }
    ],
    "GetConduitSpellID": [
      {
        "name": "C_Soulbinds.GetConduitSpellID",
        "count": 1,
        "confidence": 0.2,
        "sample": "spellId = C_Soulbinds.GetConduitSpellID(nodeInfo.conduitID, nodeInfo.conduitRank)",
        "retail": true
      }
    ],
    "C_Soulbinds_GetConduitCollectionData": [
      {
        "name": "C_Soulbinds_GetConduitCollectionData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local collectionData = C_Soulbinds_GetConduitCollectionData(conduitId)",
        "retail": true
      }
    ],
    "GetPlayerItemLevel": [
      {
        "name": "GearManager.GetPlayerItemLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GearManager.GetPlayerItemLevel()",
        "retail": true
      }
    ],
    "GetPlayerGearDurability": [
      {
        "name": "GearManager.GetPlayerGearDurability",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.GearManager.GetPlayerGearDurability()",
        "retail": true
      }
    ],
    "GetInventoryItemDurability": [
      {
        "name": "GetInventoryItemDurability",
        "count": 1,
        "confidence": 0.2,
        "sample": "local durability, maxDurability = GetInventoryItemDurability(i)",
        "retail": true
      }
    ],
    "GetPlayerWeaponEnchant": [
      {
        "name": "GearManager.GetPlayerWeaponEnchant",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GearManager.GetPlayerWeaponEnchant()",
        "retail": true
      }
    ],
    "GetWeaponEnchantInfo": [
      {
        "name": "GetWeaponEnchantInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local _, _, _, mainHandEnchantId, _, _, _, offHandEnchantId = GetWeaponEnchantInfo()",
        "retail": true
      }
    ],
    "GetPlayerGemsAndEnchantInfo": [
      {
        "name": "GearManager.GetPlayerGemsAndEnchantInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GearManager.GetPlayerGemsAndEnchantInfo()",
        "retail": true
      }
    ],
    "BuildPlayerEquipmentList": [
      {
        "name": "GearManager.BuildPlayerEquipmentList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GearManager.BuildPlayerEquipmentList()",
        "retail": true
      }
    ],
    "ExtractLink": [
      {
        "name": "LinkUtil.ExtractLink",
        "count": 2,
        "confidence": 0.4,
        "sample": "--local linkOptions = {LinkUtil.ExtractLink(itemLink)} [1] 'item' [2] itemlink string [3] item name",
        "retail": true
      }
    ],
    "GetPlayerCooldownStatus": [
      {
        "name": "CooldownManager.GetPlayerCooldownStatus",
        "count": 9,
        "confidence": 1.0,
        "sample": "local timeLeft, charges, startTimeOffset, duration, auraDuration = openRaidLib.CooldownManager.GetPlayerCooldownStatus(cooldownSpellId)",
        "retail": true
      },
      {
        "name": "GetPlayerCooldownStatus",
        "count": 1,
        "confidence": 0.2,
        "sample": "return openRaidLib.DiagnosticError(\"CooldownManager|GetPlayerCooldownStatus()|cooldownInfo not found|\", spellId)",
        "retail": true
      }
    ],
    "GetSpellBookItemType": [
      {
        "name": "C_SpellBook.GetSpellBookItemType",
        "count": 2,
        "confidence": 0.4,
        "sample": "local itemType, actionID, spellID = C_SpellBook.GetSpellBookItemType(i, spellBookPetEnum)",
        "retail": true
      }
    ],
    "SendAllPlayerCooldowns": [
      {
        "name": "SendAllPlayerCooldowns",
        "count": 1,
        "confidence": 0.2,
        "sample": "--called only from SendAllPlayerCooldowns()",
        "retail": true
      },
      {
        "name": "CooldownManager.SendAllPlayerCooldowns",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.CooldownManager.SendAllPlayerCooldowns()",
        "retail": true
      }
    ],
    "GetPlayerCooldownList": [
      {
        "name": "CooldownManager.GetPlayerCooldownList",
        "count": 4,
        "confidence": 0.8,
        "sample": "function openRaidLib.CooldownManager.GetPlayerCooldownList()",
        "retail": true
      }
    ],
    "DiagnosticError": [
      {
        "name": "DiagnosticError",
        "count": 21,
        "confidence": 1.0,
        "sample": "openRaidLib.DiagnosticError(\"CooldownManager|GetPlayerCooldownList|LIB_OPEN_RAID_PLAYERCOOLDOWNS is nil\")",
        "retail": true
      }
    ],
    "GetSpellBuffDuration": [
      {
        "name": "CooldownManager.GetSpellBuffDuration",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.CooldownManager.GetSpellBuffDuration(spellId, unitId)",
        "retail": true
      }
    ],
    "ScanCallback": [
      {
        "name": "AuraTracker.ScanCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.AuraTracker.ScanCallback(auraInfo)",
        "retail": true
      }
    ],
    "ScanUnitAuras": [
      {
        "name": "AuraTracker.ScanUnitAuras",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.AuraTracker.ScanUnitAuras(unitId)",
        "retail": true
      }
    ],
    "StartScanUnitAuras": [
      {
        "name": "AuraTracker.StartScanUnitAuras",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.AuraTracker.StartScanUnitAuras(unitId) --this function isn't getting called (was called from Entering World event)",
        "retail": true
      }
    ],
    "AuraRemoved": [
      {
        "name": "AuraRemoved",
        "count": 1,
        "confidence": 0.2,
        "sample": "function debugModule.AuraRemoved(event, unitId, spellId)",
        "retail": true
      }
    ],
    "GetPlayerSpellList": [
      {
        "name": "Util.GetPlayerSpellList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.Util.GetPlayerSpellList()",
        "retail": true
      }
    ],
    "Silence": [
      {
        "name": "Silence",
        "count": 13,
        "confidence": 1.0,
        "sample": "[15487] = {class = \"PRIEST\", specs = {258}, cooldown = 45, silence = 4, talent = false, cooldownWithTalent = 30, cooldownTalentId = 23137, type = 6, charges = 1}, --Silence (shadow) Last Word Talent to reduce cooldown in 15 seconds",
        "retail": true
      }
    ],
    "Rebuke": [
      {
        "name": "Rebuke",
        "count": 14,
        "confidence": 1.0,
        "sample": "[96231] = {class = \"PALADIN\", specs = {66, 70}, cooldown = 15, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Rebuke (protection and retribution)",
        "retail": true
      }
    ],
    "Bash": [
      {
        "name": "Bash",
        "count": 13,
        "confidence": 1.0,
        "sample": "[106839] = {class = \"DRUID\", specs = {103, 104}, cooldown = 15, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Skull Bash (feral, guardian)",
        "retail": true
      }
    ],
    "Beam": [
      {
        "name": "Beam",
        "count": 13,
        "confidence": 1.0,
        "sample": "[78675] = {class = \"DRUID\", specs = {102}, cooldown = 60, silence = 8, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Solar Beam (balance)",
        "retail": true
      }
    ],
    "Muzzle": [
      {
        "name": "Muzzle",
        "count": 13,
        "confidence": 1.0,
        "sample": "[187707] = {class = \"HUNTER\", specs = {255}, cooldown = 15, silence = 3, talent = false, cooldownWithTalent = false, cooldownTalentId = false, type = 6, charges = 1}, --Muzzle (survival)",
        "retail": true
      }
    ],
    "Lock": [
      {
        "name": "Lock",
        "count": 14,
        "confidence": 1.0,
        "sample": "[19647] = {class = \"WARLOCK\", specs = {265, 266, 267}, cooldown = 24, silence = 6, talent = false, cooldownWithTalent = false, cooldownTalentId = false, pet = 417, type = 6, charges = 1}, --Spell Lock (pet felhunter ability)",
        "retail": true
      }
    ],
    "Toss": [
      {
        "name": "Toss",
        "count": 20,
        "confidence": 1.0,
        "sample": "[89766] = {class = \"WARLOCK\", specs = {266}, cooldown = 30, silence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false, pet = 17252, type = 6, charges = 1}, --Axe Toss (pet felguard ability)",
        "retail": true
      }
    ],
    "Avenger": [
      {
        "name": "Avenger",
        "count": 7,
        "confidence": 1.0,
        "sample": "[105809] = \t{cooldown = 90, \tduration = 20, \t\tspecs = {65,66,70}, \ttalent =22164, charges = 1, class = \"PALADIN\", type = 2}, --Holy Avenger (talent)",
        "retail": true
      }
    ],
    "Spellwarding": [
      {
        "name": "Spellwarding",
        "count": 6,
        "confidence": 1.0,
        "sample": "[204018] = \t{cooldown = 180, \tduration = 10, \t\tspecs = {66}, \t\t\ttalent =22435, charges = 1, class = \"PALADIN\", type = 3}, --Blessing of Spellwarding (talent)",
        "retail": true
      }
    ],
    "Bladestorm": [
      {
        "name": "Bladestorm",
        "count": 6,
        "confidence": 1.0,
        "sample": "[46924] = \t{cooldown = 60, \tduration = 4, \t\tspecs = {72},\t\t \ttalent =22400, charges = 1, class = \"WARRIOR\", type = 1}, --Bladestorm (talent)",
        "retail": true
      }
    ],
    "Felguard": [
      {
        "name": "Felguard",
        "count": 6,
        "confidence": 1.0,
        "sample": "[111898] = \t{cooldown = 120, \tduration = 15, \t\tspecs = {266}, \t\t\ttalent =21717, charges = 1, class = \"WARLOCK\", type = 1}, --Grimoire: Felguard (talent)",
        "retail": true
      }
    ],
    "Instability": [
      {
        "name": "Instability",
        "count": 6,
        "confidence": 1.0,
        "sample": "[113858] = \t{cooldown = 120, \tduration = 20, \t\tspecs = {267}, \t\t\ttalent =23092, charges = 1, class = \"WARLOCK\", type = 1}, --Dark Soul: Instability (talent)",
        "retail": true
      }
    ],
    "Guidance": [
      {
        "name": "Guidance",
        "count": 6,
        "confidence": 1.0,
        "sample": "[108281] = \t{cooldown = 120, \tduration = 10, \t\tspecs = {262,263}, \t\ttalent =22172, charges = 1, class = \"SHAMAN\", type = 4}, --Ancestral Guidance (talent)",
        "retail": true
      }
    ],
    "Ascendance": [
      {
        "name": "Ascendance",
        "count": 18,
        "confidence": 1.0,
        "sample": "[114050] = \t{cooldown = 180, \tduration = 15, \t\tspecs = {262}, \t\t\ttalent =21675, charges = 1, class = \"SHAMAN\", type = 1}, --Ascendance (talent)",
        "retail": true
      }
    ],
    "Harm": [
      {
        "name": "Harm",
        "count": 8,
        "confidence": 1.0,
        "sample": "[122278] = \t{cooldown = 120, \tduration = 10, \t\tspecs = {268,269,270}, \ttalent =20175, charges = 1, class = \"MONK\", type = 2}, --Dampen Harm (talent)",
        "retail": true
      }
    ],
    "Magic": [
      {
        "name": "Magic",
        "count": 11,
        "confidence": 1.0,
        "sample": "[122783] = \t{cooldown = 90, \tduration = 6, \t\tspecs = {269,270}, \t\ttalent =20173, charges = 1, class = \"MONK\", type = 2}, --Diffuse Magic (talent)",
        "retail": true
      }
    ],
    "Camouflage": [
      {
        "name": "Camouflage",
        "count": 8,
        "confidence": 1.0,
        "sample": "[199483] = \t{cooldown = 60, \tduration = 60, \t\tspecs = {253,254,255}, \ttalent =23100, charges = 1, class = \"HUNTER\", type = 2}, --Camouflage (talent)",
        "retail": true
      }
    ],
    "Elune": [
      {
        "name": "Elune",
        "count": 6,
        "confidence": 1.0,
        "sample": "[102560] = \t{cooldown = 180, \tduration = 30, \t\tspecs = {102}, \t\t\t\ttalent =21702, charges = 1, class = \"DRUID\", type = 1}, --Incarnation: Chosen of Elune (talent)",
        "retail": true
      }
    ],
    "Renewal": [
      {
        "name": "Renewal",
        "count": 9,
        "confidence": 1.0,
        "sample": "[108238] = \t{cooldown = 90, \tduration = false, \tspecs = {102,103,104,105}, \ttalent =18570, charges = 1, class = \"DRUID\", type = 2}, --Renewal (talent)",
        "retail": true
      }
    ],
    "Instincts": [
      {
        "name": "Instincts",
        "count": 5,
        "confidence": 1.0,
        "sample": "[61336] = \t{cooldown = 120, \tduration = 6, \t\tspecs = {103,104}, \t\t\ttalent =false, charges = 2, class = \"DRUID\", type = 2}, --Survival Instincts (2min feral 4min guardian, same spellid)",
        "retail": true
      }
    ],
    "Ursoc": [
      {
        "name": "Ursoc",
        "count": 6,
        "confidence": 1.0,
        "sample": "[102558] = \t{cooldown = 180, \tduration = 30, \t\tspecs = {104}, \t\t\t\ttalent =22388, charges = 1, class = \"DRUID\", type = 2}, --Incarnation: Guardian of Ursoc (talent)",
        "retail": true
      }
    ],
    "Life": [
      {
        "name": "Life",
        "count": 6,
        "confidence": 1.0,
        "sample": "[33891] = \t{cooldown = 180, \tduration = 30, \t\tspecs = {105}, \t\t\t\ttalent =22421, charges = 1, class = \"DRUID\", type = 2}, --Incarnation: Tree of Life (talent)",
        "retail": true
      }
    ],
    "Overgrowth": [
      {
        "name": "Overgrowth",
        "count": 6,
        "confidence": 1.0,
        "sample": "[203651] = \t{cooldown = 60, \tduration = false, \tspecs = {105}, \t\t\t\ttalent =22422, charges = 1, class = \"DRUID\", type = 3}, --Overgrowth (talent)",
        "retail": true
      }
    ],
    "Flourish": [
      {
        "name": "Flourish",
        "count": 6,
        "confidence": 1.0,
        "sample": "[197721] = \t{cooldown = 90, \tduration = 8, \t\tspecs = {105}, \t\t\t\ttalent =22404, charges = 1, class = \"DRUID\", type = 4}, --Flourish (talent)",
        "retail": true
      }
    ],
    "Assault": [
      {
        "name": "Assault",
        "count": 6,
        "confidence": 1.0,
        "sample": "[207289] = \t{cooldown = 78, \tduration = 12, \t\tspecs = {252}, \t\t\ttalent =22538, charges = 1, class = \"DEATHKNIGHT\", type = 1}, --Unholy Assault (talent)",
        "retail": true
      }
    ],
    "Sindragosa": [
      {
        "name": "Sindragosa",
        "count": 6,
        "confidence": 1.0,
        "sample": "[152279] = \t{cooldown = 120, \tduration = 5, \t\tspecs = {251}, \t\t\ttalent =22537, charges = 1, class = \"DEATHKNIGHT\", type = 1}, --Breath of Sindragosa (talent)",
        "retail": true
      }
    ],
    "Tombstone": [
      {
        "name": "Tombstone",
        "count": 6,
        "confidence": 1.0,
        "sample": "[219809] = \t{cooldown = 60, \tduration = 8, \t\tspecs = {250}, \t\t\ttalent =23454, charges = 1, class = \"DEATHKNIGHT\", type = 2}, --Tombstone (talent)",
        "retail": true
      }
    ],
    "Sleet": [
      {
        "name": "Sleet",
        "count": 6,
        "confidence": 1.0,
        "sample": "[207167] = \t{cooldown = 60, \tduration = 5, \t\tspecs = {251}, \t\t\ttalent =22519, charges = 1, class = \"DEATHKNIGHT\", type = 5}, --Blinding Sleet (talent)",
        "retail": true
      }
    ],
    "Asphyxiate": [
      {
        "name": "Asphyxiate",
        "count": 8,
        "confidence": 1.0,
        "sample": "[108194] = \t{cooldown = 45, \tduration = 4, \t\tspecs = {251,252}, \t\ttalent =22520, charges = 1, class = \"DEATHKNIGHT\", type = 5}, --Asphyxiate (talent)",
        "retail": true
      }
    ],
    "Netherwalk": [
      {
        "name": "Netherwalk",
        "count": 6,
        "confidence": 1.0,
        "sample": "[196555] = \t{cooldown = 120, \tduration = 5, \t\tspecs = {577}, \t\t\ttalent =21865, charges = 1, class = \"DEMONHUNTER\", type = 2}, --Netherwalk (talent)",
        "retail": true
      }
    ],
    "Eruption": [
      {
        "name": "Eruption",
        "count": 6,
        "confidence": 1.0,
        "sample": "[211881] = \t{cooldown = 30, \tduration = 4, \t\tspecs = {577}, \t\t\ttalent =22767, charges = 1, class = \"DEMONHUNTER\", type = 5}, --Fel Eruption (talent)",
        "retail": true
      }
    ],
    "Extraction": [
      {
        "name": "Extraction",
        "count": 6,
        "confidence": 1.0,
        "sample": "[320341] = \t{cooldown = 90, \tduration = false, \tspecs = {581}, \t\t\ttalent =21902, charges = 1, class = \"DEMONHUNTER\", type = 1}, --Bulk Extraction (talent)",
        "retail": true
      }
    ],
    "Chains": [
      {
        "name": "Chains",
        "count": 6,
        "confidence": 1.0,
        "sample": "[202138] = \t{cooldown = 90, \tduration = 6, \t\tspecs = {581}, \t\t\ttalent =22511, charges = 1, class = \"DEMONHUNTER\", type = 5}, --Sigil of Chains (talent)",
        "retail": true
      }
    ],
    "Mindbender": [
      {
        "name": "Mindbender",
        "count": 10,
        "confidence": 1.0,
        "sample": "[200174] = \t{cooldown = 60, \tduration = 15, \t\tspecs = {258}, \t\t\ttalent =21719, charges = 1, class = \"PRIEST\", type = 1},  --Mindbender (talent)",
        "retail": true
      }
    ],
    "Apotheosis": [
      {
        "name": "Apotheosis",
        "count": 5,
        "confidence": 1.0,
        "sample": "[200183] = \t{cooldown = 120, \tduration = 20, \t\tspecs = {257}, \t\t\ttalent =21644, charges = 1, class = \"PRIEST\", type = 2},  --Apotheosis (talent)",
        "retail": true
      }
    ],
    "Salvation": [
      {
        "name": "Salvation",
        "count": 6,
        "confidence": 1.0,
        "sample": "[265202] = \t{cooldown = 720, \tduration = false, \tspecs = {257}, \t\t\ttalent =23145, charges = 1, class = \"PRIEST\", type = 4},  --Holy Word: Salvation (talent)",
        "retail": true
      }
    ],
    "Madness": [
      {
        "name": "Madness",
        "count": 5,
        "confidence": 1.0,
        "sample": "[193223] = \t{cooldown = 240, \tduration = 60, \t\tspecs = {258}, \t\t\ttalent =21979, charges = 1, class = \"PRIEST\", type = 1},  --Surrender to Madness (talent)",
        "retail": true
      }
    ],
    "Spree": [
      {
        "name": "Spree",
        "count": 6,
        "confidence": 1.0,
        "sample": "[51690] = \t{cooldown = 120, \tduration = 2, \t\tspecs = {260}, \t\t\ttalent =23175, charges = 1, class = \"ROGUE\", type = 1},  --Killing Spree (talent)",
        "retail": true
      }
    ],
    "Manner": [
      {
        "name": "Manner",
        "count": 2,
        "confidence": 0.4,
        "sample": "[90337] = {cooldown = 60,\tclass = \"HUNTER\"}, --Bad Manner (Monkey Stun)",
        "retail": true
      }
    ],
    "Fireball": [
      {
        "name": "Fireball",
        "count": 6,
        "confidence": 1.0,
        "sample": "[88082] = {name = GetSpellInfo(88082) .. \" (\" .. L[\"STRING_MIRROR_IMAGE\"] .. \")\"}, --Mirror Image's Fireball (mage)",
        "retail": true
      }
    ],
    "Tricks": [
      {
        "name": "Tricks",
        "count": 2,
        "confidence": 0.4,
        "sample": "[312411] = {cooldown = 90,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[35] = true}, race = \"Vulpera\",\tclass = \"\",\ttype = 9}, --Bag of Tricks (Vulpera)",
        "retail": true
      }
    ],
    "Call": [
      {
        "name": "Call",
        "count": 2,
        "confidence": 0.4,
        "sample": "[274738] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[36] = true}, race = \"MagharOrc\",\tclass = \"\",\ttype = 9}, --Ancestral Call (MagharOrc)",
        "retail": true
      }
    ],
    "Loa": [
      {
        "name": "Loa",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[292752] = {cooldown = 432000,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[31] = true}, race = \"ZandalariTroll\",\tclass = \"\",\ttype = 9}, --Embrace of the Loa (ZandalariTroll)",
        "retail": true
      }
    ],
    "Swoop": [
      {
        "name": "Swoop",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[281954] = {cooldown = 900,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[31] = true}, race = \"ZandalariTroll\",\tclass = \"\",\ttype = 9}, --Pterrordax Swoop (ZandalariTroll)",
        "retail": true
      }
    ],
    "Pulse": [
      {
        "name": "Pulse",
        "count": 2,
        "confidence": 0.4,
        "sample": "[260364] = {cooldown = 180,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[27] = true}, race = \"Nightborne\",\tclass = \"\",\ttype = 9}, --Arcane Pulse (Nightborne)",
        "retail": true
      }
    ],
    "Cantrips": [
      {
        "name": "Cantrips",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[255661] = {cooldown = 600,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[27] = true}, race = \"Nightborne\",\tclass = \"\",\ttype = 9}, --Cantrips (Nightborne)",
        "retail": true
      }
    ],
    "Hobgoblin": [
      {
        "name": "Hobgoblin",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[69046] = {cooldown = 1800,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[9] = true}, race = \"Goblin\",\tclass = \"\",\ttype = 9}, --Pack Hobgoblin (Goblin)",
        "retail": true
      }
    ],
    "Jump": [
      {
        "name": "Jump",
        "count": 2,
        "confidence": 0.4,
        "sample": "[69070] = {cooldown = 90,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[9] = true}, race = \"Goblin\",\tclass = \"\",\ttype = 9}, --Rocket Jump (Goblin)",
        "retail": true
      }
    ],
    "Stomp": [
      {
        "name": "Stomp",
        "count": 3,
        "confidence": 0.6,
        "sample": "[20549] = {cooldown = 90,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[6] = true}, race = \"Tauren\",\tclass = \"\",\ttype = 9}, --War Stomp (Tauren)",
        "retail": true
      }
    ],
    "Cannibalize": [
      {
        "name": "Cannibalize",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[20577] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[5] = true}, race = \"Scourge\",\tclass = \"\",\ttype = 9}, --Cannibalize (Scourge)",
        "retail": true
      }
    ],
    "Forsaken": [
      {
        "name": "Forsaken",
        "count": 2,
        "confidence": 0.4,
        "sample": "[7744] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[5] = true}, race = \"Scourge\",\tclass = \"\",\ttype = 9}, --Will of the Forsaken (Scourge)",
        "retail": true
      }
    ],
    "Originator": [
      {
        "name": "Originator",
        "count": 2,
        "confidence": 0.4,
        "sample": "[312924] = {cooldown = 180,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[37] = true}, race = \"Mechagnome\",\tclass = \"\",\ttype = 9}, --Hyper Organic Light Originator (Mechagnome)",
        "retail": true
      }
    ],
    "Pinkie": [
      {
        "name": "Pinkie",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[312890] = {cooldown = 0,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[37] = true}, race = \"Mechagnome\",\tclass = \"\",\ttype = 9}, --Skeleton Pinkie (Mechagnome)",
        "retail": true
      }
    ],
    "Haymaker": [
      {
        "name": "Haymaker",
        "count": 2,
        "confidence": 0.4,
        "sample": "[287712] = {cooldown = 150,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[32] = true}, race = \"KulTiran\",\tclass = \"\",\ttype = 9}, --Haymaker (KulTiran)",
        "retail": true
      }
    ],
    "Fireblood": [
      {
        "name": "Fireblood",
        "count": 2,
        "confidence": 0.4,
        "sample": "[265221] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[34] = true}, race = \"DarkIronDwarf\",\tclass = \"\",\ttype = 9}, --Fireblood (DarkIronDwarf)",
        "retail": true
      }
    ],
    "Machine": [
      {
        "name": "Machine",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[265225] = {cooldown = 1800,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[34] = true}, race = \"DarkIronDwarf\",\tclass = \"\",\ttype = 9}, --Mole Machine (DarkIronDwarf)",
        "retail": true
      }
    ],
    "Judgment": [
      {
        "name": "Judgment",
        "count": 2,
        "confidence": 0.4,
        "sample": "[255647] = {cooldown = 150,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[30] = true}, race = \"LightforgedDraenei\",\tclass = \"\",\ttype = 9}, --Light's Judgment (LightforgedDraenei)",
        "retail": true
      }
    ],
    "Glide": [
      {
        "name": "Glide",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[358733] = {cooldown = 1,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[52] = true, [70] = true}, race = \"Dracthyr\",\tclass = \"\",\ttype = 9}, --Glide (Dracthyr)",
        "retail": true
      }
    ],
    "Swipe": [
      {
        "name": "Swipe",
        "count": 2,
        "confidence": 0.4,
        "sample": "[368970] = {cooldown = 90,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[52] = true, [70] = true}, race = \"Dracthyr\",\tclass = \"\",\ttype = 9}, --Tail Swipe (Dracthyr)",
        "retail": true
      }
    ],
    "Buffet": [
      {
        "name": "Buffet",
        "count": 2,
        "confidence": 0.4,
        "sample": "[357214] = {cooldown = 90,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[52] = true, [70] = true}, race = \"Dracthyr\",\tclass = \"\",\ttype = 9}, --Wing Buffet (Dracthyr)",
        "retail": true
      }
    ],
    "Palm": [
      {
        "name": "Palm",
        "count": 3,
        "confidence": 0.6,
        "sample": "[107079] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[25] = true, [24] = true, [26] = true}, race = \"Pandaren\",\tclass = \"\",\ttype = 9}, --Quaking Palm (Pandaren)",
        "retail": true
      }
    ],
    "Darkflight": [
      {
        "name": "Darkflight",
        "count": 2,
        "confidence": 0.4,
        "sample": "[68992] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[22] = true}, race = \"Worgen\",\tclass = \"\",\ttype = 9}, --Darkflight (Worgen)",
        "retail": true
      }
    ],
    "Forms": [
      {
        "name": "Forms",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[68996] = {cooldown = 1,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[22] = true}, race = \"Worgen\",\tclass = \"\",\ttype = 9}, --Two Forms (Worgen)",
        "retail": true
      }
    ],
    "Berserking": [
      {
        "name": "Berserking",
        "count": 2,
        "confidence": 0.4,
        "sample": "[26297] = {cooldown = 180,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[8] = true}, race = \"Troll\",\tclass = \"\",\ttype = 9}, --Berserking (Troll)",
        "retail": true
      }
    ],
    "Artist": [
      {
        "name": "Artist",
        "count": 2,
        "confidence": 0.4,
        "sample": "[20589] = {cooldown = 60,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[7] = true}, race = \"Gnome\",\tclass = \"\",\ttype = 9}, --Escape Artist (Gnome)",
        "retail": true
      }
    ],
    "Torrent": [
      {
        "name": "Torrent",
        "count": 2,
        "confidence": 0.4,
        "sample": "[232633] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[10] = true}, race = \"BloodElf\",\tclass = \"\",\ttype = 9}, --Arcane Torrent (BloodElf)",
        "retail": true
      }
    ],
    "Survive": [
      {
        "name": "Survive",
        "count": 2,
        "confidence": 0.4,
        "sample": "[59752] = {cooldown = 180,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[1] = true}, race = \"Human\",\tclass = \"\",\ttype = 9}, --Will to Survive (Human)",
        "retail": true
      }
    ],
    "Stoneform": [
      {
        "name": "Stoneform",
        "count": 2,
        "confidence": 0.4,
        "sample": "[20594] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[3] = true}, race = \"Dwarf\",\tclass = \"\",\ttype = 9}, --Stoneform (Dwarf)",
        "retail": true
      }
    ],
    "Shadowmeld": [
      {
        "name": "Shadowmeld",
        "count": 2,
        "confidence": 0.4,
        "sample": "[58984] = {cooldown = 120,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[4] = true}, race = \"NightElf\",\tclass = \"\",\ttype = 9}, --Shadowmeld (NightElf)",
        "retail": true
      }
    ],
    "Naaru": [
      {
        "name": "Naaru",
        "count": 2,
        "confidence": 0.4,
        "sample": "[59542] = {cooldown = 180,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1, raceid = {[11] = true}, race = \"Draenei\",\tclass = \"\",\ttype = 9}, --Gift of the Naaru (Draenei)",
        "retail": true
      }
    ],
    "Quell": [
      {
        "name": "Quell",
        "count": 3,
        "confidence": 0.6,
        "sample": "[351338] =\t{duration = 0, class = \"EVOKER\",\tspecs = {1467, 1468}, cooldown = 40,\tsilence = 4, talent = false, cooldownWithTalent = false, cooldownTalentId = false,\tcharges = 1, type = 6}, --Quell (Evoker)",
        "retail": true
      }
    ],
    "Intercession": [
      {
        "name": "Intercession",
        "count": 2,
        "confidence": 0.4,
        "sample": "--[391054] = {cooldown = 10 min cooldown,\tduration = 0,\tspecs = {},\t\t\ttalent = false,\tcharges = 1,\tclass = \"PALADIN\",\ttype = 5}, --Intercession (battle ress)",
        "retail": true
      }
    ],
    "Seduction": [
      {
        "name": "Seduction",
        "count": 3,
        "confidence": 0.6,
        "sample": "[261589] = {cooldown = 30,\tduration = 30,\tspecs = {265, 266, 267},\ttalent = false,\tcharges = 1,\tclass = \"WARLOCK\",\ttype = 8}, --Seduction (Sacrifice)",
        "retail": true
      }
    ],
    "Stormkeeper": [
      {
        "name": "Stormkeeper",
        "count": 4,
        "confidence": 0.8,
        "sample": "[383009] = {cooldown = 60,   duration = 0,   specs = {264}, \t\t   \ttalent = false, charges = 1,    class = \"SHAMAN\",   type = 1}, --Stormkeeper (resto)",
        "retail": true
      }
    ],
    "Detox": [
      {
        "name": "Detox",
        "count": 4,
        "confidence": 0.8,
        "sample": "[115450] = {cooldown = 8,\tduration = 0,\tspecs = {270},\t\t\t\ttalent = false,\tcharges = 1,\tclass = \"MONK\",\ttype = 7}, --Detox (healer)",
        "retail": true
      }
    ],
    "Arbiter": [
      {
        "name": "Arbiter",
        "count": 2,
        "confidence": 0.4,
        "sample": "[207349] = {cooldown = 180,\tduration = 30,\tspecs = {252},\t\t\t\ttalent = false,\tcharges = 1,\tclass = \"DEATHKNIGHT\",\ttype = 1}, --Summon Dark Arbiter (replaces Gargoyle)",
        "retail": true
      }
    ],
    "Invisibility": [
      {
        "name": "Invisibility",
        "count": 2,
        "confidence": 0.4,
        "sample": "[414664] = {cooldown = 300,\tduration = 12,\tspecs = {63, 64, 62},\t\ttalent = false,\tcharges = 1,\tclass = \"MAGE\",\ttype = 5}, --Mass Invisibility (only out of combat)",
        "retail": true
      }
    ],
    "ShowDiagnosticErrors": [
      {
        "name": "ShowDiagnosticErrors",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.ShowDiagnosticErrors(value)",
        "retail": true
      }
    ],
    "SetCooldownCheckInterval": [
      {
        "name": "SetCooldownCheckInterval",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.SetCooldownCheckInterval(value)",
        "retail": true
      }
    ],
    "RegisterCVar": [
      {
        "name": "C_CVar.RegisterCVar",
        "count": 2,
        "confidence": 0.4,
        "sample": "C_CVar.RegisterCVar(CONST_CVAR_TEMPCACHE)",
        "retail": true
      }
    ],
    "PrintTempCacheDebug": [
      {
        "name": "PrintTempCacheDebug",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.PrintTempCacheDebug()",
        "retail": true
      }
    ],
    "SaveDebugText": [
      {
        "name": "SaveDebugText",
        "count": 2,
        "confidence": 0.4,
        "sample": "function tempCache.SaveDebugText()",
        "retail": true
      }
    ],
    "AddDebugText": [
      {
        "name": "AddDebugText",
        "count": 19,
        "confidence": 1.0,
        "sample": "function tempCache.AddDebugText(text)",
        "retail": true
      }
    ],
    "SaveCacheOnCVar": [
      {
        "name": "SaveCacheOnCVar",
        "count": 2,
        "confidence": 0.4,
        "sample": "function tempCache.SaveCacheOnCVar(data)",
        "retail": true
      }
    ],
    "RestoreData": [
      {
        "name": "RestoreData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function tempCache.RestoreData()",
        "retail": true
      }
    ],
    "SaveData": [
      {
        "name": "SaveData",
        "count": 10,
        "confidence": 1.0,
        "sample": "function tempCache.SaveData()",
        "retail": true
      }
    ],
    "OnReceiveSafeComm": [
      {
        "name": "OnReceiveSafeComm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.commHandler.OnReceiveSafeComm(self, event, prefix, text, channel, sender, target, zoneChannelID, localID, name, instanceID)",
        "retail": true
      }
    ],
    "OnReceiveComm": [
      {
        "name": "OnReceiveComm",
        "count": 5,
        "confidence": 1.0,
        "sample": "openRaidLib.commHandler.OnReceiveComm(event, CONST_COMM_PREFIX, data, channel, sender, target, zoneChannelID, localID, name, instanceID, true)",
        "retail": true
      }
    ],
    "IsCommAllowed": [
      {
        "name": "IsCommAllowed",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not openRaidLib.IsCommAllowed()) then",
        "retail": true
      }
    ],
    "RegisterORComm": [
      {
        "name": "RegisterORComm",
        "count": 18,
        "confidence": 1.0,
        "sample": "function openRaidLib.commHandler.RegisterORComm(prefix, func)",
        "retail": true
      }
    ],
    "SendCommData": [
      {
        "name": "SendCommData",
        "count": 22,
        "confidence": 1.0,
        "sample": "function openRaidLib.commHandler.SendCommData(data, flags, bIsSafe)",
        "retail": true
      }
    ],
    "CancelUniqueTimer": [
      {
        "name": "Schedules.CancelUniqueTimer",
        "count": 5,
        "confidence": 1.0,
        "sample": "openRaidLib.Schedules.CancelUniqueTimer(namespace, scheduleName)",
        "retail": true
      }
    ],
    "NewUniqueTimer": [
      {
        "name": "Schedules.NewUniqueTimer",
        "count": 34,
        "confidence": 1.0,
        "sample": "function openRaidLib.Schedules.NewUniqueTimer(time, callback, namespace, scheduleName, ...)",
        "retail": true
      }
    ],
    "IsUniqueTimerOnCooldown": [
      {
        "name": "Schedules.IsUniqueTimerOnCooldown",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (openRaidLib.Schedules.IsUniqueTimerOnCooldown(namespace, scheduleName)) then",
        "retail": true
      }
    ],
    "CancelAllUniqueTimers": [
      {
        "name": "Schedules.CancelAllUniqueTimers",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.Schedules.CancelAllUniqueTimers()",
        "retail": true
      }
    ],
    "TriggerCallback": [
      {
        "name": "TriggerCallback",
        "count": 36,
        "confidence": 1.0,
        "sample": "function openRaidLib.publicCallback.TriggerCallback(event, ...)",
        "retail": true
      }
    ],
    "UpdateUnitIDCache": [
      {
        "name": "UpdateUnitIDCache",
        "count": 4,
        "confidence": 0.8,
        "sample": "openRaidLib.UpdateUnitIDCache()",
        "retail": true
      }
    ],
    "OnEnterWorldRegisterEvents": [
      {
        "name": "OnEnterWorldRegisterEvents",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.OnEnterWorldRegisterEvents()",
        "retail": true
      }
    ],
    "UnitSpecFound": [
      {
        "name": "UnitSpecFound",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsEventListener:UnitSpecFound(event, unitId, specId, unitGuid)",
        "retail": true
      }
    ],
    "UnitTalentsFound": [
      {
        "name": "UnitTalentsFound",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsEventListener:UnitTalentsFound(event, unitId, talentTable, unitGuid)",
        "retail": true
      }
    ],
    "UpdatePlayerAliveStatus": [
      {
        "name": "UpdatePlayerAliveStatus",
        "count": 5,
        "confidence": 1.0,
        "sample": "openRaidLib.mainControl.UpdatePlayerAliveStatus()",
        "retail": true
      }
    ],
    "SendFullData": [
      {
        "name": "SendFullData",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.mainControl.SendFullData()",
        "retail": true
      }
    ],
    "SendAllPlayerInfo": [
      {
        "name": "UnitInfoManager.SendAllPlayerInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.UnitInfoManager.SendAllPlayerInfo()",
        "retail": true
      }
    ],
    "SendAllGearInfo": [
      {
        "name": "GearManager.SendAllGearInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.GearManager.SendAllGearInfo()",
        "retail": true
      }
    ],
    "GetPlayerFullInfo": [
      {
        "name": "UnitInfoManager.GetPlayerFullInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local playerFullInfo = openRaidLib.UnitInfoManager.GetPlayerFullInfo()",
        "retail": true
      }
    ],
    "AddUnitInfo": [
      {
        "name": "UnitInfoManager.AddUnitInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "openRaidLib.UnitInfoManager.AddUnitInfo(unitName, unpack(playerFullInfo)) --unpack: specId, talentsString, pvpTalentsTableUnpacked",
        "retail": true
      }
    ],
    "GetPlayerFullGearInfo": [
      {
        "name": "GearManager.GetPlayerFullGearInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local playerGearInfo = openRaidLib.GearManager.GetPlayerFullGearInfo()",
        "retail": true
      }
    ],
    "AddUnitGearList": [
      {
        "name": "GearManager.AddUnitGearList",
        "count": 5,
        "confidence": 1.0,
        "sample": "openRaidLib.GearManager.AddUnitGearList(unitName, unpack(playerGearInfo))",
        "retail": true
      },
      {
        "name": "AddUnitGearList",
        "count": 1,
        "confidence": 0.2,
        "sample": "--called from AddUnitGearList() on LibOpenRaid file",
        "retail": true
      }
    ],
    "UpdatePlayerCooldownsLocally": [
      {
        "name": "CooldownManager.UpdatePlayerCooldownsLocally",
        "count": 6,
        "confidence": 1.0,
        "sample": "openRaidLib.CooldownManager.UpdatePlayerCooldownsLocally()",
        "retail": true
      }
    ],
    "UpdatePlayer": [
      {
        "name": "UpdatePlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.UpdatePlayer()",
        "retail": true
      }
    ],
    "UpdatePlayerData": [
      {
        "name": "UpdatePlayerData",
        "count": 1,
        "confidence": 0.2,
        "sample": "return openRaidLib.mainControl.UpdatePlayerData()",
        "retail": true
      }
    ],
    "TCopy": [
      {
        "name": "TCopy",
        "count": 8,
        "confidence": 1.0,
        "sample": "openRaidLib.TCopy(newUnitInfo, unitTablePrototype)",
        "retail": true
      }
    ],
    "EraseData": [
      {
        "name": "UnitInfoManager.EraseData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function UnitInfoManager.EraseData()",
        "retail": true
      },
      {
        "name": "GearManager.EraseData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GearManager.EraseData()",
        "retail": true
      },
      {
        "name": "OpenNotesManager.EraseData",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.OpenNotesManager.EraseData()",
        "retail": true
      },
      {
        "name": "CooldownManager.EraseData",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.CooldownManager.EraseData()",
        "retail": true
      }
    ],
    "SetUnitInfo": [
      {
        "name": "UnitInfoManager.SetUnitInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "function UnitInfoManager.SetUnitInfo(unitName, unitInfo, specId, talentsString, pvpTalentsTableUnpacked)",
        "retail": true
      }
    ],
    "UpdateUnitInfo": [
      {
        "name": "UnitInfoManager.UpdateUnitInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.UpdateUnitInfo(playerName, specId, talentsString, pvpTalentsTableUnpacked)",
        "retail": true
      }
    ],
    "OnReceiveUnitFullInfo": [
      {
        "name": "UnitInfoManager.OnReceiveUnitFullInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.OnReceiveUnitFullInfo(data, unitName)",
        "retail": true
      }
    ],
    "PackTable": [
      {
        "name": "PackTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "dataToSend = dataToSend .. openRaidLib.PackTable(playerInfo[3]) .. \",!1\" --player talents pvp",
        "retail": true
      }
    ],
    "OnPlayerTalentChanged": [
      {
        "name": "UnitInfoManager.OnPlayerTalentChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.OnPlayerTalentChanged()",
        "retail": true
      },
      {
        "name": "CooldownManager.OnPlayerTalentChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnPlayerTalentChanged()",
        "retail": true
      }
    ],
    "OnPlayerLeaveGroup": [
      {
        "name": "UnitInfoManager.OnPlayerLeaveGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.OnPlayerLeaveGroup()",
        "retail": true
      },
      {
        "name": "GearManager.OnPlayerLeaveGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.OnPlayerLeaveGroup()",
        "retail": true
      },
      {
        "name": "CooldownManager.OnPlayerLeaveGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnPlayerLeaveGroup()",
        "retail": true
      }
    ],
    "SendPlayerInfoAfterCombat": [
      {
        "name": "UnitInfoManager.SendPlayerInfoAfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnitInfoManager.SendPlayerInfoAfterCombat()",
        "retail": true
      }
    ],
    "OnPlayerRess": [
      {
        "name": "GearManager.OnPlayerRess",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.OnPlayerRess()",
        "retail": true
      },
      {
        "name": "CooldownManager.OnPlayerRess",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnPlayerRess()",
        "retail": true
      }
    ],
    "SendGearInfoAfterCombat": [
      {
        "name": "GearManager.SendGearInfoAfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.SendGearInfoAfterCombat()",
        "retail": true
      }
    ],
    "SendDurability": [
      {
        "name": "GearManager.SendDurability",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.SendDurability()",
        "retail": true
      }
    ],
    "OnReceiveGearDurability": [
      {
        "name": "GearManager.OnReceiveGearDurability",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.OnReceiveGearDurability(data, unitName)",
        "retail": true
      }
    ],
    "UpdateUnitGearDurability": [
      {
        "name": "GearManager.UpdateUnitGearDurability",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.GearManager.UpdateUnitGearDurability(unitName, durability)",
        "retail": true
      }
    ],
    "BuildEquipmentItemLinks": [
      {
        "name": "GearManager.BuildEquipmentItemLinks",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.GearManager.BuildEquipmentItemLinks(equippedGearList)",
        "retail": true
      }
    ],
    "OnReceiveGearFullInfo": [
      {
        "name": "GearManager.OnReceiveGearFullInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GearManager.OnReceiveGearFullInfo(data, unitName)",
        "retail": true
      }
    ],
    "PackTableAndSubTables": [
      {
        "name": "PackTableAndSubTables",
        "count": 3,
        "confidence": 0.6,
        "sample": "dataToSend = dataToSend .. openRaidLib.PackTableAndSubTables(playerGearInfo[6]) .. \",\" --full equipped equipment",
        "retail": true
      }
    ],
    "GetPlayersInTheGroup": [
      {
        "name": "GetPlayersInTheGroup",
        "count": 3,
        "confidence": 0.6,
        "sample": "local groupMembers = openRaidLib.GetPlayersInTheGroup()",
        "retail": true
      }
    ],
    "GetAllUnitsNotes": [
      {
        "name": "GetAllUnitsNotes",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetAllUnitsNotes()",
        "retail": true
      },
      {
        "name": "OpenNotesManager.GetAllUnitsNotes",
        "count": 3,
        "confidence": 0.6,
        "sample": "return openRaidLib.OpenNotesManager.GetAllUnitsNotes()",
        "retail": true
      }
    ],
    "GetUnitNote": [
      {
        "name": "GetUnitNote",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetUnitNote(unitId)",
        "retail": true
      },
      {
        "name": "OpenNotesManager.GetUnitNote",
        "count": 7,
        "confidence": 1.0,
        "sample": "local noteInfo = openRaidLib.OpenNotesManager.GetUnitNote(unitName)",
        "retail": true
      }
    ],
    "SetUnitNote": [
      {
        "name": "OpenNotesManager.SetUnitNote",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.OpenNotesManager.SetUnitNote(UnitName(\"player\"), note, \"\")",
        "retail": true
      }
    ],
    "SendNote": [
      {
        "name": "OpenNotesManager.SendNote",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.OpenNotesManager.SendNote()",
        "retail": true
      },
      {
        "name": "SendNote",
        "count": 3,
        "confidence": 0.6,
        "sample": "assert(type(playerNote.note) == \"string\", \"OpenRaid: SendNote() invalid note.\")",
        "retail": true
      }
    ],
    "EraseDataKeepPlayer": [
      {
        "name": "OpenNotesManager.EraseDataKeepPlayer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.OpenNotesManager.EraseDataKeepPlayer()",
        "retail": true
      }
    ],
    "OnPlayerEnterWorld": [
      {
        "name": "OpenNotesManager.OnPlayerEnterWorld",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.OpenNotesManager.OnPlayerEnterWorld()",
        "retail": true
      },
      {
        "name": "KeystoneInfoManager.OnPlayerEnterWorld",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.KeystoneInfoManager.OnPlayerEnterWorld()",
        "retail": true
      },
      {
        "name": "RatingInfoManager.OnPlayerEnterWorld",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.OnPlayerEnterWorld()",
        "retail": true
      }
    ],
    "OnReceiveNoteData": [
      {
        "name": "OpenNotesManager.OnReceiveNoteData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.OpenNotesManager.OnReceiveNoteData(data, unitName)",
        "retail": true
      }
    ],
    "OnReceiveNoteRequest": [
      {
        "name": "OpenNotesManager.OnReceiveNoteRequest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.OpenNotesManager.OnReceiveNoteRequest()",
        "retail": true
      }
    ],
    "SendPlayerCooldownUpdate": [
      {
        "name": "CooldownManager.SendPlayerCooldownUpdate",
        "count": 6,
        "confidence": 1.0,
        "sample": "openRaidLib.CooldownManager.SendPlayerCooldownUpdate(spellId, 0, charges, 0, 0, 0)",
        "retail": true
      }
    ],
    "CooldownSpellUpdate": [
      {
        "name": "CooldownManager.CooldownSpellUpdate",
        "count": 10,
        "confidence": 1.0,
        "sample": "openRaidLib.CooldownManager.CooldownSpellUpdate(playerName, spellId, timeLeft, charges, startTimeOffset, duration, auraDuration) --need 7 values",
        "retail": true
      }
    ],
    "GetUnitCooldownInfo": [
      {
        "name": "GetUnitCooldownInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local cooldownInfo = openRaidLib.GetUnitCooldownInfo(playerName, spellId)",
        "retail": true
      }
    ],
    "CleanupCooldownTickers": [
      {
        "name": "CooldownManager.CleanupCooldownTickers",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.CooldownManager.CleanupCooldownTickers()",
        "retail": true
      }
    ],
    "FilterCooldowns": [
      {
        "name": "FilterCooldowns",
        "count": 2,
        "confidence": 0.4,
        "sample": "local filterCooldowns = openRaidLib.FilterCooldowns(unitName, allCooldowns, filter)",
        "retail": true
      }
    ],
    "DoesSpellPassFilters": [
      {
        "name": "DoesSpellPassFilters",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.DoesSpellPassFilters(spellId, filter)",
        "retail": true
      },
      {
        "name": "CooldownManager.DoesSpellPassFilters",
        "count": 2,
        "confidence": 0.4,
        "sample": "return openRaidLib.CooldownManager.DoesSpellPassFilters(spellId, filter)",
        "retail": true
      }
    ],
    "GetCooldownTimeFromUnitSpellID": [
      {
        "name": "GetCooldownTimeFromUnitSpellID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetCooldownTimeFromUnitSpellID(unitId, spellId)",
        "retail": true
      }
    ],
    "GetCooldownInfoValues": [
      {
        "name": "CooldownManager.GetCooldownInfoValues",
        "count": 7,
        "confidence": 1.0,
        "sample": "return openRaidLib.CooldownManager.GetCooldownInfoValues(cooldownInfo)",
        "retail": true
      }
    ],
    "GetCooldownTimeFromCooldownInfo": [
      {
        "name": "GetCooldownTimeFromCooldownInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetCooldownTimeFromCooldownInfo(cooldownInfo)",
        "retail": true
      }
    ],
    "GetRangePercent": [
      {
        "name": "GetRangePercent",
        "count": 7,
        "confidence": 1.0,
        "sample": "local percent = openRaidLib.GetRangePercent(minValue, maxValue, currentValue)",
        "retail": true
      },
      {
        "name": "DF.Math.GetRangePercent",
        "count": 4,
        "confidence": 0.8,
        "sample": "return DF.Math.GetRangeValue(minValue, maxValue, 1 - DF.Math.GetRangePercent(minValue, maxValue, value))",
        "retail": true
      }
    ],
    "GetCooldownStatusFromUnitSpellID": [
      {
        "name": "GetCooldownStatusFromUnitSpellID",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetCooldownStatusFromUnitSpellID(unitId, spellId)",
        "retail": true
      }
    ],
    "OnPlayerCast": [
      {
        "name": "CooldownManager.OnPlayerCast",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnPlayerCast(event, spellId, isPlayerPet) --~cast",
        "retail": true
      }
    ],
    "CheckCooldownsAfterEncounterEnd": [
      {
        "name": "CooldownManager.CheckCooldownsAfterEncounterEnd",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.CheckCooldownsAfterEncounterEnd()",
        "retail": true
      }
    ],
    "OnEncounterEnd": [
      {
        "name": "CooldownManager.OnEncounterEnd",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnEncounterEnd()",
        "retail": true
      }
    ],
    "OnEncounterStart": [
      {
        "name": "CooldownManager.OnEncounterStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnEncounterStart()",
        "retail": true
      }
    ],
    "OnMythicPlusStart": [
      {
        "name": "CooldownManager.OnMythicPlusStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnMythicPlusStart()",
        "retail": true
      }
    ],
    "OnPlayerPetChanged": [
      {
        "name": "CooldownManager.OnPlayerPetChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnPlayerPetChanged()",
        "retail": true
      }
    ],
    "CheckCooldownChanges": [
      {
        "name": "CooldownManager.CheckCooldownChanges",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.CooldownManager.CheckCooldownChanges()",
        "retail": true
      }
    ],
    "OnAuraRemoved": [
      {
        "name": "CooldownManager.OnAuraRemoved",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnAuraRemoved(event, unitId, spellId)",
        "retail": true
      }
    ],
    "CheckForSpellsAdeedOrRemoved": [
      {
        "name": "CheckForSpellsAdeedOrRemoved",
        "count": 1,
        "confidence": 0.2,
        "sample": "--important: CheckForSpellsAdeedOrRemoved() already change the cooldowns on the player locally",
        "retail": true
      },
      {
        "name": "CooldownManager.CheckForSpellsAdeedOrRemoved",
        "count": 2,
        "confidence": 0.4,
        "sample": "local spellsAdded, spellsRemoved = openRaidLib.CooldownManager.CheckForSpellsAdeedOrRemoved()",
        "retail": true
      }
    ],
    "OnReceiveUnitCooldownChanges": [
      {
        "name": "CooldownManager.OnReceiveUnitCooldownChanges",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnReceiveUnitCooldownChanges(data, unitName)",
        "retail": true
      }
    ],
    "AddUnitCooldownsList": [
      {
        "name": "CooldownManager.AddUnitCooldownsList",
        "count": 3,
        "confidence": 0.6,
        "sample": "openRaidLib.CooldownManager.AddUnitCooldownsList(playerName, playerCooldownHash)",
        "retail": true
      }
    ],
    "OnReceiveUnitCooldowns": [
      {
        "name": "CooldownManager.OnReceiveUnitCooldowns",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnReceiveUnitCooldowns(data, unitName)",
        "retail": true
      }
    ],
    "RequestCooldownInfo": [
      {
        "name": "CooldownManager.RequestCooldownInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.CooldownManager.RequestCooldownInfo(spellId)",
        "retail": true
      },
      {
        "name": "RequestCooldownInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RequestCooldownInfo(spellId) --api alias",
        "retail": true
      }
    ],
    "OnReceiveRequestForCooldownInfoUpdate": [
      {
        "name": "CooldownManager.OnReceiveRequestForCooldownInfoUpdate",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.CooldownManager.OnReceiveRequestForCooldownInfoUpdate(data, unitName)",
        "retail": true
      }
    ],
    "GetOwnedKeystoneMapID": [
      {
        "name": "C_MythicPlus.GetOwnedKeystoneMapID",
        "count": 3,
        "confidence": 0.6,
        "sample": "--ATM we are obligated to do this due to C_MythicPlus.GetOwnedKeystoneMapID() return the same mapID for the two Tazavesh dungeons",
        "retail": true
      }
    ],
    "GetOwnedKeystoneLevel": [
      {
        "name": "C_MythicPlus.GetOwnedKeystoneLevel",
        "count": 2,
        "confidence": 0.4,
        "sample": "local level = C_MythicPlus.GetOwnedKeystoneLevel()",
        "retail": true
      }
    ],
    "UpdatePlayerKeystoneInfo": [
      {
        "name": "KeystoneInfoManager.UpdatePlayerKeystoneInfo",
        "count": 8,
        "confidence": 1.0,
        "sample": "openRaidLib.KeystoneInfoManager.UpdatePlayerKeystoneInfo(keystoneInfo)",
        "retail": true
      }
    ],
    "OnReceiveRequestData": [
      {
        "name": "KeystoneInfoManager.OnReceiveRequestData",
        "count": 4,
        "confidence": 0.8,
        "sample": "openRaidLib.KeystoneInfoManager.OnReceiveRequestData()",
        "retail": true
      },
      {
        "name": "RatingInfoManager.OnReceiveRequestData",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.RatingInfoManager.OnReceiveRequestData()",
        "retail": true
      }
    ],
    "GetOwnedKeystoneChallengeMapID": [
      {
        "name": "C_MythicPlus.GetOwnedKeystoneChallengeMapID",
        "count": 1,
        "confidence": 0.2,
        "sample": "keystoneInfo.challengeMapID = C_MythicPlus.GetOwnedKeystoneChallengeMapID() or 0",
        "retail": true
      }
    ],
    "SendPlayerKeystoneInfoToGuild": [
      {
        "name": "KeystoneInfoManager.SendPlayerKeystoneInfoToGuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.KeystoneInfoManager.SendPlayerKeystoneInfoToGuild()",
        "retail": true
      }
    ],
    "OnReceiveKeystoneData": [
      {
        "name": "KeystoneInfoManager.OnReceiveKeystoneData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.KeystoneInfoManager.OnReceiveKeystoneData(data, unitName)",
        "retail": true
      }
    ],
    "OnPlayerEnterGroup": [
      {
        "name": "KeystoneInfoManager.OnPlayerEnterGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.KeystoneInfoManager.OnPlayerEnterGroup()",
        "retail": true
      },
      {
        "name": "RatingInfoManager.OnPlayerEnterGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.OnPlayerEnterGroup()",
        "retail": true
      }
    ],
    "OnMythicDungeonFinished": [
      {
        "name": "KeystoneInfoManager.OnMythicDungeonFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.KeystoneInfoManager.OnMythicDungeonFinished()",
        "retail": true
      },
      {
        "name": "RatingInfoManager.OnMythicDungeonFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.OnMythicDungeonFinished()",
        "retail": true
      },
      {
        "name": "Details222.MythicPlus.OnMythicDungeonFinished",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.MythicPlus.OnMythicDungeonFinished(encounterID, encounterName)end",
        "retail": true
      }
    ],
    "GetAllRatingInfo": [
      {
        "name": "GetAllRatingInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetAllRatingInfo()",
        "retail": true
      },
      {
        "name": "RatingInfoManager.GetAllRatingInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "return openRaidLib.RatingInfoManager.GetAllRatingInfo()",
        "retail": true
      }
    ],
    "GetRatingInfo": [
      {
        "name": "GetRatingInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetRatingInfo(unitId)",
        "retail": true
      },
      {
        "name": "RatingInfoManager.GetRatingInfo",
        "count": 9,
        "confidence": 1.0,
        "sample": "return openRaidLib.RatingInfoManager.GetRatingInfo(unitName)",
        "retail": true
      }
    ],
    "RequestRatingDataFromGuild": [
      {
        "name": "RequestRatingDataFromGuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RequestRatingDataFromGuild()",
        "retail": true
      }
    ],
    "RequestRatingDataFromParty": [
      {
        "name": "RequestRatingDataFromParty",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RequestRatingDataFromParty()",
        "retail": true
      }
    ],
    "RequestRatingDataFromRaid": [
      {
        "name": "RequestRatingDataFromRaid",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.RequestRatingDataFromRaid()",
        "retail": true
      }
    ],
    "WipeRatingData": [
      {
        "name": "WipeRatingData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.WipeRatingData()",
        "retail": true
      }
    ],
    "UpdatePlayerRatingInfo": [
      {
        "name": "RatingInfoManager.UpdatePlayerRatingInfo",
        "count": 7,
        "confidence": 1.0,
        "sample": "openRaidLib.RatingInfoManager.UpdatePlayerRatingInfo(ratingInfo)",
        "retail": true
      }
    ],
    "SendPlayerRatingInfoToParty": [
      {
        "name": "RatingInfoManager.SendPlayerRatingInfoToParty",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.SendPlayerRatingInfoToParty()",
        "retail": true
      }
    ],
    "SendPlayerRatingInfoToGuild": [
      {
        "name": "RatingInfoManager.SendPlayerRatingInfoToGuild",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.SendPlayerRatingInfoToGuild()",
        "retail": true
      }
    ],
    "OnReceiveRatingData": [
      {
        "name": "RatingInfoManager.OnReceiveRatingData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.RatingInfoManager.OnReceiveRatingData(data, unitName)",
        "retail": true
      }
    ],
    "Doublet": [
      {
        "name": "Doublet",
        "count": 2,
        "confidence": 0.4,
        "sample": "[173126] = true, --Straddling Jewel Doublet (green, +12 speed)",
        "retail": true
      }
    ],
    "Cluster": [
      {
        "name": "Cluster",
        "count": 4,
        "confidence": 0.8,
        "sample": "[173130] = true, --Masterful Jewel Cluster (blue, master)",
        "retail": true
      }
    ],
    "Agate": [
      {
        "name": "Agate",
        "count": 1,
        "confidence": 0.2,
        "sample": "[169220] = true, --Straddling Sage Agate (blue, movement speed)",
        "retail": true
      }
    ],
    "Injector": [
      {
        "name": "Injector",
        "count": 1,
        "confidence": 0.2,
        "sample": "[452767] = true, --Heartseeking Health Injector (engineering tinker)",
        "retail": true
      }
    ],
    "Serum": [
      {
        "name": "Serum",
        "count": 1,
        "confidence": 0.2,
        "sample": "[431422] = true, --Slumbering Soul Serum (10s meditation)",
        "retail": true
      }
    ],
    "GetAllRegisteredCooldowns": [
      {
        "name": "CooldownManager.GetAllRegisteredCooldowns",
        "count": 4,
        "confidence": 0.8,
        "sample": "function openRaidLib.CooldownManager.GetAllRegisteredCooldowns()",
        "retail": true
      }
    ],
    "GetCooldownInfo": [
      {
        "name": "CooldownManager.GetCooldownInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "function openRaidLib.CooldownManager.GetCooldownInfo(spellId)",
        "retail": true
      },
      {
        "name": "GetCooldownInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetCooldownInfo (spellId)",
        "retail": true
      }
    ],
    "AddCooldownFilter": [
      {
        "name": "AddCooldownFilter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.AddCooldownFilter(filterName, spells)",
        "retail": true
      }
    ],
    "AddFilter": [
      {
        "name": "AddFilter",
        "count": 2,
        "confidence": 0.4,
        "sample": "openRaidLib.DiagnosticError(\"Usage: openRaidLib.AddFilter(string: filterName, table: spells)\", debugstack())",
        "retail": true
      }
    ],
    "GetFlaskInfoBySpellId": [
      {
        "name": "GetFlaskInfoBySpellId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GetFlaskInfoBySpellId(spellId)",
        "retail": true
      }
    ],
    "GetFlaskTierFromAura": [
      {
        "name": "GetFlaskTierFromAura",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetFlaskTierFromAura(auraInfo)",
        "retail": true
      }
    ],
    "GetFoodInfoBySpellId": [
      {
        "name": "GetFoodInfoBySpellId",
        "count": 2,
        "confidence": 0.4,
        "sample": "function openRaidLib.GetFoodInfoBySpellId(spellId)",
        "retail": true
      }
    ],
    "GetFoodTierFromAura": [
      {
        "name": "GetFoodTierFromAura",
        "count": 1,
        "confidence": 0.2,
        "sample": "function openRaidLib.GetFoodTierFromAura(auraInfo)",
        "retail": true
      }
    ],
    "CreateCanvasScrollBox": [
      {
        "name": "CreateCanvasScrollBox",
        "count": 4,
        "confidence": 0.8,
        "sample": "--signature: CreateCanvasScrollBox(parentFrame, displayFrame, frameName)",
        "retail": true
      }
    ],
    "SetParameters": [
      {
        "name": "SetParameters",
        "count": 3,
        "confidence": 0.6,
        "sample": "--parameter1 and parameter2 are set with self:SetParameters(param1, param2)",
        "retail": true
      }
    ],
    "SetEnterFunction": [
      {
        "name": "SetEnterFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TextEntryMetaFunctions:SetEnterFunction(func, param1, param2)",
        "retail": true
      }
    ],
    "SelectAll": [
      {
        "name": "SelectAll",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TextEntryMetaFunctions:SelectAll()",
        "retail": true
      }
    ],
    "SetNext": [
      {
        "name": "SetNext",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TextEntryMetaFunctions:SetNext(nextbox)",
        "retail": true
      }
    ],
    "SetCommitFunction": [
      {
        "name": "SetCommitFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TextEntryMetaFunctions:SetCommitFunction(func)",
        "retail": true
      }
    ],
    "IgnoreNextCallback": [
      {
        "name": "IgnoreNextCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TextEntryMetaFunctions:IgnoreNextCallback()",
        "retail": true
      }
    ],
    "RunHooksForWidget": [
      {
        "name": "RunHooksForWidget",
        "count": 73,
        "confidence": 1.0,
        "sample": "local kill = object:RunHooksForWidget(\"OnEnter\", textentry, object)",
        "retail": true
      }
    ],
    "RunNextTick": [
      {
        "name": "Schedules.RunNextTick",
        "count": 3,
        "confidence": 0.6,
        "sample": "detailsFramework.Schedules.RunNextTick(function() object.ignoreNextCallback = nil end)",
        "retail": true
      }
    ],
    "OnEnterPressed": [
      {
        "name": "OnEnterPressed",
        "count": 2,
        "confidence": 0.4,
        "sample": "OnEnterPressed(textentry, false)",
        "retail": true
      }
    ],
    "ParseTemplate": [
      {
        "name": "ParseTemplate",
        "count": 8,
        "confidence": 1.0,
        "sample": "template = detailsFramework:ParseTemplate(self.type, template) --\"textentry\"",
        "retail": true
      }
    ],
    "GetParentName": [
      {
        "name": "GetParentName",
        "count": 10,
        "confidence": 1.0,
        "sample": "local parentName = detailsFramework:GetParentName(parent)",
        "retail": true
      }
    ],
    "CreateSearchBox": [
      {
        "name": "CreateSearchBox",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateSearchBox(parent, callback)",
        "retail": true
      }
    ],
    "GetLastWord": [
      {
        "name": "GetLastWord",
        "count": 4,
        "confidence": 0.8,
        "sample": "capsule:GetLastWord()",
        "retail": true
      }
    ],
    "IsMultiLine": [
      {
        "name": "IsMultiLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (editboxWidget:IsMultiLine()) then",
        "retail": true
      }
    ],
    "OptimizeAutoCompleteTable": [
      {
        "name": "OptimizeAutoCompleteTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "OptimizeAutoCompleteTable (capsule, wordList)",
        "retail": true
      }
    ],
    "SetAsAutoComplete": [
      {
        "name": "SetAsAutoComplete",
        "count": 8,
        "confidence": 1.0,
        "sample": "function TextEntryMetaFunctions:SetAsAutoComplete(poolName, poolTable, shouldOptimize)",
        "retail": true
      }
    ],
    "GetAuraByName": [
      {
        "name": "GetAuraByName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetAuraByName(unit, spellName, isDebuff)",
        "retail": true
      }
    ],
    "GetSpellCaches": [
      {
        "name": "GetSpellCaches",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetSpellCaches()",
        "retail": true
      }
    ],
    "UnloadSpellCache": [
      {
        "name": "UnloadSpellCache",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:UnloadSpellCache()",
        "retail": true
      }
    ],
    "LoadSpellCache": [
      {
        "name": "LoadSpellCache",
        "count": 7,
        "confidence": 1.0,
        "sample": "function DF:LoadSpellCache(hashMap, indexTable, allSpellsSameName)",
        "retail": true
      }
    ],
    "LazyExecute": [
      {
        "name": "Schedules.LazyExecute",
        "count": 3,
        "confidence": 0.6,
        "sample": "detailsFramework.Schedules.LazyExecute(lazyLoadAllSpells, payload, iterations)",
        "retail": true
      },
      {
        "name": "LazyExecute",
        "count": 3,
        "confidence": 0.6,
        "sample": "schedules.LazyExecute(lazyLOESSUpdate, payload, 999, onEndLazyExecution)",
        "retail": true
      },
      {
        "name": "DetailsFramework.Schedules.LazyExecute",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(callback) == \"function\", \"DetailsFramework.Schedules.LazyExecute() param #1 'callback' must be a function.\")",
        "retail": true
      }
    ],
    "CreateAuraConfigPanel": [
      {
        "name": "CreateAuraConfigPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateAuraConfigPanel(parent, name, db, changeCallback, options, texts)",
        "retail": true
      }
    ],
    "CreateAuraScrollBox": [
      {
        "name": "CreateAuraScrollBox",
        "count": 5,
        "confidence": 1.0,
        "sample": "local debuffTrackedAuraScrollBox = detailsFramework:CreateAuraScrollBox(auraPanel_Auto, \"$parentDebuffTracked\", newAuraPanel.db.aura_tracker.debuff_tracked, onAuraRemoveCallback, options)",
        "retail": true
      }
    ],
    "GetTitleFontString": [
      {
        "name": "GetTitleFontString",
        "count": 5,
        "confidence": 1.0,
        "sample": "buffTrackedAuraScrollBox:GetTitleFontString():SetText(newAuraPanel.LocTexts.BUFFS_TRACKED)",
        "retail": true
      }
    ],
    "GetData": [
      {
        "name": "GetData",
        "count": 10,
        "confidence": 1.0,
        "sample": "local data = self:GetParent():GetParent():GetData()",
        "retail": true
      }
    ],
    "GetAllPlayerSpells": [
      {
        "name": "GetAllPlayerSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetAllPlayerSpells(include_lower_case)",
        "retail": true
      }
    ],
    "SetAutoCompleteWithSpells": [
      {
        "name": "SetAutoCompleteWithSpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:SetAutoCompleteWithSpells(textentry)",
        "retail": true
      }
    ],
    "CoreDispatch": [
      {
        "name": "CoreDispatch",
        "count": 14,
        "confidence": 1.0,
        "sample": "detailsFramework:CoreDispatch((frameWidget:GetName() or \"Button\") .. \":__call()\", self.func, frameWidget, \"LeftButton\", self.param1, self.param2)",
        "retail": true
      }
    ],
    "SetButtonTexture": [
      {
        "name": "SetButtonTexture",
        "count": 6,
        "confidence": 1.0,
        "sample": "return detailsFramework:SetButtonTexture(object, value, 0, 1, 0, 1)",
        "retail": true
      }
    ],
    "ParseTexture": [
      {
        "name": "ParseTexture",
        "count": 5,
        "confidence": 1.0,
        "sample": "texture, width, height, left, right, top, bottom, red, green, blue, alpha = detailsFramework:ParseTexture(texture, width, height, left, right, top, bottom, red, green, blue, alpha)",
        "retail": true
      }
    ],
    "IsHtmlColor": [
      {
        "name": "IsHtmlColor",
        "count": 6,
        "confidence": 1.0,
        "sample": "elseif (detailsFramework:IsHtmlColor(texture)) then",
        "retail": true
      }
    ],
    "SetIconFilterMode": [
      {
        "name": "SetIconFilterMode",
        "count": 1,
        "confidence": 0.2,
        "sample": "function ButtonMetaFunctions:SetIconFilterMode(filterMode)",
        "retail": true
      }
    ],
    "Exec": [
      {
        "name": "Exec",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ButtonMetaFunctions:Exec()",
        "retail": true
      }
    ],
    "RightClick": [
      {
        "name": "RightClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "function ButtonMetaFunctions:RightClick()",
        "retail": true
      }
    ],
    "SetTextWithLocTableWithDefault": [
      {
        "name": "Language.SetTextWithLocTableWithDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.SetTextWithLocTableWithDefault(buttonObject.button.text, locTable, text)",
        "retail": true
      },
      {
        "name": "SetTextWithLocTableWithDefault",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetTextWithLocTableWithDefault(object, locTable, defaultText)",
        "retail": true
      },
      {
        "name": "DF.Language.SetTextWithLocTableWithDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.SetTextWithLocTableWithDefault(object, locTable, defaultText)",
        "retail": true
      }
    ],
    "CreateColorPickButton": [
      {
        "name": "CreateColorPickButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateColorPickButton(parent, name, member, callback, alpha, buttonTemplate)",
        "retail": true
      }
    ],
    "SetButtonVertexColor": [
      {
        "name": "SetButtonVertexColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:SetButtonVertexColor(button, red, green, blue, alpha)",
        "retail": true
      }
    ],
    "CreateTabButton": [
      {
        "name": "CreateTabButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateTabButton(parent, frameName)",
        "retail": true
      }
    ],
    "SetShowCloseButton": [
      {
        "name": "SetShowCloseButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "frame.TabButtons[2]:SetShowCloseButton(true)",
        "retail": true
      }
    ],
    "GetAllEncountersFromInstance": [
      {
        "name": "Ejc.GetAllEncountersFromInstance",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Ejc.GetAllEncountersFromInstance(id)",
        "retail": true
      },
      {
        "name": "DF.Ejc.GetAllEncountersFromInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "local allEncounters = DF.Ejc.GetAllEncountersFromInstance(instanceId)",
        "retail": true
      }
    ],
    "GetAllRaidInstances": [
      {
        "name": "Ejc.GetAllRaidInstances",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.GetAllRaidInstances()",
        "retail": true
      },
      {
        "name": "DF.Ejc.GetAllRaidInstances",
        "count": 2,
        "confidence": 0.4,
        "sample": "local allInstances = DF.Ejc.GetAllRaidInstances()",
        "retail": true
      }
    ],
    "GetAllDungeonInstances": [
      {
        "name": "Ejc.GetAllDungeonInstances",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Ejc.GetAllDungeonInstances()",
        "retail": true
      }
    ],
    "EJ_SetDifficulty": [
      {
        "name": "EJ_SetDifficulty",
        "count": 1,
        "confidence": 0.2,
        "sample": "EJ_SetDifficulty(difficulty or 16)",
        "retail": true
      }
    ],
    "EJ_SelectEncounter": [
      {
        "name": "EJ_SelectEncounter",
        "count": 1,
        "confidence": 0.2,
        "sample": "EJ_SelectEncounter(journalEncounterId)",
        "retail": true
      }
    ],
    "MsgWarning": [
      {
        "name": "MsgWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:MsgWarning(msg, ...)",
        "retail": true
      }
    ],
    "IsDragonflightOrBelow": [
      {
        "name": "DF.IsDragonflightOrBelow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.IsDragonflightOrBelow()",
        "retail": true
      }
    ],
    "GetRoleByClassicTalentTree": [
      {
        "name": "GetRoleByClassicTalentTree",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetRoleByClassicTalentTree()",
        "retail": true
      }
    ],
    "ConvertRole": [
      {
        "name": "ConvertRole",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:ConvertRole(value, valueType)",
        "retail": true
      }
    ],
    "PrintVersion": [
      {
        "name": "PrintVersion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:PrintVersion()",
        "retail": true
      }
    ],
    "GetFrameworkFolder": [
      {
        "name": "GetFrameworkFolder",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetFrameworkFolder()",
        "retail": true
      }
    ],
    "SetFrameworkDebugState": [
      {
        "name": "SetFrameworkDebugState",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:SetFrameworkDebugState(state)",
        "retail": true
      }
    ],
    "FadeFrame": [
      {
        "name": "FadeFrame",
        "count": 40,
        "confidence": 1.0,
        "sample": "function DF:FadeFrame(frame, t)",
        "retail": true
      }
    ],
    "RandomBool": [
      {
        "name": "RandomBool",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:RandomBool(odds)",
        "retail": true
      }
    ],
    "SetTexCoordFromAtlasInfo": [
      {
        "name": "SetTexCoordFromAtlasInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:SetTexCoordFromAtlasInfo(texture, atlasInfo)",
        "retail": true
      }
    ],
    "GetParentKeyPath": [
      {
        "name": "GetParentKeyPath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetParentKeyPath(object)",
        "retail": true
      }
    ],
    "GetParentKey": [
      {
        "name": "GetParentKey",
        "count": 3,
        "confidence": 0.6,
        "sample": "local parentKey = object:GetParentKey()",
        "retail": true
      }
    ],
    "GetParentNamePath": [
      {
        "name": "GetParentNamePath",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetParentNamePath(object)",
        "retail": true
      }
    ],
    "FormatNumber": [
      {
        "name": "DF.FormatNumber",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.FormatNumber(number)",
        "retail": true
      },
      {
        "name": "FormatNumber",
        "count": 3,
        "confidence": 0.6,
        "sample": "self [\"dpsamt\" .. math.abs(i-9)]:SetText(detailsFramework.FormatNumber (piece*i))",
        "retail": true
      }
    ],
    "GroupIterator": [
      {
        "name": "GroupIterator",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GroupIterator(callback, ...)",
        "retail": true
      }
    ],
    "GetSizeFromPercent": [
      {
        "name": "GetSizeFromPercent",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetSizeFromPercent(uiObject, percent)",
        "retail": true
      }
    ],
    "CleanUpName": [
      {
        "name": "CleanUpName",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CleanUpName(name)",
        "retail": true
      }
    ],
    "RemoveRealName": [
      {
        "name": "RemoveRealName",
        "count": 5,
        "confidence": 1.0,
        "sample": "function DF:RemoveRealName(name)",
        "retail": true
      }
    ],
    "SetFontDefault": [
      {
        "name": "SetFontDefault",
        "count": 3,
        "confidence": 0.6,
        "sample": "DF:SetFontDefault(fontString)",
        "retail": true
      }
    ],
    "SetFontShadow": [
      {
        "name": "SetFontShadow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:SetFontShadow(fontString, r, g, b, a, x, y)",
        "retail": true
      }
    ],
    "GetShadowOffset": [
      {
        "name": "GetShadowOffset",
        "count": 3,
        "confidence": 0.6,
        "sample": "local offSetX, offSetY = fontString:GetShadowOffset()",
        "retail": true
      }
    ],
    "SetShadowOffset": [
      {
        "name": "SetShadowOffset",
        "count": 5,
        "confidence": 1.0,
        "sample": "fontString:SetShadowOffset(x, y)",
        "retail": true
      }
    ],
    "SetFontRotation": [
      {
        "name": "SetFontRotation",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:SetFontRotation(fontString, degrees) --deprecated, use fontString:SetRotation(degrees) | retail use fontString:SetRotation(math.rad(degrees))",
        "retail": true
      }
    ],
    "SetSmoothProgress": [
      {
        "name": "SetSmoothProgress",
        "count": 2,
        "confidence": 0.4,
        "sample": "fontString.__rotationAnimation.rotator:SetSmoothProgress(1)",
        "retail": true
      }
    ],
    "Pause": [
      {
        "name": "Pause",
        "count": 2,
        "confidence": 0.4,
        "sample": "fontString.__rotationAnimation:Pause()",
        "retail": true
      }
    ],
    "AddColorToText": [
      {
        "name": "AddColorToText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:AddColorToText(text, color) --wrap text with a color",
        "retail": true
      }
    ],
    "FormatColor": [
      {
        "name": "FormatColor",
        "count": 9,
        "confidence": 1.0,
        "sample": "local hexColor = DF:FormatColor(\"hex\", r, g, b)",
        "retail": true
      }
    ],
    "GetClassColorByClassId": [
      {
        "name": "GetClassColorByClassId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetClassColorByClassId(classId)",
        "retail": true
      }
    ],
    "AddClassIconToString": [
      {
        "name": "AddClassIconToString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:AddClassIconToString(text, engClass, size)",
        "retail": true
      }
    ],
    "AddSpecIconToString": [
      {
        "name": "AddSpecIconToString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:AddSpecIconToString(text, specId, size)",
        "retail": true
      }
    ],
    "CreateAtlas": [
      {
        "name": "CreateAtlas",
        "count": 4,
        "confidence": 0.8,
        "sample": "---create a table with information about a texture (deprecated, use: DetailsFramework:CreateAtlas())",
        "retail": true
      }
    ],
    "CleanTruncateUTF8String": [
      {
        "name": "CleanTruncateUTF8String",
        "count": 5,
        "confidence": 1.0,
        "sample": "text = DF:CleanTruncateUTF8String(text)",
        "retail": true
      }
    ],
    "TruncateTextSafeBinarySearch": [
      {
        "name": "TruncateTextSafeBinarySearch",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:TruncateTextSafeBinarySearch(fontString, maxWidth)",
        "retail": true
      }
    ],
    "GetUnboundedStringWidth": [
      {
        "name": "GetUnboundedStringWidth",
        "count": 5,
        "confidence": 1.0,
        "sample": "if fontString:GetUnboundedStringWidth() > maxWidth then",
        "retail": true
      }
    ],
    "TruncateTextBinarySearch": [
      {
        "name": "TruncateTextBinarySearch",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:TruncateTextBinarySearch(fontString, maxWidth)",
        "retail": true
      }
    ],
    "TruncateNumber": [
      {
        "name": "TruncateNumber",
        "count": 5,
        "confidence": 1.0,
        "sample": "function DF:TruncateNumber(number, fractionDigits)",
        "retail": true
      }
    ],
    "SortOrder1": [
      {
        "name": "DF.SortOrder1",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder1(t1, t2)",
        "retail": true
      }
    ],
    "SortOrder2": [
      {
        "name": "DF.SortOrder2",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder2(t1, t2)",
        "retail": true
      }
    ],
    "SortOrder3": [
      {
        "name": "DF.SortOrder3",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder3(t1, t2)",
        "retail": true
      }
    ],
    "SortOrder1R": [
      {
        "name": "DF.SortOrder1R",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder1R(t1, t2)",
        "retail": true
      }
    ],
    "SortOrder2R": [
      {
        "name": "DF.SortOrder2R",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder2R(t1, t2)",
        "retail": true
      }
    ],
    "SortOrder3R": [
      {
        "name": "DF.SortOrder3R",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.SortOrder3R(t1, t2)",
        "retail": true
      }
    ],
    "GetSpellBookSpells": [
      {
        "name": "GetSpellBookSpells",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetSpellBookSpells()",
        "retail": true
      }
    ],
    "GetFlyoutInfo": [
      {
        "name": "GetFlyoutInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local _, _, numSlots, isKnown = GetFlyoutInfo(spellId)",
        "retail": true
      }
    ],
    "GetFlyoutSlotInfo": [
      {
        "name": "GetFlyoutSlotInfo",
        "count": 2,
        "confidence": 0.4,
        "sample": "local spellID, overrideSpellID, isKnown = GetFlyoutSlotInfo(spellId, k)",
        "retail": true
      }
    ],
    "GetAllTalents": [
      {
        "name": "GetAllTalents",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:GetAllTalents()",
        "retail": true
      }
    ],
    "GetAvailableSpells": [
      {
        "name": "GetAvailableSpells",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetAvailableSpells()",
        "retail": true
      }
    ],
    "CreatePunchAnimation": [
      {
        "name": "CreatePunchAnimation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreatePunchAnimation(frame, scale)",
        "retail": true
      }
    ],
    "CheckPoints": [
      {
        "name": "CheckPoints",
        "count": 8,
        "confidence": 1.0,
        "sample": "function DF:CheckPoints(point1, point2, point3, point4, point5, object)",
        "retail": true
      }
    ],
    "ConvertAnchorPointToInside": [
      {
        "name": "ConvertAnchorPointToInside",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:ConvertAnchorPointToInside(anchorPoint)",
        "retail": true
      }
    ],
    "ConvertAnchorOffsets": [
      {
        "name": "ConvertAnchorOffsets",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:ConvertAnchorOffsets(widget, referenceWidget, anchorTable, newAnchorSide)",
        "retail": true
      }
    ],
    "GetNinePoints": [
      {
        "name": "DF.Math.GetNinePoints",
        "count": 3,
        "confidence": 0.6,
        "sample": "local ninePoints = DF.Math.GetNinePoints(widget)",
        "retail": true
      },
      {
        "name": "Math.GetNinePoints",
        "count": 2,
        "confidence": 0.4,
        "sample": "local ninePoints = detailsFramework.Math.GetNinePoints(object)",
        "retail": true
      }
    ],
    "CreateColorTable": [
      {
        "name": "CreateColorTable",
        "count": 11,
        "confidence": 1.0,
        "sample": "function DF:CreateColorTable(r, g, b, a)",
        "retail": true
      }
    ],
    "GetColorBrightness": [
      {
        "name": "GetColorBrightness",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetColorBrightness(r, g, b)",
        "retail": true
      }
    ],
    "GetColorHue": [
      {
        "name": "GetColorHue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetColorHue(r, g, b)",
        "retail": true
      }
    ],
    "GetColor": [
      {
        "name": "GetColor",
        "count": 7,
        "confidence": 1.0,
        "sample": "return colorTable:GetColor()",
        "retail": true
      }
    ],
    "ShowTutorialAlertFrame": [
      {
        "name": "ShowTutorialAlertFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:ShowTutorialAlertFrame(maintext, desctext, clickfunc)",
        "retail": true
      }
    ],
    "MicroButtonAlert_SetText": [
      {
        "name": "MicroButtonAlert_SetText",
        "count": 1,
        "confidence": 0.2,
        "sample": "MicroButtonAlert_SetText (TutorialAlertFrame, alert.label)",
        "retail": true
      }
    ],
    "CreateOptionsFrame": [
      {
        "name": "CreateOptionsFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateOptionsFrame(name, title, template) --deprecated?",
        "retail": true
      }
    ],
    "GetBestFontPathForLanguage": [
      {
        "name": "GetBestFontPathForLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetBestFontPathForLanguage(languageId)",
        "retail": true
      }
    ],
    "IsLatinLanguage": [
      {
        "name": "IsLatinLanguage",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:IsLatinLanguage(languageId)",
        "retail": true
      }
    ],
    "AddMemberForWidget": [
      {
        "name": "AddMemberForWidget",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:AddMemberForWidget(widgetName, memberType, memberName, func)",
        "retail": true
      }
    ],
    "OpenInterfaceProfile": [
      {
        "name": "OpenInterfaceProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:OpenInterfaceProfile()",
        "retail": true
      }
    ],
    "GetCategoryList": [
      {
        "name": "GetCategoryList",
        "count": 1,
        "confidence": 0.2,
        "sample": "local category = SettingsPanel:GetCategoryList():GetCategory(self.OptionsFrame1.name)",
        "retail": true
      }
    ],
    "SelectCategory": [
      {
        "name": "SelectCategory",
        "count": 2,
        "confidence": 0.4,
        "sample": "SettingsPanel:SelectCategory(category)",
        "retail": true
      }
    ],
    "HasSubcategories": [
      {
        "name": "HasSubcategories",
        "count": 1,
        "confidence": 0.2,
        "sample": "if self.OptionsFrame2 and category:HasSubcategories() then",
        "retail": true
      }
    ],
    "GetSubcategories": [
      {
        "name": "GetSubcategories",
        "count": 1,
        "confidence": 0.2,
        "sample": "for _, subcategory in pairs(category:GetSubcategories()) do",
        "retail": true
      }
    ],
    "InterfaceOptionsFrame_OpenToCategory": [
      {
        "name": "InterfaceOptionsFrame_OpenToCategory",
        "count": 6,
        "confidence": 1.0,
        "sample": "InterfaceOptionsFrame_OpenToCategory (self.OptionsFrame1)",
        "retail": true
      }
    ],
    "CreateControlPoint": [
      {
        "name": "CreateControlPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "local newControlPoint = anim:CreateControlPoint()",
        "retail": true
      }
    ],
    "SetCurveType": [
      {
        "name": "SetCurveType",
        "count": 1,
        "confidence": 0.2,
        "sample": "anim:SetCurveType(arg4 or \"SMOOTH\")",
        "retail": true
      }
    ],
    "GetControlPoints": [
      {
        "name": "GetControlPoints",
        "count": 1,
        "confidence": 0.2,
        "sample": "newControlPoint:SetOrder(#anim:GetControlPoints())",
        "retail": true
      }
    ],
    "SetStartColor": [
      {
        "name": "SetStartColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "anim:SetStartColor(CreateColor(r1, g1, b1, a1))",
        "retail": true
      }
    ],
    "CreateColor": [
      {
        "name": "CreateColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "anim:SetStartColor(CreateColor(r1, g1, b1, a1))",
        "retail": true
      }
    ],
    "SetEndColor": [
      {
        "name": "SetEndColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "anim:SetEndColor(CreateColor(r2, g2, b2, a2))",
        "retail": true
      }
    ],
    "CreateFadeAnimation": [
      {
        "name": "CreateFadeAnimation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateFadeAnimation(UIObject, fadeInTime, fadeOutTime, fadeInAlpha, fadeOutAlpha)",
        "retail": true
      }
    ],
    "IsObjectType": [
      {
        "name": "IsObjectType",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (UIObject:IsObjectType(\"FontString\") or UIObject:IsObjectType(\"Texture\")) then",
        "retail": true
      }
    ],
    "RegisterFrame": [
      {
        "name": "FrameshakeUpdateFrame.RegisterFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "FrameshakeUpdateFrame.RegisterFrame (parent)",
        "retail": true
      }
    ],
    "GetAnimations": [
      {
        "name": "GetAnimations",
        "count": 2,
        "confidence": 0.4,
        "sample": "local anim1 = self.ProcLoop:GetAnimations()",
        "retail": true
      }
    ],
    "CreateAnts": [
      {
        "name": "CreateAnts",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateAnts(parent, antTable, leftOffset, rightOffset, topOffset, bottomOffset)",
        "retail": true
      }
    ],
    "AnimateTexCoords": [
      {
        "name": "AnimateTexCoords",
        "count": 1,
        "confidence": 0.2,
        "sample": "AnimateTexCoords(texture, self.AntTable.TextureWidth, self.AntTable.TextureHeight, self.AntTable.TexturePartsWidth, self.AntTable.TexturePartsHeight, self.AntTable.AmountParts, deltaTime, self.AntTable.Throttle or 0.025)",
        "retail": true
      }
    ],
    "SetBorderAlpha": [
      {
        "name": "SetBorderAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)",
        "retail": true
      }
    ],
    "SetBorderColor": [
      {
        "name": "SetBorderColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)",
        "retail": true
      }
    ],
    "SetLayerVisibility": [
      {
        "name": "SetLayerVisibility",
        "count": 1,
        "confidence": 0.2,
        "sample": "---the parent frame receives three new methods: SetBorderAlpha(a1, a2, a3), SetBorderColor(r, g, b), SetLayerVisibility(layer1Shown, layer2Shown, layer3Shown)",
        "retail": true
      }
    ],
    "CreateBorder": [
      {
        "name": "CreateBorder",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DF:CreateBorder(parent, alpha1, alpha2, alpha3)",
        "retail": true
      }
    ],
    "SetIgnoreParentScale": [
      {
        "name": "SetIgnoreParentScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "border:SetIgnoreParentScale(true)",
        "retail": true
      }
    ],
    "CreateBorderSolid": [
      {
        "name": "CreateBorderSolid",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateBorderSolid (parent, size)",
        "retail": true
      }
    ],
    "CreateBorderWithSpread": [
      {
        "name": "CreateBorderWithSpread",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateBorderWithSpread(parent, alpha1, alpha2, alpha3, size, spread)",
        "retail": true
      }
    ],
    "GetCurrentClassName": [
      {
        "name": "GetCurrentClassName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetCurrentClassName()",
        "retail": true
      }
    ],
    "GetCurrentSpecName": [
      {
        "name": "GetCurrentSpecName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetCurrentSpecName()",
        "retail": true
      }
    ],
    "GetCurrentSpec": [
      {
        "name": "GetCurrentSpec",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetCurrentSpec()",
        "retail": true
      }
    ],
    "GetCurrentSpecId": [
      {
        "name": "GetCurrentSpecId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetCurrentSpecId()",
        "retail": true
      }
    ],
    "GetClassSpecIDs": [
      {
        "name": "GetClassSpecIDs",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DF:GetClassSpecIDs(engClass)",
        "retail": true
      }
    ],
    "GetClassSpecIds": [
      {
        "name": "GetClassSpecIds",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetClassSpecIds(engClass) --naming conventions",
        "retail": true
      }
    ],
    "ClassTalentFrame_LoadUI": [
      {
        "name": "ClassTalentFrame_LoadUI",
        "count": 1,
        "confidence": 0.2,
        "sample": "ClassTalentFrame_LoadUI()",
        "retail": true
      }
    ],
    "WriteLoadoutHeader": [
      {
        "name": "WriteLoadoutHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.TalentExporter:WriteLoadoutHeader(exportStream, serializationVersion, currentSpecID, treeHash)",
        "retail": true
      }
    ],
    "WriteLoadoutContent": [
      {
        "name": "WriteLoadoutContent",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.TalentExporter:WriteLoadoutContent(exportStream, configId, treeInfo.ID)",
        "retail": true
      }
    ],
    "GetExportString": [
      {
        "name": "GetExportString",
        "count": 1,
        "confidence": 0.2,
        "sample": "return exportStream:GetExportString()",
        "retail": true
      }
    ],
    "Framework": [
      {
        "name": "Framework",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local errortext = \"D!Framework (\" .. context .. \") error: \" .. result1 .. \"\\n====================\\n\" .. stack .. \"\\n====================\\n\"",
        "retail": true
      }
    ],
    "GetClassIdByFileName": [
      {
        "name": "GetClassIdByFileName",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetClassIdByFileName(fileName)",
        "retail": true
      }
    ],
    "GetClassList": [
      {
        "name": "GetClassList",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:GetClassList()",
        "retail": true
      }
    ],
    "GetArmorIconByArmorSlot": [
      {
        "name": "GetArmorIconByArmorSlot",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetArmorIconByArmorSlot(equipSlotId)",
        "retail": true
      }
    ],
    "GetCharacterRaceList": [
      {
        "name": "GetCharacterRaceList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetCharacterRaceList()",
        "retail": true
      }
    ],
    "GetRaceInfo": [
      {
        "name": "C_CreatureInfo.GetRaceInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local raceInfo = C_CreatureInfo.GetRaceInfo(i)",
        "retail": true
      }
    ],
    "GetRaceInfoByID": [
      {
        "name": "C_AlliedRaces.GetRaceInfoByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local alliedRaceInfo = C_AlliedRaces.GetRaceInfoByID(i)",
        "retail": true
      }
    ],
    "GetCharacterTalents": [
      {
        "name": "GetCharacterTalents",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DF:GetCharacterTalents(bOnlySelected, bOnlySelectedHash)",
        "retail": true
      }
    ],
    "GetCharacterPvPTalents": [
      {
        "name": "GetCharacterPvPTalents",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DF:GetCharacterPvPTalents(onlySelected, onlySelectedHash)",
        "retail": true
      }
    ],
    "GetPvpTalentSlotInfo": [
      {
        "name": "C_SpecializationInfo.GetPvpTalentSlotInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "local slotInfo = C_SpecializationInfo.GetPvpTalentSlotInfo (i)",
        "retail": true
      }
    ],
    "GetGroupTypes": [
      {
        "name": "GetGroupTypes",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetGroupTypes()",
        "retail": true
      }
    ],
    "GetRoleTypes": [
      {
        "name": "GetRoleTypes",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetRoleTypes()",
        "retail": true
      }
    ],
    "GetRoleTCoordsAndTexture": [
      {
        "name": "GetRoleTCoordsAndTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetRoleTCoordsAndTexture(roleID)",
        "retail": true
      }
    ],
    "GetPlayerRole": [
      {
        "name": "GetPlayerRole",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetPlayerRole()",
        "retail": true
      }
    ],
    "GetCLEncounterIDs": [
      {
        "name": "GetCLEncounterIDs",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:GetCLEncounterIDs()",
        "retail": true
      }
    ],
    "IsSpecFromClass": [
      {
        "name": "IsSpecFromClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:IsSpecFromClass(class, specId)",
        "retail": true
      }
    ],
    "GetClassSpecs": [
      {
        "name": "GetClassSpecs",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetClassSpecs(class)",
        "retail": true
      }
    ],
    "GetSpecListFromClass": [
      {
        "name": "GetSpecListFromClass",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetSpecListFromClass(class)",
        "retail": true
      }
    ],
    "GetSpellsForRangeCheck": [
      {
        "name": "GetSpellsForRangeCheck",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetSpellsForRangeCheck()",
        "retail": true
      }
    ],
    "GetRangeCheckSpellForSpec": [
      {
        "name": "GetRangeCheckSpellForSpec",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetRangeCheckSpellForSpec(specId)",
        "retail": true
      }
    ],
    "CatchString": [
      {
        "name": "DF.CatchString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.CatchString(...)",
        "retail": true
      }
    ],
    "GetBattlegroundSize": [
      {
        "name": "GetBattlegroundSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetBattlegroundSize(instanceInfoMapId)",
        "retail": true
      }
    ],
    "GetExecuteRange": [
      {
        "name": "DF.GetExecuteRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.GetExecuteRange(unitId)",
        "retail": true
      }
    ],
    "GetWorldDeltaSeconds": [
      {
        "name": "GetWorldDeltaSeconds",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GetWorldDeltaSeconds()",
        "retail": true
      }
    ],
    "RegisterScriptComm": [
      {
        "name": "RegisterScriptComm",
        "count": 2,
        "confidence": 0.4,
        "sample": "--DetailsFramework:RegisterScriptComm (ID, function(sourcePlayerName, ...) end)",
        "retail": true
      }
    ],
    "SendScriptComm": [
      {
        "name": "SendScriptComm",
        "count": 2,
        "confidence": 0.4,
        "sample": "--DetailsFramework:SendScriptComm (ID, ...)",
        "retail": true
      }
    ],
    "OnReceiveScriptComm": [
      {
        "name": "DF.OnReceiveScriptComm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.OnReceiveScriptComm (...)",
        "retail": true
      }
    ],
    "MakeFunctionSecure": [
      {
        "name": "MakeFunctionSecure",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:MakeFunctionSecure(func)",
        "retail": true
      }
    ],
    "IsUnitTapDenied": [
      {
        "name": "IsUnitTapDenied",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:IsUnitTapDenied (unitId)",
        "retail": true
      }
    ],
    "UnitIsTapDenied": [
      {
        "name": "UnitIsTapDenied",
        "count": 2,
        "confidence": 0.4,
        "sample": "return unitId and not UnitPlayerControlled(unitId) and UnitIsTapDenied(unitId)",
        "retail": true
      }
    ],
    "SetOnReset": [
      {
        "name": "SetOnReset",
        "count": 2,
        "confidence": 0.4,
        "sample": "---@field SetCallbackOnReleaseAll fun(self:df_pool, func:fun(object:table)) --alias for :SetOnReset()",
        "retail": true
      }
    ],
    "SetOnAcquire": [
      {
        "name": "SetOnAcquire",
        "count": 1,
        "confidence": 0.2,
        "sample": "---@field SetCallbackOnGet fun(self:df_pool, func:fun(object:table)) --alias for :SetOnAcquire()",
        "retail": true
      }
    ],
    "PoolConstructor": [
      {
        "name": "PoolConstructor",
        "count": 1,
        "confidence": 0.2,
        "sample": "newPool:PoolConstructor(func, ...)",
        "retail": true
      }
    ],
    "CreateObjectPool": [
      {
        "name": "CreateObjectPool",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateObjectPool(func, ...)",
        "retail": true
      }
    ],
    "RegisterEncounterPhaseChange": [
      {
        "name": "RegisterEncounterPhaseChange",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:RegisterEncounterPhaseChange(func, ...)",
        "retail": true
      }
    ],
    "UnregisterEncounterPhaseChange": [
      {
        "name": "UnregisterEncounterPhaseChange",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:UnregisterEncounterPhaseChange(func)",
        "retail": true
      }
    ],
    "RegisterEncounterTimeBar": [
      {
        "name": "RegisterEncounterTimeBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:RegisterEncounterTimeBar(func, ...)",
        "retail": true
      }
    ],
    "Swirls": [
      {
        "name": "Swirls",
        "count": 1,
        "confidence": 0.2,
        "sample": "table: 0000019DA5382410 BigWigs_StartBar table: 0000019EF3E5B910 443274 Swirls (30) 7.5 538040 false nil",
        "retail": true
      }
    ],
    "UnregisterEncounterTimeBar": [
      {
        "name": "UnregisterEncounterTimeBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:UnregisterEncounterTimeBar(func)",
        "retail": true
      }
    ],
    "Concoction": [
      {
        "name": "Concoction",
        "count": 1,
        "confidence": 0.2,
        "sample": "--table: 0000019DA5382410 BigWigs_StartBar table: 0000019EF3E5B910 441362 Volatile Concoction (14) 20 136227 false nil",
        "retail": true
      }
    ],
    "DebugVisibility": [
      {
        "name": "DebugVisibility",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:DebugVisibility(UIObject)",
        "retail": true
      }
    ],
    "DebugTexture": [
      {
        "name": "DebugTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:DebugTexture(texture, left, right, top, bottom)",
        "retail": true
      }
    ],
    "CreateScrollBar": [
      {
        "name": "CreateScrollBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateScrollBar(master, scrollContainer, x, y)",
        "retail": true
      }
    ],
    "GetShadowColor": [
      {
        "name": "GetShadowColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "setter = function(widget, value) widget:SetShadowColor(widget:GetShadowColor(), select(2, widget:GetShadowColor()), select(3, widget:GetShadowColor()), value and 0.5 or 0) end",
        "retail": true
      }
    ],
    "GetEditingObject": [
      {
        "name": "GetEditingObject",
        "count": 6,
        "confidence": 1.0,
        "sample": "local object = self:GetEditingObject()",
        "retail": true
      }
    ],
    "GetAllRegisteredObjects": [
      {
        "name": "GetAllRegisteredObjects",
        "count": 8,
        "confidence": 1.0,
        "sample": "local registeredObjects = self:GetAllRegisteredObjects()",
        "retail": true
      }
    ],
    "GetOverTheTopFrame": [
      {
        "name": "GetOverTheTopFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "local overTheTopFrame = self:GetOverTheTopFrame()",
        "retail": true
      }
    ],
    "GetAnchorFrame": [
      {
        "name": "GetAnchorFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "local anchorFrame = self:GetAnchorFrame(i)",
        "retail": true
      }
    ],
    "SetNotInUse": [
      {
        "name": "SetNotInUse",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetNotInUse(anchorFrame)",
        "retail": true
      }
    ],
    "DisableAllAnchors": [
      {
        "name": "DisableAllAnchors",
        "count": 3,
        "confidence": 0.6,
        "sample": "editorFrame.AnchorFrames:DisableAllAnchors()",
        "retail": true
      }
    ],
    "GetEditingRegisteredObject": [
      {
        "name": "GetEditingRegisteredObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "local registeredObject = editorFrame:GetEditingRegisteredObject()",
        "retail": true
      }
    ],
    "SetNotInUseForAllAnchors": [
      {
        "name": "SetNotInUseForAllAnchors",
        "count": 1,
        "confidence": 0.2,
        "sample": "editorFrame.AnchorFrames:SetNotInUseForAllAnchors()",
        "retail": true
      }
    ],
    "PrepareObjectForEditing": [
      {
        "name": "PrepareObjectForEditing",
        "count": 2,
        "confidence": 0.4,
        "sample": "editorFrame:PrepareObjectForEditing()",
        "retail": true
      }
    ],
    "CreateNineAnchors": [
      {
        "name": "CreateNineAnchors",
        "count": 1,
        "confidence": 0.2,
        "sample": "editorFrame.AnchorFrames:CreateNineAnchors()",
        "retail": true
      }
    ],
    "OnTickNotMoving": [
      {
        "name": "OnTickNotMoving",
        "count": 1,
        "confidence": 0.2,
        "sample": "thisMoverFrame.OnTickNotMoving(thisMoverFrame, 0)",
        "retail": true
      }
    ],
    "GetClosestPoint": [
      {
        "name": "GetClosestPoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "local closestPoint = editorFrame.currentObjectNinePoints:GetClosestPoint(CreateVector2D(startX, startY))",
        "retail": true
      },
      {
        "name": "DF.Math.GetClosestPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.GetClosestPoint(ninePoints, coordinate)",
        "retail": true
      }
    ],
    "GetObjectById": [
      {
        "name": "GetObjectById",
        "count": 1,
        "confidence": 0.2,
        "sample": "local objectRegistered = self:GetObjectById(id)",
        "retail": true
      }
    ],
    "EditObjectById": [
      {
        "name": "EditObjectById",
        "count": 2,
        "confidence": 0.4,
        "sample": "assert(type(objectRegistered) == \"table\", \"EditObjectById() object not found.\")",
        "retail": true
      }
    ],
    "EditObject": [
      {
        "name": "EditObject",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:EditObject(objectRegistered)",
        "retail": true
      }
    ],
    "RefreshMe": [
      {
        "name": "RefreshMe",
        "count": 23,
        "confidence": 1.0,
        "sample": "self.objectSelector:RefreshMe()",
        "retail": true
      }
    ],
    "GetObjectByIndex": [
      {
        "name": "GetObjectByIndex",
        "count": 2,
        "confidence": 0.4,
        "sample": "local objectRegistered = self:GetObjectByIndex(index)",
        "retail": true
      }
    ],
    "GetProfileTableFromObject": [
      {
        "name": "GetProfileTableFromObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "local profileTable = self:GetProfileTableFromObject(registeredObject)",
        "retail": true
      }
    ],
    "GetEditingProfile": [
      {
        "name": "GetEditingProfile",
        "count": 2,
        "confidence": 0.4,
        "sample": "local profileTable, profileMap = self:GetEditingProfile()",
        "retail": true
      }
    ],
    "GetEditingOptions": [
      {
        "name": "GetEditingOptions",
        "count": 2,
        "confidence": 0.4,
        "sample": "local editingOptions = self:GetEditingOptions()",
        "retail": true
      }
    ],
    "GetExtraOptions": [
      {
        "name": "GetExtraOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "local extraOptions = self:GetExtraOptions()",
        "retail": true
      }
    ],
    "GetOnEditCallback": [
      {
        "name": "GetOnEditCallback",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (self:GetOnEditCallback()) then",
        "retail": true
      }
    ],
    "StopObjectMovement": [
      {
        "name": "StopObjectMovement",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:StopObjectMovement()",
        "retail": true
      }
    ],
    "StartObjectMovement": [
      {
        "name": "StartObjectMovement",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:StartObjectMovement(anchorSettings)",
        "retail": true
      }
    ],
    "SetupAnchorsForObject": [
      {
        "name": "SetupAnchorsForObject",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.AnchorFrames:SetupAnchorsForObject(anchorSettings)",
        "retail": true
      }
    ],
    "GetOptionsFrame": [
      {
        "name": "GetOptionsFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "local optionsFrame = self:GetOptionsFrame()",
        "retail": true
      }
    ],
    "GetCanvasScrollBox": [
      {
        "name": "GetCanvasScrollBox",
        "count": 1,
        "confidence": 0.2,
        "sample": "local canvasScrollBox = self:GetCanvasScrollBox()",
        "retail": true
      }
    ],
    "UpdateGuideLinesAnchors": [
      {
        "name": "UpdateGuideLinesAnchors",
        "count": 1,
        "confidence": 0.2,
        "sample": "--self:UpdateGuideLinesAnchors()",
        "retail": true
      }
    ],
    "GetMoverFrames": [
      {
        "name": "GetMoverFrames",
        "count": 3,
        "confidence": 0.6,
        "sample": "local moverFrames = self:GetMoverFrames()",
        "retail": true
      }
    ],
    "SetValueNoCallback": [
      {
        "name": "SetValueNoCallback",
        "count": 3,
        "confidence": 0.6,
        "sample": "anchorXSlider:SetValueNoCallback(anchorSettings.x)",
        "retail": true
      }
    ],
    "UpdateProfileTableOnAllRegisteredObjects": [
      {
        "name": "UpdateProfileTableOnAllRegisteredObjects",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(profileTable) == \"table\", \"UpdateProfileTableOnAllRegisteredObjects() expects a table on #1 parameter.\")",
        "retail": true
      }
    ],
    "GetObjectSelector": [
      {
        "name": "GetObjectSelector",
        "count": 3,
        "confidence": 0.6,
        "sample": "local objectSelector = self:GetObjectSelector()",
        "retail": true
      }
    ],
    "RegisterObjectToEdit": [
      {
        "name": "RegisterObjectToEdit",
        "count": 6,
        "confidence": 1.0,
        "sample": "assert(type(object) == \"table\", \"RegisterObjectToEdit() expects an UIObject on #1 parameter.\")",
        "retail": true
      }
    ],
    "GetEditingObjectIndex": [
      {
        "name": "GetEditingObjectIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local objectIndex = self:GetEditingObjectIndex()",
        "retail": true
      }
    ],
    "EditObjectByIndex": [
      {
        "name": "EditObjectByIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:EditObjectByIndex(objectIndex)",
        "retail": true
      }
    ],
    "CreateEditor": [
      {
        "name": "CreateEditor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateEditor(parent, name, options)",
        "retail": true
      }
    ],
    "BuildOptionsTable": [
      {
        "name": "BuildOptionsTable",
        "count": 22,
        "confidence": 1.0,
        "sample": "editorFrame:BuildOptionsTable(editorDefaultOptions, options)",
        "retail": true
      },
      {
        "name": "OptionsFunctions.BuildOptionsTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "detailsFramework.OptionsFunctions.BuildOptionsTable (optionsTable, default_datascroll_options, options)",
        "retail": true
      }
    ],
    "CreateObjectSelectionList": [
      {
        "name": "CreateObjectSelectionList",
        "count": 1,
        "confidence": 0.2,
        "sample": "local objectSelector = editorFrame:CreateObjectSelectionList(scrollWidth, scrollHeight, scrollLinesAmount, scrollLineHeight)",
        "retail": true
      }
    ],
    "CreateAnchorFrames": [
      {
        "name": "CreateAnchorFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "editorFrame:CreateAnchorFrames()",
        "retail": true
      }
    ],
    "CreateMoverFrames": [
      {
        "name": "CreateMoverFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "editorFrame.moverFrames = editorFrame:CreateMoverFrames()",
        "retail": true
      }
    ],
    "CreateMoverGuideLines": [
      {
        "name": "CreateMoverGuideLines",
        "count": 1,
        "confidence": 0.2,
        "sample": "editorFrame:CreateMoverGuideLines()",
        "retail": true
      }
    ],
    "IsLocTable": [
      {
        "name": "Language.IsLocTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (detailsFramework.Language.IsLocTable(tooltip)) then",
        "retail": true
      },
      {
        "name": "IsLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"IsLocTable\"] = \"IsLocTable(locTable)\",",
        "retail": true
      },
      {
        "name": "DF.Language.IsLocTable",
        "count": 7,
        "confidence": 1.0,
        "sample": "function DF.Language.IsLocTable(locTable)",
        "retail": true
      }
    ],
    "RegisterTableKeyWithLocTable": [
      {
        "name": "Language.RegisterTableKeyWithLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.RegisterTableKeyWithLocTable(self, \"have_tooltip\", locTable)",
        "retail": true
      },
      {
        "name": "RegisterTableKeyWithLocTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "RegisterTableKeyWithLocTable(table, key, locTable[, silence])",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterTableKeyWithLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.RegisterTableKeyWithLocTable(table, key, locTable, silence)",
        "retail": true
      }
    ],
    "IsOwner": [
      {
        "name": "IsOwner",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (GameCooltip:IsOwner(getFrame(self))) then",
        "retail": true
      }
    ],
    "GetDrawLayer": [
      {
        "name": "GetDrawLayer",
        "count": 3,
        "confidence": 0.6,
        "sample": "local drawLayer = object:GetDrawLayer()",
        "retail": true
      }
    ],
    "ResetDataIndex": [
      {
        "name": "ResetDataIndex",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ResetDataIndex()",
        "retail": true
      }
    ],
    "GetDataNextValue": [
      {
        "name": "GetDataNextValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "---reset the data index, making GetDataNextValue() return the first value again",
        "retail": true
      }
    ],
    "ResetMinMaxValues": [
      {
        "name": "ResetMinMaxValues",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:ResetMinMaxValues()",
        "retail": true
      }
    ],
    "IsDesaturated": [
      {
        "name": "IsDesaturated",
        "count": 1,
        "confidence": 0.2,
        "sample": "return self.barTexture:IsDesaturated()",
        "retail": true
      }
    ],
    "GetStatusBarColor": [
      {
        "name": "GetStatusBarColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "return self:GetStatusBarColor()",
        "retail": true
      }
    ],
    "HasTextureMask": [
      {
        "name": "HasTextureMask",
        "count": 7,
        "confidence": 1.0,
        "sample": "if (not self:HasTextureMask()) then",
        "retail": true
      }
    ],
    "CreateTextureMask": [
      {
        "name": "CreateTextureMask",
        "count": 4,
        "confidence": 0.8,
        "sample": "detailsFramework:Msg(\"Object doesn't not have a texture mask, create one using object:CreateTextureMask()\", debugstack())",
        "retail": true
      }
    ],
    "GetSpellBookItemTexture": [
      {
        "name": "C_SpellBook.GetSpellBookItemTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "local GetSpellBookItemTexture = GetSpellBookItemTexture or function(...) return C_SpellBook.GetSpellBookItemTexture(...) end",
        "retail": true
      },
      {
        "name": "GetSpellBookItemTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "MACRO_ICON_FILENAMES [index] = si and si.iconID or GetSpellBookItemTexture(j, SPELLBOOK_BANK_PLAYER) or 0",
        "retail": true
      }
    ],
    "AlignRows": [
      {
        "name": "AlignRows",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:AlignRows()",
        "retail": true
      }
    ],
    "CreateRowText": [
      {
        "name": "CreateRowText",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:CreateRowText (line)",
        "retail": true
      }
    ],
    "CreateRowEntry": [
      {
        "name": "CreateRowEntry",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:CreateRowEntry (line)",
        "retail": true
      }
    ],
    "CreateCheckbox": [
      {
        "name": "CreateCheckbox",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CreateCheckbox (line)",
        "retail": true
      }
    ],
    "CreateRowButton": [
      {
        "name": "CreateRowButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:CreateRowButton (line)",
        "retail": true
      }
    ],
    "CreateRowIcon": [
      {
        "name": "CreateRowIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:CreateRowIcon (line)",
        "retail": true
      }
    ],
    "CreateRowTexture": [
      {
        "name": "CreateRowTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:CreateRowTexture (line)",
        "retail": true
      }
    ],
    "AddRow": [
      {
        "name": "AddRow",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:AddRow (t)",
        "retail": true
      }
    ],
    "UpdateRowAmount": [
      {
        "name": "UpdateRowAmount",
        "count": 3,
        "confidence": 0.6,
        "sample": "panel:UpdateRowAmount()",
        "retail": true
      }
    ],
    "CreateFillPanel": [
      {
        "name": "CreateFillPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateFillPanel(parent, rows, w, h, total_lines, fill_row, autowidth, options, member, name)",
        "retail": true
      }
    ],
    "RefreshIcons": [
      {
        "name": "IconPickFrameScroll.RefreshIcons",
        "count": 3,
        "confidence": 0.6,
        "sample": "detailsFramework.IconPickFrameScroll.RefreshIcons()",
        "retail": true
      },
      {
        "name": "RefreshIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "function scroll.RefreshIcons()",
        "retail": true
      }
    ],
    "FauxScrollFrame_SetOffset": [
      {
        "name": "FauxScrollFrame_SetOffset",
        "count": 1,
        "confidence": 0.2,
        "sample": "FauxScrollFrame_SetOffset (detailsFramework.IconPickFrame, 1)",
        "retail": true
      }
    ],
    "GetLooseMacroItemIcons": [
      {
        "name": "GetLooseMacroItemIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "GetLooseMacroItemIcons(MACRO_ICON_FILENAMES)",
        "retail": true
      }
    ],
    "GetLooseMacroIcons": [
      {
        "name": "GetLooseMacroIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "GetLooseMacroIcons(MACRO_ICON_FILENAMES)",
        "retail": true
      }
    ],
    "GetMacroIcons": [
      {
        "name": "GetMacroIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "GetMacroIcons(MACRO_ICON_FILENAMES)",
        "retail": true
      }
    ],
    "GetMacroItemIcons": [
      {
        "name": "GetMacroItemIcons",
        "count": 1,
        "confidence": 0.2,
        "sample": "GetMacroItemIcons(MACRO_ICON_FILENAMES)",
        "retail": true
      }
    ],
    "ShowPanicWarning": [
      {
        "name": "ShowPanicWarning",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:ShowPanicWarning (text)",
        "retail": true
      }
    ],
    "SavePositionOnScreen": [
      {
        "name": "SavePositionOnScreen",
        "count": 4,
        "confidence": 0.8,
        "sample": "detailsFramework:SavePositionOnScreen (self)",
        "retail": true
      }
    ],
    "TextToFloor": [
      {
        "name": "TextToFloor",
        "count": 1,
        "confidence": 0.2,
        "sample": "local newScale = detailsFramework.TextToFloor(text)",
        "retail": true
      }
    ],
    "SetBorderCornerColor": [
      {
        "name": "SetBorderCornerColor",
        "count": 17,
        "confidence": 1.0,
        "sample": "simplePanel.TitleBar:SetBorderCornerColor(0, 0, 0, 0)",
        "retail": true
      }
    ],
    "OnUnlock": [
      {
        "name": "OnUnlock",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OnUnlock()",
        "retail": true
      }
    ],
    "OnLock": [
      {
        "name": "OnLock",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OnLock()",
        "retail": true
      }
    ],
    "Panel1PxOnToggleLock": [
      {
        "name": "Panel1PxOnToggleLock",
        "count": 2,
        "confidence": 0.4,
        "sample": "Panel1PxOnToggleLock (f)",
        "retail": true
      }
    ],
    "Panel1PxOnClickLock": [
      {
        "name": "Panel1PxOnClickLock",
        "count": 2,
        "confidence": 0.4,
        "sample": "Panel1PxOnClickLock (self.Lock)",
        "retail": true
      }
    ],
    "RestoreFramePosition": [
      {
        "name": "RestoreFramePosition",
        "count": 2,
        "confidence": 0.4,
        "sample": "detailsFramework:RestoreFramePosition (self)",
        "retail": true
      }
    ],
    "Panel1PxReadConfig": [
      {
        "name": "Panel1PxReadConfig",
        "count": 1,
        "confidence": 0.2,
        "sample": "Panel1PxReadConfig(newFrame)",
        "retail": true
      }
    ],
    "SetTextIfLocTableOrDefault": [
      {
        "name": "Language.SetTextIfLocTableOrDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.SetTextIfLocTableOrDefault(titleString, title or \"\")",
        "retail": true
      },
      {
        "name": "SetTextIfLocTableOrDefault",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetTextIfLocTableOrDefault(object, locTable)",
        "retail": true
      },
      {
        "name": "DF.Language.SetTextIfLocTableOrDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.SetTextIfLocTableOrDefault(object, locTable)",
        "retail": true
      }
    ],
    "HidePromptPanel": [
      {
        "name": "HidePromptPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:HidePromptPanel(promptName)",
        "retail": true
      }
    ],
    "SetTime": [
      {
        "name": "SetTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "f:SetTime (max_time)",
        "retail": true
      }
    ],
    "AddOverlay": [
      {
        "name": "AddOverlay",
        "count": 2,
        "confidence": 0.4,
        "sample": "f:AddOverlay(box.index)",
        "retail": true
      }
    ],
    "AddLabel": [
      {
        "name": "AddLabel",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:AddLabel (color or line_default_color, name, \"overlay\", #self.OData)",
        "retail": true
      }
    ],
    "CreateChartPanel": [
      {
        "name": "CreateChartPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateChartPanel(parent, width, height, name)",
        "retail": true
      }
    ],
    "FindHighestParent": [
      {
        "name": "FindHighestParent",
        "count": 3,
        "confidence": 0.6,
        "sample": "function detailsFramework:FindHighestParent(self)",
        "retail": true
      }
    ],
    "CreateRightClickToClose": [
      {
        "name": "CreateRightClickToClose",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateRightClickToClose(parent, xOffset, yOffset, color, fontSize)",
        "retail": true
      }
    ],
    "ResetWidgets": [
      {
        "name": "ResetWidgets",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ResetWidgets()",
        "retail": true
      }
    ],
    "GetOrCreateWidget": [
      {
        "name": "GetOrCreateWidget",
        "count": 1,
        "confidence": 0.2,
        "sample": "local widget = self:GetOrCreateWidget()",
        "retail": true
      }
    ],
    "CreateSimpleListBox": [
      {
        "name": "CreateSimpleListBox",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateSimpleListBox(parent, name, title, emptyText, listTable, onClick, options)",
        "retail": true
      }
    ],
    "CreateBossScrollSelectorForInstance": [
      {
        "name": "CreateBossScrollSelectorForInstance",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateBossScrollSelectorForInstance(instanceId, parent, name, options, callback, ...)",
        "retail": true
      }
    ],
    "OnSwitch": [
      {
        "name": "OnSwitch",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:GetParent():GetObject():OnSwitch(self:GetParent():GetObject()._param, not self:GetParent():GetObject():GetValue()) --as the parent of self is a Switch object from DetailsFramework, it need to run :GetObject() to get the capsule object",
        "retail": true
      }
    ],
    "SetCheckedTexture": [
      {
        "name": "SetCheckedTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "checkbox:SetCheckedTexture(self.options.checked_texture, self.options.checked_texture_offset_x, self.options.checked_texture_offset_y)",
        "retail": true
      }
    ],
    "DeselectAll": [
      {
        "name": "DeselectAll",
        "count": 1,
        "confidence": 0.2,
        "sample": "radioGroup:DeselectAll()",
        "retail": true
      }
    ],
    "GetCapsule": [
      {
        "name": "GetCapsule",
        "count": 3,
        "confidence": 0.6,
        "sample": "checkbox = checkbox.GetCapsule and checkbox:GetCapsule() or checkbox",
        "retail": true
      }
    ],
    "SetSwitchFunction": [
      {
        "name": "SetSwitchFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "checkbox:SetSwitchFunction(setFunc)",
        "retail": true
      }
    ],
    "ResetAllCheckboxes": [
      {
        "name": "ResetAllCheckboxes",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ResetAllCheckboxes()",
        "retail": true
      }
    ],
    "GetCheckbox": [
      {
        "name": "GetCheckbox",
        "count": 1,
        "confidence": 0.2,
        "sample": "local checkbox = self:GetCheckbox(optionId)",
        "retail": true
      }
    ],
    "RefreshCheckbox": [
      {
        "name": "RefreshCheckbox",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:RefreshCheckbox(checkbox, optionsTable, optionId)",
        "retail": true
      }
    ],
    "ArrangeFrames": [
      {
        "name": "ArrangeFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ArrangeFrames(false, self.AnchorOptions)",
        "retail": true
      }
    ],
    "GetSwitchFunction": [
      {
        "name": "GetSwitchFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "local callbackFunc = thisCheckbox:GetSwitchFunction()",
        "retail": true
      }
    ],
    "RadioOnClick": [
      {
        "name": "RadioGroupCoreFunctions.RadioOnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.RadioGroupCoreFunctions.RadioOnClick(thisCheckbox, thisCheckbox:GetFixedParameter(), true)",
        "retail": true
      }
    ],
    "GetFixedParameter": [
      {
        "name": "GetFixedParameter",
        "count": 6,
        "confidence": 1.0,
        "sample": "detailsFramework.RadioGroupCoreFunctions.RadioOnClick(thisCheckbox, thisCheckbox:GetFixedParameter(), true)",
        "retail": true
      }
    ],
    "CreateCheckboxGroup": [
      {
        "name": "CreateCheckboxGroup",
        "count": 10,
        "confidence": 1.0,
        "sample": "function detailsFramework:CreateCheckboxGroup(parent, radioOptions, name, options, anchorOptions)",
        "retail": true
      }
    ],
    "CreateRadionGroup": [
      {
        "name": "CreateRadionGroup",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateRadionGroup(parent, radioOptions, name, options, anchorOptions) --alias for miss spelled old function",
        "retail": true
      }
    ],
    "UpdateLineHook": [
      {
        "name": "UpdateLineHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework:CoreDispatch((line:GetName() or \"ScrollBoxDataScrollUpdateLineHook\") .. \":UpdateLineHook()\", line:GetParent().OnUpdateLineHook, line, lineIndex, data)",
        "retail": true
      }
    ],
    "CreateDataScrollFrame": [
      {
        "name": "CreateDataScrollFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateDataScrollFrame (parent, name, options)",
        "retail": true
      }
    ],
    "GetNumNews": [
      {
        "name": "GetNumNews",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:GetNumNews (newsTable, lastNewsTime)",
        "retail": true
      }
    ],
    "CreateNewsFrame": [
      {
        "name": "CreateNewsFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateNewsFrame (parent, name, options, newsTable, db)",
        "retail": true
      }
    ],
    "CreateBorderFrame": [
      {
        "name": "CreateBorderFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "DF:CreateBorderFrame (parent, name)",
        "retail": true
      }
    ],
    "ShowErrorMessage": [
      {
        "name": "ShowErrorMessage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:ShowErrorMessage (errorMessage, titleText)",
        "retail": true
      }
    ],
    "SetPointOffsets": [
      {
        "name": "SetPointOffsets",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:SetPointOffsets(frame, xOffset, yOffset)",
        "retail": true
      }
    ],
    "CreateListBox": [
      {
        "name": "CreateListBox",
        "count": 3,
        "confidence": 0.6,
        "sample": "function detailsFramework:CreateListBox(parent, name, data, options, headerTable, headerOptions)",
        "retail": true
      }
    ],
    "ShowData": [
      {
        "name": "ShowData",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:ShowData(data)",
        "retail": true
      }
    ],
    "ResetColumnHeaderBackdrop": [
      {
        "name": "ResetColumnHeaderBackdrop",
        "count": 2,
        "confidence": 0.4,
        "sample": "headerFrame:ResetColumnHeaderBackdrop(previousColumnHeader)",
        "retail": true
      }
    ],
    "SetBackdropColorForSelectedColumnHeader": [
      {
        "name": "SetBackdropColorForSelectedColumnHeader",
        "count": 2,
        "confidence": 0.4,
        "sample": "headerFrame:SetBackdropColorForSelectedColumnHeader(columnHeader)",
        "retail": true
      }
    ],
    "UpdateSortArrow": [
      {
        "name": "UpdateSortArrow",
        "count": 4,
        "confidence": 0.8,
        "sample": "headerFrame:UpdateSortArrow(columnHeader)",
        "retail": true
      }
    ],
    "GetNextHeader": [
      {
        "name": "GetNextHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "local columnHeader = self:GetNextHeader()",
        "retail": true
      }
    ],
    "UpdateColumnHeader": [
      {
        "name": "UpdateColumnHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UpdateColumnHeader(columnHeader, i)",
        "retail": true
      }
    ],
    "ClearColumnHeader": [
      {
        "name": "ClearColumnHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ClearColumnHeader(columnHeader)",
        "retail": true
      }
    ],
    "SetOnColumnResizeScript": [
      {
        "name": "SetOnColumnResizeScript",
        "count": 1,
        "confidence": 0.2,
        "sample": "reziser_shown = false, --make sure to set the callback function with: header:SetOnColumnResizeScript(callbackFunction)",
        "retail": true
      }
    ],
    "SetHeaderTable": [
      {
        "name": "SetHeaderTable",
        "count": 8,
        "confidence": 1.0,
        "sample": "newHeader:SetHeaderTable(headerTable)",
        "retail": true
      }
    ],
    "SetRightText": [
      {
        "name": "SetRightText",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BarMetaFunctions:SetRightText (text)",
        "retail": true
      }
    ],
    "ShowDiv": [
      {
        "name": "ShowDiv",
        "count": 1,
        "confidence": 0.2,
        "sample": "function BarMetaFunctions:ShowDiv (bool)",
        "retail": true
      }
    ],
    "SetContainer": [
      {
        "name": "SetContainer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function BarMetaFunctions:SetContainer (container)",
        "retail": true
      }
    ],
    "OnTimerEnd": [
      {
        "name": "OnTimerEnd",
        "count": 3,
        "confidence": 0.6,
        "sample": "function BarMetaFunctions:OnTimerEnd()",
        "retail": true
      }
    ],
    "StartTimeBarAnimation": [
      {
        "name": "StartTimeBarAnimation",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:StartTimeBarAnimation(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkNormalBar_OnCreate": [
      {
        "name": "DetailsFrameworkNormalBar_OnCreate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsFrameworkNormalBar_OnCreate (self)",
        "retail": true
      }
    ],
    "NewBar": [
      {
        "name": "NewBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "return DF:NewBar (parent, parent, name, member, w, h, value, texture)",
        "retail": true
      }
    ],
    "GetPointDistance": [
      {
        "name": "DF.Math.GetPointDistance",
        "count": 4,
        "confidence": 0.8,
        "sample": "local closestDistance = DF.Math.GetPointDistance(ninePoints[1].x, ninePoints[1].y, coordinate.x, coordinate.y)",
        "retail": true
      }
    ],
    "GetSortFractionFromString": [
      {
        "name": "DF.Math.GetSortFractionFromString",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.GetSortFractionFromString(str)",
        "retail": true
      }
    ],
    "GetVectorLength": [
      {
        "name": "DF.Math.GetVectorLength",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.GetVectorLength(vectorX, vectorY, vectorZ)",
        "retail": true
      },
      {
        "name": "GetVectorLength",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:GetVectorLength(vectorX, vectorY, vectorZ)",
        "retail": true
      }
    ],
    "RandomFraction": [
      {
        "name": "RandomFraction",
        "count": 1,
        "confidence": 0.2,
        "sample": "---return a random fraction between two values, example: RandomFraction(.2, .3) returns a number between .2 and .3, 0.25, 0.28, 0.21, etc",
        "retail": true
      },
      {
        "name": "DF.Math.RandomFraction",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.RandomFraction(minValue, maxValue)",
        "retail": true
      }
    ],
    "GetRangeValue": [
      {
        "name": "DF.Math.GetRangeValue",
        "count": 4,
        "confidence": 0.8,
        "sample": "return DF.Math.GetRangeValue(minValue, maxValue, 1 - DF.Math.GetRangePercent(minValue, maxValue, value))",
        "retail": true
      },
      {
        "name": "GetRangeValue",
        "count": 3,
        "confidence": 0.6,
        "sample": "return DF:GetRangeValue(outputX, outputY, Clamp(DF:GetRangePercent(inputX, inputY, value), 0, 1))",
        "retail": true
      },
      {
        "name": "Math.GetRangeValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "scaleSlider:SetValue(detailsFramework.Math.GetRangeValue(frameCanvas.options.scale_min, frameCanvas.options.scale_max, 0.5))",
        "retail": true
      }
    ],
    "GetUnitDistance": [
      {
        "name": "DF.Math.GetUnitDistance",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.GetUnitDistance(unitId1, unitId2)",
        "retail": true
      }
    ],
    "FindLookAtRotation": [
      {
        "name": "DF.Math.FindLookAtRotation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.FindLookAtRotation(x1, y1, x2, y2)",
        "retail": true
      },
      {
        "name": "FindLookAtRotation",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:FindLookAtRotation(x1, y1, x2, y2)",
        "retail": true
      }
    ],
    "MapRangeColor": [
      {
        "name": "MapRangeColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "---*Example: MapRangeColor(0, 1, 0, 255, 0.5, 0.5, 0.5) returns 127.5, 127.5, 127.5",
        "retail": true
      },
      {
        "name": "DF.Math.MapRangeColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.MapRangeColor(inputX, inputY, outputX, outputY, red, green, blue)",
        "retail": true
      }
    ],
    "MultiplyBy": [
      {
        "name": "DF.Math.MultiplyBy",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.MultiplyBy(value, ...)",
        "retail": true
      }
    ],
    "MapRangeUnclamped": [
      {
        "name": "DF.Math.MapRangeUnclamped",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.MapRangeUnclamped(inputX, inputY, outputX, outputY, value)",
        "retail": true
      },
      {
        "name": "MapRangeUnclamped",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:MapRangeUnclamped(inputX, inputY, outputX, outputY, value)",
        "retail": true
      }
    ],
    "GetColorRangeValue": [
      {
        "name": "DF.Math.GetColorRangeValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.GetColorRangeValue(r1, g1, b1, r2, g2, b2, value)",
        "retail": true
      },
      {
        "name": "GetColorRangeValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetColorRangeValue(r1, g1, b1, r2, g2, b2, value)",
        "retail": true
      }
    ],
    "LerpNorm": [
      {
        "name": "DF.Math.LerpNorm",
        "count": 4,
        "confidence": 0.8,
        "sample": "local newR = DF.Math.LerpNorm(r1, r2, value)",
        "retail": true
      },
      {
        "name": "LerpNorm",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:LerpNorm(minValue, maxValue, value)",
        "retail": true
      }
    ],
    "GetDotProduct": [
      {
        "name": "DF.Math.GetDotProduct",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.GetDotProduct(value1, value2)",
        "retail": true
      },
      {
        "name": "GetDotProduct",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetDotProduct(value1, value2)",
        "retail": true
      }
    ],
    "GetBezierPoint": [
      {
        "name": "DF.Math.GetBezierPoint",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Math.GetBezierPoint(value, point1, point2, point3)",
        "retail": true
      },
      {
        "name": "GetBezierPoint",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetBezierPoint(value, point1, point2, point3)",
        "retail": true
      }
    ],
    "IsNearlyZero": [
      {
        "name": "DF.Math.IsNearlyZero",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.IsNearlyZero(value, tolerance)",
        "retail": true
      },
      {
        "name": "IsNearlyZero",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:IsNearlyZero(value, tolerance)",
        "retail": true
      }
    ],
    "IsWithin": [
      {
        "name": "DF.Math.IsWithin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Math.IsWithin(minValue, maxValue, value, isInclusive)",
        "retail": true
      },
      {
        "name": "IsWithin",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:IsWithin(minValue, maxValue, value, isInclusive)",
        "retail": true
      }
    ],
    "GetDistance_Unit": [
      {
        "name": "GetDistance_Unit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetDistance_Unit(unit1, unit2)",
        "retail": true
      }
    ],
    "GetDistance_Point": [
      {
        "name": "GetDistance_Point",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetDistance_Point(x1, y1, x2, y2)",
        "retail": true
      }
    ],
    "GetObjectCoordinates": [
      {
        "name": "GetObjectCoordinates",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:GetObjectCoordinates(object)",
        "retail": true
      }
    ],
    "ScaleBack": [
      {
        "name": "ScaleBack",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:ScaleBack()",
        "retail": true
      }
    ],
    "GetSavedVariables": [
      {
        "name": "SavedVars.GetSavedVariables",
        "count": 7,
        "confidence": 1.0,
        "sample": "local savedVariables = detailsFramework.SavedVars.GetSavedVariables(addonObject)",
        "retail": true
      }
    ],
    "CreateNewAddOn": [
      {
        "name": "CreateNewAddOn",
        "count": 7,
        "confidence": 1.0,
        "sample": "---@param addonObject df_addon the addon object created by detailsFramework:CreateNewAddOn()",
        "retail": true
      }
    ],
    "RefreshProfilePanel": [
      {
        "name": "SavedVars.RefreshProfilePanel",
        "count": 4,
        "confidence": 0.8,
        "sample": "function detailsFramework.SavedVars.RefreshProfilePanel(profilePanel)",
        "retail": true
      }
    ],
    "RefreshSelectProfileDropdown": [
      {
        "name": "RefreshSelectProfileDropdown",
        "count": 1,
        "confidence": 0.2,
        "sample": "profilePanel:RefreshSelectProfileDropdown()",
        "retail": true
      }
    ],
    "CreateProfilePanel": [
      {
        "name": "SavedVars.CreateProfilePanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.SavedVars.CreateProfilePanel(addonObject, frameName, parentFrame, options)",
        "retail": true
      }
    ],
    "OnClickCreateNewProfile": [
      {
        "name": "OnClickCreateNewProfile",
        "count": 1,
        "confidence": 0.2,
        "sample": "local createProfileButton = detailsFramework:CreateButton(frame, function() frame.OnClickCreateNewProfile(frame) end, 100, 32, \"Create\", false, false, false, \"ProfileCreateButton\", \"$parentCreateProfileButton\", buttonTemplate, labelTemplate)",
        "retail": true
      }
    ],
    "IsItemSoulbound": [
      {
        "name": "Items.IsItemSoulbound",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Items.IsItemSoulbound(containerIndex, slotIndex)",
        "retail": true
      }
    ],
    "CreateIcon": [
      {
        "name": "CreateIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "iconFrame = self:CreateIcon(\"$parentIcon\" .. self.NextIcon)",
        "retail": true
      }
    ],
    "AddSpecificIcon": [
      {
        "name": "AddSpecificIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:AddSpecificIcon(iconTemplateTable.id, iconTemplateTable.id, nil, iconTemplateTable.startTime, iconTemplateTable.duration, nil, nil, iconTemplateTable.count, nil, nil, nil, nil, nil, nil, iconTemplateTable)",
        "retail": true
      }
    ],
    "SetAuraWithIconTemplate": [
      {
        "name": "SetAuraWithIconTemplate",
        "count": 1,
        "confidence": 0.2,
        "sample": "local iconFrame = self:SetAuraWithIconTemplate(auraInfo, iconTemplateTable)",
        "retail": true
      }
    ],
    "SetStacks": [
      {
        "name": "SetStacks",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetStacks(iconFrame, true, count)",
        "retail": true
      }
    ],
    "SetReverse": [
      {
        "name": "SetReverse",
        "count": 2,
        "confidence": 0.4,
        "sample": "iconFrame.Cooldown:SetReverse(options.cooldown_reverse)",
        "retail": true
      }
    ],
    "SetEdgeTexture": [
      {
        "name": "SetEdgeTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "iconFrame.Cooldown:SetEdgeTexture(options.cooldown_edge_texture) --the yellow edge that follows the cooldown animation",
        "retail": true
      }
    ],
    "SetHideCountdownNumbers": [
      {
        "name": "SetHideCountdownNumbers",
        "count": 3,
        "confidence": 0.6,
        "sample": "iconFrame.Cooldown:SetHideCountdownNumbers(options.surpress_blizzard_cd_timer)",
        "retail": true
      }
    ],
    "SetSwipeTexture": [
      {
        "name": "SetSwipeTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "iconFrame.Cooldown:SetSwipeTexture([[Interface\\Masks\\SquareMask]], 0, 0, 0, 0.3)",
        "retail": true
      }
    ],
    "SetSwipeColor": [
      {
        "name": "SetSwipeColor",
        "count": 3,
        "confidence": 0.6,
        "sample": "--iconFrame.Cooldown:SetSwipeColor(1, 1, 1, 1)",
        "retail": true
      }
    ],
    "SetDrawEdge": [
      {
        "name": "SetDrawEdge",
        "count": 1,
        "confidence": 0.2,
        "sample": "--iconFrame.Cooldown:SetDrawEdge(true) --the same shit as above",
        "retail": true
      }
    ],
    "SetDrawBling": [
      {
        "name": "SetDrawBling",
        "count": 1,
        "confidence": 0.2,
        "sample": "--iconFrame.Cooldown:SetDrawBling(true) --edge of the animation, a thin horizontal texture",
        "retail": true
      }
    ],
    "SetEdgeScale": [
      {
        "name": "SetEdgeScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "--iconFrame.Cooldown:SetEdgeScale(4) --edge of the animation, a thin horizontal texture",
        "retail": true
      }
    ],
    "OnIconTick": [
      {
        "name": "OnIconTick",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.OnIconTick(iconFrame)",
        "retail": true
      }
    ],
    "RemoveSpecificIcon": [
      {
        "name": "RemoveSpecificIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "iconFrame:GetParent():RemoveSpecificIcon(iconFrame.identifierKey)",
        "retail": true
      }
    ],
    "FormatCooldownTime": [
      {
        "name": "FormatCooldownTime",
        "count": 3,
        "confidence": 0.6,
        "sample": "iconFrame.CountdownText:SetText(iconFrame.parentIconRow.FormatCooldownTime((iconFrame.duration - (now - iconFrame.startTime)) / (iconFrame.modRate or 1)))",
        "retail": true
      }
    ],
    "AlignAuraIcons": [
      {
        "name": "AlignAuraIcons",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:AlignAuraIcons()",
        "retail": true
      }
    ],
    "GetIconGrowDirection": [
      {
        "name": "GetIconGrowDirection",
        "count": 1,
        "confidence": 0.2,
        "sample": "local growDirection = self:GetIconGrowDirection()",
        "retail": true
      }
    ],
    "CreateIconRowGeneric": [
      {
        "name": "CreateIconRowGeneric",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateIconRowGeneric(parent, name, options)",
        "retail": true
      }
    ],
    "SetSplit": [
      {
        "name": "SetSplit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SplitBarMetaFunctions:SetSplit (value)",
        "retail": true
      }
    ],
    "SetLeftIcon": [
      {
        "name": "SetLeftIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SplitBarMetaFunctions:SetLeftIcon (texture, ...)",
        "retail": true
      }
    ],
    "SetRightIcon": [
      {
        "name": "SetRightIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SplitBarMetaFunctions:SetRightIcon (texture, ...)",
        "retail": true
      }
    ],
    "DisableAnimations": [
      {
        "name": "DisableAnimations",
        "count": 1,
        "confidence": 0.2,
        "sample": "function SplitBarMetaFunctions:DisableAnimations()",
        "retail": true
      }
    ],
    "DetailsFrameworkSplitlBar_OnCreate": [
      {
        "name": "DetailsFrameworkSplitlBar_OnCreate",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsFrameworkSplitlBar_OnCreate (self)",
        "retail": true
      }
    ],
    "NewSplitBar": [
      {
        "name": "NewSplitBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "return DF:NewSplitBar(parent, nil, name, member, width, height)",
        "retail": true
      }
    ],
    "BringNamedLocalFunctionToTop": [
      {
        "name": "BringNamedLocalFunctionToTop",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:BringNamedLocalFunctionToTop(codeBlock)",
        "retail": true
      }
    ],
    "PackTest": [
      {
        "name": "PackTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PackTest()",
        "retail": true
      }
    ],
    "PackSubTest": [
      {
        "name": "PackSubTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PackSubTest()",
        "retail": true
      }
    ],
    "PackSubMergeTest": [
      {
        "name": "PackSubMergeTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PackSubMergeTest()",
        "retail": true
      }
    ],
    "PackHashTest": [
      {
        "name": "PackHashTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PackHashTest()",
        "retail": true
      }
    ],
    "PackHashSubTableTest": [
      {
        "name": "PackHashSubTableTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function PackHashSubTableTest()",
        "retail": true
      }
    ],
    "UnpackTest": [
      {
        "name": "UnpackTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnpackTest()",
        "retail": true
      }
    ],
    "UnpackSecondTest": [
      {
        "name": "UnpackSecondTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnpackSecondTest()",
        "retail": true
      }
    ],
    "UnpackSubTest": [
      {
        "name": "UnpackSubTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnpackSubTest()",
        "retail": true
      }
    ],
    "UnpackHashSubTableTest": [
      {
        "name": "UnpackHashSubTableTest",
        "count": 1,
        "confidence": 0.2,
        "sample": "function UnpackHashSubTableTest()",
        "retail": true
      }
    ],
    "CreateRoundedPanel": [
      {
        "name": "CreateRoundedPanel",
        "count": 8,
        "confidence": 1.0,
        "sample": "local frame = _G[name] or detailsFramework:CreateRoundedPanel(parent, name, optionsTable)",
        "retail": true
      }
    ],
    "Coil": [
      {
        "name": "Coil",
        "count": 3,
        "confidence": 0.6,
        "sample": "[6789] = 5, --Mortal Coil (talent)",
        "retail": true
      }
    ],
    "Crane": [
      {
        "name": "Crane",
        "count": 2,
        "confidence": 0.4,
        "sample": "[198664] = 4, --Invoke Chi-Ji, the Red Crane (talent)",
        "retail": true
      }
    ],
    "Wish": [
      {
        "name": "Wish",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.CooldownsBySpec[71][12292] = 1 --Death Wish (BCC)",
        "retail": true
      }
    ],
    "Flurry": [
      {
        "name": "Flurry",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.CooldownsBySpec[260][13877] = 1 --Blade Flurry (talent) (BBC)",
        "retail": true
      }
    ],
    "Combustion": [
      {
        "name": "Combustion",
        "count": 1,
        "confidence": 0.2,
        "sample": "DF.CooldownsBySpec[63][28682] = 1 --Combustion (talent) (BCC)",
        "retail": true
      }
    ],
    "Roar": [
      {
        "name": "Roar",
        "count": 1,
        "confidence": 0.2,
        "sample": "[77764] = {cooldown = 120, duration = 8, talent = false, charges = 1, class = \"DRUID\", type = 4}, --Stampeding Roar (utility)",
        "retail": true
      }
    ],
    "Shockwave": [
      {
        "name": "Shockwave",
        "count": 1,
        "confidence": 0.2,
        "sample": "[132168] = \"WARRIOR\", --Shockwave (debuff spellid)",
        "retail": true
      }
    ],
    "Polymorph": [
      {
        "name": "Polymorph",
        "count": 1,
        "confidence": 0.2,
        "sample": "[61305] = \"MAGE\", --Polymorph (black cat)",
        "retail": true
      }
    ],
    "Chastise": [
      {
        "name": "Chastise",
        "count": 2,
        "confidence": 0.4,
        "sample": "[200196] = \"PRIEST\", --Holy Word: Chastise (debuff spellid)",
        "retail": true
      }
    ],
    "Horror": [
      {
        "name": "Horror",
        "count": 1,
        "confidence": 0.2,
        "sample": "[64044] = \"PRIEST\", --Psychic Horror (talent)",
        "retail": true
      }
    ],
    "Blind": [
      {
        "name": "Blind",
        "count": 1,
        "confidence": 0.2,
        "sample": "[427773] = \"ROGUE\", --Blind (AoE)",
        "retail": true
      }
    ],
    "Repentance": [
      {
        "name": "Repentance",
        "count": 1,
        "confidence": 0.2,
        "sample": "[20066] = \"PALADIN\", --Repentance (talent)",
        "retail": true
      }
    ],
    "Zero": [
      {
        "name": "Zero",
        "count": 1,
        "confidence": 0.2,
        "sample": "[334693] = \"DEAHTKNIGHT\", --Absolute Zero (legendary)",
        "retail": true
      }
    ],
    "Dazed": [
      {
        "name": "Dazed",
        "count": 1,
        "confidence": 0.2,
        "sample": "[50259] = \"DRUID\", --Dazed (from Wild Charge)",
        "retail": true
      }
    ],
    "Cyclone": [
      {
        "name": "Cyclone",
        "count": 2,
        "confidence": 0.4,
        "sample": "[209753] = \"DRUID\", --Cyclone (from pvp talent)",
        "retail": true
      }
    ],
    "Ice": [
      {
        "name": "Ice",
        "count": 1,
        "confidence": 0.2,
        "sample": "[3355] = \"HUNTER\", --Freezing Trap / Diamond Ice (from pvp talent)",
        "retail": true
      }
    ],
    "Ji": [
      {
        "name": "Ji",
        "count": 1,
        "confidence": 0.2,
        "sample": "[198909] = \"MONK\", --Song of Chi-Ji (talent)",
        "retail": true
      }
    ],
    "Hex": [
      {
        "name": "Hex",
        "count": 8,
        "confidence": 1.0,
        "sample": "[210873] = \"SHAMAN\", --Hex (Compy)",
        "retail": true
      }
    ],
    "Earthgrab": [
      {
        "name": "Earthgrab",
        "count": 1,
        "confidence": 0.2,
        "sample": "[64695] = \"SHAMAN\", --Earthgrab (talent)",
        "retail": true
      }
    ],
    "Sundering": [
      {
        "name": "Sundering",
        "count": 1,
        "confidence": 0.2,
        "sample": "[197214] = \"SHAMAN\", --Sundering (talent)",
        "retail": true
      }
    ],
    "Chaos": [
      {
        "name": "Chaos",
        "count": 1,
        "confidence": 0.2,
        "sample": "[331866] = \"COVENANT|VENTHYR\", --Agent of Chaos (Nadia soulbind)",
        "retail": true
      }
    ],
    "FindClassForCooldown": [
      {
        "name": "FindClassForCooldown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:FindClassForCooldown (spellId)",
        "retail": true
      }
    ],
    "GetSpellsForEncounterFromJournal": [
      {
        "name": "GetSpellsForEncounterFromJournal",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:GetSpellsForEncounterFromJournal (instanceEJID, encounterEJID)",
        "retail": true
      }
    ],
    "IsSpellInRange": [
      {
        "name": "IsSpellInRange",
        "count": 1,
        "confidence": 0.2,
        "sample": "-- 185245 spellID for Torment, it is always failing to check range with IsSpellInRange()",
        "retail": true
      }
    ],
    "Moonfire": [
      {
        "name": "Moonfire",
        "count": 3,
        "confidence": 0.6,
        "sample": "[102] = 8921, -- druid balance - Moonfire (45 yards)",
        "retail": true
      }
    ],
    "Knife": [
      {
        "name": "Knife",
        "count": 1,
        "confidence": 0.2,
        "sample": "[259] = 185565, --rogue assassination - Poisoned Knife (30 yards)",
        "retail": true
      }
    ],
    "UpdateLoadConditionsTable": [
      {
        "name": "UpdateLoadConditionsTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "conditions = detailsFramework:UpdateLoadConditionsTable({}),",
        "retail": true
      }
    ],
    "OnUserPressedKeybind": [
      {
        "name": "OnUserPressedKeybind",
        "count": 2,
        "confidence": 0.4,
        "sample": "---only called from OnUserPressedKeybind() when the a keybindTable is not found for the action",
        "retail": true
      }
    ],
    "UpdateScroll": [
      {
        "name": "UpdateScroll",
        "count": 11,
        "confidence": 1.0,
        "sample": "--EnemyGridOptionsPanelFrameKeybindScroill:UpdateScroll() --!need to defined the scroll frame",
        "retail": true
      }
    ],
    "SetClearButtonsEnabled": [
      {
        "name": "SetClearButtonsEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetClearButtonsEnabled(not value)",
        "retail": true
      }
    ],
    "SetEditButtonsEnabled": [
      {
        "name": "SetEditButtonsEnabled",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SetEditButtonsEnabled(not value)",
        "retail": true
      }
    ],
    "GetKeybindTypeAndActionFromIdentifier": [
      {
        "name": "GetKeybindTypeAndActionFromIdentifier",
        "count": 2,
        "confidence": 0.4,
        "sample": "local keybindType, actionId = keyBindFrame:GetKeybindTypeAndActionFromIdentifier(actionIdentifier)",
        "retail": true
      }
    ],
    "FindKeybindTable": [
      {
        "name": "FindKeybindTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "local _, index = keyBindFrame:FindKeybindTable(keybindType, actionId, actionIdentifier)",
        "retail": true
      }
    ],
    "GetKeybindData": [
      {
        "name": "GetKeybindData",
        "count": 5,
        "confidence": 1.0,
        "sample": "local keybindData = keyBindFrame:GetKeybindData()",
        "retail": true
      }
    ],
    "CallKeybindChangeCallback": [
      {
        "name": "CallKeybindChangeCallback",
        "count": 8,
        "confidence": 1.0,
        "sample": "keyBindFrame:CallKeybindChangeCallback(\"removed\", nil, nil, index)",
        "retail": true
      }
    ],
    "IsEditingKeybindSettings": [
      {
        "name": "IsEditingKeybindSettings",
        "count": 8,
        "confidence": 1.0,
        "sample": "local bIsEditingKeybind = keyBindFrame:IsEditingKeybindSettings()",
        "retail": true
      }
    ],
    "StopEditingKeybindSettings": [
      {
        "name": "StopEditingKeybindSettings",
        "count": 6,
        "confidence": 1.0,
        "sample": "keyBindFrame:StopEditingKeybindSettings()",
        "retail": true
      }
    ],
    "GetKeybindScroll": [
      {
        "name": "GetKeybindScroll",
        "count": 11,
        "confidence": 1.0,
        "sample": "local keybindScroll = keyBindFrame:GetKeybindScroll()",
        "retail": true
      }
    ],
    "IsKeybindActionMacro": [
      {
        "name": "IsKeybindActionMacro",
        "count": 5,
        "confidence": 1.0,
        "sample": "if (not self:IsKeybindActionMacro(keybindTable.action)) then",
        "retail": true
      }
    ],
    "OnKeyDown": [
      {
        "name": "OnKeyDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "OnUserPressedKeybind = function(self, keyPressed) --called from OnUserClickedToChooseKeybind and from OnKeyDown() script",
        "retail": true
      }
    ],
    "GetKeybindListener": [
      {
        "name": "GetKeybindListener",
        "count": 3,
        "confidence": 0.6,
        "sample": "local keybindListener = self:GetKeybindListener()",
        "retail": true
      }
    ],
    "SetListeningState": [
      {
        "name": "SetListeningState",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:SetListeningState(false)",
        "retail": true
      }
    ],
    "GetPressedModifiers": [
      {
        "name": "GetPressedModifiers",
        "count": 1,
        "confidence": 0.2,
        "sample": "local modifiers = self:GetPressedModifiers()",
        "retail": true
      }
    ],
    "GetListeningState": [
      {
        "name": "GetListeningState",
        "count": 4,
        "confidence": 0.8,
        "sample": "local bIsListening, actionIdentifier, button, keybindScrollData = self:GetListeningState()",
        "retail": true
      }
    ],
    "SaveKeybindToKeybindData": [
      {
        "name": "SaveKeybindToKeybindData",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:SaveKeybindToKeybindData(keybindTable, pressedKeybind, bKeybindJustCreated)",
        "retail": true
      }
    ],
    "SetAsSeparator": [
      {
        "name": "SetAsSeparator",
        "count": 2,
        "confidence": 0.4,
        "sample": "line:SetAsSeparator(true, iconTexture)",
        "retail": true
      }
    ],
    "GetEditPanel": [
      {
        "name": "GetEditPanel",
        "count": 9,
        "confidence": 1.0,
        "sample": "local editPanel = keyBindFrame:GetEditPanel()",
        "retail": true
      }
    ],
    "PassLoadFilters": [
      {
        "name": "PassLoadFilters",
        "count": 3,
        "confidence": 0.6,
        "sample": "local bCanLoad, reason = detailsFramework:PassLoadFilters(loadCondition)",
        "retail": true
      }
    ],
    "Macro": [
      {
        "name": "Macro",
        "count": 1,
        "confidence": 0.2,
        "sample": "local newMacroName = \"New @Macro (\" .. math.random(10000, 99999) .. \")\"",
        "retail": true
      }
    ],
    "StartEditingKeybindSettings": [
      {
        "name": "StartEditingKeybindSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:StartEditingKeybindSettings(\"LeftButton\", actionIdentifier, keybindTable)",
        "retail": true
      }
    ],
    "GetKeybindCallback": [
      {
        "name": "GetKeybindCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "local callbackFunc = self:GetKeybindCallback()",
        "retail": true
      }
    ],
    "OnKeybindNameChange": [
      {
        "name": "OnKeybindNameChange",
        "count": 2,
        "confidence": 0.4,
        "sample": "--self:OnKeybindNameChange(text)",
        "retail": true
      }
    ],
    "OnKeybindIconChange": [
      {
        "name": "OnKeybindIconChange",
        "count": 2,
        "confidence": 0.4,
        "sample": "--self:OnKeybindIconChange(texture)",
        "retail": true
      }
    ],
    "OnKeybindMacroChange": [
      {
        "name": "OnKeybindMacroChange",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OnKeybindMacroChange(keybindMacroText)",
        "retail": true
      }
    ],
    "OpenLoadConditionsPanel": [
      {
        "name": "OpenLoadConditionsPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "detailsFramework:OpenLoadConditionsPanel(conditionsSettings, onLoadConditionsChange, {title = \"Keybind Load Conditions\", name = editFrame.keybindTable.name})",
        "retail": true
      }
    ],
    "CreateKeybindFrame": [
      {
        "name": "CreateKeybindFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateKeybindFrame(parent, name, options, setKeybindCallback, keybindData)",
        "retail": true
      }
    ],
    "IsListening": [
      {
        "name": "IsListening",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (keyBindFrame:IsListening()) then",
        "retail": true
      }
    ],
    "CreateKeybindScroll": [
      {
        "name": "CreateKeybindScroll",
        "count": 1,
        "confidence": 0.2,
        "sample": "keyBindFrame:CreateKeybindScroll()",
        "retail": true
      }
    ],
    "CreateKeybindListener": [
      {
        "name": "CreateKeybindListener",
        "count": 1,
        "confidence": 0.2,
        "sample": "keyBindFrame:CreateKeybindListener()",
        "retail": true
      }
    ],
    "CreateEditPanel": [
      {
        "name": "CreateEditPanel",
        "count": 1,
        "confidence": 0.2,
        "sample": "keyBindFrame:CreateEditPanel()",
        "retail": true
      }
    ],
    "SetKeybindData": [
      {
        "name": "SetKeybindData",
        "count": 1,
        "confidence": 0.2,
        "sample": "keyBindFrame:SetKeybindData(keybindData or {})",
        "retail": true
      }
    ],
    "SetKeybindCallback": [
      {
        "name": "SetKeybindCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "keyBindFrame:SetKeybindCallback(setKeybindCallback)",
        "retail": true
      }
    ],
    "GetFunction": [
      {
        "name": "GetFunction",
        "count": 2,
        "confidence": 0.4,
        "sample": "return object:GetFunction()",
        "retail": true
      }
    ],
    "SetMenuSize": [
      {
        "name": "SetMenuSize",
        "count": 3,
        "confidence": 0.6,
        "sample": "object:SetMenuSize(value, nil)",
        "retail": true
      }
    ],
    "IsText": [
      {
        "name": "IsText",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DropDownMetaFunctions:IsText()",
        "retail": true
      }
    ],
    "GetMenuSize": [
      {
        "name": "GetMenuSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:GetMenuSize()",
        "retail": true
      }
    ],
    "GetTextEntry": [
      {
        "name": "GetTextEntry",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:GetTextEntry():Enable()",
        "retail": true
      }
    ],
    "GetMenuFrames": [
      {
        "name": "GetMenuFrames",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:GetMenuFrames() --not tested",
        "retail": true
      }
    ],
    "GetFrameForOption": [
      {
        "name": "GetFrameForOption",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:GetFrameForOption(optionsTable, value) --not tested",
        "retail": true
      }
    ],
    "NoOption": [
      {
        "name": "NoOption",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:NoOption(true)",
        "retail": true
      }
    ],
    "NoOptionSelected": [
      {
        "name": "NoOptionSelected",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:NoOptionSelected()",
        "retail": true
      }
    ],
    "SelectDelayed": [
      {
        "name": "SelectDelayed",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:SelectDelayed(optionName, byOptionNumber, bOnlyShown, runCallback)",
        "retail": true
      }
    ],
    "Selected": [
      {
        "name": "Selected",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:Selected(optionTableSelected)",
        "retail": true
      }
    ],
    "SetEmptyTextAndIcon": [
      {
        "name": "SetEmptyTextAndIcon",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:SetEmptyTextAndIcon(text, icon)",
        "retail": true
      }
    ],
    "UseSimpleHeader": [
      {
        "name": "UseSimpleHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DropDownMetaFunctions:UseSimpleHeader(value)",
        "retail": true
      }
    ],
    "GetLanguageIdForAddonId": [
      {
        "name": "DF.Language.GetLanguageIdForAddonId",
        "count": 2,
        "confidence": 0.4,
        "sample": "local thisLanguageId = languageId or DF.Language.GetLanguageIdForAddonId(addonId)",
        "retail": true
      },
      {
        "name": "GetLanguageIdForAddonId",
        "count": 1,
        "confidence": 0.2,
        "sample": "error(\"GetLanguageIdForAddonId() param #1 'addonId' must be a string or a table, got: \" .. type(addonId) .. \".\")",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOptionClick": [
      {
        "name": "DetailsFrameworkDropDownOptionClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOptionClick(button)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOptionsFrameOnHide": [
      {
        "name": "DetailsFrameworkDropDownOptionsFrameOnHide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOptionsFrameOnHide(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOptionOnEnter": [
      {
        "name": "DetailsFrameworkDropDownOptionOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOptionOnEnter(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOptionOnLeave": [
      {
        "name": "DetailsFrameworkDropDownOptionOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOptionOnLeave(frame)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnMouseDown": [
      {
        "name": "DetailsFrameworkDropDownOnMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnMouseDown(button, buttontype)",
        "retail": true
      }
    ],
    "OnMouseDownHook": [
      {
        "name": "OnMouseDownHook",
        "count": 1,
        "confidence": 0.2,
        "sample": "local interrupt = object.OnMouseDownHook(button, buttontype, optionsTable, scrollFrame, scrollChild, selectedTexture)",
        "retail": true
      }
    ],
    "CreateDropdownButton": [
      {
        "name": "CreateDropdownButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "thisOptionFrame = DF:CreateDropdownButton(parent, name)",
        "retail": true
      }
    ],
    "HideScroll": [
      {
        "name": "HideScroll",
        "count": 3,
        "confidence": 0.6,
        "sample": "object:HideScroll()",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnEnter": [
      {
        "name": "DetailsFrameworkDropDownOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnEnter(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnLeave": [
      {
        "name": "DetailsFrameworkDropDownOnLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnLeave(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnSizeChanged": [
      {
        "name": "DetailsFrameworkDropDownOnSizeChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnSizeChanged(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnShow": [
      {
        "name": "DetailsFrameworkDropDownOnShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnShow(self)",
        "retail": true
      }
    ],
    "DetailsFrameworkDropDownOnHide": [
      {
        "name": "DetailsFrameworkDropDownOnHide",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsFrameworkDropDownOnHide(self)",
        "retail": true
      }
    ],
    "RefreshDropIcon": [
      {
        "name": "RefreshDropIcon",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:RefreshDropIcon()",
        "retail": true
      }
    ],
    "CreateFontListGenerator": [
      {
        "name": "CreateFontListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateFontListGenerator(callback, bIncludeDefault)",
        "retail": true
      }
    ],
    "CreateColorListGenerator": [
      {
        "name": "CreateColorListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateColorListGenerator(callback)",
        "retail": true
      }
    ],
    "CreateOutlineListGenerator": [
      {
        "name": "CreateOutlineListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateOutlineListGenerator(callback)",
        "retail": true
      }
    ],
    "CreateAnchorPointListGenerator": [
      {
        "name": "CreateAnchorPointListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateAnchorPointListGenerator(callback)",
        "retail": true
      }
    ],
    "CreateRaidInstanceListGenerator": [
      {
        "name": "CreateRaidInstanceListGenerator",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateRaidInstanceListGenerator(callback)",
        "retail": true
      }
    ],
    "CreateBossListGenerator": [
      {
        "name": "CreateBossListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateBossListGenerator(callback, instanceId)",
        "retail": true
      }
    ],
    "CreateAudioListGenerator": [
      {
        "name": "CreateAudioListGenerator",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF:CreateAudioListGenerator(callback)",
        "retail": true
      }
    ],
    "CreateFontDropDown": [
      {
        "name": "CreateFontDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateFontDropDown(parent, callback, default, width, height, member, name, template, bIncludeDefault)",
        "retail": true
      }
    ],
    "CreateColorDropDown": [
      {
        "name": "CreateColorDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateColorDropDown(parent, callback, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "CreateOutlineDropDown": [
      {
        "name": "CreateOutlineDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateOutlineDropDown(parent, callback, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "CreateAnchorPointDropDown": [
      {
        "name": "CreateAnchorPointDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateAnchorPointDropDown(parent, callback, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "CreateAudioDropDown": [
      {
        "name": "CreateAudioDropDown",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateAudioDropDown(parent, callback, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "CreateRaidInstanceSelectorDroDown": [
      {
        "name": "CreateRaidInstanceSelectorDroDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateRaidInstanceSelectorDroDown(parent, callback, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "CreateBossSelectorDroDown": [
      {
        "name": "CreateBossSelectorDroDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateBossSelectorDroDown(parent, callback, instanceId, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "SetLeftMargin": [
      {
        "name": "SetLeftMargin",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetLeftMargin(iconWidth + 2)",
        "retail": true
      }
    ],
    "SetRightMargin": [
      {
        "name": "SetRightMargin",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:SetRightMargin(arrow:GetWidth() + 2)",
        "retail": true
      }
    ],
    "CreateDropDownWithText": [
      {
        "name": "CreateDropDownWithText",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:CreateDropDownWithText(parent, func, default, width, height, member, name, template)",
        "retail": true
      }
    ],
    "SetTextOriginal": [
      {
        "name": "SetTextOriginal",
        "count": 2,
        "confidence": 0.4,
        "sample": "label:SetTextOriginal(\"\")",
        "retail": true
      }
    ],
    "CreateNewDropdownFrame": [
      {
        "name": "CreateNewDropdownFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "dropDownObject.dropdown = DF:CreateNewDropdownFrame(parent, name)",
        "retail": true
      }
    ],
    "CreateAddOn": [
      {
        "name": "CreateAddOn",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateAddOn(name, global_saved, global_table, options_table, broker)",
        "retail": true
      }
    ],
    "SetXAxisData": [
      {
        "name": "SetXAxisData",
        "count": 5,
        "confidence": 1.0,
        "sample": "---| \"value\" a fixed table with values is passed by the SetXAxisData() function",
        "retail": true
      }
    ],
    "AddData": [
      {
        "name": "AddData",
        "count": 12,
        "confidence": 1.0,
        "sample": "---@field Plot fun(self: df_chart, yPointScale: number|nil, bUpdateLabels: boolean|nil, lineId:number?)  draw the graphic using lines and following the data set by SetData() or AddData() in multi chart",
        "retail": true
      }
    ],
    "SetAxesColor": [
      {
        "name": "SetAxesColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetAxesColor(red, green, blue, alpha)",
        "retail": true
      }
    ],
    "SetAxesThickness": [
      {
        "name": "SetAxesThickness",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetAxesThickness(thickness)",
        "retail": true
      }
    ],
    "SetXAxisDataType": [
      {
        "name": "SetXAxisDataType",
        "count": 5,
        "confidence": 1.0,
        "sample": "assert(type(dataType) == \"string\", \"string expected on :SetXAxisDataType(string)\")",
        "retail": true
      }
    ],
    "CreateBackdropIndicator": [
      {
        "name": "CreateBackdropIndicator",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.backdropIndicators[nextIndicator] = self:CreateBackdropIndicator(nextIndicator)",
        "retail": true
      }
    ],
    "GetBackdropIndicator": [
      {
        "name": "GetBackdropIndicator",
        "count": 1,
        "confidence": 0.2,
        "sample": "local backdropIndicator = self:GetBackdropIndicator()",
        "retail": true
      }
    ],
    "Plot": [
      {
        "name": "Plot",
        "count": 11,
        "confidence": 1.0,
        "sample": "---when Plot() is called, this function will be called to show the backdrop indicators",
        "retail": true
      }
    ],
    "GetDataSize": [
      {
        "name": "GetDataSize",
        "count": 4,
        "confidence": 0.8,
        "sample": "local dataSize = self.xAxisDataNumber or self.GetDataSize and self:GetDataSize() or 0",
        "retail": true
      }
    ],
    "CalcYAxisPointForValue": [
      {
        "name": "CalcYAxisPointForValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "currentYPoint = self:CalcYAxisPointForValue(value, plotFrameHeightScaled)",
        "retail": true
      }
    ],
    "ResetBackdropIndicators": [
      {
        "name": "ResetBackdropIndicators",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ResetBackdropIndicators()",
        "retail": true
      }
    ],
    "SetLineThickness": [
      {
        "name": "SetLineThickness",
        "count": 5,
        "confidence": 1.0,
        "sample": "assert(type(value) == \"number\", \"number expected on :SetLineThickness(number)\")",
        "retail": true
      }
    ],
    "SetLineWidth": [
      {
        "name": "SetLineWidth",
        "count": 3,
        "confidence": 0.6,
        "sample": "--self:SetLineWidth(nil) to erase the fixed value",
        "retail": true
      }
    ],
    "UpdateFrameSizeCache": [
      {
        "name": "UpdateFrameSizeCache",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UpdateFrameSizeCache()",
        "retail": true
      }
    ],
    "GetDataFirstValue": [
      {
        "name": "GetDataFirstValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "local firstValue = self:GetDataFirstValue()",
        "retail": true
      }
    ],
    "GetLineWidth": [
      {
        "name": "GetLineWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "local eachLineWidth = self:GetLineWidth()",
        "retail": true
      }
    ],
    "GetFillState": [
      {
        "name": "GetFillState",
        "count": 2,
        "confidence": 0.4,
        "sample": "local bFillChart, fillLineThickness = self:GetFillState()",
        "retail": true
      }
    ],
    "ShowBackdropIndicators": [
      {
        "name": "ShowBackdropIndicators",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:ShowBackdropIndicators()",
        "retail": true
      }
    ],
    "SetDataRaw": [
      {
        "name": "SetDataRaw",
        "count": 3,
        "confidence": 0.6,
        "sample": "chartFrame:SetDataRaw(payload.result)",
        "retail": true
      }
    ],
    "GetDataMinMaxValues": [
      {
        "name": "GetDataMinMaxValues",
        "count": 3,
        "confidence": 0.6,
        "sample": "local minValue, maxValue = chartFrame:GetDataMinMaxValues()",
        "retail": true
      }
    ],
    "SetBackgroundProcessState": [
      {
        "name": "SetBackgroundProcessState",
        "count": 4,
        "confidence": 0.8,
        "sample": "mainFrame:SetBackgroundProcessState(false)",
        "retail": true
      }
    ],
    "DataConstructor": [
      {
        "name": "DataConstructor",
        "count": 1,
        "confidence": 0.2,
        "sample": "chartFrame:DataConstructor()",
        "retail": true
      }
    ],
    "ValueConstructor": [
      {
        "name": "ValueConstructor",
        "count": 2,
        "confidence": 0.4,
        "sample": "chartFrame:ValueConstructor()",
        "retail": true
      }
    ],
    "ChartFrameConstructor": [
      {
        "name": "ChartFrameConstructor",
        "count": 1,
        "confidence": 0.2,
        "sample": "chartFrame:ChartFrameConstructor()",
        "retail": true
      }
    ],
    "AddDataChangeCallback": [
      {
        "name": "AddDataChangeCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "chartFrame:AddDataChangeCallback(onSetDataCallback)",
        "retail": true
      }
    ],
    "GetChart": [
      {
        "name": "GetChart",
        "count": 1,
        "confidence": 0.2,
        "sample": "local chartFrame = self:GetChart()",
        "retail": true
      }
    ],
    "GetCharts": [
      {
        "name": "GetCharts",
        "count": 4,
        "confidence": 0.8,
        "sample": "local charts = self:GetCharts()",
        "retail": true
      }
    ],
    "HideCharts": [
      {
        "name": "HideCharts",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:HideCharts()",
        "retail": true
      }
    ],
    "GetAmountCharts": [
      {
        "name": "GetAmountCharts",
        "count": 4,
        "confidence": 0.8,
        "sample": "for i = 1, self:GetAmountCharts() do",
        "retail": true
      }
    ],
    "HasBackgroundProcess": [
      {
        "name": "HasBackgroundProcess",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not self:HasBackgroundProcess()) then",
        "retail": true
      }
    ],
    "WaitForBackgroundProcess": [
      {
        "name": "WaitForBackgroundProcess",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:WaitForBackgroundProcess()",
        "retail": true
      }
    ],
    "SetMaxValueIfBigger": [
      {
        "name": "SetMaxValueIfBigger",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:SetMaxValueIfBigger(chartFrame:GetMaxValue())",
        "retail": true
      }
    ],
    "SetMinValueIfLower": [
      {
        "name": "SetMinValueIfLower",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:SetMinValueIfLower(chartFrame:GetMinValue())",
        "retail": true
      }
    ],
    "GetMinValue": [
      {
        "name": "GetMinValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:SetMinValueIfLower(chartFrame:GetMinValue())",
        "retail": true
      }
    ],
    "SetMaxDataSize": [
      {
        "name": "SetMaxDataSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:SetMaxDataSize(dataAmount)",
        "retail": true
      }
    ],
    "SetFillChart": [
      {
        "name": "SetFillChart",
        "count": 2,
        "confidence": 0.4,
        "sample": "chartFrame:SetFillChart(true, fillLineThickness)",
        "retail": true
      }
    ],
    "GetMaxDataSize": [
      {
        "name": "GetMaxDataSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local maxDataSize = multiChartFrame:GetMaxDataSize() --it's not clearing when a new boss is selected",
        "retail": true
      }
    ],
    "UpdateChartNamesIndicator": [
      {
        "name": "UpdateChartNamesIndicator",
        "count": 1,
        "confidence": 0.2,
        "sample": "multiChartFrame:UpdateChartNamesIndicator()",
        "retail": true
      }
    ],
    "CreateGraphicMultiLineFrame": [
      {
        "name": "CreateGraphicMultiLineFrame",
        "count": 6,
        "confidence": 1.0,
        "sample": "function detailsFramework:CreateGraphicMultiLineFrame(parent, name)",
        "retail": true
      }
    ],
    "MultiChartFrameConstructor": [
      {
        "name": "MultiChartFrameConstructor",
        "count": 1,
        "confidence": 0.2,
        "sample": "chartFrame:MultiChartFrameConstructor()",
        "retail": true
      }
    ],
    "UpdateFaux": [
      {
        "name": "UpdateFaux",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UpdateFaux(#self.data, self.LineAmount, self.LineHeight)",
        "retail": true
      }
    ],
    "GetOffsetFaux": [
      {
        "name": "GetOffsetFaux",
        "count": 1,
        "confidence": 0.2,
        "sample": "offset = self:GetOffsetFaux()",
        "retail": true
      }
    ],
    "OnVerticalScrollFaux": [
      {
        "name": "OnVerticalScrollFaux",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OnVerticalScrollFaux(offset, self.LineHeight, self.Refresh)",
        "retail": true
      }
    ],
    "OnSetData": [
      {
        "name": "OnSetData",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework:CoreDispatch((self:GetName() or \"ScrollBox\") .. \":OnSetData()\", self.OnSetData, self, self.data)",
        "retail": true
      }
    ],
    "GetNumFramesCreated": [
      {
        "name": "GetNumFramesCreated",
        "count": 1,
        "confidence": 0.2,
        "sample": "local totalFramesCreated = self:GetNumFramesCreated()",
        "retail": true
      }
    ],
    "SetNumFramesShown": [
      {
        "name": "SetNumFramesShown",
        "count": 9,
        "confidence": 1.0,
        "sample": "self:SetNumFramesShown(amountOfFramesToShow)",
        "retail": true
      }
    ],
    "GetChildFramesFaux": [
      {
        "name": "GetChildFramesFaux",
        "count": 2,
        "confidence": 0.4,
        "sample": "local scrollbar = self:GetChildFramesFaux()",
        "retail": true
      }
    ],
    "SetStepsPerPage": [
      {
        "name": "SetStepsPerPage",
        "count": 1,
        "confidence": 0.2,
        "sample": "scrollBar:SetStepsPerPage(numToDisplay-1);",
        "retail": true
      }
    ],
    "CreateMenuWithGridScrollBox": [
      {
        "name": "CreateMenuWithGridScrollBox",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateMenuWithGridScrollBox(parent, name, refreshMeFunc, refreshButtonFunc, clickFunc, onCreateButton, gridScrollBoxOptions)",
        "retail": true
      }
    ],
    "TransformAuraData": [
      {
        "name": "TransformAuraData",
        "count": 4,
        "confidence": 0.8,
        "sample": "scrollBox:TransformAuraData()",
        "retail": true
      }
    ],
    "SetScrollSpeed": [
      {
        "name": "SetScrollSpeed",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(speed) == \"number\", \"CanvasScrollBox:SetScrollSpeed(speed): speed must be a number.\")",
        "retail": true
      }
    ],
    "GetScrollSpeed": [
      {
        "name": "GetScrollSpeed",
        "count": 1,
        "confidence": 0.2,
        "sample": "local scrollStep = self:GetScrollSpeed()",
        "retail": true
      }
    ],
    "GetLanguageTable": [
      {
        "name": "GetLanguageTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "GetLanguageTable(addonId[, languageId])",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.GetLanguageTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "local languageTable = DetailsFramework.Language.GetLanguageTable(\"Details\")",
        "retail": true
      },
      {
        "name": "DF.Language.GetLanguageTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "set the language used by default when retriving a languageTable with DF.Language.GetLanguageTable() and not passing the second argument (languageId) within the call",
        "retail": true
      }
    ],
    "SetCurrentLanguage": [
      {
        "name": "DetailsFramework.Language.SetCurrentLanguage",
        "count": 3,
        "confidence": 0.6,
        "sample": "the default languageId can also be changed by calling DetailsFramework.Language.SetCurrentLanguage() as seen below",
        "retail": true
      },
      {
        "name": "SetCurrentLanguage",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetCurrentLanguage(addonId, languageId)",
        "retail": true
      },
      {
        "name": "DF.Language.SetCurrentLanguage",
        "count": 3,
        "confidence": 0.6,
        "sample": "--this can be changed later with DF.Language.SetCurrentLanguage(addonId, languageId)",
        "retail": true
      }
    ],
    "ShowOptionsHelp": [
      {
        "name": "ShowOptionsHelp",
        "count": 1,
        "confidence": 0.2,
        "sample": "ShowOptionsHelp()",
        "retail": true
      },
      {
        "name": "DF.Language.ShowOptionsHelp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.ShowOptionsHelp()",
        "retail": true
      }
    ],
    "CreateLanguageSelector": [
      {
        "name": "CreateLanguageSelector",
        "count": 2,
        "confidence": 0.4,
        "sample": "CreateLanguageSelector(addonId, parent, callback, selectedLanguage)",
        "retail": true
      },
      {
        "name": "DF.Language.CreateLanguageSelector",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.CreateLanguageSelector(addonId, parent, callback, selectedLanguage)",
        "retail": true
      }
    ],
    "SetFontForLanguageId": [
      {
        "name": "SetFontForLanguageId",
        "count": 3,
        "confidence": 0.6,
        "sample": "SetFontForLanguageId(addonId, languageId, fontPath)",
        "retail": true
      },
      {
        "name": "DF.Language.SetFontForLanguageId",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.SetFontForLanguageId(addonId, languageId, fontPath)",
        "retail": true
      }
    ],
    "SetFontByAlphabetOrRegion": [
      {
        "name": "SetFontByAlphabetOrRegion",
        "count": 3,
        "confidence": 0.6,
        "sample": "SetFontByAlphabetOrRegion(addonId, latin_FontPath, cyrillic_FontPath, china_FontPath, korean_FontPath, taiwan_FontPath)",
        "retail": true
      },
      {
        "name": "DF.Language.SetFontByAlphabetOrRegion",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.SetFontByAlphabetOrRegion(addonId, latin, cyrillic, china, korean, taiwan)",
        "retail": true
      }
    ],
    "RegisterObject": [
      {
        "name": "RegisterObject",
        "count": 3,
        "confidence": 0.6,
        "sample": "RegisterObject(addonId, object, phraseId[, silent[, ...]])",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.RegisterObject",
        "count": 3,
        "confidence": 0.6,
        "sample": "the Object need to be already registered with DetailsFramework.Language.RegisterObject()",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterObject",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Language.RegisterObject(addonId, object, phraseId, silent, ...)",
        "retail": true
      }
    ],
    "UpdateObjectArguments": [
      {
        "name": "UpdateObjectArguments",
        "count": 3,
        "confidence": 0.6,
        "sample": "UpdateObjectArguments(addonId, object, ...)",
        "retail": true
      },
      {
        "name": "DF.Language.UpdateObjectArguments",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.UpdateObjectArguments(addonId, object, ...)",
        "retail": true
      }
    ],
    "RegisterTableKey": [
      {
        "name": "RegisterTableKey",
        "count": 3,
        "confidence": 0.6,
        "sample": "RegisterTableKey(addonId, table, key, phraseId[, silent[, ...]])",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterTableKey",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Language.RegisterTableKey(addonId, table, key, phraseId, silent, ...) --~RegisterTableKey",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.RegisterTableKey",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsFramework.Language.RegisterTableKey(addonId, table, key, phraseId, ...)",
        "retail": true
      }
    ],
    "UpdateTableKeyArguments": [
      {
        "name": "UpdateTableKeyArguments",
        "count": 2,
        "confidence": 0.4,
        "sample": "UpdateTableKeyArguments(addonId, table, key, ...)",
        "retail": true
      },
      {
        "name": "DF.Language.UpdateTableKeyArguments",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.UpdateTableKeyArguments(addonId, table, key, ...)",
        "retail": true
      }
    ],
    "RegisterObjectWithDefault": [
      {
        "name": "RegisterObjectWithDefault",
        "count": 2,
        "confidence": 0.4,
        "sample": "RegisterObjectWithDefault(addonId, object, phraseId, defaultText[, ...])",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterObjectWithDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.RegisterObjectWithDefault(addonId, object, phraseId, defaultText, ...)",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.RegisterObjectWithDefault",
        "count": 8,
        "confidence": 1.0,
        "sample": "DetailsFramework.Language.RegisterObjectWithDefault(languageAddonId, label.widget, namePhraseId, formatOptionNameWithColon(widgetTable.name, useColon))",
        "retail": true
      }
    ],
    "RegisterTableKeyWithDefault": [
      {
        "name": "RegisterTableKeyWithDefault",
        "count": 2,
        "confidence": 0.4,
        "sample": "RegisterTableKeyWithDefault(addonId, table, key, phraseId, defaultText[, ...])",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterTableKeyWithDefault",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.RegisterTableKeyWithDefault(addonId, table, key, phraseId, defaultText, ...) --~RegisterTableKeyWithDefault",
        "retail": true
      },
      {
        "name": "DetailsFramework.Language.RegisterTableKeyWithDefault",
        "count": 6,
        "confidence": 1.0,
        "sample": "DetailsFramework.Language.RegisterTableKeyWithDefault(languageAddonId, dropdown, \"have_tooltip\", descPhraseId, widgetTable.desc)",
        "retail": true
      }
    ],
    "CreateLocTable": [
      {
        "name": "CreateLocTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "CreateLocTable(addonId, phraseId[, shouldRegister = true[, ...]])",
        "retail": true
      },
      {
        "name": "DF.Language.CreateLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.CreateLocTable(addonId, phraseId, shouldRegister, silent, ...)",
        "retail": true
      }
    ],
    "SetTextWithLocTable": [
      {
        "name": "SetTextWithLocTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "SetTextWithLocTable(object, locTable)",
        "retail": true
      },
      {
        "name": "DF.Language.SetTextWithLocTable",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DF.Language.SetTextWithLocTable(object, locTable)",
        "retail": true
      },
      {
        "name": "Language.SetTextWithLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.SetTextWithLocTable(labelObject.widget, locTable)",
        "retail": true
      }
    ],
    "RegisterObjectWithLocTable": [
      {
        "name": "RegisterObjectWithLocTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "RegisterObjectWithLocTable(object, locTable[, silence])",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterObjectWithLocTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Language.RegisterObjectWithLocTable(object, locTable, silence)",
        "retail": true
      },
      {
        "name": "Language.RegisterObjectWithLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.Language.RegisterObjectWithLocTable(object.widget or object, locTable)",
        "retail": true
      }
    ],
    "RegisterLanguage": [
      {
        "name": "DetailsFramework.Language.RegisterLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "--new non-native game languages registered with DetailsFramework.Language.RegisterLanguage() will be added to this table",
        "retail": true
      },
      {
        "name": "RegisterLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"RegisterLanguage\"] = \"RegisterLanguage(addonID, languageID[, gameLanguageOnly])\",",
        "retail": true
      },
      {
        "name": "DF.Language.RegisterLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.RegisterLanguage(addonId, languageId, bNotSupportedWoWLanguage, languageName, languageFont)  --~RegisterLanguage",
        "retail": true
      }
    ],
    "English": [
      {
        "name": "English",
        "count": 1,
        "confidence": 0.2,
        "sample": "enUS = {text = \"English (US)\", font = \"Fonts\\\\FRIZQT__.TTF\"},",
        "retail": true
      }
    ],
    "UnpackLocTable": [
      {
        "name": "UnpackLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"UnpackLocTable\"] = \"UnpackLocTable(locTable)\",",
        "retail": true
      },
      {
        "name": "DF.Language.UnpackLocTable",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DF.Language.UnpackLocTable(locTable)",
        "retail": true
      }
    ],
    "CanRegisterLocTable": [
      {
        "name": "CanRegisterLocTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "[\"CanRegisterLocTable\"] = \"CanRegisterLocTable(locTable)\",",
        "retail": true
      },
      {
        "name": "DF.Language.CanRegisterLocTable",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF.Language.CanRegisterLocTable(locTable)",
        "retail": true
      }
    ],
    "DoesPhraseIDExistsInDefaultLanguage": [
      {
        "name": "DF.Language.DoesPhraseIDExistsInDefaultLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF.Language.DoesPhraseIDExistsInDefaultLanguage(addonId, key)  --~DoesPhraseIDExistsInDefaultLanguage",
        "retail": true
      },
      {
        "name": "DoesPhraseIDExistsInDefaultLanguage",
        "count": 1,
        "confidence": 0.2,
        "sample": "error(\"DoesPhraseIDExistsInDefaultLanguage() param #1 'addonId' must be a string or a table, got: \" .. type(addonId) .. \".\")",
        "retail": true
      },
      {
        "name": "Language.DoesPhraseIDExistsInDefaultLanguage",
        "count": 3,
        "confidence": 0.6,
        "sample": "local hasValue = detailsFramework.Language.DoesPhraseIDExistsInDefaultLanguage(languageAddonId, embedPhraseId or keyName)",
        "retail": true
      }
    ],
    "SetAddonID": [
      {
        "name": "SetAddonID",
        "count": 1,
        "confidence": 0.2,
        "sample": "languageSelector:SetAddonID(addonId)",
        "retail": true
      }
    ],
    "GetMousePosition": [
      {
        "name": "GetMousePosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "---@field GetCursorPosition fun(self:table) : number, number return the mouse position scaled by UIScale, use :SetPoint(\"bottomleft\", UIParent, \"bottomleft\", DetailsFramework:GetMousePosition()) to anchor a frame to where the mouse is",
        "retail": true
      }
    ],
    "CreateErrorLabel": [
      {
        "name": "CreateErrorLabel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateErrorLabel(parent, text, size, color, layer, name)",
        "retail": true
      }
    ],
    "AddHelp": [
      {
        "name": "AddHelp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function HelpMetaFunctions:AddHelp (width, height, x, y, buttonX, buttonY, text, anchor)",
        "retail": true
      }
    ],
    "ShowHelp": [
      {
        "name": "ShowHelp",
        "count": 2,
        "confidence": 0.4,
        "sample": "function HelpMetaFunctions:ShowHelp()",
        "retail": true
      }
    ],
    "HelpPlate_IsShowing": [
      {
        "name": "HelpPlate_IsShowing",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not HelpPlate_IsShowing (self.helpTable)) then",
        "retail": true
      }
    ],
    "HelpPlate_Show": [
      {
        "name": "HelpPlate_Show",
        "count": 1,
        "confidence": 0.2,
        "sample": "HelpPlate_Show (self.helpTable, self.frame, self.button, true)",
        "retail": true
      }
    ],
    "HelpPlate_Hide": [
      {
        "name": "HelpPlate_Hide",
        "count": 1,
        "confidence": 0.2,
        "sample": "HelpPlate_Hide (true)",
        "retail": true
      }
    ],
    "NewHelp": [
      {
        "name": "NewHelp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:NewHelp (parent, width, height, x, y, buttonWidth, buttonHeight, name)",
        "retail": true
      }
    ],
    "CreateCoolTip": [
      {
        "name": "CreateCoolTip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateCoolTip()",
        "retail": true
      }
    ],
    "PrintDebug": [
      {
        "name": "PrintDebug",
        "count": 23,
        "confidence": 1.0,
        "sample": "function gameCooltip:PrintDebug(...)",
        "retail": true
      }
    ],
    "SetDebug": [
      {
        "name": "SetDebug",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:SetDebug(bDebugState)",
        "retail": true
      }
    ],
    "ParseMenuType": [
      {
        "name": "ParseMenuType",
        "count": 12,
        "confidence": 1.0,
        "sample": "function gameCooltip:ParseMenuType(menuType)",
        "retail": true
      }
    ],
    "HideRoundedCorner": [
      {
        "name": "HideRoundedCorner",
        "count": 2,
        "confidence": 0.4,
        "sample": "function GameCooltip:HideRoundedCorner()",
        "retail": true
      }
    ],
    "SetTitleAnchor": [
      {
        "name": "SetTitleAnchor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:SetTitleAnchor(frameId, anchorPoint, ...)",
        "retail": true
      }
    ],
    "GameCooltipButtonMouseDown": [
      {
        "name": "GameCooltipButtonMouseDown",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GameCooltipButtonMouseDown(button)",
        "retail": true
      }
    ],
    "GameCooltipButtonMouseUp": [
      {
        "name": "GameCooltipButtonMouseUp",
        "count": 1,
        "confidence": 0.2,
        "sample": "function GameCooltipButtonMouseUp(button)",
        "retail": true
      }
    ],
    "CreateMainFrameButton": [
      {
        "name": "CreateMainFrameButton",
        "count": 3,
        "confidence": 0.6,
        "sample": "function gameCooltip:CreateMainFrameButton(i)",
        "retail": true
      }
    ],
    "CreateButtonOnSecondFrame": [
      {
        "name": "CreateButtonOnSecondFrame",
        "count": 3,
        "confidence": 0.6,
        "sample": "function gameCooltip:CreateButtonOnSecondFrame(i)",
        "retail": true
      }
    ],
    "HideSelectedTexture": [
      {
        "name": "HideSelectedTexture",
        "count": 7,
        "confidence": 1.0,
        "sample": "function gameCooltip:HideSelectedTexture(frame)",
        "retail": true
      }
    ],
    "ShowSelectedTexture": [
      {
        "name": "ShowSelectedTexture",
        "count": 6,
        "confidence": 1.0,
        "sample": "function gameCooltip:ShowSelectedTexture(frame)",
        "retail": true
      }
    ],
    "SetSelectedAnchor": [
      {
        "name": "SetSelectedAnchor",
        "count": 8,
        "confidence": 1.0,
        "sample": "function gameCooltip:SetSelectedAnchor(frame, button)",
        "retail": true
      }
    ],
    "TextAndIcon": [
      {
        "name": "TextAndIcon",
        "count": 5,
        "confidence": 1.0,
        "sample": "function gameCooltip:TextAndIcon(index, frame, menuButton, leftTextSettings, rightTextSettings, leftIconSettings, rightIconSettings, isSecondFrame)",
        "retail": true
      }
    ],
    "LeftTextSpace": [
      {
        "name": "LeftTextSpace",
        "count": 2,
        "confidence": 0.4,
        "sample": "gameCooltip:LeftTextSpace(menuButton)",
        "retail": true
      }
    ],
    "RefreshSpark": [
      {
        "name": "RefreshSpark",
        "count": 3,
        "confidence": 0.6,
        "sample": "function gameCooltip:RefreshSpark(menuButton)",
        "retail": true
      }
    ],
    "StatusBar": [
      {
        "name": "StatusBar",
        "count": 5,
        "confidence": 1.0,
        "sample": "function gameCooltip:StatusBar(menuButton, statusBarSettings)",
        "retail": true
      }
    ],
    "SetupMainButton": [
      {
        "name": "SetupMainButton",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:SetupMainButton(menuButton, index)",
        "retail": true
      }
    ],
    "SetupButtonOnSecondFrame": [
      {
        "name": "SetupButtonOnSecondFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:SetupButtonOnSecondFrame(menuButton, index, mainMenuIndex)",
        "retail": true
      }
    ],
    "SetupWallpaper": [
      {
        "name": "SetupWallpaper",
        "count": 5,
        "confidence": 1.0,
        "sample": "function gameCooltip:SetupWallpaper(wallpaperTable, wallpaper)",
        "retail": true
      }
    ],
    "CreateDivBar": [
      {
        "name": "CreateDivBar",
        "count": 3,
        "confidence": 0.6,
        "sample": "gameCooltip:CreateDivBar(menuButton)",
        "retail": true
      }
    ],
    "CheckOverlap": [
      {
        "name": "CheckOverlap",
        "count": 2,
        "confidence": 0.4,
        "sample": "gameCooltip:CheckOverlap()",
        "retail": true
      }
    ],
    "HideSub": [
      {
        "name": "HideSub",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:HideSub()",
        "retail": true
      }
    ],
    "BuildTooltipSecondFrame": [
      {
        "name": "BuildTooltipSecondFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:BuildTooltipSecondFrame()",
        "retail": true
      }
    ],
    "IsSpellPassive": [
      {
        "name": "C_Spell.IsSpellPassive",
        "count": 1,
        "confidence": 0.2,
        "sample": "local bIsPassive = C_Spell.IsSpellPassive(spellId, SPELLBOOK_BANK_PLAYER)",
        "retail": true
      }
    ],
    "GetSpellPowerCost": [
      {
        "name": "C_Spell.GetSpellPowerCost",
        "count": 1,
        "confidence": 0.2,
        "sample": "local tResourceCost = C_Spell.GetSpellPowerCost(spellId)",
        "retail": true
      }
    ],
    "BuildTooltip": [
      {
        "name": "BuildTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:BuildTooltip() --~refresh",
        "retail": true
      }
    ],
    "SetMyPoint": [
      {
        "name": "SetMyPoint",
        "count": 9,
        "confidence": 1.0,
        "sample": "gameCooltip:SetMyPoint()",
        "retail": true
      }
    ],
    "BuildCooltip": [
      {
        "name": "BuildCooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:BuildCooltip(host)",
        "retail": true
      }
    ],
    "ClearAllOptions": [
      {
        "name": "ClearAllOptions",
        "count": 3,
        "confidence": 0.6,
        "sample": "function gameCooltip:ClearAllOptions()",
        "retail": true
      }
    ],
    "SetNpcModel": [
      {
        "name": "SetNpcModel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:SetNpcModel(menuType, npcId)",
        "retail": true
      }
    ],
    "IsTexture": [
      {
        "name": "IsTexture",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (not detailsFramework:IsTexture(iconTexture, bCheckTextureObject)) then",
        "retail": true
      }
    ],
    "AddPopUpFrame": [
      {
        "name": "AddPopUpFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:AddPopUpFrame(onShowFunc, onHideFunc, param1, param2)",
        "retail": true
      }
    ],
    "AddSpecial": [
      {
        "name": "AddSpecial",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:AddSpecial(widgetType, index, subIndex, ...)",
        "retail": true
      }
    ],
    "OnLeaveFunc": [
      {
        "name": "CoolTip.OnLeaveFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.CoolTip.OnLeaveFunc(self)",
        "retail": true
      }
    ],
    "OldOnLeaveScript": [
      {
        "name": "OldOnLeaveScript",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OldOnLeaveScript()",
        "retail": true
      }
    ],
    "OnEnterFunc": [
      {
        "name": "CoolTip.OnEnterFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.CoolTip.OnEnterFunc(self)",
        "retail": true
      }
    ],
    "OldOnEnterScript": [
      {
        "name": "OldOnEnterScript",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:OldOnEnterScript()",
        "retail": true
      }
    ],
    "QuickTooltip": [
      {
        "name": "QuickTooltip",
        "count": 2,
        "confidence": 0.4,
        "sample": "function gameCooltip:QuickTooltip(host, ...)",
        "retail": true
      }
    ],
    "InjectQuickTooltip": [
      {
        "name": "InjectQuickTooltip",
        "count": 1,
        "confidence": 0.2,
        "sample": "function gameCooltip:InjectQuickTooltip(host, ...)",
        "retail": true
      }
    ],
    "SetRoundness": [
      {
        "name": "SetRoundness",
        "count": 12,
        "confidence": 1.0,
        "sample": "titleBar:SetRoundness(5)",
        "retail": true
      }
    ],
    "CalculateBorderEdgeSize": [
      {
        "name": "CalculateBorderEdgeSize",
        "count": 13,
        "confidence": 1.0,
        "sample": "local horizontalEdgesNewSize = self:CalculateBorderEdgeSize(\"horizontal\")",
        "retail": true
      }
    ],
    "RoundedCornerConstructor": [
      {
        "name": "RoundedCornerConstructor",
        "count": 4,
        "confidence": 0.8,
        "sample": "newRoundedPanel:RoundedCornerConstructor()",
        "retail": true
      }
    ],
    "LineIndicatorGetTarget": [
      {
        "name": "LineIndicatorGetTarget",
        "count": 3,
        "confidence": 0.6,
        "sample": "local targetFrame = self:LineIndicatorGetTarget()",
        "retail": true
      }
    ],
    "GetHorizontalScrolledWidth": [
      {
        "name": "GetHorizontalScrolledWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "horizontalScrolled = self:GetHorizontalScrolledWidth() or 0",
        "retail": true
      }
    ],
    "LineIndicatorRefresh": [
      {
        "name": "LineIndicatorRefresh",
        "count": 11,
        "confidence": 1.0,
        "sample": "self:LineIndicatorRefresh()",
        "retail": true
      }
    ],
    "LineIndicatorGetLine": [
      {
        "name": "LineIndicatorGetLine",
        "count": 2,
        "confidence": 0.4,
        "sample": "assert(self.lineIndicators, \"LineIndicatorGetLine(): LineIndicatorConstructor() not called.\")",
        "retail": true
      }
    ],
    "LineIndicatorConstructor": [
      {
        "name": "LineIndicatorConstructor",
        "count": 2,
        "confidence": 0.4,
        "sample": "assert(self.lineIndicators, \"LineIndicatorGetLine(): LineIndicatorConstructor() not called.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetElapsedTime": [
      {
        "name": "LineIndicatorSetElapsedTime",
        "count": 2,
        "confidence": 0.4,
        "sample": "assert(self.lineIndicatorTotalTime > 0, \"LineIndicatorSetElapsedTime(self, totalTime) must be called before SetLineIndicatorPosition() with valueType TIME.\")",
        "retail": true
      }
    ],
    "SetLineIndicatorPosition": [
      {
        "name": "SetLineIndicatorPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(self.lineIndicatorTotalTime > 0, \"LineIndicatorSetElapsedTime(self, totalTime) must be called before SetLineIndicatorPosition() with valueType TIME.\")",
        "retail": true
      }
    ],
    "LineIndicatorAddLine": [
      {
        "name": "LineIndicatorAddLine",
        "count": 1,
        "confidence": 0.2,
        "sample": "local line = self:LineIndicatorAddLine(data.value, data.valueType)",
        "retail": true
      }
    ],
    "SetLineIndicatorValueType": [
      {
        "name": "SetLineIndicatorValueType",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(valueType == \"PERCENT\" or valueType == \"TIME\" or valueType == \"PIXELS\", \"SetLineIndicatorValueType(valueType): valueType must be PERCENT, TIME or PIXELS.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetLinePosition": [
      {
        "name": "LineIndicatorSetLinePosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:LineIndicatorSetLinePosition(line, value, valueType or self.lineIndicatorValueType)",
        "retail": true
      }
    ],
    "LineIndicatorRemoveData": [
      {
        "name": "LineIndicatorRemoveData",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(dataId) == \"number\" or type(dataId) == \"table\", \"LineIndicatorRemoveData(dataId): dataId must be the data index or a data table.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetAllLinesHeight": [
      {
        "name": "LineIndicatorSetAllLinesHeight",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(height) == \"number\", \"LineIndicatorSetAllLinesHeight(height): height must be a number.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetAllLinesWidth": [
      {
        "name": "LineIndicatorSetAllLinesWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(width) == \"number\", \"LineIndicatorSetAllLinesWidth(width): width must be a number.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetLineWidth": [
      {
        "name": "LineIndicatorSetLineWidth",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(dataId) == \"number\" or type(dataId) == \"table\", \"LineIndicatorSetLineWidth(dataId): dataId must be the data index or a data table.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetLineColor": [
      {
        "name": "LineIndicatorSetLineColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(dataId) == \"number\" or type(dataId) == \"table\", \"LineIndicatorSetLineColor(dataId): dataId must be the data index or a data table.\")",
        "retail": true
      }
    ],
    "LineIndicatorSetLineAlpha": [
      {
        "name": "LineIndicatorSetLineAlpha",
        "count": 1,
        "confidence": 0.2,
        "sample": "assert(type(dataId) == \"number\" or type(dataId) == \"table\", \"LineIndicatorSetLineAlpha(dataId): dataId must be the data index or a data table.\")",
        "retail": true
      }
    ],
    "GetDesaturated": [
      {
        "name": "GetDesaturated",
        "count": 1,
        "confidence": 0.2,
        "sample": "return object.image:GetDesaturated()",
        "retail": true
      }
    ],
    "SetGradient": [
      {
        "name": "SetGradient",
        "count": 4,
        "confidence": 0.8,
        "sample": "object.image:SetGradient(value.gradient, fromColor, toColor)",
        "retail": true
      }
    ],
    "TableIsAtlas": [
      {
        "name": "TableIsAtlas",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:TableIsAtlas(atlasTale)",
        "retail": true
      }
    ],
    "G_CreateFrame": [
      {
        "name": "G_CreateFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "local frame = G_CreateFrame(frameType , name, parent, template, id)",
        "retail": true
      }
    ],
    "FormatCooldownTimeDecimal": [
      {
        "name": "FormatCooldownTimeDecimal",
        "count": 2,
        "confidence": 0.4,
        "sample": "local formattedTime = (iconFrame.timeRemaining > 0) and (self.options.decimal_timer and iconFrame.parentIconRow.FormatCooldownTimeDecimal(iconFrame.timeRemaining) or iconFrame.parentIconRow.FormatCooldownTime(iconFrame.timeRemaining)) or \"\"",
        "retail": true
      }
    ],
    "CreateIconRow": [
      {
        "name": "CreateIconRow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateIconRow(parent, name, options)",
        "retail": true
      }
    ],
    "SetIconSize": [
      {
        "name": "SetIconSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TimeBarMetaFunctions:SetIconSize(width, height)",
        "retail": true
      }
    ],
    "SetThrottle": [
      {
        "name": "SetThrottle",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TimeBarMetaFunctions:SetThrottle(seconds)",
        "retail": true
      }
    ],
    "SetDirection": [
      {
        "name": "SetDirection",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TimeBarMetaFunctions:SetDirection(direction)",
        "retail": true
      }
    ],
    "HasTimer": [
      {
        "name": "HasTimer",
        "count": 1,
        "confidence": 0.2,
        "sample": "function TimeBarMetaFunctions:HasTimer()",
        "retail": true
      }
    ],
    "StopTimer": [
      {
        "name": "StopTimer",
        "count": 3,
        "confidence": 0.6,
        "sample": "function TimeBarMetaFunctions:StopTimer()",
        "retail": true
      }
    ],
    "ShowTimer": [
      {
        "name": "ShowTimer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TimeBarMetaFunctions:ShowTimer(bShowTimer)",
        "retail": true
      }
    ],
    "ShowSpark": [
      {
        "name": "ShowSpark",
        "count": 2,
        "confidence": 0.4,
        "sample": "function TimeBarMetaFunctions:ShowSpark(state, alpha, color)",
        "retail": true
      }
    ],
    "SetTitleBarColor": [
      {
        "name": "SetTitleBarColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "frame:SetTitleBarColor(.2, .2, .2, .5)",
        "retail": true
      }
    ],
    "SetValueOriginal": [
      {
        "name": "SetValueOriginal",
        "count": 1,
        "confidence": 0.2,
        "sample": "thisWidget.SetValueOriginal(thisWidget, value)",
        "retail": true
      }
    ],
    "GetScrollChild": [
      {
        "name": "GetScrollChild",
        "count": 1,
        "confidence": 0.2,
        "sample": "parent = parent:GetScrollChild()",
        "retail": true
      }
    ],
    "ClearOptionsPanel": [
      {
        "name": "ClearOptionsPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:ClearOptionsPanel(frame)",
        "retail": true
      }
    ],
    "SetAsOptionsPanel": [
      {
        "name": "SetAsOptionsPanel",
        "count": 3,
        "confidence": 0.6,
        "sample": "function detailsFramework:SetAsOptionsPanel(frame)",
        "retail": true
      }
    ],
    "ClearHooks": [
      {
        "name": "ClearHooks",
        "count": 6,
        "confidence": 1.0,
        "sample": "widgetObject:ClearHooks()",
        "retail": true
      }
    ],
    "RefreshUnsafeOptionsWidgets": [
      {
        "name": "RefreshUnsafeOptionsWidgets",
        "count": 6,
        "confidence": 1.0,
        "sample": "detailsFramework.RefreshUnsafeOptionsWidgets()",
        "retail": true
      }
    ],
    "BuildMenu22": [
      {
        "name": "BuildMenu22",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework:BuildMenu22(parent, menuOptions, xOffset, yOffset, height, useColon, textTemplate, dropdownTemplate, switchTemplate, switchIsCheckbox, sliderTemplate, buttonTemplate, valueChangeHook)",
        "retail": true
      }
    ],
    "CreateInCombatTexture": [
      {
        "name": "CreateInCombatTexture",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateInCombatTexture(frame)",
        "retail": true
      }
    ],
    "GetBlockUnderMouse": [
      {
        "name": "GetBlockUnderMouse",
        "count": 1,
        "confidence": 0.2,
        "sample": "local blockUnderMouse = timeline:GetBlockUnderMouse()",
        "retail": true
      }
    ],
    "SetPropagateMouseClicks": [
      {
        "name": "SetPropagateMouseClicks",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:SetPropagateMouseClicks(true)",
        "retail": true
      }
    ],
    "CreateBlock": [
      {
        "name": "CreateBlock",
        "count": 1,
        "confidence": 0.2,
        "sample": "block = self:CreateBlock(index)",
        "retail": true
      }
    ],
    "CreateBlockLength": [
      {
        "name": "TimeLine_LineMixin.CreateBlockLength",
        "count": 1,
        "confidence": 0.2,
        "sample": "detailsFramework.TimeLine_LineMixin.CreateBlockLength(block)",
        "retail": true
      }
    ],
    "UpdateOnClickCallback": [
      {
        "name": "UpdateOnClickCallback",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateOnClickCallback()",
        "retail": true
      }
    ],
    "RefreshTimeLine": [
      {
        "name": "RefreshTimeLine",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:RefreshTimeLine()",
        "retail": true
      }
    ],
    "RefreshResize": [
      {
        "name": "RefreshResize",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:RefreshResize()",
        "retail": true
      }
    ],
    "GetAllBlocks": [
      {
        "name": "GetAllBlocks",
        "count": 3,
        "confidence": 0.6,
        "sample": "local allBlocksInTheLine = thisLine:GetAllBlocks()",
        "retail": true
      }
    ],
    "GetBodyWidthUnderMouse": [
      {
        "name": "GetBodyWidthUnderMouse",
        "count": 1,
        "confidence": 0.2,
        "sample": "local bodyWidthUnderMouse = self:GetBodyWidthUnderMouse()",
        "retail": true
      }
    ],
    "GetTimeUnderMouse": [
      {
        "name": "GetTimeUnderMouse",
        "count": 3,
        "confidence": 0.6,
        "sample": "time = self:GetTimeUnderMouse()",
        "retail": true
      }
    ],
    "GetEffectivePixelPerSecond": [
      {
        "name": "GetEffectivePixelPerSecond",
        "count": 1,
        "confidence": 0.2,
        "sample": "local pixelsPerSecond = self:GetEffectivePixelPerSecond()",
        "retail": true
      }
    ],
    "RefreshPerPixelButtons": [
      {
        "name": "RefreshPerPixelButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:RefreshPerPixelButtons()",
        "retail": true
      }
    ],
    "ResetAllLines": [
      {
        "name": "ResetAllLines",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:ResetAllLines()",
        "retail": true
      }
    ],
    "SetBlocksFromData": [
      {
        "name": "SetBlocksFromData",
        "count": 1,
        "confidence": 0.2,
        "sample": "line:SetBlocksFromData() --the function to update runs within the line object",
        "retail": true
      }
    ],
    "LineIndicatorSetXOffset": [
      {
        "name": "LineIndicatorSetXOffset",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:LineIndicatorSetXOffset(effectiveHeaderWidth)",
        "retail": true
      }
    ],
    "LineIndicatorSetValueType": [
      {
        "name": "LineIndicatorSetValueType",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:LineIndicatorSetValueType(\"TIME\")",
        "retail": true
      }
    ],
    "LineIndicatorSetScale": [
      {
        "name": "LineIndicatorSetScale",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:LineIndicatorSetScale(self.currentScale)",
        "retail": true
      }
    ],
    "LineIndicatorSetPixelsPerSecond": [
      {
        "name": "LineIndicatorSetPixelsPerSecond",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:LineIndicatorSetPixelsPerSecond(self.options.pixels_per_second)",
        "retail": true
      }
    ],
    "CreateTimeLineFrame": [
      {
        "name": "CreateTimeLineFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateTimeLineFrame(parent, name, timelineOptions, elapsedtimeOptions)",
        "retail": true
      }
    ],
    "LineIndicatorSetTarget": [
      {
        "name": "LineIndicatorSetTarget",
        "count": 1,
        "confidence": 0.2,
        "sample": "frameCanvas:LineIndicatorSetTarget(frameBody)",
        "retail": true
      }
    ],
    "CreateElapsedTimeFrame": [
      {
        "name": "CreateElapsedTimeFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "frameCanvas.elapsedTimeFrame = detailsFramework:CreateElapsedTimeFrame(frameBody, frameCanvas:GetName() and (frameCanvas:GetName() .. \"ElapsedTimeFrame\"), elapsedtimeOptions)",
        "retail": true
      }
    ],
    "SetHorizontalScroll": [
      {
        "name": "SetHorizontalScroll",
        "count": 1,
        "confidence": 0.2,
        "sample": "frameCanvas:SetHorizontalScroll(stepValue)",
        "retail": true
      }
    ],
    "CreateDetachedHeader": [
      {
        "name": "CreateDetachedHeader",
        "count": 1,
        "confidence": 0.2,
        "sample": "headerFrame, headerBody = timelineHeader.CreateDetachedHeader(frameCanvas)",
        "retail": true
      }
    ],
    "OnInit": [
      {
        "name": "OnInit",
        "count": 1,
        "confidence": 0.2,
        "sample": "function myNewAddonObject.OnInit(self, profile) --fired from detailsFramework at PLAYER_LOGIN",
        "retail": true
      }
    ],
    "GetPixelToUIUnitFactor": [
      {
        "name": "DFPixelUtil.GetPixelToUIUnitFactor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DFPixelUtil.GetPixelToUIUnitFactor()",
        "retail": true
      }
    ],
    "GetPhysicalScreenSize": [
      {
        "name": "GetPhysicalScreenSize",
        "count": 1,
        "confidence": 0.2,
        "sample": "local physicalWidth, physicalHeight = GetPhysicalScreenSize();",
        "retail": true
      }
    ],
    "GetNearestPixelSize": [
      {
        "name": "DFPixelUtil.GetNearestPixelSize",
        "count": 6,
        "confidence": 1.0,
        "sample": "function DFPixelUtil.GetNearestPixelSize(uiUnitSize, layoutScale, minPixels)",
        "retail": true
      }
    ],
    "SetStatusBarValue": [
      {
        "name": "DFPixelUtil.SetStatusBarValue",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DFPixelUtil.SetStatusBarValue(statusBar, value)",
        "retail": true
      },
      {
        "name": "PixelUtil.SetStatusBarValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "PixelUtil.SetStatusBarValue(self, health)",
        "retail": true
      }
    ],
    "GetLabel": [
      {
        "name": "GetLabel",
        "count": 1,
        "confidence": 0.2,
        "sample": "local label = self:GetLabel(i)",
        "retail": true
      }
    ],
    "CreateHealthBar": [
      {
        "name": "CreateHealthBar",
        "count": 3,
        "confidence": 0.6,
        "sample": "DF:CreateHealthBar (parent, name, settingsOverride)",
        "retail": true
      }
    ],
    "OnHealthMaxChange": [
      {
        "name": "OnHealthMaxChange",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.OnHealthMaxChange(self, self.displayedUnit)",
        "retail": true
      }
    ],
    "OnHealthChange": [
      {
        "name": "OnHealthChange",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.OnHealthChange(self, self.displayedUnit)",
        "retail": true
      }
    ],
    "UnitGetIncomingHeals": [
      {
        "name": "UnitGetIncomingHeals",
        "count": 1,
        "confidence": 0.2,
        "sample": "local unitHealIncoming = UnitGetIncomingHeals and self.displayedUnit and UnitGetIncomingHeals(self.displayedUnit) or 0",
        "retail": true
      }
    ],
    "UnitGetTotalHealAbsorbs": [
      {
        "name": "UnitGetTotalHealAbsorbs",
        "count": 1,
        "confidence": 0.2,
        "sample": "local unitHealAbsorb = UnitGetTotalHealAbsorbs and self.displayedUnit and UnitGetTotalHealAbsorbs(self.displayedUnit) or 0",
        "retail": true
      }
    ],
    "UnitGetTotalAbsorbs": [
      {
        "name": "UnitGetTotalAbsorbs",
        "count": 1,
        "confidence": 0.2,
        "sample": "local unitDamageAbsorb = self.displayedUnit and UnitGetTotalAbsorbs (self.displayedUnit) or 0",
        "retail": true
      }
    ],
    "UpdateMaxHealth": [
      {
        "name": "UpdateMaxHealth",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:UpdateMaxHealth()",
        "retail": true
      }
    ],
    "UpdateHealth": [
      {
        "name": "UpdateHealth",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:UpdateHealth()",
        "retail": true
      }
    ],
    "UpdateHealPrediction": [
      {
        "name": "UpdateHealPrediction",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:UpdateHealPrediction()",
        "retail": true
      }
    ],
    "CreatePowerBar": [
      {
        "name": "CreatePowerBar",
        "count": 3,
        "confidence": 0.6,
        "sample": "DF:CreatePowerBar (parent, name, settingsOverride)",
        "retail": true
      }
    ],
    "UpdatePowerBar": [
      {
        "name": "UpdatePowerBar",
        "count": 5,
        "confidence": 1.0,
        "sample": "self:UpdatePowerBar()",
        "retail": true
      }
    ],
    "UpdatePowerInfo": [
      {
        "name": "UpdatePowerInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UpdatePowerInfo()",
        "retail": true
      }
    ],
    "UpdateMaxPower": [
      {
        "name": "UpdateMaxPower",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateMaxPower()",
        "retail": true
      }
    ],
    "UpdatePower": [
      {
        "name": "UpdatePower",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdatePower()",
        "retail": true
      }
    ],
    "UpdatePowerColor": [
      {
        "name": "UpdatePowerColor",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UpdatePowerColor()",
        "retail": true
      }
    ],
    "UnitPowerBarID": [
      {
        "name": "UnitPowerBarID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local barID = UnitPowerBarID(self.displayedUnit)",
        "retail": true
      }
    ],
    "GetUnitPowerBarInfoByID": [
      {
        "name": "GetUnitPowerBarInfoByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "local barInfo = GetUnitPowerBarInfoByID(barID)",
        "retail": true
      }
    ],
    "GetUnitPowerBarStringsByID": [
      {
        "name": "GetUnitPowerBarStringsByID",
        "count": 1,
        "confidence": 0.2,
        "sample": "--local name, tooltip, cost = GetUnitPowerBarStringsByID(barID);",
        "retail": true
      }
    ],
    "GetCastColor": [
      {
        "name": "GetCastColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "local castColor = self:GetCastColor()",
        "retail": true
      }
    ],
    "UNIT_SPELLCAST_STOP": [
      {
        "name": "UNIT_SPELLCAST_STOP",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.UNIT_SPELLCAST_STOP(self, self.unit, self.unit, self.castID, self.spellID)",
        "retail": true
      }
    ],
    "UNIT_SPELLCAST_CHANNEL_STOP": [
      {
        "name": "UNIT_SPELLCAST_CHANNEL_STOP",
        "count": 2,
        "confidence": 0.4,
        "sample": "self.UNIT_SPELLCAST_CHANNEL_STOP(self, self.unit, self.unit, self.castID, self.spellID)",
        "retail": true
      }
    ],
    "CancelScheduleToHide": [
      {
        "name": "CancelScheduleToHide",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:CancelScheduleToHide()",
        "retail": true
      }
    ],
    "Animation_FadeOut": [
      {
        "name": "Animation_FadeOut",
        "count": 3,
        "confidence": 0.6,
        "sample": "timerObject.castBar:Animation_FadeOut()",
        "retail": true
      }
    ],
    "HasScheduledHide": [
      {
        "name": "HasScheduledHide",
        "count": 3,
        "confidence": 0.6,
        "sample": "if (self:HasScheduledHide()) then",
        "retail": true
      }
    ],
    "UnitCastingInfo": [
      {
        "name": "CastInfo.UnitCastingInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local name, text, texture, startTime = CastInfo.UnitCastingInfo(self.unit)",
        "retail": true
      },
      {
        "name": "UnitCastingInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "return LibCC:UnitCastingInfo (unit)",
        "retail": true
      }
    ],
    "UpdateCastingInfo": [
      {
        "name": "UpdateCastingInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UpdateCastingInfo(self.unit)",
        "retail": true
      }
    ],
    "UnitChannelInfo": [
      {
        "name": "CastInfo.UnitChannelInfo",
        "count": 4,
        "confidence": 0.8,
        "sample": "local name, text, texture, endTime = CastInfo.UnitChannelInfo(self.unit)",
        "retail": true
      },
      {
        "name": "UnitChannelInfo",
        "count": 1,
        "confidence": 0.2,
        "sample": "return LibCC:UnitChannelInfo (unit)",
        "retail": true
      }
    ],
    "UpdateChannelInfo": [
      {
        "name": "UpdateChannelInfo",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UpdateChannelInfo(self.unit)",
        "retail": true
      }
    ],
    "CheckCastIsDone": [
      {
        "name": "CheckCastIsDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "if (self:CheckCastIsDone()) then",
        "retail": true
      }
    ],
    "CreateOrUpdateEmpoweredPips": [
      {
        "name": "CreateOrUpdateEmpoweredPips",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:CreateOrUpdateEmpoweredPips()",
        "retail": true
      }
    ],
    "OnTick_Casting": [
      {
        "name": "OnTick_Casting",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not self:OnTick_Casting(deltaTime)) then",
        "retail": true
      }
    ],
    "OnTick_LazyTick": [
      {
        "name": "OnTick_LazyTick",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:OnTick_LazyTick()",
        "retail": true
      }
    ],
    "OnTick_Channeling": [
      {
        "name": "OnTick_Channeling",
        "count": 1,
        "confidence": 0.2,
        "sample": "if (not self:OnTick_Channeling(deltaTime)) then",
        "retail": true
      }
    ],
    "ScheduleToHide": [
      {
        "name": "ScheduleToHide",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:ScheduleToHide(false)",
        "retail": true
      }
    ],
    "Animation_StopAllAnimations": [
      {
        "name": "Animation_StopAllAnimations",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Animation_StopAllAnimations()",
        "retail": true
      }
    ],
    "UpdateCastColor": [
      {
        "name": "UpdateCastColor",
        "count": 7,
        "confidence": 1.0,
        "sample": "self:UpdateCastColor()",
        "retail": true
      }
    ],
    "Animation_FadeIn": [
      {
        "name": "Animation_FadeIn",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Animation_FadeIn()",
        "retail": true
      }
    ],
    "UpdateInterruptState": [
      {
        "name": "UpdateInterruptState",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdateInterruptState()",
        "retail": true
      }
    ],
    "GetUnitEmpowerHoldAtMaxTime": [
      {
        "name": "GetUnitEmpowerHoldAtMaxTime",
        "count": 1,
        "confidence": 0.2,
        "sample": "self.holdAtMaxTime = GetUnitEmpowerHoldAtMaxTime(self.unit)",
        "retail": true
      }
    ],
    "GetUnitEmpowerStageDuration": [
      {
        "name": "GetUnitEmpowerStageDuration",
        "count": 1,
        "confidence": 0.2,
        "sample": "finish = lastStageEndTime + GetUnitEmpowerStageDuration(unit, i - 1) / 1000,",
        "retail": true
      }
    ],
    "Animation_Flash": [
      {
        "name": "Animation_Flash",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:Animation_Flash()",
        "retail": true
      }
    ],
    "UNIT_SPELLCAST_CHANNEL_START": [
      {
        "name": "UNIT_SPELLCAST_CHANNEL_START",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UNIT_SPELLCAST_CHANNEL_START(unit, ...)",
        "retail": true
      }
    ],
    "UNIT_SPELLCAST_CHANNEL_UPDATE": [
      {
        "name": "UNIT_SPELLCAST_CHANNEL_UPDATE",
        "count": 1,
        "confidence": 0.2,
        "sample": "self:UNIT_SPELLCAST_CHANNEL_UPDATE(unit, ...)",
        "retail": true
      }
    ],
    "CreateUnitFrame": [
      {
        "name": "CreateUnitFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:CreateUnitFrame(parent, name, settingsOverride)",
        "retail": true
      }
    ],
    "UpdateUnitFrame": [
      {
        "name": "UpdateUnitFrame",
        "count": 6,
        "confidence": 1.0,
        "sample": "self:UpdateUnitFrame()",
        "retail": true
      }
    ],
    "UnitHasVehicleUI": [
      {
        "name": "UnitHasVehicleUI",
        "count": 1,
        "confidence": 0.2,
        "sample": "local unitPossessVehicle = (IS_WOW_PROJECT_MAINLINE) and UnitHasVehicleUI(self.unit)\tor false",
        "retail": true
      }
    ],
    "UpdateAllWidgets": [
      {
        "name": "UpdateAllWidgets",
        "count": 4,
        "confidence": 0.8,
        "sample": "self:UpdateAllWidgets()",
        "retail": true
      }
    ],
    "SetHealthBarColor": [
      {
        "name": "SetHealthBarColor",
        "count": 10,
        "confidence": 1.0,
        "sample": "self:SetHealthBarColor(r, g, b)",
        "retail": true
      }
    ],
    "UpdateName": [
      {
        "name": "UpdateName",
        "count": 3,
        "confidence": 0.6,
        "sample": "self:UpdateName()",
        "retail": true
      }
    ],
    "UpdateTargetOverlay": [
      {
        "name": "UpdateTargetOverlay",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateTargetOverlay()",
        "retail": true
      }
    ],
    "UpdateHealthColor": [
      {
        "name": "UpdateHealthColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "self:UpdateHealthColor()",
        "retail": true
      }
    ],
    "CheckVehiclePossession": [
      {
        "name": "CheckVehiclePossession",
        "count": 1,
        "confidence": 0.2,
        "sample": "local unitInVehicle = self:CheckVehiclePossession()",
        "retail": true
      }
    ],
    "LoadLCC": [
      {
        "name": "LoadLCC",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:LoadLCC(LibCC)",
        "retail": true
      }
    ],
    "GetNamePlateForUnit": [
      {
        "name": "C_NamePlate.GetNamePlateForUnit",
        "count": 1,
        "confidence": 0.2,
        "sample": "local plateFrame = C_NamePlate.GetNamePlateForUnit (unitId)",
        "retail": true
      }
    ],
    "CreateLoadFilterParser": [
      {
        "name": "CreateLoadFilterParser",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework:CreateLoadFilterParser(callback)",
        "retail": true
      }
    ],
    "SelectIndex": [
      {
        "name": "SelectIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "--/run Plater.OpenOptionsPanel()PlaterOptionsPanelContainer:SelectIndex(Plater, 14)",
        "retail": true
      }
    ],
    "SetFadeState": [
      {
        "name": "SetFadeState",
        "count": 1,
        "confidence": 0.2,
        "sample": "radioGroup:SetFadeState(subConfigTable.Enabled)",
        "retail": true
      }
    ],
    "OnRadioStateChanged": [
      {
        "name": "OnRadioStateChanged",
        "count": 4,
        "confidence": 0.8,
        "sample": "loadConditionsFrame.OnRadioStateChanged(self:GetParent(), loadConditionsFrame.OptionsTable [DBKey])",
        "retail": true
      }
    ],
    "RunCallback": [
      {
        "name": "RunCallback",
        "count": 3,
        "confidence": 0.6,
        "sample": "loadConditionsFrame.RunCallback()",
        "retail": true
      },
      {
        "name": "DF.AdjustmentSliderFunctions.RunCallback",
        "count": 5,
        "confidence": 1.0,
        "sample": "DF.AdjustmentSliderFunctions.RunCallback(adjustmentSlider, -1 * scaleResultBy, 0, true)",
        "retail": true
      }
    ],
    "CanShowTalentWarning": [
      {
        "name": "CanShowTalentWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "--loadConditionsFrame.CanShowTalentWarning()",
        "retail": true
      }
    ],
    "CanShowPvPTalentWarning": [
      {
        "name": "CanShowPvPTalentWarning",
        "count": 3,
        "confidence": 0.6,
        "sample": "--loadConditionsFrame.CanShowPvPTalentWarning()",
        "retail": true
      }
    ],
    "SelectTabByIndex": [
      {
        "name": "SelectTabByIndex",
        "count": 7,
        "confidence": 1.0,
        "sample": "tabContainer:SelectTabByIndex(tabIndex)",
        "retail": true
      }
    ],
    "SelectTabByName": [
      {
        "name": "SelectTabByName",
        "count": 3,
        "confidence": 0.6,
        "sample": "error(\"df_tabcontainer:SelectTabByName(name): param #2 'name' not found within 'tabContainer.AllFramesByName'.\")",
        "retail": true
      }
    ],
    "CreateTabContainer": [
      {
        "name": "CreateTabContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "function detailsFramework:CreateTabContainer(parent, title, frameName, tabList, optionsTable, hookList, languageInfo)",
        "retail": true
      }
    ],
    "CreateUnderlineGlow": [
      {
        "name": "CreateUnderlineGlow",
        "count": 1,
        "confidence": 0.2,
        "sample": "tabContainer.CreateUnderlineGlow(tabButton)",
        "retail": true
      }
    ],
    "GetTabFrameByIndex": [
      {
        "name": "GetTabFrameByIndex",
        "count": 1,
        "confidence": 0.2,
        "sample": "local generalSettingsTabFrame = tabContainer:GetTabFrameByIndex(tabIndex) --using a tabIndex",
        "retail": true
      }
    ],
    "GetTabFrameByName": [
      {
        "name": "GetTabFrameByName",
        "count": 2,
        "confidence": 0.4,
        "sample": "local advancedSettingsTabFrame = tabContainer:GetTabFrameByName(\"Advanced Settings\") --using the tab text",
        "retail": true
      }
    ],
    "SetTabFramesBackdrop": [
      {
        "name": "SetTabFramesBackdrop",
        "count": 1,
        "confidence": 0.2,
        "sample": "tabContainer:SetTabFramesBackdrop(backdropTable, backdropColor, backdropBorderColor)",
        "retail": true
      }
    ],
    "HideResizer": [
      {
        "name": "HideResizer",
        "count": 3,
        "confidence": 0.6,
        "sample": "frameContainer:HideResizer()",
        "retail": true
      }
    ],
    "ShowResizer": [
      {
        "name": "ShowResizer",
        "count": 2,
        "confidence": 0.4,
        "sample": "frameContainer:ShowResizer()",
        "retail": true
      }
    ],
    "SendSettingChangedCallback": [
      {
        "name": "SendSettingChangedCallback",
        "count": 5,
        "confidence": 1.0,
        "sample": "frameContainer:SendSettingChangedCallback(\"is_locked\", isLocked)",
        "retail": true
      }
    ],
    "CheckResizeLockedState": [
      {
        "name": "CheckResizeLockedState",
        "count": 2,
        "confidence": 0.4,
        "sample": "frameContainer:CheckResizeLockedState()",
        "retail": true
      }
    ],
    "CheckMovableLockedState": [
      {
        "name": "CheckMovableLockedState",
        "count": 2,
        "confidence": 0.4,
        "sample": "frameContainer:CheckMovableLockedState()",
        "retail": true
      }
    ],
    "RefreshChildrenState": [
      {
        "name": "RefreshChildrenState",
        "count": 2,
        "confidence": 0.4,
        "sample": "frameContainer:RefreshChildrenState()",
        "retail": true
      }
    ],
    "CreateFrameContainer": [
      {
        "name": "CreateFrameContainer",
        "count": 8,
        "confidence": 1.0,
        "sample": "function DF:CreateFrameContainer(parent, options, frameName)",
        "retail": true
      }
    ],
    "CreateResizers": [
      {
        "name": "CreateResizers",
        "count": 1,
        "confidence": 0.2,
        "sample": "frameContainer:CreateResizers()",
        "retail": true
      }
    ],
    "CreateMover": [
      {
        "name": "CreateMover",
        "count": 1,
        "confidence": 0.2,
        "sample": "frameContainer:CreateMover()",
        "retail": true
      }
    ],
    "CreateFrameContainerTest": [
      {
        "name": "CreateFrameContainerTest",
        "count": 4,
        "confidence": 0.8,
        "sample": "function DF:CreateFrameContainerTest(parent, options, frameName)",
        "retail": true
      }
    ],
    "RegisterChildForDrag": [
      {
        "name": "RegisterChildForDrag",
        "count": 7,
        "confidence": 1.0,
        "sample": "container:RegisterChildForDrag(frame)",
        "retail": true
      }
    ],
    "SetResizeLocked": [
      {
        "name": "SetResizeLocked",
        "count": 3,
        "confidence": 0.6,
        "sample": "--container:SetResizeLocked(true)",
        "retail": true
      }
    ],
    "ClearSelectionBoxPoints": [
      {
        "name": "ClearSelectionBoxPoints",
        "count": 2,
        "confidence": 0.4,
        "sample": "function dragFrame.ClearSelectionBoxPoints()",
        "retail": true
      }
    ],
    "RefreshImageEditor": [
      {
        "name": "RefreshImageEditor",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DF:RefreshImageEditor()",
        "retail": true
      }
    ],
    "CreateImageEditorFrame": [
      {
        "name": "CreateImageEditorFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "CreateImageEditorFrame()",
        "retail": true
      }
    ],
    "AfterCombat": [
      {
        "name": "Schedules.AfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.AfterCombat(callback, id, ...)",
        "retail": true
      }
    ],
    "CancelAfterCombat": [
      {
        "name": "Schedules.CancelAfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.CancelAfterCombat(id)",
        "retail": true
      }
    ],
    "CancelAllAfterCombat": [
      {
        "name": "Schedules.CancelAllAfterCombat",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.CancelAllAfterCombat()",
        "retail": true
      }
    ],
    "IsAfterCombatScheduled": [
      {
        "name": "Schedules.IsAfterCombatScheduled",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.IsAfterCombatScheduled(id)",
        "retail": true
      }
    ],
    "AfterById": [
      {
        "name": "Schedules.AfterById",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.AfterById(time, callback, id, ...)",
        "retail": true
      }
    ],
    "AfterByIdNoCancel": [
      {
        "name": "Schedules.AfterByIdNoCancel",
        "count": 1,
        "confidence": 0.2,
        "sample": "function detailsFramework.Schedules.AfterByIdNoCancel(time, callback, id, ...)",
        "retail": true
      }
    ],
    "CreateAxesLines": [
      {
        "name": "CreateAxesLines",
        "count": 2,
        "confidence": 0.4,
        "sample": "ChartFrameTest:CreateAxesLines(xOffset, yOffset, whichSide, thickness, amountYLabels, amountXLabels, r, g, b, a)",
        "retail": true
      }
    ],
    "SetValueChangedFunction": [
      {
        "name": "SetValueChangedFunction",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DFSliderMetaFunctions:SetValueChangedFunction(newFunction)",
        "retail": true
      }
    ],
    "PrepareToHide": [
      {
        "name": "PrepareToHide",
        "count": 4,
        "confidence": 0.8,
        "sample": "DetailsFrameworkSliderButtons1:PrepareToHide()",
        "retail": true
      }
    ],
    "TypeValue": [
      {
        "name": "TypeValue",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DFSliderMetaFunctions:TypeValue()",
        "retail": true
      }
    ],
    "OnValueChanged": [
      {
        "name": "OnValueChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "object.OnValueChanged(slider, object.FixedValue, amt)",
        "retail": true
      }
    ],
    "SwitchOnClick": [
      {
        "name": "SwitchOnClick",
        "count": 1,
        "confidence": 0.2,
        "sample": "SwitchOnClick (self.widget, nil, bForceValue, value)",
        "retail": true
      }
    ],
    "DumpPayload": [
      {
        "name": "DumpPayload",
        "count": 1,
        "confidence": 0.2,
        "sample": "local result, errorText = pcall(adjustmentSlider.callback, adjustmentSlider, valueX, valueY, isLiteral, adjustmentSlider:DumpPayload())",
        "retail": true
      }
    ],
    "GetScaleFactor": [
      {
        "name": "GetScaleFactor",
        "count": 2,
        "confidence": 0.4,
        "sample": "local scaleResultBy = adjustmentSlider:GetScaleFactor()",
        "retail": true
      }
    ],
    "GetLength": [
      {
        "name": "GetLength",
        "count": 1,
        "confidence": 0.2,
        "sample": "local length = DF:MapRangeClamped(-100, 100, -1, 1, mouseDirection:GetLength())",
        "retail": true
      }
    ],
    "Normalize": [
      {
        "name": "Normalize",
        "count": 1,
        "confidence": 0.2,
        "sample": "mouseDirection:Normalize()",
        "retail": true
      }
    ],
    "ScaleBy": [
      {
        "name": "ScaleBy",
        "count": 1,
        "confidence": 0.2,
        "sample": "mouseDirection:ScaleBy(speed * length)",
        "retail": true
      }
    ],
    "DisableOnEnterScripts": [
      {
        "name": "DisableOnEnterScripts",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:DisableOnEnterScripts()",
        "retail": true
      }
    ],
    "EnableOnEnterScripts": [
      {
        "name": "EnableOnEnterScripts",
        "count": 2,
        "confidence": 0.4,
        "sample": "DF:EnableOnEnterScripts()",
        "retail": true
      }
    ],
    "CreateAdjustmentSlider": [
      {
        "name": "CreateAdjustmentSlider",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DF:CreateAdjustmentSlider(parent, callback, options, name, ...)",
        "retail": true
      }
    ],
    "SetPayload": [
      {
        "name": "SetPayload",
        "count": 1,
        "confidence": 0.2,
        "sample": "ASFrame:SetPayload(...)",
        "retail": true
      }
    ],
    "CreateOnEnterIgnoreZone": [
      {
        "name": "CreateOnEnterIgnoreZone",
        "count": 3,
        "confidence": 0.6,
        "sample": "local ignoreOnEnterZone = DF:CreateOnEnterIgnoreZone()",
        "retail": true
      }
    ],
    "UnregisterComm": [
      {
        "name": "UnregisterComm",
        "count": 1,
        "confidence": 0.2,
        "sample": "_G.NickTag:UnregisterComm (\"NickTag\")",
        "retail": true
      }
    ],
    "Moonlight": [
      {
        "name": "Moonlight",
        "count": 1,
        "confidence": 0.2,
        "sample": "{[[Interface\\PetBattles\\Weather-Moonlight]], \"Moonlight (reverse)\", {0.94359375, 0.02765625, 1, 0}},",
        "retail": true
      }
    ],
    "CheckName": [
      {
        "name": "CheckName",
        "count": 3,
        "confidence": 0.6,
        "sample": "local allowNickName = NickTag:CheckName (receivedPersona [CONST_INDEX_NICKNAME])",
        "retail": true
      }
    ],
    "SyncSiblings": [
      {
        "name": "SyncSiblings",
        "count": 3,
        "confidence": 0.6,
        "sample": "NickTag:SyncSiblings()",
        "retail": true
      }
    ],
    "SendPersona": [
      {
        "name": "SendPersona",
        "count": 3,
        "confidence": 0.6,
        "sample": "NickTag:SendPersona()",
        "retail": true
      }
    ],
    "ResetCache": [
      {
        "name": "ResetCache",
        "count": 2,
        "confidence": 0.4,
        "sample": "function NickTag:ResetCache()",
        "retail": true
      }
    ],
    "IncRevision": [
      {
        "name": "IncRevision",
        "count": 4,
        "confidence": 0.8,
        "sample": "NickTag:IncRevision()",
        "retail": true
      }
    ],
    "SetNicknameAvatar": [
      {
        "name": "SetNicknameAvatar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag:SetNicknameAvatar (texture, l, r, t, b)",
        "retail": true
      }
    ],
    "SetAvatar": [
      {
        "name": "SetAvatar",
        "count": 2,
        "confidence": 0.4,
        "sample": "assert (texture and l and r and t and b, \"NickTag 'SetNicknameAvatar' bad format. Usage NickTag:SetAvatar (texturepath [, L, R, T, B] or texturepath [, {L, R, T, B}])\")",
        "retail": true
      }
    ],
    "SetNicknameBackground": [
      {
        "name": "SetNicknameBackground",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag:SetNicknameBackground (path, texcoord, color, silent)",
        "retail": true
      }
    ],
    "GetNicknameAvatar": [
      {
        "name": "GetNicknameAvatar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag:GetNicknameAvatar (playerName, default, silent)",
        "retail": true
      }
    ],
    "GetNicknameBackground": [
      {
        "name": "GetNicknameBackground",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag:GetNicknameBackground (playerName, default_path, default_texcoord, default_color, silent)",
        "retail": true
      }
    ],
    "GetSerial": [
      {
        "name": "GetSerial",
        "count": 1,
        "confidence": 0.2,
        "sample": "function NickTag:GetSerial (serial, silent)",
        "retail": true
      }
    ],
    "SetBackground": [
      {
        "name": "SetBackground",
        "count": 1,
        "confidence": 0.2,
        "sample": "function avatar_pick_frame:SetBackground (n)",
        "retail": true
      }
    ],
    "IconCallback": [
      {
        "name": "IconCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:IconCallback(event, name, key, value)",
        "retail": true
      }
    ],
    "UpdateCoord": [
      {
        "name": "UpdateCoord",
        "count": 6,
        "confidence": 1.0,
        "sample": "lib.objects[name].icon:UpdateCoord()",
        "retail": true
      }
    ],
    "OnTooltipShow": [
      {
        "name": "OnTooltipShow",
        "count": 1,
        "confidence": 0.2,
        "sample": "obj.OnTooltipShow(lib.tooltip)",
        "retail": true
      }
    ],
    "SetToFinalAlpha": [
      {
        "name": "SetToFinalAlpha",
        "count": 2,
        "confidence": 0.4,
        "sample": "button.fadeOut:SetToFinalAlpha(true)",
        "retail": true
      }
    ],
    "Unlock": [
      {
        "name": "Unlock",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:Unlock(name)",
        "retail": true
      }
    ],
    "GetMinimapButton": [
      {
        "name": "GetMinimapButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetMinimapButton(name)",
        "retail": true
      }
    ],
    "OnMinimapEnter": [
      {
        "name": "OnMinimapEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnMinimapEnter()",
        "retail": true
      }
    ],
    "OnMinimapLeave": [
      {
        "name": "OnMinimapLeave",
        "count": 1,
        "confidence": 0.2,
        "sample": "local function OnMinimapLeave()",
        "retail": true
      }
    ],
    "ShowOnEnter": [
      {
        "name": "ShowOnEnter",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:ShowOnEnter(name, value)",
        "retail": true
      }
    ],
    "GetButtonList": [
      {
        "name": "GetButtonList",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:GetButtonList()",
        "retail": true
      }
    ],
    "SetButtonRadius": [
      {
        "name": "SetButtonRadius",
        "count": 2,
        "confidence": 0.4,
        "sample": "function lib:SetButtonRadius(radius)",
        "retail": true
      }
    ],
    "SetButtonToPosition": [
      {
        "name": "SetButtonToPosition",
        "count": 1,
        "confidence": 0.2,
        "sample": "function lib:SetButtonToPosition(button, position)",
        "retail": true
      }
    ],
    "OnEndMythicDungeon": [
      {
        "name": "OnEndMythicDungeon",
        "count": 5,
        "confidence": 1.0,
        "sample": "mythicDungeonCharts:OnEndMythicDungeon()",
        "retail": true
      }
    ],
    "OnBossDefeated": [
      {
        "name": "OnBossDefeated",
        "count": 1,
        "confidence": 0.2,
        "sample": "function mythicDungeonCharts:OnBossDefeated()",
        "retail": true
      },
      {
        "name": "Details222.MythicPlus.OnBossDefeated",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.MythicPlus.OnBossDefeated(encounterID, encounterName) --data capture",
        "retail": true
      }
    ],
    "OnStartMythicDungeon": [
      {
        "name": "OnStartMythicDungeon",
        "count": 3,
        "confidence": 0.6,
        "sample": "function mythicDungeonCharts:OnStartMythicDungeon()",
        "retail": true
      }
    ],
    "ShowChartFrame": [
      {
        "name": "DetailsMythicDungeonChartFrame.ShowChartFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- /run _G.DetailsMythicDungeonChartHandler.ShowChart(); DetailsMythicDungeonChartFrame.ShowChartFrame()",
        "retail": true
      },
      {
        "name": "ShowChartFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function dungeonChartFrame.ShowChartFrame()",
        "retail": true
      }
    ],
    "ShowEndOfMythicPlusPanel": [
      {
        "name": "ShowEndOfMythicPlusPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- /run mythicDungeonFrames.ShowEndOfMythicPlusPanel()",
        "retail": true
      },
      {
        "name": "DetailsMythicDungeonChartHandler.ShowEndOfMythicPlusPanel",
        "count": 2,
        "confidence": 0.4,
        "sample": "-- /run _G.DetailsMythicDungeonChartHandler.ShowEndOfMythicPlusPanel()",
        "retail": true
      },
      {
        "name": "MythicDungeonFrames.ShowEndOfMythicPlusPanel",
        "count": 3,
        "confidence": 0.6,
        "sample": "--/run _G.MythicDungeonFrames.ShowEndOfMythicPlusPanel()",
        "retail": true
      }
    ],
    "BossDefeated": [
      {
        "name": "DetailsMythicPlusFrame.BossDefeated",
        "count": 3,
        "confidence": 0.6,
        "sample": "function DetailsMythicPlusFrame.BossDefeated(this_is_end_end, encounterID, encounterName, difficultyID, raidSize, endStatus) --hold your breath and count to ten",
        "retail": true
      },
      {
        "name": "BossDefeated",
        "count": 2,
        "confidence": 0.4,
        "sample": "print(\"Details!\", \"BossDefeated() > boss defeated | SegmentID:\", Details.MythicPlus.SegmentID, \" | mapID:\", Details.MythicPlus.DungeonID)",
        "retail": true
      }
    ],
    "MythicDungeonFinished": [
      {
        "name": "DetailsMythicPlusFrame.MythicDungeonFinished",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsMythicPlusFrame.MythicDungeonFinished(bFromZoneLeft)",
        "retail": true
      },
      {
        "name": "MythicDungeonFinished",
        "count": 9,
        "confidence": 1.0,
        "sample": "print(\"Details!\", \"MythicDungeonFinished() > the dungeon was a Mythic+ and just ended.\")",
        "retail": true
      }
    ],
    "MergeTrashAfterLastBoss": [
      {
        "name": "Details222.MythicPlus.MergeTrashAfterLastBoss",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.MythicPlus.MergeTrashAfterLastBoss()",
        "retail": true
      }
    ],
    "MergeSegmentsOnEnd": [
      {
        "name": "DetailsMythicPlusFrame.MergeSegmentsOnEnd",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsMythicPlusFrame.MergeSegmentsOnEnd()",
        "retail": true
      },
      {
        "name": "MergeSegmentsOnEnd",
        "count": 5,
        "confidence": 1.0,
        "sample": "print(\"Details!\", \"MergeSegmentsOnEnd() > starting to merge mythic segments.\", \"InCombatLockdown():\", InCombatLockdown())",
        "retail": true
      }
    ],
    "OnChallengeModeStart": [
      {
        "name": "DetailsMythicPlusFrame.OnChallengeModeStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "function DetailsMythicPlusFrame.OnChallengeModeStart()",
        "retail": true
      },
      {
        "name": "OnChallengeModeStart",
        "count": 1,
        "confidence": 0.2,
        "sample": "Details222.MythicPlus.LogStep(\"OnChallengeModeStart()\")",
        "retail": true
      }
    ],
    "SaveMythicPlusStats": [
      {
        "name": "DetailsMythicPlusFrame.SaveMythicPlusStats",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsMythicPlusFrame.SaveMythicPlusStats(...)",
        "retail": true
      }
    ],
    "GetLatestRunId": [
      {
        "name": "DetailsMythicPlus.GetLatestRunId",
        "count": 1,
        "confidence": 0.2,
        "sample": "runId = DetailsMythicPlus.GetLatestRunId() or 0",
        "retail": true
      }
    ],
    "MergeTrashCleanup": [
      {
        "name": "DetailsMythicPlusFrame.MergeTrashCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsMythicPlusFrame.MergeTrashCleanup()",
        "retail": true
      },
      {
        "name": "MergeTrashCleanup",
        "count": 2,
        "confidence": 0.4,
        "sample": "print(\"Details!\", \"MergeTrashCleanup() > running\", DetailsMythicPlusFrame.TrashMergeScheduled and #DetailsMythicPlusFrame.TrashMergeScheduled)",
        "retail": true
      }
    ],
    "MergeRemainingTrashAfterAllBossesDone": [
      {
        "name": "DetailsMythicPlusFrame.MergeRemainingTrashAfterAllBossesDone",
        "count": 2,
        "confidence": 0.4,
        "sample": "function DetailsMythicPlusFrame.MergeRemainingTrashAfterAllBossesDone()",
        "retail": true
      },
      {
        "name": "MergeRemainingTrashAfterAllBossesDone",
        "count": 7,
        "confidence": 1.0,
        "sample": "print(\"Details!\", \"MergeRemainingTrashAfterAllBossesDone() > running, #segments: \", #DetailsMythicPlusFrame.TrashMergeScheduled2, \"trash overall table:\", DetailsMythicPlusFrame.TrashMergeScheduled2_OverallCombat)",
        "retail": true
      }
    ],
    "Swapper": [
      {
        "name": "Swapper",
        "count": 1,
        "confidence": 0.2,
        "sample": "print(\"|cFFFFFF00Details Swapper (dev):|r\", ...)",
        "retail": true
      }
    ],
    "SwapperGetEncounterData": [
      {
        "name": "SwapperGetEncounterData",
        "count": 5,
        "confidence": 1.0,
        "sample": "---@field SwapperFreezeDamage fun(self:details) get damage done by players and store in Details:SwapperGetEncounterData()",
        "retail": true
      }
    ],
    "GetDamageWindow": [
      {
        "name": "GetDamageWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetDamageWindow()",
        "retail": true
      }
    ],
    "SwapperFreezeDamage": [
      {
        "name": "SwapperFreezeDamage",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SwapperFreezeDamage()",
        "retail": true
      }
    ],
    "SwapperFreezeDamageOnTarget": [
      {
        "name": "SwapperFreezeDamageOnTarget",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SwapperFreezeDamageOnTarget(targetName)",
        "retail": true
      }
    ],
    "SwapperRestoreWindow": [
      {
        "name": "SwapperRestoreWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details:SwapperRestoreWindow()",
        "retail": true
      }
    ],
    "SwapperGetWindow": [
      {
        "name": "SwapperGetWindow",
        "count": 3,
        "confidence": 0.6,
        "sample": "local swappedWindow = Details:SwapperGetWindow()",
        "retail": true
      }
    ],
    "SwapperSetCustomDisplay": [
      {
        "name": "SwapperSetCustomDisplay",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:SwapperSetCustomDisplay(instanceObject, customDisplayName, customDisplayIcon, customDisplaySearchCode)",
        "retail": true
      }
    ],
    "GetNumWindowsCreated": [
      {
        "name": "GetNumWindowsCreated",
        "count": 2,
        "confidence": 0.4,
        "sample": "function AllInOneWindow:GetNumWindowsCreated()",
        "retail": true
      }
    ],
    "RefreshWindowFrame": [
      {
        "name": "RefreshWindowFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "AllInOneWindow:RefreshWindowFrame(headerFrame:GetParent())",
        "retail": true
      }
    ],
    "CreateWindowFrame": [
      {
        "name": "CreateWindowFrame",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AllInOneWindow:CreateWindowFrame()",
        "retail": true
      }
    ],
    "SetColumnSettingChangedCallback": [
      {
        "name": "SetColumnSettingChangedCallback",
        "count": 6,
        "confidence": 1.0,
        "sample": "header:SetColumnSettingChangedCallback(onHeaderColumnOptionChanged)",
        "retail": true
      }
    ],
    "CreateLineForWindow": [
      {
        "name": "CreateLineForWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AllInOneWindow:CreateLineForWindow(window)",
        "retail": true
      }
    ],
    "RefreshLineForWindow": [
      {
        "name": "RefreshLineForWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function AllInOneWindow:RefreshLineForWindow(window, line)",
        "retail": true
      }
    ],
    "RegisterPluginButton": [
      {
        "name": "RegisterPluginButton",
        "count": 1,
        "confidence": 0.2,
        "sample": "function breakdownWindowFrame.RegisterPluginButton(newPluginButton, newPluginObject, newPluginAbsoluteName)",
        "retail": true
      }
    ],
    "OnShowPluginFrame": [
      {
        "name": "Details222.BreakdownWindow.OnShowPluginFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details222.BreakdownWindow.OnShowPluginFrame(pluginObject)",
        "retail": true
      }
    ],
    "HidePluginFrame": [
      {
        "name": "Details222.BreakdownWindow.HidePluginFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.BreakdownWindow.HidePluginFrame()",
        "retail": true
      }
    ],
    "ApplyTextureSettings": [
      {
        "name": "Details222.BreakdownWindow.ApplyTextureSettings",
        "count": 3,
        "confidence": 0.6,
        "sample": "function Details222.BreakdownWindow.ApplyTextureSettings(statusBar)",
        "retail": true
      }
    ],
    "GetBreakdownTabsInUse": [
      {
        "name": "GetBreakdownTabsInUse",
        "count": 4,
        "confidence": 0.8,
        "sample": "function Details:GetBreakdownTabsInUse()",
        "retail": true
      }
    ],
    "GetBreakdownTabByName": [
      {
        "name": "GetBreakdownTabByName",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:GetBreakdownTabByName(tabName, tablePool)",
        "retail": true
      }
    ],
    "GetActiveWindowFromBreakdownWindow": [
      {
        "name": "GetActiveWindowFromBreakdownWindow",
        "count": 9,
        "confidence": 1.0,
        "sample": "function Details:GetActiveWindowFromBreakdownWindow()",
        "retail": true
      }
    ],
    "GetDisplayTypeFromBreakdownWindow": [
      {
        "name": "GetDisplayTypeFromBreakdownWindow",
        "count": 6,
        "confidence": 1.0,
        "sample": "function Details:GetDisplayTypeFromBreakdownWindow()",
        "retail": true
      }
    ],
    "GetBreakdownWindow": [
      {
        "name": "GetBreakdownWindow",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details:GetBreakdownWindow()",
        "retail": true
      }
    ],
    "RefreshWindowColor": [
      {
        "name": "RefreshWindowColor",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:RefreshWindowColor()",
        "retail": true
      }
    ],
    "SetWindowColor": [
      {
        "name": "SetWindowColor",
        "count": 4,
        "confidence": 0.8,
        "sample": "Details:SetWindowColor(unpack(colorTable))",
        "retail": true
      }
    ],
    "OpenSpecificBreakdownWindow": [
      {
        "name": "OpenSpecificBreakdownWindow",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:OpenSpecificBreakdownWindow(combatObject, actorName, mainAttribute, subAttribute)",
        "retail": true
      }
    ],
    "CreatePlayerListFrame": [
      {
        "name": "Details.PlayerBreakdown.CreatePlayerListFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.PlayerBreakdown.CreatePlayerListFrame()",
        "retail": true
      },
      {
        "name": "CreatePlayerListFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "function breakdownWindowPlayerList.CreatePlayerListFrame()",
        "retail": true
      }
    ],
    "CreateDumpDataFrame": [
      {
        "name": "Details.PlayerBreakdown.CreateDumpDataFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details.PlayerBreakdown.CreateDumpDataFrame()",
        "retail": true
      }
    ],
    "CreateRightSideBar": [
      {
        "name": "CreateRightSideBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "--breakdownWindow:CreateRightSideBar()",
        "retail": true
      }
    ],
    "UpdateBreakdownPlayerList": [
      {
        "name": "UpdateBreakdownPlayerList",
        "count": 8,
        "confidence": 1.0,
        "sample": "Details:UpdateBreakdownPlayerList()",
        "retail": true
      }
    ],
    "InitializeAurasTab": [
      {
        "name": "InitializeAurasTab",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeAurasTab()",
        "retail": true
      }
    ],
    "InitializeCompareTab": [
      {
        "name": "InitializeCompareTab",
        "count": 2,
        "confidence": 0.4,
        "sample": "Details:InitializeCompareTab()",
        "retail": true
      }
    ],
    "ShowTabs": [
      {
        "name": "ShowTabs",
        "count": 2,
        "confidence": 0.4,
        "sample": "breakdownWindowFrame:ShowTabs()",
        "retail": true
      }
    ],
    "DoClick": [
      {
        "name": "DoClick",
        "count": 2,
        "confidence": 0.4,
        "sample": "tabButton:DoClick()",
        "retail": true
      }
    ],
    "OnShowFunc": [
      {
        "name": "OnShowFunc",
        "count": 1,
        "confidence": 0.2,
        "sample": "tabButton:OnShowFunc()",
        "retail": true
      }
    ],
    "SetSpellAsExpanded": [
      {
        "name": "Details222.BreakdownWindow.SetSpellAsExpanded",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details222.BreakdownWindow.SetSpellAsExpanded(key, bIsExpanded)",
        "retail": true
      }
    ],
    "OnReceiveSpellData": [
      {
        "name": "OnReceiveSpellData",
        "count": 3,
        "confidence": 0.6,
        "sample": "tabButton.OnReceiveSpellData(data, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "OnReceiveTargetData": [
      {
        "name": "OnReceiveTargetData",
        "count": 2,
        "confidence": 0.4,
        "sample": "tabButton.OnReceiveTargetData(targetList, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "OnReceiveGenericData": [
      {
        "name": "OnReceiveGenericData",
        "count": 2,
        "confidence": 0.4,
        "sample": "tabButton.OnReceiveGenericData(resultTable, actorObject, combatObject, instance)",
        "retail": true
      }
    ],
    "CreatePlayerDetailsTab": [
      {
        "name": "CreatePlayerDetailsTab",
        "count": 5,
        "confidence": 1.0,
        "sample": "function Details:CreatePlayerDetailsTab(tabName, locName, conditionFunc, fillFunc, tabOnClickFunc, onCreateFunc, iconSettings, replace, bIsDefaultTab) --~tab",
        "retail": true
      }
    ],
    "SetShownReportOverlay": [
      {
        "name": "SetShownReportOverlay",
        "count": 5,
        "confidence": 1.0,
        "sample": "function spellsTab.SetShownReportOverlay(bIsShown)",
        "retail": true
      }
    ],
    "GetSpellBlockFrame": [
      {
        "name": "GetSpellBlockFrame",
        "count": 5,
        "confidence": 1.0,
        "sample": "function spellsTab.GetSpellBlockFrame()",
        "retail": true
      },
      {
        "name": "DetailsSpellBreakdownTab.GetSpellBlockFrame",
        "count": 2,
        "confidence": 0.4,
        "sample": "DetailsSpellBreakdownTab.GetSpellBlockFrame():UpdateBlocks()",
        "retail": true
      }
    ],
    "GetPhaseScrollFrame": [
      {
        "name": "GetPhaseScrollFrame",
        "count": 7,
        "confidence": 1.0,
        "sample": "function spellsTab.GetPhaseScrollFrame()",
        "retail": true
      }
    ],
    "GetGenericScrollFrame": [
      {
        "name": "GetGenericScrollFrame",
        "count": 7,
        "confidence": 1.0,
        "sample": "function spellsTab.GetGenericScrollFrame()",
        "retail": true
      }
    ],
    "GetSpellScrollContainer": [
      {
        "name": "GetSpellScrollContainer",
        "count": 8,
        "confidence": 1.0,
        "sample": "function spellsTab.GetSpellScrollContainer()",
        "retail": true
      },
      {
        "name": "DetailsSpellBreakdownTab.GetSpellScrollContainer",
        "count": 1,
        "confidence": 0.2,
        "sample": "local container = DetailsSpellBreakdownTab.GetSpellScrollContainer()",
        "retail": true
      }
    ],
    "GetSpellBlockContainer": [
      {
        "name": "GetSpellBlockContainer",
        "count": 4,
        "confidence": 0.8,
        "sample": "function spellsTab.GetSpellBlockContainer()",
        "retail": true
      }
    ],
    "GetTargetScrollContainer": [
      {
        "name": "GetTargetScrollContainer",
        "count": 5,
        "confidence": 1.0,
        "sample": "function spellsTab.GetTargetScrollContainer()",
        "retail": true
      },
      {
        "name": "DetailsSpellBreakdownTab.GetTargetScrollContainer",
        "count": 1,
        "confidence": 0.2,
        "sample": "local container = DetailsSpellBreakdownTab.GetTargetScrollContainer()",
        "retail": true
      }
    ],
    "GetPhaseScrollContainer": [
      {
        "name": "GetPhaseScrollContainer",
        "count": 3,
        "confidence": 0.6,
        "sample": "function spellsTab.GetPhaseScrollContainer()",
        "retail": true
      }
    ],
    "GetGenericScrollContainer": [
      {
        "name": "GetGenericScrollContainer",
        "count": 5,
        "confidence": 1.0,
        "sample": "function spellsTab.GetGenericScrollContainer()",
        "retail": true
      }
    ],
    "GetScrollFrameByContainerType": [
      {
        "name": "GetScrollFrameByContainerType",
        "count": 2,
        "confidence": 0.4,
        "sample": "function spellsTab.GetScrollFrameByContainerType(containerType)",
        "retail": true
      }
    ],
    "OnProfileChange": [
      {
        "name": "OnProfileChange",
        "count": 3,
        "confidence": 0.6,
        "sample": "function spellsTab.OnProfileChange()",
        "retail": true
      }
    ],
    "UpdateHeadersSettings": [
      {
        "name": "UpdateHeadersSettings",
        "count": 14,
        "confidence": 1.0,
        "sample": "spellsTab.UpdateHeadersSettings(\"spells\")",
        "retail": true
      },
      {
        "name": "DetailsSpellBreakdownTab.UpdateHeadersSettings",
        "count": 9,
        "confidence": 1.0,
        "sample": "DetailsSpellBreakdownTab.UpdateHeadersSettings(\"spells\")",
        "retail": true
      }
    ],
    "GetHeaderSettings": [
      {
        "name": "GetHeaderSettings",
        "count": 4,
        "confidence": 0.8,
        "sample": "function spellsTab.GetHeaderSettings(containerType)",
        "retail": true
      }
    ],
    "OnHeaderColumnOptionChanged": [
      {
        "name": "OnHeaderColumnOptionChanged",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.OnHeaderColumnOptionChanged(headerFrame, optionName, columnName, value)",
        "retail": true
      }
    ],
    "OnAnyColumnHeaderClickCallback": [
      {
        "name": "OnAnyColumnHeaderClickCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.OnAnyColumnHeaderClickCallback()",
        "retail": true
      }
    ],
    "BuildHeaderTable": [
      {
        "name": "BuildHeaderTable",
        "count": 6,
        "confidence": 1.0,
        "sample": "spellsTab.spellsHeaderData = spellsTab.BuildHeaderTable(containerType)",
        "retail": true
      }
    ],
    "SelectSpellBar": [
      {
        "name": "SelectSpellBar",
        "count": 2,
        "confidence": 0.4,
        "sample": "function spellsTab.SelectSpellBar(spellBar)",
        "retail": true
      }
    ],
    "HasSelectedSpellBar": [
      {
        "name": "HasSelectedSpellBar",
        "count": 4,
        "confidence": 0.8,
        "sample": "if (spellsTab.HasSelectedSpellBar()) then --unselect and stop the function if the bar selected is the same as the one being selected",
        "retail": true
      }
    ],
    "GetSelectedSpellBar": [
      {
        "name": "GetSelectedSpellBar",
        "count": 7,
        "confidence": 1.0,
        "sample": "if (spellsTab.GetSelectedSpellBar() == spellBar) then",
        "retail": true
      }
    ],
    "UnSelectSpellBar": [
      {
        "name": "UnSelectSpellBar",
        "count": 6,
        "confidence": 1.0,
        "sample": "spellsTab.UnSelectSpellBar()",
        "retail": true
      }
    ],
    "OnShownTab": [
      {
        "name": "OnShownTab",
        "count": 2,
        "confidence": 0.4,
        "sample": "function spellsTab.OnShownTab()",
        "retail": true
      }
    ],
    "ClearBlocks": [
      {
        "name": "ClearBlocks",
        "count": 3,
        "confidence": 0.6,
        "sample": "spellsTab.GetSpellBlockFrame():ClearBlocks()",
        "retail": true
      }
    ],
    "OnCreateTabCallback": [
      {
        "name": "OnCreateTabCallback",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.OnCreateTabCallback(tabButton, tabFrame) --~init",
        "retail": true
      }
    ],
    "CreateSpellScrollContainer": [
      {
        "name": "CreateSpellScrollContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellsTab.CreateSpellScrollContainer(tabFrame) --finished",
        "retail": true
      }
    ],
    "CreateSpellBlockContainer": [
      {
        "name": "CreateSpellBlockContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellsTab.CreateSpellBlockContainer(tabFrame)",
        "retail": true
      }
    ],
    "CreateTargetContainer": [
      {
        "name": "CreateTargetContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellsTab.CreateTargetContainer(tabFrame)",
        "retail": true
      }
    ],
    "CreatePhasesContainer": [
      {
        "name": "CreatePhasesContainer",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellsTab.CreatePhasesContainer(tabFrame)",
        "retail": true
      }
    ],
    "CreateGenericContainers": [
      {
        "name": "CreateGenericContainers",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellsTab.CreateGenericContainers(tabFrame)",
        "retail": true
      }
    ],
    "CreateReportButtons": [
      {
        "name": "CreateReportButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "--spellsTab.CreateReportButtons(tabFrame)",
        "retail": true
      }
    ],
    "GetReportData": [
      {
        "name": "GetReportData",
        "count": 4,
        "confidence": 0.8,
        "sample": "local reportData = scrollFrame:GetReportData()",
        "retail": true
      }
    ],
    "UpdateBarSettings": [
      {
        "name": "UpdateBarSettings",
        "count": 4,
        "confidence": 0.8,
        "sample": "function spellsTab.UpdateBarSettings(bar)",
        "retail": true
      }
    ],
    "CreatePhaseBar": [
      {
        "name": "CreatePhaseBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.CreatePhaseBar(self, index) --~create ~createphase ~phasebar",
        "retail": true
      }
    ],
    "ResetFramesToHeaderAlignment": [
      {
        "name": "ResetFramesToHeaderAlignment",
        "count": 4,
        "confidence": 0.8,
        "sample": "phaseBar:ResetFramesToHeaderAlignment()",
        "retail": true
      }
    ],
    "SetSettingChangedCallback": [
      {
        "name": "SetSettingChangedCallback",
        "count": 9,
        "confidence": 1.0,
        "sample": "container:SetSettingChangedCallback(settingChangedCallbackFunction)",
        "retail": true
      }
    ],
    "BuildPlayerList": [
      {
        "name": "BuildPlayerList",
        "count": 2,
        "confidence": 0.4,
        "sample": "function breakdownWindowPlayerList.BuildPlayerList()",
        "retail": true
      }
    ],
    "RefreshScrolls": [
      {
        "name": "Details222.BreakdownWindow.RefreshScrolls",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details222.BreakdownWindow.RefreshScrolls()",
        "retail": true
      }
    ],
    "GetCastAverage": [
      {
        "name": "Details.SpellTableMixin.GetCastAverage",
        "count": 1,
        "confidence": 0.2,
        "sample": "return Details.SpellTableMixin.GetCastAverage(spellData, amountOfCasts)",
        "retail": true
      }
    ],
    "BuildSpellTargetFromBreakdownSpellData": [
      {
        "name": "BuildSpellTargetFromBreakdownSpellData",
        "count": 1,
        "confidence": 0.2,
        "sample": "targets = actorObject:BuildSpellTargetFromBreakdownSpellData(bkSpellData)",
        "retail": true
      }
    ],
    "BuildSpellTargetFromSpellTable": [
      {
        "name": "BuildSpellTargetFromSpellTable",
        "count": 1,
        "confidence": 0.2,
        "sample": "targets = actorObject:BuildSpellTargetFromSpellTable(spellTable)",
        "retail": true
      }
    ],
    "GetBlocksInUse": [
      {
        "name": "GetBlocksInUse",
        "count": 1,
        "confidence": 0.2,
        "sample": "local blocksInUse = spellBlockContainer:GetBlocksInUse()",
        "retail": true
      }
    ],
    "GetBlocksAmount": [
      {
        "name": "GetBlocksAmount",
        "count": 3,
        "confidence": 0.6,
        "sample": "local maxBlocks = spellBlockContainer:GetBlocksAmount()",
        "retail": true
      }
    ],
    "ShowEmptyBlock": [
      {
        "name": "ShowEmptyBlock",
        "count": 2,
        "confidence": 0.4,
        "sample": "spellBlockContainer:ShowEmptyBlock(i)",
        "retail": true
      }
    ],
    "CreateSpellBlock": [
      {
        "name": "CreateSpellBlock",
        "count": 2,
        "confidence": 0.4,
        "sample": "function spellsTab.CreateSpellBlock(spellBlockContainer, index) --~breakdownspellblock ~create ~spellblocks",
        "retail": true
      }
    ],
    "UpdateBlocks": [
      {
        "name": "UpdateBlocks",
        "count": 4,
        "confidence": 0.8,
        "sample": "spellsTab.GetSpellBlockFrame():UpdateBlocks()",
        "retail": true
      }
    ],
    "UpdateShownSpellBlock": [
      {
        "name": "UpdateShownSpellBlock",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.UpdateShownSpellBlock()",
        "retail": true
      },
      {
        "name": "DetailsSpellBreakdownTab.UpdateShownSpellBlock",
        "count": 1,
        "confidence": 0.2,
        "sample": "DetailsSpellBreakdownTab.UpdateShownSpellBlock()",
        "retail": true
      }
    ],
    "CreateSpellBar": [
      {
        "name": "CreateSpellBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.CreateSpellBar(self, index) --~spellbar ~spellline ~spell ~create ~createline ~createspell ~createspellbar",
        "retail": true
      }
    ],
    "CreateTargetBar": [
      {
        "name": "CreateTargetBar",
        "count": 1,
        "confidence": 0.2,
        "sample": "function spellsTab.CreateTargetBar(self, index) --~create ~target ~createtarget ~targetbar",
        "retail": true
      }
    ],
    "OpenSpellBreakdownOptions": [
      {
        "name": "Details.OpenSpellBreakdownOptions",
        "count": 1,
        "confidence": 0.2,
        "sample": "function Details.OpenSpellBreakdownOptions()",
        "retail": true
      }
    ],
    "CreateCloseMinimizeButtons": [
      {
        "name": "CreateCloseMinimizeButtons",
        "count": 2,
        "confidence": 0.4,
        "sample": "mythicDungeonCharts.CreateCloseMinimizeButtons(dungeonChartFrame)",
        "retail": true
      }
    ],
    "CreateBossWidgets": [
      {
        "name": "CreateBossWidgets",
        "count": 2,
        "confidence": 0.4,
        "sample": "mythicDungeonCharts.CreateBossWidgets(dungeonChartFrame)",
        "retail": true
      }
    ],
    "ShrinkData": [
      {
        "name": "ShrinkData",
        "count": 1,
        "confidence": 0.2,
        "sample": "local reducedData = chartFrame:ShrinkData(chartData, shrinkBy)",
        "retail": true
      }
    ],
    "RefreshBossTimeline": [
      {
        "name": "RefreshBossTimeline",
        "count": 2,
        "confidence": 0.4,
        "sample": "mythicDungeonCharts.RefreshBossTimeline(dungeonChartFrame, mythicDungeonCharts.ChartTable.ElapsedTime)",
        "retail": true
      }
    ],
    "ShowSummary": [
      {
        "name": "ShowSummary",
        "count": 2,
        "confidence": 0.4,
        "sample": "function mPlus.ShowSummary()",
        "retail": true
      }
    ],
    "UpdateUnitLoot": [
      {
        "name": "UpdateUnitLoot",
        "count": 3,
        "confidence": 0.6,
        "sample": "function lootFrame.UpdateUnitLoot(playerBanner)",
        "retail": true
      }
    ],
    "StopTextDotAnimation": [
      {
        "name": "StopTextDotAnimation",
        "count": 4,
        "confidence": 0.8,
        "sample": "playerBanner:StopTextDotAnimation()",
        "retail": true
      }
    ],
    "GetLootSquare": [
      {
        "name": "GetLootSquare",
        "count": 2,
        "confidence": 0.4,
        "sample": "local lootSquare = playerBanner:GetLootSquare() --internally controls the loot square index",
        "retail": true
      }
    ],
    "IsItemBindToAccountUntilEquip": [
      {
        "name": "C_Item.IsItemBindToAccountUntilEquip",
        "count": 1,
        "confidence": 0.2,
        "sample": "local bIsAccountBound = C_Item.IsItemBindToAccountUntilEquip(itemLink)",
        "retail": true
      }
    ],
    "GameTooltip_ShowCompareItem": [
      {
        "name": "GameTooltip_ShowCompareItem",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_ShowCompareItem()",
        "retail": true
      }
    ],
    "GameTooltip_HideShoppingTooltips": [
      {
        "name": "GameTooltip_HideShoppingTooltips",
        "count": 1,
        "confidence": 0.2,
        "sample": "GameTooltip_HideShoppingTooltips(GameTooltip)",
        "retail": true
      }
    ],
    "CreatePlayerPortrait": [
      {
        "name": "CreatePlayerPortrait",
        "count": 2,
        "confidence": 0.4,
        "sample": "function Details:CreatePlayerPortrait(parent, name)",
        "retail": true
      }
    ],
    "CreateRandomBounceSettings": [
      {
        "name": "CreateRandomBounceSettings",
        "count": 2,
        "confidence": 0.4,
        "sample": "function playerBanner.BackgroundBannerTexture:CreateRandomBounceSettings()",
        "retail": true
      }
    ],
    "PlayAnimations": [
      {
        "name": "PlayAnimations",
        "count": 1,
        "confidence": 0.2,
        "sample": "function levelUpTextFrame.PlayAnimations(newLevel)",
        "retail": true
      },
      {
        "name": "LevelUpTextFrame.PlayAnimations",
        "count": 1,
        "confidence": 0.2,
        "sample": "unitBanner.LevelUpTextFrame.PlayAnimations(unitKeystoneInfo.level)",
        "retail": true
      }
    ],
    "StartTextDotAnimation": [
      {
        "name": "StartTextDotAnimation",
        "count": 2,
        "confidence": 0.4,
        "sample": "function playerBanner:StartTextDotAnimation()",
        "retail": true
      }
    ],
    "ClearLootSquares": [
      {
        "name": "ClearLootSquares",
        "count": 2,
        "confidence": 0.4,
        "sample": "function playerBanner:ClearLootSquares()",
        "retail": true
      }
    ],
    "SetFrameShakeSettings": [
      {
        "name": "SetFrameShakeSettings",
        "count": 1,
        "confidence": 0.2,
        "sample": "playerBanner.BackgroundBannerTexture:SetFrameShakeSettings(playerBanner.BackgroundBannerTexture.BounceFrameShake, playerBanner.BackgroundBannerTexture:CreateRandomBounceSettings())",
        "retail": true
      }
    ],
    "GetMicroIconForRole": [
      {
        "name": "GetMicroIconForRole",
        "count": 1,
        "confidence": 0.2,
        "sample": "playerBanner.RoleIcon:SetAtlas(GetMicroIconForRole(role), TextureKitConstants.IgnoreAtlasSize)",
        "retail": true
      }
    ]
  }
}